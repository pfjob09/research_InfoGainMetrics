Interactive Cluster Analysis
Harri Siirtola
Information Visualization Research Group at TAUCHI
Department of Computer Sciences
FIN-33014 University of Tampere
harri.siirtola@cs.uta.fi
Abstract
One of the first questions we pose when we have
a new data set to explore is: are there any obvious
groupings in the data? These clusters reveal the structure
of the data set and make the data easier to understand.
Cluster analysis is a classic problem and there are many
tools for it. The problem is that these methods often give
conflicting and too fine-grained results for practical use.
As well, they are accompanied with the danger of overinterpreting the data. Another drawback in these
techniques is that they do not usually provide an
opportunity for interactive exploration. We propose a
simple user interface and method to interactively explore
clusters in data sets. The method is based on a rapid
dynamic query and it can detect both hierarchical and
partitional clusters.

1. Introduction
Quite often, an information acquisition task involves
a moment when we ask if there are any obvious groups in
our data set. Identifying the interesting groupings in the
data makes it easier to recognize patterns, to identify
dependencies, and to get a good overview of our data.
Grouping or chunking the data is also one of the
fundamental tools used to cope with the complexity.
This classical problem of finding natural groups in a
data set is known as a clustering problem and the process
is called cluster analysis. The problem is universal and
quite domain-independent – the criterion for what is a
natural grouping is perhaps the most domain-dependent
aspect.
There is also another challenge: there are
sophisticated and efficient methods for finding a single
analytical solution with some criterion, but there are less
solutions that support the rapid and dynamic exploration
of a large set of possible solutions. This problem is also
acknowledged in the statistical community (see e.g. [1, p.
316]). Another aspect of this problem is the, so called,
effect ordering [2] of data displays – when we have a

certain task, we want to arrange the data to the effects or
trends we need to see.
This paper is concerned with the following problems
in the cluster analysis:
• How to make the process interactive.
•

How to present the relevant information to the
user.

•

How to turn the process into dynamic exploration
of possible solutions.

We propose a method based on barycenter heuristic
and represent it with Bertin’s reorderable matrix [3, 4, 5].
However, this user interface is not required for the method
– it could be any user interface for multidimensional data.

2. Background
Cluster analysis is generally concerned with
discovering groupings from cases by variables data tables.
There is a bewildering variety of different solutions to this
classical problem, see [6] for a review.
The clustering is based on the similarity or
dissimilarity between cases [1, chapter 11.2]. If we have a
dissimilarity coefficient d, then we require that
• d is symmetric, d(A, B) = d(B,A);
•

d is nonnegative; and

•

d(A,A) is zero.

For example, the Euclidian distance between ndimensional points is a dissimilarity coefficient. A
similarity coefficient has simply a reverse scale.
A property of similarity coefficients is that they can
be either
• metric:
d(A,C) d(A, B) + d(B,C) ; or
• ultrametric: d(A, B) max(d(A,C), d(B,C)).
Ultrametric dissimilarities can be represented as
dendrograms where the height of connecting lines
expresses the dissimilarity of two cases. In Figure 1, we
have a data set with nine cases and eight variables and a
dendrogram displaying the similarities between the cases.

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

Figure 1 A small data set and its column
dendrogram.
Dendrograms can also be computed for both columns
and rows of the data table. As well, the table can be
permuted to bring similar rows and columns together. The
actual data values are mapped into color scale. The
resulting heatmap can be seen in Figure 2 and it was
produced with the package mva in statistical system R [7].
A heatmap is actually a permutation matrix enhanced
with dendrograms. The presentation does include all the
necessary information for cluster analysis, however there
is no interactivity or chance for exploration.
Dendrograms and heatmaps are used extensively in
the visualization of microarray data of DNA sequences
(see e.g. [8]). The most important task in this domain is
the search of similar sub-dendrograms, or recognizing
similar genes. The volume of data in these applications is
huge, and consequently, the nature of interaction is
usually different than in the proposed method.
Allen et al. [9] have explored how to make
interactive dendrograms to visualize document sets
returned in response to a query. In their implementation,
the interaction is used to indicate individual document’s
location in the dendrogram.
Koren and Harel [10] have considered the
visualization of dendrograms with fully synchronized lowlevel embedding. With their two linked representations, it
is possible to explore the structure of a (static)
dendrogram.

3. The method
One possible user interface for clustering can be seen
in Figure 3. There are three elements in the user interface:
a slider for setting the threshold for the required similarity,
the similarity matrix for columns on the left, and the

Figure 2 A small data set and its heatmap.

Figure 3 The user interface: the column
similarity matrix on the left and the data matrix
on the right.
actual data matrix as a reorderable matrix on the right.
The reorderable matrix represents the data table by
replacing the values with appropriately sized rectangles on
each row. The smallest value on the row is an empty
rectangle and the largest value is displayed as a black
rectangle filling the available space.
The similarity matrix is a cross-tabulation of all
possible column pairs, and the metric value is computed
for each pair. In this case, when the actual data is
represented as a reorderable matrix with percentage
values, the Euclidian distance is an appropriate choice for
column distances. For comparisons between rows, the
correlation coefficient is often a reasonable choice. The
method itself does not limit the choice of the metric. The
similarity matrix is also a reorderable matrix and the
column orders of two matrices are linked together.
The user interaction is simple: the user moves the
threshold slider and observes the proposed clustering. As
the slider moves, the application rearranges the similarity
matrix with barycenter heuristic so that the values below
the given threshold are moved towards the diagonal.
Because of the column order linking, this will move the
similar columns under the threshold towards each other in
the data view. This effect can be seen in Figure 4. Since
the heuristic only approximates the correct solution, it is
possible to see several clustering alternatives for the same
setting.
The idea in barycenter heuristic is straightforward
[11, 12]. We treat the similarity matrix as a connection
matrix for a graph, where each cell below the threshold
value is a connection. Then we order the vertices
according to the averages of their adjacent vertices in the
opposite vertex set. Repeating this procedure will drive us
towards fewer edge crossings in the connection matrix,
and in effect, moves the grey (under the threshold) cells
toward the diagonal.
The discovered similar cases are highlighted by
surrounding them with a red squares in the column

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

Figure 6 Limiting the reordering to a part of
the matrix.
Figure
Figure 44 The
The effect
effect of
of tightening
tightening the
the
similarity
requirement.
similarity requirement.
similarity view, and the same information is shown by the
alternating red line above the cases in the data table view.
The barycenter heuristic approximates the optimal column
order rapidly and makes it possible to explore a large
number of clustering choices in a short time. In Figure 5,
the similarity requirement has been tightened further,
causing move to the lower level of the corresponding
dendrogram. By comparing Figures 2, 4, and 3, it is
possible to see the connection between this method and
the heatmap.
The minimum and maximum settings of the threshold
slider correspond to placing all cases in groups of their
own, and placing all cases in the same group, respectively.
The exploration can also be limited to a rectangular
selection in the data matrix, as shown in Figure 6. The
selection can contain a subset of cases or variables as long
as it has a rectangular shape.
The method can be used to explore both hierarchic
and partitional clustering of a data set. When the proposed
clusters overlap, it is indicated by overlapping squares in
the left view and by overlying lines in the right view.
The problem of finding a certain kind of optimal
arrangement for a reorderable matrix is actually a hard
problem, as we [13] have earlier shown. Also,
Falguerolles et al. [14] have discussed the matter.

simple data matrix with strong groupings. The method is
easier to evaluate if we see how it behaves with more
ecological data.
Bertin’s hotel example [4, p. 3] is non-trivial because
it does not have any obvious groups. The data set contains
monthly statistics from a French hotel and contains mainly
percentages. Bertin uses this example in Figure 7 as a
running example in the introductory chapter of his book
about graphic information processing.
As can be seen from Figure 7, only three larger
groups emerge if we search clusters from the whole table.
These months that have overall similarity are the summer
months (7, 8), the beginning of the year (1, 2), and the
early/late summer periods (5, 6, 9). Another example is if
we look where the clients are coming from, as has been
done in Figure 8.
Now there are two major clusters, the summer (5-8)
and the winter (11-3). Two autumn months and April do
not seem to fit in either of these groups. In Figure 9, we
have clustered the data set according to the age of clients.
In the other half of the year (5-9, 11), the clients are from
age group 35 and above, and the rest of the year is in four
smaller clusters.
In Figure 10 we have an example of applying the
method to a subset of cases and variables. The example
shows that, in this period, the summer months are most
homogeneous when clustered according to the

4. Example
The running example in the previous section had a

Figure 5 Moving to the lower level of
dendrogram.

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

Figure 7 Monthly data from a French hotel.

Figure 8 The monthly geographical
distribution of clients.
geographical origin and age group of clients.
Extracting the kind of cluster information as we have
done here would be considerably slower if accomplished
using only matrix permutation by manual sort and drag
operations.

5. Empirical study
In our previous study [15], we got evidence that the
earlier prototype of the proposed clustering method is
about 60% faster both in task execution time and task
correctness when we compare it to the traditional
permutation matrix interface. That experiment was
conducted with domain-independent, non-ecological data.
In this study, we decided to evaluate the interactive
clustering by implementing two different prototype user
interfaces as front-ends, and by using the same clustering
engine as a back-end. The first interface is the permutation
matrix interface presented earlier in this paper, and the
second is the star glyph interface in Figure 11.
The Star Glyph visualization [16, 17] , which is also
often called a circle diagram, represent each multidimensional data value with a single glyph. The
dimensions are represented by line segments that start
from a point at uniformly separated angles, and the length

Figure 10 Subset of cases and variables.
of the line indicates the value of the corresponding
variable. The endpoints of the lines are connected and
form an easily recognizable polygonal shape.
The prototype interface for creating Star Glyph
visualizations was implemented with the following
features: variable positions in the glyph can be rearranged
by dragging them from the legend, the data item positions
can be rearranged by dragging them from the
visualization, and the data values can be inspected by
clicking them from the legend. Also, the glyphs are
transparent, and they can be compared by hovering them
on top of each other.
Both interfaces had exactly the same kind of slider
for controlling the automated clustering. With these
rearrangement capabilities, the two interfaces provide a
similar set of features in this respect. The major difference
is that only the permutation matrix interface displays the
sensitivity information [18, p. 30], or in other words, if a
small slider adjustment would provide a different
clustering. The two user interfaces are both designed to
display multidimensional data items in a visual form that
can be used for comparisons of data items. As a cognitive
task, the comparison of multidimensional data values to
each other is challenging.

Figure 9 The age distribution of clients.

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

Figure 11 The Star Glyph interface.

5.1 Participants
Twelve volunteer participants (5 women, 7 men)
were recruited from the university. All participants were
senior undergraduate or graduate students (median of age
27, range 23-31) from the department of computer science
and had a considerable experience in using computers
(median of daily use 7 years, range 5-17).

5.2 Apparatus
The two interface prototypes were implemented in
Java using the GL4Java library for OpenGL graphics. The
experiment was performed with a 15” Apple iBook
computer having a 1024 768 display resolution and a
Microsoft IntelliMouse Optical mouse.

5.3 Procedure
The test tasks involved clustering a data set as a
whole, according to a subset of variables, or according to
a subset of cases, or both. The user interface had one text
field for the task and another for the answer to be typed in.
The participant moved to the next task by pressing a
button. There was no time limit to solve a task. The
instructions were to solve the tasks “as quickly as possible
while trying not to make mistakes”.
The participants had three guided training tasks, three
tasks with artificial data, and seven tasks with the Hotel
data table. This procedure was repeated for both
interfaces.
Six participants performed the tasks with Star Glyph
interface first, followed by tasks with the matrix interface.
The other half reversed the order. There were two sets of
tasks with structural equality and randomized task order,
and the sets were counter-balanced with user interfaces,
requiring the number participants to be a multiple of four.

participants commented during the experiment and in the
questionnaire.

6.1 Measurements
The grand mean for task execution time was 173
seconds, or 2 minutes and 53 seconds, and the times for
matrix and glyph interfaces were 160 and 186,
respectively. The overall difference between user
interfaces was statistically significant (F1,11 = 6.24, p <
.05). However, the analysis of variance reveals that we
have significant interactions: Group by UI (F1,11 = 31.38,
p < .001) and Task by UI (F1,11 = 2.99, p < .05). The latter
was expected, since some of the tasks are clearly more
easier on one of the interfaces, but the first interaction was
not anticipated. Because of the learning effect, the second
set of tasks is always performed faster. However, the
Glyph UI was considerably slower if it was the first
condition (Figure 12, Group A). There are probably two
reasons for this. According to the pre-test questionnaire,
the participants were more familiar with the permutation
interface. The other reason is the missing sensitivity
information from the Glyph user interface. Participants in
Group B, who did the Matrix condition first, had
developed a trust that the slider would do the ‘right thing’.
The accuracy of task performance did not reveal any
statistically significant difference. Since the tasks were
quite simple, there were only 7 give-ups out of 168 tasks.
A task was considered solved if the answer, plus or minus
one item transition, could be found in any of the possible
clusters in the cluster hierarchy.

6.2 Questionnaire
Participants were requested to rate their preference

5.4 Design
The experiment was treated as 2
2
7 mixed
design. Group was a between-subjects factor with two
levels (Group A vs. Group B, six participants per group).
The within-subjects factors were UI with two levels
(Matrix vs. Glyph) and Task with 7 levels. The total
amount of input was 6 participants/group 2 groups 2
user interfaces 7 tasks = 168 tasks.
The task execution time, the number of cluster
approximations computed, and the answers given were
recorded by the program.

6. Results and discussion
The results can be divided into the following areas:
what was recorded by the instrumentation, and what the

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

Figure 12 Interaction of Group by UI.

Acknowledgements
This work was supported by the Academy of Finland
(project 178099) and by the TISE graduate school.

References
[1]
[2]

[3]
[4]
[5]

Figure 13 Subjective ratings.
between the two interfaces on the following aspects:
general simplicity of use, simplicity of single and multivariable comparisons, general pleasantness of use, and
ease and speed of seeking similar cases. In Figure 13, the
users are divided into two groups according to their
preferred user interface, and they rate the aforementioned
aspects between the user interfaces. The two most
dispersed answers show that the single-attribute searches
were difficult on the glyph interface, and that multiattribute comparisons are not easy on the matrix interface.
Since the opinions on the preferred user interface
were strong and evenly distributed (6 and 6), the
differences between these two groups were also inspected.
It turns out that those who preferred the glyph interface
were consistently slower, 192 versus 154 seconds (t = 2.4,
p < .05), and that those who preferred the matrix interface
explored a greater number of arrangements, 297 versus
460 (t = -2.4, p < .05). In other words, increasing the use
of the adjustment slider resulted in faster performance.

[6]

[7]

[8]

[9]

[10]

[11]
[12]
[13]

Conclusions
The proposed method does allow rapid and dynamic
exploration of cluster information. Showing the proximity
information as a permutation matrix allows seeing the
sensitivity of the chosen threshold: if there are grey values
outside the squares, a small change in the slider value
could change the clusters. This information seems to be
relevant for a successful interface.
In conclusion, the proposed interactive clustering
seems to be a useful addition to the toolset for exploration
of multidimensional data. Further work is needed to study
the limits of the proposed method, and to experiment with
the selection of possible user interfaces.

[14]

[15]

[16]

[17]

[18]

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

W. N. Venables and B. D. Ripley, Modern applied
statistics with S, 4th ed. New York: Springer, 2002.
M. Friendly, "Effect ordering for data displays,"
Computational Statistics & Data Analysis, vol. 43, pp.
509-539, 2003.
J. Bertin, Semiology of graphics. Madison, Wis.:
University of Wisconsin Press, 1983.
J. Bertin, Graphics and graphic information-processing.
Berlin ; New York: de Gruyter, 1981.
J. Bertin, "Matrix theory of graphics," in Information
Design Journal, vol. 10, 2001, pp. 5-19.
A. K. Jain, M. N. Murty, and P. J. Flynn, "Data clustering:
a review," ACM Computing Surveys, vol. 31, pp. 264-323,
1999.
"R: A language and environment for statistical
computing." Vienna, Austria: R Development Core Team,
R Foundation for Statistical Computing, 2003.
J. Seo and B. Shneiderman, "Interactively Exploring
Hierarchical Clustering Results," Computer, vol. 35, pp.
80-86, 2002.
R. B. Allen, P. Obry, and M. Littman, "An interface for
navigating clustered document sets returned by queries,"
Conference on Supporting Group Work, Milpitas,
California, United States, 1993.
Y. Koren and D. Harel, "A two-way visualization method
for clustered data," Proceedings of the ninth ACM
SIGKDD international conference on Knowledge
discovery and data mining, Washington, DC, USA, 2003.
P. Eades and C. Wormald, "Edge crossings of bipartite
graphs," Algorithmica, pp. 379-403, 1994.
H. Siirtola and E. Mäkinen, "The barycenter heuristic and
the Reorderable Matrix," Manuscript, 2003.
E. Mäkinen and H. Siirtola, "Reordering the Reorderable
Matrix as an Algorithmic Problem," in Theory and
Application of Diagrams (Diagrams 2000), Lecture Notes
in Artificial Intelligence 1889, M. Anderson, P. Cheng, and
V. Haarslev, Eds.: Springer-Verlag, 2000, pp. 453-467.
A. d. Falguerolles, F. Friedrich, and G. Sawitzki, "A tribute
to J. Bertin's graphical data analysis," SoftStat '97 Advances in Statistical Software, 1997.
H. Siirtola and E. Mäkinen, "Constructing and
Reconstructing the Reorderable Matrix," Manuscript,
2004.
J. H. Siegel, E. J. Farrell, R. M. Goldwyn, and H. P.
Friedman, "The surgical implication of physiologic
patterns in myocardial infarction shock," Surgery, vol. 72,
pp. 126-141, 1972.
H. P. Friedman, E. J. Farrell, R. M. Goldwyn, M. Miller,
and J. H. Siegel, "A graphic way of describing changing
multivariate patterns," Proceedings Sixth Interface
Symposium on Computer Science and Statistics, 1972.
R. Spence, Information Visualization: ACM Press, 2001.

