New Methods for Visual Information Seeking Through Video Browsing
Wolfgang Hürst, Georg Götz, Tobias Lauer
Institut für Informatik, Albert-Ludwigs-Universität, D-79110 Freiburg, Germany
huerst@informatik.uni-freiburg.de, mail@georg-goetz.de, lauer@informatik.uni-freiburg.de
Abstract
In this paper we introduce new approaches for visual
information seeking in video documents. We argue that a
discrete visualization of continuous media streams via
static keyframes is not sufficient to fulfill all information
needs and therefore additional, more interactive
techniques are required. We extend the concept of elastic
interfaces, which has been used successfully with discrete
documents, by applying it to continuous data streams. In
addition, we propose a different integration of the elastic
browsing functionality called “elastic panning”. A first
usability test is presented in order to prove its feasibility
and to highlight its main advantages, namely the ability to
access any position within a file independent of its length,
and the smoother visual feedback during navigation
compared to a standard slider interface.

1. Introduction
One of the main characteristics of multimedia
documents is that they do not only contain discrete, timeindependent data (such as text, images, or graphics), but
continuous, time-dependent media streams (such as audio
or video) as well. Recent advances in recording, storing,
and delivering multimedia documents, especially digital
video, ease the production of and access to such data
enormously. The result is a tremendous amount of
information coded in continuous media streams which are
accessible anytime anywhere via worldwide network
connections. However, due to the linear and timedependent nature of video signals, browsing them is much
harder than skimming static data, such as text documents.
There is no equivalent for continuous data to the ability to
quickly scan over some text or images. Hence, there is an
increasing need for the visualization of the information
contained in video signals in order to improve user
browsing and information seeking.
Most approaches for the visualization of video data try
to represent important information from the continuous
data stream via a discrete signal, for example, by
segmenting the file into shots or scenes and representing

each scene with a static keyframe that is chosen to best
represent the corresponding content (see, for example, the
overview given by Girgensohn et al. [3]). However, such
visualization
approaches
can
have
significant
disadvantages, most importantly that they do not
represent dynamic information that is contained in the
video signal. For example, the moves of players in a
football game are hard to visualize via static images but
can be observed and identified much easier by watching a
short segment of the dynamically changing signal. In
addition, discrete representations of a video signal make
interaction less flexible since entry points into the
document are generally connected to the presented
keyframes. Therefore, navigation within the data during
replay is restricted to a fixed set of predefined positions.
The determination of these positions (or the
corresponding keyframes, respectively) is generally done
by the system based on the signal's content. However,
which part of the signal is relevant for a user in a
particular situation and thus worth visualizing does not
only depend on the signal's content but also on the user's
context, which in most of the cases is either unknown to
the system or imprecisely specified (e.g., through a short
and ambiguous search engine query). Therefore, in
addition to such techniques for static browsing via
extracted keyframes, other approaches exist that rely on
dynamic browsing of the corresponding content. Those
can usually be classified as either content-compressing or
time-compressing. In content-compressing approaches,
particular segments are extracted from the data stream
and replayed as short summaries. While such techniques
are useful in many cases, they have similar disadvantages
as mentioned above for static browsing, namely that the
system preselects some information that is assumed to be
relevant for data browsing. Time-compressing techniques
on the other hand leave the content of the signal
unchanged but enable the user to control which part of the
document is replayed at which time. This can be done by
setting the replay speed to a specific (i.e., higher) value,
similar to the "fast forward" feature of traditional,
analogue VCRs. In addition, common media players
generally offer a time-based slider that allows users to
access any position within the document by moving the

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

Discrete document, e.g. text
Navigation in a
discrete document
can be interpreted
as moving the
document behind
the window up
or down

Continuous document, e.g. video

Navigation in a continuous document
can be interpreted as moving the
film strip behind the player window
to the left or to the right

Autopanning
Users browse the data
by clicking directly on the
document window (usually
w. middle mouse button)
in order to control the
document’s panning speed
(speed-based browsing)

Figure 1. Discrete vs. continuous documents
slider knob along the timeline. If the corresponding player
and the used data format support real-time random access
(i.e., if visual changes are displayed immediately as
response to movements of the slider knob), such a slider
behaves similar to a scrollbar for discrete data and is a
very helpful tool to quickly browse the document's
content.
Both of these interaction concepts, faster replay as well
as time-based navigation with sliders, are very useful and
intuitive for visual information seeking in continuous
video documents. However, both of them have significant
disadvantages as well. We illustrate this in Section 2
where we compare visual skimming of discrete signals to
browsing of continuous data and review related work,
most importantly the concept of elastic interfaces. Based
on this discussion, we introduce a new approach for
interactive, visual information seeking through video
browsing in Section 3. First, we apply the elastic interface
concept to video navigation. Then, we introduce a new
interaction approach called elastic panning, and finally we
present an initial usability study that proves the feasibility
of the proposed technique.

2. Interfaces for visual data browsing
When studying the problems related to interactive
dynamic video browsing, a lot can be learned by looking
at how visual browsing of discrete documents is usually
done. If one looks at the data as illustrated in Figure 1, the
interaction concepts for both kind of media are quite
similar. For discrete documents, the two most popular
interfaces for browsing are scrollbars and autopanning
(compare Figure 2). Scrollbars allow you to set the
currently visible part of a document to any position. This
kind of interaction is comparable to the usage of sliders in
context with continuous documents. With autopanning,
users do not explicitly select the currently visible part of
the data, but control the scrolling speed with which one
navigates through the document. Generally, autopanning
is initiated through a mouse click anywhere into the
window (usually with the middle mouse button) and the
further the cursor moves away from this initial clicking
position, the faster the document's content is moving
behind the window. Looking at continuous media as

Scrollbars
Users browse the data
by moving the scrollbar
knob in order to change
the currently visible
part of the document
(position-based
browsing)

Figure 2. Browsing discrete documents
illustrated in Figure 1 makes autopanning comparable to
faster replay of continuous data streams; the higher the
replay speed is set, the faster the film strip is moving
behind the player's window. Both of these techniques can
thus be classified as speed-based browsing, while
scrollbars or sliders are often described as tools for
position-based browsing.
Although these approaches are commonly used and
very helpful for visual information seeking, they
introduce several problems as well. One of the most
critical issues with autopanning is that people easily tend
to get lost in the document. This is partly due to the fact
that here the interaction does not take place in context
with a slider widget – which indicates the current position
in the document – but with a separate widget on the
corresponding window's surface – which is in no way
related to the current position of the document. In
addition, when identifying a specific target of interest
while skimming the data at a rather high velocity, users
are often not able to react (i.e. slow down) fast enough in
order to place the document at the corresponding position.
This overshooting often results in an alternating change of
scrolling directions around the identified target. Igarashi
and Hinckley [4] introduce a technique to improve
autopanning of discrete documents by combining it with
automatic zooming in order to solve these problems.
Unfortunately, their approach assumes a static
representation of the signal and thus cannot be applied to
faster replay of continuous data streams.
One of the main problems with scrollbars and sliders is
that they do not scale to large documents because their
size is limited by the screen resolution. Therefore, the
smallest unit to move the scrollbar or slider knob,
respectively (i.e., one pixel on the screen), can already
represent a huge step in a larger document. Approaches
exist to solve this problem in context with video editing,
however, what works for video editing does not
necessarily work for video browsing (and vice versa)
because editing usually deals with a static representation
of the continuous media stream. One of the few
approaches to solve the scaling problem in context with
video during replay is the PVslider introduced by Ramos
and Balakrishnan [6]. Here, slower navigation is enabled
by using a finer scale the more the mouse pointer moves

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

(a)

(b) Mapping of pointer/knob-distance to scrolling speed

Distance d1

Speed

Distance d2

Distance
d2

d1

Figure 3. Illustration of the FineSlider interface
vertically away from the slider widget. In addition, after
the pointer is moved horizontally over a specific distance,
scrolling behavior changes to a speed-based navigation
which is similar to autopanning of discrete data. In the
context of discrete documents, maybe the most prominent
approach to solve this problem is the Alphaslider [1],
where the scrollbar knob is split into three different areas
each of which allows for browsing at a different
granularity level. The Popup Vernier introduced by
Ayatsuka et al. [2] enables a user to manually switch
between different scrolling granularities using additional
buttons or keys. The FineSlider [5] introduces the concept
of Elastic Interfaces in order to enable slower and faster
browsing independent of document length. Here, scrolling
speed adapts proportionally to the distance between the
mouse pointer on the slider's scale and the current
position of the scrollbar or slider knob, respectively. If the
distance between slider knob and the mouse pointer gets
larger (compare Figure 3a, top) then scrolling speed
increases, if it gets smaller (compare Figure 3a, bottom)
then browsing gets slower. The mapping of the
knob/pointer-distance to the browsing speed is illustrated
in Figure 3b. Hence, the FineSlider integrates speed-based
browsing into a traditional slider, i.e. a position-based
interface. The approach is called "elastic" since the
behavior can be explained with a rubber band metaphor
where the connection between slider knob and mouse
pointer is seen as a rubber band: The more this band is
stretched, the stronger the force between the knob and the
mouse pointer gets, which makes the knob move faster
and therefore speeds up scrolling in the document.
In the following section we take up the idea of elastic
browsing that was realized in the FineSlider in context
with discrete data [5]. First, we discuss its feasibility for
video browsing, then we introduce a new approach that
builds on this concept but circumvents some of its major
problems.

application for drawing operations in a 2-dimensional
space has been discussed as well [5]. However, based on
the interpretation presented in Figure 1, we claim that it is
possible to apply the basic concept of an elastic slider to
browsing of continuous media streams as well.

3. Video browsing with elastic interfaces

Video Browsing with Elastic Sliders. In a first
attempt, we applied the FineSlider's concept of an elastic
interface to video browsing by integrating it into a
standard slider interface. A snapshot of the
implementation is shown in Figure 4a. Informal usability
evaluations with this interface design proved the
transferability of the basic idea of the rubber band
metaphor from navigation in discrete data to browsing of
continuous documents. Using the elastic extension of the
slider, users can easily alternate between very fast
browsing of the content (by moving the mouse pointer
quickly away from the slider knob) and very fine, slowmotion-like navigation (by moving the mouse pointer
closer to the slider knob). Since the scrolling behavior
only depends on the distance between the slider knob and
the mouse pointer and not on the document’s length, users
are even able to navigate from each single frame of the
video to the next one. However, we also identified two
significant problems: First, we observed that some users
consider it as less intuitive to modify the scrolling speed
instead of changing the position within the document
directly when using an interface which resembles a
regular, position-based slider. A similar argument was
given by Ayatsuka et al. [2] in context with discrete
documents. The second disadvantage is that accidental
changes of the scrolling direction can happen quite easily.
For example, assume a user discovers something
interesting while browsing at a high speed. In order to
slow down, the mouse pointer has to be moved towards
the slider knob which itself moves towards the slider.
Since it is very likely that the user looks at the document
rather than at the slider knob, it happens quite easily that
the mouse pointer accidentally moves behind the knob
resulting in an unwanted change of scrolling direction.

The FineSlider as illustrated in Figure 3 was originally
introduced by Masui et al. [5] to solve the scalability
problem in context with discrete documents. Its

Introduction of Elastic Panning. Both of the
problems identified above, the lack of intuitiveness as
well as accidental changes of direction, result mainly

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

(a)

(b)

(c)

(Enlargement of the
area around the knob)

(Enlargement of the
area around the knob)

Figure 4. Different approaches and implementations for video browsing; (a) FineSlider, (b) Elastic
panning as used in the evaluation, (c) Revised elastic panning interface
(a)
Traditional
Slider

Document
window
featuring
elastic
panning

(b)
Horizontal movements

Initial click anywhere on
the document window

Scrolling is caused by
horizontal movements
of the mouse pointer

The initial clicking
position is associated
with the current
position on the
original slider
scale

Scrolling speed depends on the
distance between knob and mouse

Vertical movements
Moving the mouse
vertically makes the
illustration of the
scrollbar on the
screen move but
does not influence
the overall scrolling
behavior

Figure 5. Illustration of the elastic panning approach
because the FineSlider integrates a speed-based
navigation concept into a position-based interface. In
order to avoid those problems, we introduce a new
interaction design which goes the other way round:
Instead of integrating speed-modification into a positionbased interface, we combine the FineSlider's interaction
concept with the interface style of autopanning, which is
based on speed-modification by default.
In our approach, called Elastic Panning, browsing
functionality is evoked when a user clicks directly on the
window that shows the document's content – similar to
the initiation of autopanning. The slider knob icon which
appears at this initial clicking position is associated with
the current position of the original slider knob, i.e., with
the current position in the document (compare Figure 5a).
Moving the mouse pointer to the right or left enables
forward or backward browsing, respectively, on a virtual
scale that extends to both sides of the slider knob
(compare Figure 5b). Browsing behavior is similar to the
original FineSlider: Speed is slow if the distance between
slider knob and mouse pointer is small and gets faster if
the distance increases. Distance is only measured along
the virtual scale, mouse movements that are orthogonal to
the slider's orientation make the visual representation of
the virtual scrollbar and the slider knob on the window
move vertically but do not influence browsing behavior.

Both ends of the virtual scale are matched to the borders
of the corresponding window. This mapping together with
the association of the initial clicking position with the
actual position in the document at that time can result in a
change of the granularity of the slider's scale. For this
reason, we do not represent the actual scale values but
illustrate the current position in the document via a red
text label next to the slider knob. Figure 4b shows a
snapshot of the actual implementation. The modification
of the scale is uncritical in our case because of the elastic
interface concept whose basic idea is, in fact, to make
browsing behavior independent of the document length
and thus of the resolution of the scale.
By freeing the elastic browsing functionality offered
by the FineSlider from its connection to the slider widget
our approach becomes very similar to autopanning. We
argue that this resemblance makes it more intuitive than
the original FineSlider, since both, the rubber band
metaphor used here as well as autopanning are speedbased navigation techniques by default. However, there
are some small but significant differences between elastic
panning and autopanning. First, with autopanning the
browsing behavior is not "elastic", i.e. it only depends on
the current position of the mouse pointer and a fixed point
of reference, the initial clicking position. In our approach,
both, the mouse pointer and the slider knob influence the

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

distance and therefore the corresponding scrolling speed.
This makes it easier to slow down once a specific part of
interest in the video is located, thus reducing the problem
of overshooting. In addition, with elastic panning the
current position in the document is always indicated
through the visualization of the slider knob, making it less
likely that the users get lost in the document. Since both,
document content as well as slider knob are within the
current focus point of the user, accidental changes in
scrolling direction are less likely to happen compared to
the original FineSlider.
In order to verify the arguments given above we set up
an informal usability test with the implementation shown
in Figure 4b. The main goal of this initial study is to
verify the feasibility of the proposed concept as well as to
identify flaws in the interface design.
Initial usability study. Ten users were recruited to
participate in a first usability test of the proposed user
interface design. All subjects were experienced computer
users, well trained in using a mouse but not very familiar
with video browsing. They were mainly faculty members
or students from our university, but none of them had
seen or used this interface or any interface that features
elastic browsing behavior before. We asked them to test
the interface and comment on its usability based on a
typical set of usability related questions. In addition, they
had to solve one search task where they were given a still
image from a video and asked to find the corresponding
scene in the movie clip. In order to evaluate the ease of
use of elastic panning, we wanted to compare it to video
browsing with a standard slider interface. For this, we had
to restrict the file size to two minutes, since the scenes
that the users had to find were generally very short –
sometimes just a few frames, such as a person passing by.
With any longer file it would have been impossible to
access the requested scenes with the standard slider due to
the scalability problem described above. The used video
clips were created by adding together eight unrelated clips
of 15 seconds length. Therefore, solving the questions
required a rather quick scanning of the file – in order to
find the relevant scene – and then a very slow navigation
– in order to find the exact position within that scene.
Each user had to solve two tasks, one for each interface.
Different documents were used for each task. The order
of interfaces as well as the mapping of documentquestion-pair to interface was counter-balanced across the
participants. The users were asked to find the
corresponding position in the file as soon as possible.
Every interaction with the interface was logged. A laptop
computer (screen resolution: 1024x768) and an optical
mouse were used for the experiments. The size of the
video window was 320x240 pixels. After a short
introduction, the users were given unlimited time to
practise and try the interfaces with a separate training
document. Afterwards, the tasks had to be performed for

each of the two interfaces. Each video was unknown to
the users, the only thing they knew about the content was
the still image presented to them. All test users were
interviewed and had to fill out one questionnaire per
interface after the evaluation.
Results and Discussion. Despite the rather informal
character of this first usability study, we can conclude the
feasibility of the proposed interaction design. All
participants were able to use it for video browsing without
any need for a larger training period. We did not observe
any accidental direction changes as with the original
interface design (compare Figure 4a), nor did any of the
users comment on this issue. Most subjects considered the
interface as intuitive and easy to learn and operate. All of
them were able to solve the task in a reasonable amount
of time without any problems. Compared to the tasks
solved with the standard slider interface, elastic panning
performed a little slower, i.e. a speedup factor1 of 0.263
was achieved compared to 0.23 with the standard slider
interface. It should be noted that these search tasks were
only performed to support the users in making their
usability judgments about the interfaces and we do not
expect to draw any statistically reliable data from it due to
the small number of samples. In fact, this difference did
not turn out to be statistically significant (t = -0.972, df =
9, p = 0.356 with a standard paired t-test). Nevertheless,
those quantitative measures argue for our intuitive
expectation that position-based navigation is usually
faster than any speed-based navigation approach,
including autopanning and elastic panning. The reason for
this assumption is that a speed-based navigation forces a
user first to accelerate and then to slow down scrolling
speed once the target position comes into reach, while
with a position-based approach, users can start and stop
navigation more abruptly. However, although positionbased navigation might be faster in some situations, its
main problem is that direct access of any position is often
impossible due to the scaling problem described above.
Elastic panning on the other hand allows you to access
any position independent of the document length while
still being reasonably fast.
In the tests performed here, all tasks were solvable
with both interfaces due to the restriction of the file size
to two minutes, as described above. However, the small
number of pixels on the slider scale made the player drop
a considerable large number of frames during scrolling,
even when the knob of the original slider was moved very
slowly. This resulted in a jerky visualization, even with
the short documents used in our experiments. Most users
1

Since we used five different documents and several target positions
which were uniformly distributed across the documents, we do not
compare absolute search time here but the speedup factor instead, which
is defined as the time t it took a user to locate a target divided by the
time ttarget it would have taken to access the target position by watching
the file at normal replay speed.

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

disliked these effects and said they preferred the smooth,
continuous movement of the content when using elastic
panning instead. This conforms with arguments given by
Ayatsuka et al. [2] for scanning discrete data; based on
Fitt's law they conclude that smoother transitions are
generally better for usability when making a transition
from coarse to fine granular dragging. The jerky behavior
of the video image during scrolling is the main reason
why most participants strongly preferred elastic panning
to the standard slider interface in our test. 70% of the
subjects said that they would generally favor elastic
panning for information seeking, while 20% noted that it
depends on the situation which interaction mode they
would prefer. Only one subject considered both
approaches as equally well. Rated on a scale from 0 (=
worst rating) to 9 (= best rating), the average rating for
the elastic panning approach was 7 compared to 4.9 for
the standard slider interface. The participants considered
elastic panning to be easier to use and more powerful.
Some users noted that they particularly liked the ability to
quickly navigate the file and then easily slow down once
they get closer to a target position. In addition, some users
explicitly stated that they liked the idea of clicking
directly on the document instead of using a separate slider
widget for browsing, since they did not have to
continuously change between looking at the video and the
slider widget but could focus on the player window all the
time. The only negative comments concerned the
visualization. The illustration of the virtual scrollbar on
top of the video was generally not considered to be a
problem, since it was possible to move it up or down
during scrolling by moving the mouse vertically.
However, the number indicating the current position
(compare the enlargement shown in Figure 4b) was hard
to read and most users had problems understanding its
meaning. Therefore we redesigned the appearance of the
widgets that illustrate elastic panning based on the users'
comments and proposals. In order to make the virtual
scrollbar more meaningful and to improve its visibility,
we replaced the text label with three text boxes showing
the initial clicking position, the current position in the
document, and the end of the file in scrolling direction,
respectively. Rather than absolute values, the text labels
indicate the relative position in the document (in
percentage). The revised interface design is illustrated in
Figure 4c.

changing information that is hard, if not impossible to
visualize with a typical static representation of a video
using automatically extracted keyframes. The main
advantages of elastic interfaces compared to standard
sliders include that it works for any file size and offers a
much smoother visual feedback, which is especially
important for slow browsing. The method of elastic
panning introduced by us circumvents some of the
problems identified with a regular elastic slider, namely,
its lack of intuitivity and the frequent appearance of
accidental direction changes. Compared to autopanning,
our approach makes it much easier to slow down quickly
because the scrolling speed depends on both, user input as
well as the current position of the slider knob. This, in
combination with the visualization of the moving slider
knob on the screen make problems such as overshooting
less likely. Our current work includes a detailed empirical
evaluation of the proposed interface design. While the
rather specific user population of the informal study
presented here (i.e., students and computer science
professionals), was appropriate to evaluate the overall
feasibility of the approach, it will be very interesting to
see how other user groups, especially less experienced
computer users, will react to the system.

5. References
[1]

[2]

[3]

[4]

[5]

[6]

4. Summary
In the preceding sections we introduced and discussed
the concept of elastic interfaces and its application to
interactive video browsing. An initial usability study
demonstrated the feasibility of the overall approach. In
addition, it showed that it offers good opportunities for
visual information seeking, especially for continuously

C. Ahlberg and B. Shneiderman. The Alphaslider: A
compact and rapid selector. In Proceedings of the SIGCHI
conference on Human factors in computing systems, ACM
Press, pp. 365-371, 1994
Y. Ayatsuka, J. Rekimoto, and S. Matsuoka. Popup
Vernier: A tool for sub-pixel-pitch dragging with smooth
mode transition. In Proceedings of the 11th annual ACM
symposium on User interface software and technology,
ACM Press, pp. 39-48, 1998.
A. Girgensohn, J. Boreczky, and L. Wilcox. KeyframeBased User Interfaces for Digital Video. In IEEE
Computer, Vol. 34(9), pp. 61-67, 2001.
T. Igarashi and K. Hinckley. Speed-dependent automatic
zooming for browsing large documents. In Proceedings of
the 13th annual ACM symposium on User interface
software and technology, ACM Press, pp. 139-148, 2000.
T. Masui, K. Kashiwagi, G.R. Borden IV. Elastic
graphical interfaces for precise data manipulation. In
Conference companion on Human factors in computing
systems, ACM Press, pp. 143-144, 1995.
G. Ramos and R. Balakrishnan. Fluid interaction
techniques for the control and annotation of digital video.
In Proceedings of the 16th annual ACM symposium on
User interface software and technology, ACM Press, pp.
105-114, 2003.

Acknowledgments. This research was supported by the
German Research Foundation (DFG) as part of the
research initiative V3D2 ("Distributed Processing and
Delivery of Digital Documents").

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

