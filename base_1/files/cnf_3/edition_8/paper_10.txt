Modelling techniques for enhanced realism in an Open Surgery simulation
P. Gasson1

R.J. Lapeer1

A.D. Linney2

School Of Computing Sciences, University of East Anglia, Norwich, UK1
Dept. of Medical Physics and Bioengineering, University College London, UK2
E-mail: paul.gasson@uea.ac.uk,rjal@cmp.uea.ac.uk,alf@medphys.ucl.ac.uk
Abstract
This paper is a continuation of work originating from the
simulation of Inguinal Hernia Repair. Whilst the majority of
research in the medical simulation ﬁeld is for minimally invasive techniques, the objective of our research is to develop a general framework for open surgery simulation. We
focus here on the ﬁner details of implementing such a simulator using advanced rendering techniques, collision detection and haptic feedback.

as it is a common procedure and encapsulates the main issues of open surgery simulation: interaction of multiple tissue layers, cutting, clamping, suturing, etc. In the remainder
of this paper, we report on a number of implementations to
enhance the realism of the simulation by improving material modelling, visualisation aspects and collision detection,
and the addition of force and sensory feedback using a standard commercial haptic feedback device and a new prototype.

2. Inguinal hernia repair simulation
1. Introduction
The project work described in this paper is a continuation
on a speciﬁc open surgical intervention known as Inguinal
Hernia repair (IHR) [6]. The ﬁrst development of a simulation of this particular intervention included the creation
of graphics based video footage for training of medical students. The underlying graphics and interface were then further developed to create an interactive simulation tool mimicking the visual aspects of an IHR. The work presented
in this paper draws on the previous work whilst extending
it to a general open surgery intervention. Whilst much research has already been conducted into simulating minimally invasive procedures such as Laparoscopy [10] there
has been less interest in simulating open surgery. This is
due, in part, to the higher level of training required for minimally invasive surgery and hence the greater need for computer simulation to aid the learning process. The requirements of open surgery simulation may also be a contributory factor, for example: the modelling of multiple adjacent tissue layers is both complex and computationally expensive. Of speciﬁc research into open surgery, there are
of course some researchers active in the ﬁeld, for example: Bielser and Gross [2], who have presented a simulation
allowing typical operations such as cutting and clamping.
There is, of course: simulation of facial reconstruction [8],
though the majority of this work is mainly to predict surgical outcomes. Our focus has been on Inguinal Herniotomy

Inguinal Hernias occur in approximately 5% of infants,
most of whom are boys [1]. The hernia is formed due to an
opening from the lower abdomen into the groin that fails
to close properly during early development. If left open, intestines are free to push through into the groin causing a
hernia. IHR involves cutting through several layers including skin, fascia, external and internal oblique muscles and
the transverse muscle to reach the hernia sac. The latter is a
tubular structure running from the abdomen through the inguinal ring into the groin. The sac is cut in two and the end
attached to the abdomen is sutured closed. The material is
then pushed back into the wound and the incision is closed.

3. Physical Realism
Graphics based simulation of surgical interventions has
been done for many years now. The realism of such simulations often relies on the reﬁnement of details rather than
the broad range of techniques employed. In this section, we
discuss a number of improvements that aim to enhance the
physical realism of the simulation without causing too much
overhead on the processing side, hence preserving real-time
rendering.

3.1. Orthotropic material properties of skin
The skin layer is modelled by a mass-spring mesh. This
layer was improved by modelling the non-linear orthotropic

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

Figure 3. 1. Path of intended bisection;
2. First re-triangulation; 3. Second retriangulation

Figure 1. Screenshot from the original Inguinal Hernia repair simulation.

Force curves for springs lying obliquely to the X and Y axis
are calculated by parametric interpolation between the two
original curves based on the orientation of the spring.

3.2. Mesh interaction
The simulation currently allows interaction with several
tool types, including surgical knives, scissors, forceps and
clamps. We brieﬂy describe two of the more developed interactions: cutting with a surgical knife and use of clamps.

Figure 2. Piecewise linear approximations of
force vs stretch ratio curves for X and Y directions, respectively.

properties of skin using data obtained from rabbit abdomen
[5]. When the mesh is initialised it is assumed to be in a resting position and lying in the X - Y plane. Force curves are
deﬁned for stretch ratios λ in the X and Y directions. Force
curves for each spring are stored by encoding the graphs as
piecewise linear approximations as shown in Figure 2.
Internal spring forces are thus calculated by a look-up
and substitution of the stretch ratio λ into the linear equation
for the relevant line segment. Springs lying parallel to either the X or Y axis are assigned the respective force curve.

3.2.1. Knife interaction Knife interaction operates by
splitting the mesh along triangle boundaries (springs). Obviously, few if any springs will align exactly with the
plane of an intended incision. Therefore, springs are either repositioned or added to the mesh. Springs are
repositioned when their end nodes are within a preset tolerance of the cutting plane; otherwise the surface
is re-triangulated to produce new springs. Repositioning and re-triangulation occurs only in the immediate
locality of the cutting operation. Re-triangulation, is performed by inserting a new node along a spring’s length, at
the point of intersection between the spring and the cutting plane. The spring is split generating two new springs.
Additional springs are added to connect the new node to
the opposite nodes of triangles neighbouring the original bisected spring. To add a spring that aligns with the
cutting plane may require the above operation to be carried out twice as shown in Figure 3. Care is taken when
setting the attributes of the new springs and nodes to maintain the properties of the surrounding mesh.
The initial insertion triangle is found by performing a hierarchy of tests. First, each node’s distance from the cut-

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

Figure 4. The mesh is cut by splitting the
mesh along triangle boundaries.

Figure 5. Exaggerated example of nodes being displaced by the clamp’s bounding box

ting plane is assessed to ﬁnd triangles that lie close to the
cutting plane, for further testing. Next, axis aligned bounding box (AABB) testing is performed on the cutting blade
with each triangle. And ﬁnally, line segment / triangle intersection testing is performed on the cutting edge of the blade
with the mesh. This allows a triangle and hence a spring
to be found that aligns with the cutting edge by repositioning or re-triangulation as discussed earlier. The spring node
behind the knife’s blade becomes the start node of the cut,
whilst the other node in front of the blade is ﬂagged as a
target node and is clamped to move in the cutting plane
only. Subsequent cutting occurs by checking for collision
between the target node and the cutting blade. When collision is detected the algorithm searches around the target
node to ﬁnd a new target node close enough to the plane to
reposition. If one is not found, then the next triangle in the
path of the knife is re-triangulated to provide the next target node. The old target node is then split into two along
with the connecting springs that align along the path -see
Figure 4. The algorithm then continues with the new target node.
3.2.2. Clamp Interaction Surgical clamps are used to
hold open an incision and allow access for other instruments. Currently this type of interaction is modelled at the
mesh node level. Although not as robust as a triangle or
an edge collision strategy, the algorithm allows good detection rates and simple implementation. Two functions are
used: one that handles collisions due to movement of the
clamp and another that handles collisions due to movement
of the mesh. The clamp’s geometry is approximated by an
object aligned bounding box, Nodes that enter this bounding box, due to movement of the tool are repositioned along
the tool’s direction vector until they lie on one of the box’s
faces. They are then ﬂagged as being ’in contact’. Flagged
nodes are translated by the tool’s movement vector during
subsequent updates, providing that they lie on a pushing

Figure 6. A node entering the collision box is
translated back along its movement vector to
lie on a face.

face as shown in Figure 5.
Nodes entering a clamp’s bounding box due to movement of the mesh are reversed back along their movement
vector until they lie on a face of the box, see Figure 6. These
nodes are also ﬂagged as being ’in contact’. Flagged nodes
from previous iterations are moved in sliding contact with
the face that they lie on. They may also slide off an edge or
move away from a face in which case their ‘in contact’ ﬂag
is revoked.

4. Visual realism
Now that graphics hardware is more than capable of rendering scenes of high geometric complexity, the emphasis
of graphics development has shifted to improving the im-

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

plementation of features such as real-time shadow casting
and bump-mapping. These features can be exploited to create simulators that provide an experience close to reality.

4.1. Shadowing
As well as adding visual realism to a scene, shadows also
aid the viewer’s perception of shape and position of objects
within a scene. Surgical interventions are typically carried
out in well-lit theatres where shadows are kept to a minimum. Our motivation for employing shadows is to generate
a natural cue to aid spatial positioning of tools within a simulator. Although a solution using auto-stereoscopic display
is desirable, shadow casting allows us to also provide for
the use of standard display devices. We envisage that using
a standard display device may be desirable in order to avoid
user fatigue typically associated with the prolonged use of
auto-stereoscopic displays. Catering for standard display
devices will also allow the simulation to be run on lower
cost desktop solutions. Shadow casting in the simulation has
been implemented using a depth-pass stencil shadow volume technique. Shadow volumes were ﬁrst introduced in
1977 by Frank Crow [4] and are used to determine the fragments of a scene that are in shadow. Shadow volumes are
generated by extruding the silhouettes of shadow casting
(occluding) objects away from a light source. The bounding faces of these shadow volumes are then used to determine which surface fragments receive light from the light
source. Tim Heidmann [7] later used a stencil buffer (found
on most graphics hardware) to implement shadow volumes
efﬁciently. Within the simulation, potential occluding objects are represented by a mesh data structure, consisting of
faces (polygons), edges and vertices. To ﬁnd an object’s silhouette its faces are searched to ﬁnd and mark those that
are lit by the light source. Then the edges are searched to
ﬁnd those that have a pointer to one lit face and one unlit face; these are potential silhouette edges. Natural edges
of 2D meshes are also considered as silhouette edges if their
one non-null pointer points to a lit face. All silhouette edges
are extruded away from the light source to form the shadow
volume. Deformable meshes are treated in the same way as
rigid objects, where edges align with springs (in the case of
mass-spring models).
The shadow volume technique allows objects to selfshadow and to cast shadows on other occluding objects in
the scene. Shadowing from multiple light sources is handled by repeating the shadowing operation for each light
source in turn and blending the results. Figure 7 shows the
result for a simulated forceps intervention using multiple
point light sources. Modelling multiple light sources obviously adds extra overhead due to the additional stencil clear
operations and re-computation of shadow volumes. Storing
the shadow volumes and updating them at a lower rate than

Figure 7. Shadows from mulitple point
sources on a simulated forceps intervention
for open surgery.

the visual update can alleviate some of this overhead. Unfortunately it is not possible to directly simulate soft shadowing with this technique as it only handles shadows cast
from point light sources. However, it is possible to simulate
soft shadows by jittering each light source’s position, we are
currently investigating this technique as well as other solutions.

4.2. Bump mapping
Texture-mapping alone is sufﬁcient for many applications, but when surfaces are viewed using high magniﬁcation, the ﬂatness of the texture maps becomes more apparent. In these instances it is desirable to model the surface’s reaction to light at a local level, Bump mapping is
an efﬁcient method for simulating this effect. Bump mapping was invented in 1978 by Jim Blinn [3] to model surface
texture due to small wrinkles and imperfections. He noted
that the effect of small surface deviations on intensity is
due primarily to the perturbation of the surface normal and
hence the reﬂection of light. By storing perturbed normals
in a normal map and exploiting the multi-texturing capabilities of modern graphics hardware, it is possible to achieve
bump-mapping in real-time. Bump mapping has been implemented in the simulation using OpenGL extensions. In
order to perform bump mapping, the intensity per fragment
must be calculated in surface tangent space. The surface tangent basis for each vertex of the surface mesh is calculated
by averaging the tangent basis for each of its surrounding
triangles. This tangent basis is then used to transform the
light vector from the vertex to the light source into tangent

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

Property

Phantom Desktop

Maximum force
6.4N
Resolution
20µm
Raising time(0-Fmax) Workspace
16x13x13cm
Platform
PC(intel)

Telluris
>200N
1µm
100µs
(1)
SGI

Table 1. Technical speciﬁcations for the
SensAble Technologies Phantom Desktop
and the Telluris device. (1)Depends on actuator used.

Figure 8. Picture showing bump mapping and
shadows for a simulated forceps intervention
for open surgery.

space. Finding the tangent basis for each of the triangles
can be computationally expensive and must be performed
for every visualisation update. In order to reduce this overhead we take advantage of the topology of our initial mesh
structure. We note that the triangles in the mesh are regularly organised such that they each have an edge aligned
with both the s and t axes of the world co-ordinate system.
As each triangle edge is associated with a spring, we can
use the direction vector for each (re-calculated at every update of the physical model), as the s and t axes of the local tangent basis for each triangle. This saves considerable
overhead as many square root operations are avoided. Obviously not all triangles will align this way following topological changes such as cutting. Therefore the described optimisation is not applicable for these cases.
Bump mapping greatly enhances surface detail. The effect on the frame rate is small as most of the computation is
done in hardware. Figure 8 shows more realistic shadowing
for a forceps manipulation when bump mapping is used. Although the implementation of bump mapping into the simulation is still at an early stage, preliminary results are encouraging: surface detail is greatly improved whilst there is
little impact on rendering speed.

5. Haptic feedback
The simulation has been fused with two different haptic devices: the SensAble Technology Phantom Desktop and
the ACROE/TELLURIS system [9]. The technical speciﬁcations for both devices are shown in Table 1.

Figure 9. The Phantom Desktop manipulator
used to simulate forceps operation on a skin
model.

5.1. SensAble Technologies Phantom
The Phantom Desktop from SensAble Technologies is
a popular, commercially available compact haptic device see Figure 9. It is particularly suited for research of novel
applications due to its reasonable price and ease of integration into software projects. However its lack of robustness
due to the use of gears and drive cords makes it unsuitable
for extended use in a training environment.

5.2. Telluris system
The Telluris system is a prototype modular actuator /sensor device developed by ICA Labs at the University of
Grenoble in France. It has the ability to attach different interaction modalities. The base unit consists of a magazine of
linear actuators. Armatures of differing degrees of freedom

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

can be connected to these actuators by systems of levers and
fulcrums. Moving parts are driven on ball bearings and no
gearing or drive cables are used, allowing for a robust, accurate and low friction device. Unfortunately, no images of
this system are available due a patent pending application.
Further work on customisation of the Telluris haptic
feedback system with the simulation software will be conducted to create a simulation environment with surgical
tools which closely resemble the tools used in a real intervention.
It was found that the Telluris system provided more realistic and acute force feedback than the Phantom Device
mainly due to its higher resolution and peak force (see Table 1) [9].

6. Conclusion

[6] P. Gasson, R. Lapeer, and V. Karri. Inguinal herniotomy
planning and simulation using virtual reality. In CARS’2003
Conference proceedings, page 1378, 2003.
[7] T. Heidmann. Real shadows real time. In IRIS Universe
Number 18, pages 28–31, 1991.
[8] R. M. Koch, S. H. M. Roth, M. H. Gross, A. P. Zimmermann,
and H. F. Sailer. A framework for facial surgery simulation.
In Proceedings of the 18th spring conference on Computer
graphics, pages 33–42. ACM Press, 2002.
[9] R. Lapeer, P. Gasson, J.-L. Florens, S. Laycock, and V. Karri.
Introducing a novel haptic interface for the planning and simulation of open surgery. In in Medicine Meets Virtual Reality
- MMVR12, pages 197–199, 2003.
[10] G. Sz´ekely, C. Brechb¨uhler, R. Hutter, A. Rhomberg,
N. Ironmonger, and P. Schmid. Modelling of soft tissue deformation for laparoscopic surgery simulation. In Medical
Image Analysis 4, pages 57–66, 2000.

In this paper we have reported current progress on advanced features to enhance the realism of an open surgical simulation. In particular, the improved speciﬁcations of
ortho-tropic behaviour of skin-like tissues do contribute signiﬁcantly to a realistic feel, especially when combined with
haptic feedback. This particular feature was tested by Dr.
Vasu Karri, a plastic surgeon collaborating with the authors,
and positively evaluated. Although shadow simulation, by
itself, may not be the most crucial feature upon which a surgeon assesses tissue/tool contact , it becomes so when combined with appropriate textures. Currently, only the technique of this feature has been implemented using bumpmapping. Improved skin-type textures will be generated and
implemented in due course.

7. Acknowledgements
Thanks to Dr. Jean-Loup Florens from de Laboratoire
ICA at the University of Grenoble in France for the use and
assistance in coupling the simulation software to their haptic feedback device.

References
[1] R. Behrman, R. Kliegman, and A. Arvin. Inguinal Hernias
in Nelson Textbook of Paediatrics. Saunders Philadelphia,
1996.
[2] D. Bielser and M. Gross. Open surgery simulation. In in
Medicine Meets Virtual Reality - MMVR10, pages 57–63,
2002.
[3] J. Blinn. Simulation of wrinkled surfaces. In Proceedinfs of
SIGGRAPH, pages 286–292, 1978.
[4] F. Crow. Shadow algorithms for computer graphics. In Proceedings of SIGGRAPH, pages 242–248, 1977.
[5] Y. Fung. Biomechanics: Mechanical Properties of Living
Tissues. Springer-Verlag, 1993.

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

