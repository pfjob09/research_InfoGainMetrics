21DF-Browser: A Multiple Fisheye Distortion Technique for Visualizing and
Navigating Hierarchies with Large Number of Leaves
Mao Lin Huang and Wu Quan
Faculty of Information Technology
University of Technology, Sydney, Australia
maolin@it.uts.edu.au, kevinqw@it.uts.edu.au
Abstract
This paper presents a new multi-level focus+context
technique for visualizing and manipulating hierarchies
which contain large number of leaves. Our technique uses
an ordinary 2D Hyperbolic Tree Browser to display the
major structure of hierarchies while a 1D distortionbased fisheye menu is also used to assist the display of
those sub-hierarchies containing large number of leaf
nodes. This significantly solves the problem of inefficient
use of the display space when a user navigates, using a
Hyperbolic Tree Browser, through a portion of the
hierarchy containing a large number of leaves.

1. Introduction
With the rapid growth of applications of interactive
graphics, Information Visualization research has moved
its focus from the layout problem to the viewing and
navigation problems. Finding efficient ways of allowing
users to interactively viewing and manipulating large
hot
hierarchical information has become one of the
topics in information visualization. Many visualization
techniques have been proposed and developed to deal
with the viewing of large data sets in the last twenty
years.
Most of these techniques can be classified into two
main streams: the focus+context approach and the
zooming+filtering approach. The main concept and
difference of these approaches can be summarized as
following.
Focus+context – keeps the entire information structure
in the screen with twin views. It displays an enlarged and
detailed view of a portion of the structure that the user is
currently interested in as well as a global context view of
the entire structure with a reduced size. In other words, it
can be defined as “detailed views of particular parts of an
information set are blended in some way with a view of

the overall structure of the set” [3]. Typical focus+context
techniques include Fisheye Views [4], Polyfocal Display
[5], Bifocal Lens [6], Perspective Wall [7], Cone Tree [8]
and Hyperbolic Tree Browser [1].
Zooming+filtering - works by reducing the amount of
context in the display. The reduction is done by filtering
the information in the form of selecting a subset of the
data along a range of numerical values in one or more
dimensions. Typical Zooming and Filtering techniques are
Starfield Display [9], TreeMaps [10], Focus Interactive
Table [11] and Pad++ [12].

1.1. Hyperbolic Tree Browser
Hyperbolic Tree browser as one of the most powerful
focus+context viewing techniques was developed by Jonh
Lamping and Ramana Rao [1] in 1995. It uses a 2D
“fisheye” distortion technique with the ability of an
exponential growth in the number of visual components to
support the navigation and manipulation of large
hierarchies.
The hyperbolic browser initially displays a tree with its
root placed at the center, but the display can be
transformed smoothly to bring other nodes into focus. In
all cases, the amount of space available to a node falls off
as a continuous function of its distance in the tree from
the node in focus. Thus, the context always includes
several generations of parents, siblings and children,
making it easier for the user to explore the hierarchy
without getting lost.
Technically, this technique constructs a hierarchy in
hyperbolic geometry and then maps that structure into
ordinary Euclidean plane. The algorithm produces nice
tree visualization inside a disc and it provides users with
an effective mechanism to navigate around the hierarchy.
The capacity of the large scale display is obtained by the
distortion of the elements of the tree display according to
their distance from the focus, while the easy navigation
capacity is obtained by interactive mechanisms for
controlling the target area of focus. As a result, it is an

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

excellent technique for visualizing very large hierarchies.
Hyperbolic browser can be implemented in either 2dimentional or 3-dimentional space. There are several
implementations are available at the Inxight-Xerox web
site [13].

1.2.

Fisheye Menu

Fisheye menu [2] is introduced by Benjamin B.
Bederson in 2000. It applies the traditional “fisheye”
distortion technique to the one dimensional (1D) linear
menus. It provides users with an efficient mechanism to
select items from long menus in the common graphical
user interfaces of many e-commerce applications. Fisheye
menus dynamically change the size of menu items to
provide a focus area around the mouse pointer. This
makes it possible to present the entire menu list on a
single menu screen which occupies a fixed size of display
area.
Selecting data items from menus is different than
selecting functions because the data items in the menu are
likely to change from use to use, and there are typically
many more data elements in a menu than there are in
functional menus. In addition, since the user is not as
familiar with the menu, it is more likely that they won’t
know the exact text of each item. Thus, the length and the
width of the window size for displaying the menu are
unpredictable.
Fisheye menu is a solution to the problem of
displaying menus of different menu items within graphic
window of a fixed size. This is achieved by 1D fisheye
distortion. In fisheye menus, all of the menu items are
always displayed in a single window of fixed size that is
completely visible, but the items near the cursor are
displayed at full size, and items further away from the
cursor are displayed at a reduced size.
In addition, the interline spacing between items is also
increased in the focus area, and decreased further away
from the focus area. In this manner, the entire list of items
fits on a single screen of fixed size. The items are
dynamically scaled so that as the cursor moves, a
“bubble” of readable items moves with the cursor.
The existing menu approaches, such as Pull-Down
Menus and Scrolling Arrows, have problems in presenting
and selecting items from long lists. When scrolling down
and up the long list by using one of these approaches,
users often loose the overall view of the complete list.
They cannot jump from one portion of the list to another.
They don’t have the idea where they are in the list and
how far from the item they are looking for.
In contrast, fisheye menu provides users with an
Alphabetic Index displayed in the left side of distorted
menu lists, allowing users to jump from one portion of the
list to another by using their alphabetic knowledge. This

Alphabetic Index also gives users an overall view of the
complete long list.

2. (2+1) Dimensional Fisheye Browser
Although many focus+context visualization techniques
were proposed in the past to deal with the viewing of
large hierarchies, there are not many considering the
issues of optimizing the use of display space and
balancing the display areas for placing context and focus
in the visualization design. For example, when we use a
hyperbolic tree browser to navigate the hierarchy, in many
cases the display space is not fully used efficiently and the
distorted tree display can often leave one or more empty
holes in the display, especially when viewing a sub-tree
with a large number of children, that waste the display
space and reduce the number of components (nodes and
edges) that can be displayed on the screen. Furthermore,
the distorted tree display can often break the balance of
display areas for displaying context structure and focus
structure.
For example, when we use a hyperbolic tree browser to
display a product catalog and focus to a particular subcategory node “Mineral Water” with 45 leaf nodes under,
as show in Figure 1. We can see that there is a big empty
hole generated in the center that wastes a large portion of
the display area. Even if the context view is pushed into
the corner, there are still many overlaps among the leaf
nodes. Thus, the labels of some leaf nodes become
invisible and the quality of the visualization is greatly
reduced. Another problem in the visualization shown in
Figure 1 is that the context view is pushed into a very
small area and becomes unbalanced with the focus view
which occupies about 80% of the display space. This
small area can only display six nodes and such a
meaningless context view cannot give users an overall
view of the complete hierarchy they are navigating.
In this paper, we present a new multi-level
focus+context technique, called “2+1 Dimensional
Fisheye Browser” (21DF-Browser) for visualizing large
hierarchies that contain a large number of leaves. We use
the combination of a 2D fisheye distortional visualization
technique and a 1D fisheye distortional menu to improve
the utilization of display space and to keep the balance
between two views: the context view and the focus view.
In practice, we use an ordinary 2D Hyperbolic Tree
Browser as a backbone of the visualization to view the
major part of the hierarchy while an additional 1D
distortion-based Fisheye Menu is used to assist the
display of sub-hierarchies that contain a large number of
leaf nodes. This significantly solves the problem of
inefficient use of the display space when a user navigates
through a portion of the hierarchy that contains a large
number of leaves, and increase the number of visual
components (nodes and edges) displaying on the screen.

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

•

Using the existing 2D visualization techniques to
display a great deal of leaves of a certain parent
node will inevitably cause the problem in
labeling even if it can display all the nodes in the
screen at the same time. But, it is easy for
fisheye menu to display all the leaves in a small
window as well as label each leaf with dozens of
characters of text.

2.1. The Framework of 2+1D Visualization and
Navigation

Figure1. An example of using hyperbolic tree

browser to viewing a sub-category with many
leaves. We see that a big empty area is
generated in the center wasting a large portion
of the display area, and the context view is
pushed into the left corner and becomes
meaningless.
This dual context + focus visualization mechanism
effectively addresses the problem of display large number
of leaves under a particular parent node in many real
world situations. For example, in e-commerce application
it’s quite possible that a product category (or a subcategory) contains a few hundred products (data items).
There are also many other examples, such as computer
file systems, library indices, organization chats, etc. If we
use only one of the existing 2D distortion techniques,
such as HT Browser or Bifocal Viewer [6], to display
such large number of leaves, the quality of the view will
be then reduced greatly in terms of display resolution and
human comprehension.
By combining fisheye menu with one of the 2D
visualization, we can take advantages of this distortionbased linear menu for presenting and selecting particular
data items. These advantages are:
•

Fisheye menu can fit large number of data items
(leaves of the hierarchy) in a predefined fixed
sub-window by dynamically adjust the font size.
It does not require extra display space when the
number of items grows. This promises the 2D
visualization can have more display space for a
higher quality display of context.

The basic idea of our technique is to combine a twodimensional visualization and a one-dimensional
visualization into an efficient navigational visual structure
for navigating hierarchies or sub-hierarchies that contain a
large number of leaves. Both 1D and 2D visualizations
use a distortion-based technique to achieve the context +
focus viewing. We use a 2D distortional visualization to
display and navigate the upper overall structure of the
hierarchy while a 1D distortional Fisheye Menu is used
to assist the display of some lower level sub-hierarchies
those with a large number of leaf nodes.
In our framework, there are two levels of navigation: a
2D interactive visualization is responsible for the
navigation of the upper (none leaves) level structure of the
hierarchies, and a 1D interactive visualization is in charge
of displaying and browsing lower (leaves) level structure
of the hierarchies. See Figure 2.

Figure2.

The navigation is achieved by the
integration of 1D and 2D visualization
techniques.
The 2+1D visualization pipeline can be view as a
series of transformations from the relational data to its
analytical abstraction (graphs), and then to its
visualization abstraction (a 2D geometrical layout +
several 1D lists), and finally to its navigate-able views
(several fisheye distortions). This visualization pipeline
can be illustrated as a diagram as shown in Figure 3.

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

Figure3.

A Framework of 2+1D Visualization

Figure4. An initial display of a product catalog

Pipeline.

using HT Browser with all children placed on the
right side of the root.

3. Technique Specification

For example, in Figure 5 we can see that there are three
nodes ‘Beer’, ‘Mineral Water’ and ‘Vegetables’
highlighted with red color, which means that they have
more than 15 leaves in their sub-trees. When you want to

We implement the hyperbolic tree primarily according
to the technique presented in [1]. For the sake of the habit
of user browsing hierarchical structure, we lay out all
nodes in a canonical direction, e.g. to the right in our
example, as show in Figure 4. Then, when a node is
brought to the focus, the display is rotated to have its
children fan out in the right direction. Figure 4 shows the
initial display of a product catalog with the root node
placed at the center of the applet and the children of the
root placed on its right side. Moreover, we use different
colors as landmarks to present different levels of nodes in
the hierarchy. Icons in the first column of the control
panel displayed on the left corner of the applet are used to
alter the attributes of layout and display, including the
increase of label font size, decrease of label font size,
increase of edge length, decrease of edge length, change
of node’s color, toggling node outline, display of more
nodes, and display of less nodes.
In our implementation, we still use the hyperbolic tree
to display leaf nodes, if a sub-category has 15 leaves or
less. However, if a sub-category has more than 15 leaves,
we then use red color to highlight the sub-category node,
without further defining and displaying the sub-hierarchy
in the 2D space, and use a fisheye menu to display and
navigate the leaf nodes.

Figure5. Three red nodes ‘Beer’, ‘Mineral Water’
and ‘Vegetables’, presenting three subcategories in the product-catalog and each subcategory has more than 15 items under.

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

view the children items (leaves) of one of these red subcategory nodes, you need to move your mouse point over
the node and drag the node to an appropriate viewing
position, and then click the left button (see Figure 6) to
popup a fisheye menu displaying all items of the
‘Vegetables’ sub-category in a 1D distortional menu list
(shown in Figure 7).

Figure7. A popup fisheye menu that displays all

items of the ‘Vegetables’ sub-category in a
distortional list.

3.1. The Linear Distortion Function
The popup fisheye menu applies the traditional fisheye
distortion technique to linear menus. According to [14],
the fisheye distortion can be straightforward defined as a
DOI (Degree Of Interest) function,

DOI ( x | .) = ( LOD( x) − D (., x))
That consists of three properties:
1.
2.
3.

Figure6. Drag the node ‘Vegetables’ to an
appropriate viewing position for displaying a
fisheye menu that will list all items under the
‘Vegetables’ sub-category in a 1D distortional
manner.

A focal point ‘.’ that is the item of current
interest to the user in the menu.
The distance between focal point ‘.’ and item x:
D(., x) [ D(.,.) = 0]
The level of detail, importance: LOD(x)

Considering the construction of linear distortion
menus, we use a very simple DOI (x | .) function that only
includes distance from the focus point to the item x, and
ignore the level of detail. We begin by defining the menu
distance d ( x, y ) = |x-y| between two items, x and y, to be
the linear distance in the menu list (note that x and y are
sequential numbers of the item in the menu list). Thus, the
linear fisheye distortion function can be naturally defined
as following:

DOI ( x | .) = −d (., x)
where d (., x) = D(., x) . That is, DOI(x|.) at any item, x, is
merely the (negative) of its distance from the focal point.

3.2

The Input Parameters

There are two important parameters, the Maximum
Font Size and the Focus Length that the user can use them
to adjust the view of fisheye menu through the control
panel at the left-top corner of the Applet shown in Figures
4, 5, 6 and 7. The following are value ranges of these
parameters:
Maximum Font Size = S max f
Focus Length = L focus

(3 ≤ S max f ≤ 14)

(1 ≤ L focus ≤ 11)

Icons in the second column of the control panel are
used for adjusting the value of these parameters. These
include the increase/decrease of the maximum font size
and the increase/decrease of the focus length.

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

3.3

The Menu Calculation

The graphical menu window and the display of a list of
menu items, as shown in Figure 8, are computed based on
the following variables:
✗

✘

• LS ( x, x + 1) : the line space between x item x and item
x+1. The line space between any pair of items can be
calculated by:
S f ( x) × 0.5 , ( S f ( x) > S min f )
LS ( x, x + 1) = f ( S f ( x)) = 
S f ( x) × 0.1 , ( S f ( x) = S min f )

Maximum Line Space = LS max = S


max

f

× 0 .5 

Minimum Line Space = LS min = S


min

f

× 0 .1

✜
✘

✢

✣

✤

✖

✔

✕

 

✏

✙

✑

✁

✄

✆

✞

✠

✁

☞

✌

✍

✓

✚

• The menu size H m and Wm : because the clicked subcategory node could appear at any position in the
applet, the display space available for the fisheye menu
is unpredictable. Therefore, the size the window for
popup fisheye menu needs to be self-adapted depending
on the available display space. We first calculate a
theoretical height H c of the fisheye menu, that is based
on user defined parameters S max f and

H c = ( S max f + LS max ) × L focus + 2 ×
Figure8. The fisheye menu.

• N: the number of the items to be displayed in the menu.
This is depends on the underlying hierarchical
structures. Our solution can display up to 1000 items
under a particular sub-category. The value range for N
is (16 ≤ N ≤ 1000 ).
• S min f : the smallest font size assigned to the menu
items to be displayed in the menu. The menu system
dynamically calculate and adjusts the value of this
variable from lowest to higher towards the best fitness
of the display on the menu window. The value range for
this variable is (1 ≤ S min f ≤ S max f ) .
• S f (x ) : the actual font size assigned to the menu item x
to be displayed in the menu. Thus, the font size of each
item can be calculated by:


Where L =  L focus
hf
2 


DOI ( x|.) + Lhf =1− S min f

∑ (S

f
DOI ( x|.) + Lhf = −1

( x) + LS ( x))

+ ( S min f + LS min ) × ( N − L focus − 2 × ( S max f − S min f − 1))
+ 2 × heightborder

where heightborder is a constant. However, this
theoretical height H c may be in excess of the Y
coordinator of the applet (the bottom of the applet).
Therefore, we have to define an actual height H a , the
maximum possible height that we can assign to the
menu. This is normally equal to the distance between
the center point of clicked node and the bottom of the
applet.
We then determine the height
by:

S f ( x) = f (S max f , S min f , L focus, DOI(x | .))
Smax f
(DOI(x | .) + Lhf ≥ 0)

= Smax f + DOI(x | .) + Lhf (−Smin f < DOI(x | .) + Lhf < 0)

(DOI(x | .) + Lhf ≤ −S min f )
Smin f

L focus .

H

m

H
= 
H

H m of the fisheye menu

a

(H

c

≥ H a)

c

(H

c

< H a)

Once the actual height H m of the menu is determined,
we then can work out the factual maximum font size
S r max f and focus length Lrfocus . Then the width Wm of
the menu can be calculated by:

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

4. Conclusion
W m = max( stringleng th (items[ N ])) × S r max f + widthborde r

where the stringlength(x) function returns a integer
number of length of the character string x and the
widthborder is constant.

3.4

Locality Information with Item Count

The main challenge to the focus+context viewing
techniques, including linear fisheye menus, is the
navigation problem. For instance, how could we quickly
find out and move to a portion of the menu items that
contains information we need in a large menu context that
may contain up to 1000 items? This is a real challenge to
the fisheye menu. We believe that the design and display
of associated information of the visible menu items are
important. These associated data often provide users with
meaningful navigational information that is derived from
its position in a larger context. It is important to stay
oriented that makes it easier for users to target the portion
of the menu that contains the item they are looking for,
i.e., to understand where in the global picture this locality
fits.
To achieve this, we provide two types of the position
information, the Alphabetic Index and the Item Count. We
use the same alphabetic index mechanism as used in the
ordinary fisheye menu proposed by B. B. Bederson [2].
This allows users to use their alphabetic knowledge
jumping to the portion of the menu where they expect the
item they are looking for to be.
Besides the use of alphabetic index, we also display a
sequential item numbers associated with index letters that
indicate the numerical ordering of these items in the long
list. These numbers also gives you the size information
about the context (see Figure 7). A certain number
associated with a particular item indicates the ordering
information of that item in the entire list. For example, in
the left side of the menu as shown in Figure 8, the string
‘C13’ means that the first item starting with the letter ‘C’
which is ‘Cabbage’ is the 13th item in the whole menu list.
Then, you can easily work out the position of the focus
item ‘Cauliflower’ which is equal to 13+3=16. In the
same way, we can even quickly work out the number of
items starting with the letter ‘C’. For the same example,
we can use two strings ‘C13’ and ‘D34’ to easily calculate
the number of items starting with ‘C’, which is equal to
34-13=21. For the linear lists, the ordering information
gives you a more accurate perception of the list, not only
the actual positions of these items, but also the overall
figure of the menu list you are currently navigation.

HT Browser as one of the most powerful
focus+context visualization techniques has been
successfully used in many HCI applications. It uses a 2D
“fisheye” distortion technique with the ability of an
exponential growth in the number of visual components to
support the navigation and manipulation of large
hierarchies. However, this technique has some limitations,
for example, when we use it to navigate sub-trees with a
large number of the children (see Figure 1), some empty
areas are generated in the geometric plant that waste the
display space and reduce the number of ‘nodes’ and
‘edges’ that can be displayed on the screen. Furthermore,
the distorted sub-trees with large number of leaves can
break the consistent display of ‘context’ and ‘focus’. See
Figure 1 that the ‘context’ is pushed into the left corner of
the applet and becomes meaningless.
In this paper, we have proposed a new multiple fisheye
distortion technique, 21DF-Browser, to address the above
problems. We use the ordinary hyperbolic tree browser to
present the upper level structure of the hierarchies, while
a fisheye menu is maintained to browse the sub-trees with
a large number of leaf nodes. Our solution supports the
linear display and browse up to 1000 leaves under a
particular sub-tree. We effectively use the linear fisheye
distortion technique to solve the problems caused by 2D
fisheye distortion and improve the HT Browser.

Reference
[1]

J. Lamping & R. Rao (1996) The Hyperbolic Browser: A
Focus+Context Technique for Visualizing Large
Hierarchies. Journal of Visual Languages and Computing
(1996) 7 ,pp. 33-55.

[2]

B. B. Bederson (2000) Fisheye Menus. In: Proceedings of
ACM Conference on User Interface Software and
Technology (UIST 2000), pp. 217-225.

[3]

J. Lamping , R. Rao & P. Pirollli (1995) A Focus+Context
Technique Based on Hyperbolic Geometry for
Visualization Large Hierarchies. In: CHI 95, Proc. ACM
Conf. on Human Factors in Computing Systems, ACM
Press, New York, 1995, pp. 401-408.

[4]

Furnas, G. W. (1986) Generalized fisheye Views. In:
Proceedings of ACM CHI’86 Conference on Human
Factors in Computing Systems, pp. 16-23.

[5]

N. Kadmon & E. Shlomi (1978) A Polyfocal Projection
for Statistical Surfaces. Cartograph. J. 15, 1, 36-41.

[6]

M. D. Apperley, I. Tzavaras & R. Spence (1982) A
Bifocal Display Technique for Data Presentation. In:
Proceedings of Eurographics’82, Conference of the
European Association for Computer Graphics, pp. 27-43.

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

[7]

[8]

[9]

J. D. Mackinlay, G. G. Robertson & S. K. Card (1991)
The Perspective Wall: Detail and Context Smoothly
Integrated. In: Proceedings of the ACM SIGCHI
Conference on Human Factors in Computing Systems
Addison-Wesley, Reading, MA. pp. 173-179.
G. G. Robertson, J. D. Mackinlay & S. K. Card (1991)
Cone Trees: Animated 3d Visualizations of Hierarchical
Information. In: Proceedings of the ACM SIGCHI
Conference on Human Factors in Computing Systems
Addison-Wesley, Reading, MA. pp. 189-194.
C. Ahlberg & B. Shneiderman (1994) Visual Information
Seeding: Tight Coupling of Dynamic Query Filters with
Starfield Displays. In: Proceedings of CHI’94, (Boston,
MA, April 24-28) ACM, New York, pp. 313-317.

In: Proceedings of the 9th ACM Symposium on User
Interface Software and Technology (UIST), Seattle, WA,
pp. 41-50.
[12] B. B. Bederson, J. D. Hollan, K. Perlin, J. Meyer, D.
Bacon & G. Furnas (1996) Pad++: A Zoomable Graphical
Sketchpad for Exploring Alternate Interface Physics.
Journal of Visual Languages and Computing , 1996,
Volume 7, pp.3-31.
[13] URL: http://www.inxight.com
[14] G. W. Furnas (1981) The FISHEYE view: a new look at
structured files. Bell Laboratories Tech. Report, Murray
Hill, New Jersey, 1981.

[10] B. Johnson & B. shneiderman (1991) Tree-Maps: A
Space-Filling Approach to the Visualization of
Hierarchical Information. In: Proceedings of Visualization
1991. IEEE Society Press, Los Alamitos, CA, pp. 284-291.
[11] M. Spenke, C. Beilken, & T. Berlage (1996) FOCUS: The
Interactive Table for Product Comparison and Selection.

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

