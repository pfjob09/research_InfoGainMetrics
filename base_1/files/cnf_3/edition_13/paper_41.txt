Solving Geometric Constraints
by a Graph-Constructive Approach
Samy Ait-Aoudia, Brahim Hamid, Adel Moussaoui, Toufik Saadi
INI - Institut National de formation en Informatique
BP 68M - Oued Smar 16270 ALGIERS ALGERIA
Tel : 213 2 51 60 33
Fax : 213 2 51 61 56 Telex : 64531
E-mail : s_ait_aoudia@ini.dz, ini@ist.cerist.dz
Abstract
A geometric constraint solver is a major component of
recent CAD systems. Graph constructive solvers are
stemming from graph theory. In this paper, we describe a
2D constraint-based modeller that uses a graph
constructive approach to solve systems of geometric
constraints. The graph-based approach provides means
for developing sound and efficient algorithms. We present
a linear algorithm that solves a large subset of the rule
and compass constructive problems. Methods for
handling over- and under-constrained schemes are also
given.
Key Words: Computer aided design, constraints solving,
geometric constraints, graph-based solver, over- and
under-constrained schemes.

1. Introduction
In CAD (Computer Aided Design), geometric
modelling by constraints enables users to describe shapes
by specifying a rough sketch and adding to it geometric
constraints. The constraint solver derives automatically
the geometric elements that are to be found. Typical
constraints are : distance between two geometric elements
(two points, a point and a line, two parallel lines), angle
between two lines, tangency between a line and a circle or
between two circles …
Many resolution methods have been proposed for
solving systems of geometric constraints. We classify the
resolution methods in four broad categories : numerical,
symbolic, rule-oriented and graph-constructive solvers.
Numerical methods (Newton-Raphson’s iteration,
3
homotopy, gaussian elimination and so on) are O(n ) or
worse (see [1,2,3,4]). Most numerical methods have

difficulties for handling over- and under-constrained
schemes.
Symbolic methods (Gröbner bases, elimination with
resultants) are typically exponential in time and space (see
[5,6]). They can be used only for small systems.
According to Lazard [7], computing the Gröbner bases of
an irreducible system of degree two in ten unknowns is a
hopeless case.
Rule-based solvers rely on the predicates formulation
(see [8,9,10,11]). Although they provide a qualitative
study of geometric constraints, the "huge" amount of
computations needed (exhaustive searching and
matching) make them inappropriate for real world
applications.
Graph-constructive solvers are stemming from graph
theory. They are based on an analysis of the structure of
the constraint graph. The graph constructive approach
provides means for developing sound and efficient
algorithms (see [12,13,14]). Owen [15], Fudos and
Hoffman [16], Lamure and Michelucci [17] give
quadratic algorithms for solving constrained schemes.
In this paper, we describe a 2D constraint-based
modeller that uses a graph constructive approach to solve
systems of geometric constraints. We present a linear
algorithm that solves a large subset of the rule and
compass constructive problems. We also give efficient
methods for isolating over- and under-constrained
schemes.
This paper is organised as follows. The graph
representation of the constraint problem is explained in
section 2. We present in section 3, the core algorithm that
handles structurally well-constrained problems. The phase
for isolating over- and under-constrained schemes is
given in section 4. We describe in section 5, our
constraint-based modeller. Section 6 gives conclusions.

2. Constraints and graphs

2.2 Graph structure analysis

2.1 Graph representation

Let us now give some definitions concerning the
structural properties of the constraint graph.
Definition 1
A constraint graph G=(V,E) where |V|=n and
|E|=m is structurally well-constrained if and only if
m=2*n-3 and m’ ≤ 2*n’-3 for any induced
subgraph G’=(V’,E’) where |V’|=n’ and |E’|=m’
(see [19]).
Definition 2
A constraint graph G=(V,E) contains a structurally
over-constrained part if there is an induced
subgraph G’=(V’,E’) having more than 2*n’-3
edges.
Definition 3
A constraint graph G=(V,E) is structurally underconstrained if is not over-constrained and the
number of edges is less than 2*n-3.

Geometric modelling by constraints enables users to
describe geometric elements such as points, lines, circles,
line segments and circular arcs by a set of required
relationships of distance, angle, incidence, tangency,
parallelism and perpendicularity. With some preprocessing, the geometric elements are reduced to points
and lines, and the constraints to those of distance and
angle (see [18]).
We use an undirected graph G=(V,E) where |V|=n
and |E|=m to represent the constraint problem. The
geometric elements are represented by the graph nodes
and the constraints are the graph edges. The edges are
labelled with the values of the distance and angle
dimensions.
Example 1 :
A dimensioning scheme defining a constraint
problem is shown in figure 1. It involves six points and
six lines. The constraints are six point-point distances,
three line-line angles, twelve point-line implicit distances
that are zero. The corresponding constraint graph is
shown in figure 2. The unlabeled edges correspond to the
implicit point-line distances.

Note that a constraint graph can have over- and
under-constrained parts. An example is shown in figure 3.

E
d5

d4
γ

F

D

Figure 3. Over- and under-constrained parts.

d3

d6

The graph constructive approach uses only the
structure of the constraint graph and forgets numerical
informations. A constraint graph can be structurally wellconstrained but numerically under constrained. The
dimensioned scheme shown in figure 4 (left) is
numerically under-constrained (the edges are labelled
with distance arguments). Its corresponding constraint
graph shown in figure 4 (right) is structurally wellconstrained.

β

α
A

C
d1

d2
B

Figure 1. A constraint problem.
EF γ DE

A

E
F

d5

d4

d6
AF
α

A

1

D
d3

D
C

d1

CD

d2
B

β
BC

AB
Figure 2. The corresponding constraint graph.

1
0
1

B

A

B

C

D

1
C

Figure 4. An under-constrained problem (left),
and its associated constraint graph (right).
Nonetheless, with the graph constructive approach,
such cases will be detected during the construction phase.

3. Solving the constraints
3.1. Basic clusters formation
The first phase of the algorithm is the formation of
what we call "basic clusters". A cluster is a rigid
geometric structure whose elements are known relatively
to each other. A basic cluster is obtained by the algorithm
given below. The nodes (geometric elements) and the
edges (geometric constraints) are initially unmarked.
Algorithm :
1. Pick an unmarked edge (constraint) ;
Mark the edge ;
Pin the two geometric elements related by the
constraint being marked ;
Mark the two geometric elements to belong to a
new basic cluster BCi
(the two geometric elements are now known).
2. Repeat the following :
if
there is a geometric element with two
unmarked constraints related to known
elements
then mark the two constraints ;
mark the geometric element to belong to the
basic cluster Bci ;
place this element by a constructive step (this
geometric element is now known).
The placement steps correspond to standardised
geometric construction steps (place a point at given
distances from two points, place a line at prescribed angle
from another line through a point, …). When placing a
geometric element, our solver uses some rules to choose
the "best" solution. We assume that the constraint
problem has been specified by a user-prepared sketch.
The distance and angle arguments are signed quantities.
The solution, automatically chosen, is the one that
preserves the topological order given by the sketch. If
these rules fail, the solutions are browsed and the user
selects one of them.
To form all the basic clusters steps 1 and 2 are
repeated until no unmarked edge can be found. The goal
is to systematically “visit” all the edges of the constraint
graph.. Step 2 uses a recursive procedure to form a basic
cluster. During this step, we check the unmarked edges
related to known elements of the basic cluster being
considered to see if two of them lead to a same node. If so
this node is added to the basic cluster and the edges
marked. The first phase can be computed in linear time
using a simple variation of depth first search. Each cluster
is placed in a local co-ordinate system. Note that a
geometric element can belong to several basic clusters.

Example 2 :
To illustrate the process, consider the constraint
graph of figure 2. Three basic clusters are found C1, C2
and C3 (see figure 5). The geometric elements B, D and F
belong each to two clusters : the point B to (C1,C3), the
point D to (C2,C3) and the points F to (C1,C2).

C2
EF

γ

DE

E
F

C1

d5

d4

A

α
AB

C3

d3

d6
AF

D

d1

d2
B

C

CD
β
BC

Figure 5. Clusters of the graph.

3.2. The skeleton of the constraint graph.
The second phase of the algorithm is to construct the
skeleton of the constraint graph. The skeleton is a graph
Gs=(Vs,Es) which is obtained by the algorithm given
below.
Algorithm :
1. The nodes Vs of the skeleton are the nodes of the
constraint graph that belong to several basic
clusters (these nodes are marked with at least two
basic clusters names).
2. The edges Es of the skeleton are obtained as
follows :
Es=∅;
For each basic cluster Ci
Do
pick the nodes {N1,N2,…,Nj} of Ci that
belong to Vs;
triangulate the set {N1,N2,…,Nj} by doing:
Add* edge (N1,N2) to Es;
For k=3 to j
Do Add* edges (Nk,Nk-1) and
(Nk,Nk-2) to Es;
If an added edge (s,t) to Es is not a member of the
initial set of constraints then we insert a "virtual"

constraint whose value is easily determined because the
nodes s and t belong to a rigid structure (a basic cluster).
The graph skeleton (of problems solved by our
algorithm) is a basic cluster. All its nodes are placed in
the plane. The skeleton can be empty if the constraint
graph consist of only one basic cluster (the final
configuration is then directly obtained).

cluster share with the skeleton at least two nodes. The
final scheme is then obtained.
Example 5 :
After placing the skeleton of the constraint graph
given in figure 2, the three found basic clusters C1, C2
and C3 are positioned (rotated and translated) relatively to
this skeleton (see figure 8).

Example 3 :
To better illustrate this phase, consider the constraint
graph of figure 2. His skeleton is given in figure 6. All the
edges of this skeleton are “virtual” constraints.
D
F

C2

F

Example 4 :
Another constraint graph (the basic clusters are already
formed) and its corresponding skeleton are shown in
figure 7.

(a)

(b)
Figure 7. A constraint graph (a), and its
corresponding skeleton (b).

3.3. Final computation phase
Once the nodes of the skeleton are placed
(computed), each cluster is positioned relatively to the
skeleton by computing the three required parameters (two
transitional and one rotational). Note that each basic

D

F

C1

B
Figure 6. Skeleton of the previous constraint
graph.

D
F

Skeleton

C3
D

B
B

B

Figure 8. Placing the clusters.

4. Handling over- and under-constrained
schemes
When designing, the first time, the sketch of a
dimensioning scheme, the user often, over-constrains and
under-constrains some geometric elements. Giving the
following message "your constraint graph is over- or
under-constrained" to the user when the graph contains
more than 100 nodes is not sufficient. The "lazy" user
(not only him) wants a message like "the point P99 is overconstrained and the line L24 is under constrained" so he
can easily remove or add geometric constraints.
Detecting over- and under-constrained geometries in
a constraint graph is an important part of a "good"
constraint-based modeller.
By adding some extra checking to the algorithm of
section 3.1, we can detect the extra-constraints in the
same time bound. The extra-constraints are the constraints
we shall remove so that the constraint graph will be well
constrained. Before marking a constraint in step 1, we test
if the two geometric elements related by this constraint
belong to a same basic cluster. If so, the considered
constraint is necessarily an extra-constraint (a basic
cluster is a rigid geometric structure, so if we add another
constraint between two of its nodes it become overconstrained). This constraint is removed and is not
considered further.

Example 6 :
Consider the constraint graph given in figure 9 (left).
We can have the marking shown in figure 9 (right). The
crossed out edges belong to a basic cluster. The unmarked
edge AC is the extra-constraint (the nodes A and C
already belong to a basic cluster). Note that this marking
is not unique.
A

B

A

B

C
D
C
D
Figure 9. An over-constrained scheme.
Detecting under constrained schemes is a two steps
process. First, we test the number of "links" between the
basic clusters and the skeleton graph (we assume that the
constraint graph is connected). A basic cluster B that is
linked to the skeleton by one node N can move relatively
to this skeleton. We must add a constraint, that do not
involve the node N, between the cluster B and another
cluster of the constraint graph so that the cluster B will be
"firmly" attached (see example 7). In the second step, we
form the basic clusters BCSi of the skeleton (if the
skeleton is under-constrained we will have more than one
basic cluster) and construct the meta-skeleton (skeleton of
the initial skeleton). We then apply the first step to the
BCSi and the meta-skeleton (see example 8).
Example 7 :
Consider the constraint-graph of figure 10. The basic
clusters are : C1, C2, C3 and C4. In this example the
skeleton is well-constrained.
C1

C2

A

C3
B

C

A

D
C

B

E

Figure 11. An under-constrained skeleton
This skeleton is under-constrained. The metaskeleton is reduced to the node C. A constraint (that does
not involve the node C) must be added between the two
basic clusters of the skeleton so that it becomes well
constrained.

5. A 2D constraint based modeller
We have implemented an experimental 2D
constrained based modeller in C++ on an IBM PC
compatible machine (CPU Pentium, 200 MHz and 32 Mo
of RAM). The user creates points, lines, circles and
specify constraints in an interactive way. The user can
have directly the final solution (if there is one) of the
constraint problem. He can also follow the resolution
process step by step (clusters formation, visualisation of
the skeleton). When the solver detect over- or underconstrained schemes, a message is delivered to the user
showing him what he must do (adding or removing
constraints between specified geometries).
For all configurations we have tested, our algorithm
is faster than those of Owen[15] and Fudos [16]
A screen dump of a scheme solved by our algorithm
is given in figure 12. This scheme involves seventeen
circles, five points and four lines. The constraints are
thirty one circle-circle distances, three line-circle
distances and two point-circle distances that are zero, two
point-point distances, three line-line angles, eight pointline implicit distances that are zero.

6. Conclusion
C4

Figure 10. An under-constrained scheme.
The cluster C3 is linked to the skeleton by one node
(the node C). We must add a constraint, that do not
involve the node C, between the cluster C3 and another
cluster (C1, C2 or C4) so that the entire configuration will
be well constrained.
Example 8 :
Consider the skeleton graph given in figure 11.

We have described and implemented a linear
algorithm that solves a system of geometric constraints
using a graph constructive approach. The class of
configurations solved is a large subset of the rule and
compass constructive problems. Over- and underconstrained schemes are also handled by this algorithm.
Our current interest is to extent the scope of the
solver while keeping the same time bound for the core
algorithm.

Figure 12. A screen dump of a constrained scheme

References
[1] D. Serrano. Automatic Dimensioning in Design for
Manufacturing. Symposium on Solid Modeling Foundations
and CAD/CAM Applications, 1991, pp. 379-386.
[2] E.L. Allgower and K. Georg. Continuation and path
following. Acta Numerica, pages 1-64, 1993.
[3] A. Perez and D. Serrano. Constraint base analysis tools for
design. Second Symposium on Solid Modeling Foundations
and CAD/CAM Applications, Montreal Canada. May 93.
pp. 281-290.
[4] H. Lamure and D. Michelucci. Solving constraints by
homotopy. Symposium on Solid Modeling Foundations and
CAD/CAM Applications. May 95. pp. 263-269.
[5] K. Kondo. Algebraic method for manipulation of
dimensional relationships in geometric models. Computer
Aided Design, 24 (3), pp. 141-147, March 1992.
[6] R. Anderl and R. Mendgen. Parametric design and its
impact on solid modeling applications. Symposium on Solid
Modeling and CAD/CAM Applic. May 95. pp. 1-12.
[7] D. Lazard. Systems of algebraic equations : algorithms and
complexity. Rapport interne LITP 92.20, Mars 92.
[8] G. Sunde. Specification of shape by dimensions and other
geometric constraints. Geometric modeling for CAD
applications, pp. 199-213. North-Holland, IFIP, 1988.
[9] H. Suzuki, H. Ando and F. Kimura. Variation of geometries
based on a geometric-reasoning method. Computer and
Graphics, 14(2), pp. 211-224. 1990.
[10] P. Schreck. Modélisation d’une figure géométrique adaptée
aux problèmes de constructions. Actes des journées
GROPLAN’91, France 1991.

[11] A. Verroust, F. Schonek and D. Roller. Rule-oriented
method for parametrized computer-aided design. Computer
Aided Design, 24 (3), pp. 531-540, Oct. 1992.
[12] S. Ait-Aoudia, R. Jegou and D. Michelucci. Reduction of
constraint systems. In Proceedings of Compugraphics,
(Alvor, Portugal), pp. 83-92, 1993.
[13] W. Bouma, I. Fudos, C.M. Hoffman, J. Cai, R. Paige. A
geometric constraint solver. Computer Aided Design, Vol.
27, No.6, June 1995, 487-501.
[14] I. Fudos. Constraint solving for computer aided design.
Ph.D. Thesis, Dept. of Computer Science, Purdue
University, Aug. 1995.
[15] J.C. Owen. Algebraic Solution for Geometry from
Dimensional Constraints. Symposium on Solid Modeling
Foundations and CAD/CAM Applications, 1991, pp. 397407.
[16] I. Fudos, C.M. Hoffman. A Graph-Constructive approach
to Solving Systems of Geometric Constraints. ACM Trans.
on Graphics, Vol. 16, No. 2, April 1997, 179-216.
[17] H. Lamure and D. Michelucci. Qualitative study of
geometric constraints. Geometric Constraint Solving and
applications, B. Brüderlin and D. Roller editors, SpringerVerlag, 1998.
[18] I. Fudos. Editable representation for 2D geometric design.
Master’s thesis, Dept. of Computer Science, Purdue
University, Dec. 1993.
[19] G. Laman. On graphs and rigidity of plane skeletal
structures. Journal of Engineering Mathematics, vol. 4, num.
4, pp. 331-340, Oct. 1970.

