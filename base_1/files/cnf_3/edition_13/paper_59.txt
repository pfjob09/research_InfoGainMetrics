Towards a Feature-Based Interactive System for Intelligent Font Design
FIAZ HUSSAIN

BORUT ZALIK

Department of Computer and Information Sciences,
De Montfort University, Kents Hill Campus,
Hammerwood Gate, Milton Keynes, MK7 6HP,
England.

Faculty of Electrical Engineering & Computer Science,
University of Maribor, Smetanova 17,
P.O. Box 224, SI-62000 Maribor,
Slovenia.

email: fiaz@dmu.ac.uk

email: zalik@uni-mb.si

Abstract
The desire to computerise and accurately
represent contours of characters has seen an
increased emphasis as more and more applications
endeavour to seek benefits from the digital form. The
latter lends itself to be exploited by fast processors
and the resulting output to be displayed not just on
electronic devices such as computer monitors and
laser printers, but also on numerically controlled
machines. These in practice are used to generate
desired outlines on paper, metal, plastic or wood by
means of cutting and engraving.
The process of computerising font outlines,
however, embodies the common problems of domain
change approximations and truncations. In the case
under consideration, the capturing phase is best
undertaken by means of mathematical splines, where
a series of spline segments are connected together to
form a computer model of the original. The
digitisation phase of representing the modelled image
on a finite resolution output device tends to be the
more dominant concern. This is not just because of
the transformation process (going from semicontinuous to discrete form), but also because the
resulting image needs to embrace the distinct features
of a font, has to be aesthetically acceptable, and
requires to be in a form which is legible.
This paper attempts to address some of the
concerns encountered by modern typographers. It
reports on a development of an interactive system to
facilitate a feature-based design approach. This uses
geometric constraints to express spatial relationships
within, and between, font features. These provide
much of the instructions required by a rasterizer to
ensure a satisfactory outcome. In addition, to aid
flexibility and reusability, a font feature is not
required to be constrained completely at the outset.
Instead, the system prompts the user to confirm
relations as and when necessary. Workings of the
system and its respective architecture is illustrated
through its handling of the Times Roman half-serif.
The paper also looks at the way the system glues two

(or more) font features together. The discussion,
throughout, is levelled at providing a practical
understanding of the subject matter.
Keywords:
character, feature-based design, font, geometric
constraints, typography.

1.0 Introduction
The attractions for using a spline model to
capture outlines of figures, including those forming
characters and symbols, has lead to its incorporation
within and for a number of applications. The primary
appeal being the flexibility and the semi-continuous
representation of a given, continuous, outline that it
exhibits. Though the usage of splines is maybe ideal
for computer modelling a desired outline, its main
shortcoming is that its form is incompatible with any
attached peripheral display device. The latter works
with a discrete format, whilst the former has a more
continuous nature. This inevitably leads to problems
when attempting to digitise spline models, especially
so when a low finite resolution output device is used
(see chapter 8 of [1], for example).
The work reported here concentrates on
describing a system for creating, manipulating and
representing outlines of fonts. The system employs
geometric constraints to yield structural shapes and
parts of a font. The approach is termed constraintbased and provides an interactive platform for
typographic designers to undertake the design and
development of characters. The process makes use of
partially constrained font features to aid flexibility
and to enhance their reusability. The work supports
and is geared to assist the process of rasterisation,
whereby the induced (either by the user or by the
system) constraints can be used as instructions by a
rasterizer.
The main purpose of this paper is to offer a
working system for using constraints to model font
characteristics. Through this, an illustration is used to
show how the user interacts with the system to realise

a half-serif, which is partially constrained and which,
once complete, is available to be exploited and used
as desired. This paper follows on from a companion
submission entitled "Type Design with Flexible
Constrained Font Characteristics"[2].

2.0 Generation of a Font Feature
This section provides an insight to the
development of a font feature and in particular at
the way a designer would interact with the system
to generate a desired font feature. For purposes of
illustration, it will be assumed that the user wishes
to design a half-serif, similar to that shown in
Figure 1.
The interface, as Figure 2 depicts, consists of a
main window which is subdivided into four
working windows. These sub-windows are headed:
Features, Drawing, Constraints and Information.
The Features window contains a list of all the
structural units (font features) which have already
been generated and are available to the user. The
Drawing window allows the insertion of sketches
and diagrammatic information. Effectively, this is
the editing window. The window labelled
Constraints lists the topological and geometrical
information which has thus far emerged from the
sketch in the Drawing window. The Information
window gives a complete overview of all the
constraints inserted, whether manually by the
designer or automatically by the system, for the
sketch.
Figure 2, also, shows the situation after the first
line segment for the half-serif is inserted interactively
by the user in the Drawing window. Insertion of this
is via the mouse, where it is used to mark the two
respective endpoints. Once the line segment is
drawn, the system responds by creating an auxiliary
line which lies upon and extends beyond the line
segment just drawn. It also identifies and lists a set of
constraints which describe the spatial relationships
between these two lines. This process, in addition,
removes the burden away from the user to insert
necessary detail to achieve an appropriate constraintbased description.
In Figure 3, we can see the situation after a
complete initial shape for the half-serif has been
created. Note the fact that the required information
relating to the topology and to the geometry of the
sketch, together with its set of constraints, has been
extracted automatically by the system. The user at
this stage has the option of either storing the halfserif as a feature in the font-library, or to insert
additional constraints.

To illustrate the way new constraints could be
inserted, let us assume that the user would like to
express the bottom line for the half-serif to be
horizontally straight and that the left most line to be
vertically straight. In order for this to occur, the user
needs to embody two new constraints in the feature.
These are available from a pool of constraints, as
shown in Figure 4, and listed within the opened
window. Additional constraints are simply picked,
attached, and then stored. The process is guided by
the system to aid usability. The way this would work
in our case is as follows: To denote a line as
horizontal, the user chooses the constraint Hline and
then applies this option to those lines desired to have
this property.
Once a new constraint has been inserted, the
system attempts to solve it immediately, if possible.
The result of the constraint solver is shown as soon
as it is available. The user then has the option of
either storing or removing the inserted constraint.
Figure 4 shows the case after our desired (two)
constraints have been inserted: Hline has been
applied to the bottom line and Vline to the left most
line of the half-serif. Note that the auxiliary geometry
shown in the Drawing window is meant to aid the
designer and can, of course, be toggled off when
appropriate.
The outcome from the system constraining
process can be tabulated in terms of the inserted
constraints. Table 1 shows the set of constraints
inserted till now. It should be realised that the
majority of the constraints (marked by a “*” in Table
1) have been entirely generated by the system. The
sequence of the constraints is itself arbitrary. It is the
task of the constraint solver to generate such a
sequence of constraints which leads to a solution.
These constraints are used to generate a
constraint description graph, which in turn is used by
the constraint solver.. Such a graph for our case is
shown in Figure 5.
To generate the outline for the half-serif,
additional topological and geometrical information is
needed. Looking at Figure 5, it is not possible to
determine whether, for example, points p0 and p1 are
connected with a line segment which needs to be
visible. On the other hand, points p5 and p6 also lie
on a line, but they are not part of a visible description
for the font. So, more information is required about
the half-serif. This information has, in fact, has
already been captured by the system (see information
window in Figures 3, 4, and 5) and is in concise form
given in Table 2.

*

On(p0, l0)

Through(l0, p0)

*
*
*

On(p1, l0)
On(p1, l2)
On(p4, l2)
HLine(l0)
VLine(l2)
On(p4, l15)
On(p18, l15)
On(p18, l16)
On(p19, l16)
On(p19, l17)
On(p20, l17)

Through(l0, p1)
Through(l2, p1)
Through(l2, p4)

*
*
*
*
*
*

Through(l15, p4)
Through(l18, p10)
Through(l16, p18)
Through(l16, p19)
Through(l17, p19)
Through(l17, p20)

Table 1: Depicts the partial constraining scheme for the half-serif,
constraints marked by “*” are produced automatically by the system.

edge
el0

type of connection
line segment

el2
eb2

line segment

control geometric data
p0, p1
p1, p4

Bézier cubic curve

p4, p18, p19, p20

Table 2: Lists the geometrical and topological information for the half-serif.
As mentioned earlier, the approach presented
here does not just provide a more flexible approach
to designing characters and fonts, but also assists the
process of digitisation. The additional information
embodied within the constraining process are
available for a rasterizer to fully utilise. In fact,
Tables 2 and 3 are in a form which could be
sufficient as input to such a process.

3.0 Gluing of font-features
A serif can be considered as a composed font
feature consisting of two glued half-serifs. One of
them is directly obtained from FFL and the second
one is just mirrored around line l4 (see Figure 1).
The mirroring does not have any influence on
already given constraints neither on topological
information. The situation shown to the user is
depicted in Figure 6. Internally, its description
consists of two joined BCDGs which are linked by
a few new, manually given constraints. The
following procedure consisting of two major steps
identifies the tasks performed by the gluing
algorithm:

In the first step, to bind two BCDGs, the user
inserts interactively by a mouse, constraints which
are shown in Table 3. The indexes shown in Table
3 are added just for the explanation purposes. The
algorithm does not generate them neither they are
shown to the user. Numbers in indexes in Table 3
correspond to the indexes in Figure 1, while
characters L and R denote left and right half-serif.
At first, inserted constraints are stored in a socalled constraint interface - CI. In Figure 7 a
schematic presentation of the first step of binding
BCGDs is shown. For the purposes of clarity,
predicate Symmetric is not drawn.

Coincidence(l1L, l1R)
Coincidence(l6L, l6R)

Coincidence(l4L, l4R)
Coincidence(l5L, l5R)

Symmetric(l3L, l4L/l4R, l3R)
Table 3 Constraints which glue BCDGs of two half-serifs
To optimise constraint propagation, both
BCDGs are joined in the second step of the
algorithm into a new unique BCDG and the
constraint interface is gradually removed. This step
is performed by the algorithm called a BCDG
optimiser. It main tasks are:
1.

2.

3.

4.

At first, tuning of the names of the used
geometric elements is done. In this way, each
BCDG node stores a geometric element with a
unique name. The naming of the geometric
elements is not critical because the user
accesses them interactively by a locator
(mouse).
The BCDG nodes which are connected by the
predicate Coincidence are simply joined. For
example, in Figure 7, BCDG nodes of the left
and right-half serifs store line l5 but in new
situation only one line l5 actually exists.
Therefore, in one of the BCDGs, the node
carrying line l5 can be removed from the
graph. All BCDG links, which was connected
with removed BCDG node are now connected
with remaining BCDG node storing line l5.
The geometric entities, which are identical, but
are not explicitly connected by the predicate
Coincidence, are discovered and removed from
the BCDG in the same way as it has been just
described. For example, point p1 is not
mentioned in the constraints listed in Table
5.1, but it lies on lines l1 and l4 which are
present in the Table 5.1.
The new topological information is generated.

interactive environment by using the principle of
partially constraining any desired feature. To aid
usability and limit user involvement, much of the
cumbersome and tedious tasks of identifying and
determining spatial relationships within and between
font features is to be undertaken by the system. The
employment of partial constraints also supports the
reusability of such features. The design of a half-serif
is taken as a sample to illustrate the various
properties of the system.
One natural extension to the system would be to
provide a “gluing” option for the designer. This will
allow the linking of two or more features (such as a
serif to a stem) to be undertaken. The work will
involve the development of an appropriate user
interface which supports an interactive environment.

5.0 References
[1] Font Technology (Methods and Tools), P
Karow, Springer-Verlag, Berlin, 1994.
[2] Type Design with flexible constrained font
characteristics, Proc: IEE Document & Image
Processing and Multimedia, March 1999, London.

Acknowledgement
We would like to thank our students S Strah
and S Kolmani, who helped to realise our ideas
with programming. The system has been written in
Borland C++ (Version 4.5) and runs on personal
computers in MS Windows environment.

One can ask why the constraint interface has
been introduced if it is removed in the final stage.
The main reason for its introduction is that it is very
easy to erase just inserted font-feature if its BCDG
is separated from the main BCDG. When the user is
happy with the inserted font-feature, he/she starts
the BCDG optimiser and from this moment, the
font-feature cannot be extracted from the common
shape any more.

4.0 Conclusions
This paper has given outline of a system for
generating, editing and designing font features. The
primary goal of the system is to support an

Figure 1: Depicts the geometric entities for the
half-serif.

Figure 2: The Graphical User Interface (GUI) for the feature-based
design system, showing the case where a line with endpoints p 0 and p1
has been sketched in the Drawing window.

Figure 3: Depicts the sketch for the half-serif, together with the extracted
information required for the constraining process.

Figure 5: Constraint description graph for the partially constrained half-serif.

Figure 4: The half-serif after insertion of two additional constraints: Hline for the bottom
line to make horizontal and Vline for the left most line to make vertical.

Figure 6 Initial steps in generating serif

Figure 7 Schematic presentation of joining of BCDGs

