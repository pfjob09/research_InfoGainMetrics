Analysis and Design of Virtual Reality Applications in the WEB: a Case of Study
De Abreu A., Rodriguez O.
Laboratorio de Computación Gráfica.
Facultad de Ciencias.
Universidad Central de Venezuela UCV.
Apartado 47002. Los Chaguaramos 1041-A. Caracas-Venezuela
e-mail: [adabreu,omaira]@agata.ciens.ucv.ve
Matteo A.
Laboratorio Teoría y Tecnologías Orientadas a Objetos, Lenguajes y Sistemas. TOOLS.
Centro de Ingeniería de Software Y Sistemas. ISYS.
Facultad de Ciencias.
Universidad Central de Venezuela. UCV.
Apartado 48093. Los Chaguaramos 1041-A. Caracas-Venezuela
e-mail: amatteo@isys.ciens.ucv.ve

Abstract
The new coming era of the WEB represents a challenge in
the development analysis of software systems,
incorporating new technologies to access and present
information, that combines 3D images, sounds, video, and
text, in a way that the user gets involved in the interaction
with it. This is known as non-inmersive Virtual Reality.
Reusing software to solve such problems is then
necessary. On the other hand, there are no other known

1. Introduction
Virtual Reality has been present for more than a
decade, but just recently it has begun to be used to
present information in the WEB. The display of virtual
scenes in the WEB, is possible using new technologies,
languages and appropriated formats for their conception
and exploration. There are Virtual Reality applications
on the WEB [6] where the user interacts with objects in a
virtual environment. These environments are worlds
modeled integrating video, audio and 3D graphics,
among others. Using modeling languages like VRML
does the definition of such worlds or scenes possible.
On the other hand, the WEB´s vogue has established
a new challenge of software development, which has to
incorporate new technologies to get and display the
information. These applications are characterized by the
reuse of software components and the use of Java applets
in the design. However there are no known specific
methods and/or appropriate techniques for the WEB
application design. Due to the features of these kind of

specific methods or/and techniques for the development of
applications on the WEB. In this article, we present an
analysis and design of a WEB application,. a Virtual
Reality Architecture Editor (EVA)[1], using the OOSE
method for defining the system architecture, where the
reused and developed parts are showed, along with their
communication relationships.

problems, we can think about using any object oriented
method.
In this work, we develop an application for the
WEB, “Editor Virtual de Arquitectura, (EVA)”, using
OOSE[8][3] method mainly for the analysis process in
which we identify all the functionalities and actors, as
well as, everything related to the system software
architecture, in which we recognize the set of
components and their communication relationships and
we distinguish the reused components. The definition of
software architecture is relevant for this kind of
applications, since it is used to identify all the
components to be developed, reused and how they
communicate between them. Because we are dealing
with WEB applications, the components to be developed
correspond to the definition of a Java applet that are
loaded and run in the WEB page. The browser is by
itself a reused component, and in our case EVA, the tool
“Cosmo Player” allows the scene’s manipulation and
exploration. This is treated also as a reused component.

3.2 Use-Case model

2. Problem description and requirements
The system proposed here EVA, is created to
enhance modeling and design of low level complexity
housing, made with lecture purpose for the “Laboratorio
de Técnicas Avanzadas en Diseño”, Department of
Architecture at UCV. EVA is a help tool that allows
students to create and design in a two-dimensional space
taking advantage of a tridimensional space where the
design is modeled, making them possible to explore and
manage it.
We identify three main funcionalities for the
system:
• Design the house. Allows the user to create a
simple housing model, using predefined
elements such as: walls, windows,
doors, fretwork.
• Furnish the house with virtual
objects such as: chairs, tables,
beds, cars, bell, phone, lights,
virtual characters, etc., allows the
user to model the inner and outer
environment. In our case, the
virtual objects and their behaviors,
are also predefined.
• Explore and manipulate the virtual
scene. Here the user has a 3D view
of the 2D model he is designing,
allowing him to navigate, interact
and explore it. The 3D view is
permanently updated according to
the changes made in the 2D design.
The first two functionalities have to be
integrated in the system, in such a way, that
the user can do any kind of modification at any time.

3. Analysis Process.
Using the OOSE[8][3] method, we construct the
requirements and the analysis models.

3.1. Requirements Model
Here we propose an interface prototype, creating the
Problem Domain (optional), as well as, the Case Of Use
model, in which we identify the actors and their
functionalities.
Following are the Use-Case model and the interface
prototype.

3.2.1. Identifying actors and Use-Cases. For our
problem, we identify only one actor that has the
following functionalities:
• Housing design
• Housing exploration
However, we have to point out that the VRML
browser, who also allows the connection with the Java
applet, makes the interaction between the author and his
model. Thereafter, the two main functionalities of EVA
are viewed as extension of the browser functionalities.
We claim that this singularity is characteristic of
software applications for the WEB, and has to be
included in the Use-Case model.

Editor Virtual de
Arquitectura (EVA)
,QWHUDFWLQJ
ZLWK WKH
EURZVHU

([SORULQJ WKH
PRGHO

'HVLJQLQJ WKH
PRGHO

Figure 1. Main Use-Cases

3.2.2. Description and Use-Case purging.
Following are the description of the identified UseCases:
Browser interaction: The user begins a working
session invocating a WEB browser, hence all the
functionalities associated to it, are available. EVA can be
reached
at
the
following
WEB
address:
http://cuarzo.ciens.ucv.ve/
Housing modeling: Is considered as an abstract
Use-Case, which is constituted by the Use-Cases: Model
design and Model furnish.
Model Design: The actor, pressing the button
associated to the 2D editor activates this functionality.
Allowing him to build a 2D-model house.

order to be is the furnishing of the house followed by the
design.
Exploring the virtual scene:
This Use-Case is initialized through the
interaction with the VRML browser window. Its
capabilities, allows the user to interact and navigate a 3D
virtual representation of the floor design previously build
using the previous Use-Cases. The VRML browser
provides the proper set of functionalities corresponding
to the process of exploration and management of the 3D
scene: walk, slide, examine, speed and sound
adjustment, rotation, jump.

3.3. Analysis Model

Figure 2. The 2D Editor

In the previous figure, we show the interface
prototype that accomplishes this functionality. Four main
work areas are identify in our editor:
Working area: A square grid whose basic unit is the
Design Module (M), in our case 80x80 cm2.
Library area: Allows the user to a classified list of
predefined objects to be inserted in the working area.
Edition area: Here we find all the functionalities
proper to an editor such as: cut, undo, save, etc.
Legend area: Where the 3D picture corresponding to
each architecture element, is shown.
Furnishing Model:
Allows the actor to build a 2D-house model.
This Use-Case reuses the interface from Model Design
adapted to the functionalities of the virtual objects
available.
No restrictions are imposed to the order in
which these Use-Cases must be applied, ie, they are
considered independent in spite that the logical expected

Our strategy here relies on the paradigm of interface
separated from the problem abstraction.
In our case, the analysis model showed in the
previous figure corresponds to the development of the
2D editor. The entity objects conform the required
objects in the housing furnishing and design. The
interface objects, the most important are the HTML and
VRML browser, which correspond to the reused
components, of the application. On the other hand, we
have the applet object that corresponds with the button
that activates the 2D editor represented by the object
FrameEditor. We define an intermediate control object
between the interface and the entity objects that also
accomplishes the communication between the 2D editor
interface objects and 3D scene objects, keeping the two
views updated.
Following we describe the main objects:
• IGrid. The object who represents the grid.
Composed by IObjects.
• IObject. Are the basic building objects of the
design.
• IME. Are IObjects that define what we call the
“Structural Modules”. They define a whole
design ambient with different dimensions.
• IM. Is an IObject representing the design
module. Windows (ITWindow), walls (ITWall),
calados (ITFretwork), doors (ITDoor) and
electrical elements (ITElectric) comprise them.
• IFurniture. Are IObjects that represent the
furnishing virtual objects, such as: chairs
(IChair),
tables
(ITable),
viewpoints
(IViewpoint), etc.

4. EVA´s Architecture

Figure 3. Analysis Model
Due to the special features of this problem, is very
important to define all the development tools used,
before establishing the architecture.
• Java 1.1 as the development language.
• An HTML browser to load and run the
application. EVA resides in a WEB page that
holds the applet, as well as the VRML scene.
• The Java applet represents the 2D editor.
• The VRML97 specification is used to build the
predefined virtual objects and the whole 3D
virtual scene.
• VRML browsers to display, manipulate and
explore the 3D virtual scene that is currently
created in the 2D editor.
• The Java API External Authoring Interface
(EAI) is necessary to communicate the applet
with the VRML browser.

In Figure 4 are shown the reused tools: the HTML

Figure 4. System Overview

browser and the VRML browser. The Java applet is
the software component to be developed. A control
class called JavaVRMLCom, where all invocations
to the API classes are defined, accomplishes the
communication between the VRML browser and the
Java applet.

5. Applet Design
Figure 5 shows the Class Diagram for the 2D Editor,
using OMT[9] notation. These classes are defined in the
Java applet and have a direct correspondence with the
Analysis Model objects.

Figure 5.Class Diagram

The JavaVRMLCom class, correspond to the same
object control defined in the Analysis Model. There, we
define all the methods necessary to establish the
communication between the applet and the VRML
browser. The implementation of this class makes use of
the API EAI to create the 3D virtual scene in the VRML
browser, and permanently update it. The other classes
are the ones defined to accomplish all the design
requirements, and correspond to the entity objects
defined in the analysis model.

6. Summary
A WEB application that incorporates Virtual Reality
techniques is developed under the Object Oriented
approach. The analysis process is eased using the OOSE
method to define the different object types that comprise
the model.
This kind of applications requires cutting edge
technologies available as reusable components, and is
important to establish the system architecture once we
had ended the system analysis. This, clarifies
communication between components to be developed
and reused.
The WEB application development has their own
features that are different from
conventional applications. Our
experience, shows that is possible to
develop this kind of applications
under a systematic object oriented
approach.
Our application has been
satisfactorily proved under Netscape
Navigator 4.5 with the VRML plugin Cosmo Player 2.1 on Windows
95/NT working environment.
Following there are two images
corresponding to a simple design
made with the 2D editor and the
corresponding 3D model.

Acknowledgments:
To
Architect Gonzalo Velez Jahn for all
his valuable suggestions for the
architecture design.

Figure 6. 2D and 3D view of EVA.

7. References
1.

DE ABREU A., Desarrollo de un prototipo de una
aplicación WEB utilizando tecnologías de Realidad
Virtual no inmersiva. Laboratorio de Computación
Gráfica. T.E.G. Escuela de Computación, UCV.
1999.

2.

HECK M. MORELAND J., NADEAU D.
Inroduction to VRML97. Siggraph97. Los AngelesCalifornia, USA. 1997

3.

DIAZ I., MATTEO A., El método OOSE.. Technical
Report No.22, Centro de Ingeniería de Software y
Sistemas. UCV, 1997.

4.

COSMO SOFTWARE. PLATINUM
TECHNOLOGY, INC. http://cosmosoftware.com/

5.

NETSCAPE COMMUNICATOR.
http://www.netscape.com/

6.

BLAXXUN INTERACTIVE.
http://www.blaxxun.com/

7.

JAVA  TECHNOLOGY. http://www.java.sun.com/

8.

JACOBSON I., CHRISTERSON M., JONSSON P.,
ÖVERGAARD G. Object-Oriented Software
Engineering: A use-case driven approach. AddisonWesley Publishing Company. 1992.

9.

RUMBAUGH J., BLAHA M., PREMELANI W.,
EDDY F., LORENSEN W.
Object Oriented
Modeling and Design. Prentice-Hall International
Editions. 1991.

