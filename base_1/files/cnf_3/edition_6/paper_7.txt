WorldMirror and WorldBottle: Components for Interaction between Multiple
Spaces in a 3D Virtual Environment
Masahiko ITOH, Makoto OHIGASHI and Yuzuru TANAKA
Meme Media Laboratory
Hokkaido University, Japan
{imash,tanaka,ohigashi}@meme.hokudai.ac.jp
Abstract
This paper proposes a new concept and mechanism for
the user and content interaction between multiple spaces in
a 3D virtual environment. We introduce two types of visual
components; a flat, window-like WorldMirror, and a volumetric WorldBottle. These components embed other spaces
inside and render them on their surface, so that users can
look into the contents of other spaces from their current
working one and choose to enter. They also allow content
manipulation in embedded spaces from the current space.
Users can move an object from an embedded space to the
current working space, or drop an object from the current
space into an embedded space. In contrast to conventional
approaches, the proposed mechanism enables us not only
to define a spatial connection between different spaces, but
also to define a functional linkage among components in
different spaces.

1 Introduction
Recent growth of computer, network, storage and display technologies has enabled us to collect a large amount
of information on a single screen. However, some displays
are not large enough to handle such a large collection of
information. This is called the small-screen problem [9].
A number of techniques have been proposed for resolving
this problem. In this paper, we will pay attention to the following three approaches: (1) the overlapping windows approach [10], (2) the see-through interface approach [4] and
(3) the multiple virtual space approach for “window thrashing” [9].
For 3D virtual environments, the same problem has come
up, although there is a larger field to represent information
or windows. There has been some research in 3D environments to resolve this. 3D Rooms [14] uses multiple 3D visualization spaces. The Door and Overview enable users

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

to move across different visualization spaces, and to reach
into Rooms from the Overview to manipulate objects in that
space. However, Overview also adopts the tiled window
style, and thus cannot be embedded in a 3D environment.
The Task Gallery [15] and Project Looking Glass [2] are 3D
window manager systems. They allow users to use overlapping windows in a 3D virtual environment. However, the
applications that we can use in this 3D environment are still
2D window applications. Therefore, they merely arrange
the 2D applications geometrically in a 3D environment. 3D
Magic Lenses [19] is a see-through interface that extends
the Magic Lenses [4] to a 3D environment. Croquet [17],
WIM [18] and Worldlets [6] embed the other spaces in the
current space. They realize an overlapping window like interface in a 3D virtual environment.
This paper proposes a new concept and mechanism for
the user and content interaction between multiple spaces in
a 3D virtual environment. In contrast to conventional approaches, our mechanism enables us not only to define a
spatial connection among different spaces but also to define a functional linkage among components in the different
spaces. In our approach, any arbitrary space can be embedded into any arbitrary 3D component which renders the
space on their surface, so that users can look into the contents of other spaces from their current working space and
also enter. Users can also change their viewpoint of embedded spaces from their current working space. Our approach
also allows us to directly manipulate the contents of an embedded space from the current space. Users can transfer
any object from the embedded space to the current working space, or drop an object from the current space into an
embedded space.
For this purpose, we introduce two types of components;
a flat, window-like WorldMirror, and a volumetric WorldBottle. These components embed another virtual space inside, and render a relevant information space on their surface. They implement the following six functions: (a) object transportation between two spaces, (b) viewpoint transportation between two spaces, (c) interoperation of objects

between two spaces, (d) interoperation of viewpoints between two spaces, (e) direct manipulation of objects in other
spaces and (f) direct viewpoint manipulation of other spaces
independent of the viewpoint for the current space.

action

target

Object

Viewpoint
(b)

(a)

Transportation
drag-and-drop

2 Framework

(c)

dive
(d)

2.1 Fundamental Functions
Interoperation
The WorldMirror [7] is a flat, window-like component
(Figure 1 (a)). The WorldBottle is a volumetric, arbitrary
shape component (Figure 1 (b)). WorldMirror and WorldBottle are components for embedding multiple spaces into
a single virtual space environment. They render these other
spaces onto their surface, enabling users to look into the
contents of other spaces from their current working space
and thus to enter them. To construct the mechanism for the
user and contents interaction among multiple spaces, these
components require the following six functions, as shown
in Figure 2.

object
interoperation
(e)

viewpoint
interoperation
(f)

Manipulation
reach into

refocus

Figure 2. The functions for the WorldMirror
and WorldBottle.

2.2 Related Work
Figure 1. Snapshot of the WorldMirror and the
WorldBottle.
The function (a) enables users to transport objects between two spaces by drag-and-drop. To change the current
space, the function (b) for jumping into an embedded space
is needed. In order to define a functional linkage of components between two spaces, the WorldMirror and WorldBottle require the function (c) for making arbitrary components in the target space share values with components
in the source space. The embedded space is rendered onto
the surfaces of each WorldMirror and WorldBottle object.
The function (d) for interoperating viewpoints between the
source space and the target spaces enables the following interactions. When users look at the contents of an embedded
space through a WorldMirror and WorldBottle, what they
see is determined by their position relative to the WorldMirror and WorldBottle. When users move to their left,
they can see more of the portion of the space to their right.
To modify the contents in the target space dynamically, the
function (e) for reaching into the object in the target space
is needed. When users want to focus on the important parts
of the target space, the function (f) for refocusing such as
zooming etc., is required.

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

There are many systems displaying another space on an
object (Table 1). The Virtual Tricoder [20] and Flat Lenses
in 3D Magic Lenses [19] are flat panel see-through interfaces that embody Magic Lenses [4] in 3D environments.
WIM (the Worlds in Miniature) [18] and Volumetric Lenses
in 3D Magic Lenses are 3D shaped see-through interfaces
in 3D environments. AutoVisual [3] is the extension of
WIM for visualizing and exploring multivariate relations.
3D Magic Lenses provides the function (d) only. The Virtual Tricoder provides the function (d), and it provides limited support for function (f). WIM provides the function
(d), (e) and (f). AutoVisual inherits the function of WIM,
and has limited support for (c). Users can change the visualization of an inner space relative to the position in outer
space. Looser et al. [11] have extended 3D Magic Lenses
to an Augmented Reality. They mention that users can fly
into an immersive virtual reality scene from an augmented
reality scene using the MagicBook [5] interface. They provide the function (b)(d) and (f). Worldlets [6] captures a
3D representation of a virtual environment landmark into a
3D thumbnail. Worldlets provides the functions (b)(d), but
can show only snapshots of the other space through timed
captures. SEAMS [16] has introduced a mechanism for
connecting virtual environments. It provides the function

Table 1. The list of approaches and supported
functions.
(a) (b)
The Virtual Tricorder x
x
Flat Lenses
x
x
x
x
Volumetric Lenses
x
x
WIM
x
x
AutoVisual
x
o
Worldlets
o
o
SEAMS
l
o
Portals (Croquet)
x
x
3D Portals (Croquet)
o
o
WorldMirror
o
o
WorldBottle
o : supported x : not supported l :

(c) (d) (e)
x
o
x
x
o
x
x
o
x
x
o
o
l
o
o
x
l
x
x
o
o
x
o
o
x
o
o
o
o
o
o
o
o
limited supported

(f)
l
x
x
o
o
x
x
x
o
o
o

(a)(b)(d) and (e). Croquet [17], a recent system for collaboration between teams of users in 3D shared spaces, has portals and 3D portals. Portals provide the functions (b)(d)(e),
but appear to have limited support for (a). 3D portals provide the functions (d)(e)(f).

Table 2. The slot list of the WorldMirror and
WorldBottleBox
#SpaceName
#SpaceID
#Bidirection
#I/O-Port
#RenderLevel
#ViewMode
#Zoom
#Pan, #Tilt
#Up-Down,
#Left-Right

space that is uniquely specified by the above triplet. The
created WorldMirror and WorldBottle store the identifier
and the name of the target space in its #SpaceID slot and
#SpaceName slot. If necessary, we can change the referring
space by changing the value of the #SpaceID slot.
IntelligentBox

3 Architecture
We use a 3D meme media system, IntelligentBox [13]
as the basic platform. The IntelligentBox system is a
component-based visual software development system for
interactive 3D graphic applications. This system represents
objects as interactive 3D visual components, called boxes.
Each box has its own state value stored in variables, called
slots1 . We can define a compound function between two
boxes by connecting one slot from each of them. We propose box components called WorldMirrorBox and WorldBottleBox. They can take any arbitrary size, shape (WorldMirror is limited about shape) and position, and they can
connect arbitrary boxes to define a functional linkage. Table
2 shows the slot list provided by WorldMirror and WorldBottleBox.
In this section, we first describe the architecture for construction and management of spaces in Section 3.1, and then
we describe the implementation detail for all functions in
Figure 2.

the name of the target space
the identifier of the target space
a flag for bidirectional link
a slot for the communication with any
boxes in the target space.
a parameter for recursive rendering
a flag for view control mode
a parameter for zoom in or out
a parameter for rotating the viewpoint
a parameter for moving the viewpoint

Space A

Space B

Global
object 2

Mirror to
space B

Global
object 3

Mirror to
space C

Global
object 4
Children objects

Object List in
Target Space B

Object List in
Source Space

Object List in
Target Space C

(a) The structure of spaces and objects

C

A

3.1 Construction and Management of Spaces

Space C

Global
object 1

B

(b) A display result

Figure 3. The structure of displayed objects.
We define a virtual space as a triplet of the form
(space id, space name, object list). When a new space is
created by users, the kernel system supplies both a space id
and a space name. Each of WorldMirror and WorldBottle has a #SpaceID slot and a #SpaceName slot to specify
which space they reference. When we create a new WorldMirror and WorldBottle, the kernel system creates a new
1 let

us denote a slot name as #slot name.

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

As shown in Figure 3 (a), the IntelligentBox kernel manages multiple virtual spaces as a list. Each compound box
has a tree structure. The root object is a global object. Each
space manages a list of global objects. Each global object
manages its child objects. For example, in Figure 3 (a), the
Space A has an object list including Global object 1, Global
object 2, and so on. The Space B and the Space C also have

their own object list.
The kernel system renders each listed objects of the
source space. It also sends a redraw message to all objects
in the source space. When the WorldMirror and WorldBottle receive a redraw message from the kernel system, they
get the list of objects in the target space from the kernel system, and display them on their shapes using the technique
described in Section 3.5. For example, the WorldMirror B
in the Space A gets the object list of the Space B, and renders the objects in this list on its shape (Figure 3 (b)).

3.2

Drag-and-Drop, and Reach into

Users can move objects from the source space to the target space by drag-and-drop manipulation through WorldMirror and WorldBottle. If the user drops an object into the
target space holding down the Control key, the user can also
create a copy of that object in the target space. Figure 4 (1)
shows the move or copy of an object from the source space
A to the target space B by a drag and drop operation. When
the user is dragging an object, an outline of the object is
displayed to show where the dragged object is. When an
object is moved from the source space A to the target space
B, it is added to the object list of the target space B, and the
object is deleted from the object list of the source space A.
When an object is copied from the source space A to the target space B, the copy is added to the object list of the target
space B.
Source Space A
(1)
Target Space B

Target Space C

(2)
Drag-and-Drop for
Move or Copy

WorldBottle

WorldBottle
(3)
Drag Outline

Figure 4. Drag-and-drop for moving or copying objects from one space to another.

When the user holds down the Alt key while pointing at
the WorldMirror and WorldBottle object, the user can select
and manipulate objects in this target space. The user can
move or copy objects from the target space B to the source
space A by dragging and dropping as shown in Figure 4 (2).
The user can also move or copy the object from the target
space B to another target space C as shown in Figure 4 (3).

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

Moreover, the user can move or copy the WorldMirror
and WorldBottle from the source space or the target space
to another target space in order to create a nested relation
among these spaces.

3.3 Dive
The WorldMirror and WorldBottle both detect collision
with the user’s eye position. When the user’s eye position
goes across to the surface of the WorldMirror and WorldBottle, the user can seamlessly enter the target space.
Figure 5 shows an example of entering a target space.
The user approaches the WorldBottle B in space A and
when the user touches its surface, and then the user can
move into the referred space B.
To go back to a former space after entering a target space,
we provide a bidirectional link mechanism. For this purpose, both WorldMirror and WorldBottle provide a #Bidirection slot. If a user sets a value true into the #Bidirection
slot, the WorldMirror and WorldBottle generate a copy of
themselves into the target space. This copy refers to the
source space.

3.4 Object Interoperation
To share the state value of objects in the target space with
the values of the objects in the source space, we provide a
special slot. It is called an #I/O-port slot. This enables us to
communicate with the inner objects by accessing their slots
from the outer space. That means that two objects in different spaces can interoperate with each other. Any arbitrary
component connected to the #I/O-port slot of the WorldMirror and WorldBottle can communicate with any box in the
target space.
This allows us to change the visualization of the target
space by modifying the value of inner objects through the
#I/O-port slot. Figure 6 (a) shows an example of the architecture for sharing the same value between two objects,
the inner one and the outer one. A RecordObject in the target space has a record list of related products information
in the #record set slot. The #record set slot is connected
to the #I/O-port slot of the WorldMirror and WorldBottle.
The WorldMirror and WorldBottle show the contents in the
target space that include the visualizer components. The
visualizer components have the #data set slot connected to
the #I/O-port, and receive the record list from the source
space and visualize these records in the target space (Figure
6 (b)).

3.5 Viewpoint Interoperation
Using the mechanism for communicating a viewpoint
between the source space and the target space, users can

Enter
Zoom In
WorldBottle B
anchor

Figure 5. Dive into the target space.

WorldMirror/WorldBottle

source space

WorldBottle

Visualizer

#data_set

target space

RecordObject
including related
products information

#record_set

#I/O-port
records

(a) Connection between a RecordObject
in the source space and a Visualizer in the
target space through the #I/O -port slot

source space
(b) Visualizing related
information list in the target space

Figure 6. Example of object interoperation between two spaces

look into the target space. To look into the inner space,
WorldMirror and WorldBottle render the target space on
their shape. To render a different space on the 3D shape
of WorldMirror and WorldBottle, we adopt a rendering
method that uses a stencil buffer, which is used for drawing a scene onto arbitrary screen positions.
3.5.1 Rendering Algorithm
Figure 7 shows the drawing process of the WorldMirror and
WorldBottle using the stencil buffer. There are Object A, B
and C in the source space. The Object C is a WorldMirror
or WorldBottle. Object D and E in the target space are displayed on the shape of Object C. The upper row in Figure 7
shows the values of the stencil bit in the stencil buffer. The
middle row shows the depth values in the depth buffer. The
bottom row shows the state of the screen in each step.
First, both the stencil buffer and the depth buffer are
initialized as shown in Figure 7 (1). After the kernel system renders all objects in the source space (see Figure 7
(2)), it sends a redraw message to each object in the source
space. When the WorldMirror and WorldBottle receive the
redraw message from the kernel system, the WorldMirror

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

and WorldBottle start rendering the objects in their target
space on their surfaces. The WorldMirror and WorldBottle
specify their front side surface as the mask area in the stencil
buffer to render the objects in the target space (see Figure
7 (3)). If more than two WorldMirrors and WorldBottles
overlap on the screen, each of their mask areas can be specified according to their depth buffer values. The WorldMirror and WorldBottle clear the depth value in the mask area
to distinguish the context of the objects in the target space
and the context of the objects in the source space (see Figure 7 (4)). The WorldMirror and WorldBottle then draw the
objects in the target space onto the mask area in the stencil
buffer (see Figure 7 (5)). The WorldMirror and WorldBottle
restore the depth value in the mask area (see Figure 7 (6)).
In this way, the object D and E in the target space can be
rendered on the shape of the WorldMirror and WorldBottle.
Suppose that there are some WorldMirror and WorldBottles in the target space. In such a case, the WorldMirror and
WorldBottle in the source space have to draw one or more
other spaces recursively. In order to designate the appropriate mask area for the nested WorldMirror and WorldBottle,
they shift the stencil bit left by one (in Figure 7 (3)). The
WorldMirror and WorldBottle should restrict the nested levels of rendering in order to avoid infinite loops. The #RenderLevel slot controls the nested level of rendering. Figure
8 (a) shows the screen image in the case that the #RenderLevel slot of the WorldMirror A is “3”. The WorldMirror
A displays the object in the space C. Figure 8 (b) shows
the screen image in the case that the value of #RenderLevel
slot of the WorldMirror A is “2”. The WorldMirror A displays the WorldMirror C, but it does not display the space
C objects.
3.5.2

Viewpoint Control

We present two modes of viewpoint control in order to
look through the inner spaces: Normal mode and Centering
mode. The normal mode enables users to look at the target
space in the same way they look through a window in the

(1)

(0)

(2)

(4)

(3)
0

stencil
buffer

0

0

0

0

1

(5)

0
0

0
1

(6)

0
0

0
1

0
0

0
1

D
0

B
Object
A

1
A

depth
buffer

E

D
C
E

B

C

WorldMirror
or
WorldBottle

screen

Figure 7. A procedure for rendering objects in the target space on a WorldMirror or WorldBottle
object.

WorldMirror B

WorldMirror C

WorldMirror B

Space

WorldMirror C

Space

C
A B

C
A B

Level = 3
Level = 2

Level = 3
Level = 2
Level = 1

Level = 1

WorldMirror A

WorldMirror A

(a) # RenderLevel = 3

(b) # RenderLevel = 2

(a) Normal mode

(b) Centering mode

Figure 9. The two different types of viewpoint
control.

Figure 8. Rendering control for nested
spaces.

real-world. When users look at the contents of embedded
spaces through a WorldMirror and WorldBottle, what they
see is determined by their position relative to the WorldMirror and WorldBottle (Figure 9 (a)). When users move
to their left, they can see more of the space to their right.
When users pick up the WorldMirror and WorldBottle objects and move them, the same thing happens. In addition,
the centering mode enables us to always look at the center
of the target space. Although users pick up the WorldMirror and WorldBottle objects and move them, the position
of the objects in the target space still stay in centered on the
WorldMirror and WorldBottle, and only the angle of objects
are changed (Figure 9 (b)). We provide the #ViewMode slot
to change these modes.
In the case of the normal mode, we use the formulas (1)
and (2) to specify the location of the viewpoint and the center position of the target space. We specify each variable in
the formulas as follows.
−
→
sc : The center position of the source space.

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

−
→
tc : The center position of the target space.
→
−
se : The viewpoint position of the source space.
→
−
te : The viewpoint position of the target space.

−
→ −
tc = →
sc
−
→ −
→ −
→
te − tc = →
se − −
sc

(1)
(2)

From these formulas, the WorldMirror and WorldBottle
render the objects in the target space whose relative position
is the same in the source space (Figure 10 (a)(b)).
In the case of the centering mode, we use the formulas
(3) and (4).
−
→ −
−→
tc = →
sc − −
wm
−
→ −
→ −
→
te − tc = →
se − −
sc

(3)
(4)

−→ specifies the position of the WorldMirThe variable −
wm
ror and WorldBottle. These formulas mean that the position
of WorldMirror and WorldBottle in the source space is used
as the center of the target space. (Figure 10 (a)(c)).

Source Space

se-sc

viewing volume

into a different space in order to narrow down the range of
information. As a result, users can access their desired information while changing their viewpoints, comparing different aspects, and drilling down through spatial navigation.

o

sc

sc
wm

se

WorldMirror

sc-wm

screen
mask area

(a) Viewpoint control in the source space
sc

Target Space

= tc

4.1 Multi-Facet Database Visualization
In the source
space, users can
look at this object
in this position.

o

se-sc = te-tc

tc
te-tc

te

Object in
the target space

(b) Viewpoint control in the target space in normal mode
In the source
space, users can
look at this object
in this position.

sc-wm = tc
se-sc = te-tc

Target Space

tc
te-tc o

te

Object in
the target space

(c) Viewpoint control in the target space in centering mode

This first example illustrates the construction of an information access space that allows users to explore large
amounts of database records through multiple visualization
spaces [12]. In this space, each database record is visualized
together with multiple WorldMirror components that visualize multiple different views of the record, called facets.
Since each different facet is associated with different record
attributes, we can catch a glimpse of multiple related visualizations through these WorldMirrors. We can also access
the relevant records by diving into an arbitrarily chosen one
of these spaces. Users can dynamically edit these multiple
views in order to change their navigation and visualization
functions by directly selecting and manipulating WorldMirrors. Using the WorldMirror components, multiple database
visualizations can be mutually linked to each other, in which
the user can explore databases easily by threading these
spaces.

Figure 10. Viewpoint control.

3.6 Refocus
The #Zoom slot specifies the size of displayed target
space. If a component for controlling an input value, such
as a SliderbarBox, is connected to the #Zoom slot of the
WorldMirror and WorldBottleBox, users can control the
display size of the target space accordingly. This value is
−
→
−
→
used to multiply the tc and te in formulas (1), (2), (3) and
(4). The #Pan slot, the #Tilt slot, the #Up-Down slot and the
#Left-Right slot are also used for changing the displayed rotation and/or position.
When the user manipulates the WorldMirror and WorldBottle while holding down the Shift key, he can manipulate
the viewpoint of target space dynamically.

4 Applications
In this section, we present two visualization applications
using WorldMirror or WorldBottle.
As WorldMirror and WorldBottle render the relevant information space on their surface, we can introduce multiple different visualizations into a single visualization space.
They also provide a mechanism to modify the inside content, so that users can change their viewpoints through direct component manipulation. Moreover, users can move

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

Figure 11. Spatial navigation in multi-facet visualizations.

Figure 11 shows an example spatial navigation in a
multi-facet visualization. In this example, a user want to
find some required data, i.e. “artists” work who copied the
ukiyo-e in France”, from a large historical database. Spatial navigations corresponding to relational data queries for
narrowing down the subject tables or joining multiple tables allow the user to reach the desired information simply

through the repetition of the following process: selecting
one facet from a certain record, entering its space, focusing
on another specific record, and selecting one facet thereof.

4.2 Amazon Web Services Visualization
The second example is an application for exploring similar products in a 3D environment using the Amazon Web
service (AWS) [1]. We can find product information from
input keywords using the KeywordSearch of the AWS. The
SimilaritySearch of the AWS allows us to retrieve product
information by searching on a specific product.
We can connect these two services to each other dynamically [8] and create a system for exploring similar products
in 3D virtual spaces. Using WorldBottle, two Web services
can be connected each other, in which the user can explore
similar products successively by tracing connected spaces.
First, the user can examine products from keywords using
the KeywordSearch. The records retrieved from a KeywordSearch are visualized in the current space (Figure 12 (a)).
If the user is interested in the related products information
about a visualized product, the user can select a product
dynamically and search the related products about the selected product from the SimilaritySearch (Figure 12 (b)).
The records retrieved from the SimilaritySearch are visualized in another space. When the user approaches the selected product, WorldBottles appear, and the user can observe the related products about any selected one from the
current space (Figure 12 (c)). If the user wants to compare
related products about several products, the user can select
more than one product and visualize in multiple spaces (Figure 12 (b)(c)). The user can enter the related product space,
in which there are many products that the user prefers (Figure 12 (d)). The user can explore these related products
recursively (Figure 12 (d)-(b)).

5 Conclusion
In this paper, we have proposed a new concept and mechanism for interaction between multiple spaces in a 3D virtual environment. We have introduced visual components;
a flat, window-like WorldMirror, and a volumetric WorldBottle. They implement the following six functions for interaction between spaces: (a) transportation of objects between two spaces, (b) entering other spaces by exchanging
the user’s current space, (c) communication of objects between two spaces to modify the contents of a target space
from the source space, (d) observing the change of other
spaces from the current space, (e) direct manipulation of
objects in other spaces and (f) manipulation of the viewpoint of other spaces independently of the viewpoint of the
current space.

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

We have applied the proposed components to several
visualization applications. Using our space components,
users can access their desired information while changing
viewpoints, comparing different aspects of information, and
narrowing down the range of information through spatial
navigation.

References
[1] Amazon
Web
Service(AWS).
http://www.amazon.co.jp/webservices/.
[2] Project
Looking
http://www.sun.com/software/looking glass/.

Glass.

[3] Clifford Beshers and Steven Feiner. AutoVisual:
Rule-based design of interactive multivariate visualization. In IEEE Com- puter Graphics and Applications, volume 7/93, pages 41–49.
[4] Eric A. Bier, Maureen C. Stone, Ken Pier, William
Buxton, and Tony D. DeRose. Toolglass and Magic
Lenses: The See-Through Interface. In Proceedings
of 1993 ACM SIGGRAPH Conference, pages 73–80,
1993.
[5] Mark Billinghurst, Hirokazu Kato, and Ivan Poupyrev.
MagicBook: transitioning between reality and virtuality, 2001.
[6] T. Todd Elvins, David R Nadeau, and David Kirsh.
Worldlets - 3D Thumbnails for Wayfinding in Virtual
Environments. In Proceedings of the ACM User Interface Software and Technology Symposium，UIST’97,
1997.
[7] M. Itoh and Y. Tanaka. WorldMirror and WorldBottle: Components for embedding multiple spaces in a
3D virtual environment. In Journal of IPSJ, 42, pages
2403–2414, 2001.
[8] M. Itoh and Y. Tanaka. Multispace Information Visualization Framework for the Intercomparison of Data
Sets Retrieved from Web Services. In WWW2005,
Poster Tracks 750, 2005.
[9] J.D.A.Henderson and S.K.Card. Rooms: The Use of
Multiple Virtual Workspaces to Reduce Space Contention in Window-based Graphical User Interfaces.
ACM Transactions on Graphics, 5(3):211–241, 1986.
[10] Alan C. Kay. The early history of Smalltalk. In History of programming languages—II, pages 511–598,
1996.

Figure 12. Successive navigation using the Similar Products Search.

[11] Julian Looser, Mark Billinghurst, and Andy Cockburn. Through the looking glass: the use of lenses
as an interface tool for Augmented Reality interfaces.
[12] M. Ohigashi and Y. Tanaka. 3D Space Framework
for the Multi-Facet Accessing of Database Records.
In Intuitive Human Interface 2004, LNAI 3359, pages
142–158, 2004.
[13] Yoshihiro Okada and Yuzuru Tanaka. IntelligentBox:
A Constructive Visual Software Development System
for Interactive 3D Graphic Applications. In Proc. of
Computer Animation ’95, pages 114–125, 1994.
[14] George G. Robertson, Stuart K. Card, and Jack D.
Mackinlay. Information visualization using 3D interactive animation. Communications of the ACM,
36:57–71.
[15] George G. Robertson, Maarten van Dantzich,
Daniel C. Robbins, Mary Czerwinski, Ken Hinckley, Kirsten Risden, David Thiel, and Vadim
Gorokhovsky. The Task Gallery: a 3D window
manager. In CHI, pages 494–501, 2000.
[16] Gernot Schaufler and Dieter Schmalstieg. Sewing
Worlds Together With SEAMS: A Mechanism To
Construct Large-Scale Virtual Environments. PRESENCE - Teleoperators and Virtual Environments,
8(4):449–461, 1999.
[17] D. Smith, A. Raab, D. Reed, and A. Kay. Croquet: A menagerie of new user interfaces, 2004.
http://www.opencroquet.org/index.html.
[18] Richard Stoakley, Matthew J. Conway, and Randy
Pausch. Virtual Reality on a WIM: Interactive Worlds

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

in Miniature. In Proceeding of the 1995 ACM SIGCHI
Conference, 1995.
[19] John Viega, Matthew J. Conway, George Williams,
and Randy Pausch. 3D Magic Lenses. In ACM
UIST’96, pages 51–58, 1996.
[20] Matthias M. Wloka and Eliot Greenfield. The Virtual
Tricorder: A Uniform Interface for Virtual Reality.
In Proceedings of the 1995 ACM UIST Conference,
pages 39–40, 1995.

