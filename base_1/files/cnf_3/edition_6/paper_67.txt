Adaptive Binary Trees Visualization with Respect to User-Specified Quality
Measures
Adrian Rusu
Christopher Clement
Department of Computer Science
Rowan University
Glassboro, NJ 08028, USA
rusu@rowan.edu
clemen55@students.rowan.edu

Abstract
Many algorithms have been designed to visualize binary trees efficiently with respect to a quality measure.
While each algorithm is suitable for drawing particular categories of binary trees, an effort to compile these algorithms to maximize the quality of drawings has not been
realized. Our first step is to create a system that determines
the type of a binary tree and then selects an algorithm to
draw the tree depending upon the specified quality measures. Currently, our system recognizes six types of binary
trees (AVL, Complete, Fibonacci, Random, Unbalanced-tothe-left, Unbalanced-to-the-right) and allows the user to
choose from eleven quality measures (Area, Aspect Ratio,
Total Edge Length, Maximum Edge Length, Uniform Edge
Length, Closest Leaf, Farthest Leaf, Size, Minimum Angle
Size, Average Angle Size, Angular Resolution). Experiments
show that our adaptive visualization system outperforms
any system using a single binary tree drawing algorithm.
In addition, our approach allows the user to select multiple
quality measures and automatically detects the best available binary tree drawing algorithm.

1 Introduction
Trees are ubiquitous data-structures, arising in a variety of applications such as Software Engineering, Business Administration, Knowledge Representation, and Website Design. Visualizing a tree can enhance a user’s ability in understanding its structure. Hence, a lot of research has been done on visualizing trees, which has produced a plethora of tree-drawing algorithms (see for example, [1, 2, 3, 4, 6, 7, 8, 10, 12, 15, 16, 17, 18]). The majority
of these algorithms have been developed with the primary
target of minimizing the area of the drawing.
The experimental analysis performed in [14] determined

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

Radu Jianu
Department of Computer Science
Brown University
Providence, RI 02912, USA
jr@cs.brown.edu

that no single algorithm performs better than all other algorithms for all quality measures. This observation has
lead us to design a system comprised of four algorithms
that represent the main distinct approaches that have been
used to draw binary trees without distorting or occluding the
information, namely Separation-Based, Path-Based, LevelBased, and Ringed Circular Layout approaches. Since it
is necessary to know the type of a binary tree before being able to select an algorithm to draw it, our system first
analyzes the tree to classify it as a specific type and then selects an algorithm to draw it with respect to user-specified
quality measures. The algorithm that is selected to draw
a given tree is based upon the experimental analysis performed in [14], which determined the order of performance
of the algorithms for each quality measure.
A binary tree is one where each node has at most two
children. In contrast to graphs, every tree accepts a planar
drawing, i.e. without any crossings. A straight-line drawing
has each edge drawn as a single line-segment. Grid-based
algorithms place all the nodes of a drawing at integer coordinates. A drawing of a tree has the subtree separation
property if, for any two node-disjoint subtrees of , the enclosing rectangles of the drawings of the two subtrees do
not overlap with each other. All algorithms in our system
produce planar straight-line grid drawings and exhibit the
subtree separation property.

2 System Components
Our system is composed of approximately
lines of
code, the majority of which is C++ code. The user interface
is implemented in Java. All of the underlying algorithms,
including the tree-type determination algorithm, are implemented in C++. The Java and C++ portions of the system
interact with each other through a series of system calls.
We first present the user interface for our system, followed by the selectable drawing algorithms, the types of

binary trees in our database, our type-determination algorithm, and the quality measures that can be specified by the
user.

Our system provides a simple interface for visualizing
binary trees with respect to user-specified quality measures
(See Figure 1).
The first step is to select a tree to visualize. The tree is
stored in a file following the format described in [13].
After selecting a tree, the user can then choose one, two,
or three quality measures that the specified tree should be
drawn with respect to.

Figure 1. The selection screen with quality measures angular resolution, area, and closest leaf
selected.
The user then submits their selection and a drawing of
the specified tree is displayed (See Figure 2).

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

