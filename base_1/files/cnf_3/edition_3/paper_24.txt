2009 13th International Conference Information Visualisation

A Framework for Constructing Coordinated Multiple 3D Visualizations on Excel
Masahiko ITOH
Institute of Industrial Science, The University
of Tokyo, Tokyo 153-8505, Japan
imash@tkl.iis.u-tokyo.ac.jp

Yuzuru TANAKA
Meme Media Laboratory, Hokkaido
University, Sapporo 060-8628, Japan
tanaka@meme.hokudai.ac.jp

Abstract

different results, and the same query sometimes retrieves
different results according to data resources, such as
different search engines like Yahoo! or Google. In such
situations, the technique of multiple visualizations is
helpful enabling users to understand the meaning of
information.
Single visualization at times causes information to
be misinterpreted or the ‘richness’ of the underlying data
to be missed [1]. Presenting complex information with a
single-complex representation does not work well.
Multiple, simple representations, each focused on a
particular aspect, are better [8]. However, in such
situations, users risk losing track of the relationships
between isolated pieces of information [9]. It is useful to
apply coordinated multiple 3D visualizations, in which
each visualization reveals one aspect in simple form.
This enables users to connect and/or compare data sets
with each other, in an effort to discern relationships.
The aim of our research is to provide an application
framework for end-users, who do not have sufficient
programming skills, to dynamically generate applications
using interactive coordinated multiple 3D visualization
techniques. Users can construct such 3D applications
through trial-and-error processes. It is difficult for them
to construct the solutions they want with stepwise
processes, and without interactive and modifiable
environments. Our framework enables users to use
various values for different parameters and/or different
3D components in parallel to enable exploratory searches
for solutions by making intercomparisons of multiple
results.
To accomplish this,
we first utilize a 3D
component-based interactive visualization framework
[10][3][11]. This enables users to use various kinds of
data resources such as SOAP-style Web services and
REST-style Web services, and local databases without
the need for programming. It also allows users to flexibly
construct arbitrary 3D representations of retrieved data
just through combining interactive 3D components.
Second, we utilize an Excel spreadsheet
environment
to
define
multiple
coordinated
visualizations. The spreadsheet paradigm has three
characteristics [12]: (a) a set of operators that allow
users to generate or modify cell content, (b) a tabular
layout that lets users view collections of visualizations
simultaneously, and (c) cell references such as A1 or

The aim of our research is to provide an application
framework for end-users, who do not have enough
programming skills,
to
dynamically
generate
applications using interactive, coordinated, multiple 3D
visualization techniques. In our framework, each 3D
application for visualization is constructed by users
themselves or already exists, and consists of sets of
interactive 3D components. Users can embed such 3D
applications into cells on Excel, and define the
coordination between them. To define coordination, we
provide interactive 2D/3D components and coordination
rules that enable users to use operations for
coordination such as brushing and linking, retrieving
related or detailed information one after another,
synchronizing viewpoints between 3D visualizations, and
sharing table values between 3D components for
visualizations and cells on Excel.

1. Introduction
Web resources currently provide various kinds of
data. Moreover, we can construct special databases in
local machines to handle the data for our research
domains through these. Data obtained occasionally has
multiple dimensions such as statistical data or product
information. 3D information visualization enables us to
map such non-spatial abstractions into effective visual
form to simultaneously present various dimensions.
Moreover, we can obtain data that includes 3D structures
such as 3D structures of proteins, geographic data, or 3D
structured human-body models through the Web
[4][5][6]. Most users cannot understand the raw data of
such physical data. Visualizing such data in a 3D
environment allows us to understand how the data should
be interpreted.
Users occasionally want to connect one data
resource to others, which may be related, to explore
related and/or detailed information. For example, organs
and/or tissues of gene expression, which are retrieved
from BodyMap XS [7], can be mapped to one or more
parts of 3D structured human-body models retrieved
from other resources. Datasets sometimes have multiple
layers, e.g., bone, the brain, and blood vessels of the
head, or satellite images, road maps, or elevation maps
for a GIS system. Moreover, different queries create
978-0-7695-3733-7/09 $25.00 © 2009 IEEE
DOI 10.1109/IV.2009.60

162

spaces. There are two necessary functions for this
coordination: (a) a function for selecting items through
user operations, and (b) a function for highlighting or
filtering items under given conditions. There are two
styles in selecting manipulation: indirect and direct [18].
Indirect manipulation includes dynamic queries [19] that
mainly use sliders to specify a range of selection. Direct
manipulation enables users to select or filter displayed
items by selecting visualized items themselves. This
requires components for brushing techniques such as
using a selecting indicator or picking out items directly
one-by-one.
Coordination (ii) for navigating views-to-views
coordination is mainly used for synchronizing view
navigation such as panning and zooming between
different visualization spaces. To achieve this, a function
for sharing information in the viewing transformation of
two or more visualization spaces is required.
By using coordination (iii) for selecting items to
navigating views coordination, users can select items and
view corresponding, detailed, or related information in
separate windows. This is used for a drill-down or
details-on-demand interface. In addition, this is used for
an overview+detail interface that enables users to pan or
zoom a detailed view by dragging or resizing a selector
object in an overview.
These three types of coordination in the taxonomy
[2] do not cover the coordination of element layouts [13].
Coordination (iv) for linking the appearances of views of
graphical elements such as layouts or sizes belonging to
different visualization spaces is used to select the same
region using selectors in different visualization results, or
to move objects, which are used to specify the conditions
of visualization or simulation, in different visualization
spaces. This requires a function for sharing the positions
of objects and the values of their scale ratios.
The functions for (v) extracting values of records
from a visualization environment to a spreadsheet as a
table and for importing a table from the spreadsheet into
the visualization environment enables users to edit or
merge such extracted tables and to visualize such a
modified table again. Users can also analyze the
extracted data using additional functions of the
spreadsheet such as principal component analysis or
multiple regression analysis, and generate new
visualization results that reflect the results of such
analyses.
The coordination mechanism (v) allows users to
preview the values of visualized records in cells or
ranges on a spreadsheet. To communicate between such
previewed data and visualization spaces, (vi)
coordination between selecting operations for cells and
navigating operations for elements in the visualization
space is required. This enables users to highlight
visualized elements that have the same values for
selected cells on the spreadsheet, or to select cells that
have the same values for selected items in the
visualization space.
All functions in our framework for these kinds of
coordination are provided by the customizable and

B5:C8 to maintain the dependence between cells and to
automatically update them.
Excel functions, user-defined functions, and Excel
add-ins enable end-users, who range from nonprogrammers to experts, to easily generate multiple
parameter values, create and edit table values, and also to
analyze these table values.
The table structures of spreadsheets are helpful
enabling us to compare multiple values simultaneously.
The cells in current spreadsheets normally only support
atomic data such as numerical or string values, and only
include simple graphs that cannot be connected to define
the coordination between them. In our framework, users
can embed 3D visualization applications into cells on
Excel. Each embedded 3D visualization can treat
complex data values as visualization objects in one cell.
This enables users to easily generate multiple 3D
visualizations, and to compare them simultaneously.
Moreover, the function of cell references enables
users to define coordination using a data-flow model just
through writing simple formulas in the cells. Our
framework allows end-users to define coordination
between 3D visualizations by using the cell reference
function of the spreadsheet. The research presented in
this paper extends our previous work [3] and provides
components for supporting six kinds of coordinations
between different 3D visualizations in the cells: (i)
selecting items-to-items coordination, (ii) navigating
views-to-views coordination, and (iii) selecting items to
navigating views coordination. It also provides a
mechanism for (iv) coordinating layouts or sizes of
elements in different visualization environments, (v)
extracting a table data in a visualization environment to a
range on a spreadsheet, and importing values in a range
of data to a visualization environment as table data.
Finally, it provides (vi) a coordination mechanism
between an operation for selecting cells on a spreadsheet
and for selecting items in visualization environments to
enable the relationship between the table data and the
visualization results to be checked.
There are a large number of Excel users throughout
the world. Our framework enables them to construct
Excel documents with 3D applications. It also enables
them to share, reuse, and dynamically modify existing
3D visualization systems using coordination mechanisms
developed by other users.

2. Coordination Framework
North
and Schneiderman
[2] categorized
coordination into three types, i.e., (i) for selecting itemsto-items coordination, (ii) for navigating views-to-views
coordination, and (iii) for selecting items to navigating
views coordination.
Coordination (i) for selecting items-to-items
coordination is mainly used for an operation called
"brushing and linking" or "selecting and highlighting."
When a user selects some visualized records in one
visualization space, the same or items related to the
selected items are highlighted in the other visualization

163

interactive 2D/3D components mentioned in Section 4.
By combining definitions of coordination, users can also
define chained coordination and bidirectional
coordination.

Figure 1 has an overview of the architecture for the
proposed framework, where we have utilized Microsoft
Excel as our spreadsheet platform.
The BoxPad component [3] works as a 2D media
component that displays a 3D visualization environment
on its surface. BoxPad provides two types of lists of slots.
The first has (a) environmental parameter slots such as
#EyePosition and #EyeCenter slots. By sharing the
values of these slots of BoxPads on different cells, users
can implement coordination (ii) for navigating views-toviews coordination (Figure 2). The second one has (b)
functional parameter slots. The functional parameter
slots delegate the functions of boxes in the 3D
environment. BoxPad allows us to export just the
required slots of the arbitrary boxes. To avoid name
conflicts between exported slots, we adopt a path
expression defined by the name of the specified slot and
the object's position in the tree structure of compound
components. For example, the path expression
/RESTProxyBox[1]/TextBox[2]/@Text specifies the
#Text slot of TextBox, which is the second child
TextBox of the RESTProxyBox. The exported slots can
be used in IntelligentPad environments. Since all slots of
BoxPad work as interfaces for communicating with other
pads, we can define functional links between arbitrary
components in different 2D/3D environments.

3. Related Work
GAV [22] provides various kinds of visual
components to easily develop applications using multiple
linked views. However, it still requires a simple
programming task to construct applications. Snap [23]
enables users to rapidly and dynamically construct
customized exploration interfaces using visualizations
and coordination without the need for programming.
Excel Visualizer [24] provides a 3D view of a cell
range, in which numerical data can be displayed using
techniques such as 3D bars. It supports a function
enabling table data to be shared between the range and
the 3D view, and for clicking 3D bars and highlighting
the corresponding cell on the spreadsheet.
Visualization Spreadsheet [12] utilizes tabular
displays, cell operators, and management of the cell
dependencies of the spreadsheet to present multiplevisualization results using various parameter values.
There are many systems and/or research projects
using 3D visualizations and coordinated multiple views.
However, they suffer from five limitations and
difficulties: (a) they make it difficult for end-users to
access Web resources and connect them to each other
without writing a script program, (b) they have a limit on
the number of accessible data resources, (c) they only
provide limited types of visualization components, (d)
they do not allow visualized results to be treated as
reusable interactive objects, and (e) they have a limited
number of functions for defining coordination that are
based on a closed and an a-priori fixed architecture.

3D Components for Visualization

slot A slot B

3D Environment

slot C slot D

2D Components

BoxPad

Export
slots

CellSyncPad
slot A

A3:B5

slot B

A2
A

functional
linkage with
range

4. Architecture
Our framework utilizes the 2D and 3D meme media
system, IntelligentPad, and IntelligentBox [15][16][17]
as its platform. In IntelligentPad or IntelligentBox,
information and processing components are represented
as 2D or 3D visual objects called pads or boxes. Each
pad or box holds its state data in named slots, which also
form its interface for functional connections to other
pads or boxes.
Our approach enables users to embed 3D
visualization environments into spreadsheet cells. A 3D
visualization environment is an IntelligentBox
environment itself. We can construct 3D visualizations in
this environment using the mechanisms for accessing
Web resources and for visualizing retrieved results. Our
approach also allows users to only export the necessary
functions of 3D visualization mechanisms into the
embedded environments to input and output parameter
values to and from spreadsheet cells. By using this
facility, users can share the slot values of boxes in
different visualization environments in different cells
through spreadsheet cells.

3
4
5

2

1

slot D

A2

A3:B5

B

functional linkage
with cell

Value
Value 1_1
Value 2_1
Value 3_1

slot C

Value 1_2
Value 2_2
Value 3_2

C

functional
linkage with
range

Excel sheet

Figure 1 Overview of architecture
EyePosition EyeCenter

synchronizing view navigation
: panning and zooming

Figure 2 Example of navigating view-to-view
coordination

164

Users in BoxPad environments can load or
construct 3D visualization applications defined by
composite 3D components. To access and combine
various data resources such as REST-style Web services,
SOAP-style Web services, and local databases through
the direct manipulation of 3D visual components without
the need for programming, our approach provides a 3D
proxy component called RESTProxyBox [3]. Users only
have to use RESTProxyBox to access both REST-style
and SOAP-style Web services and local databases. To
visualize the retrieved results, we use the 3D
VisualizerBox [3], which is a composite component for
implementing Virtual Reification [10]. Virtual
Reification is a framework for representing a large set of
records with fully interactive and reusable objects.
Unlike conventional 3D information visualization
systems [14][20], our approach provides a visualization
scheme as a customizable structure of a set of interactive
3D components. It enables us to design various 3D
visualizations that reflect changes in record values.
CellSyncPad [3] is a component that shares the slot
values of its child pad with cell values on a spreadsheet
(Figure 1). Users can define a data link between a slot
value and a cell's value by setting up pairs consisting of a
slot name and a cell reference. To define a data link
between a cell and a slot on CellSyncPad, they need to
generate a coordination rule, called a CoordRule. In this
paper, we extend the kinds of rules we previously
described [3].

Y axis: dependent variable

(i) Extract a table

(ii) multiple
regression
analysis

X, Z axes:
independent
variables

(iv) Import a table

(iii) predict
parameters

Figure 3 Generating new table using Excel
function and visualizing it
However, there are limitations in treating table
values in a CoordRule, in using composite pads in a cell,
and in using other sheets or books to paste components.
Moreover, it is difficult for end-users to input a
CoordRule into CellSyncPad. What follows in this
section explains extension of the CoordRule we
previously described [3], and the input interface.

4.1.1 Extension 1: Range overflowing or clipping
When users output a slot value that is a table type to
a range, the number of rows sometimes differs depending
on user manipulations.
Normally, even if the size of the list data or table
data in the slot is bigger than the defined range, the
whole value can be output (Figure 4 (a)). However, this
sometimes causes outputted cells to overlap that have
other values or components. Therefore, we provide
additional operator >= to limit the output range. If the
size of a list or table data in the slot is bigger than the
defined range, extruding values are clipped by using >=
(Figure 4 (b)).

4.1. CoordRule
The CoordRule consists of a slot name, operator,
and cell reference, e.g., #KeywordSearch < A2. We
previously provided [3] only three kinds of operators; >,
<, and =. Operator > represents data transfer from a slot
to a cell. Operator < represents data transfer from a cell
to a slot. Users can also set up two-way data transfer to
completely synchronize a slot and a cell using operator =.
They can also define data links between a slot and a
range that contains multiple cells. In that case,
CellSyncPad converts the range to a suitable data format
and writes it to a corresponding slot, and vice versa. Slotdata types include lists and tables; a list corresponds to a
column range, and a table corresponds to a twodimensional range.
By using coordination for table values, users can
modify an existing table extracted from visualization, or
generate a new table for visualization using Excel
functions, user-defined functions, or Excel add-ins.
Figure 3 has an example, in which users analyze an
extracted table using a tool for multiple regression
analysis, and create a new table from analyzed
parameters and other values of independent variables.
They then generate a new visualization that reflects the
results of such analyses.

(a)
#s1<table>
Rule:
#s1 > C1:D3

(b) Table data in #s1 is the same as in the case of (a)
#s1<table>
Rule:
#s1 >= C1:D3

Figure 4 Coordination between table-type slot
and range

4.1.2 Extension 2: Serializing and Deserializing
table values
The number of selected items in brushing and
linking coordination differs depending on user operations.

165

For example, in Figure 9 (a), a user selects multiple
items in the cell, D10. Here, it is difficult to define a
range for coordination because the size of the range may
change. Moreover, it is not necessary to use a range to
define such simple coordination. A single cell suffices to
define it.
To solve this problem, we provide a function for
serializing a slot value, which is a list/table-type value, to
a single cell, and for deserializing the serialized list/table
value into a slot, which is a list/table type. To define such
kinds of coordination, the user just needs to select a cell
as a cell reference when a slot type is a list/table type.
In Figure 9 (a), when the user selects items in cell
D10, the list of IDs are serialized and output into cell
F10. Then, the value of cell F10 is deserialized, and a
list value is generated and input into a slot of the box to
highlight visualized items in cell E10.

In Figure 5, users define the brushing and linking
function between the 3D visualization and the table on
the spreadsheet by using these operators.

4.1.3 Extension 3: Treating list/table values
sequentially

CellSyncPad [3] only supported one child pad to
define a link. In this paper, we expand this limitation to
support multiple pads or composite pads. To specify a
slot name, we adopt a path expression defined by the
name of the specified slot and the object's position in the
tree structure of composite pads (Figure 6).

(a-i) selecting a range
(a-ii) an item is highlighted

(b-ii) a range is selected
(b-i) selecting an item

Figure 5 Coordination between cell or range
selection and elements in visualization space

4.1.5 Extension 5: Supporting composite pad

When users want to define coordination for related
or detailed searches on multiple items, it is difficult to
define such coordination because the selected items’
values are normally in a list/table-type slot, and the input
interface slot for searching items has a simple-type slot
such as that for a numerical value or for a string value.
To solve this, we provide a function for sequentially
treating a list value. When a range defined as a cell
reference has one column, which is treated as list data,
the value of such list data is inputted into the target slot
one-by-one in turn. Moreover, if the value of a cell is
serialized-list data, then, the value of the deserialized-list
data is input into the slot one-by-one in turn. For
example, in Figure 9 (a), if a user selects two or more
items in cell B10, first, products related to the first item
are searched, then, products related to the second item
are searched in turn, and these results are merged and
visualized in cells D10 and E10.

/cPad[2]/ccPad[1]/@slot1
cPad
slot1

CellSyncPad

cPad
ccPad
slot1
slot1
slot2

Figure 6 Composite pad on CellSyncPad

4.1.6 Extension 6: Supporting other sheets and
books
Cell references can support cells or ranges in other
sheets such as ‘Sheet1’!B19:D34, cells or ranges in
other books such as [Book2]’Sheet1’!B8:E20, columns
such as B:D, and rows such as 7:12. We support such
references.

4.1.4 Extension 4: Coordination between cell
selection and slot value
Extracted table values to a range from visualization
results can be considered as one kind of visualization that
is represented with a tabular layout. Therefore, we
present the function for defining coordination between
operations for cell selection on the spreadsheet and
values of slots. To define this coordination, we provide
operators >>, <<, and <>.
For operator >>, when users select items for
visualization (Figure 5 (b-i)), and the values of rows in
the defined range are the same as those of selected items,
such rows are selected (Figure 5 (b-ii)). For operator <<,
when users select rows in the defined range on the
spreadsheet (Figure 5 (a-i)), the values of the selected
rows are input into a slot as table data (Figure 5 (a-ii)).
Operator <> enables users to define coordination that has
a function for both >> and <<.

4.1.7 Extension 7: Interface for defining rules
To enable such CoordRules to be easily defined, we
provide a dialog box for selecting slots, operators, and
cells or ranges (Figure 7 (ii)). Users can change the
processing order of rules (Figure 7 (iii)).

166

Coordination (vi) is provided by operand <<, >>,
<>. For Figure 5 (a), if a user changes a linked box from
HighlightGMFunctionBox to RESTProxyBox to search
for detailed information on the selected range, s/he can
visualize detailed information by selecting a range on
Excel.

AddRuleDialog

(ii-a) Selecting a slot
(ii-b) Selecting an operator

(ii-c) Selecting a cell
or a range

(ii) Defining one rule

EyePosition

EyeCenter

(iii) Changing the
order of rules

SelectionBox

(i) Open AddRuleDialog

Figure 7 Dialog box for defining CoordRule

4.2. Components for handling coordination
To introduce the "brushing and linking" function
categorized in coordination (i), we provide a 3D
component for the brushing function called
BrushingGMFunction, and expand the 3D component for
the highlighting function called HighlightGMFunction
that was described by Ohigashi and Tanaka [10]. When a
user selects some visualized records in one visualization
space (cell D10 in Figure 9 (a)), first, the key values of
selected items are exported into a cell by
BrushingGMFunctionBox (cell F10 in Figure 9 (a)).
Second,
HighlightGMFunctionBox
in
another
visualization space receives such key values through the
cell, and then highlights the same or related items for
selected items (cell E10 in Figure 9 (a)).
Users can substitute SelectionBox, which enables
them to define the selecting area by changing its position
and size, for BrushingGMFunctionBox to select items.
By adding slider components to axis components, users
can implement the function for dynamic queries. They
can also substitute FilteringGMFunctionBox for
HighlightGMFunctionBox to show items under given
conditions.
For coordination (ii), two visualization environments
can share eye positions and focusing points, which are
controlled by BoxPad, through cells (Figure 2).
In our mechanism, coordination (iii) is implemented
by using the following mechanisms. The key values for
selected items by BrushingGMFunction are received by
RESTProxyBox in other visualization environments
through cells (cell C10 in Figure 9 (a)). RESTProxyBox
creates a query from received key values, and searches
results for the created query (cells D10 and E10 in
Figure 9 (a)). Users also can create an overview+detail
interface by using SelectionBox that holds the center
position of the selected area and a suitable eye position
calculated from its size (Figure 8).
As each box in our framework holds the position
and the scale ratio in its slots, users can easily define
coordination (iv).

Figure 8 Overview+detail

5. Applications
5.1 Exploration of Product Information
Figure 9 (a) shows an application used for exploring
related products using Amazon Web services. This
application consists of two kinds of visualization
applications: 3D applications for Amazon keyword
search service and for Amazon similarity search service.
If we construct an application for a keyword search
on cell B10 once, we can easily create two applications
for a similarity search just by copying it to other cells,
D10 and E10, by changing some parameter values of
RESTProxyBoxes to use another service, by adding
various 3D components to represent additional
information (in this case, we add one slider bar to
represent “sales rank”), and by changing parameter
values for defining attributes to axis mapping rules.
After that, we add BrushingGMFunctionBoxes and
HightlightGMFunctionBoxes to VisualizerBoxes in cells
B10, D10, and E10, then define CoordRules into
CellSyncPads.
Cell B10 presents the visualization results retrieved
for the inputted keyword in cell A10. When a user
selects one record in cell B10, products related to the
record are retrieved from Amazon similarity search and
visualized in cells D10 and E10, which have different
arrangement rules. When s/he selects one or more
products in cell D10, products that have the same IDs are
highlighted in cell E10. The user can then observe trends
or relationships between sales ranks and prices of
products.

167

Users can select one or more genes from cell H3 and
supply selected gene IDs to the visualization in cell F3.
In this example, the gene ID is supplied from the
visualization in cell H3 through cell G3. Moreover, this
3D application is connected to ColoringGMFunctionBox.
ColoringGMFunctionBox colors the shapes of all body
parts according to the value of the retrieved expression
profile of the selected gene as shown in Figure 9 (c-iv).

5.2 Visualizing Virtual Anatomia
Figure 9 (b) shows an example of the construction of
coordinated multiple visualization using a dataset of
Virtual Anatomia [21] on Excel. Virtual Anatomia is a
set of 3D data obtained from the body of a live human
female after she was scanned by MRI every 3 or 4 mm. It
includes 351 polygons, anatomical names, and
annotations for segmented parts of the body. The dataset
is hierarchical. Virtual Anatomia is normally a standalone application. In order to use datasets through the
Web, we construct Web services that are prototype
services and that have not yet been published outside our
laboratory.
We have already constructed 3D applications for
visualizing 3D body structures of selected parts, and
annotations of one body part. To visualize the hierarchy
of all elements of the human body, we utilize generic
components for visualizing hierarchical information
using a ConeTree like an interface. After that, we embed
each application into a cell, and define the coordination
between them.
In this application, we first define a CoordRule,
#BrushingGMFunctionBox[1]/@Records > E3, into
CellSyncPad embedded in cell D3. Second, we define
#RESTProxyBox[1]/@did < E3 into CellSyncPad
embedded in cell F3. In this way, we can define
coordination between components in different
visualizations for drilling-down and/or details-ondemand operations. In the same way, we can construct
brushing and linking mechanisms between two
visualizations as shown in Figure 9 (b-iii). The
visualization space in cell H3 includes an application for
visualizing one body part and annotations of it.
Annotation information includes position, and the
retrieved annotations are then mapped onto the shape of
the selected body part (Figure 9 (b-iv)).

5.4 Visualizing Cancer Mortality
Figure 9 (d) shows an example of visualizing the
cancer mortality in Japan by prefecture and organ. This
application also reuses the components used in Section
5.2. We construct a 3D application for visualizing a 3D
map using a combination of a block-map technique and a
HeatMap technique. It uses the same components as the
application for visualizing the 3D HeatMap of humanbody data. We only change the source of 3D shapes by
modifying the parameter values of RESTProxyBox, and
add a component that has a function for changing the
heights of 3D shapes. After that, we define the
coordination between them.
Cell D3 shows an organ map. Users can select one
organ to see the mortality from cancer for the organ they
selected. In this example, cell F3 shows the cancer
mortality for all prefectures in 1999 for the selected
organ using a block map and a HeatMap. These results
indicate that Osaka prefecture has the highest rate of
mortality from lung cancer. Users can also select one
prefecture in cell F3. Cell H3 visualizes the cancer
mortality for all organs in 1999 for selected prefectures
using the 3D HeatMap. Here, the mortality from liver
cancer is higher than that from lung cancer in Osaka
prefecture in 1999.

Conclusions
We have proposed mechanisms for constructing six
kinds of coordination between 3D visualizations of cells
to construct coordinated multiple visualizations that
enables us to explore information retrieved from the Web
and/or local databases through a user’s direct
manipulation.
Our framework enables end-users to construct
applications for visualization just by connecting 2D
and/or 3D components. It allows them to continue by
trial-and-error just by changing some components that
constitute applications, connections between components,
or parameter values, on-the-fly. Our framework also
allows end-users who do not have profound knowledge
of target services and/or visualization to create simple
applications based on various sets of samples or
prototypes that have been prepared by researchers or
educators who do have skills and knowledge of the target
domain.

5.3 Interaction with BodyMap
BodyMap XS [7] provides Web services for
searching expression profiles from the input name of
organisms, and for searching an expression profile from
an input gene ID. Figure 9 (c) shows an example of the
construction of a 3D HeatMap of gene expression for the
human body.
In this application, we reuse the components (shown
in cells D3 and F3) that are used in the application
described
in
Section
5.2.
We
add
ColoringGMFunctionBox to show a HeatMap of the 3D
human body, and copy and modify RESTProxyBox to
get a gene expression profile for a selected gene ID to
VisualizerBox in cell F3.
We only construct a new 3D visualization
application for visualizing genes retrieved from an Web
service to search the expression data on organisms
(shown in cell H3). Retrieved genes are visualized using
a scatter plot. Each plot represents one gene, and has the
values of expression for all organs or tissues.

168

(i). Visualizing retrieved results
from Amazon keyword search

(iii). Visualizing related products about selected one from Amazon similarity
search in two v isualization envi ronments that h ave different arrangement rules.

C10

B10

(ii). Selecting one record

(iv) .Selecting some
products

F10

(v). Highlighting the
same products

D10

E10

Selected product ID

Selected product IDs

(a) Exploring related products using Amazon Web services
(ii). Selecting a head node of a
bone hierarchy, and visualizing
elements under the head node

(i). Visualizing whole
elements of Virtual
Anatomia using ConeTree
Visualization

D3

(iii). Selecting some
nodes, and highlighting
them

(iv). Selecting a mandibula polygon, and
showing detail information about it

F3

H3

Selected item ID

Selected item IDs

(b) An example using the data-set from Virtual Anatomia
(i). Visualizing
whole elements of
Virtual Anatomia

D3

(iii). Visualizing gene
expression profiles
about “Homo sapiens”
from BodyMap

(ii). Selecting an organ
node, and visualizing a
base body

F3

(iv). Selecting a gene record,
and creating a 3D HeatMap

Selected directory ID

H3

Selected gene ID

(c) An example of constructing a 3D HeatMap of a gene expression about Homo
sapiens retrieved from the BodyMap XS Web service
(ii). Visualizing cancer mortality of each organ at 1999
about the selected prefecture using a 3D HeatMap
(i). Visualizing cancer mortality
of each prefecture at 1999
about the selected organ using
block map with heatmap

D3

F3
Selected organ ID

H3

Selected prefecture ID

(d) An example of visualizing cancer mortality of each prefecture and of each organ
Figure 9 Applications using our framework for coordinated multiple 3D visualizations on Excel

169

[20] C. Chen. Information Visualization: Beyond the Horizon.
Springer, London, second edition, 2006
[21] SGI Japan, Ltd., Virtual Anatomia,
http://www.sgi.co.jp/products/software/va/
[22] M. Jern, S. Johansson, J. Johansson, and J. Franzen, The
GAV Toolkit for Multiple Linked Views, Proceedings of
the Fifth International Conference on Coordinated and
Multiple Views in Exploratory Visualization, pp. 85–97,
Jul. 02-02, 2007.
[23] C. North and B. Shneiderman, "Snap-Together
Visualization: A User Interface for Coordinating
Visualizations via Relational Schemata", Proc. Advanced
Visual Interfaces 2000, May, 2000.
[24] R. Brath and M. Peters. Excel Visualizer: One Click
WYSIWYG Spreadsheet Visualization. In Tenth
International Conference on Information Visualization
(IV’06), pp. 68–73, 2006.

References
[1]

[2]

[3]

[4]
[5]
[6]
[7]
[8]
[9]
[10]
[11]

[12]

[13]

[14]
[15]

[16]

[17]
[18]

[19]

J. C. Roberts, "On Encouraging Multiple Views for
Visualization," In Proceedings of the International
Conference on Information Visualization (IV '98), 1998,
pp. 8–15.
C. North and B. Schneiderman. “A Taxonomy of
Multiple Window Coordinations,” Technical Report CSTR-3854, University of Maryland Computer Science
Department, 1997.
M. Itoh, J. Fujima, M. Ohigashi, and Y. Tanaka,
"Spreadsheet-based Framework for Interactive 3D
Visualization of Web Resources," In Proceedings of the
11th International Conference on Information
Visualisation (IV '07:), 2007, pp. 65–73.
Web API for Biology, http://xml.nig.ac.jp/index.html
USGS
USGS/EROS
Web
Services,
http://gisdata.usgs.net/XMLWebServices/
BodyParts3D - 3D structure database for anatomical
concepts,
http://lifesciencedb.jp/ag/bp3d/index.jsp?locale=en
BodyMap XS, http://bodymap.jp/
J. Bertin, Semiology of graphics, University of
Wisconsin Press, 1983
J. A. McDonald, W. Stuetzle, and A. Buja, Painting
multiple views of complex objects, ACM SIGPLAN
Notices, v.25 n.10, pp. 245–257, Oct. 1990.
Ohigashi, M. and Tanaka, Y., A framework for the
virtual reification of database records. In: IPSJ, 42(SIG
1(TOD8)), 2001, pp. 80–91.
Itoh, M. and Tanaka, Y., 3D Component-Based
Visualization Framework for Generating Simple 3D
Applications Using Web Services. In: 2006 International
Conference on Web Intelligence (WI2006), 2006, 823–
830.
E. H. H. Chi, J. Riedl, P. Barry, and J. Konstan.
Principles for Information Visualization Spreadsheets.
IEEE Computer Graphics and Applications, 18 (4): 30–
38, 1998.
T. Pattison and M. Phillips, View coordination
architecture for information visualisation, Proceedings of
the 2001 Asia-Pacific Symposium on Information
Visualisation, pp. 165–169, December 1, 2001, Sydney,
Australia.
S. K. Card, J. D. Mackinlay, and B. Shneiderman.
Readings in Information Visualization: Using Vision to
Think. Morgan Kaufmann, 1999.
Y. Okada and Y. Tanaka. IntelligentBox: A Constructive
Visual Software Development System for Interactive 3D
Graphic Applications. In Proceedings of Computer
Animation ’95, pp. 114–125, 1994.
Y. Tanaka. Meme Media and Meme Market
Architectures: Knowledge Media for Editing,
Distributing, and Managing Intellectual Resources. IEEE
Press & Wiley-Interscience, 2003.
Y. Tanaka and T. Imataki. IntelligentPad: A Hypermedia
System Allowing Functional Composition of Active
Media Objects through Direct Manipulations, 1989.
J. C. Roberts, State of the Art: Coordinated & Multiple
Views in Exploratory Visualization, Proceedings of the
5th International Conference on Coordinated & Multiple
Views in Exploratory Visualization (CMV2007), pp. 61–
71, 2007
B. Schneiderman. Dynamic queries for visual
information seeking. IEEE Softw., 11 (6): 70–77, 1994.

170

