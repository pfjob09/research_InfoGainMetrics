Loop Snakes: The Generalized Model
ANTONIO OLIVEIRA1, SAULO RIBEIRO1, CLÁUDIO ESPERANÇA1, GILSON GIRALDI2
1
Dept. of Syst. Eng. and Comp. Sciences -COPPE/Federal Univ. of Rio de Janeiro, Brazil
2
National Laboratory of Scientific Computation – Petrópolis, Brazil
oliveira,saulo,esperanc@lcg.ufrj.br; gilson@lncc.br
Abstract
The topologically adaptable snake model, or simply Tsnakes, is a useful tool for automatically identifying
multiple segments in an image. Recently, in [4], a novel
approach for controlling the topology of a T- snake was
introduced. That approach focuses on the loops formed
by the projected curve which is obtained at every stage
of the snake evolution. The idea is to make that curve the
image of a piecewise linear mapping of an adequate
class. Then, with the help of an additional structure, the
loop-tree, it is possible to decide in O(1) time whether
the region delimited by each loop has already been
explored by the snake. In the original proposal of the
Loop Snakes model, the snake evolution is limited to
contraction and there is only one T-snake that contracts
and splits during evolution. In this paper we generalize
the original model by allowing the contraction as well as
the expansion of several T-Snakes.

1. Introduction
Parametric Snake models are deformable models
proposed by Kass at al. [2] which have been successfully
applied in a variety of problems in computer vision and
image analysis [3]. Its mathematical formulation makes
easier to integrate, in a single extraction process, image
data, an initial estimation, desired contour properties and
knowledge based constraints. In comparison to other
methodologies to segment an image, they have the
appreciable property of producing a closed polygonal
curve at any iteration while some classical gradient based
approaches only get that at the end of a sequence of
different processes. The updating procedure performed at
each step is usually computationally lighter than those
employed in relaxation methods and the interaction
between snaxels serves to obtain smoother border
approximations while other simple alternatives – like
thresholding – may require a post-processing specifically
for that.
Despite of their capabilities, a known limitation of most
snake methods is that the topology of the structures of
interest must be known in advance since the
mathematical model cannot deal with topological

changes without adding extra machinery. Among the
proposed works to address this limitation, the T-snakes
model has the advantage of being a general one. The Tsnakes have the ability of changing their topology either
by splits or merges allowing the recovery of more than
one segment in the target image. The basic idea is to
embed a discrete deformable model within the
framework of a triangulation of the image domain. The
Characteristic Function of the set of points already
visited by the snake is, then, sampled at the nodes of that
triangular grid. Placing a snaxel on every edge where
that characteristic function changes value and linking
those placed on adjacent edges, we have a simple way of
evolving a snake which is able to perform topological
changes.
In the Loop Snakes model proposed in [4], the
decomposition framework consists of a mesh of square
cells which is the easiest way of avoiding the well known
direction bias that original T-snakes have. The
Characteristic Function sampled at the grid nodes is
replaced by a matrix of flags indicating for each cell
whether it has been visited earlier by the projected curve
– PC – of the current iteration.
The fact that it, essentially, uses only data produced in
the current step is a noticeable difference which makes it
easier refining the mesh or making a snake move
backwards. Topological changes are performed based on
the loops formed by that projected curve. The regions
delimited by some of these loops – which are named
closed – have already been totally explored, while those
encircled by others – called open loops – have not been
visited yet. While closed loops must be discarded, the
open ones are made the snakes of the next stage and for
that reason, we choose to call them loop snakes. Figure 1
pictures this idea. It shows a step of a snake evolution
with the arrows indicating the displacement applied to
the snaxels in the step. In the projected curve of that step
some self-intersection points happen. These points define
closed loops– those enclosing regions that have already
been doubly swept by the snake – and open loops
delimiting regions yet to be explored.
When a loop L is formed, its label – closed or open –
can be found in O(1) time, either by considering the label
of the loops adjacent to L that have been found earlier or

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

by simply examining the connection of L with the rest of
the projected curve.

Figure 1: Original snake and the projected curve of a
step.
In [4], the whole image is encircled by a closed snake.
During its evolution, that snake is continuously
contracted and eventually broken into smaller ones
which are subjected to the same contraction process.
In this paper we generalize the loop snakes model
allowing the use of an a initial set of snakes, disjoint to
each other, which may be either contracting or
expanding. Those snakes must only comply with the two
following simple rules. 1) Every expanding snake is
encircled by a contracting one. 2) A contracting snake
cannot enclose another. These assumptions avoid that
regions wider than twice the length of a mesh edge, are
swept more than once.
Two or more expanding snakes can be merged into a
single one and the evolution of one of them can generate
several contracting snakes. Also a contracting and a
expanding snake can collide or simply get too close to
each other. In this case, depending on the context, the
two snakes are either abandoned or are turned into
standard ones and used as initial solutions of a dual
process to get a finer approximation of the contour that
presumably exists between or close to them. Having
contracting and expanding snakes, a contour can be
approximated both from inside and from outside which
allows to determine it in a more reliable way in
comparison to the case where snakes of only one type are
used.
As the focus of this work is the control of a snake
topology, we consider that the physical displacement of a
snaxel is computed by a “black-box”. Most of the
secondary rules used in this work are also employed by
other approaches: 1) If a cell C is cut by the snakes of a
certain number of consecutive steps, the snaxels in C are
either frozen or subjected to an artificial force to take
them out of C – that is the way a snake escapes from a
local minimum of energy. 2) The process ends when all
snaxels are frozen.
This paper is organized as follows. Other models for
controlling the topology of a snake are revised on section
2 . Loop snakes are described in Sections 3-9 while
sections 10 and 11 are dedicated, respectively, to
computational results and to conclusions and future
works.

2. Other models for controlling the topology
The T-Snakes approach is composed basically by four
components[3]: (1) a discrete snake model, which takes
the initial snake of a step – S – into the, so called,
transformed curve – TC; (2) a simple CF-triangulation of
the image domain; (3) A way of projecting the
transformed curve onto the grid edges, obtaining, then,
the projected curve – PC; (4) a binary function, called
characteristic function, defined on the grid nodes, which
distinguishes the interior from the exterior of the
projected curve.
To clear the idea, consider the characteristic functions (f1
and f2) relative to the regions delimited by the two
contours pictured in Figure 2. These functions are
sampled on the vertices of a CF-triangulation of the
plane and the T-snakes algorithm marks – or burns –
those vertices where max{f1,f2}= 1. The merge of the
curves is, then, obtained by choosing a vertex in every
edge linking a burnt to a non-burnt vertex.
Updating the set of burnt vertices at an iteration,
however, is not so simple. In [3] it is indicated that 16
different cases must be considered to decide whether a
vertex must be burnt. Also, in an usual iteration, where
no topological changes occur, it is easy to see that the
projected curve is unnecessarily traversed twice – once
for burning nodes and once for choosing a vertex on
every transition edge. Moreover, the use of triangular
meshes, necessary to obtain new snakes as level sets in
an unambiguous way, determines that grid diagonals
should be considered. That can enlarge considerably the
number of crossings between PC and the grid edges
besides introducing a directional bias.

Figure 2: Two snakes colliding. Snaxels and grid nodes
inside each one of them are marked.
In the approach described in[1] a snaxel is displaced only
along the grid edge – e – where it is. If a vertex – v – of
that edge is reached, the snaxel is exploded into three –
one on each edge adjacent to v different from e. This
methodology determines that the transformed curve is
always simple and that its vertices are already on grid
edges. On the one hand, this method has none of the
drawbacks of the original T-snakes model mentioned
above. On the other hand, it has its own disadvantages
like complicating the way of displacing snaxels and
either reducing the time lag or provoking the alignment
of snaxels, facts that can slow the snake evolution.

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

Loop-snakes is an alternative to avoid the difficulties of
both that last method and the original T-snakes model.
The price to be paid for that is to complicate the process
that makes a topological change. However, considering
that: i) The process that must be executed at a general
snaxel to keep topology under control, is extremely
simple, in the case of the loop-snakes; ii) The number of
topological changes is only a small fraction of the
number of snaxels that is generated; it can be concluded
that Loop snakes are really a valid option to implement
topologically adaptable snakes.

3. Loop Snakes
Let S j= [sk, k=1,...,K(j)] , j=1,...J , be the snakes that
must be transformed at a certain stage. TC j = [t,k = T(sk),
k=1,...,K(j)] and PC j = [s',m, m=1,...,M(j)] will be
,respectively, the transformed and projected curve
obtained from S j. Also let TC and PC be the union of all
TC j and and PC j, respectively.
The Loop-snakes approach is based in the following
reasoning:
1) At first we enforce that every PC j is the result of
applying a mapping of a special class to a dilated version
of the snake S j. That curve and the mapping will be
characterized in section 5. The use of CEP coordinates,
given in section 4, makes it simpler to assure that PC j
has the property above .
2) If PC j has the property given in 1, then the label of a
loop L can be obtained in a straightforward way from
that of any loop adjacent to it that has been found
earlier. If no such a loop exists, the label of L can be
determined by looking into its connection with the
remainder of PC. Finally, if PC j, itself, is a loop, its
label will be found by verifying the position of its first
vertices in relation to S j and the other snakes of the
stage. The whole labeling process is described in section
7. Part of that process is based on the concept of LoopTree of a curve, which is precisely characterized in
section 6.
3) Splits – treated in section 8 – must be made before the
merges– focused in section 9. While splitting does not
present any special difficulty, merging requires a more
elaborate approach by the following simple fact: If PC j
has the property indicated in 1, only a merge can change
the contour of an open loop after its determination. The
complexity of the specific processes of the merging
phase, however, depends only on the number of loops
generated at a stage. This makes the time spent by them
negligible in comparison to that required by processing
the usually much larger number of snaxels generated
during the whole evolution process.

4. Regular Curves and CEP coordinates
Hereafter, P will refer to the mesh employed to partition
the image domain. We call a P-curve any polygonal line
such that: (a) Its vertices are the points where it intersects
the mesh edges. (b) No vertex of the curve coincides
with any vertex of the mesh. A regular P-curve is one

which is simple and has a single vertex on every mesh
edge crossed by it. PC curves are only P-curves while
topological snakes must be regular ones . Two P-curves
crossing the same sequence of mesh edges are said to be
equivalent and a P-intersection between two P-curves is
one which cannot be removed by replacing the curves by
equivalent ones.
To represent a P-curve S = [si; i= 0 ... I-1] it suffices to
represent points in the relative interior of the grid edges.
Here we will use the Cell - Edge of the cell - Point of the
edge (CEP) system where each si is represented by: (a)
The cell coordinate C(si) indicating the cell containing
[si , si+1]; (b) The edge coordinate E(si) indicating which
of the four edges of C(si) contains si (the left, top, right
and bottom edges are numbered 0, 1, 2 and 3,
respectively); (c) p(si), the distance between si; and its
burnt-vertex expressed in pixels. The use of CEP
coordinates makes it easier not only to enforce that the
projected curve has appropriate properties but, also, to
detect and treat loops.
If S is an evolving snake the burnt-vertex of si, termed ui
is the vertex of the mesh edge containing si which is on
the side of S that has already been explored.
The P-Dilation of S – PD(S) – is the curve obtained by
replacing every si by wi = ui + İ (si – ui), where İ is a
small positive number. The idea is to obtain a P-curve
equivalent to S that passes very close to the burntvertices of si; i= 0 ... I-1.

E(s)i =1

si

2

C(s)i si+1
0

S

3
(A)

PD(S)

(B)

Figure 3: (A) Elements used in the CEP system.
(B) A P-curve and its P-dilation.

5. PC as the image of an adequate mapping
We will consider that the projected curve obtained by
evolving a topological snake Sj is the image of a
mapping * applied to the P-Dilation of that snake.
Making the domain of * be PD(Sj), instead of Sj, reduces
the effort to make that mapping have some desirable
properties.
Those properties must include that * is a continuous
order-preserving piecewise linear mapping which
associates points close to each other. To establish this
last requirement in a more formal way and to avoid that a
snake gets back to a cell it has already totally swept, we
require that for every vertex – ui , ; i= 0 ... I-1 – of PD(S),

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

*( ui) is in one of the 4 cells which are adjacent to the
other node of the mesh edge containing it.
To characterize a last attribute that * must have, some
definitions are necessary :
1)A mapping **: PD(S) o 2 is said to be equivalent to
* if its image is a P-curve PC* = [ s*j , j= 0 ... J-1] such
that:1) s*j and s’j are on the same mesh edge. 2) *-1( s’j )
and (**)-1(s*j) are on the same edge of PD(S).
2) Let z and z' be two points on the same edge of PD(S)
such that **(z) and **(z') are in the same mesh cell.
The quadrilateral [z, z', **(z'), **(z)] is called a
sweeping quadrilateral of **.
3) ** is said to be direct if none of its sweeping
quadrilaterals is reverse. Figure 4 illustrates this concept.

Figure 4 - Non-Direct (a-b) and Direct Mappings(c-d).
The last requirement on * is exactly, that it is equivalent
to a direct mapping **. If * satisfies all the requisites
indicated above it is called adequate and has the
following good features: 1) The border of the strip
covered by the sweeping quadrilaterals of * is formed by
PD(S j) and a set of loops of PC j. 2) A series of results,
given in Section 7 can be explored to label these loops.
The main result of the theory supporting the Loopsnakes approach states that * will be equivalent to a
direct mapping, iff we manage to avoid the two
undesirable configurations involving snaxels of S j and
vertices of PC j , which are depicted in figures 5-A and
5-B. In the configuration of figure 5-A, PC j crosses
not monotonous. That
PD(Sj) which makes *
configuration is characterized by the fact that snaxels si
and si+1 of S j and vertices s'j and s'j+1 of PC j lay on the 4
edges adjacent to the burnt node of si . If such a
configuration is detected, the intersection between PC j
and PD(S j) is eliminated by replacing s'j-1 and s'j by si-1
and si, respectively.

Figure 5- Undesirable configurations

The second configuration to be avoided concerns to the
existence of reverse sweeping quadrilaterals. It is shown
in Figure 5(B), where: i) The snaxels si and si+1 of S j and
vertices s'j and s'j+1 of PC j lay on the 4 edges adjacent to
the non-burnt node of si . ii)The pairs (s'j ,si) and (s'j+1,
si+1) lay on edges with the same direction. iii) [s'j , s'j+1] 
[ti-1, ti]. The occurrence of that configuration makes it
impossible to define * in a way that it has no reverse
sweeping quadrilaterals. The correction, in this case,
consists, merely, of replacing ti by s'j.
Both cases are simultaneously handled by the procedure
given below which must be applied at the creation of
every new vertex of PC j. The following notation is used:
s, s' and t will refer to the current vertex of S j, PC j and
TC j, respectively. x.prev indicates the antecessor of
vertex x on the polygonal line where it is. c is the last
cell that has been crossed by PC j and t(c) is the final
vertex of the last edge of TC j already generated, which
intersects the cell c.
Procedure Making * Adequate
{If(t =t(c)) then
If (E(s') = (E(s)+2)mod.4) t = s';
Else If (E(s')=(E(s)+1)mod.4 )
If(C(s')=C(s))
{s'.prev= s.prev; s' = s}}
This procedure embodies all that must be done when
computing a new vertex of PC in order to ensure that *
is adequate. As it is shown in section 10 in most of the
vertices the first test results false which means that
nothing more has to be done.

6. Loop trees
A Loop-tree of a closed curve C with no multiple selfintersection points, is a graph that can be obtained by the
following simple process: Choose a point s in C and a
direction D (either clockwise or counter-clockwise).
Traverse C in that direction starting at s. Every time a
point x is revisited create a node to represent the loop
formed by the part of C between the two visits to x,
concentrate that loop thoroughly at x and continue the
tour. After having completed it, for every loop L1 which
has been concentrated on a point of another, L2, create an
oriented edge from the node of L1 to the node of L2.
A curve and its loop-tree are shown in figure 6.
Loop-Trees of different topologies or with the same
topology, but with different loop-node associations can
be obtained for the same curve depending on the initial
point taken and the circulation chosen to traverse the
curve. This could make the snakes of the next stage –
which are the open loops of PC j – depend on the vertex
at which the construction of PC j starts and on the
circulation chosen to generate that curve. Fortunately, if
* is adequate that problem will not exist. In this case,
given an open loop L of PC j, in every loop-tree of that
curve, there is a node representing L or another open
loop equivalent to it.

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

Moreover, L is disjoint to the other loops of PC j. This
means that, from the moment it is created on, L can only
be modified through a merge of PC j with other projected
curve.

1) When evolving a loop-snake, we check whether the
first elements of its transformed curve are in cells
already visited by other loop-snakes or by that same
snake at an earlier steps. If that is true we mark the PC
curve generated from that snake.
2) Unmarked PC curves consisting of an isolated loop
are labeled open and those which are marked, closed
This simple process – which is O(1) for loop – avoids
that a contracting loop snake passes by an expanding one
or encloses a region already swept without having its
evolution process stopped.

8. Splitting Phase
To be able to adequately merge PC

j

with a connected

j 1

 PC

component CCk of
figure 6 - A curve and its loop-tree

7. Labeling the loops
To simplify the way of labeling the loops, contracting
and expanding loop snakes must be traversed in different
directions so that the region yet to be explored is always
on the same side of them. Here, we will consider that
contracting snakes are traversed in the positive direction
and expanding ones in the clockwise one.
Also, for the sake of concision we will consider in this
article that the initial vertex of any loop which is not the
root of the loop tree of a connected component of PC,
has an antecessor- that is, a vertex generated before – in
that curve1. Considering this assumption, the directions
chosen for traversing snakes and the fact that PC j is
obtained by applying an adequate mapping to PD(S j),
then, all non-root loops can be labeled through the
following simple rule: Loops whose antecessor of its
initial vertex is on its right side are open and need to be
explored. If that antecessor is on the left side the loop is
closed and can be discarded.
If the root has children its label can be obtained in
function of the label of any child by employing the four
rules below:
1)If there is no P-intersection separating parent and child
at their junction their labels must be the same.
2)If there is such an intersection, the parent of an open
loop is always closed.
3) So does the parent of a closed loop which intersects it
out of the junction.
4) Finally, if no such an intersection exists the parent of a
closed loop is open.
If a connected component of PC has a single loop it
means that: 1) It has no self-crossings nor intersections
with other components; 2) It is the result of evolving a
single loop-snake.
In view of that isolated loops are labeled as follows:
1

This assumption, however, is not necessary for the loop
snakes model work.

i

, by only considering the

i 0

intersections between PC j and the open loops in CCk, it
is necessary to process PC j separately – as if it was the
only curve composing PC – identifying all its loops,
labeling them and splitting it , if necessary. However , to
not have to traverse PC j a second time, its intersections
j 1

 PC

with components of

i

are also found during that

i 0

process. At the end of it, those intersections which occur
within a closed loop are discarded. From the remaining
ones we obtain the loops generated by merges involving
PC j. Figure 7 shows the result of the splitting of an
expanding snake.

Figure 7 - The splitting of an expanding snake

9. Merging Phase
The first valid intersection of PCj with a connected
j 1

component CCk of

 PC

i

– xjk – does not form a loop.

i 0

Instead of creating a new loop at that intersection, the
process appends the loop in CCk where it is, to the part of
PCj generated until xjk. That concatenation must be made
in a way that the resulting curve has no self -intersection
at xjk. That is achieved by adequately changing the links
between the vertices of the segments of PCj and CCk
determining xjk. Figure 8 indicates how this can be done.
The fact that the first intersection of PCj and CCk –
which determines that a new merge occur – must be
distinguished from the others determines that every

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

vertex of a projected curve must have an indicator that
allows to identify, directly or indirectly , the connected
J

component of

 PC

i

where it is. As the set of

i 0

connected components of PC varies during the
construction of that curve, keeping those indicators
updated is a version of the classical “union-and-find”
problem which is only quasi-linear. This non-linearity,
however, is not a problem considering that the number of
connected components is bounded by that of the initial
snakes, which is too small in comparison to the number
of snaxels generated in the whole process.
First intersection point

CCk

Figures 9-A and 9-B represent examples where the
method has been applied.

External open loop

PCj

(A)

(B)

Figure 9 - Examples where the method has been applied.



Closed
Loop

11. Conclusions and future works

Starting point
j
of PC
Figure 8 - How the merge of two snakes is performed.

10. Statistics and Examples of Segmentation
A program for evolving loop-snakes has been
implemented and applied to a series of test examples.
The statistics obtained in these validation tests are the
best argument in favor of the approach introduced here.
For better evaluating the overall computational effort
required by the approach, the vertices of PC have been
grouped in the following classes: A) vertices at which the
first test made by the procedure Making * Direct, given
in section 5 results false. B) Vertices at which a curve
PCj revisits a cell. Four classes of images have been
considered - Synthetized images, Noisy images, Images
with many segments and Cells images with a textured
background. The results obtained are presented in Table
1.

Images I
A
414.677
B
6.359
Overall 557.282

employed in this work which spends minimum effort
when processing a plain snaxel and delay all the
complication to the moment a loop may be found.

Table 1
Images II Images III
1.909.476 822.413
8.540
12.541
2.847.313 1.183.100

Images IV
787.013
3.805
1.212.631

It can be observed in that table that the number of most
costly vertices of PC, that is, those whose cell is being
revisited, is extremely small in relation to the total
number of them, never reaching 1.2%. Moreover, in any
case the vertices in group A are less than 64% of the
overall number of them. All the processing, specific of
the approach described here, which is executed at the
creation of these vertices, resumes to a single test. The
numbers of Table I attest to the adequacy of the strategy

We described a method for controlling the topology of a
family of evolving snakes, which can be both contracting
and expanding . The whole process can be implemented
by examining only contours – without the need of
considering their surroundings – and in a form that the
curves relative to a step are traversed only once. As the
processing essentially requires only data produced at the
current step, it is easier to refine the cells mesh during
the process, revert the evolution direction of a snake and
even incorporate the structure used to control the
topology into the very representation of the curves.
Differently from the existing approaches there is no
directional bias or need of reducing the time lag for
controlling the topology. Finally, in view of the results
expressed in Table 1, we can consider that it has a
computational gain in relation to these earlier
alternatives.
Future work will address , specially, the construction
of models that evolve in 3D-images. 2D models not
requiring the projection of TC onto the grid edges is
also a line to be explored.

References
[1]
[2]

[3]

[4]

[5]

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

S. Bischoff and L. Kobbeit; Snakes with topology
control, The Visual Computer, 2003.
M. Kass, A. Witkin and D. Terzopoulos - Snakes:Active
contour models; Int. J. of Computer Vision, vol. 1, 321331, 1988.
T. McInerney and D. Terzopoulos, Topologically
adaptable contour models; Proc. of Int. Conf of
Computer Vision, 840-845, 1995.
A. Oliveira, S. Ribeiro, G. Giraldi, C. Esperança and R.
Farias; Loop Snakes: Snakes with enhanced topology
control, Proc. of the XVIII Brazilian Symp. on Comp.
Graphs. and Image Process, 364-371 ,2004
A. Yuille and A.Black; Active Vision. MIT Press,
1993.

