2010 14th International
Information
Conference
Visualisation
Information Visualisation

Challenges and Perspectives of Procedural Modelling and Effects
David Fletcher, Yong Yue

Majid Al Kader

University of Bedfordshire, IRAC
Luton, United Kingdom
David.Fletcher@beds.ac.uk
Yong.Yue@beds.ac.uk

Skills2Learn
Milton Keynes, United Kingdom
Majid@skills2learn.com

framework is proposed for the development of a procedural
modelling system that can form areas of land containing both
populated areas and bodies of water.
Procedural modelling is becoming a key technique in the
creation of virtual worlds and further development is taking
place due to new commercial aspects. Creating an inhabited
world, continent, country or just a city is an extensive and
complex task; however using procedural techniques this task
can be drastically reduced.
An important part of procedural techniques is how
extensive the user input is. The greater the user input in
creating the generated model, the more control they have
over the outcome of the model; however a greater input also
means a larger amount of the user’s time. In some instances
no human input is required, for example computer games
that generate levels automatically. Therefore it is important
to have different techniques for varying levels of user input,
or a single technique that allows various amounts of user
control.
The amount of user input, the size and quality/realism of
the produced models are the three most important attributes
when measuring the effectiveness of a procedural technique.
One of the major problems of any system would have to be
the implementation of a procedural model which can work
from almost no input data to one which can receive various
complex parameters and implement them whilst avoiding
any graphical inconsistencies.
Designing a complex structure requires an effective way
of translating human perception of architectural principles
into a compatible routine that the machine can recognise. For
this the analysis of the human knowledge and conversion to
a computational presentation must take place. However the
amount of rules whether practical, legislated, aesthetic,
structural or financial are numerous and it would be
impractical at the present time. Creating a grammar or rule
set that a computer can follow yet produce drastically
different structures is complex and requires random
elements.

Abstract—The use of procedural modelling has risen
dramatically over the last decade. This has been partly due to
the increase in computing power, affording developers the
opportunity to use methods that were previously infeasible. A
further reason for this growth is due to the improvement of the
representation of human knowledge. The development of
procedural modeling has, thus far, been somewhat disjointed
and ad hoc as different areas of graphics, gaming and
modelling have been utilizing the technique with little
reference outside of their own specialisation. This paper
provides an overview of procedural modelling covering key
techniques and applications and then suggests a framework for
the development of a procedural modelling system that can
form areas of land of both populated areas and bodies of
water.
Keywords–Procedural Modelling; Street Planning;
Terrain Modelling; Hierarchical Approaches
I.

INTRODUCTION

The fields of gaming and virtual environments have been
expanding, and there is a constant demand for greater realism
(see [4], for example) which has been largely achieved by
the use of visually improved assets and the increase of
computational power, allowing previously infeasible
methods. Generating the assets for these applications with an
increased amount of detail and realism requires can require a
large amount of time and is a real challenge if individual
assets are composed in individually and isolation [9]; ,
intelligent techniques that can aid in the asset production
process are crucial if developers are to achieve realistic
assets in a reasonable timeframe. Automated approaches
such as procedural modelling can bring real value in
reducing composition time and thus enhancing the quality
and quantity of the production of models. However there is
the lack of analysis of the human knowledge of creating an
application model and the complexity of representation of
the knowledge [15, 18, 13]. It is in this area that hierarchical
approaches, utilising graph theory, can be of great benefit.
There has been great deal of research around the creation
of buildings and cities, such as the development of
“CityEngine” [15, 18, 20]. A system is yet to be developed
for the creation of a complete procedural world with land
masses, oceans, roads, planed cities and buildings. This
paper reviews the current development including existing
systems and suggests areas of further development. A
1550-6037/10 $26.00 © 2010 IEEE
DOI 10.1109/IV.2010.80

II.

PROCEDURAL TECHNIQUES

This section examines previous works of procedural
modelling and discusses areas of large man made structures
and natural events and features.

533
543

A. Procedural Terrain Generation
Height maps have been used to represent terrain mesh
data for many years. Generally these maps are created
manually by artists using paint packages. Olsen [14] analyses
a number of different procedural techniques that can be
effective in creating height maps, and discusses two main
topics, the generation of a base terrain and the erosion of the
base terrain.
To create the base terrain Olsen [14] believes that a
mixture of two third noise and one third Voronoi diagrams
can produce the best base height maps. Olsen [14] starts by
discussing 1/f noise, also known as pink noise, stating that it
is a fast technique widely used in the graphics field for the
past decades. Simulating 1/f noise can be achieved in
different ways. Spectral synthesis involves placing values
derived from pseudorandom numbers into a 2d array; the
pseudorandom numbers are smoothed (normally with spline
functions) to produce continuity within the data. Generally
this still would not generate a very convincing or useful
texture; Spectral synthesis can add multiple passes with
varying parameters. Normally wavelength and amplitude can
create a visually improved height map. Voronoi diagrams are
generally used to add more realistic hills and valleys to the
height map.

Olsen [14] discusses two types of erosion: thermal
erosion and hydraulic erosion which were first described by
Musgrave et al. [12]. Thermal erosion is used to simulate
rock becoming loose and slipping down slopes into a mound.
Hydraulic erosion replicates water flow dissolving materials
and transporting elsewhere. Erosion is an important part of
creating a terrain map. However at the present time, the base
terrain sufficiently represents the real world, and erosion
could be something for future development
B. Procedural Street Planning
Chen et al. [1] assert that modelling cities for digital
productions can be challenging due to their size and
complexity and that any tools that can assist artists in
creating them are beneficial; procedural techniques can aid
artists in modelling cities. There are only a few procedural
tools available, and with the call for richer content without
increase in production cost there is a definite need for more
advanced tools that can aid in either of these areas [10].
There are two commonly used techniques for procedural
modelling: L-system, see [3], and shape grammars, which
are generally extended to fit the exact needs of the system.
Parish and Müller [15] provide a noteworthy description of
the procedural generation of a large urban model based on
the L-system as a system that starts from a single street and
grows like a plant into a road network [16, 5].
There are different recognisable road patterns. Parish and
Mueller [15] discuss three of the most frequent patterns
which are raster, radial and branching shown in Figure 2.

Figure 1 shows the stages of creating a height map based
on Olsen [14] technique, a) Noise, b) Smoothed noise, c)
Multiple passes of smoothed noise, d) Voronoi diagrams,
and e) 1 part Voronoi diagrams mixed with 2 parts multiple
passes of smoothed noise.

Figure 2. Three of the most frequent road patterns for towns and cities [15]

a)

Most modern cities display a number of different road
patterns due to historical growth and the different stages of
city development. Cities with either raster or radial normally
suggest a higher level of planning whereas branching cities
normally have grown over a longer period time with less
direct plan. Within planed cities, mono-centric cities, that is
to say cities with one main centre, generally use radial
patterns whereas in poly-centric cities, meaning cities with
many centres, the raster pattern prevail. One other pattern
used in planed cities in areas of undulating terrain such as
San Francisco is where main roads follow the contours
connected by smaller short streets, which follow steepest
elevation.
Lechner et al. [10] discuss land use and their system
returns a colour coded map that represents residential,
commercial, industrial, recreational park and road uses.
Glass et al. [5] examine the problem of informal
settlements road patterns and undertake the creation of an

b)

c)

d)

e)
Figure 1. Stages of creating a height map based on Olsen [14]

544
534

•
•

algorithm to produce equivalent patterns. They identify four
techniques to aid in depicting informal settlements.
Voronoi Diagrams, a technique defined and named after
Georgy Feodosevich Voronoy, can be used to separate an
area of land into polygons to represent blocks or estates. The
edges of these polygons can also be used as the road network
for the model. A Voronoi diagram in the most minimal
instance is a set of positions, each defining a Voronoi site.
Each site has a Voronoi cell, consisting of all points closer to
the Voronoi site rather than to any other site. The edges or
roads of the Voronoi diagram are all the points in the plane
that are equidistant to two sites. The cross roads are the
points that are equidistant to three (or more) sites. Any points
that do not fulfil either of these rules (is closer to one site
than any other) is part of a block or estate.
Subdivision is a method of increasing the resolution of a
mesh by adding new vertices. An important part of Silveira
and Musse [19] framework is the automatic allotment
algorithm, which splits a block into small lots based on zone
information, boundary description and population density.
The automatic allotment algorithm observes three rules, the
first that any partition will have at least one edge shared with
the original polygon. If a lot created is too small, it will be
marked as not useful to be built upon and finally any
polygons with an area over twice the area of the specified
threshold are repartitioned.
Noise or randomness is an important part of any
procedural system making each model individual. Glass et
al. [5] use Perlin noise [17] to deform the regularity of the
subdivision process.
L-Systems is the shorthand for Lindenmayer systems,
which were invented in 1968 by Aristid Lindenmayer to
model biological growth. However, this technique lends
itself well to many types of procedural modelling. An Lsystem is a set of rules and symbols called formal grammar.
The recursive nature of the L-system rules leads them to self
similarity which is excellent for representing plant growth or
in this case roads.
On a larger scale, Parish and Müller [15] discuss the
creation of highways to connect the centres of populations.
They suggest a way of connect a population to the next
population centre; the end of each highway shoots a number
of rays with a preset distance in a radial manner. Throughout
the length of the ray using the population density map, a
number of population density samples are taken. The path
with the largest overall population compared to distance is
selected for continuing the growth.
Due to the large amount of information that is necessary
to be stored, processed and rendered within a procedurally
generated building or city, having an unrelated list of
polygons is usually not practical [1]. Silveira and Musse
[19] address the issue with a topological mesh using a halfedge data structure to tackle this problem. They propose a
topological mesh for which:

•
•
•

Every edge has two half-edges;
Each half-edge has a direction, i.e. clockwise or
anticlockwise, and a pointer to the next half-edge in
that direction;
Each half-edge also has a pointer to the opposite
half-edge, the end vertex and its face;
Each face has a pointer to one half-edge;
Each vertex has a pointer to its half-edge and a
position.

They use this information to represent street-corners,
streets and blocks of a city with the half-face giving the
direction of the street. As well as helping with efficiency,
this information aids AI agents to find the shortest path
around the generated model.
Chen et al. [1] create a graph to define the street network
where nodes and edges are stored as streets and crossings. If
a node has more than two edges indicating a road crossing,
the correct road piece is selected. Attributes for the type or
size of road are stored within the edges and nodes of the
graph. Lechner et al. [10] create a texture for storing
information about land use, population and roads. The roads
are then generated from these texture maps by laying tiles to
most accurately represent these maps. These textures are
generated by utilising the L-system for growing the city from
a user created table describing a number of attributes
including size, type and wealth of the city. This is done by
using two types of road - tiles extenders and connectors, and
the roads are not created in a grid-like formation as the
extenders try to find the shortest route.
C. Procedural Building Generation
The L-system is not normally an effective tool for the
creation of buildings as their structure typically cannot be
replicated by a growth process [20]. Shape grammar has
been used for many years by architects to create buildings. In
the previous work, each building has a single set of grammar
rules which are manually selected during the design process.
The fundamental advancement of the work is a large
database of grammar rules created by them, meaning there
are a number of rules that can be selected on each derivation
step. They automate the process after some design goals
have been set. Creating a complete set of grammar rules for
building a house or flat would be unfeasible due to huge
numbers of rules. They combat this problem by separating
out the important design ideas (i.e. front door being at
ground level) from the grammar. Shape grammars are a
technique, which has generated a large amount of interest,
used by a number of researchers [19, 10, 20] and to great
effect in the work by Müller et al. [13].
Müller et al. [13] discuss a technique that uses a finite
number of basic shapes, which are then reused where
necessary to build the structure. The entire building can then
be stored as a shape grammar. The shape grammars are
similar to a formula in that shapes are combined through
different logical gates to create the overall model. These

545
535

models can be stored either by the shape grammar for file
size or as a linked list of faces and vertices for speed.
Wonka et al. [20] use a similar technique to Müller et al.
[13]; however the footprint of the building is also stored with
the shape grammar. Müller et al. [13] suggest not using this
technique due to the complexity of the structures they have
defined.

are total realistic models or near realism models. Both
representations give similar looking results; however they
employ completely different mathematics to create
deformations. These two techniques exist due to the conflict
of demands between the needs of real-time interactivity and
overall realism [6]. At the present time, there has been no
technique able to combine both behaviours. There is a clear
aim for the future to create a realistic real-time solution.
A realistic technique for deformation describes a model
that will react accurately if a force is applied to it. This sort
of model is extremely computationally heavy and a real-time
program has not yet been achieved. Realistic techniques at
the present time are generally being developed mainly for
engineering problems, such as the finite element model; this
kind of techniques is used to calculate how large a force can
be applied to a virtual structure before it breaks. They are
used mainly because it is financially cheaper to put a model
through a test finite element model than to build scale
models. It is important to note that these techniques are still
in development and large amounts of time and money are
being put into them due to their use in engineering. This sort
of model could have a future in gaming if it ever became
viable to implement.
As Ferrier [2] states, there are two types of interactive
deformation: animating hierarchies of meshes and deforming
the vertices within a mesh. Animating hierarchies is used to
portray movement of an object. Deforming vertices is used
for deformation of soft objects; an important technique of
representing damage in a computer game; however it is very
computationally heavy and until recently has been rarely
used for computer games and real-time animations. Ferrier
[2] states that an example of this is local deformation, e.g. in
a car crash only the bumper may deform.
Near realism techniques are the second type of
representation of deformation which unlike their realistic
counterparts, are currently used within real-time gaming.
They are used to create a realistic looking deformation and
yet they do not react how it ought to with the given forces.
This sort of deformation is manly used in games, as speed of
the deformation calculation is more important to developers
than the realism of reactions. This area has expanded
dramatically over recent years because games companies
compete to create more realistic games. Also with the large
amounts of investment that gaming companies have to spend
on research and development, near realism techniques are
going to get closer to realistic techniques while being fast
enough for real-time applications.
One of the most commonly used types of near realism
model is called ArtDefo [7] which is an expanded mixture of
earlier techniques. ArtDefo uses just the shell of the two
colliding models to work out the deformation that should be
applied to the model. It is based around a boundary element
method and boundary integral equations. It uses a limited
amount of information about an object to work out just how
much to adjust the boundary of the object. The most
important attributes that are used to define the deformation
are compressibility, stiffness and density. With these three
attribute about an object many different types of materials
can be modelled and simulated.

D. Real-time Procedural Water Effects
Jeschke et al. [8] state that representing an ocean scene is
a challenge within the computer graphics field. They
concentrate on creating an interactive, infinitely large ocean
scene of breaking waves. The creation of waves is divided
into two sections: the modelling of foam and procedural
generation of wave shapes. The foam is created from the top
of the wave crashing into the lower water.
To procedurally generate the shape of the wave, Jeschke
et al. [8] first analyse human knowledge of the life cycle of a
wave. The life of a wave is split into three distinct sections,
first, rising up from the sea in a round shape, second, the top
moving faster and falling forwards to form a tube, and
finally, collapsing until flat again. For procedurally
generating a wave Jeschke et al. [8] suggests using a mixture
of cosine function, exponential function, scaling and rotation.
Larsson et al. [11] have designed a procedural system
that can model open water with ships as well as shoreline
areas. Only two shaders are used to create the continuous
surface, one for displacement and the other for surface
shading. To create trails behind ships, first a spline is created
from the ship with one point giving information on the ship
such as the size and type. Then at render time, foam and
displacement are created along the spline. After all the ship
trails are created, a displacement is used to create waves and
wake.
To create shoreline crashing waves, it is not
recommended to use a mixture of mathematical functions
like Jeschke et al. [8] as it is too costly. Instead a mixture of
displacement shaders and volumetric rendering can be used.
The shoreline waves are powered by sets of points placed
around each land-mass.
The technique by Larsson et al. [11] while not as visually
pleasing as Jeschke et al. [8] has the benefit of being less
computationally expensive, most of their computational cost
being passed to the GPU freeing the CPU for other work.
Their work is also a more complete model allowing both
deep sea and ship trails to be visualised.
III.

DAMAGE REPRESENTATION

Semi destroyed cities are used as the setting for many
modern computer games. Damage representation is
becoming an important tool for artists and as such the
proposed framework in this paper will take this in
consideration.
A. Deformations
The basis of damage for a 3d model must be
deformation; this is a complex and computationally high
transformation. There are two types of deformation which

546
536

The boundary value problem relates to what happens to
the rest of surface when any deformation is applied. A good
example of this is when a balloon is pushed the rest of
surface expands. The boundary value is calculated by
applying a force to the model similar to pressure called
traction. The force is applied to every free-to-move vertex in
the same direction as its normal. This can also be used for
feedback to the user interface. Boundary integral formulation
is used to find this force as well as the displacement on the
boundary of the object. This formulation uses the three
attributes: compressibility, stiffness and density which
determine how the object is affected. The main problem with
“ArtDefo” and most near realism techniques is that models
are generally not of one solid material and have a number of
compressibility, stiffness and density values.
The most commonly used type of total realistic model is
finite element method or FEM. In a FEM, physical accuracy
is paramount and the model starts with constitutive laws of
the material and solves the boundary. This model is
extremely computationally expensive and simulated offline.
A FEM is used when the stresses and deformations inside the
model is important for determining properties of a structure.
It uses an internal mesh instead of just the boundary and
traction.

every point has a second point on the inside. The creation of
this second surface is an important part of the technique and
there are a set of rules that have been abided by. This kind of
model is suitable for a number of different brittle models.
An unaided voxel model displays a large amount of
unseen data as the model will have an internal structure.
However voxel models have the advantage of being able to
use medical scanners to create the model including attributes
of the real life object such as the density of all the different
parts of the model. A way to speed up the rendering speed
for voxel could be to use in conjunction with marching
cubes. Marching cubes are a surface generation technique
used for extracting a polygonal mesh of an isosurface from a
voxel model. The technique progresses through the voxel
model (generally using a search pattern), using eight
neighbours’ locations at one time to establish which polygon
or polygons are needed to represent the part of the surface;
this decision is made using an index of 256 pre-calculated
possible polygon configurations. The polygons are then
merged to create the required surface. To make an effective
fracture technique all the physics is calculated upon the
voxel model and rendered based on the marching cubes
results of the voxel model.
IV.

B. Fractures
Fracture is another word for a cut or break on a model
which can be an important part of real world applications
such as games. Though fractures have not been used in many
games in the past, there does seem to be a trend of using
fractures to represent damage in new games. Similar to
deformation, there are two types of models: total realistic
models and near realism model. This is also down to the
same reasons as deformation but the conflict of interest
between interactivity and realism which is even more drastic
as fractures take even more computational expense.
There are several types of near realism models that
include shell, brittle fracture and voxel techniques, each
having different attributes, computational expense and levels
of realism.
Shell techniques are based around the boundary of an
object, similar to the deformation technique “ArtDefo”
model; therefore an internal mesh is not needed. From the
boundary of the model a thin shell is created; this is where

THE PROPOSED FRAMEWORK

The proposed framework provides a guideline to a
possible solution. It aims in the future to create a workable
system built upon this framework. The framework presents
workflows in which the procedural tasks could be ordered
and created. The system allows for either fully automated or
minimal user controlled generation where necessary. The
Framework can be separated into five unique sections:
terrain creation, usage map creation, model creation,
damage, real-time effects. It is possible to build each section
with a number of the techniques discussed in this paper;
however the techniques will be used in different manors to
achieve the necessary results. The flowchart in Figure 3
shows five distinct areas: terrain generation, map generation,
model generation, damage and post process. Each of the five
sections is designed to combat different modelling areas with
the use of procedural techniques. This system is designed to
be a complete modelling framework though not every
application will require all five sections.

547
537

Terrain creation
Map creation
Building Creation
Damage
Effects

Figure 3. The proposed framework for complete procedural world

548
538

areas, add to the realism of the population map. Although
this is a very simplistic view of how the humanity builds its
civilisations as there are many more rules that can be said to
exist, it is believed that with these simple rules mixed
together with an element of randomness, a fairly realist
model can be produced. To create more realistic patterns the
generation of a land/sea map will give the application more
control of the final effect. The randomly generated height
map has constraints which help to reduce unbelievable
features. This also stops areas hovering around the water
level and allows for land areas to be below sea level. It is
proposed, when generating the water map, seven different
land types deep sea, sea shelves, shore line, beaches, plains,
mountainous and undulating are used as shown in Figure 4.
This adds a massive control to the high map generation and
can produce complex features such as cliffs and canyons.

A. Terrain and Maps Generation
Maps in the terms of the first two sections can be defined
as textures that show information as different colours. One
of the main difficulties in using randomly generated maps is
that of control. Within randomly generated maps we, a
number or variables can be controlled including: frequency,
average height, the maximum and minimum height.
Layering multiply maps together, using frequencies and
other variables as shown in section 2.1, produces a much
greater depth and realism than a single map with a single set
of variables.

B. Models Generation
Based on the population graph, street map can be
generated using a number of different street patterns with the
use of Voronoi diagrams and L-Systems. First L-Systems
can be used to create the major road network as discussed by
Glass et al. [5]. The Voronoi diagram technique is used to
aid in the generation of the maps; however instead of each
point being shaded based on how far it is away from the
centre of the closest site, only the lines that are away at an
equal distance from two sites are important (as shown in
Figure 6).

Figure 4. Shows a land/sea map showing seven pos land types

Figure 6. Two types of Voronoi diagrams

The main roads are then connected together using Parish
and Müller [15] creation of highways to connect the centres
of populations which is one of the simplest and most
effective techniques for achieving this. Voronoi diagrams are
once again used to split plots into useable sizes with different
rules for inner-city to rural. To create rules for the Voronoi
diagram simply means controlling how the centre sites are
placed, i.e. how far apart they are or how regular they are.
However it is still possible to create unusable plots, this
happens in real life situations and the simplest solution is to
merge the smaller plot with a suitable neighbouring larger
plot.
After the road creation and conversion of blocks and
plots from the inner sections formed by the road segments
the colonisation by buildings can begin. A number of

Figure 5. Shows a height map based on Figure 4

The order in which the maps are created is a key issue, as
a number of the maps rely on information from other maps.
This is why the flowchart has been produced in this order;
water/land map, height map, honey map, usage map and
finally a population map is generated. These loosely follow
the rules of the natural and human world. For instance, a
honey map can be seen as a natural resource such as fertile
ground, martial resource or simple natural beauty, as such
different areas will more likely see altered uses which will
enable vastly diverse populations. Data produced by the
height map, an approximation on how hard it is to build in

549
539

solutions for building generation exist, ranging from
complex shape creation grammars, which generate a missive
variation of building shapes, to simple rectangular blocks
with procedural textures.
To produce a large array of realistic models of structures
for use in the virtual city a blend of both geometry and
textures can be used. The basis for this is the generated floor
plan. Parish and Muller employ a blend of rotation and scale
transformations upon a number of combined simple
geometric shapes to derive complex building floor plan.
After this shape is created which embodies the floor plan of
the building, this shape is then extruded and becomes the
base of the building. The shape is then replicated and
transformed upward on the building to rest upon the previous
shape; a shape grammar is then applied to the shape, to add a
number of scale and rotation operations to the shape within a
set of parameters defined by the grammar. The resultant
shape is smaller than the previous shape and sits above it on
the building. This process is repeated with different scale and
rotation transformations being applied each time as the
building begins to grow upwards. The result is a
geometrically complex building shape upon which various
textures can be applied.
V.

[3]

[4]

[5]
[6]

[7]

[8]

[9]

[10]
[11]

[12]

CONCLUSION

Procedural modelling techniques are becoming more
commercial with products such as CityEngine [13] coming
to the market place. Therefore additional research is being
undertaken within the field. The development of a system
that can create a visually impressive planet with realistic
terrain, water bodies, populated areas and road networks is
still a long way away. The gains from such a product would
be missive within the entertainment fields. Especially
improving the time it takes to produce high level artwork.
Although the framework is only meant as a guideline, it is
hoped that it will be developed further and fully
implemented in the near future.

[13]

[14]

[15]
[16]
[17]
[18]
[19]

REFERENCES
[1]

[2]

[20]

G. Eason, B. Noble, and I. N. Sneddon, “On certain integrals of
Lipschitz-Hankel type involving products of Bessel functions,” Phil.
Trans. Roy. Soc. London, vol. A247, pp. 529–551, April 1955.
(references)
Chen G., Esch G., Wonka P., Müller P., Zhang, E., “Interactive
Procedural Street Modeling”, ACM Trans. Graph., 27, 3, pp. 1–10,
2008.

[21]

550
540

Ferrier, N., “Determining Surface Orientation From Fixated Eye
Position And Angular Visual Extent, IEEE International Conference
on Robotics and Automation”, pp. 938–943, 1999.
Federl, P., Prusinkiewicz, P., “Finite Element Model of Fracture
Formation on Growing Surfaces”. Computational Science, Springer,
pp. 138–145, 2004.
Finkenzeller, D., 2008. “Detailed Building Facades, Procedural
Methods for Urban Modeling,
Glass, R., Morkel, C., Bangay, D., “Duplicating Road Patterns in
South African Informal Settlements Using Procedural Techniques”,
Afrigaph '06: Computer graphics, Visualisation and Interaction in
Africa, ACM Press, pp. 161–169, 2006.
James, D., Pai, D., “DyRT: Dynamic Response Textures for RealTime Deformation Simulation with Graphics Hardware”, ACM
Transactions on Graphics SIGGRAPH, 21, 3, pp. 582–85, 2002.
James, D., Pai, D., “ARTDEFO: Accurate real time deformable
objects”, SIGGRAPH99: 26th International Conference on Computer
Graphics and Interactive Techniques, pp. 65–72, 1999.
Jeschke, S., Birkholz, H., Schmann, H., “A Procedural Model for
Interactive Animation of Breaking Ocean Waves”, WSCG2003,
2003.
Larive M., Gaildrat V., “Wall Grammar for Building Generation”,
Graphite'06, 2006.
Lechner, T., Watson, B., Wilensky, U., Tisue, S., Felsen, M.,
Moddrell, A., “Procedural Modeling of Urban Land Use”, ACM
SIGGRAPH'06, 2006.
Larsson, M., Zalzala, J., Duda, G., “A Procedural Ocean Toolkit”,
Digital Domain Inc, 2006.
Musgrave, F., Kolb, C., Mace, R., “The Synthesis and Rendering of
Eroded Fractal Terrains”. Computer Graphics (SIGGRAPH 89
Proceedings), 23, 3, pp. 41–50, 1989.
Müller, P., Wonka, P., Haegler, S., Ulmer, A., Van Gool, L.,
“Procedural Modeling of Buildings”, ACM SIGGRAPH 2006 / ACM
Transactions on Graphics, 25, pp. 614–623,
Olsen, J., 2004. “Realtime Procedural Terrain Generation”, IMADA,
University of Southern Denmark, 2006.
Parish, Y., Müller, P., “Procedural Modeling of Cities”, ACM
SIGGRAPH, pp. 301–308, 2001.
Prusinkiewicz, P., Federl, P., Karwowski, R., Mech, R., “L-systems
and beyond”. ACM SIGGRAPH'03, 2003.
Perlin, K., “Standard for Perlin Noise”, US Patent App. 10/042,647,
2002.
Sinha, R., Liang, V., Paredis, C., Khosla, P., “Modeling and
Simulation Methods for Design of Engineering Systems”, Computing
and Information Science in Engineering, 1, pp. 84–91, 2001.
Silveira, L., Musse, S. “Real-time Generation of Populated Virtual
Cities”, VRST ’06: ACM Virtual Reality Software and Technology,
pp. 155–164, 2006.
Wonka, P., Wimmer, M., Sillion, F., Ribarsky, W., “Instant
Architecture”, ACM Transactions on Graphics, 22, 3, pp. 669–677,
2003.

