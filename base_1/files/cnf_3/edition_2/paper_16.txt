2010 14th International
Information
Conference
Visualisation
Information Visualisation

Liquid Diagrams: Information Visualisation Gadgets
Keith Andrews and Martin Lessacher
IICM, Graz University of Technology, Austria
kandrews@iicm.edu

Abstract

Visualization API [5] allows visualisations to be built which
integrate seamlessly with the data contained in Google
spreadsheets.

Information visualisation techniques have sometimes
been slow to diffuse into more widespread public use. Recent advances in cloud computing have opened up opportunities to bring information visualisation to the masses in
ways previously not possible.
Liquid diagrams are a suite of information visualisation
gadgets written in Flex, which visualise live data contained
in Google Docs spreadsheets through the Google Visualization API. Users can interactively configure the visualisation
and any changes in the online spreadsheet data are reflected
immediately in the display. In contrast to other solutions,
liquid diagrams gadgets specifically support the printing
and export of both vector (SVG) and raster (PNG) graphics
versions of the visualisations, allowing users to construct
and export high-quality diagrams for inclusion into other
works.
The suite of visualisation gadgets currently available includes: area charts, bar charts, heat maps (choropleths),
line charts, pie charts, treemaps, and parallel coordinates
plots. Star plots and voronoi treemaps are coming soon.

2. Google Spreadsheets Gadgets
Google spreadsheets can be linked to either static charts
(Insert Chart) or interactive gadgets (Insert Gadget). Gadgets are specified by the URI of an XML file, which conforms to the Google Visualization API. The spreadsheet
data and any parameters (settings) are basically passed to
the gadget via Javascript, and the gadget itself can be built
using purely Javascript or a mixture of Javascript and other
technologies such as Flash or Flex.
Gadgets can be submitted to Google for verifcation, at
which point they are listed in the “Add a Gadget” dialogue,
and can be added to a spreadsheet without having to manually enter the URI of an XML file. Gadgets typically expect the spreadsheets which use them to conform to certain
conventions. For example, a parallel coordinates gadget operating on multidimensional data might expect the spreadsheet rows to contain data items and each column to be a
dimension (variable), with an optional first row containing
lables. Thus each visualisation gadget requires some associated documentation of its settings and input data conventions.
The procedure for inserting a new gadget is illustrated in
Figures 1 to 4. First of all, the user prepares their data in a
Google Spreadsheet (Figure 1). Depending on the particular
kind of gadget to be inserted, the data may have to conform
to certain conventions. For example, a treemap gadget may
require the first column to contain the name of an item, the
second column to contain the name of its parent, and further
columns to contain any data.
Next, the appropriate rows and columns in the spreadsheet are selected and the function Insert Gadget is called.
This brings up the Add a Gadget panel (Figure 2), where a
specific gadget can be selected. Those gadgets which have
been provided by Google or verified by Google can simply
be selected from the list. As yet unverified gadgets have to
be inserted as custom gadgets. These are specified by en-

1. Introduction
Information visualisation techniques have sometimes
been slow to diffuse into more widespread public use. Information visualisation tools designed for desktop use typically have to be installed on the computers of end users,
with all the associated issues of compatibility and maintentance, not to mention the initial hurdle of an installation dialogue. Recent advances in cloud computing have opened
up opportunities to bring information visualisation to the
masses in ways previously not possible. Google Docs, the
online office suite by Google, had over 10 million unique
visitors in January 2010, according to Compete [2].
Web sites allowing users to visualise their own data, such
as IBM’s Many Eyes [14] and Swivel [12] have shown
the potential of online visualisation services. Google Docs
promises a rapidly increasing user base and the new Google

1550-6037/10 $26.00 © 2010 IEEE
DOI 10.1109/IV.2010.100

104

Figure 4: The gadget appears inside the spreadsheet.
It responds immediately to any changes in data values.

Figure 1: The user has entered some data about world
populations into a Google spreadsheet. The data is selected and Insert Gadget is clicked (not shown).

tering the URI of their XML file. Unverified gadgets can be
submitted for verification to Google, at which point they are
listed.
Next, the gadget’s Settings Panel appears (Figure 3).
Here, various parameters and settings for the gadget can be
entered. The Google Spreadsheet remembers these settings
and uses them whenever the gadget is refreshed or redrawn.
Finally, the gadget itself appears inside the Google spreadsheet (Figure 4). Liquid Diagrams gadgets can then further
be interactively configured using the Options panel inside
the visualisation.
Gagdets can either reside within a standard spreadsheet
sheet, say alongside data, or they can be given their own
sheet (and thus have more room). Clicking on a gadget
within a spreadsheet sheet reveals the gadget’s title bar. Under the triangle at the top right are several functions, including Move to own sheet....

Figure 2: The Add a Gadget panel appears, listing
available gadgets which have been verified by Google.
Custom gadgets are specified by entering their URI (not
shown).

3. Liquid Diagrams
Seven information visualisations are currently available
for Google Spreadsheets in the Liquid Diagrams suite: area
chart, bar chart, heat map (choropleth), line chart, parallel
coordinates, pie chart, and tree map. Two further visualisations are under development and will be added shortly: star
plot and voronoi tree map.
Space restrictions do not allow all of them to be shown
in full detail. Figures 5, 6, 7, and 8 show the Liquid Diagrams heatmap (choropleth) visualisation being applied to
EU data about internet users. Once the user is happy with
a visualisation, it can be exported in various formats. Figure 9 shows the final exported SVG vector graphics version
of the diagram, which can be further edited and included in
high-quality in other works.
Figure 10 shows an area chart of the most common girls
names in Austria between 1997 and 2008. Figure 11 shows

Figure 3: The gadget’s settings (parameters) are entered.

105

Figure 5: A Google spreadsheet containing data about
internet users in EU countries. To save space, only the
inside of the Google spreadsheet window is shown.

Figure 8: The user has selected internet penetration as
the data column to be mapped and a continuous colour
scale. This can then be exported as SVG.

Internet Users in the EU

Map: Europe
Intensity: Penetration(% Population)

29

88

Figure 6: The Liquid Diagrams heatmap gadget has
been inserted into the spreadsheet. The ISO country
codes are matched to any available vector maps and a
heatmap is created. Each data column is mapped to a
different colour.

Figure 9: Penetration of the internet in the EU. Internet users as a percentage of the population. SVG vector
graphics export of Liquid Diagrams heatmap.

Girls Names in Austria
Lena

Leonie

Anna

Sarah

Julia

Hannah

Laura

Katharina

Sophie

Lisa

10,000

9,000

8,000

7,000

Lisa

Sophie

Number

6,000

Katharina
5,000

Laura
Hannah

4,000

3,000

2,000

Julia

Sarah
Leonie
Anna

1,000

Lena
0
20

20

20

20

20

20

20

20

20

19

19

19

08

07

06

05

04

03

02

01

00

99

98

97

Year

Figure 7: By default, the data is grouped into 10 bins
(deciles) coded by colour intensity. The Options panel
allows various settings to be changed and the final diagram to be exported.

Figure 10: A Liquid Diagrams area chart showing the
most common girls names in Austria between 1997 and
2008.

106

Cars
mpg

cyl

disp

hp

lbs

Accel

Year

46.6

8

455

230

5,140

24.8

1,982

9

3

68

46

1,613

8

Origin
3

1,970

1

Figure 11: A Liquid Diagrams parallel coordinates
visualisation of the well-known cars dataset.
Austrian Population

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24

<?xml version = ” 1 . 0 ” encoding=”utf−8”?>
<mx : Application
xmlns : mx=”http : / / www . adobe . com / 2 0 0 6 / mxml”
layout=”absolute”
creationComplete=”uponCreation ( ) ”>
public function uponCreation ( ) : void {
if ( ExternalInterface . available ) {
ExternalInterface . addCallback (
”getDataObjects ” , getDataObjects ) ;
ExternalInterface . call ( ” callbackReady ” ) ;
} else {
Alert . show ( ” Error : No External Interface ! ” ) ;
}
}
public function getDataObjects (
dataHeaders : Array , dataValues : Array ,
dataOptions : Array , dataColours : Array ) : void {
/ / store and process the data
...
drawVisualisation ( ) ;
}
</mx : Application>

Size: Population
Data: % Foreigners
1

Oberösterreich

Wien

Linz

Tirol
Gmunden

Kärnten

Innsbruck-Land

Innsbruck

Klagenfurt

Wels-Land

Villach-Land
Kufstein

Linz-Land
Perg

Wels

Schwaz
Freistadt

Baden

Mistelbach

Korneuburg

Eferding

Graz

Landeck

Reutte

Salzburg

Steiermark

Tulln

Lienz

Rohrbach
Steyr

Niederösterreich

Weiz

Feldbach

Hartberg

Leoben

Melk

Liezen
Gmünd

Zell am See
Graz-Umgebung

Gänserndorf

Dornbirn

Feldkirch

Hallein

Bludenz

Burgenland

easily be built. However, for current development purposes,
Google Spreadsheets are used as the data source to feed data
into Liquid Diagrams visualisations.
The Flex gadget can be embedded into a web page using
JavaScript. The code to embed the SWF object is written
into the innerHTML element of a container specified by div
tags in an HTML document, as shown in Listing 1. The
embed operation causes the Flex object to be created.
After a gadget object has been created and initialised,
it fires a creationComplete event, triggering the function
uponCreation(). The association between event and function
to be called is given inside an MXML file (see Listing 2),
which is then compiled into the SWF object. Inside the
uponCreation function, an external interface is established
to enable communication between the Flex gadget and its
container (lines 6–10). If the interface is available (line 6),
functions can be defined which are callable by the container.
The only externally callable function defined by Liquid Diagrams gadgets is the function getDataObjects, which will
handle data transfer (line 7). Afterwards, the callbackReady
function of the container is called by the Flex application
to signal that its initialisation process has finished and it is
ready to receive data (line 8). The function getDataObjects
will later be called from outside to pass data from the data
source into the gadget.
Listing 3 illustrates the final steps of the data exchange.
The JavaScript function callbackReady (line 2) hands the data

Knittelfeld
Leibnitz

Hollabrunn
Lilienfeld

Bregenz

Voitsberg

Horn

St. Pölten
Amstetten

Feldkirchen

Vorarlberg

Salzburg

Zwettl
St. Pölten-Land

Villach

Kitzbühel Imst
Wolfsberg

Vöcklabruck

Mödling

Listing 2:
After initialisation, the application
establishes an interface to its container and allows it
to call the getDataObjects function. Afterwards, it calls
the callbackReady function of the container to signal that
initialisation is complete.

21

Wien

Murau

Oberwart

Figure 12: A Liquid Diagrams treemap visualisation
of the nine provinces of Austria and their component
districts. The size of each rectangle represents absolute population, the colour indicates the percentage of
foreign nationals.
a parallel coordinates visualisation of the well-known cars
dataset [13]. Figure 12 shows a treemap of Austrian population data. The size of each rectangle represents absolute
population, the colour indicates the percentage of foreign
nationals. It can clearly be seen that Vienna is the largest
province in Austria in terms of population and also (with
Salzburg city) has a high percentage of foreign nationals.

4. Interfacing to Liquid Diagrams
Liquid Diagrams gadgets are not, in fact, limited to any
particular data source. The process of importing data into
the Flex gadgets is to hand the data to the gadget by calling
a function written in JavaScript. This means that any data
source which supports access via JavaScript is suitable to
be used with Liquid Diagrams gadgets. For example, standalone versions of the Liquid Diagrams visualisations could

107

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26

<div id=”chart”></div>
<script type=”text / javascript”>
var containerElement = document . getElementById ( ’ chart ’ ) ;
if ( containerElement ! = null ) {
containerElement . innerHTML =
’<object classid=”clsid : D27CDB6E−AE6D−11cf−96B8−444553540000” ’ +
’id=”linechart” width=”320” height = ” 2 4 0 ” ’ +
’codebase=”http : / / fpdownload . macromedia . com / get / flashplayer / current / swflash . cab”>’ +
’<param name=”movie” value=”linechart . swf” />’ +
’<param name=”quality” value=”high” />’ +
’<param name=”bgcolor” value=”#869ca7” />’ +
’<param name=”allowScriptAccess” value=”always” />’ +
’<embed src=”linechart . swf” quality=”high” bgcolor=”#869ca7 ” ’ +
’width=”320” height=”240” name=”linechart ” ’ +
’align=”middle ” ’ +
’play=”true ” ’ +
’loop=”false ” ’ +
’quality=”high ” ’ +
’allowScriptAccess=”always ” ’ +
’type=”application / x−shockwave−flash ” ’ +
’pluginspage=”http : / / www . adobe . com / go / getflashplayer”>’ +
’</embed></object> ’;
}
</script>

Listing 1: A container is added to a web page and a SWF object is embedded into this container.

1
2
3
4
5
6

to export (scalable, high-quality) vector graphics versions
of their visualisations.
Google themselves have a number of interactive charts
and gadgets under the banner of Google Chart Tools [3],
some of their own and some from third parties. Most are
quite simple, although some are quite sophisticated. Some
of them draw directly in SVG, although none of them to our
knowledge allow interactive configuration and then export
to SVG.
Hans Rosling’s work at the gapminder project [11], since
acquired by Google and rebranded as the Google Public
Data Explorer [4], and especially his wonderful series of
talks at the TED conferences [10] has done much to raise
public awareness of the value of information visualisation.
The OECD Explorer [9, 7], based on the NCVA eXplorer
[8], allow public OECD data to be visualised online in a
number of ways.
A number of information visualisation toolkits are available for use with Javascript and Flex, the best of which
is flare [6]. flare makes it fairly easy to build interactive
data visualisations. Another such project, birdeye [1], looks
promising, but is at an earlier stage.

/ / Javascript file
function callbackReady ( ) {
getFlexApp ( ’ linechart ’ ) . getDataObjects (
vis . headers , vis . data ,
vis . options , vis . colours ) ;
}

Listing 3: After an interface has been established, the
getDataObjects function of the container is called which
passes the spreadsheet data to the Flex gadget.

to the Flex application by calling the previously specified
function getDataObjects (line 3). getDataObjects continues to
process the data without requiring any further communication with the container.
The main file of a Google Gadget is the gadget XML
file, shown in Listing 4. For custom gadgets, i.e. those not
yet verified and listed by Google, the URL of the Gadget
XML file must be entered when the gadget is inserted into
a Google spreadsheet.

5. Related Work
6. Concluding Remarks
Many Eyes [14] and Swivel [12] were the first efforts
aimed at bringing information visualisation to the masses
over the web. However, they can be somewhat cumbersome
in their data upload facilities, have much less support for online spreadsheet operations than Google Docs, support only
a limited number of visualisations, and do not allow users

Liquid Diagrams exploit the potential of cloud computing to allow information visualisations to be used by anyone
with a web browser and a free Google Docs account. The
main contributions of Liquid Diagrams are: 1) It is usable
by anyone. Liquid Diagrams can be used in the cloud by

108

References
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47

<?xml version = ” 1 . 0 ” encoding=”UTF−8”?>
<Module>
<ModulePrefs title=”Line Chart”
author=”Martin Lessacher”
</ModulePrefs>

[1] birdeye. birdeye Information Visualization and Visual Analytics Library. March 2010. http://code.
google.com/p/birdeye/ .

<UserPref name=”_table_query_url”
display_name=”Data source URL”
required=”true” />
<UserPref name=”title”
display_name=”Title : ”
required=”true”
default_value=”Diagram Title” />
<UserPref name=”line_thickness”
display_name=”Line thickness : ”
required=”true”
default_value=”3” />

[2] Compete. Compete. March 2010. http://compete.
com/ .
[3] Google. Google Chart Tools. March 2010. http:
//code.google.com/apis/charttools/ .
[4] Google. Google Public Data Explorer. March 2010.
http://www.google.com/publicdata/ .

<Content type=”html”><![CDATA [
<form>
<div id=”chart”></div>
</form>
<script type=”text / javascript”
src=”http : / / www . google . com / jsapi”>
</script>
<script type=”text / javascript”>
google . load ( ” visualization ” , ” 1 ” ) ;
google . setOnLoadCallback ( initialize ) ;

[5] Google.
2010.

Google Visualization API.

March

http://code.google.com/apis/
visualization/ .

[6] J. Heer.

flare.

March 2010.

http://flare.

prefuse.org/ .

var prefs = new _IG_Prefs ( ) ;

[7] M. Jern. Collaborative Web-Enabled GeoAnalytics
Applied to OECD Regional Data. In Proc. 6th International Conference on Cooperative Design, Visualization, and Engineering (CDVE 2009), pages 32–
43. Springer LNCS 5738, Luxembourg, Luxembourg,
2009. doi:10.1007/978-3-642-04265-2 5 .

function initialize ( ) {
gadgetHelper = new google . visualization .
GadgetHelper ( ) ;
var query = gadgetHelper . createQueryFromPrefs (
prefs ) ;
query . send ( handleQueryResponse ) ;
}
function handleQueryResponse ( response ) {
if ( ! gadgetHelper . validateResponse ( response ) ) {
return ;
}

[8] NCVA. eXplorer. March 2010. http://ncva.itn.
liu.se/explorer .
[9] OECD.
March 2010.

var data = response . getDataTable ( ) ;
}
</script>
]]></Content>
</Module>

OECD

Regional

Statistics.

http://stats.oecd.org/
OECDregionalstatistics/ .

[10] H. Rosling. Debunking Myths About the “Third
World”. February 2006. http://www.ted.com/
talks/view/id/92 .

Listing 4: A sample Google Gadget XML file. The
UserPref entries specifiy parameters for the gadget. In
this case, the Content block conforms to the Google
Visualization API and uses the GadgetHelper class to
load data from the Google spreadsheet.

[11] H. Rosling. Gapminder. March 2010. http://
gapminder.org/ .
[12] Swivel. Swivel. March 2010. http://swivel.com/
.
[13] UCI. Auto MPG Data Set. UCI Machine Learning
Repository, July 1993. http://archive.ics.uci.
edu/ml/datasets/Auto+MPG .

anyone with a web browser and a Google Docs account.
Nothing has to be installed. 2) Live updates. Changes in
the data are reflected immediately in the visualisation. 3) It
is interactively configurable. The visualisations can be further interactively configured. 4) Vector graphics export. All
Liquid Diagrams visualisations can be exported as Scalable
Vector Graphics (SVG) or printed in vector PDF, for inclusion into other works. Vector graphics are freely scalable
without loss of quality.

[14] F. B. Vi´egas, M. Wattenberg, F. van Ham, J. Kriss,
and M. McKeon. Many Eyes: a Site for Visualization
at Internet Scale. IEEE Transactions on Visualization
and Computer Graphics (TVCG), 13(6):1121–1128,
November 2007. ISSN 1077-2626. doi:10.1109/
TVCG.2007.70577 . http://www.research.ibm.
com/visual/papers/viegasinfovis07.pdf .

109

