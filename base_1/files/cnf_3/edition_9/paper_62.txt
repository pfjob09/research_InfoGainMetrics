Information Access Space Framework over Contextualized Information Base
Mina AKAISHI
Meme Media Laboratory
Hokkaido University, Japan
mina@meme.hokudai.ac.jp

Makoto OHIGASHI
Meme Media Laboratory
Hokkaido University, Japan
ohigashi@meme.hokudai.ac.jp

Nicolas SPYRATOS
Lavoratory for Research in Informatics
University of Paris-South, France
spyratos@lri.fr

Abstract
This paper proposes a framework for generating an Information Access Space from existing knowledge repositories. Currently, vast amounts of information are being accumulated at accelerating paces in many ﬁelds. These include multimedia documents, application program and services. We need new access architecture for organizing and
accessing intellectual assets.
We propose the use of context as a data modeling mechanism and the construction of an interactive Information
Access Space to support users’ intuitive access to large
amounts of information. A context is a modular representation of information under different perspectives. A Contextbased Information Access Space enables operations over
contextualized objects. We describe here the componentbased framework and implementation of a Context-based
Information Access Space.

1

Introduction

Computers and networks are now rapidly expanding
their applications through many ﬁelds, and users can
share the knowledge of others and can also publish their
own knowledge through the Internet. Consequently, vast
amounts of information are accumulated at an ever accelerating pace. To cope with such volumes of information,
we need efﬁcient management methods and search mechanisms.
In this paper, we propose the use of context that enables
us to represent (possibly overlapping) partitions of an information base, partial representations of objects, ﬂexible
naming (e.g. relative names, synonyms and homonyms),
to focuse attention, and to combine and to compare differ-

Yuzuru TANAKA
Meme Media Laboratory
Hokkaido University, Japan
tanaka@meme.hokudai.ac.jp

ent partial representations. A number of formal or informal deﬁnitions of some notions of context have appeared in
several ﬁelds, such as artiﬁcial intelligence [8, 14, 6], software development [21, 5, 22, 23, 11], databases [1, 2, 4, 10,
20], machine learning [15, 27], and knowledge representation [17, 28]. In this paper, we use the notion of context
introduced in [24, 26, 25] as a conceptual modeling mechanism for organizing and managing very large information
bases, together with a path-language for context traversal.
The notion of context that we use is a ”light-weight” abstraction mechanism. A context is just an object container
and can contain objects of different nature. There are only
three types of entities in our context mechanism, namely object identiﬁers, context identiﬁers and descriptors, for simplicity, we shall call object identiﬁers simply objects and
context identiﬁers simply contexts. The context mechanism
that we use is not concerned with the internal structure of
the objects: they may be simple objects such as integers,
characters, or strings, or they may be complex objects such
as ﬁles, tables classes, images and so on; as long as they are
identiﬁable, they can belong to the contents of a context.
This context mechanism can be implemented on top of the
system managing the information base.
There are two main reasons for using a contexts on top of
an existing information base: to allow users to deﬁne their
own, personalized sub-collections, and to name objects using familiar names(local to the sub-collection); to speedup searching for desired objects in the whole collection, by
traversing appropriate contexts.
We apply context to manage a large amount of various
types of media objects that have 2D and 3D representation,
such as digital archives of archaeological cultural heritage
and so on. To provide interactive operations over contextualized information, we propose the construction of Information Access Space from existing Contextualized Infor-

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

mation Base. A Context-based Information Access Space,
or CIAS for short, is a 3D virtual environment that supports
context-based access to an information base that includes
2D and 3D media objects. It supports context traversal as
multiple virtual space traversals.
Context is implemented as a virtual space that is represented as a spherical 3D object. The contents of a context
are instantiated by 3D media components in corresponding spaces. Since not only entity objects, but also contexts
are 3D media components, users can access and operate the
both objects and contexts, which are regarded as scopes of
data, by direct manipulations. Users can see the contents of
a context from outside of a context space, and jump into the
inside space to see more detailed or more relevant information. However, in a large information base, it is impossible
to create all spaces and entity objects corresponding to all
data. When a user traverses context spaces continuously,
necessary spaces and links should be automatically created
by accessing the contextualized information base. It forms
access history as a set of contexts. In our framework, the
system dynamically creates adjacent context spaces according to a user’s current working position in CIAS.
A lot of 3D visualization systems and information navigation mechanisms [3, 7, 12, 13] have been proposed in resent years. They visualize database records and allow users
to perform only predeﬁned interactions. In our system, all
functions are designed as 3D components. In addition, our
system allows freely combining these functions with any 3D
components of the IntelligentBox architecture. This means
that the user can extend the functions by adding existing
or future implemented components. Moreover users can
reuse arbitrary portions of systems as new application components.
The remainder of the paper is organized as follows. In
Section 2, we introduce the notion of context and a path
language for context traversal. In Section 3, we present the
concept and the implementation framework of a 3D interface for context-driven information access. In Section 4,
we explain the dynamic creation mechanism of a CIAS. Finally, in Section 5, we make some concluding remarks.

2

The Concept of Context

In this chapter, we present the notion of context that we
use and the query language for context traversal [24, 26, 25].

2.1

The notion of context

A context is regarded as a modular representation of information, and it can model an object under different perspectives. A context consists of an identiﬁer c plus a content. The content of c is a set of triplets of the form
names, object identiﬁer, reference

cdir
Greek Mythology: o

c105
Europa: o53

c106
Leto: o85

ᜒc

ᜒc

ᮦᮦᮦᮦᮦᮦᮦᮦᮦ

Europa’s Story: o5
Leto’s Story:
o6

ᮦᮦᮦᮦᮦᮦᮦᮦᮦ
c
White Bull: o ᜒc
Europa: o ᜒc

ᜒc
ᜒc

105
106

51

51

c61
61

c

ᜒc

ᜒ
ᜒ

11

52

53

53

Zeus: o11 c62
Leto: o85 c62
consorted_with: o20
attr(o20, o11, o85)

c62

ᜒ
ᜒ
ᜒ

Zeus: o11 c64
Hera: o12 c63
Leto: o85 c65
was_hunted_by: o21
attr(o21, o85, o12)

c63
Python: o17
Hera: o12

ᜒc
ᜒc

64
70

Figure 1. Examples of context.
where names is a set of descriptions for the object and reference is a context identiﬁer or NIL. The context referenced
by an object contains information relevant to that object. By
following references, users can see more detailed information.
It is important to note that names and references are context dependent. An object can belong to different contexts
and may have different names and/or different references
in each context. Figure 1 shows examples of contexts that
are extracted from Greek Mythology. The object Ó½½ is included in the contexts ½, ½ and ¾. In the context ½,
the object Ó½½ has the name ’White Bull’, while in contexts
½ and ¾, the same object is called ’Zeus’, this feature is
useful when we want to view an object from different perspectives.
This contextualization can be used orthogonally to the
usual abstraction mechanisms of classiﬁcation, generalization and attribution. For example, objects Ó¾¼ and Ó¾½ represent a directed binary relationship. This will be described
in Section 4.2.

2.2

Accessing information

Accessing information in a contextualized information
base involves two steps: accessing a context, and accessing
an object within the context. From within a given context,
we can reach any object that belongs to the reference of an
object within that context and, recursively, any object that
lies on a path.
Paths form the basis for reaching objects in a context navigating through the references of objects. The access to information is achieved using a path-language for
context traversal [26]. For example, the function ÐÓÓ ÙÔ( , Ò) is an operation that takes as its input a name
Ò and current context . It returns the set of paths
from the speciﬁed context . The result of the operation
is the set of all name paths related to that information.
Each of these name paths describes a different information path in which the desired information is embedded.

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

For example, ÐÓÓ -ÙÔ( ½¼ , ¼È ÝØ ÓÒ¼ ) returns the paths
’Leto.Zeus.Hera.Python’, ’Leto.Leto.Hera.Python’ and so
on. The ﬁrst path shows the relation between ’Leto’ and
’Python’ via ’Zeus’ and ’Hera’ and the second path shows
the relation between ’Leto’ and ’Python’ via ’Hera’.
Another high-level operation is the function ÖÓ××Ö
( ,Ó). It returns the set of paths from the speciﬁed context to the speciﬁed object Ó. For an example, ÖÓ××-Ö ( Ö , Ó½) returns the paths ’Greek Mythology.Leto’s Story.Leto.Zeus’, ’Greek Mythology.Europa’s
Story.Europa.White Bull’ and so on. This is useful because
we can ﬁnd alternative representations of the same object in
different contexts, as well as the paths to reach these representations.

3

The Context-based Information Access
Space (CIAS)

The CIAS is a 3D virtual environment that allows access
to information based on context models and path-language.
It consists of object spaces and context spaces. In this section, we explain these concepts and their implementation
framework.

3.1

Mapping of Context Model elements to media
components

In order to create a CIAS, we map the components of a
context into individual virtual spaces, as illustrated in Figure 2. A context identiﬁer is mapped into an individual virtual space, called a context space. Each triplet in the content
of the context is mapped into an individual virtual space,
called an object space. Therefore, an object space is a 3D
visualization of a triplet, a context space includes a set of
object spaces, and a CIAS is a set of context spaces.
The creation of an object space within a context depends
on that context. For example, in Figure 2, the object Ó¾ is
materialized as two different object spaces in the two contexts and ¼. If we want to access Ó¾, we will ﬁnd the same
thing whether we access it from or ¼. What differs in the
two contexts is how Ó¾ is accessed from these contexts.

3.2

Contents of Object Spaces and Context Spaces

As we have seen, a context consists of an identiﬁer plus
a content, i.e., a set of triplets in the form of names, object
identiﬁer, reference . Similarily, a context space consists
of a virtual space plus a set of pointers to object spaces;
an object space, in turn, is a virtual space that includes the
instantiation of a single triplet. Two additional features of
an object space are the name viewer and the object viewer.
The name viewer represents names as text, pictures, sounds

c
n1 : o1
n2 : o2
c’
n2 : o2
n3 : o3

ᜒc
ᜒc

1

ᜒc
ᜒc

2

2

3

c-space
o1 space in c-space
o2 space in c-space
c’-space
o2 space in c’-space
o3 space in c’-space

Figure 2. Mapping the context elements into
media objects.

and so on. The object viewer represents an object as a media
object. A pointer to a context space represents a reference.

4

The CIAS Architecture

In this section, we focus on the development of generating Information Access Space from existing Contextualized
Information Bases. It is impossible to materialize all spaces
and objects corresponding to all data in a large information
base. We propose the mechanism of a dynamic creation of
a CIAS according to a user’s current position. Users’ information access activities form the virtual information access
spaces.

4.1

The Mechanism for creating a CIAS

Figure 3 shows the functional linkage of components for
the construction of CIAS based on the context data in the
contextualized information base. This mechanism provides
the dynamic creation of necessary context spaces and object
spaces by following the user’s information space traversal.
We have been implementing these functions as software
components, using the IntelligentBox system [19] as the basis for constructing CIAS. The IntelligentBox is a constructive visual software development system for interactive 3D
graphic applications. The IntelligentBox represents objects
as reactive 3D visual objects, called Boxes, that can be manually combined with other Boxes. It provides a uniform
framework for the concurrent deﬁnition of both geometrical compound structures among Boxes and their mutually
interactive functional linkages. Each Box has its own state
values that are stored in variables, called slots. Each Box
also has a unique function associated with its slot value. We
use the IntelligentBox system as the basis for constructing
CIASs, since it allows the integration and collaboration of
existing and future developing tools.
In the following sections, we describe each mechanism
employed to materialize a CIAS.

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

OSP
Generator
Context Space

Image
Text Viewer CSP
Box
Box
Box
Object Space

Te
m
pl
at
e
M
od
el

OSP

Object
Space

Object
Space

OSP
Box

OSP
Box

Image
Viewer

Object Object
Space Space
Object
Space

OSP
Box

OSP
Box

CSP

OSP Generator (DRRU)
#spaceID
Context Space

OSP Box

#spaceID
Context
Space

CSP Box

OSPs

Figure 3. The components structure for generating the Object and Context Spaces.

# templateID # data_set

Data Manger Box

#evaluate #query #result

DB

DB Proxy Box

#args

#query

Query Definition Box

Reification

Evaluation

Query

DRRU

Figure 4. A Database Record Reiﬁcation Unit.

4.1.1 Space Port
We introduced space ports to connect spaces. To construct
a CIAS, we need a mechanism that addresses efﬁcient access to information objects within a restricted 3D display
space. Space ports allow us to embed multiple 3D spaces
in a single virtual environment, and enable us to navigate
through these different spaces. An embedded space can be
represented by a 3D media component. The user can see the
contents of the embedded space from outside, and jump into
the embedded space to change the current working place.
A pointer to an object space is called an Object Space
Port (OSP) and a pointer to context space is called a Context Space Port (CSP). The roles of these space ports are
(i) as entrance points to access a target space, and (ii) as a
representation of a particular aspect of a space pointed at.
Such space port functions are provided as OSP/CSP Boxes
in IntelligentBox [9].
Object spaces are embedded into a context space by
OSPs. The same object can be accessed from one or more
different context spaces through OSPs. This feature is use-

ful when the user wants to view an object from different
perspectives.
The right part of Figure 3 shows a prototype system hardcopies of a CIAS. In this example, the context space contains 4 OSPs that are connected with corresponding object
spaces. The corresponding object spaces are seen through
the OSPs. When a user approaches one of OSPs, then the
user will enter the object space that includes instantiations
of an object. The reference is a CSP that also contains
OSPs. When a user approaches that reference CSP, the user
can enter it. In the same way, users can continuously explore the information spaces via the paths.
4.1.2 Database Record Reiﬁcation Mechanism
Whenever a user wishes to access new data, necessary objects and spaces are created by retrieving data from an information base. To dynamically create a CIAS according to
a users current position, we introduced OSP generator (Figure 3), constructed by a Database Record Reiﬁcation Unit
(DRRU) [18]. A DRRU consists of three basic components
that are shown in Figure 4.
A Query Deﬁnition Box generates query statements by
a predeﬁned template query and arguments. A Database
Proxy Box works as an interface between a database system and the IntelligentBox system. The DB Proxy Box is
connected to the contextualized information base. Through
a DB Proxy Box, users can use a set of database functions
as a Box. A Data Manager Box reiﬁes database records
as Boxes. The Data Manager Box stores an identiﬁcation
of the template Box(es) to materialize the database record.
Arbitrary Boxes can be pre-registered in the Template Box
Table, which is a global variable in the IntelligentBox system. When the Data Manager Box receives the result of the
query evaluation from the DB Proxy Box, the Data Manager

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

OSP
Generator

Object Viewer

Text
Box

OSP
Generator

OSP
Generator

CSP
Box

Template Model

Context Space

Object Space

#spaceID

OSP Box

Figure 5. The component structure of an object viewer to represent an attribute.

Box makes copies of pre-registered template Boxes. Each
copy of the template Box is then instantiated with the value
of the corresponding element of the collection.
An OSP generator (in Figure 3) works as follows. A
Query Deﬁnition Box receives a context ID as an input,
and then generates a query statement to obtain contents of
the speciﬁed context, then the DB Proxy Box receives that
query and sends the evaluation of that query to a Data Manager Box. A Data Manager Box materializes the contents of
context corresponding to the given data as 3D components
depending on predeﬁned template models. The left hand
side of Figure 3 shows the composite structure of the template Boxes in order to materialize an OSP and an object
space.
4.1.3 Timing control of a CIAS creation
A CIAS is created by i) specifying a context identiﬁer, ii)
creating a query to obtain contents of a speciﬁed context, iii)
evaluating a query, and iv) materializing the result as a 3D
media object. We control the timing of a query evaluation
according to the user’s current working space.
We combine a trigger control component with a DB
Proxy Box. When a DB Proxy Box receives a trigger, it
starts query evaluation. A Trigger Box issues a signal only
when a condition is satisﬁed. In the case of our implementation, when a user enters the space that includes a CSP,
then the Trigger Box in the connected context space issues
the trigger signal, meaning that the necessary space is created dynamically as the user explores data. It is possible to
change the timing of a trigger issue by changing a condition
deﬁnition.

4.2

The design of an Object Viewer

In the deﬁnition of context, objects are referred to by object identiﬁers. The context mechanism is not concerned
with the internal structures of the objects. It is up to a

system designer how object viewers are designed. In the
case of Figure 3, an Image Viewer Box is used as an object viewer. It gets an image ﬁle name speciﬁed by an object identiﬁer and visualizes it. In our system, all functions
are designed as 3D components, allowing free combination
with other components. This means that the user can extend the functions by adding existing or future implemented
components. In the following, we show an example of how
to visualize the structured contents of a context.
Context allows for some simple relations between objects; for example, two different objects of a context can
have the same name and/or the same reference. Moreover,
the objects of a context might be related in more complex
ways. As proposed in [25], the objects of a context can be
structured as in a Telos information base [16], which consists of structured objects built from two kinds of primitive
units: individuals and attributes. An important and distinctive feature of a Telos is that individuals and attributes are
treated uniformly, and are referred to as ”objects”. Individuals represent entities, while attributes represent directed
binary relationships between entities. Every attribute consists of a source, a label and a destination. For example, in
Figure 1, the object Ó¾¼ in context ½ is an attribute object,
whose label is ’consorted with’, its source is object Ó½½, and
its destination is object Ó .
In such an enhanced deﬁnition of context, each object
can be either an individual or an attribute, and has a set of
names and a zero or one reference. To visualize an attribute
as an object, the component structure of an object viewer is
shown in Figure 5. If the object is an attribute, it exists with
a source object and a destination object. One OSP generator
creates the OSP and the object space for a source object,
and the other OSP generator creates the OSP and the object
space for a destination object. Figure 6 shows hard copies
of the display. The context space contains OSPs to connect
to object spaces for two entities and one attribute. In this
example of an attribute, the object viewer consists of two
OSPs. The source OSP is connected to the object space of
’Zeus’ and the destination is connected to the object space
of ’Leto’. This is one example of structured object viewers
to represent the binary relation of objects.

4.3

Context Space generation mechanism

Figure 7 shows the components structure for obtaining
the collection of context spaces that satisfy the given query.
The Data Manager Box stores a CSP (CSP Box that connected with a context space) as a template Box. It then
gives the set of context spaces that satisfy the query condition. For example, let us consider the query for selecting
all contexts that include a speciﬁed object Ó. We call such a
set of contexts the facets of Ó. It gives users an overview of
different aspects of the object Ó in different context spaces.

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

Object Space for an individual object
Name

Ref
(CSP)

Object o85

OSPs
Object Space

Name
OSPs

Ref
(CSP)

Context Space

OSPs
Object o20

Object Space

Object Space for an attribute object

Figure 6. An exploration in a Context-based Information Access Space.

OSP
Generator
Context Space

CSP
Box

Te
m
pl
at
e
M
od
el

CSP
Box

CSP
Box

DRRU

CSP
Box

CSPs

Figure 7. The component structure for generating the Context Spaces.

After query evaluation, the DB Proxy Box receives all context data that includes the object Ó, that is, its facets of Ó.
The result data is sent to the Data Manager Box. The Data
Manager Box then makes copies of the template Box whose
detailed structure is shown on the left of Figure 7. Each CSP
Box materializes the context space by following the aforementioned procedures in Section 4.1. Users can choose a
context space, enter it, and follow the links depending on
their interests.

5

Conclusions

In this paper, we proposed the concept of a CIAS and its
implementation framework. It supports user’s information
access exploration based on context. Through the OSPs in
the context spaces, users can follow the reference links and
obtain the information objects and the paths in which they
are interested. The system dynamically creates information
spaces when they are required. In addition, the integration

and the collaboration of existing tools and future extensions
over a hypermedia environment would contribute to the efﬁcient usage of the human knowledge stored in computer
systems, and would enhance productivity and collaboration.
In our architecture, a context space and an object space are
represented by 3D components, which are CSP/OSP Boxes.
Any component of a CIAS can be combined with other
functional component Boxes such as 3D animation tools,
CSCW support tools, the scientiﬁc visualization tools and
so on. This gives it the potential to expand its possible applications.
Other applications of this approach may include the visualization of universal data. Sometimes users lose their
way while accessing information. While this system supports users’ data exploration by space navigation, on the
other hand, a global view of data is also useful to grasp
an overview of data. User’s space navigation forms an information access history as 3D components. In our future
work, we are interested in the geometrical arrangement of
3D components, which are 3D icons of context spaces, to
represent relationships among contexts.
Visualization of such a history or the relation among accessed data helps users to plan the next steps of data exploration. However this topic is beyond the scope of this paper.

References
[1] S. Abiteboul and A. Bonner. Objects and views.
In Proc. ACM-SIGMOD Conference, pages 238–247,
1991.

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

[2] F. Bancilhon and N. Spyratos. Update semantics of relational views. ACM Trans. Database Syst., 6(4):557–
575, 1981.

[16] J. Mylopoulos, A. Borgida, M. Jarke, and
M. Koubarakis. Telos: Representing knowledge
about information systems. ACM Trans. Inf. Syst.,
8(4):325–362, Oct 1990.

[3] M. Chalmers and P. Chitson. Bead: Explorations in
information visualization. In Proc. ACM SIGIR ’92,
published as a special issue of SIGIR forum, pages
330–337, 1992.

[17] J. Mylopoulos and R. Motschnig-Pitrik. Partitioning information bases with contexts. In Proc. of
CoopIS’95, pages 44–55, 1995.

[4] N. Delisle and M. Schwartz. Contexts: A partitioning
concept for hypertext. ACM Trans. Ofﬁce Inf. Syst.,
5(2):168–186, 1987.

[18] M. Ohigashi and Y. Tanaka. A framework for the virtual reiﬁcation of database records. IPSJ, 42(SIG 1
(TOD8)):80–91, 2001.

[5] G. Gottlob, M. Schreﬂ, and B. Rock. Extending
object-oriented systems with roles. ACM Trans. Inf.
Syst., 14(3):268–296, 1996.

[19] Y. Okada and Y. Tanaka. IntelligentBox: A constructive visual software development system for interactive 3D graphic applications. In Proc. Of Computer
Animation ’95, pages 114–125, 1994.

[6] R. Guha. Contexts: A formalization and some applications. In ph. D thesis. Stanford University, 1991.
[7] M. Hemmje, C. Kunkel, and A. Willet. Lyberworld
-a visualization user interface supporting fulltext retrieval. In Proc. ACM SIGIR ’94, 1994.

[20] A. Ouksel and C. Naiman. Coordinating context building in heterogeneous information systems. J. of Intelligent Inf. Syst., 3(2):151–183, 1994.
[21] J. Richardson and P. Schwarz. Aspects: Extending objects to support multiple, independent roles. In Proc.
ACM-SIGMOD Conference, pages 298–307, 1991.

[8] G. Hendrix. Encoding Knowledge in Partitioned Networks. In N. Findler, editor, Associative Networks.
New York: Academic Press, 1979.

[22] E. Sciore. Object specialization. ACM Trans. Inf. Syst.,
7(2):103–122, 1989.

[9] M. Itoh and Y. Tanaka. World Mirror and World Bottle: Components for embedding multiple spaces in
a 3D virtual environment. IPSJ, 42(10):2403–2414,
2001.

[23] J. Shilling and P. Sweeney. Three steps to views: Extending the object-oriented paradigm. In Proc. OO
Prog., Syst., Lang. And Appl. -OOPSLA,, pages 353–
361, 1989.

[10] V. Kashyap and A. Sheth. Semantic and schematic
similarities between database objects: A contextbased approach. VLDB Journal, 5(4):276–304, 1996.

[24] M. Teodorakis, A. Analyti, P. Constantopoulos, and
N. Spyratos. Context in information bases. In Proc,
of the 3rd Int. Conference on Cooperative Information
Systems (coopIS ’98), pages 260–270, 1998.

[11] R. Katz. towards a uniﬁed framework for version modeling in engineering databases. ACM Comput. Surv.,
22(4):375–408, 1990.
[12] J. Mariani and S. Benford. Populated information terrains: Virtual environments for sharing data. In Technical Report CSCW/4/94, Lancaster University, Computing department, 1994.
[13] A. Massari, L. Saladini, M. Hemmja, and F. Sisinni.
Virgilio: A non-immersive vr system to browse multimedia databases. In Proc. Intl. Conf. on Multimedia
Computing and Systems, IEEE, 1997.
[14] J. McCarthy. Notes on formalizing context. In Proc.
IJCAI-93, pages 555–560, 1993.
[15] R. Michalski. How to learn impressive concepts: A
method employing a two-tiered knowledge representation for learning. In Proc. Of 4th Int. Workshop in
Machine Learning, pages 50–58, 1987.

[25] M. Theodorakis, A. Analyti, P. Constantopoulos, and
N. Spyratos. Contextualization as an abstraction
mechanism for conceptual modelling. In Proc. of the
18th Intern. Conference on Conceptual Modelling (ER
’99), pages 475–489, 1999.
[26] M. Theodorakis, A. Analyti, P. Constantopoulos, and
N. Spyratos. Querying contextualized information
bases. In Proc. of the 24th Intern. Conference on Information and Communication Technologies and Programming (ICT&P ’99), pages 260–270, 1999.
[27] P. Turney. Robust classiﬁcation with context-sensitive
features. In Industrial and Engineering applications
of Artiﬁcial Intelligence and Expert Systems, IEA/AIE93, pages 268–276, 1993.
[28] H. Weber. Modularity in data base system design: A
software engineering view of data base systems. In
VLDB Surveys, pages 65–91, 1978.

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

