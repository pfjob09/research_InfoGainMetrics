Textured Voxels Based Method for Display Speed Up
Pierre Tellier
Samy Baroud
samy.baroud@voila.fr
tellier@lsiit.u-strasbg.fr
LSIIT, UMR ULP-CNRS 7005, Pôle API, bd Sébastien Brant, F67400 ILLKIRCH
Abstract
This article presents a novel method for the
simplification of three-dimensional objects in order to
optimise display. This is an incremental method with a
specific feature: the processed scenes are simultaneously
shown with two degrees of detail - precise and coarse.
This allows for the creation of different types of
simplification and adapts the geometrical and
photometrical representation of the objects and scenes
to precision and speed requirements. Voxels and textures
are used in this method and it works with all kinds of
object modelling. This method is based on the idea that
in order to effectively reduce the volume of information
to be processed while providing accurate rendering and
fast display, we have to concentrate on the less visible
parts of objects.

1

Introduction

The aim of simplification is to reduce the size of 3D
objects, to speed up processing, display and geometrical
calculus or even transmission. A lot of research has been
done in this field. Existing techniques can be divided
into two categories.
The first category consists of decimation techniques.
Decimation works by reducing the number of facets
while maintaining the topological properties of the
object. These techniques, which have various
applications, are interesting approaches for display speed
up. However, they are not the most effective in this
domain and are often too complex or too sophisticated
for the present goal. These techniques are not entirely
suitable when using complex photometrical properties.
The second category consists of specific techniques
that are used to speed up the graphical processing of
objects. These specific techniques are only used to make
simplified representations with the same appearance as
the original object. Unlike the first category, which uses
geometrical criterions only, techniques from this
category do not respect the topology of the object and
enter pure visual criterions such as the direction of
observation. These techniques allow for a non-uniform
reduction of information on the object, and then
concentrate the loss of quality on less visible parts.
The method presented in this article comes under the
second category. It is preferable to maintain a high level
of accuracy, indeed maximum, on the parts that
contribute the most to the perception of an object. It is

possible to maintain low accuracy on the parts providing
the least amount of visual information. These parts are
the core and the back of the scene. They are generally
hidden when observing from a certain range. This
presents the idea of the direction of observation.
After setting the features of this approach, we present
the principle behind the method and the data structures
in detail. We then describe how the calculus of data
structures are performed, followed by a discussion on
performance.

2 State of the art
The aim of this article is not to provide a synthesis of
all existing simplification techniques. Readers who wish
to learn more about this subject can refer to many good
comparative studies [1, 4, 6, 7, 9]. However, to
demonstrate the advantages of our approach, we are
going to summarise the principles of the most
representative methods.
As we mentioned in the introduction, two main
approaches exist in simplifying objects and 3D scenes.
The first approach consists of pure geometrical
techniques of decimation that are mainly dedicated to
polyhedral meshes resulting from geometrical
construction processes. These techniques put heavy
constraints on the model of an object and provide
significant benefits while keeping the object’s
topological properties. The second approach consists of
techniques specific to fast display simplification. These
techniques are the most appropriate for any geometry
and take complex photometries into consideration.

2.1 Decimation
These methods only work with surfaces made up of
connected facets, and so are unsuitable for sparse
meshes. The reduction in facet number is mostly
obtained by vertex- or face-collapsing followed by
retriangulating the holes in the mesh at each stage.
There are other possibilities such as edge contraction
or merging vertices. The different possibilities depend
on the chosen candidates to be eliminated. To achieve as
regular as possible results, a new mesh reorganisation
such as edge permutations, or a complete resampling
could be used. One advantage of these methods is that
they allow for a quantitative error evaluation of the
simplification. With the exception of two methods [2, 5],
the error is calculated by measuring the distance from

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

one point to the initial mesh, but not by measuring the
influence of simplification on the final pictures. These
are iterative and therefore provide precise control of the
simplification rate. However, they could only be applied
to geometrical models made up of polygonal surfaces.
Other modelling forms such as CSG, nurbs, volumetric
surfaces, fractals, and particles are excluded. Although
these methods initially eliminate the faces in the most
planar surfaces of the object, defects on contours could
appear quickly. On the other hand, less visible parts are
as simplified as the rest, unless point of view criterions
are introduced, but more information needs to be stored.
To summarize, simplification techniques are based on
geometrical considerations and are not suitable for
object photometry, in particular with bitmap or
volumetric textures. Consequently these techniques are
more appropriate for modelling applications than
visualisation ones.

2.2

Visualisation-oriented simplification

Unlike first category approaches, there are many
simplification methods that do not respect topology. This
is not always dramatic if it is just for screen display.
Among all of these methods, we could underline several
radically different approaches, but all related to the one
presented here. The Rossignac et al. technique [10],
called vertex clustering, is entirely geometrical. It
consists of merging vertices located in the same portion
of space. This method degenerates some facets, but it is
enough to eliminate or to display them in the shape of a
point or an edge. Inside each elemental object, the
vertices that mainly constitute the object's appearance
are conserved i.e. those with the highest curvature. This
approach has a lot of the drawbacks of the previously
mentioned methods: it could only be applied to
polyhedral models (connected or not), and is not really
appropriate for objects with complex photometry.
Parametering this method influences the size of
simplification volumes without predicting the number of
facets after reduction. The loss of information on the
object is then uniform. However, it could be sufficient to
introduce an irregular mesh of the object bounding
volume, thinner where visual information is important
and thicker in less visible zones such as the object core.
Another way to simplify three-dimensional objects is
the He et al. method [3]. This consists of breaking down
objects with voxels, and then rebuilding with “marching
cubes”-like algorithms. There are some common points
with our method, but with two main drawbacks: the
irremediable loss of detail and the need to clearly show
the difference between interior and exterior.
On the other hand, screen display could be faster
with methods using object pre-calculated pictures. These
techniques are very effective and are frequently used in
video games. In fact, a very complex object is simplified
in a simple bounding box (impostor) with textures
applied on sides. An optimisation of this method [8]
suggests the representation of the objects or scenes with
a hierarchy of those boxes. Unlike our method, this
technique does not allow for combining simplified parts
of the object with parts of the initial one. Although
image-based methods take the photometric attributes of

the objects into consideration, they are not
straightforward to parameter (the texture resolution, for
example), or to adapt: there are no intermediate objects
between the original object itself and the texture, and the
final quality is the same for all object parts. These
methods can generate significant parallax errors if
sufficient directional information is not available.

3 Voxels, textures, erosion and dilation
In this section, we present our method, which could
be considered as part of the second category. In fact,
there are some common elements between techniques
using object discreetisation and techniques using precalculated images.

3.1

The importance of appearance

The original idea is as follows: in many real
situations, objects could not be modelled with their
envelopes only, e.g. in architecture, where buildings
could contain other objects such as rooms and furniture.
In medical imaging, organs are made up of tissues and
blood vessels which are not always visible from the
exterior, but information on these aspects could be
important. There are other kinds of objects, e.g. plants,
which are extremely complex or do not have surface
notion. Our method is particularly appropriate for this
kind of scene, in which some parts are visible through
transparent sections.
For these objects, it is not always necessary to draw
the object core as well as the exterior. In most cases, the
interior will be entirely hidden or not clearly visible.
These are the parts where the most simplifications can
be added without over-modifying the object's
appearance.
Model or simulator manufacturers apply this
principle as making objects or models is lengthy. For
example, to produce a real-looking tree, simply making a
root (cylinder), and adding volume in the desired form,
painting, and applying leaves (fig. 1) is enough.
However, information on the interior object should not
be totally eliminated as it may be important at short
range.

Figure 1

3.2

Principle of our method

The aim is to obtain a representation of the objects in
two parts of variable proportions: the inside, an
approximate volume with an adaptable size, which
becomes smaller when we approach the object; and the

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

outside, with an adaptable size too, proportional to the
size of the internal volume.
3.2.1 Construction of approximate volumes. In this
section, we present our strategy to produce the
approximate volume of an object and all of the internal
volumes.
Firstly, we calculate the approximate volume of the
whole object: the object bounding volume is broken
down into voxels. A list of the internal geometric
primitives is added to each voxel. All empty voxels, i.e.
those without any geometric primitive inside, are then
eliminated (fig. 2).

initial object

broken down object

3.2.2.1 How textures are assigned to the voxels. Six
textures are obtained (fig. 4); each one represents half of
the scene partitioned by one of the three canonical plans
(in translucent blue, green and pink). Pixels of a texture
with no object projected on are considered as
transparent. This allows the other textures or geometric
primitives to be seen.

approximate
volume

Figure 2

Later, if needed, it is possible to pass from an
approximate volume to a smaller volume, by simple
morphological erosion (see Section 3.2.2). Voxels lost
by this operation are replaced by the display of the
associated geometric primitives. On the other hand, if
the need for precision decreases, the internal volume
must increase via dilation.
3.2.2
Calculus of the textures. With impostor-like
approaches, the whole scene is projected on each side of
the bounding volume. This is processed differently in
our approach. To reduce some artefacts of perception,
when the observer is not fully in front of a side of the
projection box, only half of the scene is projected on
each side. The other half can be seen through the other
sides, which are transparent.
With an impostor-like approach (fig. 3a), the whole
scene is projected to the left to make the tx1 texture, then
to the right to make the tx2 texture. Therefore both
textures contain information from the entire scene. With
our approach, to calculate tx1, only half of the scene is
projected to the left, and so for tx2, the right half is
projected to the right (fig. 3b). If our approximate
volume were a cube, we would have to display all sides
with textures, including the back sides, to obtain an
approximate display of our object.

tx1 projection directions tx2

Each texture is then cut into smaller textures to fit in
with the size of the voxels. Each sub-texture is assigned
to the side of the first voxel met in the direction of
orthogonal projection (fig. 5).

texture

sub-textures assignment to the voxels

Figure 5

The texture calculus has to be repeated for the three
pairs of sides making up the object bounding volume.
Unlike simple impostor-like approximation methods, it
produces representations showing different degrees of
detail (LODs), with approximate volumes of different
sizes.
The same strategy is used on a smaller scale for the
textures of the intermediate volumes. As described in the
following figures, the most external slice is eliminated at
each stage (fig. 6, 7). We noticed that some voxel faces
are calculated more than once. Fortunately, they did not
change.

tx1 projection directions tx2

(a)
impostor textures creation

Figure 4

(b)
approximate textures creation

Figure 3

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

Figure 6

texture 1

slice 1

Figure 8

Figure 7

This calculus has to be done in both directions of
each canonical axe. We also noticed that, with the
exception of the fact that the same sub-texture is
assigned to a surfel several times (a voxel face), a
geometric primitive is projected on the same projection
plan more than once. To avoid wasted projections, we
propose optimising this pre-calculus in an incremental
way.
3.2.2.2 Incremental texture calculus. To begin with,
the previous calculus is now executed from the interior
to the exterior by processing the most internal slice to
associate the texture with the objects contained in it (fig.
8).
The texture is then sub-divided and assigned to the
voxels in the same way as previously. Now, to obtain the
second texture corresponding to the objects contained in
the two most internal slices, we start this process with
the pixels of the first slice and project the objects of the
second slice on to the first, producing the final result in
the second texture (fig. 9).
The other textures are calculated in the same
incremental way: the third texture (if one exists) is
obtained by combining the second texture and the
projection of the geometric primitives contained in the
third slice, and so on (fig. 10). For each of the six
canonical directions, the calculus goes from the centre of
the scene to the exterior (fig. 4).

texture 2

slice 2

texture 1

Figure 9

texture 3

slice 3

Figure 10

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

texture 2

3.2.3 Change in Level Of Detail. Rather than creating
as many data structures as potential LODs, it is possible
to pass quickly from one LOD to another. To obtain
more detail, the approximate volume has to be reduced.
The required operation is an erosion, i.e. an elimination
of all voxels with at least one side and not in contact
with another voxel. The structuring element used is a
3x3x3 cube. The eliminated voxels are replaced by their
geometrical primitives (fig. 11, to the left). On the other
hand, morphological dilation leads to less detail. Nonempty voxels are added to those that are already present
(fig. 11, to the right). Note that this transition is not
smooth, but less visible at long range.
The first level is the original scene (fig. 11a), with all
of its geometric primitives. The last level corresponds to
the whole scene simplified by textured voxels (fig. 11d).

945 faces
1481 voxels
945 surfels

41980
faces
883 voxels
631 surfels

102921
faces
485 voxels
397 surfels
(a)

(b)

(c)

(d)

representation hierarchy

166361
faces
214 voxels
225 surfels

Figure 11

4 Results
We will now demonstrate our new method with the
final results for a medium-sized scene (218236 faces): a
tree with a root, branches, fruits and sparse leaves (fig.
12). They are quantified by the number of facets to
display, making the distinction between facets of objects
and textured surfels. Decimation techniques and precalculated picture based techniques are generally not
effective for this kind of scene as the objects appear
over-simplified at short range.
The figure 12 (a) illustrates the different
representations of the scene, starting with less precision
and increasing from the top down. The bounding box
decomposition in voxels is based on a 16x16x16
resolution, i.e. 4096 potential voxels, using only 1481
not empty voxels. Textures on surfels have a 16x16
pixels resolution.
The column (b) shows the evolution of the structure
representing the object core, depending on the desired
precision. Dots represent voxels replaced by the
geometric primitives they contain.

204719
faces
61 voxels
99 surfels

217177
faces
4 voxels
10 surfels

218236
faces
0 voxel
0 surfel
(a)

(b)
Figure 12

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

(c)

The table (c) gives the size of objects for these
different LODs. The total number of displayed facets,
surfels included, is indicated in the first line. In the
second line the bounding box size in voxels is given. To
finish, the third line shows the number of displayed
textured surfels.
The change of representation is instantaneous.
Texture projections and calculus have been produced
with the OpenGL graphics library.
Non tree-based scenes have also been tested with our
method. The results of our experiments show that our
method is not the more suitable in the case of a single
and simple object. When the number of objects
increases, with many hidden objects, our method
becomes more competitive. The following pictures
illustrate the rendering of a scene made up of 56430
polygons, at full and minimum accuracy (1430 textured
polygons).

The discreetisation value of the bounding volume, a
parameter influencing method effectiveness, still
requires user interaction. For future work, we shall
attempt to automatically determine an optimum
dicreetisation value depending on the range.

Keywords: image-based rendering, voxel, texture,
LODs

References
[1] P. Cignoni, C. Montani and R. Scopigno. “A Comparison
of Mesh Simplification Algorithms”, Computer & Graphics,
vol. 22, no. 1, pp. 37-54, 1998.
[2] J. Cohen, M. Olano and D. Manocha. “Appearance
Preserving Simplification”, Computer Graphics (Proc. ACM
Siggraph 98), vol 32, pp. 65-70, 1998.
[3] Taosong He and L. Hong and A. Kaufman and A.
Varshney
and
S.
Wang.
“Voxel-Based
Object
Simplification”, Proc. Visualization '95, IEEE Comput. Soc.
Press, pp. 296-303, 1995.
[4] Paul Heckbert and Michael Garland, “Survey of polygonal
Surface Simplification Algorithms”, Multiresolution Surface
Modeling Course Notes, ACM SIGGRAPH, 1997.
[5] P. Lindstrom and G. Turk. “Image-Driven Simplification”,
ACM Trans. Graphics, vol. 19, no. 3, pp.204-241, July 2000.
[6] David Luebke. “A Survey of Polygonal Simplification
Algorithms”, UNC Technical Report TR97-045, University
of North Carolina at Chapel Hill, 1997.

Result of simplification on an office scene

[7] David Luebke. “A Developer’s Survey of Polygonal
Simplification Algorithms”, IEEE CGA, vol. 21, no. 3, pp.
24-35, May/June 2001.

Figure 13

5 Conclusion and future work
This document describes a new method for object
simplification with the aim of speeding up screen
display. This simplification is based on the breaking
down of the objects in two complementary parts with
adaptable proportions. One covers the exterior of the
object, which generally contributes the most to its
appearance. The other covers the interior, which is often
invisible from a certain range, or not clearly visible. This
has the advantage of showing both extensive details on
the boundary and less detail in the core of the object.
This method has many advantages, such as the
production of several LODs, and can adapt to any kind
of object modelling. It provides beneficial visual and
speed results and considerable gains for highly complex
scenes. Moreover, our method can be combined with
other simplification methods like decimation. It should
be easily extended to take account of observation
direction, like microfacet billboarding [12]. One
drawback is that the transition between two LODs isn’t
smooth.

[8] P. Maciel and P. Shirley, “Visual Navigation of Large
Environments Using Textured Clusters”, Symposium on
Interactive 3D Graphics'95, pp. 95-102, 1995.
[9] E. Puppo and R. Scopigno. “Simplification, LOD, and
Multiresolution-Principles and Applications”, tech. report
C97-12, National Research Council of Italy, Pisa, Italy,
1997.
[10] Jarek Rossignac and Paul Borrel. “Multi-resolution 3D
approximations for rendering complex scenes”, Modeling in
Computer Graphics: Methods and Applications, Editors B.
Falcidieno and T. Kunii, Berlin, Springer-Verlag, pp. 455465, 1993.
[11] W. Schroeder, J. Zarge and W. Lorenson. “Decimation of
Triangle Meshe”, Computer Graphics (Proc. ACM Siggraph
92), vol 26, pp. 115-122, 1992.
[12] S. Yamazaki, R. Sagawa, H. Kawasaki, K. Ikeuchi and M.
Sakauchi.
“Microfacet
Billboarding”,
Thirteenth
Eurographics Workshop on Rendering, pp. 169-179, 2002.

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

