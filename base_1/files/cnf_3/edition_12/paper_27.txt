A Virtual Lab-notebook for Multidimensional Microscope Images
P.J. Boon, N. EminoviC, A. de Vos, B. Buitendijk,
E.J. van Raaij, M.J. den Broeder, W. J. Hage,
and F. J. Verbeek
NZOB Hubrecht Laboratory
Uppsalalaan 8, 3504 CT Utrecht, Netherlands
boon @niob.knaw.nl

Abstract
This paper discusses the use of XML as an
intermediate format for storage of information on
microscope images and the different techniques to
visualize this information. In this manner we have
explored XML and build several applications for image
management. The XML-files generated by these
applications are defined as the lab-notebook. A crucial
feature of such lab-notebook stored in XML is that it
directly relates to the Internet so that a modern webbrowser can be used to present the data in a user-friendly
manner. We will discuss how we used XSL and Java
applets to accomplish this.

1. Introduction
This paper discusses the use of extensible markup
language (XML) [l] as an intermediate format for
information storage and the different techniques to
visualize the information stored in XML files. We focus
on microscope image data and these are (1) images of
separate biological experiments, (2) images that are
coherent in time (time lapse) and (3) images that are
coherent in space, viz. three dimensional (3D)
reconstructions. The latter case is the most complex
because it represents a true volumetric representation and
includes graphics as well as images [3,4,6,7].
The applications of X M L that we discuss here are
related to image acquisition, which requires a well-kept
administration. Not only the images need to be stored, but
also data that are related to the images i.e. the imaging
conditions as well as experiment-specific data and other
application-defined meta-data.
The application of XML for the storage of such data
can be best described as a lab-notebook; it assures all
relevant data are stored in a structured manner and as we
will show excellent facilities for viewing of and
interacting with the data are available. A crucial feature of

such lab-notebook is portability and here we touch the
elegance of the appropriateness of XML; it directly relates
to the Internet so that a modern web-browser can be used
to visualize the data. Our XML data structures were, at
first, standardized and made compatible with our Intranet
structure. We will explain how extensible style language
(XSL) and Java applets are employed to accomplish
Interhntranet accessibility of these data structures.
The other main motivation for the implementation of
XML is the necessity to have all relevant data available at
the time of processing the images. With this lab notebookapproach deficient data for a proper image processing task
can be avoided.
At the Hubrecht Laboratory images are a main vehicle
to convey experimental results [7]. It is therefore an
excellent environment to incubate the implementation of a
lab-notebook. In all cases discussed here the ‘labnotebook XML’ is generated by software applications
developed at the laboratory.
De facto, the XML format structures the data and this
could have been realized with a relational database.
However, we produce single instantiations, e.g. one 3D
reconstruction, of coherent biological data that make
sense in a dedicated database. This is specifically the case
for the application of the production of a 3D digital atlas
of the zebrafish embryo [5] in which all-individual
instantiations are exported to an Informix database
(Informix Dynamic Server). The XML files are in itself
databases but do not include/facilitate a database
management system (DBMS) therefore tools to visualize
relations between the data need to be developed and to
that end we use the XSL andor Java technology.
The image acquisition for the production of 3Dreconstructions from serial sections is at the beginning of
a sequence of image processing [2, 31 and graphical
annotation operations, and the structured data is to be used
directly in the software. Here the relation between the
subsequent images is important for the further processing;
most data are generated automatically and only indication
of flaws in the image is added as an annotation so that it
can be taken into account in the further processing. In

187
0-7695-0743-3/00$10.00 0 2000 IEEE

section 3 the analysis of the XML structure and
visualization of these data is described.
Image acquisition with no explicit (spatial) relation
between the subsequent images requires the generation of
a complete description of the data. The end-user will
regard the notes of each session as integral part of their
experiments and integrate the electronic lab-notebook in
their daily practice; images and data will be exported to
desktop applications in preparation of scientific reports,
presentations and papers. This application will be
described in section 3.1.

the anatomical structures (annotations) which can be
described by contours, volume enumerations or triangles
[6].Here, for simplicity we have restricted to the contours
and in the XML-file a contour element refers to a binary
file containing an efficiently coded contour description

181.

3. Exploring the lab-notebook
Visualization and interaction with the XML data can be
accomplished by using ‘web-technology’. The techniques
investigated in the following sections are such webtechnologies, namely stylesheets and Java applets.

2. Using XML for storing the lab-notebook
The XML specification provides a standard way to use
markup for structuring documents. Using XML for the file
format makes the data portable and extensible. The
advantages of having platform-independent data are
obvious; it’s easier to process and view the data on
different platforms because there is no need for
conversion. XML also makes it possible to extend the data
format by adding new markup, without corrupting the
programs that process the data. This extensibility enables
the data format to gradually evolve over time, as new
insight demands additional data descriptors.
Another, very important, quality of XML is that it has
become a widely accepted standard for data storage. In
other words, database support is available (importlexport
into/from a DBMS) and there is no need to develop
general-purpose tools like XML-editors and XML-parsers
as these are available at low cost if not for free. All these
aspects are favorable for the development of applications
that process XML, resulting in earlier released and more
reliable applications which is of course also advantageous
for users of these applications.
By defining specific ‘XML-elements’ and their
‘attributes’ we have specified a file-format that enables us
to store the data for certain types of image series. These
definitions are written down in a document type definition
(DTD). This not only serves a documentation purpose, but
can also be used for validation of the XML files.
The basic concept being used in designing the fileformat is that of XML being the glue that binds together
the resources and not to store all information directly in
the XML-file. Instead large data ‘chunks’ that are
typically stored binary are kept in separate files. As is the
common practice with HTML, images are stored in
‘standard’ image file formats and the XML-file contains
references to these image files. The same imagereferencing markup tag used by HTML is being used in
the Xh4L file, so non-XML-capable browsers will just
show all images. The lab-notebooks generally contain
references to images. The XML file (lab-notebook) for
3D-reconstruction data also contains information about

3.1. Stylesheets
One of the concepts XML ‘inherited’ from standard
generalized markup language (SGML) is to separate
document content from the visualization instructions,
which are specified by a stylesheet, i.e. XSL. This is an
XML-based stylesheet language for ‘translating’ XML
documents and by using XSL, HTML web pages can be
generated that present the information in a conveniently
arranged manner. The most straightforward approach to
accomplish this would be to convert all XML data at once
to a static web page. Instead, a different approach will
result in a page with interactive functionality. XSL is still
used to translate the XML file ‘on the fly’ to a web page
and also inserts JavaScript code. At translation not all
XML data are converted. This is however accomplished at
execution of JavaScript, initiated by a user interaction.
The resulting web page can therefore dynamically change
the page layout and content on user request. This
approach has the advantage that opening the XML file
results in automated start-up of the browser displaying a
dynamic HTML page.
The application of this technique to a lab-notebook for
visual documentation of experiments is illustrated in
Figure 1. The web page presents general information on a
whole series of images and only a single image with its
related ‘settings’. Instead of showing all information at
once, navigation buttons can be used to browse the
acquired images and their settings.
Figure 2 shows an example of the content of a 3D
reconstruction visualized with a stylesheet. In this labnotebook application the contours cannot be drawn
because the file containing the contour data cannot be
accessed by a method incorporated in the browser. If the
contour data would be embedded in the XML file, vector
markup language (VML, www.w3.org/TR/NOTE-VML)
could be invoked to draw the contours on top of the
images.

188

annotated structures. In terms of web publishing it is now
relatively simple to combine the 2D browsing depicted in
Figure 2 with the 3D rendering as depicted in Figure 3 in
a single web page.

Figure 1. A stylesheet generated web page for an image
series. The page has been divided into three sections. The
top section displays general information about the image
series. The bottom section contains buttons that facilitate
looking through the collection of images. The image
selected is shown in the middle section together with the
microscope and camera-settings used when acquiring the

Figure 3. VRML views of a 3D-reconstruction, (a) the contour
stack, (b) the pseudo-solid model.

3.1. Java applets
Figure 2. A web page for 3D-reconstruction data generated
with a stylesheet., displaying information about the object
being serial sectioned (top left), the section images (bottom
right) and the biological structures (bottom left). Note that
the colors of the biological structures correspond with the
colors of the contours in Figure 3.

In order to overcome limitations imposed by the
browser and to be able to access binary files in a
transparent and portable manner, Java applets could be
used. Java applets are programs, implemented with the
Java programming language, which can be executed by a
web-browser. A Java based parser library for XML is
used to construct applets that can understand and process
XML data. So without having to redefine our 3Dreconstruction lab-notebook (XML-file) a Java applet is
implemented that provides the means to browse the
section images [3] as well as visualizing the graphical

VRh4L is the web vehicle for 3D modeling. Therefore,
we have included in our annotation software [4, 61 a
facility for exporting the 3D models in VRML. Figure 3
depicts interactive three-dimensional views of the

189

annotations by superimposing contours on the images. It is
also possible to add new information, for instance by
enabling the user to draw new contours and to store these
into a remotely accessible database.

Stylesheets and applets are both useful for visualization
and interaction, but they have different specific
advantages. Because of the browsers build-in functionality
used by the stylesheet, it is much easier to present the data
using a stylesheet than to use a general-purpose
programming language, for simply visualizing the XML
content. Possibly, user friendly stylesheet editors will
emerge that can be used in the same fashion as HTML
editors are being used right now. In this manner
researchers would be able to change the look of their
experimental results. Another advantage of using
stylesheets is that the browser integrates very well with the
operating system. Tables and images can be copied to
other applications and the web-page content can be
printed. However, a disadvantage is that, as we speak not
all browsers support Xh4L and XSL for publication of the
information on the Internet. This drawback is overcome
by using Java Applets. Java applets will, in principle,
work on all platforms with modern browsers and
development environments are available. With these
environments larger and more complicated programs can
be implemented because sophisticated tools for software
development are provided. Therefore, by default a
stylesheet is provided with our XML, so that the majority
of people can easily inspect their data, and when more
complicated interaction with the data is required Java
applets are being used.

Figure 4. The zebrafish-atlas review applet. Showing the
contours overlaid on the section images of a 3Dreconstruction and input fields for generating comments
and corrections.

Acknowledgements

An example of such applet is the zebrafish-atlas review
applet depicted in Figure 4. The ‘atlas database’ (cf. $1.)
contains 3D-reconstructions of zebrafish embryos of
different stages of development. It is intended for
researchers who want to compare their own results with
data in the atlas. To achieve consensus about the graphical
annotations of anatomical domains the atlas data need to
be reviewed. The applet facilitates this review process by
giving reviewers access to the data and allow them to
generate comments and corrections. An extension of the
applet will be a display of a 3D-model of the contour
stack and/or triangulation [ 6 ] , using a Java library for 3Drendering. This will enable the reviewers to get a better
insight into the three-dimensional aspects of the
annotations.

This work has been partially supported by ALW-STW
(Netherlands’ Organization for Scientific Research),
SURF-IWI (Netherlands’ Organization for University
Computing Facilities, appl. Innovative Scientific
Information) and the educational program of Informix Inc.

References
[ll Elston, A., D. Duckett, and P. Jones, XML
Applications, Wrox Press, Birmingham UK, 1998.

[2] van Raaij, E.J., P.J. Boon, J.B.A. Maintz, and F.J.
Verbeek, “Composition of high resolution image mosaics
for 3D reconstruction from serial sections”; In Biomedical
Image Registration. F. PernuS, S . KovaEiE, H.S. Stiehl,
and M.A. Viergever, eds., Slovenian Pattern Recognition
Society, Ljubljana, 1999, pp. 262-271.

4. Conclusions
We have discussed several lab-notebook applications
and shown that using XML for storing the lab-notebook
allows easy exchange, processing and visualization of the
experiment data. The applications, scripts and applets that
we have developed for routine use illustrate this. This is
valid for 3D-reconstruction data as well as in general for
experiment data with image series and annotations.

[3] F.J. Verbeek, “Theory & Practice of 3Dreconstructions from serial Sections”. In Image
Processing, A Practical Approach. R.A. Baldock and J.
Graham, eds., Oxford University Press, Oxford, 1999, pp.
153-195.

190

[4] F.J. Verbeek, M.M. de Groot, D.P. Huijsmans, W.H.
Lamers, and I.T. Young, “3D BASE: A geometrical
database system for the analysis and visualisation of 3D
shapes obtained from parallel serial sections including
three
different
geometrical
representations”.
Computerised Medical Imaging and Graphics 17, 1993,
pp. 151-163.
[ 5 ] F.J. Verbeek, M.J. den Broeder, P.J. Boon, B.
Buitendijk, E. Doerry, E.J. van Raaij, and D. Zivkovic, “A
standard atlas of zebrafish embryonic development for
projection of experimental data”, In Proceedirzgs of SPlE
3964, 2000,242-252.

[6] F.J. Verbeek, and D.P. Huijsmans, “A Graphical
database for 3D reconstruction supporting 4 different
Geometrical Representations”, In Medical Image
Databases. S.T.C. Wong, ed., Kluwer ‘Academic
Publishers, Boston, 1998, pp. 117-144.

[7] F.J. Verbeek, K.A. Lawson, and J.B.L. Bard,
“Developmental BioInformatics: linking genetic data to
virtual embryos”, Int. J. Dev. Biol. 43, 1999, pp 761-771.
[8] F. J. Verbeek, D. P. Huismans, R. W. A. M. Baeten,
C. M. Schoutsen, and W. H. Lamers, “Design and
implementation of a program for 3D-reconstruction from
serial sections; a data-driven approach”, Microscopy
Research arid Teclirzique 30, 1995, pp. 496-512.

191

