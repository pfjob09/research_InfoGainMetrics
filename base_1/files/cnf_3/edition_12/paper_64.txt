A Language-Based Framework for a Form Processor
Buthayna Eilouti
Emanuel-George Vakal f
Taubman College of Architecture and Urban Planning
The University of Michigan
(buthayna Iegvakalo} @umich.edu

Abstract
Based on the analogy of architectural composition as a
formal language, a form processor is developed and
tested. The proposed processor addresses a universal
language of architectural form. It aims to facilitate the
manipulation of forms in a manner similar to that in
which a word processor manipulates words in natural
languages. Based on the ontological assumption of
structuralism, epistemological assumption of rationality,
and the methodological assumption of representation, the
research described in this paper ident$es the
rudimentary elements underlying all architectural forms,
and the steps needed to aggregate them into more
complex compositions. The theoretical foundation of the
form processor employs concepts of formal languages,
the theory of reduction, and Aristotle's theory of animal
shape variation. More specijically, this paper discusses a
form language that is based on the concepts of contextfree and attributed grammars. It presents the
development of a computational framework, the goal of
which is to test the plausibility of the theoretical one. In
turn, the computational framework is tested and
illustrated by a case study.

The Theoretical Foundation of the Form Processor
The foundation of the framework of the
proposed form processor consists of three major theories.
The first is the theory of reduction. This theory states that
a problem can be solved by transforming it into some
other problem whose solution is already known. The
second is Aristotle's theory of animal creation. According
to this theory, an animal is a functional assembly of
certain essential classes of organs. For each class there are
multiple alternatives. The combination of an instance of
each class yields the immense diversity of animals
(Mitchell: 1994). The third is based on the concepts of
formal languages. More specifically, two concepts are
adopted and developed. The first is the concept of
replacement as applied in context-free grammar. This
concept allows one to change the syntactic structure of a
sentence by replacing a lexical element with another from

the same syntactic category. The second concept involves
the addition of conditional statements to interpret the
application of context-free rules. This concept is
developed from syntax-directed definition or attributed
grammar.

Assumptions Underlying the Framework of the Form
Processor
The assumptions underlying this research can be
classified
into
three
categories:
ontological,
epistemological, and methodological. The ontological
assumption is structuralism. Structuralism is based on the
assumption that all physical objects can be grouped into
systems. Such systems can be defined in terms of each
other, or recursively. Structuralism provides a critical
basis for the analysis of the relations among groups of
objects, especially those whose members are structural
transformations of one another. The structural view
underlying the form processor assumes that while
buildings are individual products, there exists general
laws that apply to all of them, and elements that constitute
all of them. These laws are expressed as grammatical
rules, and the elements as alphabets.
The epistemological assumption underlying the
proposed framework is that knowledge about
architectural form-making is acquired largely through
rational process. It is possible to identify two major types
of reasoning. The first is analytic, and the second is
synthetic. Within these two types, the American
philosopher Pierce defined three modes of inference:
deductive, inductive, and abductive. Deductive inference
is one mode of analytic reasoning. Inductive and
abductive are two modes of synthetic reasoning. The
proposed form processor describes the composition and
decomposition of
architectural terminals. The
composition process is an outcome of abductive
reasoning. Decomposition is an outcome of deductive
reasoning. The evaluation of composition is an outcome
of inductive reasoning.
The methodological assumption underlying the
proposed framework is that knowledge about forms can
be gained and enhanced by representational models that

42 1
0-7695-0743-3100 $10.00 0 2000 lEEE

vocabulary of this level consists of straight horizontal and
vertical lines. They function as input for the constructive
rules. The output is a set of rectangles that constitute a
construction grid.
Rules of the constructive level are:
C1:This rule defines the proportion of the initial
shape. It replaces a unit square, whose center is located at
O,O,O point in space with a rectangle located at any point
in space.
C2: This rule produces the construction grid €or
a labeled shape. A rectangle is labeled by two points
highlighting two of its opposite comers. It requires three
data items. These are denoted as: D, N, P, where:
D: line direction. It can be replaced by one of
two options: H: horizontal line, or V: vertical line. N:
number of lines. P: ratios determining line placement.
C3: The function of this rule is to remove labels.
It terminates the replacement process.
The constructive rules are shown in Figure 2.

describe building forms. These include developing
constructive representational linguistic, and computerized
models. The models developed here are represented as
graphic cells as well as coded commands that activate
grammatical rules.

The Theoretical Framework of the Form Processor
The form processor presented in this paper is
based on a form language that is defined at three levels.
These are the constructive, the spatial, and the
architectural. At the constructive level, the basic
construction lines are positioned. Construction grids are
the result of this stage. At this level, rectangles represent
architectural spaces. At the spatial level, each cell in the
constructive level is translated into a parametric solid. At
the architectural level, each solid is viewed as a device for
defining basic architectural elements. The assumption
made here is that every architectural space is defined by a
subset of elements that are shared by all architectural
artifacts. These include: roofs, walls, columns, beams,
windows, doors, floors, and pediments. A solid in the
spatial level is considered as a combination of a top
surface, side surfaces, and a bottom surface. The top
surface is expected to be substituted by some kind of a
roof. The side surfaces are expected to be substituted by
walls, columns, some lateral elements (such as pediments,
beams,. ..), openings (windows, and doors). The bottom
surface is expected to be substituted by a floor slab.
Creating architectural artifacts involves using different
alternatives of each category of these (Figure 1 .)
The proposed form language consists of a set of
vocabulary elements and a set of rules for each level. The
output of each level forms the input of the next. The main
function of the rules is to process the input vocabulary
into output between the levels.

C1.

C2:

c3

Figure 2: Rules of the constructive level

The Spatial Level
The input vocabulary of this level is a parametric
rectangle. The output of the spatial rule application is a
cuboid.
Rules of the spatial level:
SI: This rule replaces a labeled rectangle by a
cuboid. It uses the same width and length of the input
rectangle, and prompts the user for a height (Figure 3 ) .

Figure 3: Rule S1 of the spatial level

The Architectural Level
The input vocabulary of this level is a cuboid.
The output includes: wall, roof, floor, pediment, beam,
column, and opening.

Figure 1: The representation of an architectural
object as an assembly of basic components

The Constructive Level

Rules of the Architectural Level:
Rules of this level replace a highlighted side of a
cuboid with an architectural element. The replacement is

For simplicity, the scope of this version of the
form processor is limited to orthogonal layouts. Thus, the

422

either by addition or subtraction. Elements processed by
the former operation include: walls, roofs, floors,
columns, beams, and pediments. Elements involved in the
latter are doors, windows, skylights, and any other floor
openings.
Rules of the architectural level can be further
classified, according to their geometric level, into point,
line, and plane levels. Accordingly, architectural rules can
be refined into: architectural joint replacement (Figure 4),
replacement of a line with a column, or a beam (Figure
5 ) , and plane replacement with a wall, floor, roof,
pediment, or opening (Figure 6).

range for users to develop the spatial layout of their
designs. Such an extension may continue until it reaches a
comprehensive database of architectural forms.

The Computational
Processor

Framework of

the

Form

To test the explanatory and descriptive power of
the theoretical framework discussed in the previous
sections, a computational framework is formulated. The
computational framework consists of a subset of the
vocabulary elements of the three levels of the
composition language. This subset explains the
morphological structure of orthogonal buildings. The
computational framework consists of a constructive, a
spatial , and an architectural stage. The lexical structure
of the constructive stage is composed of a parametric
rectangle. The outcome of this level is a construction grid
that represents the abstracted morphological structure of
an orthogonal building. Each cell in the constructive level
is transformed into a cuboid at the spatial level. As such,
the input for the spatial level is the construction grid
produced by the constructive level, and the output is a
spatial configuration for the given building. At the
architectural level, elements are inserted into the spatial
organization. As such, the input for the architectural level
is a spatial configuration of a building, and the output is
an architectural articulation for its spaces. In this version
of the computational framework, the set of architectural
elements is represented by columns, floors, roofs, beams,
pediments, openings, and walls. Additional components
may be added in later versions as needed. The
computational framework is translated into AutoLISP
code. It is called FormPro 1.0.

Figure 4: Architectural rule for point replacement
with a joint

Figure 5: Architectural rule for the replacement

The User-Interfaceof FormPro 1.0
The user-interface of the FormPro 1.O consists of
four major components: Pull-Down Menus, Toolbars,
Drawing Display Area, and Command Area. The drawing
display area occupies the major space of the screen. It
displays the graphical representation that results from
command activation and execution. The command area
displays the user key input as well as the coded prompts
for the user. The pull-down menus and toolbars include
commands for the constructive, spatial, and architectural
derivative rules. In addition, they include commands for
analytical functions (Figure 7).
Architectural components in each category (e.g.
window, door, and roof) can be replaced by other
equivalent entities that belong to different styles. The
selection set of the stylistic variation of architectural
terminals is shown in Figure 8.

of a line with a column or beam
Figure 6: Architectural rule for the replacement
of a plane with a wall, floor, roof, pediment, or
opening
These three sets of rules can be used to derive
and analyze any 3D orthogonal form. Extending each
category in the architectural level widens the selection

423

FormPro 1.0. The process starts with describing the
overall layout. Then, the layout of each subdivision
follows. The rules used to generate the initial construction
grid of the Udene house are shown in Figure 9.

c2:

Figure 7: An image of FormPro 1.O interface with
the architectural rules-plane-negative elements
level pull-down menu activated

H.2,(28/69,24/69 1

Figure 9: The starting rule application on the
Udene house
The application of the constructive rules sets the
major layout of the construction grid. Rule C1 is used to
assign values on the start rectangle. These are 66 * 69
units. Then, rule C2 can be used to divide the start
rectangle with the ratios: 17/66, 32/66, 17/66
horizontally, and 28/69, 24/69, 17/69 vertically as shown
in Figure 9.
The second stage of the constructive level is
shown in FigurelO. Rules at this stage divide the lower
middle rectangle equally in the X and Y directions with
ratios of 1/5.

c2:

Figure 8: The image menu in FormPro 1.0
A Case Study
In this section, the theoretical and the
computational frameworks described in the previous
sections are tested using the Udene House by Palladio
(1965: 39) as a case study. This case study is chosen
because it: (1) consists of a variety of architectural
components and styles, (2) its layout is based on an
orthogonal construction grid, which matches the scope of
this research, (3) the architectural components it consists
of are defined in the database of FormPro 1.O, and (4) it is
based on a proportional system that is developed from a
geometric scheme.

V.4,( 115 1

c2:

Figure 10: The second stage of the constructive
level in the Udene house
The third stage of the constructive level is shown
in Figure 11. Rules used at this stage divide the middle
rectangle horizontally into two rectangles. The lower with
the ratio: 32*13, and the upper: 32*11. The next step is to
divide the lower of the two new rectangles vertically into
three rectangles with the ratios: 8*12.5, 16 *12.5, and
8*12.5.

The Process of Deriving the Udene House Using
FormPro 1.0
The Constructive Level
Drawing the construction grid entails describing
the geometric layout of the house. Following are some
images of the graphic display of the implementation of

424

is replaced with architectural components that conform
with the drawings and the written description of the house
in Palladio’s “The Four Books of Architecture”.

c2:
V,2,(8/32,16/32)

...... ;. .

i..L*i--r.

Figure 11: The third stage of the constructive
level
The fourth stage of the constructive level is
shown in Figure 12. The rules used at this stage are C2:
divide the upper middle rectangle equally in the X
directions with ratios of 1/5. The final rule of the
constructive level in plan is C3, which removes the labels,
and terminates the processing at this level.

Figure 14: The architectural rules application on
one space in the Udene house
The rules defined in the architectural level may
also be applied to a set of selected construction points,
lines or planes in one step. For example, the columns
described by Palladio for this house are of the Ionic order.
So, the selection set of lines is replaced with Ionic
columns (Figure 15.)

c2

Figure 12: The fourth stage of the constructive
level
Figure 15: An image of the application of the
ionic column rule in the Udene house

The Spatial Level
The spatial rule S1 is applied for all major
spaces of the Udene house. It is repeated 7 times for the
ground floor. The height provided in the rule application
is 24. The result is shown in Figure 13.

The derivation process on the architectural level
moves from the replacement of lines with columns
(Figure 15), to the replacement of planes with walls and
windows (Figure 16). The derivation process may
continue to replace all planes with walls, windows, doors,
and pediments as needed.

Figure 13: The spatial rule application on the
Udene house

T.he Architectural Level
The architectural rules in FormPro 1.0 may be
applied on one space at a time. An example of this is
shown on Figure 14. In this example, the front left space

V

Figure 16: Planes replaced by walls and
windows in the Udene house

425

The Analysis of the Udene House:
In addition to the analytical layers impeded in
the derivation process itself, FormPro 1.0 provides its
user with the option of conducting several analytical
operations. These include recording the rules and ratios
used to derive a building, coordinates, side lengths,
perimeters, areas and volumes of architectural
components. The analytical commands of FormPro 1.0
also enable users to display the major axes used in a
drawing. In addition, a bubble diagram that corresponds
to the major spaces in a building can be displayed.
Finally, FormPro 1.0 stores a slide image for each step in
the process. This enables the user to watch a slide show
of the derivation process after it ends. An example of the
application of analytical commands is shown in Figure
17.

Figure 20: An imaginary front elevation of the
ground floor of the Udene house. Its
architectural components are replaced with
equivalent ones from the Moorish style.

Figure 21: An imaginary front elevation of the
ground floor of the Udene house. Its
architectural components are replaced with
equivalent ones from the Gothic style.

Conclusion
A theoretical framework for a form processor
was presented. It is based on a three-level language for
architectural composition. The theoretical framework is
translated into a computational one. It is formulated to
illustrate the concept and function of a form processor
that facilitates the derivation and analysis of architectural
forms. The version of the form processor presented in this
paper can be updated by the extension of its scope to
include non-orthogonal schemes, and by the addition of
cells from new styles to its database.

Figure 17: Major axes and bubble diagram of the
Udene house
In addition to the analytical capabilities of
FormPro 1.O, the program facilitates experimentation
with alternative building appearances. For example, it is
possible to display a beam and column structural skeleton
for the Udene house as shown in Figure 18. Similarly,
FormPro 1.0 facilitates examining how a basic spatial
configuration may appear using various stylistic
articulations. For example, the front facade of the Udene
house (Figure 19) is reproduced to test how it looks using
Moorish (Figure 20), and Gothic (Figure 21).

References
Caws, P., Structuralism: The Art of the Intelligible,
Humanities Press International Inc., Atlantic Highlands,
1988.
Feibleman, J. K., An lntroduction to the Philosophy of
Charles S. Pierce, MIT Press, Cambridge, 1970.
Harrison, M.A., lntroduction to Formal Language Theory,
Addison-Wesley Publishing Company, Massachusetts,
1978

Figure 18: An image of an imaginary column and
beam skeleton for the Udene house

Hopcroft, J. E., and Ullman, J. D., lntroduction to
Automata Theory, Languages, and Computation, Reading:
Addison-Welsley Publishing Company, Massachusetts,
1979.
Mitchell, W. J., “Artifact Grammars and Architectural
Invention,” in Automation Based Creative Design, A.
Tzonis, and I. White (Eds.), Elsevier Science B. V.,
Amsterdam, 1994, pp. 139-159.
Palladio, A., The Four Books of Architecture, Dover
Publications Inc., New York, 1965.

Figure 19: The front elevation of the ground floor
of the Udene house

426

