Design Visualization Based on a Machine Readable Physical Model
WANG Qianping, John FRAZER and TANG Mingxi
The Design Technology Research Centre, School of Design,
The Hong Kong Polytechnic University, Kowloon, Hong Kong SAR, PRC
(icqpwung,sdfruzecsdtung) @polyu.edu.hk
[ll]. Other systems with small building blocks or just
cubes were even more abstract [ 121, representing
construction elements which could be given more realism
by the visualisation software as appropriate. This
abstraction made the investment in the parts more
versatile and universal and of course, universal hardware
could always be ‘packaged’ realistically for a particular
application if that was appropriate, particularly when
using the technique to involve users and non-experts in
the design process.
The Universal Constructor (so named in deference to
von Neumann since it is a re-configurable 3D array
processor capable of self replication in a limited sense) is
an abstract embodiment of the intelligent physical
modelling system. The original system was constructed
by a group of students at the Architectural Association in
1990 as an experimental input/output device for their
experiments in generative and evolutionary design [ 131.
It was also a display device to show architecture as ‘logic
in space’ for exhibition purposes [ 141. A re-configurable
1 2 x 1 2 ~ 1 2array of stacked cubes were placed on a
baseboard each of which had an 8-bit hardwired
identifier code displayed by green LEDs in each acrylic
cube. The cubes could pass messages to neighbours by
vertical communication with the baseboard that
contained identical circuitry
but with lateral
communication. A cube could also acquire and display a
logical identifier different to the hardwired code. The
cubes could also display a red light as the universal
cross-cultural sign for soliciting user interaction.

Abstract
This paper describes recent work on mapping from
an abstract intelligent physical modelling system to a
virtual modelling environment f o r design visualization.
But the paper also addresses related questions: Why is
there a current revival of interest in these techniques?
What is diflerent now? Why use abstract representations?
What were these systems f o r in the first place? And, what
might be their new role in thejuture?

1. Background
There has been a recent worldwide revival of interest
in machine readable physical models that are rapidly reconfigurable spatial interaction devices for 3D
visualization input with an immediacy accessibility for
non experts [I]. Originally called ‘intelligent physical
modelling systems’ [2], or ‘construction kits’ [3j, they
are often now classified as ‘tangible user interfaces’ [4].
New systems have been developed by Mitsubishi [ 5 ] ,
Parc [ 6 ] , and Yoshifumi [71, with new applications
ranging from work with the blind in Alberta [8] through
MIT [9j to programming robots at the School of Design
of The Hong Kong Polytechnic University. We have
recently restored several systems developed from 1980 to
1990, and rebuilt two with new electronics.
This paper attempts to explain why there is a
renewed interest in this area and describes new software
approaches developed in preparation for new
miniaturized applications.
The original intention of machine readable physical
models was blindingly simple [2]. As an approach to
overcoming difficulties with three dimensional input,
simple construction kits were developed that used
embedded electronics and hardwired identifier codes to
deduce their own configuration and provide input to a
graphical display. The model iisually had some obvious
representational relationship !with the output such as
clearly identifiable components for doors, windows,
toilets employed for a device t o facilitate housing design
for self builders [IO], or the elements of architectural
construction for a project for the Gilman Corporation

0-7695-1195-3/01 $10.00 0 2001 IEICE

2. Design visualisation based on cubes
2.1 Cubes as design objects
The original Universal Constructor consisted of a
baseboard and cubes that can be manipulated directly by
a user, as illustrated in Figure I . Abstract cubes were
employed so that they could represent many different
classes of objects depending upon an individual student‘s
application. Obviously the cubes could represent
physical objects, such as columns, to which they could
be mapped in the visualisation software, but they were

665

usually employed at a higher level of abstraction to give
environmental information, generative instructions or
even dance positions [ 151. Whilst the subsequent
mapping of representational elements is trivial, some
explanations are needed for more abstract mapping
where elements might be ideas rather than things. This
has been frequently misunderstood by detractors from
the concept and is explained here for the first time.

applying the operators storied in it self to the object
cubes that fall into its context. Typical operators include
scaling, transformation, duplication etc. A context
defines which object cubes should be selected for the
application of which operators.

2.3 Specification of cubes for visualisation
We now present a specification of our visualisation
system. A generalised cube system is a quadruple:
Cube(C, P, L, R)
Where:
C is a finite, non-empty set of cube names,
P is a set of physical cube objects,
L is a set of logical cube objects,
R denotes the rule set for cube mapping,

Figure 1. The original Universal Constructor (1990)

2.2 Object cubes and operational cubes
A cube in our system consists of an object cube and
an operational cube. An object cube is a dual
representation, denoted as [C,, C,], in which C,is the
logical part (the meaning) and Cpis the physical part. A
mapping from physical part to logical part is illustrated
in Figure 2 .

Figure 3. Application of an operational cube to three
object cubes
The cube mapping rule set R specifies how to map
between physical and logical parts of a cube. For
example, Figure 3 shows a formal cube system

Here, rule rl specifies that cube c" has a logical part
(I,) and a physical part P?,~.Rule rz specifies that cube c'
has a logical part ( I , ) and a physical part P?,~.Rule r,
specifies that cube c' has a logical part (12) and a
physical part P?,~.Rule r, specifies that cube object CO, c'
and cz be combined to form a logical part (I,} and a
physical part, ( pz,7, pZlS,p2,,). Therefore, rule r, specifies
c', c1 and c- as the sub-objects of a complex object
(c'+cI+c2). Rule r, also specifies a complex object, with a

Figure 2. Mapping from physical part to logical part
An operational cube represents the intent of a user
when manipulating an object cube. For example, as
illustrated in Figure 3 in the next subsection, an
operational cube has a physical part in the model but it
has no logical meaning. It changes other object cubes by

666

logical part {I,), and a null physical part of its own. Its
physical part is derivable from (co+cI+c’). Rule r5
specifies an object c4, whose logical part is (I,}‘ and
physical part is p?”,.
means a duplication of {I,) by

Select and execute operators, and
Feedback operator.
The cube CIp and C’, can be combined by
superposition. At the same time the meaning C’, and C’,
becomes merged to form the new the meaning of the
resultant new configuration.
Contextual interpretation is achieved by considering
cube C’ in the context of cube C’, if the two cube C’ and
C’ have any relations. The new meaning depends upon
both C1 and C’. In the new cube object, the logical
meaning remains to be the C1,.,,Contextualinterpretation
can obviously incorporate a lot of additional attributes to
enhance a cube object.,
The cubes used in direct manipulation interfaces are
seen to be complex cube objects constructed from
elementary cubes using cube operators. The feedback
operator returns for the logical (physical) part C, (Cp) of
C, and returns a logical (physical) cube objects.
We can demonstrate that a wide range of
configuration tasks can be specified using our cube
definitions. This requires a complex use of both object
cubes and operational cubes.

4.

2.4 Cube classification
A complex object is composed of other objects in
the system to express a complex configuration [ 161. In
our system, cubes are classified as
0
Elementary cube. if C , n L is empty. In other words,
C, is a subset of L, so thai: C is of the form ( {1 c L},
cube). Here 1 denotes names of objects, or
procedures (including user-defined procedures), or
operators. So an elementary cube can be an object
cube, such as cube-237,cube-238 and cube-239 in
Figure 2.
Complex cube: if C , n L is not empty. A complex
cube object points to other cube objects and defines
the relations between ekmentary cubes. Complex
cubes are further divided ihto:
Composite cube: if C , n L is not empty. The cube
c is of the form (R, (;;I,. . .,c“),P) where c’ are the
physical or logical parts. of other cubes, and R
specifies an operator which operates on c’,.. .,c”
to create a new cub12 object. The inclusion of
cube operators in R gjves greater flexibility and
notational convenience in the specification of
the 310gical part of a composite cube. The
location attributes of a sub-cube object
determines the order in which these operators
are applied.
Structural cube: if C , n L is empty. The cube c is
of the form ( ( c ’ ,...,I;”], P). In other words, a
new cube .is relai-ed to c ’ ,...c”, but the
mechanism for composing it from c ’ ,...,c” is
unspecified.

3. Implementation
The re-implemented Universal Constructor in 2000
at the School of Design of The Hong Kong Polytechnic
University I S an 8 x 8 ~ 8array with smaller cubes, as
illustrated in Figure 4.

2.5 Cube operations
Cube-operators operate on generalised cubes and
change either their logical parts (the meaning) or
physical parts, or both. An essential characteristic of a
cube in our system is that its logical and physical parts
are mutually dependent. Therefore, as the physical part
of a cube is changed, so is its logical meaning, and vice
versa.
The usual add in and tclkt! of operations carried out
by a user can be regarded as physical cube operators.
There are several generic operators that can affect both
the meaning and the state of a cube:
0

Figure 4. A re-implementation (2000)
The re-implemented Universal Constructor is better
engineered being far more robust and easily handled. The
libraries of interrogation code and subsequent mapping
have been completely rethought, rationalised and
rewritten [ I ] .
The visualisation part of the system is implemented
in an ACIS solid modeling environment as well as an
OpenCL environment on Windows98. Figure 5 shows
the visualisation results of a simple transformation, and
Figure 6 shows a simulation of Cellular Automata using

Combination,
Contextual interpretation,

667

the new software. The advantage of using ACIS is that
any configuration generated by a user on the Universal
Constructor can be transformed into a form for rapid
prototyping. However, OpenGL is better for visual
effects that can be generated through transformation
rules embedded in the cubes.

as a driving device for programming a Legom-based
Logo Turtle. Two kinds of cubes, i.e., command cubes
and argument cubes, are considered. A user can place a
number of command cubes on the baseboard with up to 7
argument cubes being placed on any of the command
cube. A computer program interprets the meanings of
these command cubes and argument cubes into
executable programs to drive a Lego@-basedLogo Turtle.
Early testing results showed that even users with little
programming experience could comprehend Cub0
quickly to develop a structured formal description of
intended actions for the Legom-based Logo Turtle. This
is achieved largely due to the fact that Universal
Constructor is suitable for quick and flexible reconfigurations, as compared with a normal programming
exercise [ 181.

Fischer, Ceccato and Frazer are developing a new
haptic programming paradigm named Cubo at the
School of Design of The Hong Kong Polytechnic
University.
The Cub0 integrates Papert's Logo
environment [ 171 with the re-implemented Universal
Constructor in an attempt to find a strategy for the
implementation of the future computer enhanced
interactive systems and environments.
In this
application, the generic qualities and the abstract nature
of the Universal Constructor are further explored. In
Cubo the re-implemented Universal Constructor is used

Figure 5 . Cube mapping operations: colour and geometric transformations

Figure 6. Applying Cellular Automata to visualised cubes
In our cube-based environment, users interact
primarily by pointing at, manipulating and juxtaposing
cubes. The visual designs clarify the interrelations of
the domain objects and which interrelations becomes
the basis for the specification. The environment for
design specifications should then consist of a variety of
mappings for creating visual representations of design

components and their interrelations and operations, and
for
transforming
these
representations
into
specifications.

668

by Professor John Frazer and his research team at the
Architectural Association in London. The work
reported in this paper only focused on the visualisation
based on the re-implemented cubes.
This project is supported by an Area of Strategic
Development (ASD) project from the Hong Kong
Polytechnic University. The authors would like to
acknowledge The Industrial Centre of the Hong Kong
Polytechnic University for their support for the
construction of the new cubes. We would like to thank
Chris Ceccato, Thomas Fischer, Abel Chong and
Albert Wu of The Hong Kong Polytechnic University
for their input into this project.

4. Applications
Intelligent physical interfaces caused a flurry of
excitement in the 80s [19, 20, 21, 22, 23, 241 but
interest waned as higher speed processors and better
graphical interfaces provided convenient answers to
many of the problems of interaction addressed by the
original concept. So why is there a revival of interest
now?
One reason is the realisat ion that with ubiquitous
computing and pervasive embedded intelligence we
will have to forget the keyboard and the mouse. Whilst
voice input will sometimes suffice there will be many
applications for which verbal spatial instructions will
be inappropriate or unnatural.
A second reason is a world-wide revival of interest
in user participation in design [25], perhaps partly
stimulated by the expectations of re-configurable
environments and graphics exlperienced by every web
user. Applications for self-bui lders and building users
were important to us from the outset but we revived the
idea of physical interfaces for a project to involve the
citizens of Groningen in the future development of
their city [26, 271.
Third, Educational applications were always a
strong interest [28] but there has been renewed interest
here too. Fourthly there are new applications in areas
such as training for the blind and medical testing [8].
But fifth, the main new stimulus is the toy industry,
with its endless thirst for new electronic Ideas, which
has suddenly realized the potential of this technique
with its immediacy for the games market. The context
of virtual environments has also provided the
opportunity for dramatic demonstrations of the
convergence of the virtual and the actual. And finally
the miracles of online searching have resulted in a
rediscovery of the original 80’s papers [4,5].

7. References
R. Aish, J. Frankel, J. Frazer, A. Patera, J. Marks,
“Computational Construction Kits for Geometric
Modelling and Design”, Panel Discussion, 2001
Symposium on lnieructive Computer Graphics,
Proceedings of ACM SIGGRAPH, 200 I , pp: 125-128
J.H., J.M., P.A. Frazer, “Intelligent Physical ThreeDimensional Modelling System”, Computer Gruphics
80 Conference, Conference Proceedings, Online
Publications 1980, pp: 359-370.
R. Aish, “3D input for CAAC systems”, ComputerAided Design, 1 1(2), pp:66-70, Mar. 1979.
B. Ullmer, and H. Ishii, “The MetaDesk: Models and
Prototypes for Tangible User Interface”, Proceedings of
UIST’97, 1997, pp:l-lO.
D. Anderson, J. L. Frankel, J. Marks, A. Agarwala, P.
Bearsley, J. Hodgins, D. Leigh, K. Ryall, E. Sullivan and
J. S. Yedidia, “Tangible interaction + graphical
interpretation: a new approach to 3D modeling”,
Proceedings of ilie conference oti Cornpiiter graphics,
2000, ~~1393-402.
M. Yim, D. G. Duff, K. D. Roufas. “PolyBot:a Modular
Reconfigurable Robot”, IEEE Inil. Con$ on Robotics
and Automaiion (ICRA)2000.
Yoshifumi Kitamura, Yuichi Itoh, Toshihiro Masaki,
Fumio Kishino, “Activecube: A Bidirectional User
Interface using Cubes”, Proceedings of 4”’International
Conference on Knowledge-based Inielligent Engineering
System & Allied Technologies, 2000, pp:99- 102.
S. Sutphen, E. Sharlin, B. Watson, J. H. Frazer,
“Reviving a Tangible Interface Affording 3D Spatial
Interaction”, Western Compuier Gruphics Symposium
2000, 2000, pp:155-165.
H. Ishii, and B. Ullmer, “Tangible Bits: Towards
Seamless Interfaces between People, Bits and Atoms”,
Proceedinm
” of
” CH1’97. 1997. DD: 234-241.
[ I O ] J. H. Frazer, “Use of Simplified Three-Dimensional
Computer Input Devices to Encourage Public
Participation in Design”, Computer Aided Design 82,
conference proceedings, 1982, pp: 143-5I .
[ 1 I ] J. Greig, “Celebrating the Cerebral”, Building Design,
May, 1988 supplement.
[I21 J.H., J.M., P.A. Frazer, “New Developments in
Intelligent Modelling”, Computer Graphics 81,

5. Conclusions
Products are no longer thought of in isolation.
They are part of the interactive experience of using
systems and services. But how will this interaction be
interfaced? Machine readabll: physical models or
intelligent physical devices gike one possible clue and
hence the current revival of interest. But will this
revival be yet another short-lived fad, or will intelligent
physical interfaces be part cd our future end user
interaction?

1.

6. Acknowledgements
The original Universal Constriuctor was developed in
1990 as a new programmable virtual-physical interface

669

[20] R. Sarson, “It’s Coming: Intelligent Lego”, Computer
Talk, 14 January, 1985.
[21] W. S . Elliott, “Critical Technologies contributing to
CADICAM”, Symposium on trends in CAD/CAM. Nice,
September 1981.
[22] B. Reffin-Smith, “Away with Paper”, Practical
Computing, July 1982.
[23] B. Evans, “Intelligent Building Blocks”, Architects
Joumal, January 1985, pp:47-54.
[24] H. Pearman, “Computer Aided Living”, Design,
September 1985, pp:48-49.
[25] J.H. Frazer, “The Co-operative Evolution of Buildings
and Cities”, First International Workshop, CoBuild’98,
1998, pp:130-141.
[26] J.H. Frazer, “The Groningen Experiment”, in Ed.
Johnston, P.,Projects Review 1995-96, The Architectural
Association School of Architecture, July 1996, pp: 108111.
[27] J.H. Frazer, “The Groningen Experiment: Global CoOperation in the Electronic Evolution of Cities”,
Proceedings of CAADRIA ’97, 1997, pp:345-353.
[28] S. Brown, “Computer-Aided Learning Support for
Environmental Design Students”, Proceedings of the
Human Factors Society, 1987, pp: 889-93.

conference proceedings, Online Publications 1981, pp:

139-54.
[ 131 J.H. Frazer, J.M. Frazer, “The Universal Constructor
Diploma Unit 14”, Projects Review 1989-90,
Architectural Association 1990.
[I41 J.H. Frazer, “Data Structures for Rule-Based and
Genetic Design” in T.L. Kunii, Ed. Visual Computing Integrating Computer Graphics with Computer Vision,

Springer-Verlag, Tokyo 1992, pp:73 1-744.
[ 1.51 J.H. Frazer, An Evolutionaty Architecture, Architectural

Association, London 1995.
[16] Shi-Kuo Chang, editor. Principles of Visual
programming system, Prentice Hall, New Jersey, 1990.
[ 171 S. Papert, “Basic Books”, Mindstorms: Children,
Computers and Powerful Ideas, New York, 1980.
[I81 T. Fischer, C. Ceccato, J. H. Frazer, “Haptic
Programming with Cubo”, to be published in Burry
Mark et a1 (eds.) Proceedings of 3“ International
Conference on Mathematics & Design: Mind, Ear; Eye,
Hand, School of Architecture and Building, Deakin

University, Geelong, Australia, 2001.
[19] J . Lansdown, “Graphical Input and Digitizing
Techniques: a Review”, Computer Graphics 81, Online
1981.

670

