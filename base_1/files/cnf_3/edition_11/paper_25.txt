Thinning Arabic Characters for Feature Extraction
Dr John Cowell
Dept. of Computer Science,
De Monrfort University,
The Gateway, Leicester, LEI 9BH
England.
jcowellf&imu.ac. uk

Dr Fiaz Hussain
School oflnformation Technology,
Dubai Polytechnic,
PO Box 1457, Dubai,
UnitedArab Emirates (UAE).
fhus,rait&du baimlvteciinic.com
reading postal or zip codes on letters or reading
vehicle licence plates as part of traffic control systems
is still a subject for research. Details of the
techniques used in commercial recognition systems
are usually not available in the public domain as they
form part of the products of companies, however the
techniques used are widely known. Such systems are
usually based on feature extraction techniques,
counting features such as the number of strokes which
make up the character, the curvature of the strokes
and the number of holes. This approach readily
organises the Latin characters into groups with similar
characteristics. Ad-hoc tests can then be used to
differentiate between the characters in each group.
The tests tend to be very specific for the characters
concerned. Recognition systems for the Latin
characters, for example, do not consider the number
or position of dots, which is crucial in the Arabic
case. The techniques used are often sensitive to
variations in the orientation of the characters, do not
deal with poor quality characters with ragged edges
and are not readily transferable to other character sets
such as Arabic and Urdu. The calligraphic nature of
these character sets means that the approach used for
Latin characters is not directly transferable. A
recognition system which can deal with a variety of
poor quality characters from the Arabic, Latin and
other character sets must use an altemative approach.

Abstract
A successful approach to the recognition of Latin
characters is to extract fiatures from that character
such as the number of strokes, stroke intersections
and holes, and to use ad-hoc tests to diflerentiate
between characters which have similarfeatures. The
first stage in this process ib to produce thinned 1pixel
thick representations of the characters to simplifi
feature extraction. This approach works well with
printed Latin characters which are of high quality.
With poor quality characters, however, the thinning
process itself is not, straighrfonvard and can
introduce errors which clre manfested in the later
stages of the recognition process. The recognition of
poor quality Arabic characters is a particular
problem since the chara(5tet-sare calligraphic with
printed characters having widely varying stroke
thicknesses to simulate the drawing of the character
with a calligraphy pen or brush. This paper
describes the problems encountered when thinning
large poor quality Arabic characters prior to the
extraction of their features and submission to a
syntactic recognition system.

Keywords
Arabic, characters, thinning, optical character
recognition, OCR, Urdu.

A number of approaches for thinning have been
reported in the literature. Lam and Suen [ I ]
referenced 138 publications in the area in 1992. A
simple search, today, for material on thinning
identifies 150 papers. This shows the importance of
thinning in pattem recognition and the various
approaches to yield skeletons of shapes: Iterative
approaches based on having black edge pixels with at

Introduction
The development of Optical Character Systems for
Latin script has been a success. Commercial OCR
systems are widely available at low cost and perform
well with high quality printed character. Even for
Latin script, however, the recognition of poor quality
printed characters for cornmon applications such as

-

0-7695-1195-3/01$10.00
0 2001 IEEE

181

Arabic characters, some problems quickly became
apparent.

least one non-black pixel have been developed by
Rutovitz [2], Hilditch [3], and Arcelli [3,4]. Holt [5]
and Hall [6] discuss some practical problems
associated with this approach. Associated with this is
the development of parallel thinning algorithms.
Performance of these is reported by Chen and Hsu
[7], whilst critical evaluations of recent developments
IS given by Lam and Suen [8].
An altemative
approach to thinning is based on the medial axis
transform. This effectively works with removing the
“flesh” of an object to retum the skeleton [9, IO]. This
is a widely used approach since skeletons can be
produced fast and are invariant to the orientation of
the input character. The skeletons produced, however,
may not be connected and therefore secondary
processing is required to produce the skeletons in a
form for easy feature extraction. In addition, the
medial axis approach relies on certain shape
characteristics (such as parallel stem) which are not
common in the Arabic case. An iterative algorithm is
reported here that produces thinned characters which
are suitable for feature extraction. One feature of the
approach used is that the thinned forms produced vary
slightly depending on the orientation of the original
character. It was found, however, that the differences
were not sufficient to cause difficulties in the
extraction of the features required for identification of
\
the characters.
The paper also provides experimental results that
show the problems associated with the approach when
applied to large characters of size 100 by 100 pixels.
The work is seen as an intermediate stage to
developing a full system for identifying and
recognising characters through thinning.

The Thinning Application
An application was developed which showed the
form of the character at each stage of the thinning
process, so that it could be examined. The software
also allowed the initial image to be edited prior to the
thinning process, so that the effect of adding or
deleting a few pixels could be examined. The
running application is shown in figure 1.

The Language menu option allows the character
set to be specified, in this prototype only Arabic and
Latin are available. The File menu option allows a
file containing an isolated character to be specified.
When the character is displayed in the top left square,
pixels may be added or removed by clicking
anywhere on the image. Clicking on the ‘Thin shape’
button removes a layer of pixels from the edges of the
character. The resulting character is displayed in the
next square on the right, when the first row is full the
next row is used. The number of pixels deleted in
producing a partially thinned form is shown below
each image. The application also has a zoom facility
which allows the current character to be displayed as
a larger image. The ‘Print current pattern’ button
prints the zoomed character with a background grid,
so that the x, y position of individual pixels can easily
be read. The ‘Identify features’ button extracts
structural information about the character and is
reported in Hussain and Cowell [in preparation].

The Thinning Process
The recognition system developed is based on the
extraction of features from the character. The
recognition of the characters is based on a syntactic
approach which expresses the spatial relations
between these features in terms of a new pattem
grammar. The features which the system requires are:
the number of stroke end points, the number of holes,
the number and position of dots, and a representation
of the curvature of the strokes which make up the
character. The extraction of these features is made
easier by producing thinned forms of the characters.
Thinning is a process, which is well documented and
widely used, in the first stage of recognition of high
quality Latin characters. When conventional
characters were applied, however, to test forms of the

The Thinning Algorithm
The thinning algorithm in the initial phase used a
conventional approach. A list of edge pixels was
produced. An edge pixel is one which is black (a
pixel which is a part of the character) and touches at

182

least one white pixel (a pixel which is a part of the
background). 8-connectedness not 4-connectedness
was used; that is, two pixels touch is they are
diagonally adjacent in addition to being horizontally
or vertically adjacent.
A pixel touches eight
surrounding pixels. Edge pixels are candidates for
deletion. To determine whether a particular edge
pixel should be deleted, a set of 3 3 templates are
applied to each of the edge pixels in tum, so that the
pixel under consideration is at the centre of the
template. If there is a m.atch, the pixel is deleted.
There are eight pixels surrounding the central pixel
giving 256 possible templates. In fact because of a
.four-fold symmetry only 64 templates need to be
considered. The delelion templates all have the
following characteristics:
1. The deletion of the central pixel still leaves
all other pixels in the template connected.
2. The deletion of the pixel should leave at least
two black pixe1.s in the template.
Applying this criteria produced 32 templates.
Part (a) of Figure 2 shows a template which is used to
identify a pixel suitable for deletion. In part (b) the
central pixel is not suitatlle for deletion since it would
leave the right pixel disconnected from the right three
pixels, that is the first criteria is not met.
Part (c) and (d) indicate pixels not suitable for
deletion since these do riot match the second criteria.
Deleting pixels which match these two templates
would have the effect of erasing the final one pixel
thick fotm.

Thinning Problems
It was anticipated that the thinned forms produced
by this process would be suitable for feature
extraction since the algorithm outlined produced one
pixel skeletal forms such that:
An end pixel is identified as a black pixel
which touches only one other black pixel.
Touching three or more black pixels could
identifies a black pixel marking an
intersection oftwo or more strokes.
All other black pixels touch two other black
pixels.
However a number of significant problems
emerged: Dots play a significant part in the
identification of Arabic characters: For example,
jeem, haa, and chaa are distinguished solely by the
position of the dot. Haa does not use a dot, whilst
jeem and chaa have one dot positioned respectively
middle and top with respect to the main part of the
character. Thinning a dot does not. produce a
meaningful output. Pattems which approach a circle
or square are not amenable to thinning and the
thinned form is susceptible to minor differences
variations in the shape of the dot.
Characters of poor quality may contain a single
white pixel which grows into a hole in the thinning
process. The thinning process produces distorted
characters particularly where stroke intersections
occur. The cursive nature of the Arabic characters
increases the likelihood that spurious 'tails' will be
present in the thinned forms. This problem is
inherent to the approach used and although it occurs
less frequently if an algorithm based on the medial
axis is used, this difficulty is replaced by another
problem, namely disconnected skeletons. This
requires a further phase of thinning, using an
algorithm of the type described here to produce
skeletons of the form in which feature can be readily
extracted for analysis and the recognition of the
character.

I

(a)
I (b) I (c) I (d)
Figure 2 : Typical thinning templates.
The deletion of a edge pixel alters the partially
thinned character and may have an impact on whether
other edge pixels are deleted or not.
After
considering every edge pixel the remaining edge
pixels which have not been deleted are considered
again until no more are deleted. The whole image is
considered again to produce a new list of edge pixels
and the whole process repeated until no more pixels
can be deleted. The outcome is that one-pixel thick
representations are produced.

Thinning Problems - Observations and
Solutions
Each of these problems has been successfully
solved by the application to produce thinned forms
which allow us to extract the structural information
which we need for the recognition process.
The thinning of dots is not a valid process, indeed it is
not required. The significance of dots in the original
character is determined by their number and position,

183

size of character is much higher than used by many
researchers and results by improved hardware which
allows scanning at higher resolutions. A 12 point
character scanned at 600 dpi, which can be achieved
by a cheap scanner will yield an image which is
12~600/72= 100 pixels high. The growth of these
tails is illustrated in figure 4 which shows
successfully thinned forms of the character faa. Note
that the first square shows the character as read from
the file, including a dot. This is removed and its
position logged prior to thinning.

not by their shape and therefore the original character
is pre-processed to remove dots and note their
position and number prior to submission to the
thinning process.
The problem of single white pixels has also been
dealt with by pre-processing. Holes which are three
pixels or less in size are converted to black pixels
prior to submission to the thinning process. This
successfully solved the problem for the test
characters.
The next two problems of character distortion and
the growth of spurious 'tails' are not so easily
resolved.

Character Distortion
The problem of distortion of the characters is more
intractable and is a fundamental feature of this
approach to thinning. Figure 3 shows successive
forms of the character hamza.

Two approaches were used to resolve this problem.
The first approach was to prevent the growth of tails
wherever possible. The second was to remove this
where the first approach had failed.
An analysis of the characters which exhibited tails
indicated that they grew from a small number of seed
pixels on a ragged edge. The 3x3 templates were not
sufficient to identify this problem and therefore two
larger 5t5 templates were used to as indicated in
figure 5. The grey pixels indicate that it does not
matter what colour the pixel is.

Figure 3 : Distortions in the thinning process.
The original form to an Arabic reader is clearly
made up of one continuous stroke with one abrupt
change in direction. The thinned form clearly shows
three strokes and although recognisable does not look
as one would anticipate an ideal thinned form of this
character would look. Note also the distortion where
the apparent intersection occurs. This is an inherent
feature of this approach to thinning and when
extracting structural information for thinning it is
important to appreciate the limitations of this
algorithm. There is no solution to this problem,
however an awareness of it allows it to be taken into
account in the latter parts of the recognition process.

I

1

I

Figure 5 : 5x5 templates to prevent tail growth.

The application of thcsc templates and their
rotational varients was sufficient to prevent the
growth of many tails. Figure 6 part (a) shows the
original character caf, part (b) shows the thinncd form
without the larger templates and part (c) shows the
final form when the larger templates employed in
addition to the 3x3 templates.

Removing 'Tails'
The final problem, the growth or spurious tails is
one which occurs when the characters to be thinned
are large and the thinning process requires many
stages. For the 1OOxlOO pixel resolution characters in
the test set, the maximum number of iterations
required was seventeen by the character haa. This

184

thinned forms produced by applying a set of 33
templates often have superfluous tails which require
further processing before the features can be extracted
as the next phase of the recognition process. An
application has been successfully implemented using
iterative thinning with post processing to produce
thinned forms of Arabic characters including the preprocessing and tail removal phases.

This approach, while successful, did not remove
all tails from the test sample of characters. For
example, as for the sample character faa, shown in
figure 4. To remove this tail and others which were
not removed by the larger templates, the final thinned
form was checked for strokes which were less than a
specified threshold in size. For the test sample, 8
pixels were found to be sufficient. The end points of
strokes are identified readily, since these pixels only
touch one other pixel. These pixels are followed until
another end point or an intersection is encountered. If
the number of pixels in1 this stroke is less than the
threshold, the stroke is considered to be a tail and is
deleted. Part (a) of figure 7 shows the original form
of faa, part (b) shows the thinned form without the tail
removal and part(c) shows the form after successful
removal.

I

4 c-9 ig
(a)

I
i(b)
'1
(c)
Figure 7: Tail removal.

Bibliography
Lam L and Suen Y, Thinning Methodologies

-

A comprehensive survey, IEEE Trans. on
Pattern Analysis and Machine Intelligence, vol.
14, No. 9, Sept 1992 pp869-885.
Rutovitz D. Pattern Recognition, Journal Royal
Statistical Society, vol. 129 Series A pp504-530
(1966)
Hilditch C.J Linear skeletons fvom square
cupboards, Machine Intelligence New York:
Amer. Elsevier, 1969 vol. 4 p403-420.
Arcelli C. and Sannitl de Baja G, On the
sequential line transformation. IEEE Trans Sys
Man Cyber, vol. SMC-8 no. 2 pp139-144.
( 1 978)
Arcelli C Pattern thinning by contour tracing,
Computer Graphics and Image processing vol.
17 pp 130- 144( 1981)
Hall R.W. Fast parallel thinning algorithms:
parallel speed and connectivity preservation.
Comm ACM vol. 32 no 1 pp 124-13 1 (1989)
Chen Y. S and Hsu W.H. A comparison of some
one-pass parallel thinnings.
Pattem
Recognition Letters vol. 1 1 no I pp35-41 1990.
Lam L and Suen C Y A n evaluation ofparallel
thinning algorithms for character recognition.
IEEE Transactions on pattem Recognition and
Machine Intelligence vol. 17 no 9 September
1995.
Xia Y Skeletonization via the realisation ofthe
Jire fvont's propagation and extinction in digital
binary shapes. IEEE Transactions PAMI vol. 1 1
no. ~ ~ 1 0 7 6 - 1 0 8I O6 October 1989.
[IO] Jang'B. K. and Chin R.T. Analysis ofthinning
algorithms using mathematical morphology.
IEEE Transactions PAMI vol. 12 no 6 pp541551 June 1990.

I

Conclusions
Recognition systems often using thinning as the
first stage in the extraction of features from a
character in order to recognise it. This approach
works well with high quality Latin characters, but
difficulties are encountered when dealing with a
calligraphic character set such as Arabic, due to wide
changes in the thickness of the strokes which mimic
the writing of the characters by a calligraphy pen or
brush. The increased resolution of scanned characters
means that the thinning process of successively
removing layers of edge pixels requires more
iterations which results in greater distortion of the
characters. To resolve these problems when working
with poor quality Arabic characters pre-processing is
required to remove white pixels embedded in the
body of the character and to remove any dots in the
character after noting their position and number
which is significant in the recognition process. The

185

