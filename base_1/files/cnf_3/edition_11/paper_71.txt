Formulation of STEP Compliant Building Product Model Data for CFD
Analysis
G.P. Lydon
M.M. Keane
D. Kelliher
IRUSE, Department of Civil Engineering, University College Cork, Ireland
g. l ydon @ sti1dent.ucc.k
marcns. keane@ucc.ie
denis. kelli her@ucc.ie
Keywords: CFD, Building Product Models, ISO-STEP, Integrated Object Models.
economical designs by gravity and fluid drag. For
example a structural member on an airplane must be
large to carry its load but cannot be over design because
the overweight, centre of gravity and fluid drag must
also be considered. These controls have forced the
aeronautical engineers to use high-level design
techniques. These have been made possible and
economical by informatics. Tools like Finite Element
Analysis and CFD have become central part of design.
Traditionally the building and civil engineer has relied
on design tables and design guidelines. However a new
design control is set to change this process. Sustainable
engineering has become an issue due to concerns by
environmental scientists and engineers on shortage on
natural resources and the effects our existence is having
on the world’s environment. One method of
incorporating sustainable engineering is to use higherlevel design.
CFD is the application of numerical methods to the
solution of discrete models of the constitute equations of
fluid mechanics [2]. This tool can be used in high-level
design in the following areas:
Energy Savings
Pollutant Containment
Temperature and Humidity
External Wind Loading
Internal Air Quality
Smoke Control
Air flow Distribution
Pedestrian Safety
This analysis can provide results, which in the past
were not possible. Also through the use of data
visualisation applications, results can be displayed in an
easily understood manner leading to more cost effective
and sustainable design solutions. This will improve the
learning curve of gradate engineers and the project
clients understanding of the reasons for design decisions.

Abst.ract
Computational Modellirig is a resource hungry
discipline requiring extensive expertise and large
amounts of time. The ISO-STEP (International
Standards Organisation - Standard for the Exchange of
Product Model data) is propxing an integrated product
model for CFD applications. This paper presents a
specification for a STEP compliant building product
model for CFD analysis incorporating IBM’s Open
Source Visualisation.

1. Introduction
There is pressure on designers in civil and building
engineering to use Compiitational Fluid Dynamics
(CFD) as a modelling tool. The accuracy provided by
CFD solutions is necessary to provide sustainable
solutions that insure the required energy savings. CFD is
a labour intensive process, especially in the areas of
mesh generation and visualisation. This project proposes
to develop a product model structure that will provide
the necessary data for the computational model. The
structure will reduce the s8et-up time for the CFD
engineer. The project will combine the advantages of
CFD and Building Product Modelling [ I ] into an
application, which will enable the efficient use of
Computational Models by Civil and Building Engineers.
This will make Green Design an attractive and feasible
option for both designer and client.

1.1

Computational Fluid Dynamics

The use of CFD in engin-ering has been one of the
most significant advances of the past twenty years.
Mathematicians made this pclssible by the development
of prediction equations and the relentless improvements
in computer hardware, stable operating systems and
object oriented programming.
Initially used by the other areas of engineering.
Aeronautical Engineers are forced to adhere to efficient

1.2

The Building Product Model (BPM) is an objectoriented representation of the building in terms of

495
0-7695-1195-3/01 $10.00 0 2001 IEEE

Building Product Model

geometry, materialisation of the building fabric, the
building internal environment and the systems that
provide that environment (Figure 1).
All members of the project team have access to the BPM. Some members
will have have full access (Architect) and other membersWill have limited
assess (Building Contractor) depending on their role in the project
,
- *

.

. -

Architect

'

stnrcturpi
Engineer

,

, Services

I

&ildngproc$rct

Model

.

Building

--

BPM IS a store for all
techlcalinformation
required to execute a
krilding project

Figure 1. Building Product Model
Figure 2. Layer Structure

This project proposes to follow the protocol set down
by STEP (Standard for the Exchange of Product Model
data) [3]. Currently there is no standard for CFD.
However a CFD application protocol is being balloted
for inclusion in STEP. This will complement the existing
STEP application Protocol for Structural Dynamics AP
209. This protocol will be adopted for the computational
model development. The Product Model (Figure 1) uses
object oriented software engineering methodologies to
maximize the strengths of the resulting application. This
results in a powerful tool, which becomes central to
every stage of an engineering project from initial design
to the completed project lifecycle. As it is computer
based the Model can be reused and more important
refined from project to project.
The use of computer networks will enable access to
the BPM from any location with Internet access. This
reduces the project team dependence on paper-based
media.

Figure 3 is a more detailed breakdown of the
structure of the application.

I

Computational
Model
Layer

I

(Using s':sb

+plication

Yr0:ccol

far CFD:

2. Project Outline
Interface

This project aims to combine these two ideas into an
application, which will integrate the BPM with CFD
using Software Engineering into a powerful engineering
design application. This will significantly reduce the preprocessing time required for a model by the automatic
generation of meshes from the BPM. The postprocessing time will be reduced by the use of a
customized visualisation application. Therefore making
CFD an efficient option for medium sized consulting
offices.
The layer set-up for the application is shown in
Figure 2. This illustrates the concept of the application.

Data

Figure 3. Detailed Structure
The structure shows the use of different
programming languages in each layer. There are two
reasons for this:

496

layer and modify this data for use by the Computational
Layer. One possible way of achieving this is to represent
the data as an object.

Existing software will be used in the project and this
may need to be modified therefore knowledge of the
language used will be required.
Certain languages are better at certain tasks; Fortran
is used in the majority of computational application
because of its efficiency and simplicity, C/C++
encourages the development of modular and
maintainable programs with reusable components
while Java is a primarily used for internet-based
applications.

Floor Object
A gdad coachnote
g-etrv
Svstem 1s
used h e levelIS

assemidedhosed
m the room cQects
and level kn/out oblect

Java syntax is similar to C++, but it is not tied by
backward compatibility requirements to low-level
languages such as C. Java is thus considered a "clean"
object-oriented language, with a small subset of C++
features, and might increase programmer productivity.
Java explicitly supports interfaces to C/C++, developers
can build the application in Java, and then reimplement
performance-critical parts in a more efficient language
such as C++. Java will be used for the bulk of the new
application coding [4].

2.1

J
Locaton Object
h l S IS basedm

Ihe cdeciim d

Figure 4. Object Structure

Data Layer

The inherence objects are shown in Figure 4. A
room object consists of a room as seen by a CM that
obviously contains all the data needed to set-up the CM,
using a local co-ordinate system for each room object.
These room objects are related to a floor object, which
also stores attributes like corridor layout, stairs etc. The
collection of floor objects form a building object, which
also contains data like the external finish of the building,
The final object is the location object, which contains
information on the surrounding area, the dimensions and
position buildings, ground roughness etc.

One of the aims of this project is to reduce the
workload required to use computational models. An
existing project database (Building Product Model) can
be used as an automatic source for information like
geometry, which is traditiclnally inputted by a CFD
engineer. A less costly operalive whom never comes into
contact with the Computational Model (CM) process
inputs this data to the BPM.
For the purpose of application development a
Computational Product Model (CPM) will be used to
drive the development of the higher layers. This will be a
Product Model, which holds data relative only to the
CM. This has two benefits:

2.3
2.3.1

Allow the development of the CM application.
Specify the requirements of the CM to the BPM,
which will be developzd in parallel on another
project [5].
The requirements of the CM will be detailed and a
relational database will be used to house the CPM. This
layer will be Java Based with Java Database
Connectivity technology,

2.2

The IS based on the
buildng &ect and
ihe ste loccrhm

Computational Model Layer
Mesh Generation

A computational mesh may be defined as a method
of distributing an ordered finite number of points with a
physical region, whereby communication can take place
between these points, enabling the continuous physical
flow field to be accurately simulated. Mesh generation is
an essential part of a CM. This task is also the most
laborious for a CFD engineer. Meshes can be generated
in two ways:
With a mesh generation package. The mesh is
built in sections, and then each section is
meshed by the package. .

Interface Layer

The purpose of the interface layer is to interact with
the BPM or CPM and take information from the data

497

(DX) is a system designed for the visualisation of
scientific and engineering data. DX is based on a
sophisticated data model that provides efficient
representation of data grids, data sharing among the
various components of visualisation, and a high-level
object-oriented API for customisation. The DX visual
programming environment is a simple tool that allows
the user to construct complex visualisations by
combining components together in an extended dataflow architecture that includes constructs for conditional
execution and looping. In addition, the DX VPE
provides a simple graphical user interface builder that
enables the user to quickly build customized user
interfaces. DX also includes interfaces that allow DX
functionality to be incorporated into freestanding
applications and to attach to external running processes
for on-line simulation visualisation and steering. This
application has been used other disciplines for CFD
analysis i.e. mechanical engineering for leakage control
[ 7 ] . This application will be used for visualisation of the
results.

With automatic generation using a computer
algorithm. This can be used where a similar
type of mesh is generated repeatedly.
The latter method will be used in this project because
the geometry of a room is relatively straightforward
when compared to an aircraft nacelle or a formula one
car. This section of the project is one, which can only be
taken so far under the resources. However a good
foundation will be in place for future work.

2.3.2

CFD Application

The CFD application holds the governing equations,
which are the Navier-Stokes equations, the Continuity
equation and the turbulence Model. Depending on the
problem being solved different turbulent models or
boundary conditions may be selected. These equations
are applied to the mesh, which results in a large
numerical matrix. This matrix is then solved using an
iterative method. If the problem has been correctly setup then the equations will converge. Using these solved
equations the CFD engineer can get values for different
properties i.e. temperature at any location or time within
the computational mesh.
An existing commercial package will be used for the
computation. This section should support as many
packages as possible. There are Open Source packages
available, which can be modified at a code level and
recompiled by the user. This feature is an advantage over
standard packages. All major CFD packages will be
investigated and one or two selected for the development
stage based on functionality and cost.

2.4

3.

Conclusion

This paper describes a framework for the
development of an integrated software environment for
CFD analysis that incorporates:
An integrated product model based on IS0 STEP protocol, which is used as an automatic
data source.
A user-friendly data visualisation layer based
on IBM’s Open Source Visualisation standard
aimed at reducing the complexity associated
with data formulation, presentation and
alteration for CFD analysis.
The critical development layers will be the Interface
Layer, the Computational Model Layer - Mesh
generation component and the Data Visualisation Layer.
If these interfaces can be successfully completed then
this application will be feasible in the allotted time (3
year project). If a general structure for linking a
Computational model to a Product Model can be realised
then it will be possible to customise this application
depending on the needs of the project or user from the
Data Layer to the Visualisation Layer.

Data Visualisation Layer

Most CFD applications have a built in data
visualization or post-processing module. The data
resulting from the converged solution can be displayed
in many ways i.e. 2D, 3D, different properties with userdefined ranges of concentration. These views must be
set-up by the CFD engineer. When using a generic
application this can take some time. The alternative is to
use a custom built application to display to results. As
before, this reduces the time required by a CFD engineer
to carryout an analysis. There are two options to achieve
this custom visualisation interface:
Development of a new application from scratch.
Use a visualisation application that can be
customized by the user.
One of the leading Open Source Visualisation
applications is the IBM Data Explorer [ 6 ] .Data Explorer

498

4.

References

[ I ] Eastman C.M. and Sialbiris A. (1995). A generic
building product model iricorporating building type
information. Automation in Construction, vol. 3, no. 4,
pp. 283-304.

[2] Hirsch, C., Numerical Computation of Internal and
External Flows, Volume 1, Springer-Verlag, 1991.

[3] Hardwick, M., STEP Tools Newsletter, STEP Tools
Inc., April 10 2001, ~ ) : / / w w w . s t c D t o o l s . c o ~ m ~ l -

archivekt-announce/mseOO 1ID1.html..

[4] Laxikant V. Kale, “Programming Languages for
CSE: The State of the Art”, IEEE Computational

Science & Engineering, Vol. 5, No. 2, ApriYJune 1998,
pp. 18-26.

[5] Keane, M.M., Kelliher I)., “Green Building Design
Management”,

Proceedings

of

the

CIB

W96

International Conference on Architectural Management,
Georgia Tech. University, Atlanta CA, USA, May 19-20
2000.

[6] Abram, G., “OpenDX Overview”, Visualization

Development Environments, 2000, Princeton Plasma
Physics

Laboratory,

April

27-28

2000,

httD://w 3.DDDI.gov/vde2000/e~roceedings.html.

[7] Clark, R., Azibert, H. “Visualizing Fluid Flow and
Heat

Transfer

in

Rotating

Shaft

Seals”,

IBM

Visualization Data Explorer Symposium, San Francisco,
October

26-29

1996,

ht tR://www.research.i bm.con~d~/uroceedings/Rr~.htm.

499

