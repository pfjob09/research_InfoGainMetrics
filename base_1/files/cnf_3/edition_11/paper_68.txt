An Improved Scan-line Algorithm for Display of CSG Models
K. Tokoi
Wahyama University
tokoi@s)a. wakayama-u.a c j p

T. Kitahashi
Osaka University
kitahasi@am.sanken.Osaka-u.acjp
Noticing the actual effect of a rendering algorithm of the
CSG model, we have succeeded in improving the
rendering speed by only changing the order of the data
processing of a created model and its checking procedure.
That is, the hidden-surface removal procedure for a CSG
model consisting of two geometric primitives produces the
same image as that of the data after being completed the
set operations in case of casting the target model. This
indicates that it is possible to get an image in order to
check the currently obtained shape before changing its
geometric data by applying the set operations. This is a
desirable property for interactive solid modelers.
Accordingly, it is useful to generate an image directly
from the description formula of the CSG model before
applying the set operations to the data of the model
especially in interactive modelers. Several types of
algorithm can be used to do this: a ray casting algorithm[ 13,
a depth-buffering algorithm[2], an extended depth buffer
algorithm[3], a stencil buffer algorithm and a scan-line
CSG algorithm[4]. All these algorithms find a visible
surface by applying one-dimensional set operations to the
parts of facets overlapping in the depth direction. The
processing time of this task depends on the complexity of
Boolean combinations, but not on the total number of the
facets consisting of the models. Consequently, the
processing time each algorithm takes is about O(m+n) for
the number of all facets m+n that come from the two
geometric primitives. This order is equivalent to a normal
hidden surface elimination procedure.
Some algorithms can be accelerated using special
hardware or parallel processing. However, for methods
other than a scan-line-based algorithm, the acceleration
rate will be small whenever the display resolution is raised
and the description of the set operations becomes complex,
since they execute the tasks pixel-by-pixel. In contrast, a
scan-line-based algorithm is more efficient because the
execution time doesn’t depend on the number of pixels on
a scan-line, but on the number of sample spans on it.
Even in this algorithm, the execution time of the set
operations depends on the number of scan-lines on the
screen and the total number of facets of all the objects. The
computing time of these occupies a large part of the whole
rendering process.
To overcome these difficulties, the performance of the
scan-line-based algorithm can be improved by using a
pattern matrix[6] that performs the one-dimensional set

Abstract
A scan-line algorithm uses a one-dimensional set
operation instead of a depth comparison to find a visible
surface of the object shape defined by Constructive Solid
Geometry (CSG). Interactive soiid modelers employing a
scan-line algorithm require coniiderable computing time
in repeated construction and destruction of parts of the
CSG object models during the design process.
In this papel; we discuss 3 steps to improve a scan-line
algorithm to display the CSG models on a screen. First,
changing the order of application of the partial procedures
in the algorithm can improve the performance in the
interactive modelers. Secondly, substituting set operations
for simple manipulations of the elements in two kinds of
lists reduces computing time. Finally, using the connection
information at the adjoining facets drastically reduces the
number of set operation executions.

1. Introduction
Constructing object models is still one of the biggest
problems in Computer Graphics (CG for short). A modeler
equipped with an interactive mechanism is convenient for
CG model designers. However, it must be able to
immediately generate half-tone image of the model in
order to check whether the present operation in the design
procedure is appropriate or not.
A variety of algorithms are already proposed for this
purpose. However, changing the conceptual model of
existing rendering schemes opens the way to improving the
performance of some of them. In this paper, we will show
an example of this for scan-line-based rendering
algorithms.
Constructive Solid Geometry (CSG for short) is one of
the most popular ways to describe geometric models of
objects for CG. In CSG, a three-dimensional (3D for short)
model is generated by applying set operations to the
selected geometric primitives located at the desired
positions in the 3D space.
Even for solid modelers th& employ a boundary
representation to describe objects for CG, set operations
are often useful to create complex shaped models.
In an interactive modeler, it is necessary to display the
created model on a screen in order to check its shape, and
if it is different from the expected one, the added
modification should be cancelled to restore the previous
model.

0-7695-1195-3\01
$10.00 0 2001 IEEE~

477

operations by means of simple incremental calculation. In
addition, the number of executions of the set operations
can be drastically reduced by knowledge about the
connections of the adjoining facets obtained from the
Winged Edge Data structure (WED for short). This results
in a robust and high-speed CSG display algorithm relevant
to interactive solid modelers.

2. The CSG display algorithm using the spanning
scan-line algorithm
In a direct CSG display using a scan-line-based
algorithm, the visible surface is found by applying onedimensional set operations to the facets overlapped in
depth direction in each sample span instead of the normal
depth comparison used by the hidden surface elimination
algorithm. In Figure 1 (a), the object shape is defined by
the subtraction of primitive B from primitive A. The
visible surface in this part is a back-face of the primitive B
in the sample span as shown in Figure 1 (b). The outline of
the whole procedure is as follows.

I '
Screen

y-Entry List

chanecs of the
Aetive-Edie List

Figure 2. Maintenance of an Active Edge List

2.2. Maintenance of an Active Polygon List
In this section, we mention how to maintain an Active
Polygon List (APL for short). An APL stores the facets that
overlap the sample span currently being processed. These
facets are selected from all facets based on an AEL. Figure
3 shows the flow of this procedure.
The visible surface is readily found by selecting the
facet closest to the screen from those in the APL in a
normal hidden surface elimination procedure. However, in
the CSG display procedure, the APL needs to keep all the
facets overlapping the sample span under processing in
depth order. Furthermore, in this algorithm, two facets
share an edge because a primitive is defined by WED.
Thus, the following procedure is somewhat more
complicated than in normal hidden surface elimination.
(1) Set the initial left-end position of a sample span at the
x-coordinate of the leading edge of the AEL.
(2) Extract all the edges that are located at the current
left-end position of the sample span taken from the
AEL.
( 3 ) Check whether the two facets sharing an edge are
already registered to the APL or not.
(a) If both facets aren't registered, likefl and@ at eo,
register them in the APL. A simple insertion
algorithm may be used for this registration to
keep the facets in order.
(b) If both facets are already registered, likefl andfZ
at e,?, remove them from the APL.
( c ) If one facet is already registered and the other is
not, like fl and fl at e l , replace the registered
facet (f7l) with the unregistered one cfl).
(4) Set the initial right-end position of the sample span at
the x-coordinates of the leading edge remaining in the
AEL.
( 5 ) If the current APL is not empty, then execute the
procedure explained next section.
(6) Set the left-end position of the next sample span at the
right-end position of the sample span, and then repeat
from (2) to (6) until the AEL becomes empty.

Figure 1.One-dimensional set operation on the sample span
2.1. Maintenance of an Active Edge List

In this section, we mention how to maintain an Active
Edge List (AEL for short). An AEL stores the edges that
cross the scan-line currently being processed. Figure 2
shows the flow of the procedure that we employed.
(1) Sort each of the edges by the y-coordinates of their
lower endpoints and store each of them in the
individual y-Entry Lists.
( 2 ) Repeat the following processes from bottom to top of
the scan-lines on the screen.
(3) Consider a y-Entry List corresponding to the current
scan-line. Sort the edges in the y-Entry List by the xcoordinates of the lower endpoints of the edges, and
merge them into the AEL.
(4) If the current AEL is not empty, execute the procedure
explained below.
( 5 ) Remove the edges whose higher endpoints are located
at the current scan-line position from the AEL.
(6) With respect to the edges that remain in the AEL, add
each of unit value of inclination of them to their x and
z coordinates, and find the intersection position of
them with next scan-line.
(7) Sort the edges of the current AEL by their xcoordinates.

478

U

(5) This procedure stops if there is no recorded pair of

Scan-line
Plane

facets.
(6) Swap the facets of the recorded pair in the APL. The
facets of the APL are in depth order at the right-end
position of a sample span by this operation.
(7) Move the left-end position of the sample span to the
right-end of the current sample span.
(8) Repeat from (2).

I

I

Figure 4. Division of a sample span
changes o f f h rActive Polygon List

3. Set operation

Figure 3. Maintenance of Active Polygon List

By the procedure mentioned above in section 2.3, the
APL keeps active facets in depth order, and no
intersections exist within the current sample span. The onedimensional set operation is executed using the APL in
order to generate an image of Boolean-combined
polyhedrons. This can be done by simple incremental
calculation using a pattem matrix[6] describing the
Boolean combinations of the primitives.

2.3. Subdivision of a sample spam
In a normal hidden surface eliimination, the sample span
is divided recursively until no intersections of facets are
found, before the visible surface is found. However, this
method has certain problems, such as below, when applied
CSG display.
0 The APL keeps the facets in depth order by the
procedure described in section 2.2. However, the
normal method doesn't use this property when sorting
the facets.
0 When a sample span is divided, the depths of the
registered facets in the APL must be recalculated every
time.
0 It tends to get an incorrect visible surface by the error
when the length of a sample span is short and the
angle of the two facets that intersects is small. This
problem destroys the generated image when the span
coherency is used to improve efficiency of finding a
visible surface.
Therefore, the method we propose in this paper uses the
following procedure that is similar to a bubble sort
algorithm to find a visible surface.
(1) Calculate the depth of the registered facets in the APL
at the right-end of a sample span (Figure 4 (I)).
(2) Examine whether the two neighboring facets are in
depth order in the APL. If they aren't in depth order, at
least one facet intersects another facet within a sample
span.
(3) If the pair of facets that intersect exists, record them
and find the position of the intersection, and then
move the right-end position of that sample span to the
intersection position that is the closest to the left-end
of the sample span (Figure 4 (2)).
(4) Now, there is no intersection within a current sample
span (Figure 4 (3)). If its length is longer than zero,
execute the one-dimensional set operations described
below in section 3.2 and find a visible surface.

3.1. A pattern matrix
A pattern matrix is a shape description language
introduced in a solid modeler TIPS-I[6]. A pattern matrix
describes a shape in terms of the segment S, defined by the
intersection of the several elements (Ev). Each element is
called a primitive.

s

"
=(-)E .....................................................

(1)

,=I

A union of the segments defines the shape T.

T = U SI .......................................................

(2)

,=I

This can be also described by matrix notation. This is
called a pattem matrix.

.

...
.

.

..........................

(3)

A row of this matrix expresses a segment. The negative
sign of the element implies the subtraction operation. Any
CSG tree can be converted into this matrix by a
normalization algorithm[7]. We express a pattern matrix in
the form of an element list and segment list as shown in
Figure 5 . A counter shown in this figure is used for the set
operation.

479

(Anc)u(Bnc)

This is the same technique as the segment chain[8].

counfcr

4.2. Omitting the intersection behind the visible surface
In the procedure described in section 2.3, the sample
span under processing is divided by step (3) if an
intersection exists. Then perform the one-dimensional set
operation on the right part of the dividing point. However,
when this intersection is behind the visible surface, this
intersection doesn't influence the visible surface. Therefore,
it isn't necessary to divide the sample span in this case.
This reduces the number of set operation repetitions to less
than half of that when the sample span is divided.

s, : h E

S,:Bnc
Element kt

Segment list

Figure 5. An element list and a segment list

3.2. Performing a one-dimensional set operation by
incremental calculation
A segment exists among all positive elements. Therefore,
following simple incremental calculation can perform the
one-dimensional set operation.
The number of positive elements that belong to each
segment is stored in a counter. (Figure 5)
Then, each facet registered in the APL is examined in
its order. If the front of a facet faces the screen,
decrease by one the counter of the segment that the
facet belongs to. If not, it increases by one. (Figure 6)
When a counter of any segment becomes zero after
this operation, that facet is made a visible surface. The
facets that belong to the negative element are
processed inside out.

5. Experiments
5.1. Instruments and conditions of the experiments
The computer used for the experiments was a SGI Indy
R5000 (R5000PC, 15OMHz, 96MB main memory, XZ
graphics, IRlX 6.2). No optimization options were
designated because the profiler was used for measuring the
processing time.
5.2. The processing time of this algorithm
The processing time for generating the images shown in
Figure 7 is measured. Each shape consists of nine
polyhedral cylinders. One is a union of all the cylinders
(indicated by zero segments). Others are the images
presenting eight types of the remaining constructions after
removing parts of cylinders one by one.

Figure 6. The set operation using incremental calculation

4. Improving efficiency of finding the visible
surface
A set operation using incremental calculation, still takes
more time than normal hidden surface elimination.
Therefore, it is necessary to reduce the number of
execution times of the set operations to improve efficiency.
4.1. Using sample span coherency
Coherency of neighboring sample spans allows us to
reduce the number of repetitions of set operations. A
visible surface at the previous sample span is used at the
current sample span if it doesn't satisfy all of the following
conditions.
Another facet is inserted in front of the visible surface.
The visible surface is removed from the APL.
0 The current sample span is divided at the intersection.
The visible surface, however, is valid when another
facet is inserted in front of it by the operation of section 2.2.
(c). The visible surface replaced by another facet in this
operation makes that facet the visible surface.
Consequently, the one-dimensional set operation is only
executed on the silhouette line and on the intersection line.

Figure 7. Sample data for the experiment in section 5.2.
Figure 9 shows that the processing time of the onedimensional set operation for this algorithm doesn't
depend on the number of all facets of objects. This is why
Figure 8 shows that the order of the total processing time
of this algorithm is equivalent to the normal scan-line
hidden surface removal procedure.

480

'

Processine time (sec

Processing time (msec.)
1601

I

Numberofthesegmenu

.I?

$

-2-

5 .g 7- 1

I20

40

20

~

0
0

._-

IO

20

30

40
50
M)
70
' h e number of side%of the cylinder

80

90

500

15(X) 2OlX)
2500 3000 3500
Dlrplay resolution (The number of scan-lines)

IMX)

100

4OOO

4500

Figure 11. The relationship betweenthe number of the scanlines of the screen and the processing time of the set
operations (32 sides, total 306 facets)

Figure 8. The relationship between the number of the sides
of a cylinder and the processing time
Processing hme (msec )

5.3. The effect of improvement increasing efficiency

'10

20

30

40
50
60
70
80
The number of sldf s of the cylinder

90

The effect of the improvement described in section 4 is
examined. Figure 12 shows each processing time of part of
the program. (a), (b) and (c) means as follows.
(a) No improvement technique used.
(b) Using span coherency.
(c) Omitting the intersection behind the visible surface.
Figure 12 shows that use of span coherency is very
effective. In contrast, omitting the intersection behind the
visible surface is not. However, the overhead of this
technique is constant, so it will be effective when the
Boolean combination become more complex.

100

Z Z Set operation

Figure 9. The relationship betweenthe number of the sides
of a cylinder and the processing time of the set operation
(screen resolution is 512 x 512)
Figures 10 and 11 show that processing time of this
algorithm is in proportion to the number of scan-lines of
the screen, but not to the number of pixels. They also show
that the property of this algorithm is equivalent to the
normal scan-line hidden surface I emoval procedure.

0 24

0 22

0.18
0.16
0.14

0.12
n.10

Processing time (sec )
I

*

1.6

-

1.4

-

1.2

-

0.08

-

0.06
0.04

0 segmenu
4 segments --+-Rsegmenu - - - - - -

0.02
1

I 0.8

.

0.6

-

0.4

-

0.2

.

0'
0

500

APL updating
=Others

Sample span prwebslng

15M)
2000 2:i00 3000 3500
Display resolution (The number of scan-lines)

IMX)

4oIm

2

3

4
5
Numbcr of segments

6

7

8

Figure 12. Effect of improvement for the shape shown in
Figure 7 (screen resolution is 512 x 512,32 sides, total 306
facets)
The same experiment as the above is done for the shape
shown in the sample data of Figure 13. The shape is a
union of four polyhedral cylinders and a rectangular solid,
which intersects surrounding polyhedral ellipsoid as shown
in translucent display. There are no changes of the images
generated from the shapes shown in cases 1 to 4, but they
have different numbers of hidden intersections. Figure 14
shows that the above method is more effective when the

J
4500

Figure IO. The relationship between the number of scanlines on a screen and processingtime (32 sides, total 306
facets)

481

[3] Okino, N., Kakazu, Y, and Morimoto, M., “Extended
Depth-Buffer
Algorithms
for
Hidden-Surface
Visualization”, IEEE Computer Graphics and
Applications, Vol. 4, No. 5 , pp. 79-88 (1984)
[4] Atherton, P. R., “A Scan-line Hidden Surface Removal
Procedure for Constructive Solid Geometry”,
Computer Graphics (Proc. SIGGRAPH83), Vol. 17,
NO. 3, pp. 73-82 (1983)
[5] Tokoi, K. and Kitahashi, T., “Acceleration Techniques
for a Scan-line Display Algorithm of Constructive
Solid Geometry”, Transactions of Information
Processing Society of Japan, Vol. 34, No. 11, pp. 24122420 (1993) (Japanese)
[6] Okino, N., Kakazu, Y. and Kubo, H., “TIPS-1,
Technical Information Processing System for
Computer Aided Design, Drawing and Manufacturing”,
Proceedings of PROLAMAT’73, (1973)
[7] Goldfeather, J. and College, C., “Near Real-Time CSG
Rendering Using Tree Normalization and Geometric
Pruning”, IEEE Computer Graphics and Applications,
Vol. 9, NO. 3, pp. 20-28 (1989)
[8] Yamaguchi, F. and Tokieda, T., “Development of
Hidden Line Elimination Algorithm and Hidden
Surface Elimination Algorithm by Classification
Method”, Proceedings of Graphics and CAD
Symposium, pp. 133-140 (1983) (Japanese)

hidden intersections are increased.

Figure 13. Sample data for the experiment in section 5.3.
Processing lime (sec )
3 Sei operauon

Sample span processing
APL uplaiing
IOthers

case I

c a s e 2 case 3 case4

Figure 14. Effect of improvement for the shape shown in
Figure 13

6. Conclusion
The processing time of this CSG scan-line algorithm is
proportional to the number of scan-lines on the screen and
the number of all facets of the objects, but it doesn’t
depend on the number of the pixels on a scan-line. In
addition, it has almost no dependence on the complexity of
CSG description.
Besides this algorithm is able to realize translucent
display shown in Figure 13. So it becomes easy to confirm
a section or position a primitive with a translucent display
of negative primitive.
Consequently, we think this algorithm is suitable for
interactive solid modeling environment.

References
[l] Roth, S. D., “Ray Casting for Modeling Solids”,
Computer Graphics and Image Processing, Vol. 18, pp.
109-144 (1982)
[2] Rossignac, J. R, and Requicha A. A. G., “Depth
Buffering Display Techniques for Constructive Solid
Geometry”,
IEEE
Computer
Graphics
and
Applications, Vol. 6, No. 9, pp. 29-39 (1986)

482

