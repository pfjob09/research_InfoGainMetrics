Interaction and Visualization Supporting Web Browsing Patterns
Mountaz Hascoet
University of Paris-sud,
LRI, UMR 8623 du C.N.R.S,
Bit. 490,91 405 ORSAY CEDEX, FRANCE
E-mail: mountaz@lri.fr
ABSTRACT
This work aims at providing ;advanced visualization and
interaction paradigms to support web browsing through the
intensive use of bookmarks, navigation history and best-of
lists. Our approach is motivated by past studies of web
browsing patterns that proved the usefulness of such tools
even though standard browsers provide very few interaction
and visualization features for them.
In this paper we first motivate our work and present our
main visualization and interaction paradigms. We then
present the architecture we used to integrate interactive
visualization with normal web navigation. We then review
lessons learned. Further, we report the results of a
preliminary comparative user si udy conducted to evaluate
the effect of the use of our visualization and interaction
techniques on user performances.

exhibits many of the possible uses for bookmarks: collect
information from the web; avoid digression by deferring
reading; speed up access to information; remember
previous sessions and resume tasks that were interrupted;
indirectly add annotations to web sites (usually by
authoring html files that contain collections of annotated
bookmarks); create customized views of the web; share
resources; etc.
Bookmarks also have indirect benefits. For example, in
order to locate information, many users or organizations
maintain bookmarks that can be accessed by other users.
This informal collaboration among users aims at retrieving
“high quality” information. The collaboration can be
achieved either by sending bookmarks over e-mail or by
making bookmarks accessible through the web. It can also
be supported through more sophisticated systems often
called recommendation systems such as Pharos [6].
Another indirect benefit of bookmarks is speed since web
pages referenced by bookmarks can be cached to speed-up
the loading process.

KEYWORDS: Bookmarks, History, Visualization, User
interface, WWW, Navigation, Browsing, Evaluation.
WEB BROWSING PATTERNS

While many studies of web browsing behavior have shown
the benefits of bookmarks and1 navigation history, most
recent browsers provide very few advanced interaction and
visualization features to support them. The first section of
this paper reviews the findings of web browsing analysis
that motivate our interest for bookmarks and navigation
history. Furthermore our work aims at (1) providing
advanced visualization and interaction technique for
accessing and editing bookmark!; and already visited pages
and (2) integrating these visualization and interaction
techniques with common web browser.

Finally, one of the major advantages of bookmarks, and
maybe the most substantial, is that they constitute a
personal information space [I]: pages collected on the web
are organized in a personal way.
Navigation history

Another motivation for our work is driven by web
navigation analysis from Cockburn and Greenberg [7].
This analysis suggests that more than 50% of page visits are
in fact page re-visits. This makes navigation history another
crucial tool for web browsing.

Bookmarks

Bookmarks (collections of hierarchically classified web
pages) play a central part in web browsing. It is now a
truism to say that they are heavily used [1],[2],[3].
According to the 5’ GVU surve:y [5], 92% of users have
their own bookmark archive. They reduce the cognitive
load of browsing hypertext [4] and interviews of users [ I ]

BOOKMAPS OVERVIEW

We define a BookMap as a graphical and interactive
document that contains references to web pages, viewers
and intermtors. Furthermore, this document is used as a
graphical user interface to support web browsing.
References tu w e b pages include ( I ) bookmarks (also called
favorites or hotlists), (2) references to recently visited web
pages, (3) references to most visited web pages, (4)
references to web pages that a user find interesting during
navigation but decides to defer reading. These references
can be organized as lists or hierarchies of categories. In the
rest of this paper we will mainly focus on bookmarks - i.e.
type (1). Viewers are responsible for the display of these
references. Viewers are in charge of the layout and also of

413
0-7695-1195-3/01 $10.00 02001 1EE:E

Dynamic filtering

the individual representation of web pages. Interactors are
in charge of direct or indirect manipulation of the
references. These manipulations include filters, distortion
controllers (to implement zoom or fisheye transformation)
or more common editing operations (move, copy, paste,
etc.).

To easily retrieve pages from the overview, we have
adapted and implemented dynamic filtering techniques
[13]. Users can filter pages based on the keywords they
contain and on their dates. Keyword filtering is
straightforward: a user enters a keyword in the text area,
and the filter selects all the bookmarks that contain it in its
title or URL.

Global views and distortions

Two types of graphical overviews of bookmarks are
provided. The first type is a vertical diagram of the
hierarchy of categories and bookmarks. The second type,
called radial view, displays the same hierarchy in a
different way. Categories and bookmarks are laid out on
circles or ellipses centered at the root of the hierarchy. This
display uses the screen real-estate more efficiently by
reducing the amount of empty space.

More work was needed to design date filters. Date filters
were carefully designed because the date is often a useful
criteria when searching for bookmarks. Users often
remember approximately the period at which they either
added the bookmark to their collection, or accessed or
modified it. Consequently, our aim was to design a fast and
easy way to filter thumbnails based on one of three dates:
last access, modification, creation.

'To examine the contents of overviews, two distortion
techniques were initially implemented: global fisheye and
zoom. Fisheye transformations [8] are one among many
other possible distortion techniques [9] that makes it
possible to integrate details (around the focus) while
keeping context (on the edges). These distortion techniques
are particularly well suited for browsing a BookMap since
magnifying the icons around the focus provides more
information for users. Fisheye parameters can be set
through the transformation controller. Zooming allows the
user to show more details simultaneously than when using a
fisheye, at the expense of loosing context. Zoom and
fisheye can be combined to efficiently browse the
overview. Zoom can be set directly on the view by selecting
the area for zooming or indirectly through the
transformation controller by increasing or decreasing the
current zoom factor.

In most user interfaces, specifying a period between two
dates is done by specifying the starting and ending date in
input fields. This approach has several major drawbacks :
input fields take a lot of screen space; dates might not be
valid : additional tests are necessary to check that the
specified date really exists, and that the end of the period is
after the beginning; interaction is very slow, etc.
In order to provide a better way of specifying dates and
periods, we designed a widget called the variable slider.
The variable slider is a slider that can be modified by the
user in several ways. The user can change the length of the
cursor (and consequently the length of the period) by
dragging the triangular handles on both sides of the cursor.
Feedback is provided above and below the slider to inform
users of the current starting and ending dates. Like a regular
slider, the cursor can also be moved over the sliding area to
modify the specified period.

Two additional transformations have been implemented:
rotations and translations. These transformations can be
achieved either by directly manipulating the overview or by
indirect manipulation. Indirect manipulation is achieved
through the transformation controller[ IO]. By combining
translation, rotation and fisheye, users can rapidly explore
the collection of web pages.

-

The variable slider has several advantages
Screen space : the variable slider takes a minimal
amount of screen space and can be resized to fit into
any available space. Resizing affects the granularity of
the cursor, therefore if the user wants more precision
he should enlarge the filter window while if he does
not need too much precision he' can use a very small
window.
Easy and direct manipulation of dates and periods :
users define dates by dragging the handles or the
cursor. Superimposing the handles enables day
selection instead of period.
Graphical views of dates make it easier for users to
compare dates from several sliders. Figure 2 shows the
three date filters in the right window. The combination
of these filters make it possible to specify relatively
complex date queries very easily.
Dates are always valid. No further test is needed and
user errors are avoided.
Speed: users can specify dates and periods very
quickly, with very few actions. Refining dates or
period is even faster.

Magnifying glasses

We have designed magnifying glasses (Figure 1 (a)) to have
a local fisheye distortions as a complementary
transformation. Magnifying glasses could be viewed as a
particular type of magic lens [ 1 I]. The magnifying glass
also supports label visualization (Figure 3) by adapting
label excentric labeling [ 121. The main reason for designing
the magnifying glass came from the fact that with global
fisheye distortions, the effects of translations and rotations
is not always easy to follow by some users. One reason for
that is that with these transformations the context is moving
in unusual ways (as with hyperbolic transformations for
example). With the magnifying glasses, on the contrary,
most of the context remained unchanged and this seemed to
reduce a lot of the cognitive load that came with global
fisheye.

414

\

___

Figure 1: (a) Global view with 2 magnifying glasses of different magnifying factors; (b) global fisheye (c) zoom

Figure 2: Variable sliders for dynamic filtering

415

browser and provides BookMap with the corresponding
thumbnail. BookMap in turn updates its history list and
visit counters. The main advantage of this architecture is
that any existing browser can be integrated without any
modification to render HTML pages and achieve
hypertext navigation through hyperlinks. Therefore, (1)
the user does not need to get used to a new web browser,
(2) development effort to render complex HTML pages
can be saved.
Data structure

BookMap data structures are driven by the Model-ViewController model ([15]). There are several reasons for
this. The main reason is that using MVC results in very
modular data structures. Therefore, it was possible to
develop different types of models (to represent different
data sets), different types of views (to represent different
layout algorithms) and different interaction features
through the controllers. These model, view and controller
modules were developed independently.

Figure 3: Magnifying glass for labels visualization
integration with the browser

Adding a URL in the BookMap collection is smoothly
integrated in the user interface: it is achieved by dragging
the current item from the history subwindow (not detailed
in this paper) to any other BookMap subwindow.
Therefore a user can drag the current page to any category
of bookmarks directly. Conversely, one can load web
pages represented in a BookMap in a regular browser
such as Netscape. By double clicking on any thumbnail of
a BookMap a user immediately loads the page in his
browser, and can use this browser for further navigation.
Further communication between the browser and
BookMap system is achieved through a proxy. This
communication is detailed in the next section.

TGrabber

7
I

I*

II

I

11

IMPLEMENTATION ISSUES

BookMap has been developed on several Unix platforms
(IRIX, Solaris, Linux,) using the Java Swing Toolkit.
User

Architecture

The integration with the browser is achieved through two
different mechanisms. The first mechanism consists in
making it possible for BookMap to control Netscape
Communicator. This was implemented using Netscape
remote commands: when a user double clicks on a
thumbnail, it is loaded into Netscape. The second
mechanism consists in updating the history and the visit
counters as a user navigates through hyperlinks within
Netscape. BookMap needs to be notified by the browser
whenever a new page is loaded. In order to implement this
notification mechanism, we used Pluxy[ 141, a personal
proxy. Pluxy is a modular web proxy that can handle a
dynamic set of services. A service in Pluxy, named a
pluxin, is a Java class that can be loaded or unloaded at
runtime. Pluxins can implements various kinds of services
such as translating web pages, caching, logging, and
tracing. In order to communicate with BookMap, we
wrote the Grabber, a pluxin responsible for grabbing the
page just loaded in the browser and notifying BookMap.

Figure 4: architecture

'

,

LESSONS LEARNED

Several different prototypes were implemented before the
current BookMap was designed and developed. All the
prototypes were written as Java applications. Some
prototypes explored different visualization algorithms,
other prototypes implemented different interaction
features or explored different data sets (bookmark files or
web site exploration results).
Initial prototypes were submitted to informal user
centered evaluations. These evaluations resulted in a
redesign and led to the current BookMap user interface. In
particular, it was obvious from these evaluations that :
1. Filters are useful: initial versions of the prototype did
not provide these filtering mechanisms and in some
cases it was difficult to retrieve information.
2 . Indirect manipulation was needed especially to
handle rotations and translations under fisheye
transformations. The transformation controller can be
used to rotate or translate the view step by step.
3. Thumbnail image representation are useful to
identify web pages. Visual memory of web pages is
efficient.
4. Customiznfion was also required. The mapping of
various graphical attributes to data attributes can be

With this architecture (Figure 4), the user can freely
navigate in the browser and load new pages. Pluxy
intercepts the corresponding HTTP requests and runs
Grabber for each HTML page response. Grabber in turn
grabs the corresponding page from the Netscape browser
and makes a thumbnail from the resulting screen dump. It
also notifies BookMap that a new page was loaded in the

416

customized. For example, thumbnails can be replaced
by rectangles and the background color of the rectangle
can be mapped to the last access date of the
corresponding URL.
5 . Diagrammatic representarions are useful for some
users, while other users simply rejects them. Therefore
the possible types of overviews implemented in
BookMap should be extended to provide nondiagrammatic types of overviews.

dependent on the page to retrieve. Targeted pages were
chosen so that the difficulty in finding them was estimated
as average in both text and thumbnail conditions. Even
though the estimate of the difficulty was approximate, we
believe this was enough to reduce the bias.
Results

The average number of errors was 3.16 for graphic view
and 5.44 for the list view. The time necessary to complete
the task was 31.44s for the graphic view and 24.61s in the
case for the list view.
These initial results do not account for the cost of errors.
Indeed, in a real web browsing environment errors cost
several seconds (time for pages to be loaded and for the
user to realize that one page is not the page he wanted). In
the context of the experiment a user would not need to
wait for a page to be downloaded to know that he was
wrong. And the time needed to complete the task does not
account for downloading. The number of errors is a
criterion that is as important to consider as the time to
complete the task. For this reason, this preliminary results
suggest that users might be more efficient than with the
list view

EMPIRICAL EVALUATION

A controlled experiment was conducted involving 16
subjects to compare advanced visualization and
interaction techniques with standard hierarchical lists.
This experiment focuses on one particular task: finding
and selecting one known page from one bookmark view.
The independent variable is the: type of visualization and
interaction available for the user and we tested it with 2
modalities: the first modality consisted of a list view
similar to Netscape bookmarks window, the other
modality consisted of a Bookmap with an elliptic layout
as depicted in Figure 1.
Design of experiment

Each subject had to visit twenty pages (10 with one
modality, and 10 with another modality). The users could
read each page for as long as necessary before starting the
task. When ready, the task consisted in retrieving one of
the visited page among 70 other pages organized in
several categories. The task was considered completed
when the user double clicked on the required page. Time
and number of errors before the page was retrieved were
recorded (double clicks on non target pages were
considered as errors).

This experiment was also useful to show minor problems
when using Bookmaps. We are working on these and plan
do more user testing with the revised version of our
interaction and visualization techniques in the near future.
RELATED WORK

This section first compares BookMap overviews with the
Netscape views of the same bookmarks and furthermore
with other visualization systems.
There are two different views of bookmarks in Netscape.
One is through a hierarchical menu, used to access a
bookmark and the other is the main window that lets the
user edit and organize the bookmarks. BookMap, on
contrary, uses the same view for both operations
(accessing and editing/organizing).

Bias

There was a bias in favor of the list view because all
subjects were very familiar wii:h this kind of view while
they had no or very little practice with our visualization
and interaction system. Few minutes just before the
beginning of the experiment were spent training the
subjects with Bookmap. Thlz training consisted in
presenting even commands were presented: translate,
show/hide label, show magnifying glass, zoom region,
activate/deactivate fisheye distortion, automatic layout.
These commands were written on the wall next to the
machine were the experiment took place so that the
subject could give it a glance if necessary. The number of
functions that were actually used varied a lot among
subjects.

Comparison with Netscape

For the bookmarks used in our experiments, BookMap
displays all the bookmarks at once in a window that takes
approximately half the size of the original Netscape
window. Furthermore, at most 44% of the bookmark file
can be displayed simultaneously within a Netscape main
window of this size. With the Netscape bookmark menu,
even if the user knows where his bookmark is located, he
has to scroll the bookmarks and to open bookmark
categories before reaching the desired page. On the
contrary, if the user knows where (spatially) its bookmark
is, the BookMap display provides direct access to the web
page, without scrolling or operdclose. More over we
account on the human ability of spatial memory to
facilitate memorization while using the BookMap system.

Another bias might have been introduced with the choice
of the web pages. Indeed pages were chosen from web
sites of our university (research labs pages, project pages,
database front-ends, etc). Even though our data was
collected and checked very carefully, it is impossible to
say whether these web sites iue representative of the
overall World-Wide Web in terms of the difficulty they
represent for the given task. In other words, the difficulty
to find one page from a title or a thumbnail is inherently

Comparison with visualization systems

Some of our design choices were similar to those of
WebBook [ 161, especially the skimming features[ 101,
even though our approach and implementation was
different. Our skimming window is smaller and

417

interaction with it is based on VCR metaphor rather than
on book metaphor as in WebBook. Furthermore, we only
skim selected items in our view whereas WebBook skims
all the pages of the book

5.

6.

Image thumbnails have been used to represent web pages
in recent versions of WebView [7] and in Data Mountain
~71.

7.

Other visualization systems have explored zooming [ 181
and fisheye transformations [I91 on collections of web
pages. Compared to BookMap these techniques are more
general, and aim at helping users navigate within Web
pages and they are not specifically developed for
bookmarks.

8.

9.
Overview diagrams of Web page collections have been
designed using various layout strategies. These projects
include overview diagrams based on hyperbolic
geometry[20], simple web site maps in Webmap [21] or
more complex ones based on clustering [22] or similarity
computation [23].

10.
11.

The originality of BookMap is the combination of many
advanced visualization and interaction techniques with
common web browsing and the support. of browsing
patterns (mainly with bookmark usage).

12.

13.
CONCLUSION AND FUTURE WORK

BookMap offers an alternative user interface for web
browsing. This user interface accounts for browsing
patterns and makes navigation history, bookmarks and
most frequently accessed sites directly manageable.
BookMap is based on advanced visualization and
interaction techniques.

14.
15.

Our current and future work includes in ( 1 ) conducting

more user-centered evaluations, (2) developing other
consistent and complementary visualization and
interaction techniques for BookMaps and (3) extending
BookMap to integrate more complex URL repositories.

16.
17.

ACKNOWLEDGMENTS

This project involved many graduate students that I
would like to thank. Many thanks to Olivier Dedieu and
Vincent Bouthors for their help with Pluxy. Thanks to
Michel Beaudouin-Lafon for improving the readibility of
this paper.

18.

19.

BIBLIOGRAPHY
1. Abrams, D.,

2.
3.
4.

20.

R. Baecker, and M. Chignell,
Information Archiving with Bookmarks: Personal
Web Space Construction and Organization, in
Proceedings of ACM CHI 98 Conference on Human
Factors in Computing Systems. 1998. p. 41-48.
Bernstein, M., et al., Architectures for volatile
hypertext. proceedings hypertext'9 I , 1991 : p. 243-26 1.
Garzotto, F., et al., Hypertext, hypermedia handbook.
1991: McGrawHill.
Wright, P. Cognitive overheads and prostheses: some
issues in evaluating hypertexts. in Hypertext91. 199 1 :

21.
22.
23

418

ACM.
Catledge, L.D. and J.E. Pitkow, Characterizing
Browsing Strategies in the World-Wide Web, . 1996.
Dedieu, 0. and V. Bouthors. Pharos, a collaborative
infrastructure for web knowledge sharing. in
European Conference on Digital Libraries (ECDL).
1999. Pans: Springer Verlag.
Cockburn, A. and S. Greenberg, Beyond the Back
Button: issues of page representation in graphical
navigation tools.
http://www.cpsc.ucalgary.ca/grouplab/papers,1999.
Sarkar, M. and M.H. Brown. Graphical Fisheye
Views of Graphs. in Proceedings of ACM CHI'92
Conference on Human Factors in Computing Systems.
1992.
Leung, S.K. and M.D. Apperley, A review and
taxonomy
of
distortion-oriented
presentation
techniques. ACM transactions on Computer-Human
Interaction, 1994. l(2): p. 126-160.
Hascoet, M. Integration of navigational aids in the
user interface. in ACM Hypertext'OO. 2000. San
Antonio: ACM Press.
Bier, E.A., et al. A taxonomy of see-through tools. in
CHI'94. 1994: ACM PRESS.
Fekete, J.D. and C. Plaisant. Excentric labeling:
dynamic neighborhood labeling for data visualization.
in CHI'99. 1999.
Ahlberg, C. and B. Shneiderman, Visual Information
Seeking: Tight Coupling of Dynamic Query Filters
with Starfeld Displays, in Proceedings of ACM
CHI'94 Conference Ion Human Factors in Computing
Systems. 1994. p. 313-317.
Dedieu, O., Pluxy,un proxyweb dynamiquement
extensible. NoTeReColloquium, 1998.
Krasner and Pope, A cookbook for using the modelview controller user interface paradigm in Smalltalk80. Journal of Object Oriented Programming, 1988.
Card, S., G. Robertson, and W. York. The WebBook
and the Web Forager: an information workspace for
the world-wide web. in CHI'96. 1996: ACM Press.
Robertson, G., et al. Data Mountain: using spatial
memory for document management. in UIST. 1998:
ACM Press.
Bederson, B., et al. A zooming web browser. in
Human factors in web development. 1999.
Robert,
L.
and
E.
Lecolinet.
Browsing
hyperdocuments with multiple Focus+Context Views.
in Hypertext98. 1998: ACM Press.
Lamping, J., R. Rao, and P. Pirolli. A Focus + Context
technique based on hyperbolic geometry for
visualizing large hierarchies. in CHI. 1995: ACM
Press.
Domel, P. WebMap: a graphical hypertext navigation
tool. in WWW'94. 1994. Chicago.
Mukherjea, S. and J.D. Foley. Visualizing the worldwide web with navigation view builder. in "95.
1995.
Chen, C. Structuring and visualising www by
generalised similarity analysis. in Hypertext. 1997:
ACM

