2011 15th International Conference on Information Visualisation

Improving the Evaluation Performance of Space-Time Trellis Code through
Visualisation

H. Harun

U. A. I. Ungku Chulan and K. Khazani

Aerospace Engineering Department
Engineering Faculty, University Putra Malaysia (UPM)
43400 Serdang, Selangor, Malaysia
harlisya@eng.upm.edu.my

Developing Reality
22A-1, Jalan 7/7, Seksyen 7
43650 Bandar Baru Bangi, Selangor, Malaysia
proactive.azmi@gmail.com,
proactive.khamizon@gmail.com

Abstract—In this paper we present a new visualisation
approach in the effort of improving the evaluation strategy of
space-time trellis code (STTC) generator matrix G. To our
knowledge, although visualisation is widely used to handle a
variety of problems, it has never been employed specifically to
solve complexity problems that are related to generator matrix
G evaluation. Most approaches are either mathematically or
algorithmically inclined. As such, they tend to offer a series of
refinement that enhances the current available method, but do
not provide fresh insight on the problem at hand. By
comparing it with the enhancement strategy that was
discovered via the normal approach (i.e., by analysing
algorithm) it was discovered that visualisation had inspired an
entirely different pruning technique that outperformed the
common approach by 20%.
Keywords—Space-time trellis
heuristic; visualisation tool.

code;

generator

The analysis of heuristic algorithms could face the
challenge of visibility. As such, analysing the behaviour via
the pseudocode per se, may not reveal the actual behaviour
of the algorithm. This is due to the fact that heuristic
algorithms are not completely deterministic, where the
algorithm can progress in a direction totally unforeseen by
analysis.
Visualisation can help in resolving this visibility issue.
In fact, it can contribute to the solution finding process in
three aspects [5]:
1. Measuring the impact of change.
Knowing the impact of changing a certain
parameter is not an easy task. Visualisation can
offer a concrete and controllable display of impact.
2. Testing of what-if scenarios.
Once the impact of change has been understood, it
is possible to test varying what-if scenarios without
much complication and get the result immediately.
3. Simplification of processing.
The complexity of information is simplified with
visualisation. This way, it is easier for us to process
it.
As some may argue, certain problems are just not
innately visual. It must be remembered however that a
design problem that is mathematical or algorithmic by nature
need not remain that way. It is possible to re-frame [6] the
mathematically-algorithmically inclined problem (MIP) into
a visually inclined problem (VIP) that is more stimulating
perceptually, as shown in Fig. 1.
Visualising the problem instead of just analysing the
equation can promote an entirely different perspective on it.
For instance, it could make research more sensitive to
patterns that are readily apparent through visual means [7]
but completely cryptic when analysed algorithmically.

matrix;

I.
INTRODUCTION
Great effort has been directed toward the search for
optimal STTC code and the reduction of computational
burden in calculating the minimum determinant. Fukuda et
al. [1] and Lisya et al. [2] have developed high-speed and
improved algorithm which is based on tree structure in
calculating the minimum determinant effectively in
obtaining optimal generator matrix G. As for now the
improvement of the algorithm is done via the analysis of the
pseudocode. This is not a productive way of understanding
the actual impact of the design that is heuristically inclined.
In the attempt of finding an effective solution of improving
the performance of the current approach, the potential of
visualisation is explored.
.
II.

VISUALISATION

Visualisation is not a new approach in engineering. It
has been employed widely in the process of analysing
algorithms [3]. To our knowledge however, the effort to
enhance the evaluation of generator matrix G in STTC has
never been approached with visualisation.
To improve the design of evaluation, most approaches [4]
rely on the analysis of algorithm, equation, matrix etc. As
such they are mathematically or algorithmically inclined.
This is only expected given the nature of the problem.
1550-6037/11 $26.00 © 2011 IEEE
DOI 10.1109/IV.2011.20

III. DIMENSION OF ANALYSIS
To analyse the heuristic search based on the visualisation
tool, these dimensions or features are given the emphasis [8]:
1. Size of search space
The most fundamental way of analysing the
efficiency of search is by studying the size of the
search space. Search space corresponds to the

471

Time trace shows the progression of search.
Depth first search shows higher progression
comparatively. Breadth first search shows
slower progression.
3. Frequency domain analysis.
Another aspect of search that is crucial is the extent
of its backtracking. Frequency domain analysis
shows how far search backtracks when reaching a
dead end. Depth first search has higher frequency
than breadth first search when it comes to
backtracking. It implies that depth first search is
more focused in the search process.
4. Problem – Search Space evolution.
The space evolution is the change undergone by the
search space when the input is changed. In order to
analyse the evolution of a tree in comparison to
their input, a series of similar trees can be analysed.
Here, the concept of tree similarity or tree
congruence is really imperative. The congruence of
a tree can be measured via the external nodes
shared by subtrees [9]. It is also possible to analyse
congruence by studying the structural differences
between trees [10, 11, 12]. Other approaches
include the usage of an index to make the
comparison process more economic [13].
The aforementioned methods can be materialised by
visualising the search with a two dimensional tree that is
highly interactive.
IV.

STTC visualisation tool (SVT) is an application that
translates the evaluation of the generator matrix G in STTC
into a visual structure that allows researchers to interact
directly with the elements that determine the minimal
determinant of the tree.
SVT promotes a variety of interaction to occur [14],
which includes zooming, abstracting, highlighting,
separating etc. Users can immediately see the impact of a
particular generator matrix G on the complexity of search
without being bogged down by details.

Figure 1. Effect of Re-framing.

2.

STTC VISUALISATION TOOL (SVT)

amount of effort performed by an algorithm to
search for the solution given a particular problem.
The space expands in proportion to the number of
trials made by the algorithm, as well as the
mistakes. In effect, the higher the efficiency, the
smaller the space would be.
Space structure.
The space structure is defined by its branching
factor and depth. Branching factor is the number of
branches made by a particular node during the
search process. Depth on the other hand, refers to
how deep the search must progress to find a
solution or cease from trying. Two other measures
are also important. They are:
a. Depth-node count.
Depth-node count is the total number of nodes
expanded for each level of the search tree. It
reflects when the search is most active in term
of tree level. The count is considered good
when it is high at earlier level of the tree. This
implies that the algorithm discriminates
potential paths from trivial ones at early stages
of the search instead of later.
b. Time trace representation of node count.

subtle pattern

Figure 2. Iterative Exploration.

472

The tool is used in a cyclic manner, as shown in Fig. 2,
where different generator matrix G is repeatedly generated
and processed to uncover interesting patterns within the tree.
This is performed using a simplified version of the P-Set
Model [15] where variations of the generator matrix G are
iteratively explored and the corresponding visualisations
recorded.
The patterns of different constructs for the generator
matrix G can be gathered (as in Fig. 2) by studying the
evolution of the search tree from the visual aspect. For
instance, the search tree is first generated for the generator
matrix G [2 0 3 1 ; 0 2 2 3]. To gain insight on how the
pattern could change, an element within the initial generator
matrix G is changed from 3 to 1. The search tree for the new
generator matrix G [2 0 3 1 ; 0 2 2 1] is then compared to the
previous one to capture any subtle patterns that are
inherently difficult to discover through analysis.
In using SVT, the main objective is to identify the
patterns [16] that can assist the development of a high
performance algorithm. That is, to become aware of insights
that were previously elusive [17].
Knowing what to focus is a challenge in using any
visualisation tools. In our context, emphasis is given to the
patterns of interest that practically lies within the regions of
the tree where:
1. Solutions are found most frequently.
The region where solutions are frequently found is
rich with potential insights. This is where most
observation should focus on, to unveil the possible
causality patterns that can direct the search more
effectively towards the solution without
unnecessarily traversal.
2. Solutions are found earliest.
Fast solutions are highly useful in providing
insights on the estimation of the initial upper bound
for the search tree.
3. Pruning is employed most frequently.
Frequently pruned regions can suggest a way of
refining the pruning strategy such that pruning can
be performed earlier to a small number of shallow
branches instead of a high number of deep
branches.
An important fact to note is that visualisation is partially
experimental. There is no guarantee that it can improve the
process of discovering better solutions for improving the
evaluation approach of STTC generator matrix G. However,
it posits a compelling alternative to the current way of
perceiving analysis as being a completely sequential process.
V.

Figure 3. Original Algorithm.

Figure 4. Improved Inspired by Analysis of Algorithm.

employed. The algorithm of the original approach was
analysed to identify the areas of which it can be further
enhanced.
As shown in Fig. 4, with the improved approach, the
search space was reduced by approximately 50%. By
analysing the original algorithm, the last layer pruning was
introduced [2].
The improvement inspired by analysing the algorithm
was initially rather impressive. However, with visualisation,
the best enhancement was discovered. By analysing the
visual growth of the tree i.e., comparing the structural
differences [10, 11, 12] between trees of different constructs
of generator matrix G, an entirely new pruning strategy,
called the optimal substructure pruning was developed. It can
reduce a huge portion of the search space (approximately
70%) with only 3.7% of risk. This is shown in Fig. 5.
VI.

CONCLUSIONS

The discovery made by researching the original
algorithm through visualisation is superior to the one done
with algorithm analysis.
For instance, the improved
algorithm that was developed through algorithm analysis
reduced the search space by approximately 50% as compared
to the ≈ 70% reduction achieved by the enhancement found
through visualisation. It is quite intriguing to acknowledge
the fact that when the same problem was analysed visually,
the research was suddenly provided with a set of new and
empowering insights that were not previously visible with
the mathematically or algorithmically inclined analysis. This
had given rise to the formulation of an entirely different
pruning strategy that enabled a more efficient reduction.

CASE STUDY

In the following, the impact of approaching the problem
with visualisation is illustrated. The first tree is generated
via the original algorithm (Fig. 3) that evaluates the minimal
determinant of a generator matrix G [1]. It is quite apparent
that the tree spans a large search space.
To improve the original approach, the common method
of research (i.e., mathematical-algorithmic analysis) was

ACKNOWLEDGMENT
The authors would like to acknowledge UPM for supporting this
research through grant number 91955 entitled “Investigation and
Implementation of the Viterbi - MLSE STTC Decoder for
Aeronautical Applications”.

473

[7]

[8]
[9]

[10]
Figure 5. Improvement Inspired by Visualisation.
[11]

REFERENCES
[1]

[2]

[3]

[4]

[5]

[6]

T. Fukuda, S. Otsu, Y. Tokunaga and H. Zhao, “A realization of
determinant criterion for STTC design,” Proc. of the 23rd International
Technical Conference on Circuits/Systems, Computers and
Communications (ITC-CSCC 2008), July 2008, pp. 61–64.
H. Harun, “An improved algorithm for fast evaluation of space-time
trellis code (STTC) generator matrix”, Ph.D Thesis, Faculty of
Engineering, University Malaya, Kuala Lumpur, Malaysia, June
2010, pp.1–204.
C. Demetrescu, I. Finocchi, G. F. Italiano, and S. Naeher,
“Visualization in algorithm engineering: tools and tTechniques,” in
Dagstuhl Seminar on Experimental Algorithmics, Springer Verlag,
2002.
S. Nitinawarat, and N. A. Boston, “Complete analysis of space-time
group codes,” appeared in Proceedings of the 43rd Annual Allerton
Conference on Communication, Control, and Computing, 2005.
S. Carpendale, “Evaluating information visualizations,” in
Information Visualisation: Human-Centered Issues and Perspective,
Springer, 2008, pp. 19–45.
P. Linkow, “What gifted strategic thinkers do,” Training &
Development”, vol. 53, no. 7,1999, pp. 34–37.

[12]

[13]

[14]

[15]

[16]

[17]

474

M. Tory and T. Moller, “Human factors in visualization research,”
IEEE Transactions on Visualization and Computer Graphics, vol. 10,
no. 1, 2004, pp. 72–84.
Y. Kuwata and P. R. Cohen, “Visualization tools for real-time search
algorithms,” Computer Science Technical Report 93-57, 1993.
H. V. D. Parunak, “Don't link me in: set based hypermedia for
taxonomic reasoning,” in Proc. of the Third ACM Conference on
Hypertext (Hypertext’91), ACM Press, Dec. 1991, pp. 233-242.
Y. Zhong, C. A. Meacham and S. Pramanik, “A general method for
tree-comparison based on subtree similarity and its use in a
taxonomic database,” Biosystems, vol. 42, no. 1, 1997, pp. 1–8.
T. N. W. Nye, P. Liò and W. R. Gilks, “A novel algorithm and webbased tool for comparing two alternative phylogenetic trees,”
Bioinformatics, vol. 22, no. 1, 2006, pp. 117–119.
W. N. Wan Zainon and P. Calder, “Visualising phylogenetic trees,” in
Proc. Seventh Australasian User Interface Conference (AUIC 2006),
pp. 145-152.
D. M. De Vienne, T. Giraud and O. C. Martin, “A congruence index
for testing topological similarity between trees,” Bioinformatics, vol.
23, no. 23, 2007, pp. 3119–3124.
J. S. Yi, Y. Ah Kang, J. T. Stasko and J. A. Jacko, “Toward a deeper
understanding of the role of interaction in information visualization,”
IEEE Transactions on Visualization and Computer Graphics, vol. 13,
no. 6, 2007, pp. 1224–1231.
T. J. Jankun-Kelly, K. L. Ma, and M. Gertz, “A model and framework
for visualization exploration,” IEEE Transactions on Visualization
and Computer Graphics, vol. 13, no. 2, 2007, pp. 357–369.
R. A. Amar and J. T. Stasko, “Knowledge precepts for design and
evaluation of information visualizations,” IEEE Transactions on
Visualization and Computer Graphics, vol. 11, no. 4, 2005, pp. 432–
442.
C. Plaisant, “The challenge of information visualization evaluation,”
In Proceedings of the Working Conference on Advanced Visual
Interfaces (AVI), ACM Press, 2004, pp. 109-116.

