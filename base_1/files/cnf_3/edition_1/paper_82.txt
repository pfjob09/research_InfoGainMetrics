2011 15th International Conference on Information Visualisation

Efﬁcient Curvature-optimized G2 -continuous Path Generation with Guaranteed
Error Bound for 3-axis Machining
Jevgenija Selinger, Lars Linsen
Jacobs University, Bremen, Germany
j.selinger@jacobs-university.de; l.linsen@jacobs-university.de
Abstract

should be contained in a given prescribed small tolerance
neighborhood of these points.
The resulting curve shall be represented as a B-spline
curve

Path generations are a necessary integral part of any
automated machining approach using 3-axis robots. Given
an input path in form of a piecewise linear curve, we automatically generate an optimized path that lies within a
given error bound or tolerance band of the input path. The
optimization is targeted at minimizing the processing time
of the machining process. As sharp turns require the robot
to slow down, we want to minimize the local curvature at
each point of the curve. Our approach is an efﬁcient ofﬂine algorithm that consists of several processing steps. In
a preprocessing step, we analyze the input path and split
it into small groups. The groups are categorized and can
be handled independently and locally. We apply a local
sleeve concept for complicated groups and a local B´ezier
approximation for simple groups. In a postprocessing step
the groups are combined to form a G2 -continuous path.
Our approach achieves high-quality results that are comparable to the sleeves approach while being signiﬁcantly
more efﬁcient (speed-up of one order of magnitude) when
applied to real-world problems.

1

n

C(u) :=
j=0

where the interval [a, b] can be any, Pj denotes the jth control points, and Njd denotes the j-th normalized
B(asis)-spline function of degree d. The B-spline basis
functions are deﬁned over a nonperiodic knot vector
U = (a, · · · , a, ud+1 , · · · , um−d−1 , b, · · · , b),
d+1

d+1

where m = n + d + 1.
In order to generate a B-spline curve with the restrictions described above, we construct a channel around the
initial points with given tolerance and require the resulting
curve to lie inside this channel. The sharper the angle between the initial points is, the more complicated, and thus
slower, movements the milling tool has to make. To reduce
the overall processing time of the milling procedure, we
want to minimize the curvature of the resulting curve while
keeping the curve within the channel (see Figure 1a). In addition, it is desirable that the solution satisﬁes certain shape
constraints of the milling path to obtain proper results. In
particular, one wants to obtain symmetrical solutions for
single angles and turns (see Figure 1b and Figure 1c).
The idea of the proposed method is to appropriately partition the input curve in form of connected initial points
into small groups, to handle the groups individually, and to
combine the local solution for the groups to a global solution in form of a G2 -continuous curve. The partitioning
step is described in Section 3.2. The handling of the groups
depends on their complexity. Complex groups are handled
using a sleeve approach, see Section 3.3. Simple groups
can be handled with a more efﬁcient local cubic curve approximation, see Section 3.5. In case the G2 -property is
not required and the construction of a G1 -continuous curve
sufﬁces, the even simpler solution in Section 3.4 can be applied to the simple groups. Finally, the local curves need to

Introduction

Milling with 3-axis robots is one of the major topics in
computer-aided manufacturing. One main step in this context is the generation of a milling path. Various strategies
exist to generate a suitable path. However, the paths frequently contain sharp turns, which forces the robot to slow
down signiﬁcantly during the milling process. As such,
sharp turns in the milling path lead to a substantial increase
in milling time. We present an approach that optimizes a
given milling path with a guaranteed error bound.
According to common industry standards, the milling
path is typically given in form of a piecewise linear curve
representation. Hence, the input to our algorithm is a workpiece which we want to mill and a milling path in form of a
polygonal line that connects consecutive path points. The
milling machine cuts along this path to obtain the required
shape of the workpiece. We developed an ofﬂine calculation algorithm for a smooth milling path with low oscillations from the initially given path. The constructed curve
1550-6037/11 $26.00 © 2011 IEEE
DOI 10.1109/IV.2011.31

Pj Njd (u), a ≤ u ≤ b

519

erated curve. Our approach would allow for an application of feed-rate adaptation to the optimized curve. Since
curvatures are minimized, it is to be expected that results
would be signiﬁcantly improved.
Many approaches for a global approximation of the input path with higher-order piecewise polynomials exist.
Most of them do not ﬁt all the constraints that are imposed to our problem, e.g., they do not allow for curvature
minimization or cannot provide guaranteed error bounds.
An approach that would be applicable to our problem is
the one of data approximation using biarcs [9]. Given two
points Ps , Pe and two unit end tangents Ts and Te , a piecewise circular arc is sought such that:

be combined to form a global one as described in Section
3.6. The result is represented by a smooth B-spline curve
of degree three.

Figure 1: (a) Smooth milling path generation (red) in Bspline form with a certain control polygon (black) from a
given piecewise linear input curve (blue) within a certain
tolerance deﬁning a channel (green). (b) Symmetric solution for single angles. (c) Symmetric solution for turns.

2

• it passes through Ps and Pe ;
• it is tangential to Ts at Ps , and to Te at Pe ;
• the arcs join in G1 continuity.

Related Work

The solution is given in form of P1 = P0 + αTs ,

A method for obtaining a smooth, jerk-bounded feed
rate proﬁle in high-speed machining has been developed
in papers about adaptive interpolation for NC machining
[10, 11]. Those studies propose a NURBS interpolator
based on adaptive feed rate control with a look-ahead algorithm. By using a windowing scheme the feed-rate proﬁle, obtained after look-ahead, is re-interpolated to obtain a
continuous velocity and acceleration proﬁle which reduces
the jerk related problems (see Figure 2).

P2 =

α
β
P1 +
P3 and P3 = P4 + βTs ,
α+β
α+β

where α and β are scalar values, such that |P1 P2 | = α
and |P2 P3 | = β. The method is a fast and useful in engineering applications, where simple curves are required to
drive machine tools, or where the application necessitates a
piecewise curve with piecewise constant curvature. However, it only generates G1 -continuous curves and curvature
control is limited.
A standard local approximation scheme is provided in
the NURBS book [8] produce a nonrational G1 –continuity
cubic B-spline curve. It provides a fast solution for simple initial data. The details of this approach are described
in Section 3.4. We build upon this idea to create a new approach for the generation of G2 -continuous cubic B-spline.
This extension is described in Section 3.5.
The latter three approaches take care about how far the
control points move from initial points. Our goal is to keep
the curve inside the tolerance band. Closeness of the control points to the initial points is not required. We use the
idea of smooth paths in a polygon channel to achieve this.
The details are given in Section 3.5.

3
3.1

Figure 2: Adaptive parametric interpolation scheme with
limited acceleration and jerk values for NC machining
[10]. As we arrive at the decreasing starting point, the feed
rate must be reduced. However, the feed rate depends on
the radius of curvature. To achieve the point with the lowest feed rate, the feed rate is adaptively adjusted such that
the error does not exceed the allowable maximum value.
There is no adjustment of the milling curve beforehand.
All the calculations are taking place during milling by minimizing an error between the interpolated path and the gen-

Smooth Path Generation
Overview

As part of our approach, we build upon two existing
algorithms. For complicated regions of the path we apply the idea of threading splines through 3D channels (see
Section 3.3), for simple ones we use the idea of local nonrational cubic approximation (see Section 3.5). The former algorithm provides us a solution with the curvature
close to optimal. However, this algorithm involves timeexpensive calculations using methods from linear programming. Though the second algorithm provides acceptable

520

If a sharp corner is reported before the group reaches the
nahead point, the group is marked as complicated and we
keep on adding points. A complicated group is ﬁnalized
when nahead points have been added since the last sharp
corner and no new sharp corner has been reported by the
look ahead. If the look ahead reports a sharp corner but
we are about to exceed the nmax restriction, we investigate the angles of the last 2nahead −1 points, and ﬁnish the
group with the point that is situated in the middle of the two
look-ahead points with the sharpest corners. It prevents the
group to stop at the input point with the sharpest corner.

approximation results only for the simple parts of the workpiece, it is substantially faster than the ﬁrst one. Since
an average workpiece consists mostly of simple parts, the
computation times of our combined algorithm are signiﬁcantly lower.
Our method can be described by the following steps:
• Split the sequence of initial points into small groups.
• For each group, estimate all properties of the current
group and decide which algorithm to apply (see Section 3.2) and generate the solution for the group using the appropriate algorithm (see Sections 3.3 and
3.5).
• Connect all groups to one B-spline curve (see Section 3.6).

3.2

Splitting into Groups

As a ﬁrst step, we need to partition the given curve
into small curve segments. As the input curve is given
as a sequence of points, the curve segments are represented as groups (or sequences) of consecutive input
points. We want to distinguish between simple and complicated groups. As handling complicated groups will be
done in a more time-consuming processing step, it is desirable to keep the number of complicated groups as small
as possible and to keep the complicated groups themselves
as small as possible. A complex group is a group that contains at least one sharp corner, i.e., an angle smaller than a
certain threshold αsharp . Consequently, simple groups are
those with no sharp corners.
We implement different grouping criteria based on the
distances between consecutive input points and the incident angles between the two edges connecting three consecutive input points.
First, we deploy some global splitting criteria. As processing time for groups increases superlinearly with increasing group size, groups shall not exceed a certain upper limit of points nmax . Also, very long distances between consecutive points may make it difﬁcult to optimize
for curvature. Hence, if two consecutive input points exhibit a distance larger than a certain threshold dmax , the
two points shall belong to two different groups.
To make the simple groups as large as possible, we proceed as shown in Figure 3. We iterate through the points
of the input curve. When a new group contains more than
ﬁve points with no sharp corner, we generate a new group
that is marked as simple. We keep on growing that group
until the maximum number of points nmax is reached
or we are approaching a sharp corner. To detect an approaching sharp corner, we use a look-ahead method of
nahead points. If this look ahead reports a sharp corner, we
ﬁnalize the simple group and start a complicated group.

Figure 3: Complicated and simple regions.
The described solution produces complicated groups of
minimum size. Moreover, the solution for a complicated
group with a single sharp corner is symmetric in the sense
that the sharp corner is at the middle point of the group,
see Figure 4. Such a symmetric solution is desirable for
milling applications, as it ensures that the milling result to
both sides of the sharp corner is similar.

Figure 4: Symmetric solution for a single corner point.
Such a symmetric behavior is also desirable when dealing with a group of multiple sharp corners. In particular,
a common geometric feature of milling paths is that of a
turn, i.e., a small sequence of points where the direction of
milling in changed to its inverse direction at some offset.
We handle such turns explicitly to assure that the middle of
the turn corresponds to the middle of the generated group.
Depending on which criterion caused the formation of
a group, we have different methods of how a group is to
be connected with the subsequent group when generating the overall curve. We distinguish between two types
of connections, namely a line connection and an overlapping connection. As mentioned above, if we have a pair
of neighboring points ak and ak+1 in distance more than
dmax , we are ﬁnalizing the current group with the point
ak and start the next group with point ak+1 . This type of

521

connection is what we call a line connection. Examples for
line connections are shown in Figure 5.

To fulﬁll continuity requirements, we insert three additional points lying on the line ak ak+1 such that each inserted point has distance dline from the previous point. We
adjust the two groups by adding the three additional points
to the end of the ﬁrst group (i.e., after ak ) and to the beginning of the second group (i.e., before ak+1 ). When optimizing the curve segments as described in the subsequent
sections, we restrict the solutions to keep inserted points
on the line ak ak+1 .
Figure 6: Necessity for overlapping connection at critical
area.
The generated groups are sufﬁciently small to efﬁciently generate optimized solutions using the algorithms
described in Sections 3.3 and 3.5. However, in some cases
the algorithms cannot ﬁnd a solution. If that happens, additional points are added to the initial sequence and the algorithms start over again with the reﬁned point sequence.
In our experiments, it turned out that this successive reﬁnement and optimization step can be rather computationally
intense. Instead, we empirically found a criterion that estimates whether this reﬁnement step is likely to happen. If
yes, we insert points beforehand, which can signiﬁcantly
reduce the computation costs. Using the notations of Figure 7, the criterion can be formulated as follows: We insert
the midpoint between B and C, if the angle α at B is small
and the distance between B and C is large when compared
to the tolerance of the channel. Those two criteria are
combined such that the midpoint is inserted, if the point
(cos(α), ||BC||/ ) lies above the graph of the empirically
found curve shown in Figure 7.

Figure 5: Line connections between groups of points that
are further apart than distance dmax .

Note that individual points can form a group, if they are
more than distance dmax away from both its preceding and
succeeding point. In this case that single point is connected
with two line segments in a symmetric fashion as shown in
Figure 4.

If two successive groups have not been separated by the
maximum-distance criterion, the two groups are close together and, in general, have not been split in an area of low
curvature. Figure 6 shows such a critical area, where the
two groups come together at an area of rather large curvature. In this case, it is likely that the optimization of the ﬁrst
group generates a solution with the endpoint on the border
of the tolerance channel. This fact will make it hard to produce a G2 -continuous transition with low curvature terms
between the two groups. Thus, we want the two groups
to overlap, i.e., we want the groups to share a small area.
Consequently, we call this connection an overlapping connection. The overlap is handled as follows: we ﬁrst get
a solution for the ﬁrst group and then we insert at the beginning of the second group ﬁrst overlapping point and for
next to points present G2 -continuity restrictions (see Section 3.6). Now the starting point of the second group, in
general, lies well within the tolerance channel making it
easier to construct a good solution for the second group.

Figure 7: Point insertion criteria. If the ||BC|| divided by
the tolerance lies above the graph of the curve then we
insert the midpoint between B and C.

522

3.3

Over the interval [u∗k , u∗k+1 ] the contribution of the i-th
B-spline to the distance between a spline and its control
polygon is captured by the non-negative and convex functions

Local Sleeve Approach for Complicated
Groups

The handling of complicated groups is done by executing a local method based in the slefe approach by Lutterkort and Peters [2, 3, 4]. Slefe is short for “subdividable
linear efﬁcient function enclosure”. The idea is to generate
two polygons that represent lower and upper boundaries
of a given B-spline curve. The construction can be generalized to curves in space by applying the construction in
both coordinate-axis directions of the underlying 2D domain, see Figure 8. It is, then, referred to as the sleeve approach. After construction of the piecewise linear sleeve, it
it is sufﬁcient to constrain this sleeve rather than the original nonlinear curve to stay within the channel. Carefully
formulated, this approximation results in a linear feasibility problem that is solvable using linear programming.
The construction of a sleeve around the spline curve is
equivalent to enclosing the spline curve with linear pieces.
However, in the channel problem, the coefﬁcients of the
spline curve are unknown and are sought as the solution of
the feasibility problem.

βki (u∗k )

¯
k
∗
∗
d
j=i (uj − ui )Nj ,
i
∗
∗
d
j=k (ui − uj )Nj ,

:=

i > k,
i ≤ k,

(1)
(2)

where k¯ and k are the indices of the ﬁrst and last ( at most)
d + 1 B-spline basis functions Njd whose support spans u∗k .
Then, we can formulate the restrictions for our curve by
e(u) ≤ C(u) ≤ e¯(u)
where
∗
Δ+
i βki (uk ),

e¯(u) = l(u) + L(
i

∗
Δ+
i βk+1,i (uk+1 )),
i

∗
Δ−
i βki (uk ),

e(u) = l(u) + L(
i

∗
Δ−
i βk+1,i (uk+1 )),
i

where u ∈ [u∗k , u∗k+1 ] and
L(a1 , a2 ) = a1

The constraints force the sleeve, and thus the spline, to
stay inside the channel. We solve the linear programming
problem using a simplex approach. The target function we
m−1
−
+
intend to minimize is i=1
j∈{x,y,z} (Δi,j + Δi,j ). By
minimizing the absolute second differences we are minimizing the curvature of the spline. Sometimes the constraints cannot be met. In this case, we need to insert further points as described in 3.2.

Figure 8: Sleeve e¯ e and channel.
Given a B-spline curve
m

C(u) =

Pj Njd (u),

3.4

j=0

j+d

=

ui /d,
i=j+1

i.e. l(uj ) = Pj .
The weighted second differences Δ2 Pi of the control
points are deﬁned as
Δ2 Pi = Pi+1 − Pi ,

Pi =

Local G1 - continuous Approximation for
Simple Groups

In this section, we present the approach by Piegl [8] to
generate G1 -continuous approximations and how it can be
applied in our context to the local approximations for simple groups. In Section 3.5, we generalize the ideas to generate G2 -continuous approximations.
Given a short sequence of initial points qk , . . . , qk+n ,
we try to approximate them by ﬁtting a B´ezier curve of the
degree three that stays within in the channel. As B´ezier
curves are endpoint interpolating, we set the ﬁrst and last
point P0 and P2 of the B´ezier curve to the ﬁrst and last
point qk and qk+n of the given sequence, respectively (see
Figure 9). We must determine two inner control points P1
and P2 with

with control points Pj . Let the B-spline basis functions
Njd of degree d be deﬁned over a knot vector (uk ). The
control polygon l(u) of the spline is the piecewise linear
interpolant to the control points Pj at the Greville abscissa
u∗j

u∗k+1 − u
u − u∗k
+
a
.
2
u∗k+1 − u∗k
u∗k+1 − u∗k

Pi − Pi−1
u∗i − u∗i−1

P1 = P0 + αTs

+
In addition, we deﬁne Δ−
i = min{0, Δ2 Pi } and Δi =
max{0, Δ2 Pi }.

and P2 = P3 + βTe ,

where Ts and Te are the start and end unit tangents. The
unit tangents Ts and Te as well as the values for α and β

523

Using the notations of Figure 11, we set

are deﬁned by the continuity constraints with the preceding
and succeeding group. The resulting control polygon with
control points P0 , P1 , P2 , and P3 determine the sought
B´ezier curve.

P0 = qk ,

R3 = qk+n

The endpoint interpolation property assures C 0 continuity. To assure G1 -continuity, we set
P1 = P0 + αTs

and R2 = R3 + βTe ,

as in 3.4 and for G2 -continuity at the group’s beginning
we set
P0 − 2P1 + P2 = A,
where A is determined by the preceding group (or A=0 for
the ﬁrst group, i.e., if k=0). The respective continuity requirements where the two B´ezier curve stitch together are
given by

Figure 9: Local G1 -continuous B´ezier curve approximation.
For a longer sequence of input points, the solution may
be a rather crude approximation. It needs to be checked
whether the approximating curve fulﬁlls the error tolerance
constraints. If not, it needs to be further reﬁned. To check
for validity, we build the tolerance channel and the sleeve
as described in Section 3.3. If the sleeve lies inside the tolerance channel, the approximation is sufﬁciently precise. If
not, we reduce the number of input points of the sequence
by removing the last point and try to solve for the reduced
sequence.
If the sequence only consists of two points, it cannot be
further reduced and we have to insert an additional point.
In general, we insert the midpoint of the two input points.
In the case, where the two tangents point in opposite directions (i.e., the angle between start and end tangent is larger
than the angle between start tangent and AB and larger
than the angle between end tangent and AB) as in Figure 10, inserting the midpoint would lead to oscillations.
Instead, we try to minimize curvature by shifting the midpoint in the direction of the start tangent when projected
onto the plane perpendicular to the line that connects the
input points. The shifting distance is equal to the distance
between the midpoint and the intersection point of the start
tangent vector and the mentioned plane. The upper shifting
limit is 0.7 .

P3
P2 − P3
P1 − 2P2 + P3

Figure 11: Local B´ezier curve approximation with G2 continuous connections.
We, again, perform a validity check of the derived solution and reﬁne the input sequence when necessary, see
3.4.

3.6

Combining Groups

Having described the local approximation schemes, we
still need to explain how to obtain one global B-spline
curve over a single knot sequence using the local schemes.
We have to assure G2 -continuity at the connections. In
case of a line connection, the construction described in
Section 3.2 of choosing boundary control points on the
connecting line delivers G2 -continuity.
For an overlapping connection of two groups, we need
to distinguish whether the ﬁrst group is a complicated or
a simple one. If the ﬁrst group is a complicated group,
we calculate a new control point P lying on the curve.
We obtain this by double knot insertion (see Figure 13),
cutting off the control points after point P , and adjusting
the knot sequence. The second group will then start with
point P. We did not modify the shape of the ﬁrst group’s
curve. If the ﬁrst group is a simple group, we delete the
last few control points until we ﬁnd a control point that
was an input point. Since B´ezier curves are endpoint interpolating, we can start the second group with that control
point. When solving for the second group, we have to pick

Figure 10: Moving inserted point to avoid oscillation.

3.5

= R0 ,
= R 0 − R1 ,
= R0 − 2R1 + R2 .

Local G2 - continuous Spline Approximation
for Simple Groups

Following the ideas described in Section 3.4, we generate a local approximation scheme for simple groups using
two cubic B´ezier curves to assure G2 -continuous connections. Given a sequence of input points qk ,..., qk+n , we
set the ﬁrst control point of the ﬁrst curve and the last control point of the second curve to qk and qk+n , respectively.

524

the ﬁrst three control points of that group such that G2 continuity is achieved. G0 -continuity requires that the last
control point of the ﬁrst group has to be equal to the ﬁrst
control point of the second group, for G1 -continuity we
need to have the proportional tangent vector of the adjacent
parts, and the G2 -continuity condition requires is equality
of the second derivatives of the adjacent parts. Using notations of Figure 12, we obtain:
Pk
Pk−1 − Pk
||Pk−1 , Pk ||
Pk−2 − 2Pk−1 + Pk

As parameters for our experiment, we deﬁne distance
measures as multiples of the tolerance , which is half
of the width of the channel. A good value for the distance threshold dmax for splitting into separate groups was
found to be dmax = 300 . Accordingly, the distance
dline for point insertion on a line connection can be set
to dline = 16 . An angle is reported as a sharp corner,
iff its cosine is smaller than cos(αsharp ) = −0.85. A
good tradeoff in terms of computation time for solving individual groups and for splitting and joining overhead was
found by setting the maximum number nmax of points per
group to nmax = 50. The look ahead nahead shall be
small to keep complicated groups small, and we set it to
nahead = 5.
First, we want to investigate the effectiveness of the categorization of groups as simple or complicated. Figure 14
shows the points belonging to simple groups in blue and
the ones belonging to complicated groups in yellow color.
It can be observed that the more time-consuming algorithm
of Section 3.3 is only used in high-curvature areas, while
the more efﬁcient algorithm of Section 3.5 is used in lowercurveture areas, as desired.

= R1 ,
R1 − R2
=
,
||R1 , R2 ||
= R1 − 2R2 + R3 .

Figure 12: Connecting groups with G2 -continuity.

Figure 13: Double knot insertion to generate a control
point P on the curve, where the curve can be cut off. Picture generated using [13]

4

Results and Discussion

For our experiments, we used two real-world examples,
namely a reversible plate workpiece with a milling path of
5,952 input points and a comb structure with a milling path
of 15,768 input points, see Table 1.
Workpiece
# Points combined local sleeve

5,952

35s

6min 28s

15,768

37s

5min 39s

Figure 14: Our algorithm combines a local sleeve-like algorithm (yellow control points) with a local B´ezier approximation (blue control points).
Next, we want to compare the computation times of our
combined approach with (1) the classic sleeve approach as
proposed by Lutterkort and Peters, (2) the sleeve approach
when applied locally (Section 3.3) to all groups after splitting, (3) the local B´ezier approximation (Section 3.5) when
applied successively without our grouping, and (4) the local B´ezier approximation (Section 3.5) when applied locally to all groups after splitting. As it was infeasible to run
the classic sleeve approach to any of the presented workpieces, we restricted ourselves to the two outer loops of the
reversible plate workpiece. While the classic sleeve approach required 1, 325.0s, its combination with our splitting reduced the time to 2.14s. Even faster is the local

Reversible plate

Comb structure
Table 1: Computation times for two real-world workpieces.

525

B´ezier approximation with 0.093s, which with our grouping was further reduced to 0.078s. Our combined approach
required 0.487s, which means that the classic sleeve approach took about 2, 721× the time and the local sleeve
approach with our grouping took about 4.4× the time.
For the entire workpieces, we compared our combined
approach to the local sleeve approach with our grouping.
Table 1 reports computation times that are about one order
of magnitude less for the combined approach.
To investigate the correctness of our approach, Figure 15 shows a zoomed-in view of an area with sharp corners next to straight lines. We can observe that the curve
always stays within the tolerance channel, while exhibiting
a smooth behavior.
Figure 17: Results of local sleeve (left), local B´ezier
(right), and combined approach (middle) with our grouping.
We further investigated this by explicitly computing
curvatures for the results generated by the three approaches. Figure 18 shows curvature plotted on a logarithmic scale over the arclength of the resulting curve. It can
be seen that the local B´ezier approach is, indeed, producing
curves with higher curvatures, and that the combined algorithm tries to avoid that by switching to the local sleeve
approach for the complicated groups.

Figure 15: Smooth curve (blue) within tolerance channel
(green) at sharp corners.
A special handling was proposed for turns. Its effectiveness is shown in Figure 16. A symmetric and similar result
is achieved for all turns.

Figure 18: Curvature plots of local sleeve (left), local
B´ezier (right), and combined approach (middle) over the
curve’s arclength using a logarithmic curvature scale.
Moreover, Figure 19 shows areas of high curvatures for
the results generated by the three approaches. It can be
seen that the local B´ezier approach is producing high curvatures in areas where the other two approaches can generate curves with lower curvatures.
Another undesirable property of curves that are used as
milling paths is that of oscillation, even when curvatures
are low. We also detected areas of oscillation for the results
generated by the three approaches, see Figure 19. Oscillations are detected in form of inﬂection points after projection into the 2D domain. It can be observed that the local
B´ezier approach is producing oscillations in many areas
where the other two approaches do not produce any.

Figure 16: Behavior at turns: Non-symmetric without
(left) and symmetric with additional treatment (right).
We compare the quality of the three local approaches
with our grouping, i.e., local sleeve (left), local B´ezier
(right), and combined approach (middle), in Figure 17. It
can be observed that the local B´ezier approach is producing
undesirable results, as there seem to be higher curvatures
involved and the “offset curves” do not exhibit such a similar shape.

526

feed back, provided data and cooperation. We also thank
Paul Rosenthal and Steffen Hauth for a lot of useful talks.

References
[1] Abdulwahed Abbas, Ahmad Nasri and Takashi
Maekawa. Generating B-spline curves with points,
normals and curvature constraints: a constructive
approach. The Visual Computer. Springer, 26(68):823-829, 2010.
[2] Ashish Myles and J¨org Peters. Threading splines
through 3D channels. Computer-Aided Design,
37(2):139-148, 2005.
[3] David Lutterkort and J¨org Peters. Tight linear
envelopes for splines. Numerische Mathematik,
89(4):735-748, 1999.

Figure 19: Upper row: High-curvature areas (more than 1)
of the resulting curves for local sleeve (left), local B´ezier
(right), and combined approach (middle) are marked with
green color. Lower row: Areas of oscillation of the resulting curves for local sleeve (left), local B´ezier (right), and
combined approach (middle) are marked with blue color.

5

[4] David Lutterkort and J¨org Peters. Smooth path in
a polygon channel.In: Proceedings of the 15th annual symposium on Computational Geometry. ACM
Press, 316-321 1999.

Conclusions

[5] H.Prautzsch and W.Boehm and M.Paluszny. B´ezier
and B-Spline Techniques. Springer, 2002.

We created an algorithm for generating a B-spline curve
with optimized curvature that stays within a channel constructed around an input curve with given tolerance. To obtain an acceptable quality-speed ratio, we combine two algorithms: a local version of the sleeve-algorithm and a local B´ezier approximation with G2 -continuity connections.
The local schemes are applied to curve segments that need
to be combined with G2 -continuity smoothness. Two types
of connections were introduced. The splitting of the original curve into groups is performed with respect to the underlying application and the complexity of the groups. The
local B´ezier approximation algorithm is very efﬁcient and
produces good results for simple groups, while the local
sleeve algorithm is less efﬁcient but produces high-quality
results even for complicated groups. For efﬁciency purposes, we keep complicated groups as small as possible
and introduce a heuristic that inserts further points to a
group when it is likely that no solution can be found.
The created algorithm can be used as a part of a micro
milling process. This approach provides new possibilities
for calculating velocity, acceleration, and jerk proﬁles. The
beneﬁts that proﬁles are easier to compute - and that the
milling can generally be performed with a higher velocity
is generally higher than the velocity. The latter is essential
for practical purposes, since the higher is the velocity of
the tool tip the faster is the manufacturing process.

6

[6] J¨org Peters and Xiaobin Wu. Sleeves for planar
spline curves. Computer-Aided Design, 21(6):615635, 2004.
[7] Les A. Piegl. On NURBS: a Survey. IEEE Computer
Graphics and Applications, 11(1):55-71, 1991.
[8] Les A. Piegl and Wayne Tiller. The NURBS Book.
Springer, 1997.
[9] Les A. Piegl and Wayne Tiller. Data approximation
using biarcs. Engineering with Computers. Springer
18:59-65 , 2002.
[10] Rong Zhen Xu, Le Xie, Cong Xin Li, and Dao Shan
Du. Adaptive parametric interpolation scheme with
limited acceleration and jerk values for NC machining. The International Journal of Advanced Manufacturing Technology. Springer, 36(3-4):343-354, 2008.
[11] Xianbing Liua, Fahad Ahmada, Kazuo Yamazakia,
and Masahiko Mori. Adaptive interpolation scheme
for NURBS curves with the integration of machining
dynamics. International Journal of Machine Tools and
Manufacture. Elsevier, 45(4-5):433-444, 2005.
[12] Xujing Yang and Zezhong C. Chen. A practicable approach to G1 biarc approximations for making accurate, smooth and non-gouged proﬁle features in
CNC contouring. Computer-Aided Design. Elsevier,
38(11):1205-1213, 2006.

Acknowledgments

This work was supported by BMWi within the InnoNet
program under grant number 16IN0653. This work is
done within the Knowledge Based Adaptive Micro Milling
project. We like to thank Thorsten Schreiner, Lothar Glasmacher, Monika Mallok and Benedikt Gellißen from IPT
Fraunhofer, Aachen, Germany, for valuable comments and

[13] http://i33www.ira.uka.de/applets/.

527

