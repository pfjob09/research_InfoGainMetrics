Fitting Curve to Planar Digital Data
Muhammad Sarfraz
Department of Information and Computer Science
King Fahad University of Petrolium and Minerals
KFUPM # 1510, Dhahran, Saudi Arabia.
Email: sarfraz@kfupm.edu.sa

Abstract
An optimal curve fitting technique has been
developed which is meant to automatically provide a fit
to any ordered digital data in plane. A more flexible
class of rational cubic functions is the basis of this
technique. This class of functions involves two control
parameters, which help to produce optimal curve fit. The
curve technique has used various ideas for curve design.
These ideas include end-point interpolation, intermediate
point interpolation, detection of characteristic points,
and parameterization. The final shape is achieved by
stitching the generalized Bezier cubic pieces with C1
smoothness.

1. Introduction
Designing of curves, especially those curves which
are robust and easy to control and compute, has been one
of the significant problems of Computer Graphics.
Specific applications including Font Designing,
Capturing Hand-Drawn Images on computer screens,
Data Visualization, and Computer-Supported Cartooning
are main motivations towards curve designing. In
addition,
various
other
applications
in
CAD/CAM/CAGD are also a good reason to study this
topic. Many authors have worked in this direction. For
brevity, the reader is referred to ([2-7]).
In curve designing, the class of rational cubic
functions, is one of the most powerful tools. They can
define space curves and curves with inflections [2]. This
paper presents a simple and effective method for optimal
curve design for an economical smooth curve fit to a
large digital data.
The methodology, in this paper, differs to the
traditional approaches. It is multipurpose and can solve
problems, of various natures, in minimal cost and under
the same umbrella. It also demonstrates the output in a
visually pleasant way as the spline model is C1 smooth. It

also differs in the sense that it is based on appropriately
computed parameters in the description of the rational
spline model. A major difference lies with the
subdivision methodology to conquer the desired solution.
Another major difference lies in the curve model for the
description of design curve. The outline capturing
technique, instead of traditional Bezier cubics, is based
upon a rational cubic model.
The subdivision process, in this paper, is managed as
follows. In the case of large data points, the significant
points are located. These significant points are identified
by manipulating high curvature points by modifying the
Davis [1] algorithm. Then, if needed, it modifies and
enhances the list of significant points by introducing
intermediate points. This idea of intermediate points,
again, assists in the further subdivision. The collection of
all these points will be called as characteristic points
through out the paper. The characteristic points play
important role in the overall display of the final shape.
The rational cubic is converted to rational cubic
Hermite formulation for the manipulation of the curve
segment, which interpolates the two endpoints of the
curve segment and the consecutive pieces of curve
segments have equal tangents at each characteristic point.
Accordingly, the design curve will be C1 continuous. In
addition, the proposed curve model has the property to
interpolate an intended intermediate point, which can be
of great help for the optimal fit.
The organization of the paper is made as follows.
Section 2 explains briefly the rational cubic segment and
its various properties including the intermediate point
manipulation. The piecewise design curve method is
explained in Section 3 together with a choice of distancebased tangent approximations at characteristic points.
The issue of subdivision, by detecting the characteristic
points (significant points and intermediate points), is
discussed in Section 4. Section 5 summarizes the whole
discussion in the form of an algorithm. Section 6 is
meant for the demonstration and Section 7 concludes the
paper.

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

(e)

2. Rational Cubic Interpolant
Let P0 , P1 be the end points and T0 , T1 be the end
tangents of a curve segment, then the rational cubic
Hermite function manipulating the curve segment is
P0 (1 − t ) 3 +
P( t ) =

vP0 ,1 t (1 − t ) 2 + wP1,1 t 2 (1 − t ) + P1 t 3
(1 − t ) 3 + vt (1 − t ) 2 + wt 2 (1 − t ) + t 3

2.2.
,

(1)

where
P0,1 = P0 + T0 / v 

P1,1 = P3 − T1 / w 

(2)

v, w ≥ 0

(3)

and

(f)

If v, w → ∞, then the curve exhibits the interval
tension behavior and approaches to the linear
interpolant.
If v , w → 0, then the curve gets loosened. The
curve bulges outside the convex hull for negative
values. Thus, a relatively looser curve, as compared
to Bezier cubic curve, is also achievable.

From (1), it can be verified that

Intermediate Point Interpolation

Definition 1. A point S, on a curve P(t), t∈ (0,1), will be
called an intermediate point if P(t)=S for t ∈ (0,1).
In certain applications, where an optimally good fit is
needed, it is desired to subdivide some of the curve
pieces at appropriate intermediate points. Interpolation of
an intermediate point may be a very useful tool in
controlling a curve. The parametric curve defined by (1)
can be used to interpolate an intermediate point. If
P0 = (x 0 , y 0 ); P0,1 = (x 1 , y 1 );

P(0) = P0 , P(1) = P1 ,
P' (0) = T0 , P' (1) = T1 .

P1,1 = (x 2 , y 2 ); P1 = (x 3 , y 3 ); S = (x s , y s )

Thus the curve segment obtained by (1) is C1 . Equation
(2) represents the tangents in terms of the given control
points and the shape parameters. Equation (1) can be
written as

and S is an intermediate point with a parametric value u
then P(u) = S implies the following:

P( t ) = R 0 ( t )P0 + R 1 ( t )P0,1 + R 2 ( t )P1,1 + R 3 ( t )P1

(4)

v=

F0 (u )A + F3 (u )B
F2 (u )E

(6)

w=

F0 (u )C + F3 (u )D
F1 (u )E

(7)

and
where function R i , i = 0,1,2,3 are Bernstein Bezier like
basis functions such that
3

∑ R i (t ) = 1 .

(5)

where
F0 (u ) = (1 − u )



F1 (u ) = u (1 − u ) 
,
F2 (u ) = u 2 (1 − u ) 

F3 (u ) = u 3

3

i =0

2

It shows that the curve segment will always lie in the
convex hull of the control points.

2.1.

Some Observations

and

We observe the following properties of the
interpolant defined by equation (1)
(a) For v = w = 3, the rational cubic vanishes and we
are left with a cubic (Bezier Cubic).
(b) The curve always passes through P0 and P1 .
(c) If v → ∞, then the curve exhibits the biased
tension behavior to the left and is pulled towards
the control point P0 .
(d) If w → ∞, then the curve exhibits the biased
tension behavior to the right is pulled towards the
control point P1 .

A = (x 0 − x s )(y1 − y s ) − (x 1 − x s )(y 0 − y s ) 

B = (x 3 − x s )(y1 − y s ) − (x 1 − x s )(y 3 − y s ) 

C = (x 2 − x s )(y 0 − y s ) − (x 0 − x s )(y 2 − y s ) .
D = (x 2 − x s )(y 3 − y s ) − (x 3 − x s )(y 2 − y s )

E = (x 2 − x s )(y1 − y s ) − (x 1 − x s )(y 2 − y s ) 

(8)

(9)

For different values of u ranging form 0 to 1, we will
have different values of v and w. Thus, we get different
curves passing through S. In this case u can be used as a
shape parameter. If u → 0 the part of the curve segment
between P0 and S will be tightened and if u → 1 the

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

part of the curve segment between S & P1 will be
tightened.

For Close Curve:
F−1 = Fn −1, Fn +1 = F1 ,


 (15)
D i = a i (Fi − Fi−1 ) + (1 − a i )(Fi+1 − Fi ), i = 0,.., n ,

3. Interpolating Design Curve
Let us generalize the idea of curve design for any
given data set. Using the method explained in Section 2,
we can generate the curve segments for any given
number of data points. Joining these segments, we can
generate the desired Design Curve. The curve thus
obtained will be C1 . The procedure for curve design is as
follows.
Let Fi ∈ R m , i ∈ Z, be data values given at the
distinct knots

t i ∈ R , i ∈ Z,

with interval spacing

h i := t i +1 − t i > 0. Also, let Fi ∈ R , i ∈ Z, denote the
first derivative values defined at the knots. Then the
generalized form of the rational cubic, in the form a
parametric C1 piecewise piecewise rational cubic

where
ai =

| Fi +1 − Fi |
, i = 0,.., n.
| Fi +1 − Fi | + | Fi − Fi−1 |

(16)

This choice of tangents provides nice and pleasing
results.

4. Optimal Design Curve

m

Hermite function P : R → R m , is defined by
P | (t i , t i +1 ) ( t ) :=
(1 − θ i ) 3 Fi +
θ i (1 − θ i ) v i Vi + θ i2 (1 − θ i )w i Wi + θ i3 Fi +1

(10)

2

(1 − θ i )3 + v iθ i (1 − θ i )2 + w iθ i2 (1 − θ i ) + θ i3

When the data is too large, the interpolating scheme
in Section 3 may not be advisable to use as it costs too
much in terms of computations. For example, for a set of
100001 points, 10000 pieces are needed to be stitched.
Specifically, when the data points are closed to each
other, there is no need for so many segments to be
manipulated. Therefore, some other approach is needed
to be discussed so that an optimal and economical design
curve is achieved. The proposed method of curve fit, in
this section, consists of all the following steps.

,

where
θ i ≡ θ i (t ) = θ | (t i , t i +1 ) (t ) := (t − t i ) / h i ,
and
1
1
Vi := Fi + h i D i , Wi := Fi +1 −
h i D i +1 .
vi
wi

(11)
(12)

This form is more economical for computational
purposes. We have made use of a rational BernsteinBezier representation, where the control points
{Fi , Vi , Wi , Fi +1 } are determined by imposing the Hermite
interpolation conditions
P(t i ) = Fi and P (1) (t i ) = D i , i ∈ Z.

(13)

In most of the applications, the tangent information
are not provided. We define a distance-based choice for
tangent vectors D i at Fi as follows:

(a) The given data is subdivided at Characteristic points.
These Characteristic points are determined from the
given data points (the detail about the characteristic
points are given in the following Subsection 4.1)
(b) The spline method, in Section 3, is used for the
piecewise fit to the data points between two
consecutive characteristic points.
(c) If the design curve still needs improvement, the
parameters, in the description of the rational
function, can be utilized for the best fit. These
parameters are evaluated, using intermediate point
interpolation method in Section 2.2, in such a way
that the corresponding pieces of curves are optimal
to the given data.
(d) If the curve fit in (c) is not as optimal as desired,
further subdivision process is made at appropriate
data points; this will enhance the list of characteristic
points (this subdivision process is explained in
Subsection 4.2)

4.1.

Detection of Characteristic Points

For open curve:
D 0 = 2(F1 − F0 ) − F2 − F0 ) / 2,



D i = a i (Fi − Fi −1 ) + (1 − a i )(Fi +1 − Fi ),


i = 1,.., n − 1,

D n = 2(Fn − Fn −1 ) − Fn − Fn − 2 ) / 2.

(14)

The characteristic points are those points which
partition the data into various pieces. An approach based
on curvature analysis, with numerical technique, has
been proposed. The detection of the characteristic points
actually depends on how closed the data points are from
each other.

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

In the first step, the characteristic points are searched
on the basis of computation of high curvatures at each
data point. The strategy of this procedure is based on the
method of Davis [1]. For the details, the reader is referred
to [1].
The Second step is adopted to get further
characteristic points. We calculate the length of
polygonal line segments between each two consecutive
characteristic points (so far calculated) and the
corresponding data points in between.
If these calculated lengths are greater than the
defined threshold value, we break the segment into two
or more segments and take intermediate point as
characteristic point. This process is repeated until each
segment length satisfies the threshold value criteria. The
resultant set of characteristic points is finally utilized for
the piecewise curve generation.

4.1.

Piecewise Optimal Fit

We divide the whole set of data points into segments
in such a way that first and last point of all the segments
are characteristic points obtained by the methodology
explained in Subsection 4.1. Each segment will be an
ordered subset of the universal set of data points. A
piecewise treatment is made for the curve fitting
approach. All the pieces are stitched finally using the
method in Section 3. For each segment of the data points,
following procedure is adopted:
4.2.1.

Step 1

Suppose, for i = 0,1,2,......n − 1, the data segments

{

(

)

G i = Pi, j = x i, j , y i, j , j = 0,1,2,.....m + 1}

(17)

are given as the ordered sets of the universal set of the
data points. Then the squared distances d i , j ' s between

( )

Pi , j ' s and their corresponding points P t j ’s on the
curve are computed as:

[ ( ) ] ⋅ [P (u ) − P ]
= [P (u ) − P ] ,

d i, j = Pi u i , j − Pi, j

T

i

i, j

i, j

2

i

i, j

i, j

i = 0,1,2,......n − 1, j = 0,1,2,......, m + 1,

[ ( )

]

2

i = 0,1,2,......n − 1, j = 1,2,......, m,





i = 0,1,2,......n , j = 1,2,.....m i + 1

u i , j = u i, j−1 + | Pi , j Pi, j+1 |,

(18)

(19)

For each segment, if it is not as accurate as desired in the
default spline case when v i = 3 = w i , we use the
intermediate point method to improve the accuracy. We
will look for an intermediate points to achieve the best
optimal values of the corresponding shape parameters v’s
and w’s. For the best fitting of the curve to the given
data, we have to find out the parameters v i ' s and w i ' s
so that the squared distances d i, j ' s are minimal.
Obviously, we will look for those values of u i , j ' s in each

interval [t i , t i +1 ] for which the corresponding d i, j ' s are
highest. Such intermediate points, searched in each
interval, thus obtained will be desired characteristic
points. The parameters v i ' s and w i ' s can be solved by
the method given in Section.
4.2.2.

Step 2

Now, redraw the curve using the Intermediate Point
Interpolation method of Subsection 2.2. The spline curve
fitted in this way will be a good candidate of best fit.
There is a possibility that the spline curve, obtained
by the above process of Step 1, may not be satisfactory
and error to the original data outline may not be as
desired by the user. This error can be reduced by
subdividing the segments at the intermediate points.
Redraw the curve using the Intermediate Point
Interpolation method of Subsection 2.2.
4.2.3.

Step 3

After the Intermediate Point Interpolation method in
Step 2, however, still there is a possibility that the spline
curve obtained by the above process of Step 1 and 2, may
not be satisfactory and error to the original data outline
may not be as desired by the user. This error can be
reduced by subdividing the segments at the intermediate
points. Redraw the default spline curve method to the
updated characteristic points.
4.2.4.

Due to interpolation conditions, we have
d i, j = Pi u i , j − Pi, j ,

u i ,0 = t (i );

Step 4

If the output is yet to be corrected, the Steps 2 and 3
are repeated as long as the desired output is achieved.

5. Optimal Design Curve

where the parameterization over u’s is in accordance with
the chord length parameterization and is as follows:

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

This section summarizes various steps discussed in
this article. The desire of achieving an optimal fit, which
inherits the shape of the data, leads to an algorithm
discussed as follows.

150

100

5.1.

Algorithm
(a)

Step 1: Input the data points.

50

Step 2: Subdivide the data, in Step 1, by computing the
characteristic points using the method in Subsection 4.1.
0

Step 3: Compute the derivative values at
characteristic points.

0

20

40

60

80

100

120

140

the
150

Step 4: Fit the spline curve method, of Section 3, to the
characteristic points achieved in Step 2.
100

Step 5: If the curve, achieved in Step 4, is optimal then
GO To Step 7, ELSE locate the appropriate intermediate
points (points with highest deviation) in the undesired
curve pieces. Compute the best optimal values of the
shape parameters vi's and wi's. Fit the intermediate point
interpolation curve method, of Section 2.

(b)
50

0

Step 6: IF the curve, achieved in Step 5, is optimal then
GO To Step 7, ELSE enhance the list of characteristic
points by incorporating the intermediate points (points
with highest deviation) located in Step 5 and GO TO
Step 3.

0

20

40

60

80

100

120

140

150

100

Step 7: STOP.
The above mentioned scheme and the algorithm
have been implemented and tested for various data sets.
Reasonably quite elegant results have been observed, see
the following Section for demonstration.

(c)
50

0
0

20

40

60

80

100

120

140

6. Demonstration
150

The algorithm has been implemented for the data
obtained from the outline of a scanned image of the
British Pound character, see Figure 1(a). There are 563
data point in this outline. The significant points (circles)
detected are shown in Figure 1(b). The bullets are
representing the intermediate points obtained for the best
fit. Figures 1(c) and 1(d) are the first and second
iterations of the algorithm. The third and fourth iterations
are displayed in Figure 2(a) and 2(b) respectively. It is
important to note that the outline data has been
recovered, by an optimal fit, with only four iterations.
The threshold value (error tolerance) has been assumed
as 3 pixels. The scheme has demonstrated that a data of
563 points has been replaced with a data of 42 points
with this fitting technique.

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

100

(d)
50

0

0

20

40

60

80

100

120

140

Figure 1. (a) Digital data of “Pound”, (b)
Characteristic Points, (c-d) First and
second iteration for threshold value 3.

150

The threshold value (error tolerance) has been assumed
as 3 pixels. The scheme has demonstrated that a data of
563 points has been replaced with a data of 42 points
with this fitting technique.
The curve fit for the threshold values 2 and 1 is
shown in Figures 2(c) and Figure 2(d) respectively.
Decrease in the threshold results in the increase of the
characteristic points.

100

(a)
50

7. Concluding Remarks
0
0

20

40

60

80

100

120

140

150

100

(b)
50

0
0

20

40

60

80

100

120

150

We have described a scheme provides the best
optimal fit to a large amount of digital planar data. That
is, the data can be visualized with an optimal spline curve
fit with a little number of data points used from the
original data. A case study of two examples has been
made from the data collected for the outlines of fonts
from two different languages.

Acknowledgement
The author acknowledges the support of King Fahd
University of Petroleum and Minerals, against Project
No. FT/2000-03, in the development of this work. The
author also likes to thank referees for their valuable
comments in the improvement of this manuscript.

References
[1]

Davis, L., (1979), Shape Matching using Relaxation
Techniques, IEEE Trans. PAMI, Vol. 1, 60-72.

[2]

Farin, G. E. 1994. Curves and Surfaces for Computer
Aided Geometric Design, Academic Press, New York.

[3]

Hussain, F. (1989), Conic Rescue of Bezier Founts, New
Advances in Computer Graphics, Proceeding of CG
International'89, Springer-Verlag, Tokyo, 97-120.

[4]

Sarfraz, M, and Razzak, M. F. A., (2002), Automatic
Font Outline Capturing Through WEB, The Proceedings
of the Fourth KFUPM Workshop on Information and
Computer Science: Internet Computing (WICS’2002),
Saudi Arabia, ISBN: 9960-07-187-1, 237-251.

[5]

Sarfraz, M., and Khan, M. A. (2001), Automatic Outline
Capture of Arabic Fonts, Journal of Information
Sciences, Elsevier Science Inc., Vol. 140(3-4), 269-281.

[6]

Sarfraz, M., and Raza, S. A., (2001), Capturing Outline
of Fonts using Genetic Algorithm and Splines, The
Proceedings of IEEE International Conference on
Information Visualization-IV’2001-UK, IEEE Computer
Society Press, USA, 738-743.

[7]

Sarfraz, M, and Raza, A, (2002), Visualization of Data
using Genetic Algorithm, The Proceedings of the Fourth
KFUPM Workshop on Information and Computer
Science, Saudi Arabia, ISBN: 9960-07-187-1, 253-265.

100

(c)
50

0

0

20

40

60

80

100

120

140

150

100

(d)
50

0

0

20

40

60

80

100

120

140

Figure 2. (a-b) Third and fourth iterations
for threshold value 3, (c) Final iteration for
threshold value 2, (d) Final iteration for
threshold value 1.

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

