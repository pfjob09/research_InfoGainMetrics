Distortion for Readability of Contextualized Text Explanations
for Visualizations
Wallace Chigona and Thomas Strothotte
Department of Simulation and Graphics, University of Magdeburg
Universit¨atsplatz 2, D-39106 Magdeburg, Germany
{chigona|tstr}@isg.cs.uni-magdeburg.de

ABSTRACT
Dual-Use of Image Space (DUIS) is a new technique for
presenting text explanations for images within image space.
This, however, presents the problem of readability of the text
since readers are used to reading from rectangular windows,
on the other hand, a graphical object will typically have a
silhouette of an irregular shape. To improve the readability we have developed a technique called rectangularization,
i.e. on users’ request the selected object morphs into a rectangular window. In order to preserve the context for the
rectangularized object, as the selected object morphs into a
rectangle, the other objects in the scene also change shape to
create room for the newly created rectangle. On top of discussing the rectangularization concept, this paper discusses
the algorithm used to displace the other objects in the scene.
We also show the extension of the algorithms to allow for
multiple rectangularization.
Keywords
Dual-Use of Image Space, Text Explanation, Distortion,
Rectangularization
1

Introduction

The importance of providing textual explanations for images
has long been recognized. For example, despite the saying
that “a picture is worth thousand words”, the art historian
Gombrich [2] points out that “no picture tells its own story”.
Weidenmann [16], an educational psychologist examining
the use of images in learning, observes that text explanations
enhance the interpretation of images.
However, based on the multimedia principle of spatial contiguity, we know that the effectiveness of text explanations
does not depend only on the contents but also on its location
in relation to the corresponding image [13]. The spatial contiguity theory says that learning is improved when the text
and its corresponding image(s) are presented near to each
other. The improved learning is due to the following reasons:
1. The readers do not waste cognitive resources saccading
between the image and the text [13].

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

2. The readers may be able to hold both the text and
the image in the working memory simultaneously and
therefore they can more easily make referential links
between the two [4, 13].

To address this topic we proposed Dual-Use of Image Space
(DUIS), a concept for placing the text explanations for the
objects within their corresponding objects [5, 6]. See the
right-most image in Figure 1. In other words, the text explanation is contextualized in the image.
One of the challenges of presenting text in the image space
as is the case in DUIS, is that reading from the object surfaces may be difficult because of the shape of the object: On
one hand, readers are used to reading from rectangular regions (windows), on the other hand, a shape of a silhouette
of a graphical object is usually irregular. As a solution to
this problem, DUIS has an option where the reader can have
the shape of the object morph into a rectangular window, as
shown in right-most image in Figure 2. This process is called
rectangularization.
In order to preserve the context of the rectangularized object,
the other objects in the image have to remain visible. It is,
therefore, necessary to displace the other images (i.e. distort
their shapes) to create room for the rectangle (see Figure 2).
This type of rectangularization is called contextual rectangularization. Both the rectangularization and the displacement
algorithms are designed to reduce the likelihood of misinterpretation which, as Carpendale et al. [4] note, is highly
probable in view distortions.
In this paper we present the concept of rectangularization as
well the displacement algorithm. Here we note that the problem of rectangularization is unique and cannot, therefore, be
addressed by the existing distortion algorithms.
The rest of the paper is organized as follows: Section 2 discusses related work. Section 3 summarizes the concept of
Dual-Use of Image Space. Here we also discuss the concept
of smooth transition as well as the data structure for DUIS.
We present the rectangularization, displacement and multiple
rectangularization algorithms in Section 4. In Section 5 we
present overlay rectangularization, a form of rectangulariza-

Figure 1: Turning up legibility of an object. Text is introduced in the selected object in an animation, the images shown in this figure are some of the frames
in the animation sequence.

Figure 2: This figure shows some of the frames during rectangularization. In in-context rectangularization, the rest of the objects in the scene are also distorted
to create room to the rectangularized object.

tion where the scene remains undistorted. In Section 6 we
present concluding remarks and suggestions for future work.
2

Related Work: Distortion Algorithms

Detail in Context
The problem being addressed here is how to present details
within their context bearing in mind that in most cases there
is not enough space to present the whole image. This is
achieved by showing the region of interest in detail and the
rest of the image scaled down but nevertheless visible. The
general framework for this approach was presented by Furnas [8] and he called it fisheye view. Many variations of Furnas’s idea have appeared. In their book Readings in Information Visualization: Using Vision to Think, Card et al. [9]
group these variations in the chapter Focus and Context.
The distortion paradigms may be classified as either orthogonal or radial. In orthogonal distortion the area of focus is
stretched along one or two axes, at the same time the remaining area is compressed along the axes (e.g. the left image in
Figure 3). In radial transformation the transformation function is radial (e.g. the right image in Figure 3).
The distortion may also be achieved by the use perspective.
Here the focused area is presented closer to the view plane
and the other objects are positioned using a drop-off function.
In these approaches, even though the focused region gets
scaled up, the shape does not change as we are proposing in
DUIS. Even in cases where the technique has been applied
on text documents (e.g. perspective wall [12] and document

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

Figure 3: Left: Orthogonal distortion. Right: Radial distortion. Images
reproduced with permission from [3]

lens [14]), the text is already provided on rectangular windows and as such there is no need to change the shape of the
text “containers”.
Continuous Cartograms
A continuous area cartogram is a map transformation in
which the map regions are resized relative to the geographic
distribution of a data set. By spatially depicting an attribute
within the map base, the cartograms emphasizes each regions’ data instead of territorial land area. For a detailed discussion on cartogram construction algorithms see GuseynZade and Tikunov [10].
The cartogram algorithms, however, cannot be extended to
include changing the shapes of some of the objects in any
obvious way. In fact, one of the major goals of cartogram
algorithms is to preserve the shapes of the objects [10, 11].
What we find particularly interesting in continuous cartograms is that despite the change in size, the topography of

the map is maintained. This helps the readers comprehend
the distorted maps [4, 11].

3

Dual-Use of Image Space

In DUIS the textual information related to the object is displayed in image space and at the same time is used to simulate the shading of the object. In other words, the pixels in
the image space represent both text which can be read and,
at the same time, shading information in the images. One
of the major goals of DUIS is to achieve a smooth transition
between the representation of an object as an image and its
representation as a text.
To explain the concept, let us assume a scenario in which the
user is presented with an image and wishes to obtain textual
information about individual objects (individual elements of
the image) being displayed.
First, the user interacts with the image to select an object
about which he/she wishes to obtain textual information.
This is done by pointing and clicking. In previous systems,
the text would now be introduced into the image, either as a
label beside the object, or as a floating window next to the
mouse pointer. Alternatively, a document with text would be
opened, either in a separate window or in the same window
replacing the current image. Instead, DUIS is based on the
concept of the legibility of the object. The underlying principle is that every image is dithered with text, except that
without any manipulation the characters are too small to be
recognized.
After selecting an object, the legibility is increased in an animation. This means that over time (we have found that about
a second is sufficient) the characters comprising the text are
enlarged, starting from a predefined minimum size (say one
pixel) up to the point where the characters are large enough
to be recognized by human readers (say at least 8 points text).
From a technical point of view, the effect of turning up the
legibility is that the dither matrices used to render the selected object are enlarged quickly while the size and shading
of the object are kept constant. The effect of this is that as
the dither matrix size increases, characters become more and
more recognizable.
Figure 1 illustrates the concept of legibility of an object. The
image in this example is a part of the map of Germany and
the selected object the state of Saxony-Anhalt. The first image (from the left) shows a close-up rendition of the map.
Now the user turns up the legibility of the selected object
and the text is introduced in an animation until the characters
are fully recognizable as shown in the last image in Figure 1.
The second and third images are some of the frames in the
animation sequence. The text which appears in this example
is tourism information of the selected state.

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

3.1

Smooth Transition

As illustrated in Figure 2, rectangularization, just like any
other change of shape in DUIS, is realized in a smooth (continuous) transition. Smooth transition, as Bederson and Boltman [1] as well as Carpendale et al. [4] note, helps the readers to maintain the object constancy. Particularly, we draw
our lessons from research in cartograms (see Section 2). According to findings of Ware [15], when presented with static
cartograms, readers may have problems recognizing the regions of the map. However, the problem is greatly reduced
when the readers observed the transformation animation.
3.2

Data Structure

DUIS is vector based, i.e. objects are represented as polygons. Objects may have holes; however, self intersecting
objects are not acceptable. The polygons are stored in stacks
(one stack for each object). The polygon at the top of the
stack gets rendered, that is, when a new polygon is created,
it is pushed into the stack and when it is no longer needed, it
is popped. This data structure allows for smooth as well as
reversible transitions.
Morphing between two successive polygons in the stack is
done by lineally interpolating between the corresponding
vertices of the polygons. This requires, as is often the case,
that the polygons should have an equal number of vertices.
In some cases, however, the new polygon may have more
vertices than its predecessor (e.g. due to clipping in multiple rectangularization, see discussion in Section 4.2). In
such cases, before pushing the newly created polygon, another polygon with a shape similar to that of the last polygon
in the stack but an equal number of vertices as the newly
created polygon is created and pushed onto the stack.
4

Rectangularization

To ensure the readers’ comprehension of the distortions, the
algorithm meets the following criteria:
1. Maintain the topography, i.e. the positions of the objects relative to each other are maintained [4, 10, 11].
2. The image remains continuous [10, 11].
3. The distortion is minimized as much as possible [4].
4. The transitions are smooth as well as reversible [1, 4].
Size of rectangle
In most instances the final rectangle has the size of the rectangular bounding box of the object. This, however, may
not always yield pleasant results. We consider, among other
things, the length of a line of text: Below a certain threshold
the length of the line has negative effects on readability of
text [7]. For this reason, rectangles with widths below the
threshold are not acceptable. On the other hand, bounding

boxes of long objects, for example a river running across the
country, may take a lot of space. These problems are addressed by specifying minimum and maximum sizes of rectangles (users may adjust these values). The rectangle takes
the size of the bounding box only if the bounding box falls
within these bounds. When the bounding-box of an object is
below/above the bounds, then rectangle takes the size of the
specified minimum/maximum rectangle.

Given a vertex Q on the secondary polygon, the new vertex
Q , is calculated by first calculating a Point P on the original subject polygon such that P is the closest point on the
primary polygon from vertex Q. P is a point which is exerting force on Q. Q will be determined by the new position of
P , i.e. P . The challenge here is that P does not lie along
the P Q line as would be the case in a radial as well orthogonal transformations. This poses a problem in preserving the
topology of the image.

Distortion

In this case, to preserve the topology we need another point
which controls the change in vector Q. We call this point the
reference point (R). R is the point at which the line from P
through Q intersects the bounding box. Q is a point along
the line P R such that:

After deciding on the rectangle size, the rectangularization
algorithm allocates for each vertex on the polygon a corresponding point on the rectangle. The vertices allocation algorithm is illustrated in Figures 4.
First, choose four of the vertices which should be mapped
to the four vertices of the rectangle. To minimize the distortion, the rectangle vertices are assigned the polygon vertices
which are closest to the respective vertices of the bounding
box of the object (e.g. vertices c, f , g and i in Figure 4).
Then, for each of the remaining vertices, calculate positions
on the rectangle to which they can be mapped to (e.g. vertex
e is mapped to e ). This is achieved by lineally interpolating
between the points allocated to the angles of the rectangle.
4.1

Displacement

PQ
P Q
=
PR
P R
4.2

(1)

Multiple Rectangularization

As shown in Figure 6, an image may contain more than one
rectangularized object. This, as pointed out in [6], minimizes
the cognitive resources needed to compare information about
different objects. Rectangularized objects which do not intersect present no problem. Rectangles which would intersect each other in the contextual rectangularization, however,
deserve special consideration, since if this happened, some
text would be obstructed.

First some of the terminology is used in the discussion:
• primary polygon/object: The object which is changing
shape in direct response to the user’s action, in this case
the polygon being rectangularized.
• secondary polygon/object: The object which is changing shape in response to changes in a primary object.
The algorithm used to distort the secondary polygons works
as follows: As the primary polygons changes into a rectangle
it pushes the other polygons outward (or pulls them in, if the
rectangle is smaller than the bounding box). Figure 5 illustrates how a secondary polygon is distorted (the summary of
the algorithm is presented in Algorithm 1).
verticesList := empty list of vertices;
foreach q ∈ vertices of secondary polygon do
P := nearest point on the original primary polygon;
P R := a line from P through Q to R on the bounding box;
proportion := P Q/P R;
P := corresponding point for P on the rectangle;
P R := a line fromP to R;
Q := proportion * P R;
add Q in the verticesList
od
create a new polygon with verticesList;
Algorithm 1: Displacement of a secondary polygon

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

Figure 6: More than one object can be rectangularized, to avoid rectangles
intersecting, the newly created rectangle is clipped.

To avoid the rectangles intersecting, the new rectangle is
tested against all the existing rectangles to identify intersections which, if found, are clipped from new rectangle. The
following are the implications of the clipping operation:
1. The newly created “rectangle” may have more than four
sides. However, as is shown in the example in Figure 6,
all angles would still remain right angles.
2. The new rectangularized polygon has more vertices
than its predecessor.

Figure 4: Allocate the vertices which are closest to the respective vertices of the bounding box to the corners of the new polygon. Using linear interpolation,
map the remaining points to points on the rectangle.

Figure 5: Displacement: For each vertex in the secondary polygon, find the nearest point on the primary polygon and calculate the new position based on the
change. The right-most image shows the resulting image after the distortion the left-most image.

The concept of multiple rectangularization raises a question
on how to distort the objects in response to rectangularization when another object is already rectangularized. To address this problem, the displacement algorithm discussed in
section 4.1 is modified as follows:
1. The polygons which have been rectangularized already
are not distorted. If this were otherwise, it would defeat
the very purpose of multiple rectangularization.
2. When the line from the vertex in the object point to its
closest point on the subject polygon intersects a rectangle, the vertex is not distorted (see Algorithm 2).
Reversing multiple rectangularization is not a straight forward operation since the users may not undo the rectangularization in the exact reverse order in which they were created.
The reversal is handled as follows: The system maintains a
list of all rectangularized objects in their chronological order.
During reverse, the selected object is removed from the list
and all the remaining objects in the list are rectangularized
again.
5

Overlay Rectangularization

Our informal observations indicate that in some cases users
do not like distortions in their images (as in contextual rectangularization), especially when the distortions are big. For
this reason DUIS has an option where the rectangle is laid

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

verticesList := empty list of vertices;
foreach q ∈ vertices of secondary polygon do
P := nearest point on the original primary polygon;
P R := a line from P through Q to R on the bounding box;
if P Q intersects an existing rectangle
then
add Q to verticesList
else
proportion := P Q/ P R;
P := corresponding point for P on the rectangle;
P R := a line from P to R;
Q := proportion * P R;
add Q in the verticesList
fi
od
create a new polygon with verticesList;
Algorithm 2: Extension of the displacement algorithm to cater for multiple
rectangularization.

over the image and the objects in the image remain undistorted. This kind of rectangularization is called overlay rectangularization. The following options are available to avoid
overlay rectangles obstructing the underlying image:
1. The rectangle may be made transparent (see Figure 7).
2. The rectangle is floated, that means, it can be dragged to
a position of the users’ choice (see Figure 8). A pair of
lines is drawn connecting the rectangle and its original
object to help the user visually associate the two.

[2] C ARD , S., M ACKINLAY, J., AND S HNEIDERMAN , B.
Readings in Visualization: Using Vision to Think. Morgan Kaufman, San Francisco, California, 1999.
[3] C ARPENDALE , M., C OWPERTHWAITE , D., AND
F RACCHIA , F. Extending distortion viewing from 2d
to 3d. IEEE Graphics and Applications 17 (1997), 42–
51.
[4] C ARPENDALE , M., C OWPERTHWAITE , D., AND
F RACCHIA , F. Making distortions comprehensible. In
Proceedings of IEEE Visual Symposium on Visual Languages (1997), IEEE Computer Society Press, pp. 36–
45.
Figure 7: The rectangularized object can be transparent so that the underlying image remains visible.

[5] C HIGONA , W., AND S TROTHOTTE , T. Contextualized
preview of image map links. In Proceedings HyperText
02 (2002), p. To appear.
[6] C HIGONA , W., AND S TROTHOTTE , T. Contextualized
text explanations for visualizations. In Proceedings 2nd
Symposium on Smart Graphics (2002), p. to appear.
[7] DYSON , M., AND K IPPING , G. The effects of line
length and method of movement on patterns of reading
from screen. Visual Language 32, 2 (1998), 150–181.
[8] F URNAS , G. W. Generalized fisheye view. In Human
Factors in Computing: CHI’86 Conference Proceedings (1986), pp. 16–23.

Figure 8: The rectangularized object can be moved to a position of the readers’ choice.

6

Conclusions

In this paper we have discussed the concept of rectangularization. We discussed its importance in enhancing readability of contextualized text explanation for 2D visualizations.
The algorithm is divided into two parts: (1) Distortion of
the selected object into rectangle and (2) displacement of the
other objects on the scene to create room for the distorted object. We have also shown how the algorithm can be extended
to cater for multiple rectangularization.
The rectangularization algorithm presented in this paper
does not yield pleasant results when applied on pseudo-1D
objects, i.e. the narrow long objects such as rivers and blood
vessels. We are currently working on techniques to handle
this special case. For instance, instead of rectangularization,
we are experimenting with inflating the objects, that is, making them wider and more straight.
References
[1] B EDERSON , B., AND B OLTMAN , A. Does animation
help users build mental maps of spatial information. In
Proc of the IEEE Symposium on Information Visualization (1999), pp. 28 – 35.

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

[9] G OMBRICH , E. The Sense of Order - A study in the
Psychology of decorative art. 2nd ed. Phaidon Press,
London, 1984.
[10] G USEYN -Z ADE , S., AND T IKUNOV, V. Numerical
methods in compilation of transformed images. Mapping Sciences and Remote Sensing 31, 1 (1994), 66–85.
[11] H OUSE , D. H., AND KOCMOUD , C. Continuous cartogram construction. In IEEE Visualization Proceedings (1998), pp. 18–23.
[12] M ACKINLAY, J., ROBERTSON , G., AND C ARD , S.
The perspective wall: Detail and context smoothly intergrated. In Proc ACM CHI’91 (1991), pp. 173 – 180.
[13] M AYER , R. Multimedia Learning. Cambridge, Cambridge, UK, 2001.
[14] ROBERTSON , G., AND M ACKINLAY, J. The document
lens. In UIST: Proc. ACM Symp. on User Interface
Software and Tech. (1993), pp. 101–108.
[15] WARE , J. Using animation to improve the communicative aspect of cartograms. Master’s thesis, Michigan
State University, Department of Geography, 1998.
[16] W EIDENMANN , B.
Informative bilder (was sie
k¨onnen, wie sie didaktisch nutzt und wie man sie nicht
verwenden sollte). P¨adagogik (1989), 30–34.

