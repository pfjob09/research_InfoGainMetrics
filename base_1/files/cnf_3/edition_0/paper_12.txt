2012 16th International Conference on Information Visualisation

Angular Treemaps – A New Technique for Visualizing and Emphasizing
Hierarchical Structured Data
Jie Liang1, Quang Vinh Nguyen2, Simeon Simoff2 and Mao Lin Huang1
1

School of Software, Faculty of Engineering & IT, University of Technology, Sydney, Australia
PO BOX 123 Broadway, NSW 2006, Australia
2
School of Computing, Engineering and Mathematics, University of Western Sydney, Australia
Locked Bag 1797, South Penrith DC, NSW 1797, Australia
Email: jiliang@it.uts.edu.au, q.nguyen@uws.edu.au, s.simoff@uws.edu.au, maolin@it.uts.edu.au

Abstract—Space-filling visualization techniques have
proved their capability in visualizing large hierarchical
structured data. However, most existing techniques restrict
their partitioning process in vertical and horizontal
direction only, which cause problem with identifying
hierarchical structures. This paper presents a new spacefilling method named Angular Treemaps that relax the
constraint of the rectangular subdivision. The approach of
Angular Treemaps utilizes divide and conquer paradigm to
visualize and emphasize large hierarchical structures
within a compact and limited display area with better
interpretability. Angular Treemaps generate various
layouts to highlight hierarchical sub-structure based on
user’s preferences or system recommendations. It offers
flexibility to be adopted into a wider range of applications,
regarding different enclosing shapes. Preliminary usability
results suggest user’s performance by using this technique
is improved in locating and identifying categorized analysis
tasks.

dividing the display area into nested sub-areas and
assigning them as geometrical regions to represent
subsets of the dataset in the enclosed display area. Spacefilling techniques, especially Treemaps such as [1-5] have
been successfully commercialized into many domains,
such as finance analysis [6], sport reporting [7], image
browsing [8] and software analysis [9].
However, most of the existing Treemaps algorithms
are based on axis-aligned rectangles. The Gestalt research
and Geon Theory has shown that humans have a tendency
to seek out the object’s edges and they can quickly detect
when one shape is different from another. Hence, limiting
Treemaps visualization to vertical-and-horizontal
rectangles blocks the utilization of human capability in
object recognition, due to the same fixed angles of the
shapes in the tree visualization. Variations of angles
and/or shaped nodes positively direct a way to achieve
better graph perception and insight generation for focus
recognition and change tracking. For example,
embedding distinctive shapes in traditional rectangular
Treemaps in certain division within visualization can
highlight anomalies.
Motivated by the idea, we propose a new space-filling
visualization method named Angular Treemaps which is
capable of laying out large relational structures whose
visualization can be varied to highlight important
substructures. This new method utilizes the Divide and
Conquer approach and Treemap paradigm to effectively
represent and emphasize the hierarchical information. It
further adopts the polygon-based enclosure partition to
interactively partition the display space into several subpolygons. The variation created by angular partitioning
algorithm helps users to locate and identify importance or
focus of interests. This technique can be either used based
on user’s preference manually or applied by supporting
automated analysis.
The paper is organized as follows. Section 2
discusses the related works in details. Section 3 proposes
Angular Treemaps including weighted angular
tessellation and algorithms. Section 4 presents the
application and the case study based on Angular Treemap
algorithm. Section 5 provides evaluation results on
computational time comparison and user experience. The
final section concludes our work.

Keywords--- Space-filling; treemaps; tree visualization;
hierarchical data; information visualization.

I.

INTRODUCTION

In reality, there are many information sources that are
organized in hierarchical forms. For example, the
organizational structure of a file system, a structure of a
classification system, a structure of an organization,
taxonomy of objects and many more. These hierarchical
structures are often very complex with thousands or even
millions of elements and relationships. As a result, it is
crucial to provide effective interactive visualization for
hierarchical data, with capability of exploring at different
levels of granularity as well as emphasizing the
importance in the data for the analysts in the knowledge
discovery process.
Space-filling visualization has been a successful
method for visualizing large hierarchical data sets with
attributed properties. This approach uses enclosure to
represent the tree structures, ensuring that all nodes and
their sub-hierarchies are located inside their “father’s”
display region. It can provide a visual presentation of
global patterns of the overall data structure in a compact
display. This technique maximizes space efficiency by
1550-6037/12 $26.00 © 2012 IEEE
DOI 10.1109/IV.2012.23

74

II.

RELATED WORK

visual analysis of hierarchical structures encoded in large
data sets.

Treemaps, first proposed by Johnson & Shneiderman
in 1991, utilize the space-filling partitioning concept to
represent hierarchical structures within the rectangular
display space. The general algorithm is to recursively
enclose nodes of the tree in rectangular areas. The sizes of
the rectangles are dependent on the number of children of
the node to be partitioned.
The original layout of Treemaps is called Slice and
Dice [1]. This treemaps’ layout is constructed by
recursive subdivision of parent node in vertical direction
for one layer and horizontal direction for the next layer.
The result of division reflects the hierarchal information
of the tree. The disadvantage of this initial layout
algorithm is that the restriction of division directions
causes density of rectangles in high aspect ratio, even for
small data sets.
This problem has motivated many researchers to carry
on the research in this direction. Recently, a number of
alternative Treemaps have been proposed, these including
Clustered Treemaps [10], Cushion Treemaps [2],
Squarified Treemaps [3], and Ordered and Quantum
Treemaps [4]. These techniques typically satisfy one or
more aesthetic criteria. To gain better results for
symmetry and proximity, Clustered Treemaps optimize
neighbour similarities by re-arranging a set of “siblings”
in the hierarchy. Squarified Treemaps follow aspect ratio
rule, by generating roughly square layout [3]. The layout
algorithm of the Cushion Treemaps is similar to the
standard treemaps, but this technique uses intuitive
shading to provide better readability in the hierarchical
structure. To maintain orientation of hierarchy, Ordered
and Quantum Treemaps strengthen visualizing the
structure of hierarchy by preserving the order of the
underlying data [4]. Although these further developments
of treemaps layouts significantly improve readability,
some algorithms can be too complicated to maintain
stability over time in the display of dynamically changing
data.
Nevertheless, most of existent layout algorithms of
treemaps are all solely based on axis-aligned rectangles.
Noticeably the developments, Space-Optimized Tree
[11], Voronoi Treemaps [12], Gereralized Treemaps [13]
and the work of Onak and Sidiropoulos [14] have
extended the implementation of treemaps to polygonal
partitioning techniques. However, most treemap
algorithms either are too difficult to be implemented in
domain application or consume high computational time.
Most importantly, none of the existing techniques are able
to emphasize hierarchical structured data, by treating
individual sub-division equally important.
In the context of space-filling, the technique proposed
here aims to obtain the ability of emphasizing subhierarchical data in the treemap hierarchy. The first
objective of the approach is to enhance the interpretability
of the visualization by providing flexibility of effective
layouts. To achieve that, it has to breakthrough limitation
of rectangular layouts whilst fulfill the enclosure space
optimization. The second objective is relative simplicity
of algorithm and reasonable low computational time. The
speed and the generalization of the partitioning will be
able to develop proposed technique suitable for in-depth

III.

ANGULAR TREEMAPS

This section will explain the methodology of the
approach and will show experiment results in both
rectangle and arbitrary enclosed display area.
A. Basic properties
In a tree T rooted r, let (μ,ν) be a directed edge in T. If
T contains vertex ν, then the sub-tree T(ν) rooted at ν is
the sub-graph induced by all vertices on paths originating
from ν. If vi has sub vertices, then vi =
{vi,1,…,vi,2,…,vi,n}; if vi has no sub-vertices, then vi is
called a leaf vertex. T be transferred into treemaps as
constrained polygon area. Each vi and vi,n is presented as
bounded polygon and sub-polygon area. Let P be
constrained polygon, which contains sub-polygons, i.e. P
= {P(v1),…, P(vi),…, P(vn)}. The area of each polygon
P(vi) is based on the weight w(vi) of vertex vi, i.e.
Area( P(vi )) = a × w(vi ) where a is a constant representing
the proportional ratio between the total display size and
the total weight of vertices. In the implementation, the
weight of a vertex w(vi) can be defined by a specific
property of the vertices, such as file size in the
visualization of file systems (see figure 6). For the
illustrations in this section, it is simply calculated
proportionally by the total of vertices contained in subhierarchy as a vertex’ weight is not specified.
B. Weighted angular treemaps tessellation
Angular tessellation maximises an m-dimensional
space R2 for partitioning, without generating holes or
overlapping. For root r, the local region P(r) is defined as
the entire polygonal container The partitioning of a subtree T(vi) is restricted within the area of P(vi). A drawing
of polygon P(vi) rooted at vi is calculated based on the
properties of vi and its local area. A series of side vertex
{si,1,…, si,i,…, si,m} is bounded by a polygon P(vi) with
coordinates (x1,y1),…,(xi,yi),…, (xm,ym).
The basic concept for generating polygonal
subdivision is to utilize the Weighted divide and conquer
approach in tessellation process. Original divide and
conquer is important algorithm design paradigm based on
multi-branched recursion. Divide and conquer paradigm
decomposes a problem into two or more sub-problems of
same or related type, until the sub-problem becomes
simple to be solved directly. Similarly, we break down
the nodes into two groups according to the original
sequence of their orders, with similar weight for each
group. In partitioning process, our algorithm divides the
polygon into two sub-polygons, representing two subgroups of nodes. This procedure is executed recursively
for all top level nodes within the respective sub-polygons.
The same process will follow for each subgroup of nodes.
When the recursion ends, a complete partitioning is
obtained.

75

C. Angular Treemaps algorithm
In the polygon P(vi), side vertices si,1,…, si,i,…, si,m
generates a number of m sides L(si,1 , si,1),…, L(si,i ,
si,i+1),…, L(si,m-1 , si,m), L(si,m, si,1). Among the sides, the
longest side is defined as Lmax. The very first partitioning
line begins from the longest side Lmax. The partitioning
direction is against to the longest side Lmax with selected
angle Į and then following partitioning line continues
from the previous created line in vertical direction against
itself. In the implementation, Į is restricted to 15º, 30º,
45º, 60º, 75º, and 90º for demonstration purpose. The
angular partitioning applies until the leaf nodes of this
particular polygon are reached. As a result, the P(vi) be
partitioned into sub-polygons for {vi,1,…,vi,i,…,vi,n} with
corresponding polygonal boundary {P(vi,1),…, P(vi,i),…,
P(vi,n)} and with weight {w(vi,1),…, w(vi,i), …, w(vi,n )}.
We use an example to convey the approach with
different selected angle Į. For example, a tree root at 0.0
has 6 child nodes {1.0, 1.1, 1.2, 1.3, 1.4, 1.5}, whose
weights are {8, 6, 1, 2, 4, 1} respectively, according to the
number of sub-nodes contained (see Figure 1). Figure 2a
shows the partitioning at 90 degree which is similar to the
traditional treemaps’ algorithms and Figure 2b shows the
partitioning at 60 degree. Figure 3 shows some more
examples of layouts in rectangular container, generated
by the algorithms using a large data set with
approximately 12,000 nodes.

a

b

Figure 1. Classical tree view of a sample data.

a

b

Figure 2. Layout outputs of the same sample data as in Figure 1 using
our algorithm with angles of a) 90 degree, and b) 60 degree.

c
Figure 3. Layouts of a large data set with approximately 12,000 nodes
a) 90 degree, b) 75 degree, and c) 45 degree.

A. Extended Angular Treemaps
The advantage of the algorithm is the ability to be
extended to various enclosed display container. This
allows combining Angular Treemaps with any other
visualization method to be adopted into a wider range of

domain and applications. Examples for extended
angular treemaps are presented in different containers,
like triangle, pentagon and hexagon (see Figure 4 – 5).
Figure 4 illustrates Angular Treemaps layout of 272
nodes within a triangle shape. It applies different rotated
angles in four divided segments. Figure 5 shows the

76

the space utilization, it would assist viewing the structure
of hierarchies in most cases (see Figure 6).

visualization result of a data set with 16,000 nodes using
Angular Treemaps with 90 degree on a pentagon.

Figure 6. Application demonstration of file systems overview with
boundary gaps feature

Figure 4. Triangle container illustration: Visualization of a data set
which has 272 nodes with two sub-hierarchy rotated by different angles
in four divided segments.

2) Color and edge’s thickness: Using color to visualize
one more attribute of each folder or file. For example, in
the file system visualization, different colors are brushed
to distinguish the types of files, including documents,
multimedia, images, programming code, system files,
compressed files and unknown types. Color saturation
and edge thickness changes are used to assist views
transferring from one level to another level. For example,
from overview (see Figure 7a) to subfolder of “mp3” (see
Figure 7b) in lower lever, edges of lower level nodes are
thinner and the color of lower level nodes are lighter than
those in higher level nodes
B. Navigation and Interaction
Semantic zooming technique is adopted to assist users
in exploring large hierarchies with detailed viewing. We
use the zoom to view the details of a particular part in the
hierarchy and users can zoom out in any time to obtain
the context view. Positions of all vertexes in a sub-tree
will be recalculated at a time in corresponding to “zoom
in” or “zoom out” each time. For instance, in figure 7a
and 7b, when being selected as focus view by a mouseclick based on user’s interest at a time, the selected substructure expands to the entire display area (see Figure
7c).

Figure 5. Pentagon container illustration: Visualization of a large data
set which has approximately 16,000 nodes (>10 hierarchy levels) with
90 degree

IV.

ANGULAR TREEMAPS APPLICATION

The algorithm is implemented into a file system
organizing application, in order to demonstrate the
concept of Angular Treemaps in a real example. To prove
achievement of first objective defined above, this section
will extend visual properties, navigation features and a
case study.

C. Angular Treemaps recommendation option
Based on Weighted Divide and Conquer algorithm,
angular treemaps application provides non-rectangular or
the mixture of rectangular and non-rectangular layouts for
different purposes in short computational time. System
implemented with data mining method can automatically
generate layout based on query to draw users’ attention
and recommend the focus of interests. Also users can use
drop box to rotate particular sections, based on user’s
own interests in particular task. It can help users to track
his or her mental map during exploration and also to
compare one objective with another. The usability test in
section 5 will prove that Angular Treemaps in real

A. Visual properties
In the application, visual properties have been
enhanced in hierarchical structure. The graphical
properties can be turn on or off and adjusted via an
interactive menu to suit user’s preference of viewing.
1) Boundaries gaps: Polygon offsetting approach is
adopted in the application to generate uniformly gaps
between boundaries of the polygons which represent
either folders or files. Although boundaries gap sacrifices

77

A. Usability study

scenarios successfully enhance the visibility and
highlighting focus of interests by the differentiation of
various sub-hierarchical structure layouts. The positive
results have demonstrated its efficiency and effectiveness
in locating and identifying tasks.

The purpose of usability study is to evaluate the
hypothesis that Angular treemaps has positive impact in
locating and identifying targets of common visual data
analysis tasks. As Angular treemaps technique can
highlight sub-hierarchy as focus of interests in the
context, it assists users better in with functionality of
emphasizing importance, rather than traditional vertical
and horizontal Treemaps in certain analysis tasks.
For this usability study, we compared Angular
Treemaps with the vertical-horizontal treemap technique
(Į = 90º). Both treemap techniques used the divide-andconquer approach in the partitioning process. A
preliminarily usability study was conducted with a control
group of 8 subjects for the application. All subjects have
indicated that they had experience with visual data
analysis. The designed experiments were performed with
28 datasets and 112 scenarios. The datasets are
categorized by four different types of datasets, and each
type has 7 alternative datasets, with increasing number of
hieratical level and complexity of data. In order to prevent
users from remembering labels, experiments use generic
labels which contain characters and numbers. The dots
between characters and numbers are used to distinguish
the levels. For example, N0 presents a name for a node in
level 0, N0.0 is contained in the one level lower of N0
and N0.0.0 is located in the second lower level of N0.
By procedures, we introduced hierarchical data
structure and current visualization methods, particular
treemaps. We explained that we were measuring how
people perceive treemaps. Then subjects were presented
with two methods in the application, traditional
rectangular treemaps and angular treemaps. They were
also asked to explore each method and find out the
difference between these two methods. We also used
testing data to briefly explain the application features and
controls. Subjects were asked to try three trials for three
different tasks. Task 1) locating the particular node with
given label name in lower level 1; task 2) locating the
particular node with given label name in lower level 2 of
hierarchal dataset; and task 3) identifying two similar
nodes with given label names in lower level 1 and level 2.
During usability study, subjects were given static
images of both methods. Images were sized
approximately by 1000×800 pixels. Images were
presented on a 24-inches wide monitor with 1920×1200
pixels. Subjects were seated 80 cm from the monitor.
With the angular method, the target applied angular
rotation; the other one method applied vertical and
horizontal Treemap technique. The order of methods
varied randomly from subject to subject, to prevent order
bias. In each trial, subjects were presented with an image
and asked to search the target with given name as quickly
as possible and answer the questions in the task. Users
were asked to complete 7 questions for each task, in
sequence of increasing difficulty degree. The completion
time for each question was recorded. The reading time
and writing time were not counted in completion time.
The average completion time for each task was measured.
In the end, subjects were interviewed for preference and
were also encouraged to give feedback about further
improvements.

D. Case study
In most situations, overloaded information hidden in
complex data set visualized by traditional treemaps could
exceed human cognitive ability to process. The Angular
Treemap approach offers flexibility to generate different
layouts when needed for emphasizing interests of focus in
the hierarchy. Angular Treemaps can not only be applied
to emphasize difference but also highlight similarity. In
the case showing in Figure 8, two rotated folders attract
our attention. We realized that two folders have similar
layouts and same colored file types. We opened the
dataset following the directory indicated by angular
treemaps. We found that they are almost duplicates with
slight difference. In this example, similar structure or
even same structure of files contained in two rectangles
with different aspect ratios are easily neglected. Angular
treemaps successfully prevented the overlook.
V.

EVALUATION

This section will provide evaluation results on
computational time comparison and usability study to
prove that Angular Treemaps have achieved the second
objective, as explained before.
A. Computational time comparison
Java 1.6 with Eclipse Platform was used to develop
the prototype. The program was executed using an
ordinary personal computer with AMD Phenom 2.1Ghz
and 2GB of RAM. Table 1 illustrates the computational
times for the tessellation process of the algorithm on a
variety of data sets, excluding the time for reading file,
rendering and displaying.
Figure 10 presents a comparison of four different
treemaps layout results, including Slice-and-Dice
Treemaps, Squarified Treemaps, and Space-Optimised
Tree and Angular Treemaps, using same data set with
approximately 2400 vertices. The evaluation of
computational time was conducted in the same
rectangular container with 10001000x1000 pixels by
using various data sets. Table 1 provides the
computational time results of our Angular Treemaps
algorithm in comparison of other available partitioning
algorithms for each different datasets with from 272
vertices up to 650,000 vertices.
The running time is not necessarily linear to the size
of the data but it is also dependable on the complexity of
data and tessellation process. Table 1 indicates that the
running time of our algorithms are competitively close to
other three alternative treemaps. It provides the
opportunity for Angular Treemaps to be adopted into real
time applications.

78

a
Figure 8. An output from Angular Treemap application of file systems,
with two focused folders.

a)

Slice and Dice

b) Squarified

c)

SO-Tree

d) Angular

b

Figure 9. Comparision of four different treemaps algorithm layouts for
the same data set with approximately 2400 vertices.

TABLE 1: THE COMPUTATIONAL TIME (IN MILLISECONDS) OF SLICEAND-DICE TREEMAPS, SQUARIFIED TREEMAPS AND SPACE-OPTIMISED
TREE IN COMPARISON WITH OUR ANGULAR ALGORITHM ON VARIOUS
DATA SETS USING THE SAME RECTANGULAR CONTAINER

c
Figure 7. A series of screen shots for the views in angular treemaps
application for level 0 (a), level 1(b), and level 2(c) for the organization
of file systems.

79

Number
of
Vertices

Slice &
Dice

Squarified

SOTree

Angular

272
2400
16,600
43,200
81,000
122,000
650,000

2
7
27
31
49
70
319

4
21
138
38
61
87
2903

7
24
156
92
155
225
1010

80
120
220
234
343
186
1505

approach. For extended future work, we will adopt
Angular Treemaps into a wider range of applications,
within different polygonal shapes of containers. To
enhance user experience, we will expand user-centered
evaluation for the developed applications.

Overall subject’s performance results were consistent,
although, as expected, there was one case where subject
behavior was unique far from the average. This case has
also been excluded in the result analysis. As result, the
subject performances in three tasks for angular method
were all higher than traditional treemaps. Figure 10 shows
the average completion time of three tasks for both
methods. Comparing with traditional treemaps, the time
users using angular treemaps spent for locating one node
in level 1, has been saved by17%, by using angular
treemaps ; users efficiency in Angular Treemap
application for locating particular node in deeper level 2,
increased by 19%. The advantage of Angular Treemaps is
greatly reflected in task 3. When users need to identify
two different focuses in different levels of the hierarchy,
the performance by using Angular Treemaps has been
improved by 29%. Last but not least, all users selected
Angular Treemaps as preference in the interview session.

REFERENCES
[1]

[2]

[3]

[4]

[5]

[6]

[7]

[8]
Tasks

[9]
Figure 10. Line chart for the average completion time comparison
between angular treemaps and traditional treemaps in three categorized
tasks.

VI.

[10]

CONCLUSION

[11]

Current treemap techniques provide capability to
visualize large attributed hierarchical data inside a limited
display space. However, most algorithms have a common
limitation: they can only partition a rectangle into subrectangles in vertical-and-horizontal directions. This
limits both human perception on visual object recognition
and treemaps’ adaptability to various styles and display
areas, different from rectangles, such as non-uniform
polygons. Furthermore, all the existing treemap
algorithms lack of the ability of emphasizing hierarchical
structure, which is useful for users to explore and analyze
the hierarchical data.
Angular Treemap is a new member of treemap family,
which maps tree structure to the constrained rectangular
geometry area, similar to original rectangular tree maps
concept. However, Angular Treemaps do not restrict
tessellation in vertical and horizontal directions only. The
paper demonstrated the advantage of proposed Angular
Treemaps, with methodology, the case study and the
usability study. Taken in account its real-time
performance and the quality of the visualization layouts,
proposed Angular Treemaps can be a very effective and
flexible interactive tool by producing visual
representation of large data structures as well as the
emphasizing substructures using angular partitioning

[12]

[13]

[14]

80

Johnson, B and Shneiderman, B. (1991): Treemaps: A SpaceFilling Approach to the Visualization of Hierarchical
Information Structures. Proc. The IEEE Visualization,
Piscataway, NJ, USA, 284-291, IEEE.
van Wijk, J.J. and van de Wetering, H. (1999): Cushion
Treemaps: Visualization of Hierarchical Information. Proc.
IEEE Symposium on Information Visualization (InfoVis'99), San
Francisco, California, USA, 73-78, IEEE Computer Society.
Bruls, M., Huizing, K., and van Wijk, J.J. (2000): Squarified
Treemaps. Proc. Joint Eurographics and IEEE TCVG
Symposium on Visualization, Vienna, Austria, 33-42, Springer.
Bederson, B.B., Shneiderman, B. and Wattenberg, M. (2002):
Ordered and Quantum Treemaps: Making Effective Use of 2D
Space to Display Hierarchies. ACM Trans. Graphics, 21(4):833854.
Fekete, J.D. and Plaisant, C. (2002): Interactive Information
Visualization of a Million Items. Proc. IEEE Symposium on
Information Visualization (InfoVis 2002), Boston, USA, 117124.
Smartmoney:
Map
of
the
Market,
http://www.smartmoney.com/map-of-the-market/.
Accessed
25/02/2012.
Jin, L. and Banks, D.C. (1997): Tennisviewer: A Browser for
Competition Trees. IEEE Trans. Computer Graphics and
Application 17(4):63-65.
Bederson, B.B. (2001): Quantum Treemaps and Bubblemaps for
a Zoomable Image Browser. Proc. User Interface Systems and
Technology, 71-80.
Baker, M.J. and Eick, S.G. (1995): Space-filling Software
Visualization. Visual Languages and Computing, 6(1):119 –
133.
Wattenberg, M. (1999): Visualizing the Stock Market. Proc.
Extended Abstracts on Human Factors in Computing Systems,
188-189, ACM Press.
Nguyen, Q.V. and Huang, M.L. (2003): Space-Optimized Tree:
a Connection+Enclosure Approach for the Visualization of
Large Hierarchies. Information Visualization Journal, 2(1):3-15.
Balzer, M. and Deussen, O. (2005): Voronoi Treemaps. IEEE
Symposium on Information Visualization, USA, IEEE
Computer Society.
Vliegen, R., van Wijk, J.J., van der Linden, E.J. (2006):
Visualizing Business Data with Generalized Treemaps. IEEE
Transactions on Visualization and Computer Graphics,
12(5):789-796.
Onak, K. and Sidiropoulos, A. (2008): Circular Partitions with
Applications to Visualization and Embeddings. Proc. the 24th
Annual Symposium on Computational Geometry, Maryland,
USA, 28-37.

