2012 16th International Conference on Information Visualisation

Through the Looking Glass: Two Approaches to Visualizing
Linguistic Syntax Trees

Chris Culy, Corina Dima, Emanuel Dima
Seminar für Sprachwissenschaft
Universität Tübingen
Tübingen, Germany
christopher.culy@uni-tuebingen.de, corina.dima@uni-tuebingen.de, emanuel.dima@uni-tuebingen.de

Abstract—Linguists have domain specific diagrams for
syntactic structures, as well as expectations about the “look
and feel” of the diagrams. However, these diagrams have
received relatively little attention in the information
visualization field. In this paper we present two approaches to
applying InfoVis techniques to these diagrams to make them
interactive and effective in a computer-driven research
environment. Results from each approach will influence the
further development of the other.

II.

A. The Data Structures and Their Visualizations
There are two main types of linguistic syntax trees.
Phrase structure trees are a hierarchical representation of
sentences in the form of ordered trees, where each internal
node labels a phrasal constituent (such as noun phrases, verb
phrases, prepositional phrases, etc.) and each terminal node
is a token (e.g. a word) of the original sentence. Phrase
structure trees are laid out in accordance with the order of the
words in the sentence, such that there are no “crossing
branches”. Dependency structures are unordered trees
representing the relations between words, e.g. “A is the
SUBJ(ect) of B”, “C is a CON(junct) of D”, etc. The
arrangement of the dependency structures in the visualization
follows, to the extent possible, the order of the words in the
original sentence.
Both phrase structure trees and dependency structures are
visualized in various ways in the linguistics literature. The
differences stem partly from the often-diverging practices
and conventions used in separate schools of thought, but are
also motivated by decisions made for graphical convenience.
The most frequently encountered visualizations for both
phrase structure trees and dependency structures are nodelink diagrams and dendrograms. In addition, dependency
structures are sometimes visualized as arc diagrams (cf. [6]).
Textual representations of trees are also common; these use
brackets or parentheses to form the hierarchical structures
and, in some cases, multi-line indenting to reinforce the
notion of hierarchy. Given the conventions and expectations
of our immediate user base (linguists familiar with the
diagrams produced by the TIGERSearch corpus search
engine [7], [8]), we will focus on the dendrogram as a
visualization paradigm (see Fig. 1, from Arbore).

Keywords-phrase structure tree; dependency structure;
dendrogram; linguistics

I.

INTRODUCTION

Visualization of language information (LInfoVis or
LINGVIS) that is the result of linguistic analysis is becoming
more widespread, both at a popular level (e.g. word clouds,
Wordle [1]), and at a specialist level. As with other fields,
linguists and language professionals have specific data sets
and tasks, and so they need visualizations tailored to their
uses and expectations. See [2], [3] for recent overviews of
some examples. Visualization efforts are also connecting
more with computational linguistics (e.g. the European
Association of Computational Linguistics 2012 Joint
Workshop of LINGVIS & UNCLH [4]).
In this paper we present two approaches to visualizing
one type of linguistic data: syntactic trees. Both
visualizations are designed for and with linguists, but with
somewhat different goals. One of the visualizations (Arbore)
has been developed in the context of WebLicht, a service
orchestration and execution environment for incremental
automatic annotation of text corpora [5]. Arbore is currently
being integrated into WebLicht as the default method for
visually inspecting the results of running a linguistic tool
chain that contains a parser. The other visualization
(Prototype Dendrograms = ProD) is more experimental and
is designed to support data exploration and hypothesis
forming. We describe sample use cases, discuss various
lessons learned from each of the visualizations and show
how future versions of the two applications can benefit from
the cross-fertilization of ideas.

1550-6037/12 $26.00 © 2012 IEEE
DOI 10.1109/IV.2012.44

LINGUISTIC SYNTAX TREES AND THEIR USES

B. Uses of Tree Diagrams
Tree diagrams can be used for a variety of purposes. In
the linguistics literature they are commonly used to illustrate
the abstract data structure, whether in a discussion of an
analytical point or in a pedagogical discussion. In a
computational context, tree diagrams are conventionally part
of, or associated with, parsers (e.g. Berkeley parser [9]).
214

as small rectangles (see Fig. 1 for an example).
Currently, there are two primary use cases for the Arbore
visualization library. One consists of integrating Arbore into
the WebLicht environment. Its objective in this setting is to
help the WebLicht users understand the syntactic structures
produced by the components of the system. The
requirements and scenarios that the library must abide by in
this context come from the developers and the local users of
the WebLicht system. A second use case consists of using
Arbore in the context of a tree comparison application. The
purpose of this software is to help linguists understand the
mistakes made by a parser, by visualizing the automated
parse and the hand-corrected parse of the same sentence
side-by-side (see section III.C. for more details about the use
cases).
The ProD visualization is designed as an experimental
tool, in two senses. First, it is a way to explore different
visualization and interaction techniques for tree diagrams. As
an experimental tool, it is not constrained by compatibility
issues with older browsers and uses D3 [15] as the display
framework to generate SVG. Second, it is designed to aid in
the data exploration and hypothesis forming stage of
linguistic research, especially for specialists (i.e., not for lay
people or novice linguists). Therefore, it assumes a certain
level of familiarity with the details of the underlying data
structures, and consequently aims at helping researchers
navigate within the complex structures they must work with.
The underlying data will often contain additional information
(e.g. the part of speech of a word – noun, verb, the lemma
(“dictionary form”), inflectional information, semantic
information, etc.) that is relevant to the correctness or
completeness of the structure, but which may not be part of
the tree itself. The ProD visualization allows the user to
access and use this extra information in addition to the tree
structure proper.

However, in the last decade these diagrams have been
increasingly used in the context of searchable treebanks, as
an aid in linguistic analysis (cf. e.g. ANNIS [10], [11],
TIGERSearch [7], [8]). Even in this computational context,
however, the tree diagrams produced by the programs are
static representations of the search results.
Post-correction tools represent another use case. These
are used to validate syntactic structures created by humans,
machines, or a combination of the two, and allow manual
correction of the structures.
Finally, one of the goals of the ProD visualization is to
use tree diagrams to facilitate the exploration and hypothesis
forming stage of research, a fairly novel use of tree diagram
visualizations. As discussed below in more detail, users can
explore the trees, searching for particular elements and paths
in the tree, and focusing on the aspects of the trees that are of
interest.
III.

THE VISUALIZATIONS

A. Design Goals and Techniques
Both visualizations are designed for browsers, but with
differing criteria. From the beginning, the Arbore library
needed to meet a series of requirements connected to its use
in the WebLicht project. For example, an important technical
requirement was to support the most popular browsers. This
led to the selection of Raphaël [12] as the display
framework, as it provides an abstraction layer over both
SVG (for more advanced browsers) and VML (for older
versions of Internet Explorer). Another technical requirement
was that the visualization had to be made available as a web
service and had to be easy to embed into another web
application. On the linguistic side, Arbore currently employs
a very particular visual style for the dendrogram diagram,
which is a de facto standard in German computational
linguistics, used in a variety of tools (e.g. ANNIS [10], [11],
TIGERSearch [7], [8], Annotate [13], [14]). In this type of
diagram, node labels are depicted as ellipses and edge labels

B. Visual and Interactive Aspects
The Arbore visualization library currently renders phrase
structure trees in the dendrogram-like style the prospective
users are already familiar with. However, the layout is
different from the classical dendrogram because it had to
cater to the particular requirements of the linguistic data
structure. There are three types of information that can be
displayed by default. First, the words of the initial sentence
are rendered at the bottom end of the dendrogram. Second,
the syntactic tags, depicted as ellipses, are placed at each
branching point. Third, a relationship between a parent and a
child node (e. g. which noun is the “head” of a noun phrase)
is marked on the edge connecting the two nodes in the form
of a small, labeled rectangle. However, the edge labels are
optional.
Arbore supports node and branch highlighting (each
visual element has a highlighted property which can be either
true or false). Currently the highlighting mechanism is only
used for marking special nodes rather than for improving the
user interaction with the visualization.
The user can easily scale the visualization by using the
built in zoom slider. The vectorial rendering method allows

Figure 1. Sample Arbore diagram.

215

the tree, temporarily removing that information from view.
Other focus+context techniques such as hyperbolic trees [17]
or fisheye lens [18], also show the whole tree, but at the cost
of significantly distorting the shape of lower DOI portions,
while our approach maintains the shape of the collapsed tree.
Since the shape of a tree is often important for syntactic
analysis, our technique is more appropriate than a distorting
technique.

the user to magnify or scale down the visualization without
any loss of quality.
The ProD visualization has a “generic” dendrogram
visual aspect, rather than the more specific one of Arbore. If
there is data associated with the nodes, any aspect of it can
be displayed interactively via a generic call back function
that is implemented on an application (and data) specific
basis.
To facilitate the examination of the tree, the user can
search for nodes, either by name or by properties of any data
associated with the nodes. The matching nodes are shown in
a different color or made larger. These same possibilities are
available when the mouse is hovered over a node, useful for
providing brushing and linking in an application, as in the
example discussed below. Paths of nodes can also be
searched for, and the results highlighted. Additionally, the
individual path results can be selected in succession, and
given secondary highlighting, using the left and right arrow
keys. In Fig. 2 paths from NP to NNP have been searched
for, and the path from NP-SBJ to the NNP above Pierre has
been selected.
An important interactive feature of the ProD visualization
is the ability to collapse or expand a sub-tree by clicking on
the parent node (indicated by down and up cursors
respectively). The branches of the sub-tree remain visible
when collapsed, however, though more closely together (see
Fig. 2, where the VP node has been collapsed). The
collapsing and uncollapsing is animated, to help the user
remain oriented. (The initial display of the dendrogram is
also animated.)
Sub-tree collapsing is a focus+context technique, familiar
from desktop environments or DOITrees [16]. Since our
trees are small (usually less than 200 nodes, compared to the
hundreds of thousands in [16]), we do not use a DOI
technique: nodes are either collapsed or not. Showing
smaller version of the collapsed portion of the tree allows the
user to remain oriented in the whole tree, unlike the desktop
or DOITrees approaches, which completely hide portions of

C. Sample Usage Scenarios
The Arbore library is currently being used in a tree
comparison application. The input data consists of two sets
of parses for the same sentences (e.g. an automated parse and
the human-corrected parse, or parses of the same sentence
from two different parsers). Pairs of trees from the two input
sets are then shown side by side and the differences between
them are highlighted. Two nodes are considered equal if they
have the same label and all their ancestor nodes are also
equal. A node A is considered an ancestor for another node
B if it is on the path from node B to the root node. The
differences between two parse trees are highlighted using a
different color for the nodes that appear in one tree and do
not appear in the other, as illustrated in Fig. 3. The
application also displays the original sentence and the two
parses in the textual parenthesis form.
The user can control the way the application displays the
trees by zooming and panning. A custom slider control
allows the user to scale the visualization. Panning is
achieved using the default scrollbar controls that the browser
provides.
In terms of formats, the application expects the two sets
of parses to be provided as two files. Both files must contain
the same number of parses, each individual parse on a
separate line. The parses have to be specified in the simple
parenthesis format (see Fig. 3 for an example).
Arbore is also available as a web service for WebLicht
and other applications. The user application is expected to
send trees one by one to the web service, in a specific JSON
format. A fully-fledged HTML page, containing all the
required headers and the visualization itself is sent back as a
response. This visualization features all the elements
discussed in section III.B.
The ProD visualization is being used to explore a new
technique for analyzing the information in dependency
structures. The data comes from the PAISÀ dependency
treebank for Italian [19]. A separate tool analyzes the
dependency structures for significant patterns, and a custom
web page provides an interface to explore the results, using
the ProD visualization (Fig. 4).
The user first selects the relevant pattern of interest and
runs the analyzer tool, which returns a list of examples
containing the pattern. The examples are grouped by the
original document they are contained in, and selecting a
sentence shows the dependency structure using ProD, with
the target pattern highlighted.

Figure 2. Sample ProD diagram, with highlighted path.

216

Figure 3. Comparing two phrase structure trees using Arbore.

expert said that using different colors to distinguish the
relations "makes a huge difference." This suggests, more
generally, that having some default visual encodings for well
known types of syntactic structures would be useful.
Selecting successive paths among ones that have been found
was also positively acknowledged, as was the highlighting of
the found results.
Less useful was the node collapsing feature. This may
have been due in part to the use of a large window during the
testing, so there was less need to collapse the nodes to
conserve space. As well, the tasks did not require focused
attention on one part of the tree to the exclusion of the rest,
which diminishes the utility of node collapsing.
More ambiguous results concern brushing and linking,
which wasn't noticed by one user, but who said it would have
been useful. Another area for further work is how to do the
searching within the tree. Simple node searches worked OK,
but searching in information that wasn't visible (part of
speech in this case) was problematic, even for a domain (and
search) expert. Searching for paths suffered from the query
language being different from user expectations; in a real
application there would (hopefully) be a single query
language used throughout.

The web page provides an application specific function
to show the more detailed information associated with each
word or punctuation mark when the mouse hovers over the
item. This information includes the lemma, and the coarse
and fine-grained part of speech information. At the same
time, the corresponding word in the original sentence is
highlighted (brushing and linking). The connection is
bidirectional: hovering over a word in the sentence shows the
extra information and also highlights the corresponding word
in the diagram.
The user can search the structure by node names, by any
of the more detailed information associated with the nodes,
or for paths of nodes. The relevant nodes are highlighted, as
are the edges in the case of paths. In Fig. 4, the user has
searched for nouns (pos:S), finding controllo, signorotti,
Venezia, favore, and imperatori. Hovering over signorotti
shows the more detailed information above the diagram,
including its lemma signorotto, as well as highlighting its
occurrence in the original sentence give at the top of the
diagram. Of course, the sub-tree collapsing discussed above
is also available. Zooming is available via buttons, and
panning is done via the browser’s scrollbars, as with Arbore.
IV.

RESULTS

B. Technical Results
Each visualization has led to its own insights, some of
which should be transferable to the other visualization in
future iterations.
The Arbore library is built on top of the Raphaël
JavaScript library for rendering vector graphics. One aspect
of using Raphaël was that all the layout algorithms had to be
created from scratch and also more complex visualizations

A. User Evaluation
To date we have done only informal evaluation of ProD,
using the PAISÀ application as a basis. One consistent
feedback has been that it is important to differentiate visually
the words from the relations in the dependency structure.
Indeed, we showed an alternate form of the diagram, which
used color to mark the relations, to a domain expert. The

217

diagram, while keeping track of the modifications of the
underlying data, which is already a user requirement.
The ProD visualization uses the D3 toolkit, which has
some convenient idioms, and easy transition animations.
Unfortunately, the hierarchical layouts in D3 have some
problematic aspects. The most serious problem is that the
layout algorithms do not take the size of the node labels into
account. This is because the layout is calculated with relative
positions before the nodes have been instantiated. As a
consequence, long node labels can overlap with the
neighbors, rendering both illegible. While the motivation in
D3 of separating the visual presentation from the layout is an
admirable one, that separation breaks down when the visual
presentation (here, the size of the nodes), affects the layout.
Thus, a completely new dendrogram layout had to be
developed for ProD, incorporating the size of the nodes.
D3 also takes too strong a position on the visual aspects
of the visualization. For example, branches in D3 are curves,
and there is no provision for straight lines, or “t-connectors”,
as in ProD, which had to implement them separately in order
to satisfy the general expectations of linguists (ProD allows
D3’s curved branches as an option, but they often end up
crossing each other with the length-sensitive layout of ProD).
Another unfortunate design choice in D3 is that the
dendrogram (and node-link) layouts are automatically scaled
to the visualization container’s area, with no option to
override this behavior. In a use case such as the PAISÀ one
discussed above, the sizes of the diagrams cannot be
predicted in advance, and scaling both very short and very
long sentences to the same area would neither be appropriate
nor aesthetically pleasing. The new dendrogram layout
developed for ProD does not have this automatic scaling
mechanism, allowing the application to do any scaling as
desired.

Figure 4. Sample ProD diagram, with brushing and linking.

like the tree visualization had to be built using basic building
blocks: circles, rectangles, path, text, etc. This can be seen
both as a plus and a minus. Designing every visual aspect of
the visualization allows for a greater flexibility and ease of
modification. However, it has the downside that each
element requires more time to be developed and properly
tested, in contrast to using ready-made visualizations like the
ones offered in more advanced toolkits. The tree layout
algorithm had to be written in its entirety, and also the
custom zoom control had to be designed and implemented.
Because of this, the library still lacks more advanced
interactive features of ProD like animation, on-hover
highlighting, text search etc. These can, however, be added
in the future versions of the library, since Raphaël provides
support for implementing all of them.
Another point that needs to be taken into account is the
ease of adding extra layers of annotation on top of the tree
structure. Extra information like word senses, discourse
annotation, etc. can be present in a treebank. The library
must therefore offer the user the possibility to display the
additional information in a uniform, visually appealing
manner. For example, the word sense layer could be labeled
as token-related information and could be displayed when
the user hovers over the word (as in ProD) or in an
information section under the word. One future step for the
Arbore visualization library is to allow the users to edit the

V.

FUTURE WORK

At a higher level, there are broader design issues about
how general and how customizable ProD should be. Does it
need to be able to look like the dendrograms in Arbore, e.g.
with shapes for the nodes? How much customization should
be incorporated into ProD and how much should be left to
generic techniques in the applications using ProD? In
addition, what mechanisms should ProD provide to facilitate
its incorporation into broader contexts? For example, the
brushing and linking in the PAISÀ application is done
entirely in the application, making use of generic event
handlers – there is no notion of “brushing and linking” in
ProD because ProD is only a single element. The general
question is what should be packaged with the visualization
(e.g. as an API) and what should be left out. Only getting a
better idea of possible usage scenarios can tell us.
There are issues related to the linguistic representations
as well. For example, some of the syntactic structures in the
WebLicht project are not trees, but rather trees augmented
with a separate layer of structural annotation. In this case, a
node may have multiple parents. Should ProD be extended to
handle these cases, how?
Once again, these questions can only be answered by
more detailed study of user requirements for this type of

218

visualization aimed at exploration and hypothesis forming.
As well, both visualizations should have more user testing.
Arbore and ProD have some similar design decisions,
which could be reconsidered. For example, even though
dendrograms are hierarchical, both visualizations (and
indeed, the one in D3) are not: all the nodes and links are in
the same SVG group. Having a hierarchical visualization
might make scaling subtrees easier (though it might also
make aligning the nodes more difficult).
Finally, both Arbore and ProD have things to contribute
to each other. ProD could use shapes around the nodes, for
example. In addition, ProD should make more of an effort to
collaborate with other components, as Arbore does. On the
other hand, the ability to collapse subtrees, either in the main
diagram or to serve as a thumbnail for navigation purposes
could be useful in Arbore. In addition, if user testing upholds
the usability of the node searching/highlighting technique,
that would motivate implementing the same functionality in
Arbore. Similarly, brushing and linking nodes with the text
would also be a useful addition to Arbore. Also, in terms of
the visual aspect, Arbore supports theming, but only
programmatically. Since it is designed to be embedded into
other applications, it might prove useful to factor out the
theming into CSS, the way ProD does. In this way, user
applications could define new styles for the library and
integrate it better with the rest of the application.
VI.

REFERENCES
[1]
[2]

[3]
[4]
[5]

[6]

[7]

[8]
[9]
[10]

CONCLUSIONS

[11]
[12]
[13]

Developing the two visualizations in parallel has been
very instructive. Design considerations (e.g. shapes around
nodes to meet user expectations) from Arbore will influence
further development in ProD, and design solutions in ProD
(e.g. dynamic highlighting, brushing and linking, collapsing
nodes) will be incorporated in Arbore. Initial user testing has
also provided food for thought, as well as impetus to rethink
some our designs. In the end, the users of WebLicht, as well
as other applications using Arbore, will benefit from
improved syntax tree visualizations.

[14]
[15]

[16]

ACKNOWLEDGMENT
[17]

The research of the first and third authors was supported
by the Federal Ministry for Education and Research (BMBF)
as part of the grant CLARIN-D. Corina Dima's contribution
was funded by the German Research Foundation (DFG) as
part of the Collaborative Research Center "The Construction
of Meaning" (SFB 833). Thanks to Kathrin Beck, Dale
Gerdemann, Erhard Hinrichs, Verena Lyding, Scott Martens,
and L. Lee McIntyre for helpful input.

[18]

[19]

219

Wordle url: http://www.wordle.net/
C. Culy and V. Lyding, “Visualizations for exploratory corpus and
text analysis,” Proceedings of the 2nd International Conference on
Corpus Linguistics, CILC-10, A Coruña, Spain, 257-268. May 2010.
C. Rohrdantz, et al., “Visuelle Textanalyse,” Informatik Spektrum
33(6), 601-611. December 2010.
EACL
LINGVIS
workshop
url:
https://sites.google.com/site/lingvisunclh/
V. Henrich, E. Hinrichs, M. Hinrichs, and T. Zastrow, “ServiceOriented Architectures: From Desktop Tools to Web Services and
Web Applications,” Multilinguality and Interoperability in Language
Processing with Emphasis on Romanian, Romanian Academy
Publishing House, Dan Tufiú and Corina Forăscu (eds.), Bucharest,
Romania, pp. 69-92. December 2010.
C. Culy, V. Lyding, and H. Dittmann, “xLDD: Extended Linguistic
Dependency Diagrams,” Information Visualization: Proceedings of
the 15th International Conference on Information Visualization (IV
2011, London, UK), pp. 164–169. 2011.
W. Lezius and E. König, “Towards a search engine for syntactically
annotated corpora,” KONVENS-2000 Sprachkommunikation, ,”
Ernst G. Schukat-Talamazzini Werner Zühlke (editor), pp. 113-116,
VDE-Verlag, Ilmenau, Germany. 2000.
TIGERSearch
url:
http://www.ims.unistuttgart.de/projekte/TIGER/TIGERSearch/oldindex.shtml
Berkeley
parser
url:
http://tomato.banatao.berkeley.edu:8080/parser/parser.html
A. Zeldes, J. Ritz, A. Lüdeling, and C. Chiarcos, “Annis: A search
tool for multi-layer annotated corpora,” Proceedings of Corpus
Linguistics 2009, July 20-23, Liverpool, UK. 2009.
ANNIS url: http://www.sfb632.uni-potsdam.de/d1/annis/
Raphaël url: http://raphaeljs.com/
T. Brants and O. Plaehn, “Interactive corpus annotation,” Proceedings
of the Second International Conference on Language Resources and
Evaluation. Athens, Greece. 2000.
Annotate url: http://www.coli.uni-saarland.de/projects/sfb378/negracorpus/annotate.html
M. Bostock, V. Ogievetsky and J. Heer, “D3: Data-Driven
Documents,” IEEE Trans. Visualization & Comp. Graphics (Proc.
InfoVis). 2011.
J. Heer and S. K. Card, “DOITrees revisited: scalable, spaceconstrained visualization of hierarchical data,” Proceedings of the
working conference on Advanced visual interfaces (AVI '04). ACM,
New York, NY, USA, 421-424. DOI=10.1145/989863.989941. 2004.
J. Lamping, R. Rao, P. Pirolloi, 1995. "A Focus+Context Technique
Based on Hyperbolic Geometry for Visualizing Large Hierarchies".
Proc. ACM Conf. Human Factors in Computing Systems, CHI. ACM.
pp. 401–408.
G. W. Furnas, 1981. "The fisheye view: A new look at structured
files." Reprinted in S. K. Card, J. D. Mackinlay & B. Shneiderman
(Eds.), 1999 Readings in information visualization: Using vision to
think, pp. 312-330. San Francisco: Morgan Kaufmann Publishers,
Inc.
PAISÀ
url:
http://www.corpusitaliano.it/en/index.html

