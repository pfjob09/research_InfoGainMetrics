Research Report
DataSpace:

3-D Visualizations

of Large Databases

V. Anupam, S. Dar, T. Leibfried”, E. Petajan
AT&T Bell Laboratories, Murray Hill, NJ, 07974,
*University of Houston, Clear Lake, Texas 77058
email: { anupam,dar,tfljr,edp} @research.att.com
Abstract

ular problem associated with visualization of large databases is inadequate display space. DataSpace utilizes
display space by placing panels or windows of information
in a 3 dimensional environment using 3-D computer graphics technology. Windows are organized as nodes in a 3-D
graph to facilitate optimal window arrangement and to
present information in the 3-D graph itself. For example, 5
dimensional data can be visualized as a 3-D lattice of 2-D
plots.

DataSpace is a systemfor interactive 3-D visualization and
analysis of large databases. DataSpace utilizes the display
space by placing panels of information, possibly generated
by different visualization applications, in a 3 -D graph layout, and providing continuous navigation facilities. Selective rearrangements and transparency can be used to
reduce occlusion or to compare or merge a set of images
(e.g. line graphs or scatter plots) that are aligned and
stacked in depth.

The essential advantage of such 3-D information display is
the ability to continuously scale the information panels by
changing the distance between the panel and the point of
view (POV), thereby allowing more panels in the display.
Much of the information in a distant (small) panel remains
directly accessible (e.g.,graph shape, color, text format). At
the same time, the ability to “perturb” (slightly change) the
POV provides strong depth cues, helping the user get oriented in the graph layout. A disadvantage of 3-D graphics
is occlusion of background objects by foreground objects.
This problem is addressed in DataSpace by three basic
mechanisms. Most importantly, DataSpace allows the user
to interactively change the POV in order to expose background objects at will. DataSpace also supports the use of
transparency in the 3-D graph, allowing all objects (panels)
to become partially transparent so that background objects
are visible through foreground objects. Transparency can
also be used to compare and/or merge a set of images (e.g.
line graphs) that are aligned and stacked in depth, such that
the individual images can still be distinguished by slight
changes in POV and selective changes in transparency.
Finally, the user can reconfigure all objects in a nonoccluding arrangement from a given POV. For example, a
3-D lattice of panels can be converted continuously (using
animation) into a tiling of panels at the same distance from
the POV.

A prototype system supporting the basic 3-D graphic operations (layout, zoom, rotation, translation, transparency)
has been implemented. We provide several illustrative
examples of DataSpace displays takenfrom the current system. We present the 3-D display paradigm, describe the
query, layout and rendering steps required to create a display, and discuss some performance issues.

1 Introduction
Advances in data collection and storage technology have
greatly exceeded those in data analysis and visualization.
The ever expanding use of information management systems by businesses and government has resulted in an overwhelming
amount
of information.
However,
this
information “mine” is often underutilized, due to a lack of
effective analysis and visualization tools for large databases. Such tools must be cost effective, offer interactive
performance and integrate querying and visualization of
the data. For example, information stored in a relational
database can currently be queried using a declarative textual language like SQL; however the results can only be
viewed in tabular form. Moreover, a user may wish to interactively construct a complex query by viewing previous
query results in some graphical form and iteratively refining his/her queries.

Since different visualizations may be suitable for different
data types, the ability to customize the presentation is
important. A large variety of data presentation formats
have been developed for specific types of data. For exam-

DataSpace is designed to support interactive analysis and
visualization of large, high dimensionality databases, i.e.
large sets of data with a high number of attributes. A partic-

O-8186-7201-3/95 $04.00 0 1995 IEEE

Proceedings of the Proceedings on Information Visualization (INFOVIS '95)
0-8186-7201-3/95 $10.00 © 1995 IEEE

82

See Color Plates, pages 144, 145.

ple, geographic and demographic information, financial
data, and sales data may require different visualization
methods, such as maps, scatter plots, and tables. DataSpace
can be used as a 3-D window manager, allowing the user to
incorporate displays generated by different visualization
systems into a unified graphical environment.

graphical location. Generating the appropriate node image
in either case requires specific expertise: normalizing the
data in the first case, generating the map display in the second. Rather than incorporating such specialized capabilities
in DataSpace, we chose a more flexible and open approach,
designing DataSpace as a 3-D window manager controlling
windows created by other applications. Currently such
applications include Trellis [1,2], SeeNet[4], SeeSoft[3]
and IMACS [5].

The query and visualization cycle time must be short, or
else the opportunity for insight may be diminished due to
human memory and attention limitations. Achieving an
acceptable iteration time requires fast computer processing,
including database access and graphics presentation, as
well as efficient human analysis. The effectiveness and
speed of human processing depends on many factors, such
as the intuitiveness of the display and the quality of the
graphics presentation, including its format and resolution.
In addition to considering such factors in DataSpace. we
also strive to reduce the computer processing time by using
efficient 3-D display algorithms and by incorporating techniques for speeding up query evaluation time.

Section 2.1 provides several illustrative examples of the
DataSpace display graph, using 2-D tiling, a 3-D lattice and
a hierarchical layout. A more detailed discussion of the display graph, the visualization process required to create it,
the interaction between DataSpace and other applications
and performance issues is given in Section 3.

2.1 Layout Examples’
2.1.1 2-D Tiling with Node blow-up

The rest of the paper is organized as follows. Section 2 presents the 3-D display paradigm, using several examples.
Section 3 describes he architecture of the system. Performance issues are outlined in Section 3.4. Section 4
describes potential applications of DataSpace. Section 5
reviews related work. Section 6 gives our conclusions and
directions for future work.

2 The DataSpace Paradigm
The underlying display model used to organize and present
information in DataSpace is a 3-D display graph, comprised of nodes located in a 3-D space and edges connecting those nodes. The layout of the graph as well as the
display properties of the nodes and edges, such as color and
transparency, may be controlled via the user interface. Typically a node represents a set of data items, while edges
represent relationships between those data items. For
example, consider analyzing a database of telephone calls.
Each node may represent a segment of the customer population. The color of the border of the node may indicate the
number of customers in that segment. An edge between
two nodes may represent phone calls made between the
two sets of customers. The edge color may be used to indicate the average length of a call, and the edge width may be
related to the total cost of the calls.

Figure 1. 2-D Tiling with Node Blow-up
Figure 1 shows panels arranged in a 2-D matrix with fifteen
rows and eighteen columns. The panels represent the usage
of telecommunication services by different companies over
a period of time. Each panel represents, using a line graph,
the usage a particular telecommunication service by some
company over a period of time. The panels are arranged
such that each row shows the usage of different services by
the same company, and each column depicts the usage of
the same service by different companies. Such an arrangement can provide an holistic view of the data.
We would like to impress upon the reader that even when
nodes are reduced to a size smaller than a post stamp, it is
still possible to observe the patterns that appear on individual nodes. Interesting nodes can be selected for closer or
comparative viewing. For example, Figure 1 shows a single

Nodes in the graph may contain 2-D or 3-D graphical
images. An important feature of DataSpace is that the contents of a node may be generated by a separate application,
with DataSpace used to render the resulting node image. In
our example, there may be different ways that the set of
customers associated with a node may be viewed, for
instance (1) as a scatter plot depicting their total monthly
phone bill, or (2) as points on a map, depicting their geo-

1. We recommend to the reader to look at the color plates
corresponding to the black and white figures in the text.

83

Proceedings of the Proceedings on Information Visualization (INFOVIS '95)
0-8186-7201-3/95 $10.00 © 1995 IEEE

node blown up to its full size for closer inspection. If a
direct comparison of multiple nodes is desired, then a
three-dimensional presentation using orthographic projection together with transparency may be used (see Figure 3).
2.1.2 3-D Lattice with PerspectCve Projections

Figure 3. Orthographii
Projection with
Overlay Transparency

Figure 2. 3-D Lattice with
Perqaective Projection
Figure 2 shows panels arranged in a 3-D lattice and viewed
in perspective projection, such that panels farther from the
viewer are rendered smaller then panels that are closer.
This appears to provide a vanishing point and perspective
foreshortening much as that provided by a pinhole camera
[14]. In contrast, orthographic projections, as in Figure 3,
render like objects at the same size regardless of their distances from the viewer. Tn Figure 2 and Figure 3 each plane
displays data for a different company, using scatter plots in
Figure 2 and line graphs in Figure 3. The perspective projection allows the user to quickly get oriented in the display
space, and is convenient for navigation- The orthographic
projection is useful for ‘“paging through” planes and for
amqxuing data on multiple planes using transparency and
selective rearrangement.
2.1.3 Ortbgrk@ic

Projectim

with Trampamncy

Two modes of transparency are provided in DataSpace:
with overlay transparency, all the panel background pixels
are fully transparent* resulting in a uniform combination of
the visual information (foreground) of stacked nodes. With
blefid& transparency, the planes are not fully transparent.
Consequently, the observed intensity of a panels diminishes
as its distance from the viewer is increased, providing a
sense of depth.
Overlay transparency is typically useful when the depth
dimension is unordered. As an example, Figure 3 shows the
same panels as in Figure 1, arranged in a 3-D lattice such
that each plane represents information on a different cornpany, and viewed using orthographic projection with overlay transparency. Nodes ~Jigned directly behind each other

Proceedings of the Proceedings on Information Visualization (INFOVIS '95)
0-8186-7201-3/95 $10.00 © 1995 IEEE

correspond to services provided to different companies
over the same time period. By using overlay transparency
and a different color for each company’s information, the
user may visually compare and/or combine the information
displayed on multiple nodes or planes. Blended transparency may be more appropriate when the depth dimension
corresponds to some ordered attribute of the data, such as
its time dimension. The degree of transparency can be
adjusted to control the number of node images that are visible. For example, Figure 4 demonstrates the use of blended
transparency with multiple stacked nodes, each containing
a scatter plot point cloud together with a fitted curve. As te
level of transparency is increased from the figure on the kft
to the middle figure and then to the figure on the right, the
points and curves from previously occluded nodes become
gradually more visible.

Figure 4. Progressive Blended Transparency
Graphical selection can be used to reduce the number of
nodes, rows, columns or depth plans displayed on the
screen. For example, we may wish to compare only the two
companies represented by the first and third plane in
Figure 3.
2.1.4 Hierarchkal

Laymt

with Edges

Figure 5 shows a 3-D hierarchical node layout with connecting edges, viewed in perspective projection. The underlying data is a synthetic organizational structure. Nodes
represent people, rendered by (random) photographs, while
edges represent management (or relationships. This structure allows the user to quickly navigate a large organizational hierarchy and get additional information about
individuals or organizations of interest [‘I’].

rad data
1 Lsad to Database 1

Figure 5. Hierarchical Layout with Edges

1 Layer graph in 3-DI

3 The DataSpace Architecture

3.1 The Visualization Process

1 Layout 3-D graph f

Given a database to be visualized, DataSpace provides
tools for the user to select a particular data set and to specify an initial display graph, by mapping attributes of the
data into nodes and edges and determining how the nodes
and edges are to be Iaid out and rendered in three dimensional space. The steps involved in this process, outlined in
Figure 6, are as follows:
1. The raw data is cleaned and loaded into a database.
2. The user chooses a database to be explored. The
schema of the database is presented to the user, allowing the user to select a subset of the data to be visualized. We provide a tabular query interface similar to
Query-By-Example (QBE) [8], which is typical of
many relational commercial database systems.
3. Attributes of the data are mapped to nodes and edges,
resulting in a graph topology.
4. Nodes are assigned a Z (depth) value, i.e. they are distributed to different Z-planes.
5. Nodes are assigned X and Y values, resulting in a layout of the graph in 3-D.
6. Node contents are rendered. The node content may be
generated by DataSpace or by a separate application.
7. Edges are rendered, including properties such as color,
thickness and transparency.
8. A 3-D display graph is now displayed on the screen,
which the user can manipuIate or modify. The user can
also go back to an earlier point in the visuahzation process, such as to change the display graph layout or
select a different data set to explore.

I
I

I

Dl

nodSecontent+presentation

II

Render edges

ai.

II

edgdproperties
I

.

I

Visualize;
Zooming
Navigation
Tkansparency
...
3-ddisplag
Figure 6. The Visualization Process
3.2 Automatic Layout of a 3-D Graph
A large body of work has been devoted to graph layout in
2-D [lo]. The goal of this work is to place nodes and edges
so as to increase the coherence of the drawing, typically by
reducing edge lengths or the number of edge crossings.
Graph drawing in 3-D was also investigated, but finding a
layout that will “Iook good” when the graph is arbitrarily
rotated is a very difficult problem. In addition, many existing algorithms perform an exhaustive search of the space of

Note that these steps may not necessarily need to be done
sequentially. In particular, the node contents can be generated by a separate application (step 6) while the 3-D graph
layout is being computed (steps 4,5).

85

Proceedings of the Proceedings on Information Visualization (INFOVIS '95)
0-8186-7201-3/95 $10.00 © 1995 IEEE

Render nodes 1

layout possibilities, making them prohibitively
large graphs.

dow’s application. For example, DataSpace may need to
translate a combination of mouse clicks and drags into
highlighting a rectangular area on an arbitrarily scaled and
rotated window.

slow for

We intend to address graph layout using both theoretical
and ad-hoc approaches. Firstly, since we are interested in
finding layouts that reflect attributes of the underlying database in a manner designated by the user, the layout search
space may be quite constrained. For example, the user may
request that a specified set of nodes be placed all on the
same plane, or alternatively that they be positioned directly
behind each other. Secondly, while DataSpace supports
perspective projections and rotation, we believe these will
be used by users primarily for reorientation purposes. We
expect DataSpace to be used mostly in orthographic projection, and hence we focus on layouts optimized for viewing
from the “front”. In particular, we intend to explore the use
of 3-D layouts obtained by separately (or in parallel) determining a 2-D layout for the nodes and a 3-D depth assignment, and then combining the two. Thirdly, we believe that
the negative effects of edge crossings can be reduced by
drawing appropriate beginning and end parts of each edge
while not drawing the middle [4], by changing the thickness and color of edges, and by the use of edge transparency.

Within the spectrum going from fully active to no active
windows, we selected an intermediate design point that we
feel is both useful and feasible. We plan to extend the current “passive” DataSpace system by letting the user interact
with application windows when those windows are at their
full size. That is, a user may “pull” an application snapshot
to the “front” of the display, enlarging it to its full size. At
this point DataSpace can replace the passive snapshot by a
live application window. Since the window has the same
size as its snapshot, the node image seen by the user will be
the same. However the border of the window may change
to indicate to the user that the window is now active, and
that the user may interact through it with the application
using application-specific controls. When done, the user
may “push” the application window back, making it
smaller. DataSpace will transparently replace the window
by its (new) snapshot and then scale the snapshot down and
reposition it in the 3-D display graph (this process can be
viewed as a generalization of window iconification and deiconification).

3.3 Active W indows

3.4 Performance Issues

As illustrated in Section 2, DataSpace may be used as a 3D window manager for other visualization applications. We
now discuss in more detail how DataSpace interacts with
those applications.

There are two basic ways in which node images can be rendered in DataSpace: texture mapping, which directly
applies an image to the node, and graphical construction,
which creates the image as a collection of primitives operations, such as pixel, line, polygon and text drawing. Real
time texture mapping currently requires expensive specialpurpose hardware, such as an SGI Reality Engine TM. The
cost of such hardware may go down in the near future, as
texture mapping chips become available for workstations
and PCs. In DataSpace, texture mapping is used primarily
for continuous scaling of windows that are perpendicular to
the user’s direction of view. Such restricted scaling can be
done more cheaply than using pixel-by-pixel resealing. In
addition, the need for texture mapping in DataSpace may
be reduced by drawing graphical objects and text directly,
provided a description of the graphics and text data is available. For example, Figure 2 was generated using texture
mapping, Figure 3 was generated using polygon drawing,
Figure 1 was generated using a combination of texture
mapping (for node background) and polygon drawing (for
the line graphs).

In the present system the display panels managed by
DataSpace are passive, i.e. they are “snapshots” generated
by the applications rather than true windows into the application. We use postscript as the snapshot format of choice,
since it supports scaling of the images. At the other
extreme, DataSpace could be used to manage active windows, allowing the user full interaction with any visible
application window. For example, the user may wish to
graphically select (e.g. by highlighting) an area of a window and then apply to it some application-specific function, with the result being reflected in the window.
However, it is difficult to support full interaction with any
window in conjunction with 3-D navigation in DataSpace.
Clearly having DataSpace simply manage live application
windows, as in existing 2-D window managers, is not a viable option, since it would require the applications to handle
scaling and rotation, as well as transparency. Therefore, if
the output from the window applications is to be reflected
in the DataSpace display, then this output must be intercepted by DataSpace in order for it to handle scaling, rotation and transparency. In addition, DataSpace must project
graphical input from the user, directed at a particular window, to the 2-D coordinate system supported by that win-

We plan to augment DataSpace with heuristics for automatically choosing whether to render node images using texture mapping, graphical construction from descriptive data,
or a combination of both. The choice will be based on the
availability of resources, such as texture and physical mem-

86

Proceedings of the Proceedings on Information Visualization (INFOVIS '95)
0-8186-7201-3/95 $10.00 © 1995 IEEE

ory and rendering hardware, for these two classes of operations, as well as the complexity of the node contents.
Additionally, heuristics may be introduced to trade-off the
speed and quality of the rendering.

[2] is a front end to the S statistical package [l] providing
multiple presentation formats, such as scatter plots, line
charts and bar graphs. The existence of such specialized
visualization systems motivated us to design DataSpace as
a general, open 3-D display paradigm, in which panels generated by other applications can be incorporated.

3.4.1 Transparency and Space Partitioning Trees
Space partitioning trees provide a spatial ranking of display
objects that has three benefits: (a) it allows for an efficient
computation of composite transparency from a given POV
by an orderly progression from the back of the display to its
front, (b) it supports fast view volume clipping as a set
operation [6], (c) it obviates the need for z-buffer calculations, which are expensive and at present require special
hardware support. Affine transformations, required for
changes in the POV such as scaling, rotation and translation (panning), can be performed efficiently on partitioning
trees. Due to these considerations DataSpace has been integrated with Polymnia [6], a library that provides an efficient implementation of partitioning trees.

The DataSpace 3-D graph design has been inspired by
other 3-D layout and visualization systems. Among others,
we were influenced by Reiss’s study of 3-D visualization of
programs [ 121; by the lattice model in [ 111, and by the cone
tree metaphor for presenting hierarchical information [7].

5 Conclusions
We described DataSpace, a system for interactive 3-D visualization and analysis of large databases. DataSpace provides a new visualization paradigm based on 3-D layout of
information panels or windows, augmented with continuous navigation, selective rearrangement and transparency.
A prototype system supporting the basic 3-D graphic operations has been implemented. We believe that the 3-D
graph paradigm used in DataSpace is both general and
powerful. We provided several illustrative examples of
DataSpace displays taken from the current system, including both 3-D visualizations generated by DataSpace from
raw data, as well as panels generated by other applications
and embedded in a DataSpace display graph. (Unfortunately, it is difficult to appreciate the full value of dynamic
3-D presentations by viewing static images like the ones in
this paper.) We also discussed performance issues and indicated directions for future work, in particular transforming
DataSpace into a 3-D window manager controlling both
passive and active windows.

4 Related Work
Most current research on 3-D visualization is in the context
of scientific visualization, which deals with rendering of
physical data with intrinsic geometric properties (see e.g.,
[ 151). Similarly, work in virtual reality uses 3-D graphics to
model physical environments, such as a building, a room or
a desk, which may represent real world entities or abstract
data [16]. In contrast, we focus on visualization of largescale abstract data, typical of business applications. We use
3-D graphics to provide the user with an intuitive and flexible presentation tool. Hence, the 3-D display in DataSpace
is not constrained by trying to emulate the physical world.
Other research work with related goals is listed below

The most effective applications of DataSpace are those in
which the large size or high dimensionality of the data
make it difficult to visualize using existing 2-D visualization systems. For example, the Trellis system is capable of
generating a large number of high-dimensional arrays of 2D plots, however, the problem of managing the plots is
essentially left to the user. Addressing this problem by
embedding static Trellis display in DataSpace has proven
quite useful. We are extending DataSpace to provide interactive visualization, allowing the user to dynamically select
data and analyze it, by integrating the database interface,
graph layout, node rendering and 3-D navigation components. The DataSpace system is currently being used,
among others, in exploring telephone call data for market
analysis and fraud detection purposes.

Keim et al [9] describe visual feedback queries for exploring large databases. The main goal is to maximize usage of
the screen, by assigning each data item to one pixel on the
screen, and using the color and position of the pixel to indicate the relevance of the data item to the query. 3-D
arrangements were not explored.
Faloutsos and Lin [ 131 developed an algorithm for mapping points in a high-dimensional space to points in a
lower-dimension space. We intend to incorporate their
algorithm in DataSpace, allowing a user to visualize highdimensionality data by plotting is as 2-D or 3-D point
clouds, optionally augmented by curve or surface fitting.
Many systems were developed to support visualization of a
specific type of abstract data. For example, SeeSoft [3] is a
system for visualization of large text software projects, typically involving multiple programmers and organized using
many files. SeeNet [4] is a system for visualizing connections in networks, such as the long distance network. Trellis

References
1.

87

Proceedings of the Proceedings on Information Visualization (INFOVIS '95)
0-8186-7201-3/95 $10.00 © 1995 IEEE

R. Becker, J. M. Chambers and A. R. Wilks, “The New S
Language”, Wadsworth & Brooks/Cole Advanced Books
and Software, Pacific Grove CA 1988.

2.

W. CleveEand,‘*Visualizing Data”, Hobart Press,1993.

3.

S. 6. Eick, I. L. Steffen and E. E. Sumner,“SeeSoft - a Tool
for VisuaEizingLine Oriented Software Statistics”, IEEE
Transactionson Software Engineering, vol. 18, no. 1, pp,
957-968, Nov. 1992.

4.

R. A. Becker, S. G. Eick and A. R. Wilks, “Visualizing Network Data“, IEEE Transactions on Visualizations and
Graphics,vol. 1, no. 1, pp 16-28,March. 1995.

5.

9.

D. A. Keim, H-P K&gel and T. Seidl, “Supporting data
Mining of Large Databasesby Visual Feedback Queries”,
Proc. of 10th international Conferenceon Data Engineering,
Houston,TX, Feb. I994

10. R Eadseand R. Tamassia,“Algorithms for Automatic Graph
Drawing: an Annotated Bibliography”, Networks 1993.
11. W. L. Hibbard, C. R. Dyer and B. E. Paul, “A Lattice model
for Data Display”, Proc. Visualization ‘94, pp. 310-317,
WashingtonDC, Ott 1994.
12. S. P Reiss, “3-D Visualization of Program Information”
(ExtendedAbstract and System Demonstration”.

R. J. Bra&man, P. G. Selfridge, LG. Terveen,B. Altman, A.
Borgida, F. Halper, T. Kirk, A. Lazar, D. L. McGuiness, L.
A. Resnick, “Knowledge RepresentationSupport for Data
Archeotogy”, Proc. CHUM-92,pp. 457-464, Baltimore MD.
Nov 1992.

6.

B. F. Naylor, “Jnteractive Solid Modeling Via Partitioning
Trees”, Proc. of GrapAicsInterface, pp. 11-18,May 1392.

13. C. Faloutsosand K-I. Lin, “FastMap:A Fast Algorithm for
Indexing, Data-Mining and Visualization of Traditional and
Multimedia Datasets”, to appear in SIGMOD ‘95 (May
1995).

7.

6. 6. Robertson, J. D. Mackinlay and S. K Card, “Cone
Trees:Animated 3-D Visualizationsof Hierarchical Information”, Proc. CHI’94, pp. 189-l 94, April 1994.

14. J. D. Foley, A. van Dam, S. K. Feiner and J. F. Hughes,Cornputer Graphics Principles and Practice, Addison-Wesley,
1990.

8.

M. M. Zloof, “Query-By-Example”, Proc. of the National
Computer Conference,pp. 431-438,May 1975.

15. M. Grave, Y. L. Lous and W.T. Hewitt, Editors, Visualization
in Scientijc Computing, Springer-Verlag,1994.
16. K. Piementel and K. Teixeira, Virtual Reality: Through the
New Looking Ghss, 2nd Edition, TAB Books, 1994.

88

Proceedings of the Proceedings on Information Visualization (INFOVIS '95)
0-8186-7201-3/95 $10.00 © 1995 IEEE

