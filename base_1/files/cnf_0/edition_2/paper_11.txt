Interactive Hierarchical Dimension Ordering, Spacing and Filtering for
Exploration of High Dimensional Datasets∗
Jing Yang, Wei Peng, Matthew O. Ward and Elke A. Rundensteiner †
Computer Science Department
Worcester Polytechnic Institute
Worcester, MA 01609

Abstract
Large numbers of dimensions not only cause clutter in multidimensional visualizations, but also make it difficult for users to
navigate the data space. Effective dimension management, such as
dimension ordering, spacing and filtering, is critical for visual exploration of such datasets. Dimension ordering and spacing explicitly reveal dimension relationships in arrangement-sensitive multidimensional visualization techniques, such as Parallel Coordinates,
Star Glyphs, and Pixel-Oriented techniques. They facilitate the visual discovery of patterns within the data. Dimension filtering hides
some of the dimensions to reduce clutter while preserving the major
information of the dataset.
In this paper, we propose an interactive hierarchical dimension
ordering, spacing and filtering approach, called DOSFA. DOSFA
is based on dimension hierarchies derived from similarities among
dimensions. It is a scalable multi-resolution approach making dimensional management a tractable task. On the one hand, it automatically generates default settings for dimension ordering, spacing
and filtering. On the other hand, it allows users to efficiently control
all aspects of this dimension management process via visual interaction tools for dimension hierarchy manipulation. A case study
visualizing a dataset containing over 200 dimensions reveals how
our proposed approach greatly improves the effectiveness of high
dimensional visualization techniques.
CR Categories:
H.5.2 [Information Interfaces and Presentation]: User Interfaces—Graphical user interfaces H.2.8 [Database
Management]: Database Applications—Data mining I.5.3 [Pattern
Recognition]: Clustering—Similarity Measures
Keywords: Dimension ordering, dimension spacing, dimension
filtering, multidimensional visualization, high dimensional datasets

1

Introduction

High dimensional datasets are becoming commonplace in applications such as digital libraries, bioinformatics, simulations, process
monitoring, and surveys. They bring an important issue to existing
∗ This

work was supported under NSF grant IIS-0119276.
{yangjing,debbie,matt,rundenst}@cs.wpi.edu

† e-mail:

IEEE Symposium on Information Visualization 2003,
October 19-21, 2003, Seattle, Washington, USA
0-7803-8154-8/03/$17.00 ©2003 IEEE

multi-dimensional visualization techniques - dimension management. Without effective dimension management, such as dimension
ordering, spacing and filtering, high dimensional visualizations can
be cluttered and difficult for users to navigate the data space. For
example, a 200 dimensional data set means 40000 plots for Scatterplot Matrices [Cleveland and McGill 1988], 200 axes for Parallel Coordinates [Inselberg and Dimsdale 1990; Wegman 1990], 200
subwindows for Recursive Pattern [Keim et al. 1995], and 200 arms
for Star Glyphs [Siegel et al. 1972].
The order of dimensions is crucial for the effectiveness of a large
number of visualization techniques [Ankerst et al. 1998]. For example, in many multidimensional visualization techniques, such
as Parallel Coordinates [Inselberg and Dimsdale 1990; Wegman
1990], Star Glyphs [Siegel et al. 1972], Circle Segments [Ankerst
et al. 1996] and Recursive Pattern [Keim et al. 1995], the dimensions have to be positioned in some one- or two- dimensional arrangement on the screen. This chosen arrangement of dimensions
can have a major impact on the expressiveness of the visualization because the relationships among adjacent dimensions are easier
to detect than relationships among dimensions positioned far from
each other. Another example is attribute mapping. In visualizations
such as Chernoff Faces [Chernoff 1973], Worlds within Worlds
[Feiner and Beshers 1990], and Dimensional Stacking [LeBlanc
et al. 1990], more important dimensions need to be mapped to more
pre-attentive visual attributes, such as more important features of
the face in Chernoff Faces, axes appearing earlier in Worlds within
Worlds, and outer dimensions in Dimensional Stacking. Dimension
ordering targets these problems, and aims to improve the effectiveness of the visualization by giving orders to the dimensions that
enable users to more easily detect relationships and pay more attention to important dimensions.
In several multidimensional visualization techniques, such as
Parallel Coordinates [Inselberg and Dimsdale 1990; Wegman 1990]
and Star Glyphs [Siegel et al. 1972], uniform spacing/angles are
placed by default between two adjacent axes in the display. We
conjecture that non-uniform spacing could be used to convey information about dimensions, such as similarity between adjacent
dimensions or structure of the dimension space.
Dimension filtering removes some of the dimensions from the
display. It is essential for visualizing high dimensional datasets.
For datasets contains several hundreds or more dimensions, none
of the existing multidimensional visualization techniques can map
all the dimensions at the same time without cluttering the display. Popular dimension reduction approaches, such as Principal Component Analysis [Jolliffe 1986], Multidimensional Scaling [Mead 1992], and Kohonen’s Self Organizing Maps [Kohonen
1995; Flexer 1999], condense the hundreds or thousands of dimensions into a few dimensions. However, those generated dimensions
have little intuitive meaning to users and allow little user interaction. Dimension filtering is more intuitive to users in that the remaining dimensions are all original dimensions in the dataset so
that they are all meaningful. Dimension filtering is also more flexible in that it allows users to interactively select or unselect dimensions to be filtered.

Proceedings of the IEEE Symposium on Information Visualization 2003 (INFOVIS’03)
0-7695-2055-3/03 $ 17.00 © 2003 IEEE

In this paper, we propose a general approach to dimension
management for high dimensional visualization. Our solution is
an interactive hierarchical dimension management approach called
DOSFA (Dimension Ordering, Spacing, and Filtering Approach). It
supports both automatic as well as interactive means of dimension
ordering, spacing and filtering.
To reveal how DOSFA improves the effectiveness of high dimensional visualization techniques, we present a case study in this
paper that visualizes the OHSUMED dataset, which contains the
word-counts of a medical abstract collection [Hersh et al. 1994]. It
contains 215 dimensions and 298 data points.
The remainder of this paper is organized as follows. In Section 2,
we review related work. In Section 3, we introduce the dimension
hierarchy construction and navigation processes fundamental to our
DOSFA approach. In Sections 4, 5 and 6 we present our semiautomatic dimension ordering, spacing and filtering approaches. In
Section 7, we present our conclusions and future work.

2

Background

Dimension order is an important issue in visualization. [Bertin
1983] gave some examples illustrating that permutations of dimensions and data items reveal patterns and improve the comprehension
of visualizations. [Ankerst et al. 1998] pointed out the importance
of dimension arrangement for order-sensitive multidimensional visualization techniques. They defined the concept of similarity between dimensions and discussed several similarity measures. They
proposed the idea of rearranging the dimensions such that dimensions showing a similar behavior are positioned close to one another. They proved that this is an NP-complete problem equivalent
to the traveling salesman problem, and used an automatic heuristic
approach to generate a solution. Our dimension ordering approach
is different from their approach in that we impose a hierarchical
structure over the dimensions to reduce the complexity of the ordering problem and allow efficient user interactions.
Dimension order is also important for many other fields. For instance, the database primitive similarity join has been used to speed
up applications such as similarity search, data analysis and data
mining. Its computational overhead is mostly dedicated to the final
distance computations between the feature dimensions. [Boehm
et al. 2002] proposed a generic technique to avoid and accelerate
the distance calculations between those dimensions by carefully ordering them according to a probability model.
Manual dimension ordering and filtering are available in many
multidimensional visualization systems. For example, Polaris
[Stolte and Hanrahan 2000] allows users to manually select and
order the dimensions to be mapped to the display. Microsoft Excel
allows users to change the order of the dimension by drag-and-drop
operations. In XmdvTool [Ward 1994], users manually filter dimensions and change the order of the dimensions from a reconfigurable list of dimensions. Although manual dimension ordering and
filtering as found in such tools are sufficient for low dimensional
datasets, they become cumbersome for high dimensional datasets.
Conveying information using spacing in the display has many
applications. Many tree drawing algorithms [Furnas 1986; Eades
1992] use spacing to convey structural information about the tree.
[Ward 2002] used the distance between adjacent glyphs to convey
their relationship in an N dimensional space. In our approach, we
use the spacing between dimensions to indicate similarity between
adjacent dimensions or structure of the dimension space.
The idea of using dimension hierarchies to facilitate dimension
ordering, spacing and filtering is inspired by our previous work on
Visual Hierarchy Dimension Reduction (VHDR) [Yang et al. 2003].
In VHDR, dimensions in a high dimensional dataset are grouped
into a dimension hierarchy according to their similarities. Users
select interesting dimension clusters and display them instead of

the original dimensions in order to reduce the dimensionality of
the display. This paper is different from [Yang et al. 2003] in that
the latter was limited to dimension reduction while the former has
been extended to a more general dimension management approach
including dimension ordering, spacing and filtering. Dimension filtering proposed in this paper is different from VHDR because dimension filtering automatically picks out important dimensions to
form lower dimensional subspaces that contain major features of
the original datasets, while users had to manually select dimensions
to form lower dimensional subspaces in VHDR.
InterRing [Yang et al. 2002] (Figure 1 (a)-(d)) is an interactive
radial space filling tree visualization tool we designed for visualizing a dimension hierarchy. InterRing is generated using the rules
that deeper nodes of the hierarchy are drawn further from the center; child nodes are drawn within the arc subtended by their parents,
and the sweep angle of a non-leaf node is equal to the aggregation
of that of all its children. InterRing provides a rich set of interactive tools for panning/zooming, rolling-up/drilling-down, multifocus distortion, modification, reordering, and selection.

3

Dimension Hierarchy

Our hierarchical dimension ordering, spacing and filtering approach
is based on dimension hierarchies derived from similarities among
dimensions. The problem of determining the similarity of dimensions was characterized by [Ankerst et al. 1998] as follows: The
database containing N data items with d-dimensions can be described as d arrays Ai (0 <= i < d), each containing N real numbers ai,k (0 <= k < N). A similarity measure S maps two such
arrays to a real number. It also might be called a dissimilarity measure because large numbers mean high dissimilarity whereas zero
means identity. Similarity can be defined in various ways. Often
it is highly domain-dependent. Detailed information of similarity
measures between two dimensions can be found in [Ankerst et al.
1998]. In this paper, we assume that 0 <= S <= 1.
Currently, we use an efficient counting test to decide if the similarity measure between two dimensions is lower than a certain similarity measure threshold. Given a similarity measure threshold S,
the idea of our approach is that if most data items in the dataset have
lower or equal dissimilarities than S when evaluating two dimensions, then the similarity measure of these two dimensions passes
the counting test and is lower than S. Those data items that have
higher dissimilarities than S are defined as outliers. Given an acceptable outlier percentage O, the number of outliers must be lower
than O ∗ N to pass the counting test. This approach is flexible in
that users can change the outlier percentage in order to constrain or
relax the similarity measure.
Using a dimension clustering approach (described in Section
3.1), we group similar dimensions into clusters and similar clusters
into larger clusters, resulting in a dimension hierarchy. By organizing the original dimensions of a high dimensional datasets into a
dimension hierarchy, we are able to switch the problem of ordering,
spacing, and filtering of all the original dimensions to the problem
of ordering, spacing, and filtering of the child nodes of each cluster
in the dimension hierarchy. This then scales down the problems and
reducing their complexity.

3.1

Dimension Hierarchy Construction

We construct dimension hierarchies using a dimension clustering
approach. Generally speaking, as long as the similarity measure
between two dimensions is defined, any one of several existing data
clustering algorithms can be used to generate the dimension hierarchy; the similarity measure between two dimensions in dimension
clustering corresponds to distance between two data items and di-

Proceedings of the IEEE Symposium on Information Visualization 2003 (INFOVIS’03)
0-7695-2055-3/03 $ 17.00 © 2003 IEEE

mensions in dimension clustering correspond to data items in data
clustering. We briefly describe a bottom-up agglomerative dimension clustering algorithm we implemented as follows. For more
detail information, refer to [Yang et al. 2003].
• Iterative Clustering: We use a bottom-up clustering approach with a user defined number of iterations I. The iterations are performed in the order of iteration0 , iteration1 , ...,
iterationI . The iterations correspond to a series of increasing
similarity measure thresholds Si (0 <= i < I, Si < S j if i < j,
S0 = 0, SI = 1). These thresholds are the minimum similarity
measure required among the dimensions in a cluster formed
during the iterations. In iterationi , dimensions that have not
formed any clusters and clusters formed from the previous iterations are considered. If any pair of them has a similarity
measure s smaller than Si , the pair is recorded as a similar
pair. Then the dimension or cluster contained in the largest
number of similar pairs is extracted as a new cluster center.
All the other dimensions and clusters in similar pairs involved
with it are put into this new cluster and the similar pairs are
removed. Repeating the above approach will form more new
clusters. An iteration ends when no similar pairs are left.
• Representative Dimensions: In order to calculate the similarity measure between two dimension clusters or a dimension
cluster and a dimension, we use a representative dimension for
each dimension cluster. The data array of the representative
dimension is the average of the arrays of dimensions included
in this dimension cluster. For a dimension cluster containing non-leaf nodes, the average can be calculated using the
representative dimensions of the non-leaf nodes scaled by the
number of dimensions included in the non-leaf nodes.
• Data Clusters: To cope with large scale data sets, we make
use of partial results of a bottom-up data clustering algorithm
applied on the data set. We select all data clusters with extents
much smaller than the minimum similarity measure S0 . These
data clusters contain all data items in the data set exactly once.
We use these data clusters instead of the original data items in
the data set to calculate the similarities among dimensions.
For a very large data set, the number of data clusters used
in this process would be much smaller than the number of
original data items.

3.2

Dimension Hierarchy Navigation and Modification

Because dimension hierarchies are essential for our hierarchical dimension ordering, spacing and filtering approach, it is important
to allow users to interactively investigate and modify the automatically generated dimension hierarchy. We use InterRing [Yang et al.
2002] to navigate and modify the dimension hierarchy. InterRing
(Figure 1 (a)-(d)) provides a rich set of navigation operations to
allow users to interactively gain an overview and details of the dimension hierarchy. These operations include:

knowledge. A simple drag-and-drop operation allows nodes or subtrees to be relocated to arbitrary non-terminal nodes in the hierarchy.
Figure 1 (a) shows the dimension hierarchy of the OHSUMED
dataset visualized in InterRing. Figure 1 (b) is the same hierarchy
after reordering (Section 4). All the leaf nodes are selected and
their dimension names are shown. In Figure 1 (c), the reordered
hierarchy is distorted in order to examine details of several nodes.
In Figure 1 (d), the nodes outside the focus are hidden using a rollup operation so that the focus node can be viewed more clearly.

4

Dimension Ordering

Different orders of dimensions in order-sensitive multidimensional
visualizations can reveal different aspects of the datasets to users.
For example, similarity-oriented order of the dimensions places dimensions with similar patterns next to each other. Through this
order, users are able to detect interdependent dimensions. As another example, importance-oriented order of dimensions places dimensions that are more important to the users in more prevalent
visualization positions, or maps them to more pre-attentive visual
attributes, thus helping users concentrate on them. In the following
subsections, we discuss these two dimension ordering techniques.

4.1

Similarity-Oriented Dimension Ordering

Similarity-oriented dimension ordering aims to minimize the sum
of similarities of all adjacent dimensions in the display. It has been
shown to be an NP-complete problem by Ankerst et. al. [Ankerst
et al. 1998]. In our approach, we reduce the complexity of this
problem using the dimension hierarchy. First, we order each cluster
in the dimension hierarchy. For a non-leaf node, we use its representative dimension in the ordering of its parent node. Then, the
order of the dimensions is decided in a depth-first traversal of the
dimension hierarchy (non-leaf nodes are not counted in the order).
Once the order of children of each cluster is decided, the order of
all the dimensions is decided. Thus the problem of ordering all the
original dimensions has been re-expressed as ordering the children
of non-leaf nodes of the dimension hierarchy.
Because in most cases, the number of children of a cluster in the
dimension hierarchy is much smaller than the number of leaf nodes
of that hierarchy, the complexity of the ordering will be greatly reduced. For example, suppose we have N dimensions to be arranged
in a 1-dimensional order, if we use optimal ordering, we need to select the best dimension arrangement from all possible permutation
of the dimensions, which means N! − 1 comparisons. While using
a well-balanced M-tree, where M is much smaller than N, the number of comparisons needed for each non-leaf node is about M! − 1.
Since there are about (N −1)/(M −1) non-leaf nodes in the tree, the
total number of comparisons is about (N − 1)/(M − 1) ∗ (M! − 1),
which is much less than N! − 1. As a result, some algorithms that
are not suitable for ordering a large number of dimensions, such as
optimal ordering, could be used in our approach. Here are some
ordering algorithms we implemented:

drill-down/roll-up: the process of exposing/hiding sub-branches
of the hierarchy;
pan, zoom, and rotation: the process of modifying the focus,
scale, and orientation of the display;
distortion: the process of enlarging some objects in the display
while maintaining the context of surrounding objects.
With the modification operation in InterRing, users are able to
modify the given dimension hierarchy according to their domain

Proceedings of the IEEE Symposium on Information Visualization 2003 (INFOVIS’03)
0-7695-2055-3/03 $ 17.00 © 2003 IEEE

• Optimal ordering. Optimal ordering computes the sum of
neighboring dimension similarities for every possible permutation within the dimensions to be ordered to find the permutation with the smallest sum.
• Heuristic ordering. Many heuristic algorithms exist to improve on the computational cost of the optimal ordering algorithm. For example, random swapping starts with an initial
configuration and randomly chooses two dimensions to switch
their positions. If the new arrangement has a smaller similarity sum, then it is kept and the old one is rejected; otherwise

leave the old arrangement intact and go on swapping another
pair of dimensions. Keep doing this for a certain number of
times.
An approximate dimension ordering approach is to directly use
the depth-first traversal result of a dimension hierarchy without reordering it. The reason is that in dimension hierarchies, similarities among siblings within a cluster are controlled within certain
ranges. In other words, the similarities among the children of a dimension cluster are similar. Thus with a good dimension hierarchy,
we should get a reasonable order of the original dimensions even
without reordering the hierarchy.
Figures 2 (a) and (b) show the same subset of dimensions of the
OHSUMED dataset in Parallel Coordinates. In Figure 2 (a) the
dimensions are in a random order while in Figure 2 (b) they are ordered according to their depth-first traversal order in the dimension
hierarchy. We can see that Figure 2 (b) reveals similar dimensions.
Figures 3 (a) and (b) show the same subset of data items of the
OHSUMED dataset in Star Glyphs. In Figure 3 (a) the glyphs are
in a random dimension order while in Figure 3 (b) they are in a
similarity-oriented dimension order. Similar dimensions are better
revealed in Figure 3 (b) than in Figure 3 (a).
Similarity-oriented dimension ordering is a special case of corelationship-oriented dimension ordering methods. If we replace
the similarity measure in the similarity-oriented dimension ordering
by more complex co-relationship measures, not only similarities,
but also more complex co-relationships among dimensions can be
revealed by dimension ordering. For example, inverse proportional
dimensions can be placed next to each other to reveal their inverse
correlation.

4.2

Importance-Oriented Dimension Ordering

The importance of each dimension is decided by a user’s particular visualization task. In the following description, we assume that
users are looking for variance of a dataset. Thus a dimension that
contributes more to the variance of the dataset is more important
than a dimension that contributes less to the variance. To this end
we order the dimensions according to their contribution to the variance. Here again, we use the hierarchical approach to scale down
the complexity of the problem.
We assume that similar dimensions have similar contributions
to the dataset’s variance because they contain similar information.
Thus the problem of ordering all the dimensions can be switched
to the problem of ordering each cluster in the dimension hierarchy.
As in the similarity-oriented ordering, we first order each cluster in
the dimension hierarchy. For a non-leaf node, we use its representative dimension in the ordering of its parent node. Then, the order
of the dimensions is decided by the order of the dimensions in a
depth-first traversal of the dimension hierarchy (non-leaf nodes are
not counted in the order). To order a non-leaf node, we apply Principal Component Analysis (PCA) [Jolliffe 1986] on its children,
and order them according to their contributions to the first several
principal components.
With different user tasks, the importance of the dimensions can
be decided in different ways from the above example. However, the
general approach is similar; either order all the dimensions at the
same time according to their importance, or order the clusters in the
dimension hierarchy according to the importance of their children
in order to reduce the complexity of the problem.

4.3

User Interaction

Relationships among dimensions may remain undetected by the automatic ordering approach. Since users are often experts on the data
sets being visualized, they may be able to improve on the results of

the automated ordering. Hence allowing users to interactively adjust the order of the dimensions is important.
In our approach, users have two ways to interactively change the
order of the dimensions (reorder):
• manually change the order of the dimensions in the data displays. This is similar to many existing manual dimension reordering approaches, using either reconfigurable lists or dragand-drop operations [Stolte and Hanrahan 2000; Ward 1994].
• manually change the order of siblings using the ”Modification” operation of InterRing. By changing the order of a dimension cluster, the order of all the similar dimensions contained in this cluster is changed correspondingly. This change
will be propagated to the data display. This reordering approach is efficient even for a large number of dimensions. It
provides the users with a manageable way for manual reordering through this multi-resolution approach.

5

Dimension Spacing

Dimension ordering reveals useful dimension relationship information to users. However, this information may not be accurate. For
example, in the dimension order generated using the similarityoriented hierarchical ordering approach, two adjacent dimensions
could be the ending dimension of one cluster and the starting dimension of another cluster. Thus their similarity is lower than the
similarity of two adjacent dimensions within any of those clusters.
For an order generated using a non-hierarchical approach, the similarities between dimensions may still be different. Users could not
know these differences from the order of the dimensions. Thus dimension spacing, which explicitly conveys dimension relationship
information by varying the spacing between two adjacent axes or
angles, is useful here. For unordered dimensions, dimension spacing is even more useful since the order of dimensions does not convey any dimension relationship information. In this section, we
propose several promising dimension spacing approaches.

5.1

Automatic Approach

In multidimensional visualization techniques containing explicit
axes, the default spacing between all the adjacent axes is equal,
such as Parallel Coordinates [Inselberg and Dimsdale 1990; Wegman 1990] and Star Glyphs [Siegel et al. 1972]. However, the relationships between adjacent dimensions are generally not equal some adjacent dimensions may have close relationships while others may not. We can explicitly convey this to users by varying the
spacing between adjacent axes - a smaller distance or angle means
a closer relationship so that closely related dimensions are placed
close together, while unrelated dimensions stand apart. By applying this spacing approach to the similarity-oriented ordered dimensions, we allow users to grasp relationships between the dimensions
more intuitively as suggested by the Gestalt Law on proximity. A
simple and general approach to spacing dimensions to reveal dimension relationships is to calculate the correlation factor of each
pair of adjacent dimensions, and assign axes a distance or angle
proportional to this factor.
Besides revealing relationships between adjacent dimensions,
spacing can also be used to reveal the structure of the dimension
space in our hierarchical approach. The algorithm of spacing according to the structure of the dimension hierarchies is simply to
make the distance between two adjacent dimensions proportional
to the threshold used to form their first common ascendant. Thus a
dimension will have a smaller distance or angle to its adjacent dimension if the adjacent dimension belongs to the same cluster than

Proceedings of the IEEE Symposium on Information Visualization 2003 (INFOVIS’03)
0-7695-2055-3/03 $ 17.00 © 2003 IEEE

if it belongs to a different cluster. Also, if two adjacent dimensions belong to the same cluster, their distance or angle is smaller
if the threshold used to form that cluster is smaller. Because the
threshold used to form a cluster reflects similarity of its children
in the dimension hierarchy, the spacing calculated using this algorithm also reveals the similarity of the adjacent dimensions along
with the overall structure of the dimension space.
The Parallel Coordinates display of the OHSUMED dataset (a
subset of dimensions are shown) in Figure 2 (b) has been spaced
according to the structure of the dimension hierarchy. It is easy to
detect some closely related dimensions, and some dimensions that
are fairly different from adjacent dimensions from this figure. For
example, it can be seen with little effort that in the OHSUMED
dataset, which contains word-counts in a medical abstract collection, the word “kidney” appears in similar frequency to the word
“transplantation” in most articles, as well as “insulin” and “glucose”, and ”sequence” and “gene”.

of a cluster of dimensions can be distorted using a single drag-anddrop operation; details can be examined within their context; local
spacing inside the enlarged or decreased area has been preserved;
multiple foci can coexist. Users can enlarge or decrease several
areas in the same display.
In Figure 1 (c), the dimension hierarchy is distorted using
structure-based distortion. Figure 3 (c) shows part of the Star
Glyphs display linked to Figure 1 (c) with structure-based spacing
distortion. It is clear that structure-based spacing distortion helps
users to see details within context. Figures 2 (c) and (d) show another example of structure-based distortion. Figure 2 (c) is the view
without distortion, Figures 2 (d) is the distorted view of it with two
foci within context.

6
6.1

5.2

Interactive Control

For high dimensional datasets, the displays might still be cluttered
despite dimension spacing. Thus it is important to allow users to interactively enlarge or decrease the distance of adjacent dimensions
so that they can examine as well as hide detail of interesting or uninteresting dimensions and relationships. In our approach, we provide two ways to allow users to interactively change the distances
between dimensions:
• zooming in/out and panning. We allow users to zoom the x
and/or y directions so that, for visualization techniques such
as Parallel Coordinates, horizontal zooming will only affect
the distances between axes.
• distortion. When the display is in distortion mode, users can
left click between two axes to increase their spacing, or right
click to decrease it. When a large number of dimensions need
to be distorted, structure-based spacing distortion can be used.
Zooming and panning keep the original spacing of the dimensions; however, context is lost when users examine details. Manual
distortion preserves the context, however, the local spacing in the
distorted area is lost. In addition, it can be tedious when users want
to examine details of many dimensions at once. When the dimensionality of the dataset is high, it is also difficult to specify a distortion because the spacing between most dimensions is very small.
Structure-based spacing distortion addresses these shortcomings.
Structure-based spacing distortion is linked to structure-based
circular distortion of InterRing [Yang et al. 2002]. Structure-based
circular distortion allows users to proportionally enlarge/decrease
all descendants in clusters through simple drag-and-drop operations. Figure 1 (c) shows a distorted dimension hierarchy in InterRing. A cluster and all its descendants are enlarged by one operation. We propagate this distortion to dimension spacing in data
displays. Thus when a node in InterRing presenting a dimension
is enlarged/decreased, the spacing around the dimension is also enlarged/decreased.
Particularly, we adjust the dimension spacing algorithm so that
the spacing between two adjacent dimensions is decided by the
product of two parameters: the spacing parameter and the distortion
parameter. The spacing parameter is the distance or angle decided
by the algorithm described in Section 5.1 that reflects the relationship between these two dimensions. The distortion parameter is
specified by the distortion degree of the nodes representing these
two dimensions in InterRing. We choose the larger of the two so
that for an enlarged leaf node in InterRing, the spacing around its
corresponding dimension is also enlarged proportionally.
Many advantages of structure-based distortion in InterRing have
propagated to structure-based spacing distortion, such as: spacing

Dimension Filtering
Automatic Approach

When the dimensionality is fairly large, even if we apply ordering
and spacing of the dimensions to the display, the resulting visualization still may be crowded. Very similar dimensions may likely be
cluttered together. In this case, we would like to filter some dimensions to reduce the clutter problem while at the same time retaining
most of the information in the dataset. This could be done manually, automatically, or semi-automatically. We propose a dimension
filtering approach that automatically generates a default filtering result, while allowing users to interactively modify it. We claim that
automatically generating a default result is important for high dimensional datasets, and user interactions are also necessary because
improvements can usually be made on automatic approaches.
Our dimension filtering approach is also based on the dimension
hierarchy. In this approach, we use a filtering criterion that is a
combination of the dimension similarity and importance. We assume that if some dimensions are very similar to each other, then
only one of them should be left in the display. We also assume
that if some dimensions are fairly unimportant for a user’s visualization task, then they should not be displayed. Thus a similarity
threshold and an importance threshold are used in the filtering. The
algorithm to select dimensions for display is a recursive approach
starting from the root of the dimension hierarchy. For each node
we check if the node’s importance is smaller than the importance
threshold; if yes, ignore the node and return. That is, the dimensions
contained in unimportant nodes are ignored. If it is not ignored and
it is a leaf node, select it and return. Otherwise check the threshold
used to form the node. If it is larger than the similarity threshold,
apply the approach on its immediate descendants. Otherwise only
apply the approach on its most important immediate descendant.
Figures 3 (d) and 4 (b) give examples of dimension filtering.
Comparing Figures 3 (b) with 3 (d) (remaining dimensions in Figure 3 (d) keep the same order as in Figure 3 (b)), we find that the filtering retains the major information of the dataset fairly well, while
in the filtered displays, the number of dimensions is much more
manageable compared to the unfiltered ones. In Figure 4 (a), the
Scatterplot Matrix display of the OHSUMED dataset, individual
plots cannot be discerned without significant zooming. In Figure 4
(b), the number of plots has been greatly reduced.

6.2

Interactive Filtering

It is possible that the automatic filtering process might filter out
some dimensions that a user is concerned about, or keep some dimensions that a user finds uninteresting. It is therefore important to
allow users to interactively adjust filtering results.
The automatic filtering (Section 6.1) is a recursive process staring from the root of a hierarchy. We can apply this process to the
root of any sub-branch in the dimension hierarchy instead of the

Proceedings of the IEEE Symposium on Information Visualization 2003 (INFOVIS’03)
0-7695-2055-3/03 $ 17.00 © 2003 IEEE

root of the entire hierarchy. In this way, we can apply filtering to a
subset of the dimensions instead of all the dimensions.
In InterRing, each selected leaf node corresponds to a dimension
displayed in the data visualization. We can add/delete a dimension
to/from the display by selecting/unselecting its corresponding leaf
node. Thus users can filter dimensions using a manual selection
operation in InterRing, that is, clicking an unselected node to select
it, or clicking a selected node to unselect it.
In InterRing, rolling-up/drilling-down operations allow users to
hide/show sub-branches by clicking their root nodes. We also link
them to the dimension filtering. Whenever some leaf nodes are
hidden, it means that the user is not interested in them. Thus we
also filter their corresponding dimensions from the data display.
Users can also manually delete a dimension from the data display by clicking to select it, then hitting the ‘delete’ button. Since
InterRing provides an overview of the dimension space structure,
while the data display provides the context of the data items for
manually filtering dimensions, the option of filtering dimensions
from InterRing or the data display gives users significant flexibility.

7

Conclusion and Future Work

In this paper, we have proposed an interactive approach to dimension ordering, spacing and filtering for high dimensional datasets
based on dimension hierarchies. Dimension ordering, spacing and
filtering can significantly increase the effectiveness of multidimensional visualizations, but the processes are complex for high dimensional datasets. By grouping dimensions into a dimension hierarchy
according to their similarity, we improved the manageability of dimensions in high dimensional data sets and reduced the complexity
of the ordering, spacing and filtering tasks. In addition, our findings are that user interactions for dimension ordering, spacing and
filtering are much easier to accomplish with dimension hierarchies.
In the future, this approach will be more rigorously evaluated,
including:
• comparing different ordering algorithms, including optimal
ordering, heuristic algorithms [Ankerst et al. 1998], and our
hierarchical approach, in their quality using computational
analysis of their algorithmic complexity and user studies;
• evaluating how dimension ordering, spacing and filtering benefit high dimensional visualization applications, such as document visualization, through user studies;
• evaluating DOSFA’s applicability to different multidimensional visualization techniques.
Other future work includes:
• exploring other forms of dimension management besides
DOSFA, such as how to generate potentially interesting subsets of dimensions and manage them;
• investigating “smart” DOSFA, such as automatically adjusting the ordering criteria according to user input;
• exploring other approaches besides using dimension hierarchies to manage dimensions in an efficient and effective manner, such as using index trees;
• improving the efficiency and effectiveness of our dimensional
clustering algorithm.

References
A NKERST, M., K EIM , D., AND D RIEGEL , H. 1996. Circle segments: A
technique for visually exploring large multidimensional data sets. Proc.
of Visualization ’96.
A NKERST, M., B ERCHTOLD , S., AND K EIM , D. A. 1998. Similarity clustering of dimensions for an enhanced visualization of multidimensional
data. Proc. of IEEE Symposium on Information Visualization, InfoVis’98,
p. 52-60.
B ERTIN , J. 1983. Semiology of Graphics: Diagrams, Networks, Maps.
University of Wisconsin Press.
B OEHM , C., K REBS , F., AND K RIEGEL , H.-P. 2002. Optimal dimension
order: A generic technique for the similarity join. 4th Int. Conf. on Data
Warehousing and Knowledge Discovery, pp. 135-149.
C HERNOFF , H. 1973. The use of faces to represent points in k-dimensional
space graphically. Journal of the American Statistical Association, Vol.
68, p. 361-68.
C LEVELAND , W., AND M C G ILL , M. 1988. Dynamic Graphics for Statistics. Wadsworth, Inc.
E ADES , P. 1992. Drawing the trees. Bulletin of the Institute of Combinatorics and its Applications, p. 10-36.
F EINER , S., AND B ESHERS , C. 1990. Worlds within worlds: Metaphors
for exploring n-dimensional virtual worlds. Proc. UIST’90, p. 76-83.
F LEXER , A. 1999. On the use of self-organizing maps for clustering and
visualization. PKDD’99, p. 80-88.
F URNAS , G. 1986. Generalized fisheye views. Proc. of Computer-Human
Interaction ’86, p. 16-23.
H ERSH , W., B UCKLEY, C., L EONE , T., AND H ICKMAN , D. 1994.
Ohsumed: An interactive retrieval evaluation and new large text collection for research. In Proceedings of the Seventeenth Annual International
ACM SIGIR Conference on Research and Development in Information
Retrieval, Performance Evaluation, 192–201.
I NSELBERG , A., AND D IMSDALE , B. 1990. Parallel coordinates: A tool
for visualizing multidimensional geometry. Proc. of Visualization ’90, p.
361-78.
J OLLIFFE , J. 1986. Principal Component Analysis. Springer Verlag.
K EIM , D., K RIEGEL , H., AND A NKERST, M. 1995. Recursive pattern: a
technique for visualizing very large amounts of data. Proc. of Visualization ’95, p. 279-86.
KOHONEN , T. 1995. Self Organizing Maps. Springer Verlag.
L E B LANC , J., WARD , M., AND W ITTELS , N. 1990. Exploring ndimensional databases. Proc. of Visualization ’90, p. 230-7.
M EAD , A. 1992. Review of the development of multidimensional scaling
methods. The Statistician, Vol. 33, p. 27-35.
S IEGEL , J., FARRELL , E., G OLDWYN , R., AND F RIEDMAN , H. 1972.
The surgical implication of physiologic patterns in myocardial infarction
shock. Surgery Vol. 72, p. 126-41.
S TOLTE , C., AND H ANRAHAN , P. 2000. Polaris: A system for query, analysis, and visualization of multidimensional relational databases. InfoVis
’00, p. 5-14.
WARD , M. 1994. Xmdvtool: Integrating multiple methods for visualizing
multivariate data. Proc. of Visualization ’94, p. 326-33.
WARD , M. O. 2002. A taxonomy of glyph placement strategies for multidimensional data visualization. Information Visualization, Vol 1, pp.194210.
W EGMAN , E. 1990. Hyperdimensional data analysis using parallel coordinates. Journal of the American Statistical Association, Vol. 411(85), p.
664-675.
YANG , J., WARD , M. O., AND RUNDENSTEINER , E. A. 2002. Interring:
An interactive tool for visually navigating and manipulating hierarchical
structures. InfoVis ’02, p. 77-84.
YANG , J., WARD , M. O., RUNDENSTEINER , E. A., AND H UANG , S.
2003. Visual hierarchical dimension reduction for exploration of high
dimensional datasets. VisSym 2003, p. 19-28.

Proceedings of the IEEE Symposium on Information Visualization 2003 (INFOVIS’03)
0-7695-2055-3/03 $ 17.00 © 2003 IEEE

Figure 1: InterRing. (a): Dimension hierarchy of OHSUMED dataset in InterRing. (b): after reordering. (c): after distortion. (d): after
roll-up operation.

Figure 2: Parallel Coordinates. (a): A subset of dimensions of OHSUMED dataset in a random order. (b): after ordering and spacing. (c):
OHSUMED dataset. (d): (c) after distortion.

Proceedings of the IEEE Symposium on Information Visualization 2003 (INFOVIS’03)
0-7695-2055-3/03 $ 17.00 © 2003 IEEE

Figure 3: Star Glyphs. (a): OHSUMED dataset without DOSFA. (b): after ordering. (c): distorted star glyphs. (d): after filtering.

Figure 4: Scatterplot Matrices. (a): OHSUMED dataset without DOSFA. Individual plots cannot be discerned without significant zooming.
(b): after filtering.

Proceedings of the IEEE Symposium on Information Visualization 2003 (INFOVIS’03)
0-7695-2055-3/03 $ 17.00 © 2003 IEEE

