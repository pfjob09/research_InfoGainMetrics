DOI: 10.1111/j.1467-8659.2008.01172.x

COMPUTER GRAPHICS

forum

Volume 27 (2008), number 6 pp. 1531–1538

Computational Geometry Education for Computer
Graphics Students
I. Kolingerov`a†
Centre of Computer Graphics and Data Visualization, Department of Computer Science and Engineering,
University of West Bohemia, Pilsen, Czech Republic

Abstract
The paper surveys main features of computational geometry and presents the argument that a course oriented
to applied computational geometry should be a part of the computer graphics curriculum, as it teaches effective
algorithmic methods and helps to develop abstract thinking. Possible contents of the course and forms suitable
and interesting for computer graphics students are discussed. The students’ feedback on such a course has been
mostly positive.
Keywords: computational geometry, computer graphics curriculum, algorithmic methods
ACM CCS: I.3.5 [Computational Geometry and Object Modelling]: Geometric algorithms, languages and systems K.3.2 [Computer and Information Science Education]: Computer science education K.3.2 [Computer and
Information Science Education]: Curriculum

1. Computational geometry – a tool for computer
graphics
Computational geometry is the study of algorithms and data
structures for geometrically formulated problems. Typical
tasks solved by computational geometry are convex hulls,
point location, intersections, visibility, triangulations and
other partitions in 2D and 3D, motion planning. These problems are inspired by applied sciences, such as robotics,
databases, image and pattern recognition, cartography, GIS,
biology, civil engineering and many others; see a more detailed list in [App96]. However, most of the problems in the
scope of computational geometry are inspired by computer
graphics. With some simplification, computational geometry can be understood as fundamental research for computer
graphics.
The main advantages of this scientific discipline are its exactness in language as well as in algorithms, the systematic
use of complexity evaluation, beauty of its algorithms and
†

supported by Ministry of Education, Youth and Sports of the
Czech Republic - project No. LC 06008

c 2008 The Author
Journal compilation c 2008 The Eurographics Association and
Blackwell Publishing Ltd. Published by Blackwell Publishing,
9600 Garsington Road, Oxford OX4 2DQ, UK and 350 Main
Street, Malden, MA 02148, USA.

efficiency of the proposed solutions. Like mathematics, computational geometry not only teaches tools but also develops
abstract reasoning.
Computational geometry has also its drawbacks, such as
its high abstraction, which causes difficulties to more practically oriented engineers. If an engineer unused to the high
formalism of computational geometry tries to read papers
from this area, they may not get too much of it because
of ‘somebody else’s language’, an absence of illustrations,
sometimes also an absence of implementation results. Computational geometry sometimes also shows an unhealthy distance from practical life (it usually does not care whether
the solved problem is academic or not). Due to this, computational geometry has a low influence on applied research
and solutions to practical problems. Asymptotically optimised algorithms which are the focus of computational geometry may not necessarily work well in practice – if the
question of expected complexity and expected type of input
data are not properly considered in the algorithm proposal.
The algorithms can depend on complicated data structures
or on theoretically sound but never implemented algorithms.

This paper was selected from the Education Programme of the
Eurographics 2007 Conference.
1531

1532

I. Kolingerov`a/Computational Geometry Education

Special cases are often not discussed or the published algorithm has been proved but not implemented.
Most of these negative features are gradually disappearing
with the growing maturity of the computational geometry
discipline. Experts in computational geometry have worked
hard to cure the problems. Computational geometry has already grown to the stage where it is able to serve applied sciences as a marvellous tool, see [deB97], [Dob92]. Still, there
are human factors working against it on the side of applied
sciences community. The application experts are sometimes
not willing to accept the high abstraction and formalism of
computational geometry and avoid its materials to the harm
of both sides. Therefore, the efficient and beautiful algorithms of computational geometry are not as widely known
and used in practice as they would deserve.
One way to bring computational geometry to experts from
applied sciences is to present it in a more accessible, applied
way, with the stress on algorithms and their practical use
in various problems rather than on the proofs, and include
its fundamental methods and ‘tricks’ in engineering education, namely in computer graphics area. If young computer
graphics students get some explanation of computational geometry methods and are taught this way of thinking, they
can see that this discipline provides a set of beautiful tools
and tricks which can be useful in practical computer graphics
problems, and will lose their fear of this discipline. At best
the student will not avoid computational geometry resources
and will be able to work with them in the future, to look
for and find a new inspiration and new brilliant ideas. At
worst, they at least knows some fundamental computational
geometry methods for future use.
For these reasons, computational geometry is in many
cases a part of the computer graphics undergraduate and
graduate study. Unfortunately, the usefulness of computational geometry is not so widely recognized to find its expression either in the proposed computer graphics curriculum and knowledge base [LO06], or in recommendations
from the CGE06 Computer Graphics Education Workshop
[BCFH06].
Computer graphics programmers, not counting computer
graphics applications, come from two main areas, mathematics and computer science. Computational geometry courses
can be either more theoretically or more practically oriented,
where by theoretical we mean a classical style of computational geometry with proofs and mathematical formulations
of knowledge, and by practical a style oriented to algorithms,
to the questions related to their implementation and applications. An example of a mixed course see in [Min].
In this paper we will show what a course of practically
oriented computational geometry, suitable mainly for undergraduate computer graphics students, may look like, in what
form and extent it could be taught, what kinds of ‘entertainment’ can be used to make it more attractive for students. We

will also mention some positive and negative experiences collected teaching this course at two different types of faculties
at different universities. The course has been developed after
experience of 5 years of teaching a classical computational
geometry course at a technical faculty and tested another 5
years in a technical faculty, and, at the same time, 4 years in a
mathematical faculty, in all cases for undergraduate students
oriented to computer graphics, with an exceptional participants of individual graduate students. Faculties providing
this course were: Faculty of Applied Sciences, University of
West Bohemia, Pilsen, Czech Republic and Faculty of Mathematics and Physics, Charles University in Prague, Czech
Republic.
The main differences between the course presented in this
paper and a traditional style of teaching computational geometry are the more applied character of our course, which
is more accessible to the computer graphics students. New
forms of project work were given to the students and a more
competitive style of student assignment, which made the
course more interesting for the students.
As far as we know, a paper oriented to computational geometry teaching for computer graphics students has not been
published before, although papers addressing other parts of
computer graphics education exist, such as inclusion of virtual reality [Zar05].
The paper is organized as follows. Section 2 presents the
recommended contents of the course lectures and explains
the most important points concerning partial topics. Section
3 shows a style of seminars, section 4 gives details about students’ course projects. Section 5 reports teacher’s experience
from both types of faculties and feedback collected from the
students. Section 6 concludes the paper.

2. Computational geometry course contents
Let us introduce a proper content of lectures for an undergraduate computational geometry course, suitable for computer
graphics students. A proper placement of the course is the
latter cycle of the European curriculum (an advanced course
in the vocabulary of CGE 06 Workshop) [LO06], [BCFH06].
The course as described is primarily intended for undergraduate students, but its contents could be also used for graduates
if needed.
A suitable extent of this course is one semester, the length
of 13–15 weeks, 2 hours for lectures plus 2 hours for seminars per week. To be able to take such a course, the student should have fluent knowledge of programming and fundamental knowledge of data structures. It is useful if the
course participants have already some knowledge of computer graphics fundamentals – it is then easier for them to
make visualization or user interface to their implemented algorithms. It is not absolutely necessary – the teacher may

c 2008 The Author
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

I. Kolingerov`a/Computational Geometry Education

alternatively provide some visualization programs or libraries for user interface, made by previous students.
The content is as follows:

1. Introduction – computational geometry scope, degeneracy and robustness questions, application areas and
examples, algorithmic complexity and algorithm evaluation, main computational geometry techniques
2. Geometric search – point location in convex and nonconvex polygons, planar subdivision, range search
3. Convex hulls in 2D and 3D
4. Voronoi diagrams, their applications and generalizations
5. Planar triangulations of point sets and their applications
6. Tetrahedrizations and their applications
7. Polygon triangulations, convex and trapezoid partitions,
art gallery problem
8. Intersections: line segments, polygons, polyhedra, halfplanes and half-spaces
9. Motion planning
10. Trends, tasks and news in computational geometry.

Items 1–5 and 8 of this course content are fundamental
and can be recommended for any computational geometry
course, items 6–7, 9–10 could be replaced by other topics
according to the particular specialization of the students (e.g.
GIS specialization may need more stress on 2D algorithms
with polygons). Let us explain the contents in more detail.

2.1. Introduction
The level of abstraction of an average technical student is
not as high as desired. Many students are not used to thinking about algorithms from several viewpoints. Namely, from
the viewpoint of algorithmic complexity, which gives a general idea about its behaviour regardless a particular computer
influence; from the viewpoint of numerical stability and robustness; from the viewpoint of implementation difficulty,
and, for beginners the most difficult way of thinking, from
the viewpoint of suitability to a particular application problem, considering expected input data. It is reasonable at the
beginning of the course to state all these viewpoints and introduce a proper way of thinking when an efficient solution
to some problem is sought. Of course, it is not enough to state
all these big truths at the beginning, they have to be recalled
again and again and the students inspired to think in this way.
A survey of main general computational geometry techniques, such as sweeping, sorting, divide and conquer, locus
approach, duality, combinatorial analysis, prune and search
and geometrical transformations, helps to show at the beginning main tiles which will be used in many variants during the
course. Also, existing libraries in this area, such as [CGAL],
should be mentioned.

1533

2.2. Geometric search
As the topic of point location is the first exposition of how
simple the algorithms for convex or star-shape polygons can
be in comparison with those for general polygons, it is useful to introduce fundamental categories of polygons, such
as convex, star-shape, monotonous and simple. Thanks to
this information, students learn first to think whether they
know something about the shape of polygons in their application and only then to propose or pick an existing algorithm.
Another useful aspect this topic is to decide on the use of
algorithms with and without preprocessing for a particular
problem. It is also important to introduce orientation tests
computed by determinant signs (geometric predicates) and
to point out the question of numerical inaccuracy, its consequences for such tests, some possibilities on how to solve the
problem and existing libraries (e.g., [She96]).
The other part of the geometric search topic, range search,
is devoted mainly to special data structures, such as k-D tree
or trapezoidation. It should be pointed out to the students that
efficiency of location data structures strongly depends on the
expected size of the query range – if comparable with the
data size, no improvement can be achieved with any of these
data structures.

2.3. Convex hulls
This topic is very useful, too, as it is an ideal example to show
the difference between the worst-case and the expected-case
optimal algorithms, output-sensitivity can also be explained
here (e.g. the gift wrapping algorithm provides a good opportunity [PS85]). The student can also see some examples
of algorithms which work well in 2D but cannot be used in
3D, such as the well-known Graham scan [ORo98]. A wide
range of convex hull applications helps to show usefulness
of computational geometry algorithms.

2.4. Voronoi diagrams
Again, various interesting and even exotic applications can be
presented for this topic, together with a wide scale of different
algorithms, see [dvOS97] [PS85], [ORo98]. As most existing algorithmic strategies have been used to design Voronoi
diagram algorithms, students can improve their understanding of general features of particular algorithmic strategies.
Such an understanding helps to derive most of properties of
the implemented algorithm in advance, according to the algorithmic strategy used in it. For example, Voronoi diagram
construction by incremental insertion will have completely
different properties than a divide & conquer based program
and most of their properties can be guessed in advance. However, for those students who are ‘implementation oriented’,
the possibility of a ‘guess’ made in advance can be quite
surprising, as they have not been used to such a level of
abstraction before.

c 2008 The Author
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

1534

I. Kolingerov`a/Computational Geometry Education

2.5. Planar triangulations

2.9. Motion planning

Triangulations are one of the key topics for computer graphics. Therefore, it is recommended to present not only the
traditional Delaunay triangulation and greedy triangulations,
but also triangulations useful for special applications, such as
constrained triangulations [Ang97], [Slo93], data dependent
triangulations [DLR90] or multicriteria-optimised triangulations [KF01] and to point out their special properties. For
Delaunay triangulation (as well as for Voronoi diagrams), algorithms based on nearly all algorithmic strategies have been
developed and parallel algorithms of different categories exist, this topic can be used to show all common and general
features of the particular algorithmic strategies, so that the
students are able to use them for problems which they may
face in the future.

In the time of animations and virtual reality, this ‘robotic’
topic is not beyond the scope of computer graphics any more,
as these algorithms may serve for path planning in the virtual
reality applications. Some fundamentals (a point robot, a disk
and a ladder in 2D) [ORo98], [dvOS97] are enough to show
such ‘exotic’ tools as Minkowski sums, visibility graphs,
etc. Also, the relation between graph and geometry methods
should be shown and pointed out.

As students should be educated also on problems which
have not been fully satisfactorily solved yet, the minimum
weight triangulation should be mentioned. This shows such
a problem and points out that polynomial algorithms with
higher than quadratic complexity are for large data useless.

2.6. Tetrahedrizations
3D Voronoi diagrams and 3D triangulations (tetrahedrizations) are very useful in computer graphics applications but
are relatively difficult topics, more suitable for a graduate
course. Therefore, it can be recommended to touch this topic
only slightly and without details, just to show the main problems in comparison to 2D, examples of 3D Delaunay triangulation use, such as surface reconstruction [ABK98], and
an overall idea how these structures can be constructed.

2.7. Polygon triangulations
This topic is important for GIS and cartographic applications
more than for a ‘pure’ computer graphics but contains the
important and widely used algorithm of ear cutting [ORo98]
and again a good example how much easier life can be with
monotonous than with a simple polygon.

2.8. Intersections
Effective intersection algorithms are very useful computer
graphics tools. We can show the students a typical outputsensitive algorithm, the sweeping algorithm for polygons
intersection [ORo98] and to compare an input configuration
where this algorithm is very useful to some where it is useless.
We can also introduce a concept of sublinear algorithms here
– an algorithm for convex polygon intersection based on a
bisection [CLM06]. The intersection topic relates to duality
transformations which can be quite new and inspiring for
the students. Dual-based algorithms have many computer
graphics applications, namely in fast intersection detections.

2.10. Trends, tasks and news in computational geometry
This topic is an opportunity to sum up what is general and useful on the computational geometry methods, what are the typical features of this discipline, its vices and virtues. Tasks for
computational geometry, both in research and in communication with other areas, can be pointed out. It is also useful to
show fresh trends and hot topics – in our opinion, data stream
algorithms [Mut03], sublinear [CLM06], in-place and in
situ algorithms [BIK∗ 04], parallelization, kinetic data structures [Gui04] can be understood as examples of current hot
topics.
A good book for this course is [ORo98], as it is written in
a less theoretical way and is concentrated on algorithms and
their implementation. Useful sources are [dvOS97], [Las96].
The bible of this science, [PS85], should be used carefully
as it is quite demanding reading. Good materials are those
concerning design of algorithms [Ski98], [DAD] or geometric algorithms, books, Web sites, downloadable software
and people working in this area [Epp], [DSG], [Sno], [DS].
There is no lack of materials in the area of geometric algorithms and with some care (not to include too difficult
reading for an applied audience), many nice sources can be
found.

3. Seminars
Let us address the content and form of seminars suitable
for this course. As the training of students is oriented to
the design and analysis of algorithms, it is better to have
the seminars in a classical classroom without computers, in
groups up to 20 students. In most cases students are given
some geometric task concerning the current topic and are
expected to propose an algorithm of their own for the given
task. Examples of such problems are: an effective pointinside-polygon test; an algorithm for an approximate convex
hull of a planar set of points; an algorithm for construction
of a tangent line to a convex polygon from a given point or
for construction of a common tangent line of two polygons.
Tasks should be rather simple.
The students work independently or in small teams. The
teacher spends the time of the seminar by moving between

c 2008 The Author
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

I. Kolingerov`a/Computational Geometry Education

students and inspecting the emerging algorithmic ideas of
students in their hand notes, lets them explain how their algorithm works and supports their feeble and sometimes slightly
crazy original ideas. When the students are more or less finished, interesting (and not necessarily correct and complete)
ideas are presented by their authors to the rest of class. This
method has several advantages: the student is pleased that
he/she developed something new and is encouraged in future
creative attempts, learns to present his/her ideas ‘on stage’,
learns to explain clearly an algorithm and to defend it from
the classmates if necessary. Even shy students find some
courage to show off when they see presentations of their
classmates – they see that nobody is perfect. In the other role
of the audience, the students learn to listen, to notice eventual mistakes and to ask sound questions. The teacher has to
tailor the discussion in case the presenting student is ‘beaten’
too much by the classmates, who have found some error in
his/her algorithm. At the end, the teacher should formulate
some conclusions about the presented solution and conclude
the debate.
This rather old-fashioned style of seminars is very useful
for such a course. To be run successfully the teacher needs
algorithmic knowledge and experience to react quickly and
give advice. Last but not least, the teacher should be a good
psychologist to keep the students working and to control the
presentation and discussion. Results can be very interesting
as the students are provoked to think out something of their
own, and for some of them it is brand new experience.
This type of work can be combined with the students’
presentations of their assignments, algorithmic analysis and
other less demanding forms; however, the algorithmic synthesis should be the main point.
4. Student projects
In their free time, students also solve some small projects as
is usual in such a type of course. We have good experience
with three main rules: (1) versatility of forms, (2) freedom
to choose the topics from the wide offer according to the
personal taste, (3) competition.
Versatility means that besides the classical project of the
form ‘propose an algorithm for this task, implement it, experiment with it and formulate conclusions from the results’, the
students can pick other forms, such as presentations, algorithmic analysis, algorithmic synthesis without implementation,
production of nice pictures, reviews of some older work of
their predecessors, etc. It is also useful if instead of an abstract formulation of the problems, such as ‘implement a
convex hull algorithm’, the tasks for students are packed into
some attractive cover (e.g. in the style of a fantasy literature)
or have a witty formulation from which the student has to
derive what to do (a good example is the ACM programming
contests problems formulation, see [ACM06]). An unusual
form of the project work is the ‘review’ where the student

1535

checks an algorithm, implementation and documentation of
somebody else. The student is asked to do it anonymously
and the resulting review is provided to the author of the original project. The ‘reviewer’ needs to be informed in advance
that project has already been checked and evaluated by the
teacher, and so the review has no impact on evaluation of
the project author. After such an explanation, the students
have no moral problem due to their solidarity. Usually their
reviews are very detailed and punctual and provide interesting feedback to the author, a feedback from the same age
group. (An interesting experiment was to allot the work of a
‘mathematical’ student to a ‘computer’ one and vice versa:
the students from different universities and specializations
have a different style, they appreciate and criticize different
things. Reading such a review is very valuable even for the
teacher.)
Freedom means that the student can pick from several possible topics according to his/her taste. This point is closely
connected to versatility: some students like to present and
do not like to program and vice versa. They can personalize
the course duties according to their preferences. It is surprising that at the end most students choose classical projects
(to propose and implement something) because ‘they know
what they can expect of it’ while some exotic forms, such as
reviews or presentations of a scientific paper, are too novel
for them and therefore threatening. Students can choose as
many small assignments as they want; easier have lower
evaluation and vice versa. There is of course some required
lowest possible sum of points to get credits for the course.
Why should a student choose more work than absolutely
necessary? The answer is competition: At the end of the
course, the students with the highest number of points get
credits for the course without an exam – the ‘exam without
exam’. Also the most active student on the seminar, who
collected the highest number of points from his work at the
seminars, passes the exam. Even without this incentive, the
students, mostly male, love competition; they just want to be
better than their classmates and they are able to devote an
extra work to win. If the same work load was allotted by the
teacher, they would complain, but if they take it voluntarily,
it is something different. Usually the winner(s) do so much
work that preparation for the exam would be much easier but
it would not be such a fun for them!
Some results achieved by the students when solving their
training problems are quite interesting; either as a good piece
of implementation work (see examples of students’ outputs
in Figures.1–3) or as a new algorithm which deserves to
be published on the international level. It is surprising that
by a small modification of a well known and well solved
problem, we come to the problems which have not been
solved so often and are not solved to a complete satisfaction
yet. Examples are the well-known problem of the convex
hull of a set of planar points modified to an approximate
convex hull, the Delaunay triangulation problem modified

c 2008 The Author
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

1536

I. Kolingerov`a/Computational Geometry Education

Figure 1: A point location example – a planar subdivision
together with a quadtree used to speed up a point location.

Figure 3: A Voronoi diagrams example – a mosaic created
from the Voronoi diagram of a bitmap.

course was taught in a very impractical scheme for students
but the only possible one for the external teacher – 6 hours
once per 2 weeks. On the other hand, the described system
of seminars and project work has been verified in different
courses with up to 40 students per iteration. In all cases, the
described system was run without a teaching assistant.
Figure 2: A triangulation example – a fantastic landscape
constructed on the Delaunay triangulation.

to the Delaunay triangulation of moving points and many
others. Some of students were so attracted by such problems
that they continued to work on them even after passing the
course and later entered our research team.

5. Experience with this course and feedback
from the students
The weak point of our experience with this course is a small
number of students taking it; maximally 15 students on one
faculty per one iteration. The reasons are different for both
faculties: on the technical one the number of participants corresponds approximately to the number of students specialized
on computer graphics each year, on the mathematical one the

In our experience, there is no important difference in teaching this course in technical and mathematical faculties; the
better mathematically educated students from the mathematical faculty feel this course is an applied one; the computer
students from the technical faculty feal it a theoretical one,
but there are excellent as well as · · · less excellent students
in both groups. The students from the ‘mathematical’ group
have fewer problems with complexity estimates, mathematical background and are not as curious on applications as the
‘computer’ group, but this is expected and brings no surprise.
Problems were encountered in the case of several cartography students who were not fluent enough in algorithms and
programming; the students did not fail but needed more time
to debug their implementations and did not feel comfortable
among computer graphics students.
The reader might also be interested whether there is some
difference between males and females in their attitude to

c 2008 The Author
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

I. Kolingerov`a/Computational Geometry Education

the described course, to its contents, to the type of selected projects and to the competition part of the work.
Computer graphics in its technical and programming part
is an area demanding on space imagination and sometimes
close to hardware, it is usually not too attractive a career
for women. On the other hand, exactness and mathematical
formalism of computational geometry, its stress to elegant algorithms fit well to many women, including the author of this
text.
As the described course is taught mainly for students specialized on computer graphics, there is typically maximally
one female and it is impossible to make any general conclusion. Our observation is that women who are ‘brave enough’
to study computer graphics are usually strong in mathematics
and programming, and have no problems with the computational geometry course, often belonging to the best students
in the course. No observations are valid for more of them
about their choice of topics, preferences to presentation or
programming, relation to competition were collected.
Let us address the question how much the students like
such a course. We could boast about the high level of student
satisfaction with this course according to their anonymous
feedback, but we think this kind of feedback is a bit misleading: does it mean that the teacher is good? Or not demanding
enough?
Therefore, we prefer to present some interesting points
from an anonymous feedback to show how the students like
such a type of course. Students usually appreciate competition, although they know that they devoted extra time to the
coursework in their effort to win. They like the possibility
to develop their own algorithms and it is surprising that for
many of them it is a new experience; one would expect that
it is part of day-to-day life for computer graphics students.
Some of them (not all!) like the possibility to present their
ideas to the public and to hear the ideas of their colleagues.
Students appreciate that they are not pushed to memorise
algorithms but to develop their thinking. They prize that the
methods presented in the course can also be used for other
problems. This feedback was collected anonymously, after
the students had passed the exam.

1537

of computer graphics problems. Therefore, we can recommend such a course to be included in computer graphics
education.

References
[ACM06]
ACM Programming Contest Archive http://
www.acm.inf.ethz.ch/ProblemSetArchive.html
[AKB98] AMENTA N., BERN M., KAMVYSSELIS M.: A new
Voronoi-based surface reconstruction algorithm. In Proc.
Siggraph’98 (1998), pp. 415–421.
[Ang97] ANGLADA M. V.: An Improved Incremental algorithm for constructing restricted Delaunay triangulations.
Computers & Graphics 21, (1997), 215–223.
[App96] Application Challenges to Computational geometry. Computational Geometry Impact Task Force Report.
TR-521-96, Princeton University, April 1996.
[BCFH06] BOURDIN J. J., CUNNINGHAM S., FAIRE´ N
M., HANSMANN W.: Report of the CGE06 Computer Graphics Education Workshop, Vienna, Austria, 2006 http://education.siggraph.org/conferences /eurographics/2006/cge2006
[BIK∗ 04] BRO¨ NNIMANN H., IACONO J., KATAJAINEN J., MORIN
P., MORRISON J., TOUSSAINT G.: Space-efficient convex hull
algorithms. Theoretical Computer Science 321, 1 (2004),
25–40.
[CGAL]

CGAL library http://www.cs.ruu.nl/CGAL

[DAD]
Dictionary of Algorithms and Data Structures. National Institute of Standards and Technology
http://www.nist.gov/dads
[dvOS97] DE BERG M., VAN KREVELD M., OVERMARS M.,
SCHWARZKOPF O.: Computational Geometry. Algorithms
and Applications. Springer-Verlag, 1997.
[deB97] DE BERG M.: Trends and developments in computational geometry. Computer Graphics Forum 16, 1
(1997), 3–30.

6. Conclusion
Although computational geometry is not yet recognized as
an important part of the computer graphics curriculum, it
brings many useful methods to the computer graphics community. In order to be able to use these methods, computer
graphics experts need to be trained in it. In this paper we presented a computational geometry course suitable for an advanced undergraduate computer graphics students. Although
such a course does not need expensive hardware and software, it delivers fine tools to the hands of computer graphics people. It helps to develop abstract thinking and to improve the understanding of general and repeating aspects

[DS]
Downloadable
Software.
The
Geometric Center, University of Minnesota http://www.
geom.umn.edu/software/cglist
[CLM06] CHAZELLE B., LIU D., MAGEN A.: Sublinear geometric algorithms. in: Sublinear algorithms, Dagstuhl
Seminar Procedings, Germany, 2006.
[Dob92] DOBKIN D. P.: Computational geometry and computer graphics. Proceedings of the IEEE 80, 9 (1992),
1400–1411.

c 2008 The Author
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

1538

I. Kolingerov`a/Computational Geometry Education

[DLR90] DYN N., LEVIN D., RIPPA S.: Data dependent triangulations for piecewise linear interpolation.
IMA Journal of Numerical Analysis 10, (1990), 137–
154.

[Mut03] MUTHUKRISHNAN S.: Data streams: Algorithms and
Applications. In: Proceedings of the Fourteenth Annual
ACM-SIAM Symposium on Discrete Algorithms, Baltimore, Maryland, pp. 413–413, 2003.

[DSG]
Dan Sunday’s Geometry Algorithms http://
geometryalgorithms.com

[ORo98] O’ ROURKE J.: Computational Geometry in C (2nd
edition) Cambridge University Press, New York, 1998.

[Epp] EPPSTEIN D.: The Geometric Junkyard http://
www.ics.uci.edu/∼eppstein/junkyard/triangulation.html

[PS85] PREPARATA F. P., SHAMOS M. I.: Computational Geometry: An Introduction Springer Verlag New York Berlin
Heidelberg Tokyo, 1985.

[Gui04] GUIBAS L. J.: Kinetic data structures. In: Handbook of Data Structures and Applications D. Mehta and
S. Sahni, Eds, Chapman and Hall-CRC, 2004.
[KF01] KOLINGEROVA´ I., FERKO A.: Multicriteria optimized
triangulations. The Visual Computer 17, 8 (2001), 380–
395.
[Las96] LASZLO M. J.: Computational Geometry and Computer Graphics in C++. Prentice Hall, 1996
[LO06] LAXER C., ORR J.: A Knowledge Base for
the Emerging Discipline of Computer Graphics. Report of the SIGGRAPH Education Committee Curriculum Working Group, 2006 http://education.siggraph.org/
conferences/eurographics/2006/CKBreport_CGE06.pdf
C.
L.:
COMP290-72,
Com[Min] MING
putational
Geometry
and
Applications
http://www.cs.unc.edu/∼lin/COMP290-72

[She96] SHEWCHUK J. R.: Robust adaptive floating-point geometric predicates In: Proceedings of the 12th Annual
Symposium on Computational Geometry, pp. 141–150,
1996.
[Ski98] SKIENA S. S.: The Algorithm Design Manual, Telos/Springer Verlag, 1998.
[Slo93] SLOAN, S. W.: A fast algorithm for generating constrained Delaunay triangulations. Computers & Structures
47, (1993), 441–450.
[Sno] SNOYEING J.: Computational Geometry Demos
http://www.cs.ubc.ca/spider/snoeyink/demos/home.html
[Zar05] Z`ARA J.: Virtual reality course - a natural enrichment of computer graphics classes. In: Eurographics 2005
- Educational Papers, Dublin, Ireland, The Eurographics
Association, pp. 25–32, 2005.

c 2008 The Author
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

