Eurographics Symposium on Rendering 2008
Steve Marschner and Michael Wimmer
(Guest Editors)

Volume 27 (2008), Number 4

Table-driven Adaptive Importance Sampling
David Cline1,2
1 Arizona

Daniel Adams2

State University

Parris Egbert2

2 Brigham

Young University

Abstract
Monte Carlo rendering algorithms generally rely on some form of importance sampling to evaluate the measurement equation. Most of these importance sampling methods only take local information into account, however,
so the actual importance function used may not closely resemble the light distribution in the scene. In this paper, we present Table-driven Adaptive Importance Sampling (TAIS), a sampling technique that augments existing
importance functions with tabular importance maps that direct sampling towards undersampled regions of path
space. The importance maps are constructed lazily, relying on information gathered during the course of sampling. During sampling the importance maps act either in parallel with or as a preprocess to existing importance
sampling methods. We show that our adaptive importance maps can be effective at reducing variance in a number
of rendering situations.
Categories and Subject Descriptors (according to ACM CCS): I.3.7 [Computer Graphics]: Three-dimensional graphics and realism

1. Introduction

1.1. Monte Carlo, World Space and Preimage Space

The core goal of almost all global illumination algorithms is
to measure the light transport that leads to a photorealistic
image. Each pixel in such an image must record the output
of an idealized light sensor (e.g. a CCD or tiny section of
film) during the camera exposure. Mathematically, the output from one of these pixel sensors can be described by the
measurement equation, an integral of the incoming radiance
striking the sensor through the camera lens. In its full form,
the measurement equation is a five-dimensional integral of
incoming radiance, with two dimensions for the area of the
pixel sensor, two for the lens, and one for time.

Owing to the complexity of the measurement equation, analytical solutions are generally not possible, and most renderers resort to some form of Monte Carlo sampling. In world
space, a Monte Carlo sample of the measurement equation
consists of a ray path that connects a point on a pixel sensor
to a point on a light source, through the camera lens and a
number of light scattering events. Mathematically, however,
a ray path sample can be represented as a point in [0, 1)n .
Each coordinate of the point represents some decision that
must be made while constructing the ray path. For example,
one coordinate may represent the instant in time for which
the ray path is constructed, two more may represent a point
on the pixel sensor, two more a point on the lens, and so
forth. In this paper, we will refer to a ray path sample as being in world space or path space, while the term preimage
space will be used to refer to points in [0, 1)n , since this is
the preimage (domain) of the function that maps points to
ray paths.

Beyond these five dimensions, the incoming radiance that
strikes the lens must be evaluated using the rendering equation, another high dimensional integral. To account for participating media and surface reflection, the rendering equation must integrate the change in radiance along a ray’s trajectory, accounting for the radiance contributions of every
possible scatter point along the way. This leads to a three
dimensional integral for each level of scattering. Thus, to
account even for single scattering, the measurement equation must be eight dimensional, with three more dimensions
being included for each additional scattering event.
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.
Published by Blackwell Publishing, 9600 Garsington Road, Oxford OX4 2DQ, UK and
350 Main Street, Malden, MA 02148, USA.

1.2. Evaluating a Ray Path Sample
Consider a ray path x = xt x p xl x0 . . . xn , which samples the
instant xt in time, the point x p on the pixel sensor, xl on the

D. Cline & D. Adams & P. Egbert / Table-driven Adaptive Importance Sampling

1116

lens and x0 . . . xn in space. x can be evaluated as a Monte
Carlo sample as the product of a number of terms. Of course,
the details of the product will vary from renderer to renderer,
but a typical evaluation might look something like:
L(x) =

wt (xt ) w p (x p ) wl (xl ) f (xl , x0 , x1 )
×
×
×
×...×Le (xn , xn−1 )
p(xt )
p(x p )
p(xl )
p(x0 , x1)
(1)

where L(x) is the value assigned to ray path x. The terms
of the numerators correspond to the sensitivity of the light
sensor (wt ,w p ,wl ), the geometric and light scattering properties of the path ( f ), and the light emitted from a light source
(Le ). The denominators of the terms represent the probability
with which each part of the path was generated. (Many renderers ignore one or more of the first three terms of the above
product because they sample time, the pixel or the lens area
uniformly.) In general, a renderer creates a path as a Markov
chain of ray segments, so the terms are not independent.
L(x) forms an unbiased estimate of the pixel’s value,
which may have a high variance. Importance sampling attempts to reduce the variance by choosing a sampling distribution that makes L as constant as possible.
1.3. Overview
In this paper we present Table-driven Adaptive Importance
Sampling (TAIS), a sampling method which supplements existing importance sampling methods rather than replacing
them. TAIS works by defining a set of tabular importance
maps (probability tables) for each pixel. The maps guide
sampling efforts towards undersampled parts of path space,
working in one of two modes: (1) A map may transform
points from preimage to world space, or (2) a map may act as
a preprocess to standard importance sampling. The maps for
a given pixel are created before it is rendered by averaging
those of neighboring pixels, and samples taken within the
pixel are used to update the pixel’s maps after it is rendered,
improving the importance function for subsequent pixels.

2. Related Work
This section gives an overview of importance sampling
methods used in global illumination. In global illumination,
importance sampling works by changing the way in which
preimage space points are converted to world space, with
the goal of making L from equation 1 as constant as possible. Flattening L can be quite difficult, however, and most
importance sampling methods for global illumination only
consider one or two terms of L at a time. Nevertheless, importance sampling a few terms of the measurement equation
can be quite successful in some situations, and a large number of importance sampling methods have been developed
around this idea.
BRDF and phase function sampling. One of the terms of
the measurement equation that has received a lot of attention
is the BRDF function. The result of this work is that a large

number of BRDFs and phase functions can be importance
sampled [War92, LFTG97, AS00, LRR04, BSS93].
Light source sampling. Light sources in the scene are
another common target for importance sampling. This work
can roughly be divided into algorithms that define an importance function over a large number of light sources
[SWZ96, FBG02], and algorithms that define an importance
function over the area of a large light source such as an environment map [ARBJ03, KK03, ODJ04].
Combining BRDF and light source samples. A number
of methods have been developed to importance sample two
terms in the product simultaneously, usually the BRDF and
light sources. Multiple importance sampling [VG95] allows
a renderer to sample the BRDF with some samples and the
light sources with others, combining the probabilities in a
provably good way. Other work can sample the product of
the lighting and BRDF, either by discarding some samples
taken from a simpler distribution [BGH05, TCE05], or by
constructing an explicit representation of the product suitable for importance sampling [CJAMJ05, CETC06].
Sampling directions in space. Beyond product sampling,
a number of algorithms attempt to provide a global context
to the importance sampler by using probability maps to indicate good sampling directions in space. The maps in these
methods [Jen95, HP02, SL06] are generally constructed using a photon map. Our algorithm also uses importance maps,
but we construct the maps lazily during sampling rather than
as a preprocess, and we can take into account terms of the
measurement equation, such as the area of the lens, that
are ignored by methods that specify sampling directions in
space.
Las Vegas Monte Carlo. The Las Vegas Monte Carlo
method [Lep78] is a general integration method that iteratively adapts a tabular pdf during integration. The basic idea
is to compute an integral in multiple passes, updating the pdf
table on each pass. To keep memory costs down, the function
is assumed to be separable so that it is sufficient to keep a 1D
table for each dimension of the integrand. Las Vegas Monte
Carlo has been used in a general rendering context [LC99],
as well as specifically to do direct lighting [DWF06]. Our
importance maps are similar to the probability tables used in
the Las Vegas method, but we do not solve the pixel integrals
iteratively, and we define 2D and discrete tables in addition
to 1D marginal pdfs.
Metropolis Light Transport. Our approach is also similar to Metropolis Light Transport (MLT) [VG97], and energy redistribution path tracing (ERPT) [CTE05]. Like our
method, MLT and ERPT reuse information gleaned during
sampling to improve rendering efficiency. One formulation
of MLT [KSKAC02] also operates in preimage space, as do
the bulk of our importance maps. However, these methods
rely on path mutation for information sharing, whereas we
explicitly define probability densities for different parts of
the measurement equation.
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

D. Cline & D. Adams & P. Egbert / Table-driven Adaptive Importance Sampling
Transform some points using
standard importance sampling

3. Table-driven Adaptive Importance Sampling
This section describes our adaptive importance sampling algorithm in detail. The basic idea is to supplement existing
importance sampling methods with tabular importance maps
made specially for each image pixel. The purpose of the
maps is to direct sampling efforts towards undersampled regions of the measurement equation that may not be properly accounted for by other sampling methods. For example,
the “scatter direction” map helps determine what direction
to sample from a non-specular surface, which can be useful
in sampling caustics and other indirect lighting phenomena.
The maps for a given pixel are assembled lazily based on
the Monte Carlo samples that have been taken in the pixel’s
neighborhood. When a bright sample is found, the maps update to increase the probability of sampling near the same
location in path space. Subsequent samples then naturally
“swarm” to that part of path space, reducing variance.

The importance maps used in our renderer can be grouped
into two main categories, those that act in world space, and
those that act in preimage space.
World space maps work in parallel with existing importance sampling methods. That is, some preimage space
points get transformed to world space using standard importance sampling, while others get transformed based on
the world space maps, as shown in figure 1. Hence, a
world space map is really just another importance sampling
method to be combined with existing methods using multiple importance sampling. Assuming the balance heuristic,
the resulting distribution is a weighted average of the map
probability pmap and the probability induced by other importance sampling methods pis :
(2)

where α is the fraction of the points that are transformed
using the maps. (For the renderings in the paper, α was set
to 0.5.)
Preimage space maps, on the other hand, serve as a preprocess to standard importance sampling. The sampler feeds
uniformly distributed points in [0, 1)n into the preimage
space map, which transforms them into non-uniformly distributed points, but still in preimage space. The non-uniform
points are then transformed to world space with standard
importance sampling methods. Figure 2 shows this process
graphically. The end probability resulting from this double
transformation is the product of the probability specified in
the preimage space map and the natural probability created
by standard importance sampling:
ptot = pmap pis .

(3)

c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

Non-uniform
samples in
world space

Uniform points
in [0,1)n

Transform some points using
world space importance maps

Figure 1: World space maps act as an additional importance sampling method to transform points from preimage
space into samples in world space.
Transform points using
preimage space maps

Uniform points
in [0,1)n

3.1. World Space and Preimage Space Maps

ptot = αpmap + (1 − α)pis ,

1117

Standard
importance sampling

Non-uniform
points in [0,1)n

Non-uniform
samples in
world space

Figure 2: Preimage space maps act as a preprocess to
standard importance sampling, changing the distribution of
points in preimage space that are fed into the importance
sampling routines.
3.2. Maps Used in our System
Rather than creating a single, high dimensional importance
map, we define a series of one and two dimensional maps,
with each one corresponding to a different decision the renderer must make while constructing a path. Structuring the
maps in this way reduces memory requirements, but it implicitly assumes that the terms of equation 1 are separable.
The size of the maps must also be kept fairly small because
of memory overhead, so we also assume that the features of
the integrand are large enough to be captured by an importance map with at most a few hundred discrete bins.
The maps currently defined in our renderer include time,
lens area, scatter distance within a participating medium,
bifurcation (whether to reflect or transmit), light selection,
point on light, and scatter direction. Table 1 gives a brief
description of the map types defined by our renderer. Figures 5 through 11 show the kinds of results that can be
achieved by including each of the map types, comparing
against a converged image (left) and standard path tracing
(middle). In our system, the maps can be individually turned
on or off by the user.
Note that while the scenes in figures 5 through 11 may
seem contrived, each one actually corresponds to a fairly
common rendering task. For example, cinematographers often utilize a very shallow depth of field, like that shown in
figure 6, to de-emphasize background elements.

D. Cline & D. Adams & P. Egbert / Table-driven Adaptive Importance Sampling

1118
Map Name
Time
Lens
Scatter dist.
Bifurcation
Light select.
Point on light
Scatter dir.

Helps to sample
Motion blur
Depth of field
Participating media
reflect vs. transmit
Many light sources
Large light sources
Caustics

Dim.
1D
2D
1D
Discrete
Discrete
2D
2D

Space
Preimage
Preimage
Preimage
World
World
Preimage
World

Table 1: Types of importance maps defined in our system.

3.3. Map Storage and Importance Propagation
Map storage. Memory overhead for the importance maps
is kept to a minimum by only storing maps for two rows
of pixels in the image at a time−the current row being rendered, and the row just completed. To render a pixel, the renderer first assembles importance maps for the pixel by averaging the maps from the neighboring pixels that have already
been rendered. Our implementation averages seven maps, as
shown in figure 3. Typically, the maps are kept fairly small
in size. For 2D maps, a size of 32 × 32 is typical, and 1D
maps generally range between 64 and 256 entries. Figure 4
shows the result of varying the size of the scatter direction
map. When rendering an image, we scan back and forth to
allow importance to propagate both left and right, as well as
down, in the image.
Importance Maps
Scan order

Image

Time (1D)

Bifurcation (discrete)

Current
pixel

Before processing a pixel, the renderer clears the temporary maps. Then, each Monte Carlo sample produced while
rendering the pixel is added to all of the temporary maps. As
an example of how this is done, suppose that the renderer
has created the ray path x with value L(x) from point u in
preimage space. Now suppose that the coordinates (u j , uk ) =
(0.3, 0.2) from u were used to choose a point on the lens
while constructing x. Since the lens map is a preimage space
map, the new sample should be added to the temporary lens
map at location (0.3, 0.2). To do this, we find the map coordinates associated with (0.3, 0.2) and add |L(x)| to this entry
in the temporary lens map, as well as its 8 neighboring map
entries, to promote exploration. Figure 12 shows this process
graphically.

Lens (2D)
Participating media (1D)

Active
rows

The temporary maps. Ideally, we would like to add each
Monte Carlo sample directly to the current pixel’s importance maps, but several difficulties get in the way. First, the
maps for the current pixel are inverted (stored as cdf’s rather
than pdf’s) to facilitate quick lookup, and it would be expensive to add samples directly to the inverted maps. Second,
the pixel maps are normalized, and it is unclear how to scale
individual samples so that they combine properly with normalized maps. For these reasons, we keep a set of temporary
maps to hold importance information obtained while rendering the current pixel. After the pixel has been rendered, the
temporary maps are scaled and combined with the maps for
the pixel, and this information will propagate to subsequent
pixels.

Light selection (discrete)
Point on light (2D)
Scatter direction (2D)

Figure 3: Importance propagation. The renderer creates
importance maps for the current pixel by averaging the maps
from seven already rendered neighbor pixels. Importance information gleaned while rendering the pixel is stored in temporary maps which are combined with the pixel’s maps after
it has been rendered.

8×8
32 × 32
64 × 64
Figure 4: Varying the map size. In the scene, a bunny is
enclosed in a box with a small hole in the top to let in light.
The images show the effect of varying the size of the scatter
direction map from 8 × 8 on the left to 64 × 64 in the right.

For a world space map, we also add L(x) to a 3 × 3 neighborhood in the map, but the location in the map is determined
by the geometric properties of x rather than coordinates in u.
As an example, the scatter direction map shown in figure 12
is indexed by the first non-specular bounce direction of the
path (θ, φ), without regard to what values from u were used
to generate the direction.
Two of the maps in our system make discrete rather than
continous decisions, and adding values to these maps works
somewhat differently than in the continuous case. One of
these discrete maps is the light selection map. Each entry in
the light selection map corresponds to a specific light source
in the scene, so we only add |L(x)| to a single table entry
in this map. The second discrete map in our system is the
bifurcation map. The bifurcation map helps decide at each
surface intersection whether to reflect or transmit. To update this map, we keep a list of all the reflect/transmit decisions that were made while creating the path, and add |L(x)|
to corresponding entries in the map. For example, suppose
that path x has the form ERTTL (eye, reflect, transmit, transmit, light). To add x to the bifurcation map, |L(x)| would
be added to three entries in the map, reflect0 , transmit1 and
transmit2 (see figure 12).
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

D. Cline & D. Adams & P. Egbert / Table-driven Adaptive Importance Sampling

Figure 5: The time map helps the renderer choose what
instant in time to sample. The scene shows six motion blurred
spheres. Path tracing (middle) cannot reliable predict when
the spheres will be within view for a given pixel, but adding
a time map (right) provides this information. Both examples
were rendered using 16 samples per pixel.

Figure 6: The lens map aids in sampling the lens area.
Three colored lights are rendered out of focus, producing a
color wheel pattern. Since path tracing samples the lens uniformly, the three light sources are barely discernible. Adding
a lens map significantly improves the render quality with the
same sample density (32 spp).

Figure 7: A glass ball focuses light onto a plane, creating
a bright caustic. Path tracing must sample randomly to find
directions that will refract through the glass ball to hit the
light source. The scatter direction maps share this information between pixels, producing a more accurate result (32
spp).

Figure 8: A light selection map helps choose which light to
sample. In the scene above, lit with 22 spot lights, path tracing with 6 samples per pixel produces a poor image because
it simply chooses lights at random to sample. Adding a light
selection map allows information about which lights illuminate a given image region to propagate through the image.

c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

1119

Figure 9: A bifurcation map helps decide whether to reflect
or transmit. In the above scene, three spherical light sources
are seen reflected in a glass sphere. Choosing a path based
on the reflectivity of the glass (center) does not work well
in this case. Adding a bifurcation map increases the odds of
sampling the light sources (8 spp).

Figure 10: The scatter distance map helps determine how
far a ray path should penetrate a participating medium before generating a scatter event. Shown above, six colored
spot lights shine up into a uniform fog. To receive any light,
a sample must produce a scatter event within the cone of
one of the spot lights. The scatter distance map provides the
renderer with this context (32 spp).

Figure 11: A diffuse ball sits on a glossy plane with environment map lighting. While path tracing samples both the
lighting and surface BRDFs, it still cannot accurately reconstruct the illumination on the plane. Adding a point on
the light map guides the sampler towards regions of the light
source that are responsible for the glossy highlights (32 spp).

Time map (fig. 5)
Lens map (fig. 6)
Scatter direction (fig. 7)
Light selection (fig. 8)
Bifurcation map (fig. 9)
Scatter distance (fig. 10)
Point on light (fig. 11)

PT
1.045
3.185
2.025
0.904
2.075
4.944
0.429

TAIS
0.207
0.539
0.822
0.312
1.251
1.481
0.166

Table 2: Numerical results for figures 5 through 11, comparing RMSE (σ/µ) of path tracing and TAIS.

D. Cline & D. Adams & P. Egbert / Table-driven Adaptive Importance Sampling

1120

ERTTL

ui
0

Transmit
Reflect

1

1D preimage space map

01234567
Bifurcation map (discrete)

(1,1)

(2π,π)
(θ,φ)

(uj,uk)
(0,0)
2D preimage space map

(0,0)
2D world space map
(scatter direction)

Figure 12: Adding samples to the importance maps. (Left)
We add samples to preimage space maps at coordinates
specified by the input tuple u ∈ [0, 1)n . (Right) Samples are
added to world space maps based on the geometric properties of the ray path x. For the bifurcation map, the sample
is added to map entries based on the whether each interior
vertex in the path is a reflection or a transmission. We add
samples to the scatter direction map based on the direction
of the first non-specular bounce in the path, (θ, φ).
Sampling with the importance maps. Generating a Monte
Carlo ray path sample using the importance maps proceeds
as follows:
1. Generate a (preimage space) tuple u ∈ [0, 1)n with uniform probability.
2. Construct a ray path x using the values stored in u.
For those decisions that do not have an importance map
associated with them, use values from u as input to
standard importance sampling.
For decisions associated with a world space map, transform the values in u to world space using the map with
probability α, and transform them by standard importance sampling with probability 1 − α.
For decisions associated with a preimage space map,
transform the uniformly distributed coordinates in u to
nonuniformly distributed points u , then feed u into a
standard importance sampling method to transform to
world space.
3. Evaluate L(x) and add its value to the current pixel, Pi .
4. Add |L(x)| to all of the temporary maps for the current
pixel at coordinates determined by the coordinates in u
for preimage space maps and the geometric properties of
x for world space maps.
Combining the temporary maps with the current pixel.
Once a pixel has been rendered, we combine the temporary
maps with the maps for the pixel to improve the importance
function for future pixels:
1. Normalize the temporary maps (divide by their sum).

2. Add a constant value to each entry in the temporary maps.
Adding a constant value to the preimage space maps
helps the renderer balance between exploration and exploitation and keeps the algorithm unbiased. In the current implementation, we add the value 1/n to each map
entry, where n is the number of entries in the map. World
space maps do not need this step since exploration is provided by standard importance sampling, but we still add
a tiny value to each world space map entry to avoid underflow during later map averaging. We then renormalize
the temporary maps.
3. Invert the temporary maps so that they can be added to
the already inverted pixel maps. Inversion of a 1D map
entails computing a CDF of the map. We invert 2D maps
similary, creating a CDF for each row of the map, as well
as an extra CDF of the Y axis marginal. A lookup in a 1D
map thus requires a single binary search, and a lookup in
a 2D map takes 2 binary searches.
4. Add the inverted temporary maps to the pixel maps. (Note
that this can be done directly to the inverted maps.)
After the temporary maps have been added in, the pixel’s
maps contain a mix of information gained while rendering
the pixel and information propagated from the pixel’s neighbors. The power of our algorithm lies in this blending of new
and old information to propagate importance over the image.
Even though we use information obtained while sampling to
improve the PDF, TAIS is still unbiased because the PDF
for a given pixel is fixed before it is rendered. Algorithm 1
provides pseudocode for rendering a pixel with table-driven
adaptive importance sampling.
3.4. Noise Suppression
One issue with our algorithm is that very bright samples can
occur when a high contribution part of path space is first
discovered. One simple solution is to apply maximum contribution filtering to the pixel samples. In this scheme individual samples are clamped to some maximum contribution. The assumption is that very bright samples must be extreme outliers that do not contribute appreciably to the image
on average. If the sample population meets this assumption,
maximum contribution filtering can effectively remove spike
noise from an image without introducing visible artifacts.
On the other hand, if the sample population is consistently
dominated by a few bright samples, the filter will darken the
image appreciably as it removes noise.
Walter et al. [WABG06] suggest a maximum contribution
of 2% of the total pixel brightness, to be in line with Weber’s
law, but this is too aggressive for low sample count Monte
Carlo integrations. Instead, we base the maximum contribution on the number of samples, using the expression
mi = (s − si ) max(32/n, 0.02),

(4)

where mi is the maximum contribution for sample i, s is the
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

D. Cline & D. Adams & P. Egbert / Table-driven Adaptive Importance Sampling

1121

Algorithm 1 : Render pixel Pi with TAIS
1: Create importance maps for Pi by averaging neighbors.
2: Clear the temporary importance maps.
3: for each sample in the pixel do
4:
Generate uniformly distributed tuple u ∈ [0, 1)n
5:
// Construct a ray path x from u in pixel Pi .
6:
for each decision needed to transform u to x do
7:
if no importance map exists for the decision then
8:
Make the decision (transform to world space) with
standard IS. ptot = pis .
9:
else if a world space map exists for the decision then
10:
Transform u to world space, using the map with probability α, and standard IS with probability 1 − α.
11:
ptot = αpmap + (1 − α)pis .
12:
else if a preimage space map exists for the decision then
13:
Transform the relevant coords of u to u with the map.
14:
Transform u to world space using standard IS.
15:
ptot = pmap pis .
16:
end if
17:
end for
18:
Evaluate L(x), and add its value Pi .
19:
Add |L(x)| to all of the temporary maps at coordinates based
on the values in u or the geometric properties of x.
20: end for
21: Perform maximum contribution filtering (optional)
22: Normalize the temporary maps.
23: Add a constant value to the temporary maps and renormalize.
24: Invert the temporary maps and add to the current pixel maps.

Converged image

PT, 256 spp

MLT, 256 spp

Our result, 128 spp

Our result, 128 spp, filtered

sum of the samples for the pixel, si is the brightness of sample i, and n is the number of samples in the pixel.
Figure 13 shows the result of adding a maximum contribution filter to TAIS. The main artifact of the filter is some
darkening in noisy regions of the image. Although the maximum contribution filtering is biased, it still can lower the
error of rendered images in many instances (see figure 13).

Wasp Scene Error Analysis
10

Path Tracing
MLT
TAIS
TAIS (filtered)

4. Results

Numerical comparison of the example renderings. Table 2 gives the numerical error of the images in figures 5 through 11. All of the renderings made with our algorithm have significantly lower error than path tracing with
the same number of samples per pixel. To put these numbers into perspective, the lens map example from figure 6
required more than 18 times as many path traced samples to
equal the error of the our algorithim.
Wasp scene. Figure 13 shows a more real world example
than the scenes in section 3, a wasp resting on a flower. In
this scene, we simulate soft lighting with 1200 point lights,
and the scene has a limited depth of field. Path tracing with
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

RMSE

1

We have implemented Table-driven adaptive importance
sampling as an extension to the PBRT renderer [PH04]. In
this section we discuss the results of our method and compare it to standard path tracing and MLT.

0.1

0.01
0

500

1000

1500

2000

2500

Render Time (seconds)

Figure 13: Visual and numerical comparison of our algorithm to path tracing and MLT.
256 samples per pixel (1086 sec.) samples the lights uniformly, and produces a very noisy image. This is so despite
the fact that the path tracer uses a low discrepancy pattern
to sample the rendering integral. MLT, based on the method
described in [KSKAC02], with 256 mutations per pixel (750

1122

D. Cline & D. Adams & P. Egbert / Table-driven Adaptive Importance Sampling

sec.) does much better, but significant noise is still visible.
TAIS with 128 samples per pixel (615 sec.) is smoother
almost everywhere, except for a few noisy pixels. Adding
maximum contribution filtering removes the bright samples
so that the whole image is smooth.
Figure 13 plots the render time vs. error (RMSE) for different renderings of the wasp scene. As shown in the figure,
TAIS starts out with higher error than the other methods, but
quickly outstrips them as the importance maps become more
accurate. MLT starts out with lower error than either of the
other methods. However, because MLT is not stratified, it
follows a modest trend line of about t −0.5 , whereas TAIS
follows a trend better than t −1.0 . Note also that the maximum contribution filter reduces error a lot at lower sample
rates, but less as the sample density increases.
The Sponza atrium scene. Figure 14 shows renderings
that demonstrate some of the shortcomings of TAIS. In the
top set of images the ray depth was set to 2, allowing only
a single indirect light bounce. Path tracing with 64 samples per pixel (left image) produces a noisy image because
the sampler does not know which directions to sample to
find directly lit surfaces. Adding a scatter direction map improves the result considerably because the map tells the sampler what directions to sample. The bottom row of the figure
shows the atrium scene once again, but this time it is rendered with a ray depth of 3. To try and account for the extra
indirect bounce, we added a second scatter direction map. In
this case, the image appears to have mixed quality. Portions
of the image dominated by direct lighting and single scattering have high quality, while parts of the image dominated by
multiple scattering show the same or lower quality than path
tracing. This is due to the fact that a diffuse bounce spreads
out the ray samples so that they are no longer correlated.
5. Discussion
Although our algorithm can be effective in many situations,
it has a number of limitations. First, the maps can only help
explore important regions of path space once they have been
found. When the sampler does find an important region, information about the region cannot propagate back to previously rendered pixels. Also, the maps do not always cooperate to reduce error. Often, one map provides nearly all of the
variance reduction, while the others do not help appreciably.
This is likely because the maps are 1 and 2D projections of
a higher dimensional space. Finally, we note that path space
coherence cannot always be found and exploited by the importance maps, in which case the render quality may drop
below that of standard path tracing. Despite these shortcomings, we believe TAIS to be a practical method to reduce
variance in global illumination images. Several of the maps
address parts of the measurement equation that are usually
glossed over by other sampling methods, such as the point
on the lens and instant of time to sample.
Relation to particle swarm optimization. TAIS is simi-

PT 64 spp, depth 2

TAIS 64 spp, depth 2

PT 64 spp, depth 3

TAIS 64 spp, depth 3

Figure 14: The effect of adding a scatter direction map for
the second bounce. (Top) single indirect bounce. (Bottom)
two indirect bounces.
lar in a number of ways to the particle swarm optimization
(PSO) [KE95]. Both PSO and TAIS define a sampling distribution based on samples previously taken while balancing
between exploration and exploitation. However, TAIS does
not keep a population of particles, and the end goal is integration rather than search.
Relation to other global illumination algorithms. This
paper demonstrated TAIS in the context of path tracing.
However, TAIS may be even more effective when used with
algorithms that reduce the dimensionality of the measurement equation by precomputing indirect lighting. Photon
mapping with a final gather step [Jen96] and multidimensional light cuts [WABG06] come to mind as two algorithms
that could benefit from the addition of importance maps, particularly the lens and time maps.
6. Conclusion
This paper presented table-driven adaptive importance sampling (TAIS) as a technique to supplement existing importance sampling functions in global illumination. The new
method works by defining tabular importance maps that
hold importance information gleaned from the samples taken
while rendering an image. We showed that TAIS can be quite
effective at reducing variance in a number of common but
difficult rendering situations, including several that are overlooked by most other importance sampling methods.
Acknowledgements. We wish to thank the anonymous reviewers for their comments which helped in a number of
ways to improve the writeup. This work was funded in part
by NSF contract IIS 0612269.
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

D. Cline & D. Adams & P. Egbert / Table-driven Adaptive Importance Sampling

References
[ARBJ03]

AGARWAL S., R AMAMOORTHI R., B E S., J ENSEN H. W.: Structured importance sampling of environment maps. ACM Trans. on Graphics
(SIGGRAPH 03) 22, 3 (2003), 605–612.
LONGIE

[AS00] A SHIKHMIN M., S HIRLEY P.: An anisotropic
Phong BRDF model. Journal of Graphics Tools 5, 2
(2000), 25–32.
[BGH05] B URKE D., G HOSH A., H EIDRICH W.: Bidirectional importance sampling for direct illumination. In
Eurographics Symposium on Rendering (2005), pp. 139–
146.
[BSS93] B LASI P., S AËC B. L., S CHLICK C.: A rendering algorithm for discrete volume density objects. Computer Graphics Forum 12, 3 (1993), 201–210.
[CETC06] C LINE D., E GBERT P. K., TALBOT J. F.,
C ARDON D. L.: Two stage importance sampling for direct lighting. In Eurographics Symposium on Rendering
(2006), pp. 103–113.
[CJAMJ05] C LARBERG P., JAROSZ W., A KENINE M ÖLLER T., J ENSEN H. W.: Wavelet importance sampling: efficiently evaluating products of complex functions. ACM Trans. on Graphics (SIGGRAPH 05) 24, 3
(2005), 1166–1175.

1123

[KSKAC02] K ELEMEN C., S ZIRMAY-K ALOS L., A N TAL G., C SONKA F.: A simple and robust mutation strategy for the metropolis light transport algorithm. Computer Graphics Forum 21, 3 (2002), 1–10.
[LC99] L EESON W., C OLLINS S.: Yet another rendering
framework, 1999.
[Lep78] L EPAGE G. P.: A new algorithm for adaptive
multidimensional integration. Journal of Computational
Physics 27 (1978), 192–203.
[LFTG97] L AFORTUNE E. P. F., F OO S.-C., T ORRANCE
K. E., G REENBERG D. P.: Non-linear approximation of
reflectance functions. In Proc. of SIGGRAPH ’97 (1997),
pp. 117–126.
L AWRENCE J., RUSINKIEWICZ S., R A R.: Efficient brdf importance sampling
using a factored representation. ACM Trans. on Graphics
(SIGGRAPH 04) 23, 3 (2004), 494–503.

[LRR04]

MAMOORTHI

[ODJ04] O STROMOUKHOV V., D ONOHUE C., J ODOIN
P.-M.: Fast hierarchical importance sampling with blue
noise properties. ACM Trans. on Graphics (SIGGRAPH
04) 23, 3 (2004), 486–493.
[PH04] P HARR M., H UMPHREYS G.: Physically Based
Rendering: From Theory to Implementation. Morgan
Kaufmann, 2004.

[CTE05] C LINE D., TALBOT J., E GBERT P.: Energy redistribution path tracing. ACM Trans. on Graphics (SIGGRAPH 05) 24, 3 (2005), 1186–1195.

[SL06] S TEINHURST J., L ASTRA A.: Global importance
sampling of glossy surfaces using the photon map. In
IEEE Symposium on Interactive Ray Tracing 2006 (2006),
pp. 133–138.

[DWF06] D ONIKIAN M., WALTER B., F ERNANDEZ S.:
Accurate direct illumination using iterative adaptive sampling. IEEE Transactions on Visualization and Computer
Graphics 12, 3 (2006), 353–364.

[SWZ96] S HIRLEY P., WANG C., Z IMMERMAN K.:
Monte carlo techniques for direct lighting calculations. In
ACM Trans. on Graphics (1996), vol. 15(1), pp. 1–36.

[FBG02] F ERNANDEZ S., BALA K., G REENBERG D. P.:
Local illumination environments for direct lighting acceleration. In Eurographics workshop on Rendering (2002),
pp. 7–14.
[HP02] H EY H., P URGATHOFER W.: Importance sampling with hemispherical particle footprints. In SCCG ’02
(2002), ACM Press, pp. 107–114.
[Jen95] J ENSEN H. W.: Importance driven path tracing
using the photon map. In Eurographics Workshop on Rendering (1995), pp. 326–335.
[Jen96] J ENSEN H. W.: Global illumination using photon
maps. In Eurographics Workshop on Rendering (1996),
pp. 21–30.
[KE95] K ENNEDY J., E BERHART R. C.: Particle swarm
optimization. In Proceedings of the IEEE International
Conf. on Neural Networks (1995), pp. 1942–1948.
[KK03] KOLLIG T., K ELLER A.: Efficient illumination
by high dynamic range images. In Eurographics workshop on Rendering (2003), pp. 45–50.
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

[TCE05] TALBOT J. F., C LINE D., E GBERT P. K.: Importance resampling for global illumination. In Eurographics
Symposium on Rendering (2005), pp. 139–146.
[VG95] V EACH E., G UIBAS L. J.: Optimally combining
sampling techniques for monte carlo rendering. In Proc.
of SIGGRAPH 95 (1995), ACM Press, pp. 419–428.
[VG97] V EACH E., G UIBAS L. J.: Metropolis light transport. In Proc. of SIGGRAPH 97 (1997), ACM Press,
pp. 65–76.
[WABG06] WALTER B., A RBREE A., BALA K., G REEN BERG D. P.: Multidimensional lightcuts. ACM Trans. on
Graphics (SIGGRAPH 2006) 25, 3 (2006), 1081–1088.
Measuring and modeling
[War92] WARD G. J.:
anisotropic reflection. In Proc. of SIGGRAPH ’92 (1992),
pp. 265–272.

