Volume 27 (2008), Number 2

EUROGRAPHICS 2008 / G. Drettakis and R. Scopigno
(Guest Editors)

Curvature-Domain Shape Processing
Michael Eigensatz

Robert W. Sumner

Mark Pauly

Applied Geometry Group
ETH Zurich

Abstract
We propose a framework for 3D geometry processing that provides direct access to surface curvature to facilitate advanced shape editing, filtering, and synthesis algorithms. The central idea is to map a given surface to the
curvature domain by evaluating its principle curvatures, apply filtering and editing operations to the curvature
distribution, and reconstruct the resulting surface using an optimization approach. Our system allows the user
to prescribe arbitrary principle curvature values anywhere on the surface. The optimization solves a nonlinear
least-squares problem to find the surface that best matches the desired target curvatures while preserving important properties of the original shape. We demonstrate the effectiveness of this processing metaphor with several
applications, including anisotropic smoothing, feature enhancement, and multi-scale curvature editing.
Categories and Subject Descriptors (according to ACM CCS): I.3.5 [Computer Graphics]: Computational Geometry
and Object Modeling

1. Introduction
Curvature is an essential concept in geometry and plays
a crucial role in surface optimization, geometric modeling, and shape classification. Many geometry processing
operations strive to optimize the curvature distribution of
a surface based on energy functionals that measure surface fairness [BPK∗ 07]. Shape classification, feature extraction, and segmentation algorithms [Sha06, AKM∗ 06] heavily rely on curvature information to identify meaningful
geometric structures, such as ridges, valleys, and corners,
that are mapped to features or used as segmentation boundaries. Similarly, non-photorealistic rendering approaches often make use of surface curvature to determine the position
and style of rendered strokes [MHIL02]. Typically, these
methods use curvature either as a tool for analysis, or indirectly in the optimization of fairness energies that are defined
as curvature integrals over the entire surface.
Our goal is to provide direct access to curvature as a geometry processing tool to facilitate advanced shape editing,
filtering, and synthesis algorithms. We propose an optimization framework that allows editing and filtering of surface
curvatures in order to alter the shape of an object, as illustrated in Figure 1. Our system first computes a mapping from the spatial domain to the curvature domain by
evaluating principal curvatures for each point on the surc 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.
Published by Blackwell Publishing, 9600 Garsington Road, Oxford OX4 2DQ, UK and
350 Main Street, Malden, MA 02148, USA.

Curvature
estimation
Principal curvatures

Original model

Editing,
filtering

Optimization
Reconstructed model

Target curvatures

Figure 1: The central idea of our approach is to process the
geometry of a model by altering its curvature distribution.

face of a given object. In this domain, important geometric features and properties are more directly accessible and
can be manipulated by setting specific curvatures to desired
target values or by applying filtering operations on the curvature distribution. The mapping to the curvature domain is
then inverted to reconstruct the modified object geometry. As

242

M. Eigensatz, R. Sumner, M. Pauly / Curvature-Domain Shape Processing

Original
κ2

κ1 → 2κ1

κ1 → 2

κ2 → 0

κ1,2 → 1.5

κ2 → −κ2

κ1,2 → κ1,2

>0
=0

κ1
<0

κ1 , κ 2

<0
=0 >0

κ1 , κ2

Figure 2: Geometry processing in the curvature domain. The models on the right (blue regions indicate constrained vertices)
have been reconstructed by modifying the signed maximum and minimum curvatures, κ1 and κ2 , respectively, of the model
shown in the upper left. For example, setting the minimum curvature κ2 to zero while keeping κ1 fixed straightens out the
curved regions, as shown in the top right. In the bottom right, the curvatures of a smaller scale are set to the curvatures
estimated at a larger scale, as visualized in the curvature plots in the bottom left.

shown in Figure 2 and in Section 5, this approach facilitates
a variety of geometry processing operations that are difficult
to achieve by manipulating spatial 3D coordinates but trivial
to formulate in the curvature domain.
The main challenge lies in the formulation and implementation of the inverse mapping, i.e., the reconstruction of
the surface geometry from the modified curvature values. In
general, this mapping is not well-defined and not every set
of curvature values is realizable. For example, there is no
3D embedding of a genus-1 surface with constant principal
curvatures everywhere.
We address this issue by formulating the reconstruction
as an optimization process that computes a deformation of
the input surface that best approximates the prescribed curvatures in a least-squares sense. Additional terms in the objective function aim at preserving metric properties of the
original surface and ensure that the solution is well-defined.
Due to the nonlinear relation between spatial coordinates
and corresponding curvature values, the optimization employs an iterative Levenberg-Marquardt method to solve the
nonlinear least-squares problem. This procedure requires
partial derivatives for which we derive analytical expressions. We show various applications of our framework that
demonstrate how complex geometry processing operations
can be formulated as simple operations on surface curvatures.

Related Work. The most common methods in surface optimization are based on energy minimizing flows, where a
given surface is progressively evolved to decrease an energy functional that quantifies the desired surface properties. Taubin [Tau95] proposed an iterative Laplacian scheme
to implement surface diffusion for low-pass filtering of discrete surfaces. Desbrun and colleagues [DMSB99] perform
mean curvature flow to remove geometric noise on a surface and propose an implicit scheme to stabilize the computation. Ohtake and co-workers [OBS02] apply diffusion
to the mesh normals and reconstruct the smoothed surface
using a fitting approach. Bobenko and Schröder [BS05] introduced a version of discrete Willmore flow that preserves
important symmetries of the continuous setting. A variety of
different energy functionals, including Willmore and minimum variation of curvature energies, are studied by Pushkar
and Sequin [PS07] in the context of fair surface design. Similarly, Pinkall and Polthier [PP93] construct discrete minimal
surfaces based on an area minimizing flow.
Various researchers have extended this class of shape optimization methods by adding more direct control of the
flow evolution. Hildebrandt and Polthier [HP04] present
a method for feature-preserving noise removal on surface
meshes based on an anisotropic mean curvature flow. Their
method allows mean curvatures to be prescribed as targets
for the flow evolution. Eckstein and co-workers [EPT∗ 07]
generalize geometric surface flows by tailoring the inner
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

243

M. Eigensatz, R. Sumner, M. Pauly / Curvature-Domain Shape Processing

product of the underlying vector field to the requirements of
specific applications. This extension provides a design tool
for controlling the flow, which has been successfully applied
for surface fairing and deformable shape matching. Tosun
and co-workers propose a system for shape optimization using reflection lines that allows modifying surfaces by specifying a target reflection function gradient [TGRZ07]. An
optimization then solves for the surface that best matches
the prescribed reflection field. In the context of surface reconstruction from differential quantities, Lipman and colleagues [LSLCO05] introduced a rigid motion invariant surface representation based on discrete forms.
Building on these ideas, we develop a comprehensive system for curvature-domain shape processing. Our work complements existing surface optimization methods by supporting direct editing and filtering of surface curvatures, thus
broadening the toolset for manipulating discrete surfaces.
2. Continuous Problem Formulation
Our goal is to develop a geometry processing tool that enables the user to modify a given surface S ⊂ IR3 by altering
its curvature profile to obtain a new surface S . This procedure requires the computation of curvatures on the input
model S, suitable operators to modify these curvatures, and
a method to reconstruct the corresponding surface S . We
formulate the reconstruction as an optimization process that
finds the unknown surface S by minimizing an appropriate
energy function. We first derive this energy in the continuous
setting, then propose a suitable discretization in Section 3,
and discuss the resulting optimization in Section 4.
Let S and S be defined over a domain Ω ⊂ IR2 by mappings p, p : Ω → IR3 , respectively. We denote with κ1 (u, v)
the maximum and with κ2 (u, v) the minimum curvature at
a point p(u, v) ∈ S, but omit the (u, v) parameters for notational brevity. Quantities of the unknown surface S are defined analogously and denoted by a prime. In principle, we
want to be able to prescribe arbitrary target curvature values
κˆ 1 and κˆ 2 for the modified surface S and preserve important
properties of the original surface S. We define an energy that
quantifies this goal by measuring the deviation of principal
curvatures κ1 , κ2 of the surface S from the prescribed target
values κˆ 1 , κˆ 2 as
(κˆ 1 − κ1 )2 + (κˆ 2 − κ2 )2 dA,

Ec =
√

(1)

Ω

with constants kc and km that allow a trade-off between curvature fit and metric distortion.
3. Discretization
Minimizing the energy defined in Equation 3 requires a suitable discretization of the surface, its principal curvatures,
and the metric term. We approximate a surface S by a triangle mesh M = (V, E, F), where V = {vi } denotes the set
of vertices, E = {ei j } the edge set, and F = { fi jk } the face
set with 1 ≤ i, j, k ≤ n = |V|. The position of vertex vi is
given by vi ∈ IR3 and the edge vector corresponding to ei j is
ei j = v j − vi . To simplify notation, we omit the indices when
the meaning is clear from the context.
3.1. Discrete Curvature
A variety of techniques have been proposed to estimate
curvatures on piece-wise linear surfaces (cf., [MDSB02,
CSM03, CP05, GGRZ06, KSNS07]). In our implementation,
we use the curvature tensor proposed by Cohen-Steiner and
Morvan [CSM03] as it provides a robust and theoretically
well-founded estimation of the principle curvatures at multiple scales, which we exploit in our framework to implement
multi-scale processing operations. However, our method is
not dependent on this specific curvature discretization and
other techniques could be used instead.
We adopt the notation used by Alliez and colleagues
[ACSD∗ 03] and summarize the curvature computation here.
The curvature tensor K(v) for vertex v is found by averaging
an edge-based tensor for all edges that fall within a region B
surrounding the vertex. The curvature tensor is represented
by the 3 × 3 matrix
K(v) =

1
|B|

∑

β(e) |e ∩ B| e¯ e¯ ,

where |B| is the surface area of the region B, β(e) represents the signed angle between the normals of the triangles
incident to e and is positive for a convex crease and negative for a concave one, |e ∩ B| is the length of the portion
of the edge within the region B, and e¯ is a unit-length vector aligned with e. The principle curvatures are found by
computing the eigenvalues of the curvature tensor K(v). The
eigenvalue closest to zero is discarded, and the remaining
two form the signed maximum and minimum curvatures:
the larger signed eigenvalue is κ1 and the smaller κ2 . The

where dA = detI dudv and I is the first fundamental form.
In addition, we wish S to have a similar metric as S and
define the energy
I−I

Em =
Ω

2
F

dA,

(2)

(4)

e∈B

vk
vi

Avi

vi

vj
Aei j

vi

where · F denotes the Frobenius norm. The surface S can
then be found as the minimizer of the combined energy
E = kc Ec + km Em ,

(3)

c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

Figure 3: Vertex, edge, and face areas.

A fi jk v j

244

M. Eigensatz, R. Sumner, M. Pauly / Curvature-Domain Shape Processing

size of B determines the scale of the curvature estimation.
As the smallest scale we use the barycentric area Avi of a
vertex vi [MDSB02] (Figure 3). We use barycentric areas
rather than generalized Voronoi regions to simplify derivative computations. For larger scales, we compute the union
of the barycentric areas of all vertices within a certain distance to vi .

3.2. Discrete Energy
We discretize the integral of Equation 1 as a sum of discrete
curvatures, leading to
Ec =

∑

Avi (κˆ 1,i − κ1,i )2 + (κˆ 2,i − κ2,i )2 ,

Original

Isometric

Conformal

Figure 4: Scaling curvatures by a factor of 0.5 for a hemisphere (center). The conformal energy (left) only preserves
inner angles and achieves the target curvature by scaling the
model. The isometric energy (right) additionally tries to preserve area at the cost of a slight deviation in inner angles.

(5)

vi ∈V

where the subscript i indicates that the corresponding quantities are computed with respect to vertex vi .
The metric term Em measures the deviation from isometry, i.e. change of lengths. A discrete version can thus be
formulated as
Em =

∑ Ae (1 −
e∈E

e 2
) ,
e

(6)

where Ae is the barycentric area associated with edge e (Figure 3). We found that trying to preserve isometry can be too
restrictive in certain applications, in particular when large
changes in shape are desired. We thus propose a conformal
energy Eα that only penalizes deviation of inner angles:
Eα =

∑

A fi jk (αi − αi )2 + (α j − α j )2 + (αk − αk )2 ,

fi jk ∈F

(7)
where A fi jk denotes the area of triangle fi jk , and αi , α j , αk
are the inner angles of fi jk at vertices vi , v j , and vk , respectively (Figure 3). Note that similar energies are also used in
surface parameterization [SdS01].
The isometric energy Em aims at preserving lengths, i.e.
angles and area, whereas the conformal term Eα tries to preserve inner angles only, i.e. does not place a penalty on uniform scaling. Figure 4 illustrates the difference between the
two terms.
For the results in this paper, we use the conformal formulation Eα and focus on this energy for the remainder of
the discussion. Additionally, we add a third term to the optimization that measures the size of the deformation field:
Ed =

∑

vi − v i

2

.

(8)

vi ∈V

This term has a twofold purpose. First, it resolves ambiguity in the objective function that exists because Ec , Em , and
Eα are invariant under rigid transformations. Second, it addresses the problem of overfitting by penalizing large deformations that might otherwise be selected by the optimizer

in an attempt to drive the total energy to its lowest possible
value. Thus, the energy we use is defined by
1
E = (kc Ec + kα Eα + kd Ed ),
(9)
2
where the parameters kc , kα , and kd allow the user to adapt
the optimization to a particular application domain. The factor 12 is introduced for convenience in subsequent equations.
4. Optimization
We minimize the energy defined in Equation 9 in order to
find the vertex positions v1 . . . vn of the deformed shape that
best matches the target curvatures:
v1 . . . vn = argmin E.

(10)

v1 ...vn

This optimization is a nonlinear least-squares problem, due
to the nonlinear relationship between the terms of the objective function (principle curvature values, triangle angles)
and the vertex positions. Specifically, it falls into the category of composite non-smooth optimization [WF86] due to
discontinuities in the derivatives of the principle curvatures
at umbilic points. As detailed in the Appendix, we are able
to derive suitable approximations for the derivatives at these
points so that efficient methods designed for smooth functions can be applied. Although we have written the problem as an unconstrained optimization, positional vertex constraints can be trivially enforced by treating the constrained
vertices as constants rather than free variables.
We employ the Levenberg-Marquardt algorithm
[MNT04], which is a damped version of the GaussNewton method that first linearizes the nonlinear problem
with Taylor expansion around x:
f(x + δ) = f(x) + Jδ

(11)

The vector f(x) stacks the equations that define the objective function so that f(x) f(x) = 2E, the vector x stacks the
unknown vertex positions, and J is the Jacobian matrix of
f(x). The details of the derivative computations to build J
are given in the Appendix.
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

245

M. Eigensatz, R. Sumner, M. Pauly / Curvature-Domain Shape Processing

Each iteration solves a linearized problem to improve xk ,
the current estimate of the unknown vertex positions:
δk = argmin

f(xk ) + Jδ

2
2

δ

Edit

(12)

xk+1 = xk + δk .
In solving this problem, the Levenberg-Marquardt method
adds a damping factor to the normal equations, yielding:
(J J + µI)δ = J f(xk ),

(13)

Original curvatures

Target curvatures

Estimate

Reconstruct

Final curvatures
Estimate

with µ > 0. The initial value of µ is chosen to be 10−6 times
the largest entry on the diagonal of J J evaluated at x0 . In
subsequent iterations, µ is updated according to the schedule
suggested by Nielsen [Nie99]. The algorithm is not sensitive
to the initial value of µ as it is continually adapted by the
update procedure.
The damping factor serves two main purposes. First, it
improves numeric robustness by guaranteeing that the coefficient matrix is positive definite and that δk is in the decent direction. Second, the damping parameter influences both the
step direction and the step size, obviating the need for a specific line search and leading to faster convergence [MNT04].

Original model

Cross-scale smoothing

Curvature clamping

Feature enhancement

Since the system matrix in Equation 13 is sparse, we solve
the normal equations in each iteration using a direct solver
that employs sparse Cholesky factorization [SG04]. We detect convergence by monitoring the change in the objective
function Fk = E(xk ), the gradient of the objective function,
and the magnitude of the update vector δk [GMW89]:
|Fk − Fk−1 | < ε(1 + Fk )
√
∇Fk ∞ < 3 ε(1 + Fk )
√
δk ∞ < 2 ε(1 + δk

(14)
∞ ).

In our experiments, the optimization converges after about
five iterations with ε = 10−6 .
For some applications, there may be a conflict between
the desired curvatures and the original shape metric, since
the requested curvatures necessitate a deviation in triangle
shape. For this reason, we adapt the optimization procedure
to allow the metric to evolve in an iterative fashion. Initially,
the target angles and vertex positions for Eα and Ed are derived from the original shape and the optimization is allowed
to converge. Then, the angles and positions are updated with
values taken from the converged shape and the process is repeated. Conceptually, this iterative scheme evolves the metric to better match the curvatures, while avoiding drastic
changes in triangle shape that may cause numeric instabilities.
5. Results
This section shows various geometry processing applications supported by our system. Following the pipeline depicted in Figure 1, we first compute discrete principal curvatures on the input mesh as described in Section 3.1. These
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

Figure 5: Curvature-domain processing on the Stanford
bunny. The top row shows the curvature plots of the original
model, the prescribed target values, and the actual achieved
curvatures on the final reconstructed model. Vertices on the
base of the bunny are constrained to remain fixed in place in
the optimization.

curvature values are then modified by applying filtering operations or direct edits, and the resulting surface is reconstructed using the optimization introduced in Section 4.
Figure 5 shows a number of curvature-domain edits on
a shape with a complex curvature distribution. For crossscale smoothing, we set the target principal curvatures of the
smallest scale (barycentric vertex area) to the values computed at a scale of four times the average one-ring radius. As
the curvature plots indicate, the target curvature values are
well approximated in the final model. The curvature plots visualize both principle curvatures according to the colormap
in Figure 2. Note that the resulting smoothing avoids local
shrinkage artifacts often observed with diffusion-based ap-

246

M. Eigensatz, R. Sumner, M. Pauly / Curvature-Domain Shape Processing

(b) Multi-scale

(c) Enhanced

(d) To sphere

large scale

small scale

(a) Original

proaches that can increase mean curvature and eventually
lead to pinch-off singularities.
Curvature clamping restricts both the minimum and maximum curvature to lie within a user-defined interval, thus removing the extreme curvatures from the surface. As a result, the bunny’s ears inflate in order to avoid high curvatures. Note how surface detail that is characterized by curvatures within the clamping interval is preserved, while strong
creases are smoothed and rounded.
Figure 7 shows one-sided curvature clamping on a machine part, where curvatures are restricted to lie in the interval [−5, ∞]. As a result, concave corners evolve into smooth
fillets to meet the new curvature requirements. Note that
normal discontinuities across feature edges are introduced
purely for rendering purposes. Curvature processing is oblivious to these tagged edges, i.e. the entire mesh is considered
a discrete approximation of a smooth surface.
Feature enhancement in Figure 5 is achieved by increasing the largest absolute principal curvature by an amount
proportional to the difference of the absolute principal curvature values. This change enhances convex ridges as well
as concave valleys. The same enhancement filter is applied
in Figure 6 (c) on a digital elevation model. This figure also
shows the effect of multi-scale editing (b), where target curvatures have been specified on two different scales: the curvatures of the original model are prescribed on the smallest
scale, while on a coarser scale target curvatures are set to a
constant in a circular region around the peak of the mountain. This “flattens out” the mountain flanks, while preserving the fine-scale structure. Multi-scale editing is easily incorporated into the optimization by including target curvatures at different scales in the energy Ec . Image (d) shows
the result of a single-scale edit, where both principal curvatures for the center region have been set to the same constant,
thus pushing the shape towards a spherical configuration.

Figure 6: Different curvature-domain processing operations on the Matterhorn. Curvature plots show the resulting curvatures after the optimization. For (b) curvature optimization is performed at two scales.

Figure 8 shows a curvature-domain bilateral filter applied
to a noisy range scan. Target curvature values κˆ 1,i for vertex
vi (and analogously for κˆ 2,i ) are computed as local weighted
averages that combine domain and range filtering
κˆ 1,i =

∑v j ∈Ni φc ( vi − v j )φs (|κ1,i − κ1, j |)κ1,i
,
∑v j ∈Ni φc ( vi − v j )φs (|κ1,i − κ1, j |)

(15)

where Ni is the local averaging region around vertex vi , and
φc and φs are two Gaussians measuring spatial closeness and
curvature similarity, respectively (see [TM98] for details).
Compared to isotropic Laplacian smoothing, the bilateral filter better preserves ridges and corners, while leading to an
overall smoother curvature distribution. The curvature plots
reveal the anisotropic behavior of the filter, i.e., illustrate

-23

Original

-5

11

-23

-5

11

Curvature clamping

Figure 7: Curvature clamping of a machine part. The histograms show the distribution of κ2 on a logarithmic scale
before and after the optimization.

c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

247

M. Eigensatz, R. Sumner, M. Pauly / Curvature-Domain Shape Processing

Fig. 2

Original
scan

Laplacian
smoothing

Bilateral
curvature filter

σ

κ1 → 2κ1
κ1 → 2
κ2 → 0
κ1,2 → 1.5
κ2 → −κ2
κ1,2 → κ1,2

.950
.944
.858
.999
.988
.994

Bunny

σ

Clamp
Cross-Scale
Enhance

.821
.963
.721

Table 1: The value σ ∈ [0, 1] indicates to what extent the
target curvatures are achieved by the final model.

differences in the achieved scores stem from the fact that the
metric regularization prevents drastic changes of the shape
and that target curvatures can be incompatible.
6. Discussion

Laplacian smoothing

Bilateral curvature filter

Figure 8: Comparison of isotropic Laplacian smoothing
with bilateral filtering of curvatures on a noisy range scan.

how curvature variation is reduced along feature lines without blurring the surface across the features. For comparison
we apply ten smoothing steps in both examples. Boundaries
are handled without special treatment. Our formulation operates directly on discrete curvatures, i.e., scalar attributes defined on each mesh vertex, so that we avoid local height-field
parameterizations of vertex positions, as for example used
in [FDCO03], that can lead to distortions for larger neighborhoods or high curvature regions.
To evaluate the results of our algorithm we introduce a
score function σ that measures the degree to which the prescribed curvatures are achieved by the optimization procedure. This function is designed to be a relative measure independent of both scale and sampling and is defined as
σ = 1−

∑vi ∈V Avi (κˆ 1,i − κ1,i )2 + (κˆ 2,i − κ2,i )2
∑vi ∈V Avi (κˆ 1,i − κ1,i )2 + (κˆ 2,i − κ2,i )2

,

(16)

where κ j,i denotes the principal curvatures of the original
model.
Higher values indicate that the optimization procedure
was better able to match the desired curvatures. Table 1 lists
the values of σ for the models shown in Figures 2 and 5. The
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

The results shown in the previous section demonstrate the
flexibility of curvature-domain shape processing. Although
specialized techniques based only on mean curvature exist
for some of the applications presented, our approach offers a
different perspective since the specific geometric operations
employed by our method are often quite different than the
ones already known. Investigating these similarities and differences for specific applications may lead to new insights
about shape processing and suggest avenues of future work
in this area.
An interesting connection of our approach to continuum
mechanics becomes apparent when comparing the energy
function of Equation 3 with the elastic thin-shell energy
ks I − I

E=
Ω

2
F

+ kb II − II

2
F

dudv,

(17)

where II denotes the second fundamental form, and ks and
kb are stiffness parameters that determine the stretching and
bending resistance of the material [TPBF87]. In our formulation we replace the bending term by principal curvature
differences, thus avoiding the directional component of the
second fundamental form. The key difference, however, is
that in Equation 17 the second fundamental form II is computed from a given, initial rest state, whereas we prescribe arbitrary target curvatures values. Effectively, minimizing the
objective function 3 pulls the surface to a “fictitious” rest
state defined by the target curvatures.
Rusinkiewicz observed [Rus04] that the curvature tensor
proposed by Cohen-Steiner and Morvan can yield a poor approximation of the true curvatures for small local neighborhoods at low-valence vertices. In our optimization this can
lead to local distortions that diminish the quality of the final result. In general, we observed that the performance degrades with poor input mesh quality, since the estimation of
curvatures and corresponding derivatives becomes numerically unstable. Our experiments indicate that these artifacts

248

M. Eigensatz, R. Sumner, M. Pauly / Curvature-Domain Shape Processing

can be reduced by applying appropriate local remeshing operations, e.g., [SG03], to improve the stability of the curvature estimation.
In terms of performance, the dominating factor is the nonlinear optimization used to reconstruct the final model from
the given target curvature values. The initial curvature estimation constitutes less then 5 percent of the total computation time, and the overhead for filtering/editing of curvatures
is negligible. While performance was not our main concern,
the optimization for e.g. the bunny model with 35,111 vertices, i.e. more than 100k unknowns, runs in less than 2.5
minutes on a 2.4 GHz Intel Core 2 Duo with 2GB of memory. Our current prototype implementation supports moderately sized meshes up to 60,000 vertices. Since memory
constraints restrict the use of larger meshes with our in-core
solver, we intend to improve the scalability of our system
by investigating alternative solvers, in particular multi-level
solvers that operate on a hierarchy of surface approximations
of different levels of detail.
The example of Figure 8 demonstrates how a standard image processing filter can be applied in curvature-domain to
implement an advanced geometry processing tool. We believe that our curvature-based processing metaphor offers a
versatile framework for exploring a variety of such filtering
methods. In the future we intend to follow this avenue and
evaluate different filters for their potential use in curvaturebased geometry processing.
7. Conclusion
We introduced curvature-domain shape processing, an optimization framework that allows arbitrary curvature values
to be prescribed on a given surface. We show how advanced
geometry processing techniques can be implemented as simple operations in the curvature domain. Through the use of
nonlinear optimization, we push the complexity of geometry processing tasks toward computation, thus reducing the
burden on the user, who can apply simple and intuitive modifications and filtering operations in the curvature domain to
edit and design geometric models. Our framework offers a
new perspective on shape optimization and provides a platform for further development in 3D geometry processing.

derivatives of the per-vertex principal curvatures with respect to the unknown vertex positions. We present the derivative formulas here. In the following equations, vi,c refers to
the component c of vertex i, c ∈ {x, y, z}.

Curvature Derivatives
The principle curvatures κ1 and κ2 are eigenvalues of the
curvature tensor K defined in Equation 4. Umbilic points
occur whenever the curvature tensor field is isotropic, indicating that the underlying surface locally approximates
a sphere or plane. At such points, the principal curvatures
are equal and their derivatives are undefined. However, this
problem falls into the class of composite nonsmooth optimization [WF86] since, although the derivatives are discontinuous at umbilic points, they can be approximated from
information available at the discontinuities. Following Kim
and colleagues [KCH02], we average the derivative computation at nonsmooth points to achieve a viable approximation. With these observations in place, we compute the curvature derivatives according to three cases.
Case 1: The most common case occurs when all three
eigenvalues are distinct. In this situation, we have
∂
λj = uj
∂vi,c

∂
K u j,
∂vi,c

(18)

where λ j and u j are the jth eigenvalue and normalized
eigenvector, respectively, of the curvature tensor K(vi ) and
λ1 < λ2 < λ3 [HUY95]. The tensor derivative is given below
in Equation 21.
Case 2: A cylindric point occurs when the two smallest
eigenvalues, in an absolute sense, are nearly equal and distinct from the remaining eigenvalue. The derivative of this
remaining eigenvalue, which corresponds to either κ1 or κ2 ,
can be computed as described above. The derivative of the
other principle curvature can be computed using the mean
curvature H = 12 (κ1 + κ2 ). Since H = 12 trace(K), we have
1
∂
H=
∂vi,c
2

∂
∂
∂
t11 +
t22 +
t33 ,
∂vi,c
∂vi,c
∂vi,c

(19)

Acknowledgments

where t j j , j ∈ 1 . . . 3, are the diagonal entries of K. The formula for their partial derivatives is presented in Equation 21.

We would like to thank Pierre Alliez, Mario Botsch, David
Cohen-Steiner, Joachim Giesen, Eitan Grinspun, Martin Kilian, Niloy Mitra, Helmut Pottmann, Filip Sadlo and Johannes Wallner for fruitful discussions about this research.

Case 3: When κ1 = κ2 , we have an umbilic point and the
derivative is not defined. However, a viable approximation to
the derivative at this point is given by averaging the derivatives that meet at the discontinuity [KCH02], which leads to

Appendix
Building the Jacobian matrix for the optimization problem
outlined in Section 4 requires the computation of partial

∂
∂
∂
κ1 =
κ2 ≈
H,
∂vi,c
∂vi,c
∂vi,c

(20)

where the rightmost term is defined in Equation 19.
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

249

M. Eigensatz, R. Sumner, M. Pauly / Curvature-Domain Shape Processing

As a side remark, the principle curvatures and their derivatives can also be estimated in terms of the mean and Gaussian curvatures. Under the assumption that the third eigenvalue is zero, this approach avoids eigenvalue decomposition and leads to simpler derivative expressions. However,
we found this method to be less accurate near umbilic points.

v3

n¯

e23

e31

v2

α1
v1

e12

Figure 9: Notation used in the derivation of derivatives.
Tensor Derivatives
Equation 18 requires the partial derivative of the curvature
tensor K with respect to the unknown vertices:
∂
Kˆ
1 ∂ ˆ
∂
K− 2
K=
|B|
∂vi,c
|B| ∂vi,c
|B| ∂vi,c
where Kˆ =

∑

(21)

The edge length derivatives from Equations 22 and 23 are

β(e) |e ∩ B| e¯ e¯ .

e∈B

∂
∂
|e12 ∩ B| = −Be12 e¯ 12
|e12 ∩ B| = Be12 e¯ 12
∂v1
∂v2
∂
∂
e12 2 = −2e12
e12 2 = 2e12 ,
∂v1
∂v2
(27)

The derivative of Kˆ is given by
∂
β(e) |e ∩ B|¯e e¯ +
∂vi,c

∂ ˆ
K=∑
∂vi,c
e∈B

The dihedral angle gradients from Equation 22 can be
computed according to the formulas presented by Bridson,
Marino, and Fedkiw [BMF03].

∂
|e ∩ B| e¯ e¯ +
∂vi,c
∂
β(e)|e ∩ B|
e¯ e¯
∂vi,c

β(e)

(22)

where Be12 is the fraction of the edge which is inside B.
Again because of the barycentric regions, Be12 is either 12
or 1.
Metric Derivatives

where
∂ ee
∂
e¯ e¯ =
∂vi,c
∂vi,c e
=

2

∂
ee
∂vi,c

(23)
e¯ e¯
1
−
e 2
e

2

The outer product derivative is given by

e e
ex ey
∂  x x
∂
e y e x e y ey
ee =
∂vi,c
∂vi,c
ez ex e z ey

∂
e 2.
∂vi,c


ex ez
ey ez  ,
ez ez

As discussed in Section 3.2, we have experimented with two
forms of metric regularization: isometric and conformal. The
isometric regularization measures the change in edge length,
and the appropriate derivatives are already given in Equation 27. The conformal regularization measures the change
in each triangle’s inner angles. The necessary derivatives are
∂
e × n¯
α1 = 12 2
∂v2
e12
∂
e31 × n¯
α1 =
∂v3
e31 2
∂
e × n¯ e × n¯
α1 = − 12 2 − 31 2
∂v1
e12
e31

(24)

which is straightforward to evaluate entrywise.
The remaining terms in Equations 21, 22, and 23 are more
easily interpreted geometrically as derivatives with respect
to vertex vi , rather than with respect to its individual components.

∂
∑ B f ∂vi A f
f ∈B

(29)
(30)

for face f123 and the inner angle α1 at v1 (Figure 9).
References

The area gradient for Equation 21 is given by
∂
|B| =
∂vi

(28)

(25)

where A f is the face area and B f is the fraction of A f which
is inside B. Since B is a union of barycentric regions, B f is
always equal to 13 , 23 , or 1. The derivative of the face area is

[ACSD∗ 03] A LLIEZ P., C OHEN -S TEINER D., D EVILLERS O., L ÉVY B., D ESBRUN M.: Anisotropic polygonal remeshing. ACM Transactions on Graphics 22, 3
(July 2003), 485–493.

(26)

[AKM∗ 06] ATTENE M., K ATZ S., M ORTARA M.,
PATANE G., S PAGNUOLO M., TAL A.: Mesh segmentation – a comparative study. In IEEE International Conference on Shape Modeling and Applications (2006).

where n¯ is the normalized face normal and e23 is the edge
vector opposite v1 (Figure 9).

[BMF03] B RIDSON R., M ARINO S., F EDKIW R.: Simulation of clothing with folds and wrinkles. In Symposium
on Computer Animation (2003), pp. 28–36.

1
∂
A f = (n¯ × e23 ),
∂v1 123 2

c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

250

M. Eigensatz, R. Sumner, M. Pauly / Curvature-Domain Shape Processing

[BPK∗ 07] B OTSCH M., PAULY M., KOBBELT L., A L LIEZ P., L EVY B.: Geometric modeling based on polygonal meshes. ACM SIGGRAPH Course Notes (2007).

rendering for art and visualization. ACM SIGGRAPH
Course Notes (2002).

[BS05] B OBENKO A. I., S CHRÖDER P.: Discrete willmore flow. In Symposium on Geometry Processing
(2005).

[MNT04] M ADSEN K., N IELSEN H., T INGLEFF O.:
Methods for Non-Linear Least Squares Problems. Tech.
rep., Informatics and Mathematical Modelling, Technical
University of Denmark, 2004.

[CP05] C AZALS F., P OUGET M.: Estimating differential quantities using polynomial fitting of osculating jets.
Comput. Aided Geom. Des. 22, 2 (2005), 121–146.

[Nie99] N IELSEN H.: Damping Parameter in Marquardt’s
Method. Tech. rep., Informatics and Mathematical Modelling, Technical University of Denmark, 1999.

[CSM03] C OHEN -S TEINER D., M ORVAN J.-M.: Restricted delaunay triangulations and normal cycle. In Symposium on Computational geometry (2003), pp. 312–321.

[OBS02] OTHAKE Y., B ELYAEV A., S EIDEL H.-P.:
Mesh smoothing by adaptive and anisotropic gaussian filter. Vision, Modeling, and Visualization (2002).

[DMSB99] D ESBRUN M., M EYER M., S CHRÖDER P.,
BARR A. H.: Implicit fairing of irregular meshes using diffusion and curvature flow. In Proceedings of SIGGRAPH (1999), pp. 317–324.

[PP93] P INKALL U., P OLTHIER K.: Computing discrete
minimal surfaces and their conjugates. Experimental
Mathematics 2, 1 (1993).

[EPT∗ 07] E CKSTEIN I., P ONS J.-P., T ONG Y., K UO C.C. J., D ESBRUN M.: Generalized surface flows for
mesh processing. In Symposium on Geometry Processing
(2007), pp. 183–192.
[FDCO03] F LEISHMAN S., D RORI I., C OHEN -O R D.:
Bilateral mesh denoising. ACM Trans. Graph. 22, 3
(2003), 950–953.
[GGRZ06] G RINSPUN E., G INGOLD Y., R EISMAN J.,
Z ORIN D.: Computing discrete shape operators on general meshes. Computer Graphics Forum 25, 3 (2006).
[GMW89] G ILL P. E., M URRAY W., W RIGHT M. H.:
Practical Optimization. Academic Press, London, 1989.
[HP04] H ILDEBRANDT K., P OLTHIER K.: Anisotropic
filtering of non-linear surface features. Computer Graphics Forum 23, 3 (2004).
[HUY95] H IRIART-U RRUTY J.-B., Y E D.: Sensitivity
analysis of all eigenvalues of a symmetric matrix. Numer.
Math. 70, 1 (1995), 45–72.
[KCH02] K IM M. S., C HOI D. H., H WANG Y.: Composite nonsmooth optimization using approximate generalized gradient vectors. J. Optim. Theory Appl. 112, 1
(2002), 145–165.
[KSNS07] K ALOGERAKIS
E.,
S IMARI
P.,
N OWROUZEZAHRAI D., S INGH K.: Robust statistical estimation of curvature on discretized surfaces. In
Symposium on Geometry Processing (2007), pp. 13–22.

[PS07] P USHKAR J., S EQUIN C.: Energy minimizers for
curvature-based surface functionals. Computer-Aided Design and Applications (2007).
[Rus04] RUSINKIEWICZ S.: Estimating curvatures and
their derivatives on triangle meshes. In Symposium on 3D
Data Processing, Visualization, and Transmission (2004).
[SdS01] S HEFFER A., DE S TURLER E.: Parameterization
of faceted surfaces for meshing using angle-based flattening. Engineering with Computers 17 (2001), 326–337.
[SG03] S URAZHSJY V., G OTSMAN C.: Explicit surface remeshing. In Symposium on Geometry Processing
(2003), pp. 20–30.
[SG04] S CHENK O., G ÄRTNER K.: Solving unsymmetric
sparse systems of linear equations with pardiso. Future
Gener. Comput. Syst. 20, 3 (2004), 475–487.
[Sha06] S HAMIR A.: Segmentation and shape extraction
of 3d boundary meshes. Eurographics State-of-the-Art
Report (2006).
[Tau95] TAUBIN G.: A signal processing approach to fair
surface design. In Proceedings of SIGGRAPH (1995),
pp. 351–358.
[TGRZ07] T OSUN E., G INGOLD Y. I., R EISMAN J.,
Z ORIN D.: Shape optimization using reflection lines. In
Symposium on Geometry Processing (2007).
[TM98] T OMASI C., M ANDUCHI R.: Bilateral filtering for gray and color images. In Proceedings of ICCV
(1998), p. 839.

[LSLCO05] L IPMAN Y., S ORKINE O., L EVIN D.,
C OHEN -O R D.: Linear rotation-invariant coordinates for
meshes. In Proceedings of ACM SIGGRAPH 2005 (2005),
ACM Press, pp. 479–487.

[TPBF87] T ERZOPOULOS D., P LATT J., BARR A.,
F LEISCHER K.: Elastically deformable models. In Proceedings of SIGGRAPH (1987), pp. 205–214.

[MDSB02] M EYER M., D ESBRUN M., S CHROEDER P.,
BARR A.: Discrete differential-geometry operators for
triangulated 2-manifolds. VisMath. (2002).

[WF86] W OMERSLEY R. S., F LETCHER R.: An algorithm for composite nonsmooth optimization problems. J.
Optim. Theory Appl. 48, 3 (1986), 493–523.

[MHIL02] M A K.-L., H ERTZMANN A., I NTERRANTE
V., L UM E. B.: Recent advances in non-photorealistic
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

