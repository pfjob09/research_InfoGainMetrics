Eurographics/ IEEE-VGTC Symposium on Visualization 2008
A. Vilanova, A. Telea, G. Scheuermann, and T. Möller
(Guest Editors)

Volume 27 (2008), Number 3

Visual Inspection of Multivariate Graphs
A. Johannes Pretorius and Jarke J. van Wijk
Technische Universiteit Eindhoven, The Netherlands

Abstract
Most graph visualization techniques focus on the structure of graphs and do not offer support for dealing with
node attributes and edge labels. To enable users to detect relations and patterns in terms of data associated with
nodes and edges, we present a technique where this data plays a more central role. Nodes and edges are clustered
based on associated data. Via direct manipulation users can interactively inspect and query the graph. Questions
that can be answered include, “which edge types are activated by specific node attributes?” and, “how and from
where can I reach specific types of nodes?” To validate our approach we contrast it with current practice. We also
provide several examples where our method was used to study transition graphs that model real-world systems.
Categories and Subject Descriptors (according to ACM CCS): H.5.2 [Information Interfaces and Presentation]:
User Interfaces; I.3.8 [Computer Graphics]: Applications; I.6.4 [Simulation and Modeling]: Model Validation and
Analysis

1. Introduction
Analysts in many domains study graphs. In system analysis,
state transition graphs are analyzed to understand system behavior [Arn94]. Usually the semantics of graphs are clear.
For instance, nodes in transition graphs depict system states
and directed edges depict transitions between these. Even so,
graph analysis is not easy: graphs often have large numbers
of nodes and edges, giving rise to complex structure.
This is one problem that graph visualization techniques
try to solve. Usually an edge-centric approach is taken and
many methods minimize edge crossings or position nodes in
close proximity when they share multiple edges [HMM00].
Nodes and edges are usually considered as “flat” entities that
only define the structure of the graph. However, nodes and
edges often have additional associated data. For instance,
nodes in a transition graph have properties that represent different aspects of the system states they model. Also, edges
are labeled to distinguish different actions that cause transitions to occur. Analysts attach precise meaning to data associated with nodes and edges, and questions about graphs are
often formulated in terms of this knowledge.
In this article, we introduce a technique that enables users
to visually inspect graphs based on their knowledge of data
associated with nodes and edges. We define our data as a
graph G = (V, E) where:
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.
Published by Blackwell Publishing, 9600 Garsington Road, Oxford OX4 2DQ, UK and
350 Main Street, Malden, MA 02148, USA.

• G has associated discrete sets D1 , ..., Dn and L;
• V ⊆ D1 × ... × Dn is the set of nodes in G;
• E ⊆ V × L ×V is the set of directed edges in G.
A node v ∈ V is a tuple v = (v1 , ..., vn) for vi ∈ Di . A directed
edge e ∈ E has the form e = (v, l, v′ ) for v, v′ ∈ V , l ∈ L. The
Di are node attribute domains and L is the set of edge labels.
To learn how users think about multivariate graphs, results
of several interviews are discussed in Section 2. In Section 3
we consider related work before we introduce our approach
in Section 4. In Section 5 we discuss how we support interaction and contrast this with users’ current practice. We further validate our method with examples of its application to
real-world data sets in Section 6. We conclude in Section 7.
2. User view
We claim that users often seek to understand graphs in terms
of node attributes and edge labels. To validate this we individually interviewed five domain experts; system analysts
who regularly analyze state transition graphs. We were interested in three things: how they reason about their data;
how important questions related to node attributes and edge
labels are; and how they currently approach such questions.
Although our study was conducted in the domain of system
analysis, we argue that our results are relevant and applicable
to the wider context of multivariate graph analysis.

968

A.J. Pretorius & J.J. van Wijk / Visual Inspection of Multivariate Graphs
Lock 1
Left

Robot 1 Right

Lock 2
Prep.
stage

Tray

Wafer
stage

Proc.
stage

Lock 3
Left

Robot 2 Right

Lock 4

Question 1. Which outgoing edges are possible from nodes
where robot 1’s right arm is empty and both the preparation
and processing stage contain prepared wafers? Which target
nodes do these edges lead to?
Question 2. Which nodes can be reached via edges labeled
Process from nodes where robot 1’s right arm is not empty
and the preparation and processing stage both contain prepared wafers?

Figure 1: Wafer stepper.

Question 3. Which source and target nodes share edges
with the label Prepare? For the source nodes, what different
combinations of the attributes prep_stage, proc_stage and
robot_1_rgt are possible? Do all nodes where the attributes
take these values have outgoing edges labeled Prepare?

Analysts brought their own data to the interview. We asked
them to explain what these graphs model, what they find interesting about the data and what else they would like to
learn about it. In all cases, node attributes and edge labels
were central in discussions that followed. For example, one
analyst was studying the behavior of a traffic regulation system consisting of a number of traffic lights at a complex
street intersection. Every light can be in one of three phases
(red, amber or green), all modeled by node attributes. There
are also messages that cause phase changes, modeled by labeled edges. The analyst was interested to see whether certain dangerous scenarios are possible. For instance, certain
lights should never be green at the same time. When this occurs it is important to identify the responsible messages.

Feedback was unanimous: questions such as the above are
important for understanding system behavior. First, being
able to answer these and similar questions would lead to a
better intuition about the data. Second, specific requirements
can be checked this way. Furthermore, answers to more complicated questions could be derived if it were possible to answer many such questions quickly and effectively. All analysts, like the one studying the traffic regulation system, had
similar questions about their own data.

2.1. Reasoning

2.2. Questions
We also introduced the analysts to a graph that describes a
generalization of the behavior of an industrial wafer stepper [HNV06]. This system produces integrated circuits from
silicon wafers (see Figure 1). On the left is a tray that can
hold six wafers. Unprocessed wafers enter the system here
and then move to one of four locks. Next, one of two robots
takes a wafer from a lock using its left arm, rotates 180◦ and
places the wafer on the wafer stage. Here it is first prepared
on the preparation stage and then processed on the processing stage. To exit, wafers follow a similar path in reverse.
The transition graph G = (V, E) that describes the wafer
stepper consists of 55,043 nodes (states) and 289,443 edges
(transitions). It has 15 node attributes, including:
• prep_stage: contents of the preparation stage;
• proc_stage: contents of the processing stage;
• robot_1_rgt: contents of the right arm of robot 1.
The graph also has a set L of 26 edge labels, including:
• Prepare: prepare the wafer on the preparation stage;
• Process: process the wafer on the processing stage.
To get our users’ opinions on questions related to multivariate graphs, we presented them with three questions about
the wafer stepper. They did not have to answer these. Instead,
we wanted to know how relevant the questions were.

2.3. Strategy
To learn how analysts would approach the above questions,
we asked them to propose strategies to find the answers. Except for one analyst (who would convert to a different but semantically equivalent formal representation, not guaranteed
to be found) all others proposed to query the graph using a
combination of set theory and logic. That is, find those subsets of nodes and edges for which certain predicates hold.
This implies formalizing the three questions as follows.
Question 1. Let LQ1 and VQ1 be those edges and target nodes
we are interested in. Then
LQ1 := {l ∈ L|∃v ∈ V1 .∃v′ ∈ V.(v, l, v′) ∈ E}
and
VQ1 := {v′ ∈ V |∃v ∈ V1 .∃l ∈ L.(v, l, v′) ∈ E}
where
V1 := {v ∈ V |v.prep_stage = prepared ∧
v.proc_stage = prepared ∧
v.robot_1_rgt = empty}.
Question 2. Let VQ2 be those target nodes we are interested
in. Then
VQ2 := {v′ ∈ V |∃v ∈ V2 .(v, Process, v′ ) ∈ E}
where
V2 := {v ∈ V |v.prep_stage = prepared ∧
v.proc_stage = prepared ∧
v.robot_1_rgt = empty}.
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

A.J. Pretorius & J.J. van Wijk / Visual Inspection of Multivariate Graphs

VQ′ 3

969

Question 3. Let VQ3 and
be those source and target
nodes we are interested in. Then

between clusters are encoded with size. Since users know
what attributes mean, results can be easily interpreted.

VQ3 := {v ∈ V |∃v′ ∈ V.(v, Prepare, v′ ) ∈ E}

Shneiderman and Aris [SA06] position nodes in nonoverlapping regions defined in terms of node attributes. Inside a region, nodes are positioned by existing techniques
such as temporal algorithms. To reduce edge clutter, special
attention is paid to filtering. For example, users can specify that only edges between certain regions be shown. Dynamic query sliders are also provided for specifying a neighborhood around user selected nodes for which outgoing or
incoming edges are shown. In this way, relations between
node attributes and edges can be analyzed. However, different edge types are not distinguished.

and
VQ′ 3 := {v′ ∈ V |∃v ∈ V.(v, Prepare, v′ ) ∈ E}.
Now, let DQ3 be the different combinations of values assumed by prep_stage, proc_stage and robot_1_rgt. Then
DQ3 := {(x, y, z)|∃v ∈ VQ3 .
x = v.prep_stage ∧
y = v.proc_stage ∧
z = v.robot_1_rgt}.
To answer the last part of the query, we have to determine if
the following equality holds.
VQ3 = VQ′′3
where
VQ′′3 := {v ∈ V |∃(x, y, z) ∈ DQ3 .
x = v.prep_stage ∧
y = v.proc_stage ∧
z = v.robot_1_rgt}.
From Sections 2.1–2.3, we conclude that there is a need
for graph analysis techniques where node attributes and edge
labels play a central role. To our surprise analysts we interviewed did not know of any tools, apart from model checkers [Fok00], that enable this type of analysis. We find this
remarkable, especially considering the overwhelming agreement on the relevance of the questions introduced in Section 2.2. For model checking, questions have to meticulously formalized, like the queries above. This requires a
significant investment in time and effort and all users suggested alternative approaches. These included custom scripts
or even adapting the formal specifications from which their
data were generated. This implies hard-coding queries plus
additional debugging, which is not an efficient approach.
3. Related work
Our goal is to develop a visualization technique that enables
users to inspect graphs based on data associated with nodes
and edges. We want to offer an alternative to the arduous and
error prone practice of formulating formal queries.
Some techniques have recently been developed to visualize graphs as a function of multivariate data associated with
nodes. With Wattenberg’s technique [Wat06] the user can
generate a “summary graph” by selecting a subset of node
attributes. Accordingly, nodes are projected to a 2D grid in a
fashion analogous to a scatterplot. Edges are drawn to span
from source to target nodes. The number of nodes clustered
on a particular coordinate and the number of edges that span
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

Pretorius and Van Wijk [PW06] developed a technique
based on hierarchical clustering. Nodes are clustered by considering a user-defined subset of node attributes. Clusters are
positioned linearly, the clustering hierarchy is shown as a
node link diagram and bundled edges are represented as an
arc diagram. The clustering tree enables the user to interpret
clusters in terms of the node attributes used for clustering.
By considering the presence or absence of patterns in the arc
diagram the user can identify correlations between values
assumed by node attributes and edges. The user can inspect
labels of edges bundled in individual arcs, but no further support for edge labels is provided. The number of nodes in every cluster is shown as a series of nested bar charts.
Archambault et al. [AMA08] give edges a more prominent role by emphasizing the topology of an abstract graph
resulting from attribute-based clustering. A topological layout algorithm is used to present the resulting clusters of
nodes. Selection and pattern matching on node attributes enables the user to interactively coarsen or refine clusters in a
way that leaves topological features intact although edge labels do not play a prominent role. One disadvantage of using
topological layout algorithms is that the positions of clusters
shift as the users adjust the hierarchy.
All above techniques enable users to derive abstractions
of graphs by considering subsets of node attributes. Users
can answer questions formulated in terms of node attributes,
but questions with references to edge labels, such as those in
Section 2.2, are not supported. In general, optimizing edge
label placement is intractable [KT96]. However, in the graph
drawing community, approximation methods are often used
to optimize label positioning [WW98]. Other approaches include substituting line segments that represent edges with
text labels that span from source to target nodes [WMP∗ 05].
Still, optimal placement of labels in the limited drawing
space does not address the questions mentioned above.
4. Approach
To answer questions related to node attributes and edge labels, the latter also have to become first class citizens of the
visual representation. As Figure 2(a) shows, we achieve this

970

A.J. Pretorius & J.J. van Wijk / Visual Inspection of Multivariate Graphs

(a)

(b)

(c)

Figure 2: Approach.

by showing a list of edge labels at the center of our visualization. Every unique edge label is represented by a rectangular
region. We partition the set of edges by letting every edge
pass through that region that represents its edge label.
We are dealing with directed edges (see Section 1) which
impose an ordering on the two nodes they connect. For an
edge (v, l, v′ ) ∈ E, v is called the source and v′ the target.
We follow the convention of visualizing ordinal data from
left to right [Tuf01]: all source nodes are represented by a
region at the left of the visualization while all target nodes
are represented by a region at the right (see Figure 2(a)).
This implies that the collection of nodes is represented twice,
once in its capacity as source and once as target.
The effectiveness of the techniques discussed in Section 3
results from being able to consider clusters of nodes that
share properties expressed in terms of a few attributes. We
take a similar approach by enabling the user to select a subset of node attributes. The entire set of nodes is partitioned
based on the different values assumed for the first attribute
in this selection (Figure 2(b)). Every one of the resulting
clusters now contains a disjoint subset of the original set of
nodes. Next, each of these clusters is sub-partitioned based
on the second variable (Figure 2(c)), resulting in another
level in the hierarchy. By recursive partitioning, a new layer
of clusters is computed for every attribute selected by the
user. Every cluster, apart from the root, has a child-of relationship with one higher level cluster.
A line that connects a leaf cluster on the left with an edge

label X in the center implies that the cluster contains at least
one (source) node with an outgoing edge of type X. Similarly, a line that connects edge label X with a leaf cluster
on the right means that it contains at least one (target) node
with an incoming edge of type X. In this way, the visualization intuitively reads from left to right. This, combined
with real time interaction and visual feedback, supports user
queries in a natural way, as we show in following sections.
In our final visualization (Figure 3), we do not show the
root cluster since it simply represents the set of all nodes.
In early versions of our prototype we represented the clustering hierarchy with a node link diagram. Since we already
represent edges with lines, we have replaced this with an icicle plot. We use subtle cushioning to differentiate regions
better [War06]. The different attribute values assumed in a
particular level are encoded with labels and distinct colors to
enable users to identify repeated patterns (Figure 3(a)).
We encode the number of nodes in every cluster and the
number of edges with a particular edge label with the length
of the colored bar inside the region (Figure 3(b)). A logarithmic scale can be used to amplify differences for small quantities. This improves on earlier work by combining hierarchical and quantitative data in a single representation [PW06].
It also avoids issues encountered when encoding quantitative
information with region size.
5. Interaction
Interaction plays an important role in our technique. As we
describe below, we enable the user to interactively inspect
and query multivariate graphs based on the data associated
with nodes and edges. We illustrate this by showing how the
questions introduced in Section 2.2 can be answered with
our technique in a straightforward fashion. In the discussion
that follows, consider how the user is able to rapidly find
the answers with no more than three clicks and contrast this
with the effort needed to formulate and evaluate the formal
queries discussed in Section 2.3.
When the user selects a source cluster, the cluster and all
nodes contained in it are selected. The same holds for all outgoing edges and their edge labels, as well as target nodes and
their parent clusters. Selected clusters and edge labels are
highlighted in red. Note that for a target cluster selected in
this way, it is possible that only some of the contained nodes
are selected. The same holds for edge labels (representing
collections of edges). Knowing this may be important when
interpreting the results and we show the fraction of selected
edges and nodes with a red bar overlaid on a lighter bar that
encodes the total (see Figure 3(c)). When an edge label or
target cluster is selected, the same reasoning is applied. We
now know enough to answer the first question posed to users.
Question 1. Cluster on robot_1_rgt, prep_stage and
proc_stage. Select the source cluster containing all nodes
where robot_1_rgt = empty, prep_stage = prepared and
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

A.J. Pretorius & J.J. van Wijk / Visual Inspection of Multivariate Graphs

971

Figure 3: Multivariate graph visualization.

proc_stage = prepared (Figure 4(a)). Consequently, all labels of outgoing edges are highlighted in the center of the
visualization (Figure 4(b)). Also, all target nodes are con-

tained in the highlighted target clusters toward the right (Figure 4(c)). For the selected edge labels, note the small portion
of individual edges that have been selected (Figure 4(d)).
Users can refine their selection by selecting a cluster or
edge that is already selected a second time. This results in
any part of the current selection that is not reachable from
this last selection to be deselected. Put another way, only
the intersection of the original selection and the selection
that would have resulted from the last mouse click remains
selected. Knowing this, we can answer the second and third
questions put to our analysts.

Figure 4: Question 1.

c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

Question 2. Keep the previous clustering and select all clusters where robot_1_rgt has the values fresh or processed and
prep_stage and proc_stage assume the value prepared (Figure 5(a)(1)). Now select the edge label Process to refine the
selection (Figure 5(b)(1)). Consequently, all target clusters
that can be reached from the initial selection via edges labeled with Process are highlighted toward the right (Fig-

972

A.J. Pretorius & J.J. van Wijk / Visual Inspection of Multivariate Graphs

(a)

(b)

Figure 5: Question 2.

ure 5(b)(2)). Note that the source and target clusters differ
only in terms of the value assumed for proc_stage. In fact,
as we would expect from the description of the wafer stepper, the action Process changes the status of the wafer on the
processing stage from prepared to processed.
Question 3. Keep the previous clustering and select the
edge label Prepare in the center of the visualization (Figure 6(a)). All clusters containing source nodes that have outgoing edges of this type are highlighted toward the left (Figure 6(b)). Also, all clusters containing target nodes that have
incoming edges of this type are highlighted toward the right
(Figure 6(c)). To answer the second part of the question, observe that prep_stage always assumes the value fresh while
robot_1_rgt and proc_stage can assume any values for all
highlighted clusters at the left. Finally, note that all horizontal bars of the highlighted clusters toward the left are
completely filled with red. We conclude that all states where
prep_stage contains a fresh wafer have outgoing Prepare actions, whatever the contents of robot_1_rgt and proc_stage.
This is an important property of the wafer stepper system.
We offer users two additional selection modes to add or
subtract from the current selection. In add-mode all clusters
or edge labels clicked on are added to the selection. For instance, in order to select the two source clusters to answer

Figure 6: Question 3.

question 2 above, it is necessary to temporarily switch to
add-mode. Similarly, in subtract-mode anything in the current selection is removed when it is clicked. To guide the
user, we provide previews of those clusters or edge labels
reachable from the current mouse position. This is highlighted in blue (Figure 3(d)). As outlined above, the current
selection is shown in red (Figure 3(e)). The intersection of
the preview and current selection is shown in purple (Figure 3(f)). This enables the user to answer questions such as,
“which outgoing edge types are possible from my current
position that are also possible from my previous selection?”
As we show in the next section, our technique has been
received enthusiastically. When we showed an initial prototype to users, they were pleased with the ease that they
could answer many questions about their data. These include
questions such as, “which edge types are activated by specific node attributes?” and, “how and from where are specific
edge types possible?” However, once these were answered
they started asking questions like, “from which clusters four
steps back is my current selection reachable?” and, “where
can I go to from here in six steps?”
To answer such questions we extended our prototype with
a context view. The “current” view, discussed above, is
shown with a white background (Figure 3(g)). Users can interactively specify how many steps to show before and after
the current view (Figure 3(h) and (i)). For every step, we
repeat the edge labels and leaf clusters. The two views are
linked: when users make selections in the main view, the
context view shows how this selection can be reached from
n steps back and which clusters can be reached m steps forward. The context view can also be used to refine a selection.
To support “walking through” the graph, users can transfer
the selection on the left or right of the main view to the opposite side after which selections in both views are updated.
6. User observation
To follow up on the interviews with domain experts, we
asked them to answer the questions we had posed to them
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

A.J. Pretorius & J.J. van Wijk / Visual Inspection of Multivariate Graphs

973

using our tool (Section 2.2). Following steps similar to those
outlined above, they were all able to find answers to the
questions. Next, we invited them to inspect their own data
with our prototype. We organized two sessions spread over
two weeks with every analyst. We conducted semi-structured
interviews where the tool was first introduced and its main
features highlighted. Analysts were then asked to talk aloud
as they interacted with their data. After the sessions they all
indicated that they had learned something new about their
data. Also, they were all interested in using our tool again.
Below, we report on three of these observation sessions.

attribute values, which I thought were impossible, do occur,
really got me thinking.”

6.1. Traffic regulator

In the game there are two opponents, which we call A and
B. The analyst had expected that the two opponents could
only win from specific positions on the board. A win is expressed by an edge labeled Win. By clustering on the attributes that encode the positions of A and B and selecting
Win, he immediate saw that he was wrong: both opponents
could win in any position on the board. He explained that he
had just found that, contrary to what he had expected, there
exists “no invariant of the type” of the opponent that can win
in any position. This analyst was also keen on using the context view to traverse the graph. That is, he selected a specific
cluster of states and then looked forward to identify where
the first Win action occurs. He then analyzed the intermediate steps to identify game strategies.

In Section 2.1 we mentioned that one analyst was studying
a transition graph than models a traffic regulation system.
This graph contains 40,826 nodes (states) described by 41
attributes and 221,618 edges (transitions) with 38 labels. Using our tool, he was able to verify that the dangerous scenarios mentioned before cannot occur.
Another task he set himself was to identify which edge
labels have an influence on which node attributes. It was assumed that every edge type had an influence on a single light.
However, by first clustering on attributes that describe different lights’ phases and then sweeping the mouse over the
edge labels in the visualization, he quickly discovered that
there are some edge types that result in more than one light
changing its phase. By scrutinizing the formal specification
of the system the analyst confirmed that such “conflicts” result from the way the behavior is modeled. The analyst was
pleased with the ease that he could identify these properties.
6.2. Communication protocol
Another analyst was studying a communication protocol for
message passing over an unreliable channel, developed for
consumer electronics. The corresponding transition graph
has 10,548 nodes, 12,168 edges, 40 node attributes and 119
action labels. The analyst had not created the model himself.
In fact, he was trying to familiarize himself with the protocol
by studying its behavior.
The analyst had read all available documentation but still
felt he did not fully grasp the very complex behavior of this
system. First, he wanted to confirm that specific edge types
are possible from nodes with specific attribute values. By
clustering on these attributes and selecting the configurations
he was interested in, it was straightforward to check that certain edge labels did not light up. He also wanted to check
which values are assumed for specific node attributes in target nodes that can be reached via specific types of edges.
Again, by clustering and selection of edge labels this was
simple. The analyst proceeded to formulate and prove or
disprove many hypotheses quickly and efficiently. He found
that this gave him a much better intuition about the protocol. In his own words, “seeing that certain combinations of
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

6.3. Understanding games
Games are often studied as examples of how a set of simple
rules give rise to very complex systems. One of our analysts had generated the behavior of a simple board game as
a transition graph. This graph consists of 76,002 nodes with
8 attributes and 95,335 edges with 168 labels. Using his current tools, it was difficult to learn behavioral properties about
states (nodes) with specific attribute configurations.

6.4. Remarks
Apart from being non-trivial, the graphs discussed in this article are also large, all containing tens of thousands of nodes
and tens to hundreds of thousands of edges. From this we
deduce that our technique scales well. We attribute this to
the ability to take different perspectives on the data. Different subsets of attributes generate different abstract, and
much simplified, visual representations of the original graph.
These can be interpreted in terms of knowledge the user already has: the meaning of the data associated with nodes and
edges. Our user observations show that the ability to rapidly
query these representations enables users to effectively and
efficiently analyze multivariate graphs. The analysts we interviewed were also keen to use the technique to explain aspects of their data to non-experts. We did not intend to design
a communication aid, but we find this very encouraging.
Clustering is only possible when attributes and edge labels have discrete domains. These domains usually have
a relatively small cardinality (typically 2 ≤ |Di | ≤ 30 and
2 ≤ |L| ≤ 120). For many real-world data sets, and transition graphs in particular, this assumption is valid. However,
cases may arise where domains are larger or continuous. To
handle these, we propose discretization algorithms for partitioning domains into a number of discrete categories. Related to this, we note that our approach of listing all edge
labels down the center of the visualization has worked well
for most data sets. However, the 168 edge labels discussed in

974

A.J. Pretorius & J.J. van Wijk / Visual Inspection of Multivariate Graphs

Section 6.3 nearly proved too many. To solve this limitation,
we propose enabling the user to group edge labels. Similar
to our approach with node attributes, they can then focus on
only those labels relevant to their current inquiry. This will
further reduce the complexity of the data being investigated.
Analysts were able to use our approach to answer predefined questions before the end of the first session. We noted
that they arrived at the second session with questions devised
on their own initiative and then spontaneously started formulating and answering queries as they interacted with their
data. As suggested by results of Section 2 these questions
were all phrased in terms of node attributes and edge labels.
Apart from answering specific questions, users also used the
tool for explorative analysis by, for example, sweeping over
the edge labels to identify interesting patterns in terms of
highlighted source and target clusters. Users found the tool
easy to use, although understanding the bars that encode size
information initially required some training.
As users got more familiar with the approach they all developed an interest for studying paths that lead to or from
specific node clusters. They often selected a cluster to “look
into the future” (or past) to identify clusters that can be
reached and sequences of edge labels leading to these. This
offers opportunities for future improvements. For example,
it is currently not possible to analyze the influence of picking
one of two edges leaving a particular cluster because the two
paths are both highlighted in red, making it impossible to
disentangle them. A solution for comparing different paths,
although not trivial, would be a very valuable addition to our
technique. Related to this, the ability to accurately distinguishing paths that intersect at various steps would greatly
benefit users.
7. Conclusion
We have presented a technique that enables users to visually
inspect graphs based on their knowledge of data associated
with nodes and edges. To understand the role that node attributes and edge labels play, we conducted interviews with
five domain experts. We used the insights from this study to
design a solution where node attributes and edge labels play
a more central role. Nodes and edges are clustered by considering their associated data. By interacting with the resulting
visualization, the user can inspect and query the graph.
To validate our approach we have contrasted it with current practice. We have shown that it can be used to answer a
number of relevant questions effortlessly. Moreover, several
examples of the application of our technique to real-world
data sets have been provided. By focusing on state transition
graphs, we have presented our technique in the context of
system analysis. Transition graphs are known to be difficult
to study. Feedback from users suggests that our approach
may be useful for analyzing multivariate graphs in general.
To investigate this, we aim to apply our technique to other
data sets such as social networks.

Acknowledgments
We gratefully acknowledge our users for their valuable contribution to this study. This research was funded by the
Netherlands Organization for Scientific Research (NWO)
under grant 612.065.410.
References
[AMA08] A RCHAMBAULT D., M UNZNER T., AUBER
D.: GrouseFlocks: steerable exploration of graph hierarchy space. IEEE Transactions on Visualization and Computer Graphics (2008).
[Arn94] A RNOLD A.: Finite Transition Systems. Prentice
Hall, 1994.
[Fok00] F OKKINK W.: Introduction to Process Algebra.
Springer, 2000.
[HMM00] H ERMAN I., M ELANÇON G., M ARSHALL M.:
Graph visualization and navigation in information visualization: A survey. IEEE Transactions on Visualization and
Computer Graphics 6, 1 (2000), 24–43.
[HNV06] H ENDRIKS M., N IEUWELAAR , VAN DEN B.,
VAANDRAGER F.: Model checker aided design of a controller for a wafer scanner. International Journal on Software Tools for Technology Transfer 8, 6 (2006), 633–647.
[KT96] K AKAULIS K. G., T OLLIS I. G.: On the edge label placement problem. In Proceedings of the symposium
on graph drawing (1996), vol. 1190 of LNCS, Springer,
pp. 241–256.
[PW06] P RETORIUS A. J., W IJK , VAN J. J.: Visual analysis of multivariate state transition graphs. IEEE Transactions on Visualization and Computer Graphics 12, 5
(2006), 685–692.
[SA06] S HNEIDERMAN B., A RIS A.: Network visualization by semantic substrates. IEEE Transactions on Visualization and Computer Graphics 12, 5 (2006), 733–740.
[Tuf01] T UFTE E. R.: The Visual Display of Quantitative
Information. Graphics Press, 2001.
[War06] WARE C.: Designing with a 2 21 D attitude. Information Design Journal 10, 3 (2006), 255–262.
[Wat06] WATTENBERG M.: Visual exploration of multivariate graphs. In Proceedings of the SIGCHI Conference on Human Factors in Computing Systems (2006),
pp. 811–819.
[WMP∗ 05] W ONG P. C., M ACKEY P., P ERRINE K., E A GAN J., F OOTE H., T HOMAS J.: Dynamic visualization
of graphs with extended labels. In Proceedings of the
IEEE Symposium on Information Visualization (2005),
pp. 73–80.
[WW98] WAGNER F., W OLFF A.: A combinatorial
framework for map labeling. In Proceedings of the symposium on graph drawing (1998), vol. 1547 of LNCS,
Springer, pp. 316–331.

c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

