DOI: 10.1111/j.1467-8659.2011.02021.x
Eurographics Symposium on Geometry Processing 2011
Mario Botsch and Scott Schaefer
(Guest Editors)

Volume 30 (2011), Number 5

Large-Scale Integer Linear Programming
for Orientation Preserving 3D Shape Matching
Thomas Windheuser1 , Ulrich Schlickwei1 , Frank R. Schimdt2 , Daniel Cremers1
1

Technische Universität München, Germany, 2 University of Western Ontario, Canada

Abstract
We study an algorithmic framework for computing an elastic orientation-preserving matching of non-rigid 3D
shapes. We outline an Integer Linear Programming formulation whose relaxed version can be minimized globally
in polynomial time. Because of the high number of optimization variables, the key algorithmic challenge lies in
efficiently solving the linear program. We present a performance analysis of several Linear Programming algorithms on our problem. Furthermore, we introduce a multiresolution strategy which allows the matching of higher
resolution models.
Categories and Subject Descriptors (according to ACM CCS): I.3.5 [Computer Graphics]: Computational Geometry
and Object Modeling—

1. Introduction
The registration of three-dimensional shapes is a fundamental problem in geometry processing. The abundance of such
shapes – obtained from Laser scanners, image-based reconstruction methods or RGB-D cameras – gives rise to an increasing demand for efficient and unsupervised methods to
compute optimal matchings – in order to relate shapes and
their parts, in order to fuse different partial scans of a single
3D object, in order to transfer semantics from one shape to
another, in order to quantify similarity of shapes and in order
to automatically interpolate two different shapes.
In the last two decades, 3D shape matching has received
considerable attention. The most classical problem studied
in this context is the alignment of rigid shapes where one
seeks for the Euclidean motion which moves one shape
as close as possible towards the other one in the sense of
the Hausdorff distance. Typically, this problem is handled
by variants of the Iterative Closest Point (ICP) algorithm
[BM92, GMGP05].
In non-rigid shape matching, the goal is to detect meaningful correspondences between two different poses of a
shape or even between two different objects (as in Figure 1).
Usually, this is formulated as an optimization problem over
the manifold of surface mappings or diffeomorphisms subject to appropriate constraints. Because in general, such a
c 2011 The Author(s)
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd. Published by Blackwell Publishing, 9600 Garsington Road, Oxford OX4 2DQ,
UK and 350 Main Street, Malden, MA 02148, USA.

Figure 1: We compute orientation-preserving matchings
of three-dimensional shapes by minimizing the elastic thinshell energy required to deform one shape into the other one.
The ILP formulation leads to solutions which are independent of the initialization. A multiresolution approach allows
for matchings at reasonably high resolution, visualized here
by Voronoi cells in successive zoom-ins.

1472

T. Windheuser, U. Schlickewei, F.R. Schimdt, D. Cremers / Large-Scale Integer Linear Programming for 3D Shape Matching

manifold of surface mappings is infinite-dimensional, nonrigid shape matching is a much more challenging problem than rigid shape matching which deals with the sixdimensional group of Euclidean motions.
By assuming that the deformation preserves geodesic
distances, which is approximately true for pose changes,
the search space for non-rigid matchings can be made
much smaller [OMMG10]. Without this restriction, Mémoli and Sapiro [MS05] proposed the use of the Gromov–
Hausdorff framework. The paradigm is to search for the correspondence with the least distortion of geodesic distances.
An efficient algorithm for computing such a minimumdistortion correspondence was proposed by Bronstein et
al. [BBK06]. More recently, the geodesic distance in the
Gromov–Hausdorff framework was replaced by the diffusion distance [BBK∗ 10].
While in the minimum-distortion approach only stretching and strain are penalized, other more physics-oriented
approaches also take into account bending – thereby allowing for example to energetically distinguish a straight finger from a bent finger. The resulting deformation energy is
a thin-shell energy [GHDS03]. Such an approach has been
applied to the matching of disk-type surfaces by Litke et
al. [LDRS05]. Wirth et al. [WBRS09] use a similar idea,
applying continuum mechanics to volumetric shapes.
Due to its mathematical beauty and simplicity, conformal geometry has been studied excessively in geometry processing. The works [WGH∗ 05, ZZW∗ 08, LWT∗ 10] propose
shape matching approaches which exploit this theory.
Inspired by the work of Lafon [Laf04] on data analysis
based on diffusion distances, recently the eigenfunctions of
the Laplace–Beltrami operator have gained a lot of attention
in shape analyis [Lév06]. Shape matching based on these
techniques has been proposed by Mateus et al. [MHK∗ 08]
and by Jain et al. [JZvK07].
All methods for non-rigid shape registration mentioned so
far have in common that they use local optimization methods
for a non-convex optimization problem. As a result, the detected correspondences depend heavily on the initialization
(possibly improved with a coarse-to-fine strategy) and they
could in principle be arbitrarily bad.
Recently, two methods have been proposed which incorporate methods from global optimization. Zeng et al.
[ZWW∗ 10] propose a graph matching formulation with
third order energy terms. The resulting energy is approximately minimized using the dual decomposition relaxation
scheme proposed by Torresani et al. [TKR08]. This approach
has the drawback that all triples of possible assignments are
taken into account. This results in a very high complexity
and allows only the matching of a few feature points which
is post-processed with a local method.
On the other hand, in their remarkable paper [LD09], Lipman and Daubechies introduce a surface distance for disk-

type surfaces which builds on the framework of Optimal
Mass Transport. The transportation cost is constructed using
conformal geometry. The authors are able to prove that their
similarity measure satisfies all axioms of a distance function. The computation of this distance comes down to solving a linear assignment problem which can be done globally
optimally in polynomial time. However, no spatial regularization is included in this framework so that the resulting
assignments cannot be used as reliable shape matchings.
In this paper, we study a framework for non-rigid threedimensional shape matching which was recently introduced
in [WSSC11]. Rather than matching points to points as in all
previous works, this approach brings small surface patches
in correspondence. This allows to compute matchings which
are geometrically consistent in the sense that a discrete continuity property is satisfied and orientations are preserved.
This property appears indispensable for a meaningful comparison of the boundary surfaces of three-dimensional objects.
Computationally, our approach is formulated as an Integer
Linear Program (ILP) whose relaxed version can be solved
globally optimally in polynomial time. Since the number of
variables grows quadratically with the number of vertices of
the shapes, algorithmic efficiency is an important issue. For
this reason, we investigate the performance of several Linear
Programming (LP) algorithms on our problem. Moreover,
we propose a multiscale framework in order to achieve shape
matchings in higher resolutions.
As for the energy model, we follow the physical approach
as described above, using an elastic, non-linear thin-shell energy. However, the proposed framework allows for any energy of first order consisting of a data term of order zero and
a first-order regularizer involving the Jacobian of the surface
map. We show that the performance of our algorithm can be
boosted with the incorporation of a feature descriptor.
Compared to [WSSC11], our main contributions are summarized as follows:
• We discuss theoretical aspects of the shape matching
framework and we prove that it computes discretely continuous, orientation preserving correspondences.
• We evaluate the performance of several LP algorithms for
efficiently determining the globally optimal solution of
the relaxed ILP.
• We introduce a multiresolution framework which allows
to efficiently process shapes in higher resolution.
• We show that the incorporation of a feature descriptor further enhances the performance of our algorithm.

2. Integer Linear Program Formulation
In this section we present our ILP formulation for geometrically consistent shape matching. The key idea is to represent
c 2011 The Author(s)
c 2011 The Eurographics Association and Blackwell Publishing Ltd.

T. Windheuser, U. Schlickewei, F.R. Schimdt, D. Cremers / Large-Scale Integer Linear Programming for 3D Shape Matching

1473

a surface map by its graph surface. This idea appeared previously in the context of 2D shape matching in the work of
Schmidt et al. [SFC07].

the diffeomorphism ϕ itself, we search for its graph surface
Γϕ = {(x, ϕ(x)) ∈ X × Y | x ∈ X} ⊂ X × Y . This graph surface has the following properties

In Section 2.1 we will quickly review the continuous theory of diffeomorphisms and their graph surfaces and we will
give the continuous version of the thin-shell energy used in
this work. The discrete version of graph surfaces will be derived in the sequel. In Section 2.2 we will introduce product
triangles which are the building blocks of discrete graph surfaces. Product triangles are glued to discrete graph surfaces
in Section 2.3. Finally, we elaborate on the ILP formulation
for shape matching in Section 2.4.

(i) Γϕ is a differentiable, connected, closed surface in the
product space X ×Y .
(ii) The natural projections πX : Γϕ → X and πY : Γϕ → Y are
both diffeomorphisms.
(iii) The two orientations which Γϕ naturally inherits from X
and Y coincide.
Vice versa, any surface Γ ⊂ X × Y satisfying conditions
(i),(ii) and (iii) is the graph surface of a diffeomorphism between X and Y . In the following we work out how to define
discrete versions of (i),(ii) and (iii).

2.1. Diffeomorphisms and their Graphs
Let X,Y ⊂ R3 be two closed, oriented differentiable surfaces. We formulate shape matching between X and Y as
an optimization problem in the group of orientation preserving diffeomorphisms Diff+ (X,Y ). Recall that a diffeomorphism between X and Y is an invertible, differentiable map
ϕ : X → Y whose inverse ϕ−1 : Y → X is again differentiable. We argue that orientation preserving diffeomorphisms
are the correct search space for registrations of boundary
surfaces of volumetric three-dimensional shapes. Indeed, a
deformation of one volumetric three-dimensional shape into
another one induces an orientation-preserving diffeomorphism of their boundary surfaces. Vice versa, each such diffeomorphism can be obtained as the boundary map induced
by a volumetric shape deformation.
The energy we impose on diffeomorphisms is a variant of
Koiter’s thin-shell energy [Koi66]. It consists of a membrane
term penalizing stretching and compression and of a bending
term. For a diffeomorphism ϕ : X → Y we set
E(ϕ) =
X

+λ
X

(HX (x) − HY (ϕ(x))2

1

2

E X = EX ∪ {( aa ) | a ∈ VX } .

(1)

(3)

Similarly, the set of triangles FX is extended by degenerate
triangles

Ebend

Since in shape matching there is no reason to prefer one
shape to the other one, we use a symmetric problem formulation. The resulting optimization problem we aim to solve
is
(2)

In our computational approach, rather than searching for
c 2011 The Author(s)
c 2011 The Eurographics Association and Blackwell Publishing Ltd.

Let X be an oriented, connected triangle mesh. Denote by
VX the set of vertices of X. We fix orientations for edges and
for triangles. Since edges do not have a natural orientation,
we arbitrarily choose one. The set of oriented edges is denoted by EX . Thus, if two vertices v1 , v2 ∈ VX are connected
by an edge, then either ( vv12 ) ∈ EX or ( vv21 ) = − ( vv12 ) ∈ EX . By
assumption, triangles do have a natural orientation. Let FX
be the set of oriented triangles. If vertices a1 , a2 , a3 build an
a1
a2
a3
oriented triangle, then aa2 = aa3 = aa1 ∈ FX .
We extend the set of edges EX by degenerate edges

where HX and HY denote the mean curvature of the two
shapes X and Y resp., λ and µ are parameters that model
the material’s bending and stretching properties and the Lagrange strain tensor E measures the difference between the
local metrics on both shapes. This tensor is defined as E =
ϕ∗ gY − gX where gX is the Riemannian metric on X and
ϕ∗ gY is the pullback of the metric gY on Y (cf. [DC92]).

ϕ∗ = argminϕ∈Diff+ (X,Y ) E(ϕ) + E(ϕ−1 ).

In this subsection we will introduce the set of product triangles which are the building blocks of discrete graph surfaces.
Each such product triangle can be interpreted as setting into
correspondence a small surface patch on one shape with a
small surface patch on the other shape. Before defining the
product triangles, we have to discuss degenerate edges and
triangles of a mesh. These will enable our matching framework to cope with stretching and compression.

3

(trgX E) + µ trgX (E2 )
Emem

2.2. Product Triangles

F X = FX ∪

a1
a2
a2

a1 , a2 ∈ VX , ± ( aa12 ) ∈ E X .

(4)

Note that degenerate triangles can consist of two vertices or
of only one vertex.
Let now Y = (VY , EY , FY ) be a second oriented, connected
triangle mesh and define E Y , F Y analogously. Then the set
of product edges is defined as
E = E X × EY .
The set of oriented product triangles is defined as


a1


fa = aa2 ∈ F X ,




3




a1 b1
b1
a2 b2
/∼.
F=
b
=
F
,
∈
f
2
Y
b


a3 b3


b3






fa or fb non-degenerate

(5)

(6)

1474

T. Windheuser, U. Schlickewei, F.R. Schimdt, D. Cremers / Large-Scale Integer Linear Programming for 3D Shape Matching
a1 b1
a2 b2
a3 b3

. For shape matching, an activated prod-

as the indicator vector of fa which has all entries equal
to 0 but the fa -th one which is 1. For fb ∈ FY , the vector
v( fb ) ∈ {0, 1}|FY | is defined analogously.

∈ F is interpreted as setting into corre-

Definition 3 The projection πX : F → {0, 1}|FX | is defined
by

where ∼ is the equivalence relation generated by
a2 b2
a3 b3
a1 b1

∼

uct triangle

a3 b3
a1 b1
a2 b2
a1 b1
a2 b2
a3 b3

∼

spondence triangle fa on X with triangle fb on Y in such a
way that vertex ai ∈ VX is set in correspondence with vertex
bi ∈ VY .
2.3. Discrete Graph Surfaces
In the previous subsection we introduced product triangles as
the building blocks of discrete graph surfaces. In this section
we will see how to glue product triangles to discrete graph
surfaces. First we define the set of discrete product surfaces
which will contain the set of discrete graph surfaces.
Definition 1 A discrete product surface Γ is a subset Γ ⊂
F.
We now formulate discrete versions of conditions (i), (ii) and
(iii).
Discrete Version of (i). Here we present the discrete version of the closedness constraint. For shape matching, this
constraint has the interpretation that matchings of triangular
patches are continued consistently across edges. To formulate this we need to introduce the boundary operator mapping product triangles in F to product edges in E. This operator is reminiscent of the boundary operator for triangle
meshes [DHLM05].
As done in Section 2.2 for edges on X and Y , we fix arbitrary orientations of the product edges E. Given a product edge e = aa12 bb12 , we denote by v(e) ∈ {−1, 0, 1}|E| the
vector with entry 1 in the e-th component if e is positively
oriented and −1 if it is negatively oriented and with all other
entries equal to 0.
Definition 2 We define the boundary operator mapping
product triangles to their boundaries
∂ : F → {−1, 0, 1}|E|
a1 b1
a2 b2
a3 b3

→ v

a1 b1
a2 b2

+v

a2 b2
a3 b3

+v

a3 b3
a1 b1

(7)

πX ( fa , fb ) =

v( fa ) if fa is non-deg.
0|FX ] else.

The projection πY : F → {0, 1}|FY | is defined analogously.
A discrete product surface Γ ⊂ F satisfies the projection
constraint if πX (Γ) = 1|FX | and πY (Γ) = 1|FY | where 1n is
the vector of length n with all entries equal to one.
Discrete Version of (iii). There is no need for imposing a
further constraint in order to guarantee orientation preserving matchings because by definition F only contains patches
which induce such correspondences.
For computations, discrete product surfaces are represented by their indicator vectors Γ ∈ {0, 1}|F| . Then, the
boundary operator can be expressed by a (sparse) matrix of
size |E| × |F| and the projection operators by (sparse) matrices of size |FX | × |F| resp. |FY | × |F|.
Definition 4 A discrete graph surface is a closed discrete
product surface Γ ∈ {0, 1}|F| which satisfies the projection
constraint, that is
 


0|E|
∂
πX  · Γ = 1|F |  .
(9)
X
πY
1|FY |

2.4. Integer Linear Program
In Section 2.3 we have identified the correct search space for
our discrete diffeomorphism optimization problem. Before
stating the ILP formulation, we need to discretize the energy
given in (1) (or rather its symmetrized version which appears
in (2)).

.

The boundary operator is extended linearly to a map ∂ :
[0, 1]|F| → Z|E| .
A discrete product surface Γ ⊂ F is called closed if it satisfies ∂(Γ) = 0|E| , where 0|E| is the all-zeros vector of length
|E|.
Discrete Version of (ii). Now we formulate the discrete
analog of bijective projections. We require that each nondegenerate triangle on X or Y has a unique (possibly degenerate) correspondence partner on the other mesh. To formalize this, define for fa ∈ FX the vector vX ( fa ) ∈ {0, 1}|FX |

(8)

Recall that each product triangle f =
meaning to set fa =
b1
b2
b3

a1
a2
a3

a1 b1
a2 b2
a3 b3

has the

in correspondence with fb =

in such a way that ai corresponds to bi . The cost of

such a correspondence is split in
E( f ) = Emem ( f ) + λEbend ( f ).

(10)

For the membrane term we adopt the discretization proposed
by Delingette. We refer the reader to [Del08] for the somewhat lengthy formula of the membrane cost EDel ( fa , fb ) for
deforming fa in fb . We use this discretization symmetrically
c 2011 The Author(s)
c 2011 The Eurographics Association and Blackwell Publishing Ltd.

T. Windheuser, U. Schlickewei, F.R. Schimdt, D. Cremers / Large-Scale Integer Linear Programming for 3D Shape Matching

1475

we introduce the projection
pX : F → F X ,

a1 b1
a2 b2
a3 b3

→

a1
a2
a3

(14)

Define pY : F → F Y in a similar way. For a set A, denote by
P(A) its power set consisting of all subsets of A.
Definition 5 We define the correspondence map induced
by Γ as
Figure 2: Discrete graph surfaces induce continuous
matchings (cf. Theorem 1 (b)). The figure shows two adjacent triangles fa (red) and fb (blue) on X (on the left) which
are set in correspondence with triangles ga (red) and gb
(blue) on Y (on the right). The triangles ge,1 and ge,2 (green)
on Y are contracted to the edge e between fa and fb as indicated by the black arrows on the right. Thus, edge e has to
be stretched to the contractible patch marked in green.
and define


EDel ( fa , fb ) + EDel ( fb , fa ) if fa , fb non-deg.
Emem ( f ) = 2EDel ( fa , fb )
if fb deg.


if fa deg.
2EDel ( fb , fa )
(11)
For the bending term, we use the vertex-wise squared difference of mean curvatures, weighted with the mixed surface
areas. Mean curvatures are discretized using the scheme proposed by Meyer et al. [MDSB02]. The resulting bending energy is
3

3

i=1

i=1

Ebend ( f ) = ∑ AXi (HX (i)−HY (i))2 + ∑ AYi (HX (i)−HY (i))2 .
(12)
resp.
refer to the area of the Voronoi cell of
Here,
vertex i in triangle fa resp. in triangle fb .
AiX

AYi

Let now E be the vector of length |F| whose f -th entry
is the cost E( f ). We formulate the geometrically consistent
shape matching problem as the Integer Linear Program (ILP)
min

Γ∈{0,1}|F|

t

E ·Γ


subject to




0|E|
∂
πX  · Γ = 1|F |  .
X
πY
1|FY |

(13)

3. Geometric Consistency
In this section we we show that discrete graph surfaces induce matchings with built-in geometric consistency. Loosely
speaking, Theorem 1 below says that discrete graph surfaces
as defined in Definition 4 induce orientation preserving, continuous and bijective matchings. To formulate this result in a
mathematically precise way we need some further notation.
A discrete product surface Γ induces correspondences between surface patches on X and on Y . To define these maps,
c 2011 The Author(s)
c 2011 The Eurographics Association and Blackwell Publishing Ltd.

ΓX : P(F X ) → P(F Y )
A → pY p−1
X (A) ∩ Γ

(15)

for all A ⊂ F X . The correspondence map ΓY : P(F Y ) →
P(F X ) is defined analogously.
For an edge e = ( aa12 ) ∈ EX on X we define the image patch
of e as
Γ(e) := ΓX

a1
a1
a2

,

a1
a2
a2

.

(16)

Theorem 1 (Geometric Consistency) Let Γ ⊂ F be a discrete graph surface. Then
(a) Γ induces orientation preserving correspondences of triangles.
(b) Γ is continuous in the following sense: for adjacent triangles f1 , f2 sharing an edge e, the image patch Γ(e) is a
contractible path on the dual mesh of Y which connects
Γ( f1 ) and Γ( f2 ). This statement is visualized in Figure 2.
(c) Statement (b) is true with the roles of X and Y being interchanged. Thus, Γ induces a bijective matching.
The proof of this theorem is elementary but somewhat
technical. It can be found in Appendix A. The continuity
statement in part (b) can be understood in the following
sense: The triangle maps from fi to Γ( fi ) can be “continuously” extended over an edge e by thickening e along the
contractible path Γ(e).
Note that the theorem does not say that Γ induces a bijection between F X and F Y . In fact, this is not even desirable, since degenerate triangles should only appear at places
where stretchings occur. However, the theorem assures that
by means of a discrete graph surface Γ, mesh X induces a
complete, geometrically consistent covering of mesh Y and
vice versa. Thereby, discrete graph surfaces are the correct
search space in order to find a discretized representation of
the optimal shape diffeomorphism, i.e., the optimal shape
matching.

4. Evaluation of LP Solution Strategies
In this section we explain how to get approximate solutions
to (13) using Linear Programming (LP) relaxation and we
evaluate the performance of several LP algorithms on our
problem.

1476

T. Windheuser, U. Schlickewei, F.R. Schimdt, D. Cremers / Large-Scale Integer Linear Programming for 3D Shape Matching
2500

Figure 3: Correspondence of a running horse with a
standing horse. Correspondences are visualized by colored
patches and by connecting lines.
4.1. LP relaxation
The optimization problem (13) is a binary linear program
and as such an instance of an NP-hard problem. In order to
get approxiamte solutions we first use LP relaxation. This
means that we relax the binary constraints Γ ∈ {0, 1}|F| to
Γ ∈ [0, 1]|F] . This relaxed problem can be minimized globally in polynomial time. Unfortunately, the constraint matrix
in (13) is not totally unimodular. Therefore, in general solutions to the relaxed problem take values in the interior of
[0, 1]|F| .
In order to construct a binary solution out of a solution of
the relaxed problem, we cannot apply a simple thresholding
scheme since this would destroy the geometric consistency
of the solution. Instead, we propose an iterative scheme:
solve the relaxed version of (13), fix the variables with values
above a threshold > 0.5 to 1 and solve the relaxed version of
(13) with these additional constraints. If there is no variable
with value above the threshold fix only one variable with the
highest value. In our experiments, this scheme typically converged to a binary solution after less than 10 iterations, in no
experiment it took more than 20 iterations.
One of the benefits of LP relaxation is that the minimum
of the relaxed problem is a lower bound on the integer problem. This allows to specify the worst case energetic distance
between the approximate solution obtained by the iterative
scheme outlined above and the actual optimum of the ILP.
Experimentally we observed that this gap lies usually between 0 and 3 percent.
4.2. Evaluation of LP algorithms
We evaluated three different LP algorithms for solving the
relaxed version of (13):
• the simplex algorithm in the state-of-the-art implementation provided by the CPLEX package,
• the interior point algorithm in the CPLEX implementation,
• the parallelizable primal-dual algorithm proposed by Eckstein and Bertsekas [EB90] in our own GPU-based implementation.
The simplex algorithm could only handle very small-sized
toy problems of about 10 triangles per mesh. On problems of

Runtime in Seconds

2000

EcksteinBertsekas

Interior Point

1500
1000
500
0
16

56

96
Number of Faces

136

176

Figure 4: Comparison of the runtimes (in seconds) for solving the relaxed LP with the interior point method and with
the algorithm of Eckstein–Bertsekas depending on the problem size (number of triangles per shape). Visibly, for larger
problems the advantages of the GPU implementation of
Eckstein–Bertsekas become important.
this size the other two solvers were faster by a factor of about
10. For bigger problems the solver crashed.
A comparison of the performance of the interior-point
method and of the algorithm of Eckstein–Bertsekas is shown
in Figure 4. Visibly, for larger problem size the algorithm
of Eckstein–Bertsekas benefits from its parallel implementation and is much faster than the interior-point method.
Also we observed that for very large problems the interiorpoint method in the CPLEX implementation run out of memory. This is in contrast with the algorithm of Eckstein–
Bertsekas which only needs to save the primal and the dual
variables and therefore has linear memory consumption.
5. Multiresolution Framework
Because the number of product triangles grows quadratically
with the number of triangles in both shapes the resulting Integer Linear Program (ILP) has a very high number of variables and constraints. Even the minimization of the relaxed
Linear Program (LP) becomes impractical for state-of-theart LP solvers, if the shapes have more than 250 triangles. In
this section we present a multiresolution approach that overcomes this limitation and allows to match shapes of more
than 2000 triangles.
The basic idea of the multiresolution-resolution approach
is to solve the problem at a very coarse scale with the methods described in Section 4 and to recursively use the found
solution to narrow the search space at the next finer level. To
reduce the size of the search space we impose that a possible solution at a finer level must lie "near" an already found
solution at the coarser scale.
For the definition of "near" we use a hierarchy of triangles across the resolution levels. Suppose that we obtain
a triangle mesh Xi from a finer triangle mesh Xi+1 by repeatedly merging triangles. In practice we use the quadric
c 2011 The Author(s)
c 2011 The Eurographics Association and Blackwell Publishing Ltd.

T. Windheuser, U. Schlickewei, F.R. Schimdt, D. Cremers / Large-Scale Integer Linear Programming for 3D Shape Matching

1477

Figure 5: The matching between a stretching cat on the left
and a standing cat on the right.
edge decimation algorithm [GH97] in its OpenMesh implementation [BSBK02]. Denote by χi : F(Xi+1 ) → F(Xi ) the
child-parent relation, mapping each triangle in FXi+1 to the
triangle it is merged to on the coarser mesh Xi . These maps
are extended to maps between the extended sets of triangles
χi : F Xi+i → F Xi (see Section 2.2).
Let now X and Y be two high-resolution meshes and let
X = Xn , Xn−1 , . . . , X0 and Y = Yn ,Yn−1 , . . . ,Y0 be successive coarsenings with corresponding child-parent relations
{χi }0≤i≤n−1 and {ψi }0≤i≤n−1 . We proceed as follows:
1. We compute a discrete graph surface Γ0 (cf. Definition 4)
inducing a matching of the coarsest meshes X0 and Y0 . We
use the methods described in Section 4 for this task.
2. Assuming inductively that we have found a discrete graph
surface Γi which induces a matching of Xi and Yi , we
search for a discrete graph surface Γi+1 . This surface has
to lie in a search space which is reduced using the input
of the already computed surface Γi . Rather than allowing Γi+1 to be built of all product triangles Fi+1 between
Xi+1 and Yi+1 , we only allow for product triangles whose
parents or whose parents’ neighbors are set in correspondence by Γi . Thus, Γi+1 is searched as a subset of the reduced set of product triangles



∃( fa , fb ) ∈ Γi ⊂ Fi s.t. 




red
= ( fa , fb ) ∈ Fi+1 χi ( fa ) ∈ N ( fa ) and
Fi+1
.






ψ (f ) ∈ N(f )
i

a

b

(17)
Here, for a triangle f on a triangle mesh we used the set
of triangles in the one-ring or the two-ring of its vertices
as neighborhood N ( f ).
Then we compute Γi+1 by solving problem (13) over the
red
reduced search space, that is Γi+1 ∈ {0, 1}|Fi+1 | .
3. We repeat Step 2. until a discrete graph surface Γn has
been computed which induces a matching between X and
Y.
6. Experimental Results
To experimentally validate the proposed algorithm we did an
extensive evaluation on shapes from several datasets. For the
shown models we computed dense correspondences at a resolution of about 1000 vertices. Since dense high-resolution
matchings do not allow a direct visualization we chose a
sparse set of vertices on one shape by means of farthest point
c 2011 The Author(s)
c 2011 The Eurographics Association and Blackwell Publishing Ltd.

Figure 6: The proposed method is robust to cases where
several parts of a model are missing. As expected from the
elasticity property of the energy function, the missing parts
are shrinked correctly from the entire model to incomplete
model.
sampling and we rendered its Voronoi cell and the Voronoi
cell of its correspondence partner on the other mesh with the
same color.
6.1. Partial Matching
The ability of the proposed method to model stretching and
shrinking also allows to match shapes where large parts
of the geometry are missing. The right image of Figure 6
demonstrates this ability experimentally. The proposed algorithm matches the remaining parts of a human body missing
a hand, a leg and the head to its original shape.
6.2. Influence of Feature Descriptors
One of the benefits of the framework described in Section
2 is its flexibility regarding the diffeomorphism energy. Indeed, any first order energy with a data term of order zero
and a first-order regularizer involving the diffeomorphism’s
Jacobian can be handled.
As an example we extended the thin-shell energy by a
data term comparing the Wave Kernel Signatures (WKS)
[ASC11] of matched vertices. This data term EWKS was
computed in the same way as the bending term in (12). The
resulting matching energy of a discrete graph surface Γ was
then
E(Γ) = Emem (Γ) + λEbend (Γ) + µEWKS (Γ).

(18)

While the results of the matchings visually do not change
a lot when setting µ to 1 (see Figure 7), interestingly the
computation time decreases dramatically. The reason for the
decreasing runtimes is that with the use of a feature descriptor the solution to the LP relaxation explained in Section 4.1
often happens to be binary. This was the case in 56% of our
experiments with the signature term compared to 13% without the signature term. Overall the average number of fixing
steps decreased from 8 to 2.3 by using the signature term.

1478

T. Windheuser, U. Schlickewei, F.R. Schimdt, D. Cremers / Large-Scale Integer Linear Programming for 3D Shape Matching

with feature descriptor

without feature descriptor

Figure 7: Influence of a feature descriptor on the computed
matching. On the left we visualize the matching computed
with the energy extended by a feature descriptor. The correspondences on the right are obtained by minimizing only the
thin-shell energy.
6.3. Quantitative Evaluation
For quantitatively evaluating the proposed method we used
pairs of models from the dataset of Vlasic et al. [VBMP08].
Namely, we took 10 pairs of models from each of the sets
"crane", "samba" and "bouncing" at a resolution of 500 vertices. We computed the matchings between each of the 30
pairs by using the proposed algorithm and by using the
GMDS method by Bronstein et al. [BBK06]. One of the
models used in the evaluation is shown in Figure 8.
Since the exact ground truth correspondences (xi , yi ) are
available for these models X,Y , we measured the quality of a matching ϕ : X → Y by the mean geodesic error
1
N ∑i d(ϕ(xi ), yi ) where N is the number of vertices being
matched and d the normalized geodesic distance on the manifold of mesh Y .
Because GMDS cannot guarantee to deliver an
orientation-preserving matching, out of the 30 pairs of
models it produced 12 matchings that inverted the orientation as a whole. As there is no ground truth available for
this case, we ignored these matchings in the evaluation.
On the other hand, on 8 of the 30 models, the GMDS
algorithm computed matchings with partially intertwined
orientations. Figure 8 shows such an example where the left
hand is matched to the left hand but right foot is matched
to left foot. In contrast to this, our method preserved the
orientations in all examples.
The mean geodesic error produced by GMDS (using their
code) was 0.079 while the proposed method had a mean
geodesic error of 0.03.
7. Conclusion
We present a framework for efficiently computing highresolution orientation-preserving matchings among threedimensional shapes. Because surface patches rather than
points are set into correspondence we were able to prove
that registrations computed by this method are geometrically consistent in the sense that they are continuous
and orientation-preserving. We derived an ILP formulation

proposed method

GMDS

Figure 8: Comparison of a matching computed with the
proposed method (on the left) and with GMDS proposed by
Bronstein et al. [BBK06] (on the right). The proposed matching method guarantees to preserve the orientation. In contrast, GMDS may preserve the orientation on the upper part
of the body while it inverts the orientation of the legs – in
our evaluation this happened 8 times out of 30. (Visulization
with MATLAB code by Bronstein et al.)
whose relaxed version can be minimized globally in polynomial time. We discussed and quantitatively compared appropriate algorithms for efficiently solving this ILP. In particular, we introduced a multiresolution framework which allows
to handle meshes of higher resolutions. Numerous experiments confirm that the proposed method computes reliable
dense matchings of real-world three-dimensional shapes.

Acknowledgment
We used mesh data from Vlasic et al. [VBMP08] (Figures 7
and 8), from the SHREC 2011 benchmark [BBB∗ 11] (Figure 6) and from Sumner and Popovi´c [SP04] (Figures 1, 3
and 5). For the visualization we used Matlab code by Bronstein et al. [BBK06].

References
[ASC11] AUBRY M., S CHLICKEWEI U., C REMERS D.: PoseConsistent 3D Shape Segmentation Based on a Quantum Mechanical Feature Descriptor. In Pattern Recognition (Proc.
DAGM) (to appear 2011). 7
[BBB∗ 11] B OYER E., B RONSTEIN A. M., B RONSTEIN M. M.,
B USTOS B., DAROM T., H ORAUD R., H OTZ I., K ELLER Y.,
K EUSTERMANS J., KOVNATSKY A., L ITMAN R., R EINING HAUS J., S IPIRAN I., S MEETS D., S UETENS P., VANDER MEULEN D., Z AHARESCU A., Z OBEL V.: SHREC 2011: robust feature detection and description benchmark. ArXiv e-prints
(February 2011). 8
[BBK06] B RONSTEIN A., B RONSTEIN M., K IMMEL R.: Efficient computation of isometry-invariant distances between surfaces. SIAM J. Sci. Comput. 28, 5 (2006), 1812–1836 (electronic). 2, 8
[BBK∗ 10] B RONSTEIN A., B RONSTEIN M. M., K IMMEL R.,
M AHMOUDI M., S APIRO G.: A gromov-hausdorff framework
with diffusion geometry for topologically-robust non-rigid shape
matching. International Journal of Computer Vision 89, 2-3
(2010), 266–286. 2
[BM92] B ESL P., M C K AY N.: A method for registration of 3–d
shapes. IEEE PAMI 14, 2 (1992), 239–256. 1

c 2011 The Author(s)
c 2011 The Eurographics Association and Blackwell Publishing Ltd.

T. Windheuser, U. Schlickewei, F.R. Schimdt, D. Cremers / Large-Scale Integer Linear Programming for 3D Shape Matching

1479

[BSBK02] B OTSCH M., S TEINBERG S., B ISCHOFF S.,
KOBBELT L.: Openmesh - a generic and efficient polygon mesh
data structure. In OpenSG Symposium 2002 (2002). 7

[SP04] S UMNER R., P OPOVI C´ J.: Deformation transfer for triangle meshes. ACM Transactions on Graphics (TOG) 23, 3 (2004),
399–405. 8

[DC92] D O C ARMO M.: Riemannian geometry. Birkhauser,
1992. 3

[TKR08] T ORRESANI L., KOLMOGOROV V., ROTHER C.: Feature correspondence via graph matching: Models and global optimization. In ECCV (2) (2008), pp. 596–609. 2

[Del08] D ELINGETTE H.: Triangular springs for modeling nonlinear membranes. IEEE Transactions on Visualisation and Computer Graphics 14, 2 (March/April 2008). 4
[DHLM05] D ESBRUN M., H IRANI A. N., L EOK M., M ARSDEN
J. E.: Discrete exterior calculus, 2005. 4
[EB90] E CKSTEIN J., B ERTSEKAS D.: An Alternating Direction Method for Linear Programming. Technical report, Harvard
Business School, 1990. 6
[GH97] G ARLAND M., H ECKBERT P. S.: Surface simplification
using quadric error metrics. In SIGGRAPH (1997), pp. 209–216.
7
[GHDS03] G RINSPUN E., H IRANI A., D ESBRUN M.,
S CHRÖDER P.: Discrete Shells. In ACM SIGGRAPH /
Eurographics Symposium on Computer Animation (Aug 2003),
pp. 62–67. 2
[GMGP05] G ELFAND N., M ITRA N., G UIBAS L., P OTTMANN
H.: Robust global registration. In Symposium on Geometry Processing (2005), pp. 197–206. 1

[VBMP08] V LASIC D., BARAN I., M ATUSIK W., P OPOVI C´ J.:
Articulated mesh animation from multi-view silhouettes. In ACM
SIGGRAPH 2008 papers (2008), ACM, pp. 1–9. 8
[WBRS09] W IRTH B., BAR L., RUMPF M., S APIRO G.:
Geodesics in shape space via variational time discretization. In
EMMCVPR’09 (2009), vol. 5681 of LNCS, pp. 288–302.
[WGH∗ 05] WANG Y., G U X., H AYASHI K., C HAN T., T HOMP SON P., YAU S.: Brain surface parameterization using riemann
surface structure. In MICCAI (2) (2005), pp. 657–665. 2
[WSSC11] W INDHEUSER T., S CHLICKEWEI U., S CHMIDT
F. R., C REMERS D.: Geometrically consistent elastic matching
of 3d shapes: A linear programming solution. In Proc. International Conference on Computer Vision (to appear 2011). 2
[ZWW∗ 10] Z ENG Y., WANG C., WANG Y., G U X., S AMARAS
D., PARAGIOS N.: Dense non-rigid surface registration using
high-order graph matching. In CVPR (2010), pp. 382–389. 2

[JZvK07] JAIN V., Z HANG H., VAN K AICK O.: Non-rigid spectral correspondence of triangle meshes. International Journal of
Shape Modeling 13, 1 (2007), 101–124. 2

[ZZW∗ 08] Z ENG W., Z ENG Y., WANG Y., Y IN X., G U X.,
S AMARAS D.: 3d non-rigid surface matching and registration
based on holomorphic differentials. In ECCV (3) (2008), pp. 1–
14. 2

[Koi66] KOITER W.: On the nonlinear theory of thin elastic
shells. I, II, III. Nederl. Akad. Wetensch. Proc. Ser. B 69 (1966),
1–17, 18–32, 33–54. 3

Appendix A: Proof of Theorem 1

[Laf04] L AFON S.: Diffusion maps and geometric harmonics.
PhD thesis, Yale University, 2004. 2
[LD09] L IPMAN Y., DAUBECHIES I.: Surface comparison with
mass transportation, 2009. 2
[LDRS05] L ITKE N., D ROSKE M., RUMPF M., S CHRÖDER P.:
An image processing approach to surface matching. In Symposium on Geometry Processing (2005), pp. 207–216. 2
[Lév06] L ÉVY B.: Laplace-Beltrami Eigenfunctions Towards an
Algorithm That Understands Geometry. In Proc. Int. Conf. on
Shape Modeling and Applications (2006), IEEE, p. 13. 2
[LWT∗ 10] L UI L., W ONG T., T HOMPSON P., C HAN T., G U X.,
YAU S.: Shape-based diffeomorphic registration on hippocampal
surfaces using beltrami holomorphic flow. In MICCAI (2) (2010),
pp. 323–330. 2
[MDSB02] M EYER M., D ESBRUN M., S CHRÖDER P., BARR
A.: Discrete differential-geometry operators for triangulated 2manifolds, 2002. 5
[MHK∗ 08] M ATEUS D., H ORAUD R., K NOSSOW D., C UZ ZOLIN F., B OYER E.: Articulated shape matching using laplacian eigenfunctions and unsupervised point registration. In CVPR
(2008). 2
[MS05] M ÉMOLI F., S APIRO G.: A theoretical and computational framework for isometry invariant recognition of point
cloud data. Foundations of Computational Mathematics 5, 3
(2005), 313–347. 2
[OMMG10] OVSJANIKOV M., M ÉRIGOT Q., M ÉMOLI F.,
G UIBAS L. J.: One point isometric matching with the heat kernel. Comput. Graph. Forum 29, 5 (2010), 1555–1564. 2
[SFC07] S CHMIDT F. R., FARIN D., C REMERS D.: Fast matching of planar shapes in sub-cubic runtime. In Proc. International
Conference on Computer Vision (Rio de Janeiro, October 2007).
3
c 2011 The Author(s)
c 2011 The Eurographics Association and Blackwell Publishing Ltd.

The plan of this Appendix is as follows: First we analyze
the map Γ → X. In Proposition 1 we will prove that it is
simply a sequence of edge contractions. This will be one
of the key points in the proof of Theorem 1 which we will
develop afterwards.
In order to formulate the result on the map Γ → X we need
the notion of edge contractions in simplicial complexes. An
abstract simplicial complex K consists of a set K of subsets
of a vertex set V such that for each a ∈ V the set {a} is
contained in K and such that for all σ ∈ K and for all subsets τ ⊂ σ we have τ ∈ K. The sets in K are called faces,
the dimension of a face σ is card(σ) − 1. Two-dimensional
faces are called triangles, one-dimensional faces are edges
and zero-dimensional faces are vertices. The dimension of a
simplicial complex is the maximum of the dimensions of its
faces.
A simplicial map between two simplicial complexes K =
(K,V ) and K = (K ,V ) is a map p : V → V which satisfies
p(σ) ∈ K for all σ ∈ K. A simplicial map is surjective if so
is p and it is an isomorphism if p is bijective. By definition,
a simplicial map induces a map on the set of faces which is
again denoted by p : K → K . Explicitely, this map is defined
by p({v1 , . . . , vn }) = {p(v1 ), . . . , p(vn )}.
Let now e = ( aa12 ) ∈ K be an edge of K. The contraction
of K along e is a simplicial complex K together with a surjective simplicial map p between K and K which we now
define. The vertex set V of K is defined by replacing a1 and

1480

T. Windheuser, U. Schlickewei, F.R. Schimdt, D. Cremers / Large-Scale Integer Linear Programming for 3D Shape Matching

a2 in V by a new vertex c, i.e. V = (V \ {a1 , a2 }) ∪ {c}. We
introduce the map
a if a ∈ V \ {a1 , a2 }
c else.

p:V →V , a→

(19)

gles on X which share the edge e = ( aa12 ). Let f 1 =
a2 b4
a1 b5
a4 b6

and f 2 =

a1 b1
a2 b2
a3 b3

be the uniquely defined product triangles

in Γ lying over f1 and f2 .

Then the set of faces of K is defined as K = {p(σ) | σ ∈ K}.
Note that during this operation faces can be deleted because
K is a set and therefore each face appears only once. For
example, when contracting an edge on a triangle mesh, typically one deletes two faces, three edges and one vertex.

If b1 = b2 , corresponding to the case that the edge e
is contracted by Γ, then the neighbor of f 1 over the edge

In our context, X naturally carries the structure of a simplicial complex.

p−1
X

The discrete product surface Γ ⊂ X ×Y induces a simplicial complex KΓ = (KΓ ,VΓ ) in the following way: the set of
vertices VΓ of KΓ consists of all product vertices in VX ×VY
which are adjacent to a product triangle in Γ. The set of faces
KΓ is defined as the set containing all subsets of sets of the
form {(a1 , b1 ), (a2 , b2 ), (a3 , b3 )} where

a1 b1
a2 b2
a3 b3

∈ Γ.

Proposition 1 The natural projection VX × VY ⊃ VΓ →
simp
VX , (a1 , b1 ) → a1 induces a simplicial map pX between
KΓ and X which is a sequence of edge contractions followed
by a simplicial isomorphism.
Idea of Proof (Proposition). Starting with the simplicial surjection KΓ → X we construct a series of simplicial surjections KΓi → X by iteratively contracting all edges of KΓi
whose projections on X are single vertices until we reach a
simplicial isomorphism KΓn → X.
Before proving the theorem we will formulate a technical
lemma which will be used in the proof of the theorem.
Lemma 1 Let e = ( aa12 ) be an edge incident to two oriented
triangles f1 =

a1
a2
a3

, f2 =

a2
a1
a4

∈ FX on X.
a1
a1
a2

−1
(i) Define p−1
X (e) := pX

,

a1
a2
a2

where pX was

introduced in (14). Then any two triangles in p−1
X (e) ∩
Γ may be connected by a path of product triangles
g1 , . . . , gn with gi ∈ p−1
X (e) ∩ Γ such that for each i the
triangles gi and gi+1 share a product edge which lies over
e.
−1
(ii) The set of all triangles in (p−1
X ({ f 1 , f 2 }) ∪ pX (e)) ∩ Γ
is connected.
The proof of the lemma is elementary but tedious. It relies
on studying the preimages of edges and faces under edge
contractions in simplicial complexes and on inductive application of Proposition 1.

a1 b1
a2 b1

is necessarily f 2 because this neighbor projects
to a non-degenerate triangle on X which has the edge
( aa21 ). On the other hand, no triangle in p−1
X (e) ∩ Γ =
a1
a1
a2

,

a1
a2
a2

∩ Γ has an edge in common with f 1

or with f 2 because such a triangle would be degenerate in
both projections. Using Lemma 1 (ii), this implies that Γ(e)
is empty and that Γ( f1 ) and Γ( f2 ) are adjacent on Y .
If on the other hand b1 = b2 , then b4 = b5 . If a product triangle in p−1
X (e) ∩ Γ is adjacent to f 1 , it is necessarily of the
form

a2 b2
a1 b1
a1 b7

or

a2 b2
a1 b1
a2 b7

third vertex of the triangle
uct triangle
of the form

where b7 is the uniquely defined
b2
b1
b7

on Y . Similarly, if a prod-

in p−1
X (e) ∩ Γ is adjacent to f 2 , it is necessarily
a1 b5
a1 b5
a2 b4
or a2 b4 for some b8 . Thus, if Γ(e)
a1 b8
a2 b8

is non-empty, using Lemma 1 (ii), one of these four product triangles has to be activated. Since there is nothing to
prove for Γ(e) empty, we assume w.l.o.g. that g1 =

a2 b2
a1 b1
a1 b7

is contained in Γ. Using that Γ is closed, there exists a product triangle g2 =

a2 b2
a1 b7
a5 b9

∈ Γ. If a5 = a4 , by the projection

constraint we have g2 = f 2 . Otherwise we have a5 = a1 or
a5 = a2 and g2 ∈ p−1
X (e) ∩ Γ. In this case g2 has a product edge which lies above ( aa12 ) and with the same argument
we find a product triangle g3 . Continuing this process inductively we obtain a triangle path g0 = f 1 , g1 , g2 , . . . with
gi ∈ p−1
X (e) ∩ Γ for i > 0. This path cannot have loops because the remaining third edge of each of the gi is contracted
to a1 or to a2 . Since there are only finitely many product triangles, the path stops after say n steps with gn+1 = f 2 .
Finally, no triangle other than g1 , . . . , gn in p−1
X (e) ∩
Γ may be connected to the gi over an edge which lies
above e. Therefore, using Lemma 1 (i), we get p−1
X (e) =
{g1 , . . . , gn }.
The proof of statement (c) is analogous.

Proof of Theorem 1. The orientation preservation property
(a) is immediate since by construction F only contains orientation preserving triangle correspondences.
To prove (b), let f1 =

a1
a2
a3

and f2 =

a2
a1
a4

be two trianc 2011 The Author(s)
c 2011 The Eurographics Association and Blackwell Publishing Ltd.

