DOI: 10.1111/j.1467-8659.2011.01872.x
EUROGRAPHICS 2011 / M. Chen and O. Deussen
(Guest Editors)

Volume 30 (2011), Number 2

Langevin Particle: A Self-Adaptive Lagrangian Primitive for
Flow Simulation Enhancement
Fan Chen and Ye Zhao and Zhi Yuan †
Kent State University, Kent, Ohio, USA 44242

Abstract
We develop a new Lagrangian primitive, named Langevin particle, to incorporate turbulent flow details in fluid
simulation. A group of the particles are distributed inside the simulation domain based on a turbulence energy
model with turbulence viscosity. A particle in particular moves obeying the generalized Langevin equation, a
well known stochastic differential equation that describes the particle’s motion as a random Markov process. The
resultant particle trajectory shows self-adapted fluctuation in accordance to the turbulence energy, while following
the global flow dynamics. We then feed back Langevin forces to the simulation based on the stochastic trajectory,
which drive the flow with necessary turbulence. The new hybrid flow simulation method features nonrestricted
particle evolution requiring minimal extra manipulation after initiation. The flow turbulence is easily controlled
and the total computational overhead of enhancement is minimal based on typical fluid solvers.
Keywords: Turbulence, Flow Simulation, Langevin Equation, Stochastic Process, Physically-based Modeling

1. Introduction
Flow simulation in computer graphics has achieved astounding appearance of various natural phenomena. Meanwhile, graphical fluid solvers are continuously improved
confronting the challenge from energy dissipation and limited computational resources, in order to provide abundant
turbulent details which are a deterministic factor of realistic visual effects. In this paper, we introduce a new Lagrangian primitive, the Langevin particle, for easily and
self-adaptively incorporating essential turbulence to ongoing
flow simulations for graphical animations.

visual impact of various fluid animations [Bri08]. The finescale details are contingent on the resolution of computing grids usually restricted by computational resources and
performance requirements. Moreover, numerical dissipation
contributing to significant energy loss further leads to unrealistic detail damping. Alternatively, fully particle-based
solvers have been used, e.g., the Smoothed Particle Hydrodynamics [Mon05] is employed in a large body of research
work such as [MCG03, MKN∗ 04, CBP05, BT07, SP08]. The
pure Lagrangian approach usually needs a large amount of
Lagrangian primitives (particles) distributed in the domain,
and it has not been intensively studied in computer graphics
to simulate turbulent smoke.

1.1. Related Work
Physically modeling fluids typically involves solving the incompressible Navier-Stokes (NS) equation:
∂u
+ u · ∇u = −∇P + ν∇2 u + F, ∇ · u = 0.
(1)
∂t
In this partial differential equation (PDE), u is the velocity
at time t, P is the pressure, F is the external forcing, and ν is
the kinetic viscosity. A grid-based stable fluid solver [Sta99]
using semi-Lagrangian advection schemes contributes to the
† fchen,zhao,zyuan@cs.kent.edu
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.
Published by Blackwell Publishing, 9600 Garsington Road, Oxford OX4 2DQ, UK and
350 Main Street, Malden, MA 02148, USA.

Advanced numerical scheme Many advanced numerical
schemes are proposed for solving the governing NS equation
with reduced energy damping. The advection is replaced by
the Lagrangian fluid-implicit-particles (FLIP) [ZB05] and
higher order schemes with repeated semi-Lagrangian steps
[KLLR07, SFK∗ 08]. The enforced circulation preservation
[ETK∗ 07] from Stokes’ theorem and an energy preserving
scheme [MCP∗ 09] in a finite volume manner provide stable
Eulerian solutions on simplicial grids. These methods commonly work on a stationary grid and require solving a large
linear system with rapidly emerging complexity from grid
size increase. The computational cost is reduced by coars-

436

Fan Chen and Ye Zhao and Zhi Yuan / Langevin Particle

ening the grid in particular for pressure solver with an efficient approximation of the pressure gradient on the fine grid
[LZF10]. Spatial refinements [LGF04, FOKG05, IGLF06]
adaptively provide details with high resolution at parts of the
simulation domain with extra grid manipulation on-the-fly.
Noise field integration Fluid turbulence manifests stochastic
fluctuation, and direct numerical simulation cannot model
very turbulent behavior with the intrinsic nature. Synthetic
noises are naturally employed to be integrated with the simulated velocities, which reduces cost and creates naturallooking results. A handful of recent approaches utilize
Perlin or Wavelet noise to generate spectrum-controllable
divergency-free fields with the curl operation [BHN07],
which are added to the simulated flow fields. Since such
isotropic noises are not directly applicable for the fast
evolving anisotropic flow fields, these methods endeavor
to manipulate the noises with turbulence parameters computed from special energy transport models. For the purpose, Schechter and Bridson [SB08] propose a simple linear
model, Kim et al. [KTJG08] use locally assembled wavelets,
and Narain et al. [NSCL08] apply an advection-reactiondiffusion equation. Most recently, a particle-based method is
developed [PTC∗ 10] to create scalable chaotic effects based
on a very coarse grid simulation and using a particularlystretched wavelet noise for turbulence production. The energy transport is solved by a two-equation k − ε model on
particles to incorporate anisotropic noise and update particle
velocities. This method achieves very fast performance by
rendering particles directly. However, it aims at creating very
chaotic flows and does not perform well for non-turbulent
fluids. These models are in accordance to the complex estimation (e.g., statistical Kolmogorov theory [Fri95]) of turbulence evolution from the simulation results. They integrate
noises in a post-processing stage. Therefore, extra efforts are
necessarily devoted to make the noise coupling temporally
consistent with the evolving simulation.
Energy injection On the other hand, ongoing flows are
also enhanced through turbulence energy injection. Vorticity confinement forces computed at all grid sites increase
rolling features of smoke [FSJ01]. Later, manually seeded
vortex particles carrying an additional vorticity apply similar rotational forces while the particles stream inside the
flow [SRF05]. The carried vorticity is modified through a
vorticity-velocity form of the NS equation. The method requires very careful seeding since it might mistakenly impose
unnatural rotation to the flow without the guidance of a physical turbulence model. Pfaff et al. [PTSG09] present to sample vortex particles physically on boundary layers for obstacle induced turbulence. After seeding, the method solves
energy transport equations to determine when the particles
should increase or reduce their chaotic agitation, and correspondingly heuristic rules are developed for particle merging
and splitting. It does not handle fluid streams without objects. Zhao et al. [ZYC10] adopt a random forcing computed
from spectrally generated divergence-free noises to instigate

turbulence conditionally but not with energy evolution. This
method adds forces in the whole domain so that it may introduce excessive energy into the system and make it unstable.
1.2. Overview and Contribution
In this paper, we introduce the Langevin particle for modeling and incorporating essential turbulence to flow simulations. In physics literature, the particle stochastic Lagrangian
model has been applied to model turbulent flows as a PDF
(Probability Density Function) approach [Pop00], such as
for 2D polydispersed two-phase flows [MPC04]. We develop
the method to enhance graphical fluid simulation by introducing randomness with controllable particles and feeding
back with Langevin forces. A group of Langevin particles
impose agitation forces in a self-adaptive manner to inject
turbulence energy into flow simulations. Our approach introduces stochastic turbulent effects naturally with the inherent
randomness of particle motion, while seeking no help from
external Perlin or Wavelet noises. Abandoning the vorticitybased forces, it instead creates a different style of turbulence.
Furthermore, it automatically adjusts the intensity of fluctuation which works well for different kinds of flows, including
strong chaos and placid streams. Meanwhile, the particles do
not carry extra attributes such as vorticity, and the algorithm
does not solve the PDEs of energy transport. These features
make the method easy for implementation and result in only
minimal extra overhead from existing solvers.
In particular, a Langevin particle is named since it moves
obeying the generalized Langevin equation (GLE). This
stochastic differential equation (SDE), including a random
noise input, is widely used in physics for studying dynamics
of classical and quantum fluids. It describes the trajectory
of a minute element inside turbulent flows. The trajectory
follows the major flow but meanwhile demonstrates a Brownian style stochastic oscillation. The modeled particle dynamics has two features: (1) Stochastic motion: the particle
performs a special path consisting of taking successive random steps but obeying the average path, which is a statistical
Markov process that correctly models the physical anomalous behavior of flow-transported microscopic substances;
(2) Turbulence-consistent behavior: the particle’s flowing
behavior is influenced by the turbulence features of the underlying flow. In placid flow regions, the particle streams in
a similar way of passive advection. However in highly turbulent areas, possibly induced by inlet variation or boundary
geometry, the particle manifests chaotic abandonment of the
mean flow field. Here the fluid turbulence features are computed from the base flow through the turbulent viscosity hypothesis, which is widely used in modeling turbulent flows
with its estimation of small-scale fluctuation effects (e.g. in
the Large-Eddy Simulation).
The GLE-modeled particle path can be looked as the combinatory result of a base flow and the measured turbulence.
From this observation, we innovate to employ the Langevin
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

Fan Chen and Ye Zhao and Zhi Yuan / Langevin Particle

437

simulation with Langevin particles is presented in Sec. 3,
and we show multiple examples in Sec. 4. In Sec. 5, we provide a discussion of the approach as well as possible future
extensions.

2. Langevin Model

Figure 1: Stochastic trajectories from random walks of particles. They deviate with stochastic fluctuation and the repeated executions result in nonidentical motions even with
the same configuration.
particles to enhance the flow simulation, which may lack of
details due to numerical dissipation, large simulation scale,
inaccurate boundary handling, etc. In detail, we apply a
Langevin driving force computed from the velocity alteration of a Langevin particle at time steps along the particle’s
trajectory. The forces feed back the otherwise “lost” turbulence to the simulator, leading to necessary disturbance to
the simulation results. Our method combines the particlebased energy compensation with a random process implemented in the SDE. By adding random perturbation locally
and adaptively in necessary location and time, it is a very different way from previous approaches, lending itself a good
tool for flow simulation enhancement.
In summary, the new Langevin particle method has several desirable properties, including:
• Stochastic nature: the turbulence depicts realistic spirit
with the stochastic dynamics modeled by the celebrated
Langevin equation. The method provides distinct results
with multiple runs from identical configurations.
• Self-adaptive behavior: particles evoke turbulence with
physically necessary strength while they move inside flow
fields. In calm regions or high-viscous fluids, a Langevin
particle spontaneously retrenches or ceases its perturbation on simulation.
• Easy implementation: the added particle motion and
forces are easily programmed from basic solvers, and the
effects can be controlled with meaningful parameters.
Our main contribution is the development of the Langevin
particles with these favorable features for easy flow turbulence enhancement in computer graphics. To the best of our
knowledge, it is the first time that a stochastic process modeled by a stochastic differential equation is utilized in improving graphical flow simulation. Next, we describe the
stochastic particle dynamics and Langevin equation. Flow
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

Langevin particle motion is demonstrated by the generalized
Langevin equation (GLE), which models a particle’s velocity with consecutive random deviations from an underlying
mean flow. In some respects, the particle velocity yields a
prediction for flow turbulence evolution. Here, we introduce
the stochastic Langevin equation and its generalized version
in flow turbulence.

2.1. Particle Motion: A Random Process
A minute substance, such as molecule or dust, moves in the
air not simply following the flow streamline but in a complicated way (e.g. Brownian). The trajectory can be described
as “random walk”, a fundamental model for temporal random processes, which is of basic interest in a number of
fields from physics to economics [Hug96]. A specially designed random path model adopting the Schlick phase function has been successfully applied for dispersive bubbles in
graphics [KSK10]. Our method has similar spirit to this approach, while we use more complex physically-based computation in modeling particle trajectories, which provides direct relation to a turbulence model leading to easy controls
of particle behavior. A particle’s motion inside fluids can be
considered as a statistical Markov process. In the terminology of stochastic process, it is a diffusion process, in particular an Onrstein-Uhlenbeck process whose PDF (probability
density function) involves with Fokker-Planck equation. The
diffusion process is represented by a stochastic differential
equation [KP92]:
du(t) = D1 [u(t),t]dt + D2 [u(t),t]dW (t).

(2)

Here, u(t) is the stochastic particle velocity. D1 [u(t),t] and
D2 [u(t),t] are the drift and diffusion coefficients, of the
two major particle activities drift and diffusion, respectively.
W (t) is the fundamental Wiener process with the similar behavior to a pure random Brownian motion. It captures the
inherent random perturbation from molecule collisions and
thermal fluctuations. In computation, dW (t) actually provides a normal (Gaussian) distribution of random variations.
Fig. 1 depicts several illustrative particle paths based on u(t)
generated by this equation. Because of the randomness, they
deviate with stochastic fluctuation and the repeated executions result in nonidentical motions even with the same configuration.

438

Fan Chen and Ye Zhao and Zhi Yuan / Langevin Particle

2.2. Generalized Langevin Model
Langevin equation of the velocity of a particle suspended in
a turbulent fluid flow is developed based on Eqn. 2:
3 ε
(3)
du(t) = − C0 u(t)dt + C0 εdW (t).
4 k
The drift and diffusion coefficients are concreted and linked
with parameters (ε, k, C0 ) that measure flow turbulence. We
postpone the discussion of their definition a little later.
The basic Langevin Eqn. 3, however, models only stationary isotropic chaos. In computer graphics applications, our
aim is to incorporate disturbance into dynamically evolving fluid flows. Pope [Pop83] developed the generalized
Langevin equation (GLE) to describe the particle behavior
in turbulent flows, which is
du(t) = −

1 3
1∂ P
ε
dt − ( + C0 ) (u(t) − u(t) )dt
ρ ∂r
2 4
k

+ C0 εdW (t),

(4)

where ρ is the fluid density at location r, P is the pressure,
and
represents the stochastic averaging. In this√case the
diffusion coefficient is modeled by a parameter C0 ε determined by the turbulence energy. The drift is modeled by
a relaxation of velocity u(t) toward the local mean velocity u(t) controlled by −( 12 + 34 C0 ) kε . Here, the equation of
motion for a particle also includes a mean force due to the
action of the mean pressure gradient on the particle, repre∂ P
sented by − ρ1 ∂r .
2.3. Flow Turbulence
In the Langevin model, the particle behavior is controlled
by flow turbulence properties. In turbulent flows, the instantaneous velocity field u can be divided with the Reynolds
decomposition into a mean flow velocity u and a rapidly
fluctuating component u′ . Then the Reynolds-Average NS
(RANS) equation is used to model turbulent flows:
∂ u
+ div( u u ) = −∇P + ν∇2 u − div( u′ u′ ), (5)
∂t
with an additional Reynolds stress, u′ u′ , describing the underlying fluctuation. In a turbulence energy model, k represents the turbulent kinetic energy, k = 12 u′ · u′ , which is
half the trace of the Reynolds stress tensor. ε is the rate of
dissipation of turbulent kinetic energy. The Reynolds stress,
and hence k and ε, are physically unknown which contain the
effects from sub-grid scales (i.e. not simulated) on the flow.
In physics, they can be approximated by different heuristic
models such as turbulent viscosity.
2.4. Computational Scheme
A base numerical simulation is looked as providing the mean
flow field u . We allow a particle to move obeying Eqn. 4 as
if it is inside a turbulent flow. Therefore, we need to evaluate

the turbulence, in particular through ε and k, from the mean
field. The turbulent viscosity hypothesis is applied that treats
the turbulent stress like a viscous stress with a turbulent viscosity. This viscosity can be modeled by the mixing length
model from the rotation-rate tensor wi j [BL78]:
2
νt = lm
wi j ,

wi j =

∂ uj
1 ∂ ui
(
−
).
2 ∂r j
∂ri

(6)
(7)

Here · is the tensor norm, r is the location and i, j are suffix of coordinates. lm is the characteristic length scale of the
flow. Then, we compute the dissipation rate of turbulence, ε,
from the norm of strain rate of the mean flow, S( u ), as
ε = νt S2 ( u )
∂ uj 2
1 ∂ ui
+
)) .
S2 ( u ) = ∑( (
∂ri
i, j 2 ∂r j

(8)
(9)

In Eqn. 4, the Langevin particles capture the full turbulence
energy transferred (dissipated) from the simulation scale
through ε, which is computed here by the turbulence viscosity and strain of flow. It defines the intensity of random
deviation for particles.
After achieving νt and ε, we compute k based on another
formula of the turbulent viscosity as:
k2 =

νt ε
.
Cµ

(10)

In these computational equations, two constants are used:
C0 = 2.1 and Cµ = 0.09 [Pop00].
Finally, the statistical differential equation Eqn. 4 is discretized with finite-difference scheme. The particle velocity
is eventually updated as
1∂ P
∆t
ρ ∂r
1 3
ε
−( + C0 ) (u(t) − u(t) )∆t
2 4
k
+ C0 ε∆tξ(t).
(11)

u(t + 1) − u(t) = −

Here ξ(t) is a normal (Gaussian) distributed random variable with mean zero and deviation one, which is derived
from dW (t) = Norm(0, 1). It satisfies ξ(t)ξ(τ) = δ(t − τ)
where δ() is the Dirac function to make it a Markov chain.
In computation, we utilize the polar form of the Box-Muller
transformation in generating random numbers with a normal distribution and construct the needed vector-valued variables from them. Interested readers please refer to [BM58]
for mathematical details.
We have made a fairly brief introduction to the Langevin
dynamics of particles in turbulent flows. As we focus on the
computational scheme, interested readers please refer to two
good books for a complete mathematical and physical description [Pop00, CKW04].
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

Fan Chen and Ye Zhao and Zhi Yuan / Langevin Particle

3. Langevin Particles in Flow Simulation
Eqn. 11 provides the method of updating one Langevin particle’s velocity. Next, the particles are incorporated into a
running flow simulation. The integration is a two-fold problem: one is the particle moving inside the simulated flow;
and the other is the particle’s feedback to the simulation for
turbulence agitation.
As turbulence enhancement seeks to recover detail fluctuations, the simulated velocities are considered as the mean
flow of an ideal chaotic fluid, i.e., u in Eqn. 11. A Langevin
computed velocity tends to relax, from the random perturbation, towards this Eulerian mean velocity. Consequently,
zero perturbation (i.e., ε = 0) approximates the passive advection of the particle except the pressure gradient action
on the particle. Meanwhile, significant turbulent disturbance
(i.e., large
√ ε) will lead to a strong deviation with the random
term, C0 ε∆tξ(t), in the GLE Eqn. 11.
Therefore, the preferred turbulence effects are captured
and modeled through the Langevin particle, which is then
used to supply agitating forces to the simulation. We name
such forces as the Langevin force.

<u(t)>
F(t)
u(t+1)
P

u(t)

Figure 2: Compute Langevin force F(t). u(t) is the particle velocity, u(t) is the mean flow velocity, and u(t + 1) is
the particle’s target velocity at the following time step t + 1
computed by Eqn. 11.
3.1. Langevin Force
Fig. 2 illustrates our algorithm of generating the Langevin
force on a particular position, P, along one Langevin particle’s path. At a time step t, the blue dashed line shows the
local velocity that defines u at P. The black dashed line is
the particle trace, while at this moment, the particle velocity
is u(t). Meanwhile, the simulated flow is used to compute k
and ε that evaluate the turbulence. From these values, Eqn.
11 computes the particle’s target velocity u(t + 1) at the following time step t + 1. Next, we compute the Langevin force
as
u(t + 1) − u(t)
,
(12)
F(t) = α
∆t
with a constant α compatible to ∆t for a stable simulation.
The force represents our intended fluctuation that ideally
should cause the momentum change of this particle, which is
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

439

then fed back to the simulation to influence the flow. In Fig.
2, the red dashed vector depicts this computation and the
red solid vector is the force F(t) at P. In practice, the force
feedback is applied at the neighboring grid sites around P
modulated by a Gaussian kernel with a unit radius.

3.2. Particle Evolution
In our method, the turbulence enhancement is on a Langevin
particle’s own initiative adapted to simulated flows. The
perturbation
measured in Eqn. 11 by the stochastic term
√
C0 ε∆tξ(t), is contingent on the flow feature of ε. Particles
can be initiated at regions with large ε. More importantly,
when particles are seeded or move to non-turbulent areas,
ε will have a very small value and hence the random agitation will be self-adapted to a negligible level. Thus we can
leave the evolution of particles free of special manipulation
after initialization. This feature is very useful for animators,
since previous approaches usually require manual work or
particularly designed heuristic rules to manage particles during their evolution.
Initialization A general implementation is that we seed a
group of particles in the whole domain according to the distribution of ε, which can be realized through a Monte-carlo
sampling process. That is: particles have a large probability
to be sampled at locations with large ε. However, the magnitude of ε is numerically distributed in a very large range,
which makes it hard to uniformly sample particles so that
they appear at all the desired locations. For example, ε may
have a larger value at inlets than most areas around objects.
However, we may want to sample particles around objects at
areas with local maximum of ε. Therefore, the sampling can
also be performed at necessary regions, such as around obstacles, at inlets, or with animator’s choice. In practice, the
particle sampling is performed continuously during simulation steps. That is, every s steps we sample m particles in
necessary regions. s is set flexibly from 1 to a slightly larger
value to control the number of particles and hence the added
forces in the system. A small value of m produces good turbulence results in our experiments (See Sec. 4). In a simulation, active particles inside the whole system usually have
an amount of a few hundreds.
Moving At each step, an active particle moves according to
the flow velocity. Here, the velocity u(t + 1) computed by
Eqn. 11 should not be used, since it represents the target
velocity that is particularly used in assessing the force by
Eqn. 12. The target velocity is the “ideal” velocity of a particle inside a real turbulent flow, and the force is the way to
propel the simulated flow towards the real flow. The force
has to take effect through the NS solver, whose force-added
simulation result eventually advects the particle at next step.
Moreover, a particle is removed from the particle list when it
stops in stationary flow regions or moves out of the domain.
Boundary A Langevin particle handles boundaries in a very

440

Fan Chen and Ye Zhao and Zhi Yuan / Langevin Particle

easy way. It may be bounced back in a symmetric direction
according to an obstacle’s surface normal. In fact, we found
that it can be simply eliminated since the newly sampled particles will continue the turbulence enhancement task.
3.3. Turbulence Control
The generated turbulent effects are controlled through the
parameter lm in Eqn. 6. Physically, it defines the length scale
in a mixing length model of turbulence flow. For our purpose, the length lm can be specified at will to control the
introduced turbulence. Increasing lm leads to larger turbulence viscosity νt and thus stronger turmoil. lm can be set as
a variable with respect to spatial location, since in physics
the characteristic length is not uniform in the whole domain
but defined with the geometric configuration.

(a)

(b)

(c)

Meanwhile, the Langevin force magnitude is controlled
by α, which is set as α = 0.01 in our experiments. A large
value introduces large forces but may easily lead to unnatural flow turmoil. In practice, lm is a more convenient parameter. Another controllable parameter is the particle amount.
Our method needs a small amount of Langevin particles to
achieve desired turbulence, which requires minimal management overhead.
(d)

3.4. Simulation Procedure
Finally, we specify the pseudo-code of a complete simulation step with Langevin particles in Algorithm 1. Here, the
Algorithm 1 A complete simulation step with Langevin particles
1: Incorporate external forces and Langevin forces
2: Advection with Semi-Lagrangian
3: Pressure projection with Poisson solver
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:

Advect Langevin particles in particle list with the flow
Seed Langevin particles if needed and add to the list
for each particle LP in the list do
Read position P and velocity u of LP from the list
Load base flow velocity u and pressure gradient
Compute νt with Eqn. 6 and S with Eqn. 9 at P
Compute ε with Eqn. 8 and k with Eqn. 10 at P
Compute target particle velocity utarget with Eqn. 11
Compute Langevin force F with Eqn 12
Feed back F to the simulation
Remove LP if no longer active or out of domain
end for
Render simulation data

grid-based solver simulates velocities at grid sites, and a linear interpolation is used when necessary for computing attributes at the position P.

(e)

Figure 3: Snapshots of integrating turbulence to a rising
smoke flow with two different turbulence levels controlled
by the characteristic length scale lm . (a) Original flow; (b)
Vorticity confinement; (c) Random forcing; (d) lm = 0.001;
(e) lm = 0.003.
4. Results
We perform several experiments on a workstation with an
Intel Xeon 2.53 GHz CPU and 12 GB memory. The supplemental movies describe the animations of these experiments.
We adopt the basic stable solver [Sta99] for the base simulation not using any advanced improvement techniques in
order to clearly depict our enhancement method. First, we
use Langevin particles on a rising smoke flow without internal obstacles using a grid of 40 × 96 × 40. Fig. 3 shows
the snapshots of the simulation results with two different turbulence levels. Every two steps, we add only one Langevin
particle at the smoke inlet with a simple Monte-carlo sampling according to ε. That is, a location is given a probability
value according to ε, compared with a random number, to
sample a particle. With lm = 0.001, the original laminar flow
is enhanced to a more realistic turbulent smoke (Fig. 3d).
Using a larger lm = 0.003, the turbulence becomes stronger
with the intensified fluctuation from the rising path (Fig. 3e).
In comparison, Fig. 3b is the result using vorticity confinement [FSJ01], which shows relatively regular patterns close
to the inlet without introducing randomness, and due to the
accumulated vortical forces, more small-scale eddies are exc 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

Fan Chen and Ye Zhao and Zhi Yuan / Langevin Particle

441

hibited towards the top. Fig. 3c utilizes our random forcing
method [ZYC10] which generates turbulent fluctuation, but
the forces are applied everywhere which is hard to control in
order to avoid unnatural results.

(a) Original smoke

(b) Langevin particles

(c) Vortex particles
Figure 4: Snapshots of integrating turbulence to a smoke
simulation with diminishing wind. Left: before wind stops;
Right: after wind stops.

c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

Fig. 4 shows the snapshots of integrating turbulence to
another smoke simulation. In the simulation, a blowing wind
from the bottom stops during the smoke rising. Fig. 4a shows
the original simulation with a grid resolution of 50 × 140 ×
50. To add turbulence to the original placid flow, we add two
Langevin particles to the simulation with the wind every two
steps, as shown in Fig. 4b(left). Upon wind diminishing, the
smoke continues rising, and the turbulence becomes quiet
due to the loss of agitation energy. Our Langevin particles
detect the decreased turbulence energy and model the quiet
smoke ascending with their self-adapted fluctuating effects,
depicted in Fig. 4b(right). In comparison, we use the vortex particles method to the same simulation. Our approach
has a comparable efficiency with this method, since both apply a fast computation on a small amount of particles. Vortex particles apply vorticity forces to the simulation as in
Fig. 4c(left). Its enhancement of the flow shows more scattered smoke rotations, since the vorticity-based forces agitate the flow not directly respecting the mean flow path.
While the wind ceases, vortex particles may continue to
swirl the smoke (Fig. 4c(right)). The added vortical energy
can disperse the smoke further and make it hardly go upward, inconsistent with the original simulation. Moreover,
the vortex particles are only randomly sampled at initialization, while they do not introduce stochastic behavior during their motion. On the other hand, vortex particles utilize
vortical forces to keep and enhance spatial vortex evolution.
The Langevin forces induce random agitation for turbulence,
but may affect the vortex structure and evolution with two
drawbacks: (1) nice vortex motions are not directly produced
with the diffusive particle motion; (2) no spatial coherence
between the particles is explored. A future direction of our
extension is to combine the two approaches for even better
results.
In Fig. 5, several snapshots illustrate the turbulent effects for smoke simulation with obstacles. We use an 160 ×
80 × 80 simulation (Fig. 5a). Every ten simulation steps,
we insert three particles from the inlet, five particles around
the sphere and 5 particles around the cylinder, respectively.
These Langevin particles achieve necessary chaotic dynamics to the original smooth smoke, which suffers from the energy damping. We use lm = 0.001 and lm = 0.003 for two
different levels of turbulence, as illustrated in Fig. 5b and
Fig. 5c.
We also run an experiment of a flow over a table top. The
smoke develops turbulence to the left of the table (Fig. 6).
This is a special example used in [PTSG09, PTC∗ 10] to illustrate that correct turbulence enhancement does not induce
chaos above the table top, thanks to the usage of turbulence
model. Our method successfully creates the similar results.

442

Fan Chen and Ye Zhao and Zhi Yuan / Langevin Particle

(a) Original smoke

(b) lm = 0.001

(c) lm = 0.003

Figure 5: Snapshots of turbulence enhancement of a smoke past obstacles with two different turbulence levels.

(a) Original smoke

(b) Turbulence enhancement

(c) Enhancement with more particles

Figure 6: Snapshots of turbulence enhancement of a flow over a table top with two different turbulence levels.
Here, we use a grid of 128 × 30 × 30 that creates static flows
(Fig. 6a). By initiating ten Langevin particles randomly from
smoke inlet every two steps, Fig. 6b depicts the introduced
chaotic smoke. Here, the lm value on the table top is set different from the lm value of the remainder space, reflecting
the physical definition of the characteristic length that is typically used in physics to model flow behavior. It shows that
the turbulence model provides a convenient and physically
meaningful way to achieve desirable effects. Increasing the
particle numbers to thirty, the result in Fig. 6c shows stronger
turbulence with more details.

Example

Grid
Resolution

Fig. 3
Fig. 4
Fig. 5
Fig. 6

40 × 96 × 40
50 × 140 × 50
160 × 80 × 80
128 × 30 × 30

Ave. Time
Per Step of
Base Solver
390 ms
951 ms
4515 ms
357 ms

Ave. Time
Per Step of
Langevin Particles
21 ms
47 ms
117 ms
11 ms

Langevin Computing
Over
Base Simulation
5.3%
4.9%
2.7%
3.1%

Table 1: Performance report.
speed is mainly determined by the non-parallelized implicit
fluid solver.
5. Discussion

As shown in Table 1, for the grid of 40 × 96 × 40 in Fig.
3, the stable solver runs 390 milliseconds (ms) per step in
average, while the extra cost of Langevin particles is 21 ms
per step, including all the computation from line 5 to line 17
in Algorithm 1. The Langevin computing adds only around
5% extra overhead. For the simulation of diminishing wind
with the 50 × 140 × 50 grid, the solver uses 951 ms and the
particles use 47 ms, respectively. For a larger 160 × 80 × 80
grid, the performance of Fig. 5 simulation is 4515 ms per
step for the solver and 117 ms per step for the extra cost.
Here the extra overhead is about 3% of the simulation. Finally, a smaller 128 × 30 × 30 grid (Fig. 6) uses 357 ms for
the original solver and the particles use 11 ms, respectively.
In general, our method has a minimal cost in comparison to
the fluid solver, since we only maintain a small amount of
Langevin particles and the GLE computing runs very fast.
The computation of the particle dynamics and force feedback can also be parallelized. However, the performance is
measured without parallel acceleration, since the computing

Turbulence model: The rationale of our method is to re-inject
the “missing” turbulence energy, due to numerical damping
or coarse simulation scale, into the simulation. Instead of
solving the PDEs in a complete k − ε model [Pop00], ε in
the GLE is considered as the full energy transferred from
the simulated scale (i.e., turbulence energy production P = ε
in the k − ε model), and thus can be computed by Eqn. 8.
Such treatment implies that the Langevin particle does not
need to carry turbulence energy produced at a location to
other locations along its path. Thus, our method relies on the
base simulation tightly, and the turbulent results follow the
mean flow closely. The trend can be discovered by comparing Fig. 5a and Fig. 5c, or comparing Fig. 4b and Fig. 4a.
Researchers have endeavored to achieve such flow behavior,
which follows designed pathes or low-resolution simulation
results, with particular optimization methods [BP08, NC10].
In comparison, in the approaches (e.g., [NSCL08,
PTC∗ 10]) of solving a full k − ε PDE system, the produced
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

Fan Chen and Ye Zhao and Zhi Yuan / Langevin Particle

turbulence can be transferred along the flow and then accumulated with newly created turbulence energy. This feature tends to intensify the noise-coupling turbulence effects
which are preferred in many applications. However in the
meanwhile, the results sometimes will have a large deviation tendency from the base flow, and the scheme cannot
easily handle the cases that turbulence should be reduced
in the non-chaotic regions or temporal periods, as stated
in [PTC∗ 10]. Indeed the Langevin particle can also be used
to carry turbulence attributes and combined with such full
k − ε model. In the future, we will study a more operational
framework of turbulence model for animators to control the
turbulence level and its agreement to the base flow in a more
intuitive and quantitative way.
Stochastic noise: Our method applies randomness inside the
GLE as a stochastic process, which is incorporated locally
to the simulation. This is different from the existing methods
that employ externally created noise fields. Our approach is
alleviated from their necessary treatment for temporal consistency during noise coupling, e.g., using the Jacobian of
texture coordinates to handle deformation [KTJG08] or using special guiding particles [PTC∗ 10].
An advantage of the Langevin method is that it imposes adaptive stochastic agitation on-the-fly with a small
group of particles. In comparison, our previous random forcing method [ZYC10] pre-generates independent noise fields
without knowledge about underlying base flow. This drawback sometimes will create obvious visual artifacts since
the added random force may adversely drive the flow towards an unnatural direction. In Pfaff et al. [PTC∗ 10], a local
anisotropic coupling of pre-created noise fields makes the results more visually consistent. However, a very large amount
of particles are needed for this method to integrate the global
noise fields.
Hybrid grid-particle: Our method employs the Langevin
particles in addition to a grid-based simulation. We advance from the previous hybrid methods, e.g., vortex particles, by incorporating adaptive stochastic turbulence. Our
method can be looked as a combination of the noise-based
and the particle-based enhancement strategies. However, the
enhanced dynamics still relies on the grid simulation for turbulence production and NS solution. We will further apply
this scheme to a full Lagrangian approach, and also pursue to
discover its usage in multi-phase and free-surface problems.
Non-vorticity force: Most force feedback methods employ
vorticity-based forces. This approach sometimes will adversely divert the flow from its path with its rotational forcing. In our method, the GLE models an enforced relaxation
towards the mean path, so that the enhanced flow follows
the major route, as shown in Fig. 4. Meanwhile, a Langevin
particle imposes forces which also change the turbulence parameters around itself and may possibly introduce a loop effect of adding forces. In our tests, the loop effect is not serious, because the vector directions of the added forces are
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

443

randomly distributed, and in comparison, the vortex confinement tends to accumulate additional forces to the rotational
direction.
Particle management: The Langevin particles perform turbulence agitation in a self-adaptive manner, which alleviates the management cost to some extent. Nevertheless, the
seeding location, the number of particles, and the removal of
them are manually controlled to produce turbulence effects.
The particles need to be seeded in large ε areas to catch and
represent possible turbulence, and the parameter α has to be
carefully selected to avoid excessive energy injection. The
management of these factors may potentially introduce visible artifacts in results. The method also requires some efforts
on maintaining the active particle list which is typical for a
Lagrangian approach.
6. Conclusion
A group of Lagrangian particles are employed to bring in
chaotic fluctuation into a fluid solver. The particles stream
inside the fluid following a stochastic process modeled by
the Langevin equation, in which the oscillation is determined by the turbulence model of the fluid flow. Therefore,
Langevin particles capture flow turbulence and feed back to
the simulation through Langevin forces. The imposed turbulence features stochastic nature and controllable strength
which are favorable factors in a variety of graphical applications.
Acknowledgment
This work is in part supported by U.S. National Science
Foundation under grant number IIS-0916131. We thank the
anonymous reviewers for their constructive reviews and insightful suggestions to improve the paper.
References
[BHN07] B RIDSON R., H OURIHAM J., N ORDENSTAM M.:
Curl-noise for procedural fluid flow. In Proceeding of ACM SIGGRAPH (New York, NY, USA, 2007), ACM, p. 46. 2
[BL78] BALDWIN B. S., L OMAX H.: Thin layer approximation
and algebraic model for seperated turbulent flows. American Institute of Aeronautics and Astronautics Meeting, paper 78-257
(1978). 4
[BM58] B OX G., M ULLER M.: A note on the generation of random normal deviates. Annals Math. Stat 29 (1958), 610–611.
4
[BP08] BARBI Cˇ J., P OPOVI C´ J.: Real-time control of physically
based simulations using gentle forces. ACM Trans. Graph. 27, 5
(2008), 1–10. 8
[Bri08] B RIDSON R.: Fluid Simulation for Computer Graphics.
A. K. Peters, Ltd., Natick, MA, USA, 2008. 1
[BT07] B ECKER M., T ESCHNER M.: Weakly compressible
sph for free surface flows.
In Proceedings of the ACM
SIGGRAPH/Eurographics symposium on Computer animation
(Aire-la-Ville, Switzerland, Switzerland, 2007), Eurographics
Association, pp. 209–217. 1

444

Fan Chen and Ye Zhao and Zhi Yuan / Langevin Particle

[CBP05] C LAVET S., B EAUDOIN P., P OULIN P.: Particle-based
viscoelastic fluid simulation. In SCA ’05: Proceedings of the
2005 ACM SIGGRAPH/Eurographics symposium on Computer
animation (New York, NY, USA, 2005), ACM, pp. 219–228. 1

[MPC04] M INIER J.-P., P EIRANO E., C HIBBARO S.: PDF
model based on Langevin equation for polydispersed two-phase
flows applied to a bluff-body gas-solid flow. Physics of Fluids 16
(2004), 2419–2431. 2

[CKW04] C OFFEY W. T., K ALMYKOV Y. P., WALDRON J. T.:
The Langevin Equation: with Applications to Stochastic Problems in Physics, Chemistry and Electrical Engineering. World
Scientific, 2nd edition, 2004. 4

[NC10] N IELSEN M. B., C HRISTENSEN B. B.: Improved variational guiding of smoke animations. Computer Graphics Forum
29 (2010), 705–712. 8

[ETK∗ 07] E LCOTT S., T ONG Y., K ANSO E., S CHRÖDER P.,
D ESBRUN M.: Stable, circulation-preserving, simplicial fluids.
ACM Trans. Graph. 26, 1 (2007), 4. 1
[FOKG05] F ELDMAN B. E., O’B RIEN J. F., K LINGNER B. M.,
G OKTEKIN T. G.: Fluids in deforming meshes. In Proceedings
of the 2005 ACM SIGGRAPH/Eurographics symposium on Computer animation (New York, NY, USA, 2005), ACM, pp. 255–
259. 2
[Fri95] F RISCH U.: Turbulence: The legacy of A.N. Kolmogorov.
Cambridge University Press, 1995. 2
[FSJ01] F EDKIW R., S TAM J., J ENSEN H.: Visual simulation of
smoke. Proceedings of SIGGRAPH (2001), 15–22. 2, 6
[Hug96] H UGHES B. D.: Random walks and random environments. Oxford University Press, 1996. 3
[IGLF06] I RVING G., G UENDELMAN E., L OSASSO F., F EDKIW
R.: Efficient simulation of large bodies of water by coupling two
and three dimensional techniques. In ACM SIGGRAPH (New
York, NY, USA, 2006), ACM, pp. 805–811. 2
[KLLR07] K IM B., L IU Y., L LAMAS I., ROSSIGNAC J.: Advections with significantly reduced dissipation and diffusion.
IEEE Transactions on Visualization and Computer Graphics 13,
1 (2007), 135–144. 1
[KP92] K LOEDEN P. E., P LATEN E.: Numerical Solution of
Stochastic Differential Equations. Springer, 1992. 3

[NSCL08] N ARAIN R., S EWALL J., C ARLSON M., L IN M. C.:
Fast animation of turbulence using energy transport and procedural synthesis. In Proceeding of ACM SIGGRAPH Asia (New
York, NY, USA, 2008), ACM, pp. 1–8. 2, 8
[Pop83] P OPE S.: A Lagrangian two-time probability density
function equation for inhomogeneous turbulent flows. Physics
of Fluids (1983), 3448–3450. 4
[Pop00] P OPE S. B.: Turbulent Flows. Cambridge University
Press, 2000. 2, 4, 8
[PTC∗ 10] P FAFF T., T HUEREY N., C OHEN J., TARIQ S.,
G ROSS M.: Scalable fluid simulation using anisotropic turbulence particles. In ACM SIGGRAPH Asia (2010), p. To appear.
2, 7, 8, 9
[PTSG09] P FAFF T., T HUEREY N., S ELLE A., G ROSS M.: Synthetic turbulence using artificial boundary layers. In SIGGRAPH
Asia ’09: ACM SIGGRAPH Asia 2009 papers (New York, NY,
USA, 2009), ACM, pp. 1–10. 2, 7
[SB08] S CHECHTER H., B RIDSON R.: Evolving sub-grid turbulence for smoke animation. In Eurographics/ACM SIGGRAPH
Symposium on Computer Animation (2008), pp. 1–8. 2
[SFK∗ 08] S ELLE A., F EDKIW R., K IM B., L IU Y., ROSSIGNAC
J.: An unconditionally stable maccormack method. J. Sci. Comput. 35, 2-3 (2008), 350–371. 1

[KSK10] K IM D., S ONG O.- Y., K O H.-S.: A practical simulation
of dispersed bubble flow. ACM Trans. Graph. 29, 4 (2010), 1–5.
3

[SP08] S OLENTHALER B., PAJAROLA R.: Density contrast
SPH interfaces. In SCA ’08: Proceedings of the 2008 ACM
SIGGRAPH/Eurographics Symposium on Computer Animation
(Aire-la-Ville, Switzerland, Switzerland, 2008), Eurographics
Association, pp. 211–218. 1

[KTJG08] K IM T., T HÜREY N., JAMES D., G ROSS M.: Wavelet
turbulence for fluid simulation. In Proceeding of ACM SIGGRAPH (New York, NY, USA, 2008), ACM, pp. 1–6. 2, 9

[SRF05] S ELLE A., R ASMUSSEN N., F EDKIW R.: A vortex particle method for smoke, water and explosions. Proceedings of
SIGGRAPH (2005), 910–914. 2

[LGF04] L OSASSO F., G IBOU F., F EDKIW R.: Simulating water
and smoke with an octree data structure. ACM Trans. Graph. 23,
3 (2004), 457–462. 2

[Sta99] S TAM J.: Stable fluids.
(1999), 121–128. 1, 6

[LZF10] L ENTINE M., Z HENG W., F EDKIW R.: A novel algorithm for incompressible flow using only a coarse grid projection.
In SIGGRAPH ’10: ACM SIGGRAPH 2010 papers (New York,
NY, USA, 2010), ACM, pp. 1–9. 2
[MCG03] M ÜLLER M., C HARYPAR D., G ROSS M.: Particlebased fluid simulation for interactive applications. In SCA
’03: Proceedings of the 2003 ACM SIGGRAPH/Eurographics
symposium on Computer animation (Aire-la-Ville, Switzerland,
Switzerland, 2003), Eurographics Association, pp. 154–159. 1

Proceedings of SIGGRAPH

[ZB05] Z HU Y., B RIDSON R.: Animating sand as a fluid. In
Proceedings of ACM SIGGRAPH (New York, NY, USA, 2005),
ACM, pp. 965–972. 1
[ZYC10] Z HAO Y., Y UAN Z., C HEN F.: Enhancing fluid animation with adaptive, controllable and intermittent turbulence.
Proceedings of ACM SIGGRAPH/Eurographics Symposium on
Computer Animation (July, 2010). 2, 7, 9

[MCP∗ 09] M ULLEN P., C RANE K., PAVLOV D., T ONG Y.,
D ESBRUN M.: Energy-preserving integrators for fluid animation. ACM Trans. Graph. 28, 3 (2009). 1
[MKN∗ 04] M ÜLLER M., K EISER R., N EALEN A., PAULY M.,
G ROSS M., A LEXA M.: Point based animation of elastic, plastic and melting objects. In SCA ’04: Proceedings of the 2004
ACM SIGGRAPH/Eurographics symposium on Computer Animation (Aire-la-Ville, Switzerland, Switzerland, 2004), Eurographics Association, pp. 141–151. 1
[Mon05] M ONAGHAN J.: Smoothed particle hydrodynamics. Annul Revision on Progress in Physics 68, 8 (2005), 1703–1759. 1
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

