DOI: 10.1111/j.1467-8659.2011.01904.x

COMPUTER GRAPHICS

forum

Volume 30 (2011), number 6 pp. 1837–1849

Diffusion-Based Snow Cover Generation
Niels v. Festenberg and Stefan Gumhold
Professur f¨ur Computergraphik und Visualisierung, TU Dresden, Germany
{niels.festenberg, stefan.gumhold}@tu-dresden.de

Abstract
We present a method to generate snow covers on complex scene geometries. Both volumetric snow shapes and photorealistic texturing are computed. We formulate snow accumulation as a diffusive distribution process on a ground
scene. Our theoretical framework is motivated by models for granular material deposition. With the framework we
can capture the most relevant features of natural snow cover geometries in a concise local computation scheme.
Snow bridges and overhangs are also included. Snow surface texture coordinates are computed to create realistic
ground–snow interfaces. Several example scenes and a supplementary snow cover growth animation demonstrate
the method’s efficiency.
Keywords: snow, snow modeling, diffusion process
ACM CCS: I.6 [Computer Graphics]: Simulation and Modeling; I.3.7 [Computer Graphics]: Three-Dimensional
Graphics and Realism

1. Introduction
Modelling natural phenomena has always been a challenge
in scientific research. In Computer Graphics, this is reflected
in an ever growing need for more and more sophisticated
images of the real world. This need is usually best satisfied by transferring a physics-based set of differential equations into implementable algorithms. In many sections of
virtual reality computation this has been done successfully.
However, there remain some visually appealing phenomena
which lack a sound mathematical description. Snow is one of
them.
In this paper, we propose a mathematical model for the
process of snow accumulation on visual scales. The model
is based on a diffusion equation. Diffusion equations can be
efficiently solved, and they can also be used as a base to
include snow-specific phenomena such as bridge formation
and overhangs. In contrast to previous papers, we can motivate our model choice directly with physical models for
granular material deposition.

c 2011 Technische Universit¨at Dresden
Computer Graphics Forum c 2011 The Eurographics
Association and Blackwell Publishing Ltd. Published by
Blackwell Publishing, 9600 Garsington Road, Oxford OX4
2DQ, UK and 350 Main Street, Malden, MA 02148, USA.

The key contributions of our approach are as follows:
• a mathematical framework for snow distribution based on
the physical properties of falling and fallen snow summarized as a diffusion process,
• an efficient and realistic snow cover generation scheme
for virtual environments that comprises the creation of
snow bridges and snow overhangs and
• a scheme to texture the snow cover realistically.
The paper is structured as follows. We first motivate why
diffusion equations are appropriate to the description of fallen
snow and support this with a set of real world observations
(Section 3). We then introduce an efficient numerical scheme
based on a Gaussian kernel to approximate snow accumulation on any scene (Section 5.2). To make the computed snow
cover look real we propose a method to naturally texture
the snow surface (Section 5.4). A discussion of our results,
their limitations and a sketch of future potentials conclude
the paper (Sections 6–8).

1837

1838

N. v. Festenberg & S. Gumhold / Diffusion-Based Snow Cover Generation

2. Related Work
There exists some literature on snow models in physics
and environmental engineering. Details can be found, for
example in [Sto05] or [Mel74] as starting points, more references can be found there. However, all these approaches
either focus on the microscopic structure of snow on the scale
of single snow crystals, or on the scale of several hundreds of
metres as found in large avalanches or even larger in the estimations of regional hydrological balances. The scale most
relevant to CG, that is between ten metres and centimetres is
not thoroughly examined.
Snow models can be roughly divided into three classes:
manual methods, bulk particle simulations and ad hoc surface displacement models. An early manual model for fallen
snow in CG was proposed in [NIDN97] based on metaballs
and user specified snow distribution. A well-known particle method was proposed in [Fea00]. Particles representing
larger sets of snowflakes are shot upwards there and recursive snow surface stability tests are supposed to yield realistic
surface shapes. A revised combination of this model with animated snow fall is described in [MMAL05]. Several papers
were published on dynamic features of snow, such as winddriven transport [FO02, WWXP06] or snowflake animation
[LZK∗ 04].
The surface displacement proposals in [PTS99] and
[OS04, Dud05] present convincing results for large-scale
scenes based on ad hoc surface texturing techniques. The
method proposed in [FB07] generates large-scale snow covers as landscape texture. Recently, a voxel-based approach
to large-scale winter scenery synthesization was proposed
[MGG∗ 10]. There were also attempts to parallelize snow
simulations [SEN08] or make the simulation run in real time
[HAH02].
Finally, there are models that combine features of the different classes. In [MC00], the microscopic physical properties of snow and water serve as model base. Snow fall,
snow shape and snow melt are discussed, but the lack of implementation details hampers comparison or reproduction.
The models presented in [Tok06] and [vFG09] make use of
depth peeling to extract connected regions of snow height
sampling sites. These regions are then displaced with criteria
depending on a particles or snow patch border distances, respectively. However, these approaches can only treat simple
scene geometries and they do not support snow bridges or
overhangs as our method does.
Our implementation is based on the techniques proposed
in [Tok06] and improved by [vFG09]. We adapt the use of a
depth peeler and the organization of the depth textures in a
height span map [ON05] and we also make use of the ideas
of snowflake catchment areas and of border distances for a
simplified computation of snow profiles.
The idea of a surface simulation based on diffusion equations is drawn from low energy ion sputtering models [CC07].

The kernel solution method for diffusion equations is taken
from [Itˆo92].
Diffusion techniques were already used in Computer Graphics. But so far they were primarily used
for texturing (e.g. [Tur91, LGG∗ 07]), general smoothing
(e.g. [DMSB00]), photorealistic (e.g. [DJ05]) and nonphotorealistic rendering (e.g. [OBW∗ 08]).

3. Snow Physics Background
Fresh snow in nature forms a clean white and homogeneous
sheet to a landscape and it smoothly covers underlying discontinuities. Despite the harmonic appearance of snow on
visual scales, it is an extremely complex and irregular substance when looking at it in detail. Surprisingly its main
ingredient is air contributing about 90% to the volume of
freshly fallen snow [Nak54]. The visible smoothness of the
snow shape is microscopically maintained by a complex network of tiny ice crystals. The list of influencing factors is
long and comprises at least snow age, previous mechanical
and thermal history and current temperature and humidity.
It is worth mentioning that even elaborate empirical models still fail to reliably reproduce all properties of snow in a
global formalization [Sto05]. Thus, as proposed in [Fea00]
and refuted in [vFG09], it is misleading to model snow as
a standard granular material like sand or flour. However,
snow displays clear and smooth shapes on visual scales.
Figure 1 shows several real world examples. As also reported
in [vFG09] one can generally observe rounded edge profiles.
Moreover, the snow surface is less angular than the geometry under the snow. Similar to soft shadows, the smoothing
also refers vertically occluded surfaces: the snow smoothly
decreases towards occluded areas. Finally, snow can bridge
small surface gaps. In [vFG09], some of the relevant snow
features were reproduced by the ad hoc assumption of an edge
profile. However, snow bridges, overhangs and particularly

Figure 1: Snow in the real world. Top line: Snow surface
growth. Middle line: Typical edge profiles. Bottom line: Snow
bridge formation and smoothing.

c 2011 Technische Universit¨at Dresden
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

1839

N. v. Festenberg & S. Gumhold / Diffusion-Based Snow Cover Generation

4. Theoretical Framework for Snow Accumulation
on Visual Scales
There are two main tasks to take care of in snow shape
generation: (a) vertical visibility and (b) snow profiles near
boundaries. In [Fea00], visibility is computed with explicit
particle simulations and snow profiles are approximated with
recursive stability tests. In [vFG09], depth peeling is used to
determine visibility, while boundary distances and pointwise
downward transports generate the snow edge profiles. Instead, we handle both tasks with one concept that we call
snow diffusion kernel. For each snow height sampling site,
we look at a catchment area (the kernel), once upwards to
determine visibility, and once downwards to quantify the
ground support.
This approach can in fact be understood as a consequence
of the statistics of granular material deposition with strong
adhesion (see [CC07] for an overview). Usually, strong adhesion is only considered on molecular scales. The simplest
form to express this kind of material deposition is the socalled Edwards–Wilkinson equation ([EW82] Equation 3.1)
∂z(t, x)
= d∇ 2 z(t, x) + ξ (t, x).
∂t

(1)

It is a stochastic differential equation where z is the surface
height, d is a measure of the diffusion strength and ξ (t, x) is
the stochastic forcing term. The diffusion term is responsible
for local height redistributions and the forcing ξ makes the
height grow. For molecular surface models, ξ is chosen to
be a superposition of uncorrelated δ-peaks so that each peak
represents an impinging particle. This is exactly what happens in snow accumulation: many uncorrelated and adhesive
snow flake particles are deposited on a surface. As we are interested in the shape of the snow cover on visual scales here,
we can neglect the stochasticity of ξ and assume continuous
surface growth instead. Thus, we write
∂h(t, x)
= D∇ 2 h(t, x) + σ (t, x)
∂t

(2)

for the growth of a snow surface, where h(x, t) is the snow
height and σ is the snowfall rate. Note that this is formally
equivalent to heat conduction with h as the temperature and
σ as the heating term.
We believe that Equation (2) is a powerful alternative to
manual snow distribution [NIDN97], snow edge profiles with
global distance transforms [vFG09], recursive snow stability tests [Fea00], explicit particle simulations [MC00] and
depth buffer based surface displacement methods [OS04].
The central reason, why the diffusion equation (2) is efficient

Solutions to eq. (1) for σ = 1
0.9
0.8
0.7

snow height s

the smoothing qualities of snow covers were not included.
Moreover the rendering of snow–ground interfaces looked
unrealistic there. We will show here how these features can
be reproduced in virtual worlds based on a physical model
for granular material deposition.

0.6
0.5

t = 80, D = 0.001
t = 80, D = 0.01
t = 80, D = 0.1
t = 20, D = 0.001
t = 20, D = 0.01
t = 20, D = 0.1

0.4
0.3
0.2
0.1
0

0

0.2

0.4

0.6

0.8

1

space x

Figure 2: Solutions to Equation (1) for different transport
coefficients D and time steps t.

for snow, is the strong adhesion between the particles. This
makes snow qualitatively different from other macroscopic
granulars such as sand or flour.
Local vertical visibility can be expressed in the variation
of σ with x, that is as σ (x). Figure 2 shows a family of solution curves for the one-dimensional (1D) rod and constant
heating, that is σ = const., Dirichlet boundary conditions
h(0, t) = h(1, t) = 0 and initial condition h(x, 0) = 0.
Obviously, D is a measure for snow edge steepness, that is
the snow quality where large Ds represent wet and unstable
snow and small Ds dry and stable snow, respectively. Note
the visual similarity in the photographs in Figure 1. It is possible to use (2) for the simulation of a growing snow cover
in a scene by numerical integration. Analytic solutions for
diffusion equations are obtained by convoluting the initial
conditions with a Gauss kernel with a width increasing with
time t. This is equivalent to a smoothing pass. Vanishing
snow heights at boundaries can be maintained by adding a
negatively mirrored kernel at a boundary. For one dimension
and with σ ≡ 0 this is straightforward. For two dimensions
and σ = 0 as in snowfall on an ordinary scene the details
are more subtle, but the principle is the same (see [Itˆo92]
for a comprehensive description). The solution of a diffusion
equation at any time t can be obtained by convoluting the
initial conditions with solution kernel that becomes broader
and broader with increasing t. Like this, integration of the
differential equation (2) until time t can be translated to a
single integral.
In this paper, we adapt the kernel-based solution method
to generate realistic snow covers at a certain time during
snow fall in one step, that is we propose an approximate and
fast solution scheme to (2). The scheme allows to include
the two non-height-field aspects in snow covers, bridges and
overhangs, in a pre- and a post-processing step.
The scheme is based on the elimination of the term σ by
assuming an initial snow height that is distributed all over

c 2011 Technische Universit¨at Dresden
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

1840

N. v. Festenberg & S. Gumhold / Diffusion-Based Snow Cover Generation

the scene without observing any boundary conditions. The
initial snow height is a first guess which can be specified exactly or stabilized in terms of Fearing [Fea00] with our snow
diffusion kernel. Implicitly such a kernel has been proposed
in [vFG09] in the term ‘snow catchment area’, but it was not
consequently exploited there.
5. The Algorithm for Snow Cover Generation
For the implementation of the mathematical model we start
by depth peeling the scene as described in [vFG09]. The
scene to be covered with snow is converted into layers of
depth textures. Potential mesh inconsistencies are circumvented like this, and the method also becomes independent
of mesh resolution.
The point sampling cached as depth texture layers is
the discretized basis for the numerical solution scheme
(Figure 3). Every point pijk is a future snow site. It stores
its snow capacity cijk ∈ ] 0 . . ∞ [, that is the free space above
itself, its height zijk and its indices {ij k}. Our algorithm then
aims at computing all snow heights hijk .
5.1. Snow bridge generation
Before evaluating the snow diffusion kernel for each site p
we create the sites for snow bridges. This is a pre-processing
step that simply fills gaps in the depth texture layers up to a
choosable limit bmax .
We iterate through all columns and rows of the top most
depth peel layer. We try to find gaps along sections in each
row and column. The gaps are characterized by step-like local
minima in the z-coordinates. When these sections are shorter
than a bmax new snow sites p 0jk are created along the path.
For instance if a height sequence of {1, 0, 0, 0, 1} is found in

Figure 4: The algorithm proposed here comprises a consistent scheme to create snow bridges, and realistic snow
border texturing method. Left panel: without bridges, right
with bridges. Close-up view from Figure 5.
{p 0j−2k , p 0j−1k , p 0jk , p 0j+1k , p 0j+2k }, three bridge sites would
be placed on top of {p 0(j−1 . . j+1)k }, with heights {1, 1, 1} in
the simplest case.
These heights are interpolated parabolas to make the
bridges’ base look more real. Each snow bride site generated like this is marked with a coefficient representing its
distance to the bridge supports. This coefficient is used to
lower the initial snow height accumulated on it before kernel
evaluation. Figure 4 shows examples of snow bridges, and
in Figure 5 the influence of a varying and exaggerated bmax
is illustrated. Note that in realistic cases as, for example on
the model in Figure 6 the bridges cover ranges of one or two
snow sites only. Generally, bmax should be about half as large
as the maximum snow height, in the scenes presented here
we found that bmax = 3% of the scene diameter is realistic.

Figure 3: Kernel-based snow height computation. Red balls are kernel members, grey balls are not, colour mixtures indicate
membership depending on the maximal snow height hmax . Evaluating the snow height kernel on the depth texture layers around
snow site p. R candidate cylinder radius, r local snow segment edge distance, z relative height difference within the kernel
(where the contribution of h0 as explained in the text is omitted because they cancel out each other), c snow capacity of a site.
b. Bridge and overhang formation. g 1 guarantees exactly vanishing snow heights at edges, g2 is the overhang offset vector. The
kernel weight on the bridge is marked negative to indicate the snow height reducing influence.
c 2011 Technische Universit¨at Dresden
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

1841

N. v. Festenberg & S. Gumhold / Diffusion-Based Snow Cover Generation

Figure 5: From left to right: Snow created with the snow diffusion kernel, with bridges, with bridges and overhangs.

Figure 6: Variation and exaggeration of the maximum snow bridge length bmax = 2.5%, 10% and 33% of the horizontal scene
diameter.
5.2. Numerical approximation for mathematical
snow distribution
Instead of pre-classifying the sampling into snow patches
with separate boundaries we directly process the sampling
data. We use a discretized and truncated solution kernel K
and evaluate it in a local environment for every snow site.
As mentioned earlier, the central idea is to eliminate the
snowfall rate σ , where σ is analogue to the inhomogeneity in
(2). We achieve this by distributing an initial snow height h0
on all snow sites p. This is equivalent to (virtually) assuming the snowfall σ to occur much faster than the diffusion
D ∇ 2 h. Previous works also redistributed an initial snow
height in the same spirit with stability tests (e.g. [Fea00]). If
the capacity c of a site p is lower than h0 , the initial snow
height is decreased so that it fits, and on bridge sites, too
(Section 5.1).
The smoothing process of h0 at a site pijk is based on the
support size of the kernel K. It aims at computing the change
h of the initial snow height h0 . The kernel range is defined
by the kernel radius R. The radius R specifies a cylinder
around each p in the scene (Figure 3a). All sites within the
cylinder are candidates for the members of the kernel site set
Np . Np is a subset of the cylinder, the elements of Np are
denoted with p .

In nature, snow is not only exchanged symmetrically between snow sites, that is the choice of the p is not unique.
However, for simplicity we compute it uniquely from the total initial height differences z = (z(p ) + h0 (p )) − (z(p) +
h0 (p)). Here h0 (p) = min (c(p), h0 ), that is h0 is globally constant as long as there are no snow capacity limitations. The
exact conditions are a little subtle to formalize, but straightforward to identify. The basic idea is to tentatively choose
the p in a neighbouring height column within the cylinder
with the minimum z. If the snow capacities are both larger
than 2 h0 this choice is kept. If not, for example the next
upper neighbour in the height span of p with sufficient snow
capacity is chosen. In Figure 3(a), this choice is sketched in
the sites marked with two colour balls.
When all p ∈ Np are specified, the actual snow diffusion
kernel can be evaluated, that is the computation of h for each
p. The computation consists of three steps: (a) performing
the convolution itself to compute h, (b) exactly fitting the
boundary conditions with a factor g 1 (r) ∈ [0 . . 1] and (c)
correcting the result with a visibility factor v ∈ [0 . . 1]. We
found that the final snow height is best computed in the form
h(Np , p) = g1 (Np )v(Np )(h0 −

h(Np )).

(3)

Let us discuss all the terms of (3) in detail now. The
snow height change h is simply the weighted sum of

c 2011 Technische Universit¨at Dresden
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

1842

N. v. Festenberg & S. Gumhold / Diffusion-Based Snow Cover Generation

designer. The right most picture in Figure 5 shows the result
when choosing

the convolution
h=

K(p, p )λ( z(p, p )),

(4)

p ∈Np

where K(p, p ) = K(ρ = |p − p |horizontal ) is the kernel
weight
2
1
− ρ
e 2R2 ,
K= √
2
2π R

(5)

clamped and normalized at R. R is the kernel size. It can be
chosen to determine the steepness of the snow edge profiles.
We found R as 5% of the scene diameter to be appropriate.
The symbol λ in (4) denotes the clipped height difference
λ( z) =

z,
sgn( z)h0 ,

if | z| < h0 ,
else,

(6)

with z as indicated in Figure 3(a) and defined earlier. The
clipping of z guarantees a h that lies in the interval [−h0 . .
+ h0 ], that is non-negative snow heights for any kernel member configurations. Boundaries in the snow cover are consequently defined where z < −h0 . There the snow height
must be zero. Unfortunately, it is impossible to weight (4) in
a way that these boundary conditions is always met exactly.
For a boundary given by a linear half space it is possible like
in one dimension, but for any curved or angular boundary
a general solution cannot be expressed in a tractable form
(see [Itˆo92] for a rigorous analytic treatment). Therefore, we
apply a local correction term relying on a local edge distance
r as shown in Figure 3(a). We normalize this r with R to
[0 . . 1] so that r = 1 means an edge distance of R. For all p
with a boundary in its Np this gives a r < 1, and we use it to
make h smoothly vanish for r → 0 with
g1 (r(Np )) =

r(2 − r) with

0≤r≤1

|g2 (r)| = (1 − r)2 (1 − (1 − r)2 )

(8)

and as g2 ’s direction the smoothed direction of r where r
points towards the closest boundary as shown in Figure 3.
Bridges are given a more realistic look by using (8) with
r mapped on [−1 . . 1]; this makes the snow height bended
inwards at bridges as can be seen in Figures 5 and 6.
5.4. Snow surface visualization
To visualize the snow surface computed with (3) over the
height span map it is convenient to convert it to a triangle
mesh. This is beneficial because all rendering approaches
support triangle meshes so that a variety of processing tools
become available. The visual impression of the triangulated
snow cover can be improved significantly by mapping a snow
material onto it. Bump mapping applied to a procedural 3D
texture with Perlin noise produced convincing results except
close to the boundaries of the snow cover as illustrated in the
bottom close-up in Figure 7.
To circumvent this synthetic look, we propose to blend the
3D material close to boundaries with an alpha mask generated
from photographs of real snow boundaries (Figure 8). In

(7)

in (3). The function g 1 (r) is a quarter circle. This shape is well
suited to keep the previously computed slopes as unchanged
as possible.
The visibility v of a snow site p is computed by summing
up the visibility (either 0 or 1) of each p ∈ Kp weighted
with the kernel K (5). In principle, it is also possible to use a
separate kernel designed for visibility computation only.

5.3. Snow overhang generation

Figure 7: Snow ground interface with (top panel) and without (bottom panel) alpha mask at the border.

Overhangs can arise in a snow cover in nature when the snow
flakes are extremely adhesive or after snow compaction due
to snow aging. They account for the wad-like view of fresh
snow as pronounced in [NIDN97]. We can add them to our
snow contribution scheme in a post-processing step. To this
end, we compute a 2D offset vector g2 (r) that is to be added
to the final snow mesh as shown in Figure 3(b). The length
of g2 (r) must be chosen in a way that it vanishes both for
r = 0 and for r = 1, beyond that the choice is up to the

Figure 8: Alpha Mask used to increase realism of snow
boundaries.

c 2011 Technische Universit¨at Dresden
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

1843

N. v. Festenberg & S. Gumhold / Diffusion-Based Snow Cover Generation

Figure 7 and its top close-up show the result of this operation
is shown.
In what follows we first describe the triangle mesh generation and then the parameterization approach used for the
alpha mask. In between these two steps we compute vertex
normals based on triangle normals weighted by area.
5.4.1. Triangle mesh generation
First, all symmetric pairs {p, p } which are direct neighbours
in i or j direction within the height span map are connected
to a quad mesh. Here, p and p denote the world positions
of the snow sites including the accumulated snow height
and potential overhangs. Concave corners of the boundary
of the quad mesh are smoothed by adding a triangle cutting
the concave corner short. Each remaining quad is subdivided
onto two triangles by locally minimizing the largest interior
angle of the resulting triangles.
5.4.2. Texturing
The alpha mask is parameterized over the texture coordinates
u and v, where u runs along the boundaries and v corresponds
to the distance to the boundary. The mask is cyclic in u and
the major snow boundary is located around v = 1/2. The
bottom half of the mask is used where snow settles only
very sparsely, that is on very steep areas of the scene. The
most challenging step in our texture mapping approach is
the computation of the texture coordinates (u, v) for vertices
close to the mesh boundary, where the alpha mask is still
partially transparent. The following requirements lead to a
parameterization suitable for our purpose:
(1) the mapping to the uv-domain should be as isometric
as possible close to the boundaries,
(2) zigzag boundaries at steep slopes should not introduce
distortion in the texture map (compare Figure 9a),
(3) the v coordinate should be 0 at boundaries with thin
snow cover and increase to 1/2 with increasing thickness of the snow cover (compare Figure 9b)
(4) to avoid visible seams orthogonal to the snow boundary, along each boundary loop the texture coordinate u
should cover an interval [0, k] with k being an integer
number.

ni

pi
qi
Ti

vi , s =

a)

ni × Ti
, pi qi
ni × Ti

b)

vi , =

Figure 9: (a) To handle zigzag boundaries, initial v coordinates v i,s are computed as the signed distance of boundary
point pi to the corresponding point qi of the smoothed boundary loop (illustrated in red). The mesh normal ni is used to
compute the signed distance in 3D. (b) Depending on the
angle γ between the snow cover and the ground surface the
additional offset v i,γ is computed such that it becomes 1/2
for the orthogonal case (left panel) and zero for no angle
between snow cover and ground (right panel).

DMK03]. We chose a simpler approach based on a marching
method similar to [KS98] as we realized that the isometry
requirement is not of highest priority. Much more important
is the initial choice of the texture coordinates for vertices
along the boundary loops that meet the remaining three requirements. Our solution to this initialization can be used
with any parameterization technique.
Initialization of boundary vertices. To support zigzag
boundaries and snow covers of different thicknesses we first
compute the v coordinate vi for each boundary vertex pi as
the sum of two contributions v i,s and v i,γ . v i,s is computed
as the signed distance to a smoothed version of the boundary
loop as illustrated in Figure 9(a). The smoothed locations
qi are computed by four convolutions of the boundary with
the mask 1/4 · (1 2 1) where each convolution replaces
qi with 1/4(qi−1 + 2 qi + qi+1 ). Then we estimate the tangent direction Ti of the smoothed boundary with the mask
(−1 0 1) and compute a normalized reference direction
from the cross product of the surface normal ni at pi and Ti .
The reference direction is orthogonal to the smoothed boundary pointing towards the snow surface. The signed distance
is finally computed according to the formula in Figure 9(a)
from the dot product with the vector pi −qi .

To simplify matters we compute a scaled version of u and
v, such that both are proportional to distances within the
triangle mesh. In the end, we rescale the coordinates by an
affine texture transformation.

For the computation of the term v i,γ , we compute the angle
γ between the snow surface and the ground as illustrated in
Figure 9(b). γ is computed in the quad mesh during triangle
mesh generation. For each edge of the quad mesh and each
quad diagonal, we compute γ and keep track of the maximum
value for each boundary vertex. Finally, we linearly map the
angle γ to the interval [0, 1/2] by division with π .

A large number of techniques exist to compute parameterizations that fulfil the first requirement, for example stretch
minimization [GGH02], angle preserving mappings [Flo03]
or mixed area and angle preserving techniques [DMA02,

The last step during initialization is the computation of the
u coordinates. Here we simply parameterize the smoothed
boundary loops over their arc lengths and scale the us to
ensure that the total length is a multiple of an integer.

c 2011 Technische Universit¨at Dresden
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

1844

N. v. Festenberg & S. Gumhold / Diffusion-Based Snow Cover Generation

Texture coordinate propagation. When using a marching method to propagate the texture coordinates from the
boundary to the interior, we can stop as soon as the texture
coordinate v reaches the upper boundary of the alpha mask
texture. This is a major advantage in speed over standard
parameterization approaches. We propagate the distance coordinate v in a very similar manner as [NK02]. The only
difference is a modified update step to handle obtuse triangles and to simultaneously propagate the u coordinate. Our
approach does not compute the exact distance to the boundary as for example in [SSK∗ 05, BK07]. Instead, the distance
field is smoothed out a bit resulting in texture coordinates
with less discontinuities.
For propagation, we label the mesh vertices as processed
or unprocessed. The boundary vertices are initialized as processed. A priority queue is filled with all triangles that exactly
have two incident processed vertices. The negative v coordinate propagated by the update step to the unprocessed vertex
is used as priority. Finally, we keep extracting triangles with
highest priority (lowest v) from the queue, setting the v coordinate of the unprocessed vertex, marking it processed and
updating the queue by adding new triangles adjacent to the
current triangle and remove the ones containing the newly
processed vertex. We stop propagation when the queue is
empty or the lowest v coordinate is larger than 1, setting the
v coordinates of all remaining unprocessed vertices to 1.
The modified update step is illustrated in Figure 10. The
goal is to propagate the texture coordinates inside the shown
triangle from the processed vertices p1 and p2 to the unprocessed vertex p3 . Again we first propagate the v coordinate.
We assume that the v coordinate can be linearly interpolated
along the bottom edge. This makes a lot of sense if we assume
the boundary to be a straight line painted red in Figure 10. It
can be reconstructed from a common tangent to the circles
of radii v 1/2 around p1/2 . It can be easily seen from the figure
that the distance v q (t) of points q (t) = p1 + t p on the
edge p1 p2 depend linearly on t. We define v 3 by minimizing
the distance v q (t) plus the distance from q (t) to p3 over all

t ∈ [0, 1]. This leads to a quadratic equation in t given without derivation in Figure 10. We remove solutions outside the
interval [0, 1] and select the optimal t value t ∗ yielding the
minimal v 3 from the pruned solution set augmented by the
interval boundaries {0, 1}. Finally, we exploit t ∗ to propagate
the u coordinate according to u3 = u1 + t ∗ u.
It is worth mentioning that some care has to be taken where
the u coordinates wraps around, that is there are edges and
triangles with a u coordinate a bit above zero on one end and
a bit below the maximum value k of the boundary loop on the
other end. This problem has to be accounted for during the
update step as well as before using the texture coordinates
for rendering.
6. Results
In Table 1, resolutions of the depth textures, kernel sizes,
kernel computation times and texture coordinate generation
times are listed for all figures. The kernel radius is given
in percent of the scene diameter. Our algorithm prototype
was tested on a Intel Core2Duo CPU with 2.2 GHz, 2 GB
RAM and a NVIDIA Quadro FX 570M GPU. Except for the
p3

p

p2

d

p3

p1

v
p1 h 2

min
i vq (t )
t=0
tt=1
1

p1
q(t)

p2

vq(t)

v2

v1

v 2 v1
2
p

v2

p3 q t
at 2 2bt c 0
2

p h2

a
b
c

h2

p, d
p, d

2

d

2

v2

Figure 10: Propagation of texture coordinates based on
known information at points p1 and p2 . Circles with the vcoordinate as radius allow reconstruction of the red boundary line.

Table 1: Computation times of the prototype, the run marked with ∗ is computed with the method from [vFG09], is composited from three
separate snow meshes (birch tree, banister and the rest), the resolution there is a net resolution and the computation times are given for the full
scene.

Figure
Figure 5
Figure 11 (left)
Figure 11 (right)
Figure 7
Figure 12
Figure 13
Figure 6
Figure 14 (top)
Figure 14∗∗ (bottom)

Resolution

Snow sites

Kernel size

Computing (3)

Kernel time per site

Texture computer

258 × 200
83 × 100
83 × 100
100 × 100
202 × 200
139 × 100
197 × 200
122 × 300
ca. 700 × 700

47908
10773
10773
10155
148180
12216
43885
56326
344267

5%
Red
5%
5%
5%
5%
8%
5%
3–6%

ca. 23000 ms
703 ms∗
1327 ms
1489 ms
102.9 s
1998 ms
ca. 15200 ms
26767 ms
654.4 s

ca. 0.4800 ms
–
0.1237 ms
0.1463 ms
0.6941 ms
0.1636 ms
ca. 0.35 ms
0.4752 ms
1.901 ms

ca. 3300 ms
–
1037 ms
980.5 ms
5972 ms
1277 ms
ca. 2400 ms
3261 ms
25530 ms

c 2011 Technische Universit¨at Dresden
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

N. v. Festenberg & S. Gumhold / Diffusion-Based Snow Cover Generation

1845

Figure 11: Comparison between [vFG09] left and the model described in this paper. The right picture was also published in
[Tra09].
site, too. Rendering was done in 3DS Max 9. It took on
average a minute per frame.
Figure 11 shows a comparison between the method presented here and the proposal from [vFG09]. Figures 5 and 6
show different geometries covered in snow. Figure 6 shows
how different maximum bridge lengths affect the result, and
in particular that realistic snow bridges are mostly small in
length. In Figure 12 this is demonstrated for a ground model
with fine details: the gaps in the pine tree’s twigs and needles
there are frequently bridged by single bridge snow sites.
Figure 13 demonstrates that our snow accumulation algorithm can also be used to create arbitrary covers such as
grass covers or gilding, simply by changing the snow surface
material. In Figure 14 two more scenes in snow are depicted.
Note the difference in the scale of the border alpha map in
the top inset of Figure 14 in comparison to the inset 11. This
scale is related to the size of single snowflakes which are

Figure 12: A pine tree in snow.

depth peeling we did not exploit parallel GPU programming.
In our implementation, the computation of the kernels took
more than 95% of the total geometry generation time. We
therefore specified the kernel computation time per snow

Figure 13: A sculpture coated with grass and gold instead
of snow with the same geometry generation algorithm.

c 2011 Technische Universit¨at Dresden
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

1846

N. v. Festenberg & S. Gumhold / Diffusion-Based Snow Cover Generation

Figure 14: A monument and a complex scene in snow.
more visible the closer the view. The complex scene in the
bottom of Figure 14 is composited out of three snow covers:
one for the birch tree, one for the banister and one for the
rest of the scene. Flights through both scenes are given in the

supplementary material. In addition, a snow cover growth animation is provided. The animation consists of 64 subsequent
snow cover meshes. The mesh data was created by iteratively accumulating solutions of Equation (2) with a diffusion

c 2011 Technische Universit¨at Dresden
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

N. v. Festenberg & S. Gumhold / Diffusion-Based Snow Cover Generation

kernel as small as a four-nearest-neighbours Laplacian without bridges and overhangs.
7. Discussion and Limitations
Comparison to other works is subtle, because there is no
established benchmark for snow cover generation. Moreover, all published methods have slightly different foci. Our
method is best comparable to [vFG09]. As shown in Figure 11 and Table 1 our method is slower, but significantly
more realistic. Furthermore, our method is more versatile,
as it defines snow height locally without the snow segment
limitations as in [vFG09]. This enables our new method to
cope with more complex geometries.
The complexity of our snow diffusion kernel computation
is about O(n2 ) as shown in Figure 15 where n is the number
of snow sites. Our snow computation scheme can in principle
be parallelized. All kernels can be computed simultaneously.
Moreover, most of the pairs {p, p } are symmetric and used
much more often than once during computation. Therefore,
we are convinced that parallel implementation can drastically
reduce computation times.
Besides computation times, our model performs well compared to others either in the degree of realism (as, e.g. [Fea00,
Tok06, OS04, vFG09] or the small portion of manual processing (e.g. [NIDN97]. We therefore believe that the method
proposed here is an important step towards the efficient accumulation of snow in virtual worlds in photorealistic quality.
As shown in the Supporting Information, diffusion-based
snow cover generation can also be used to create snow cover
growth animations. However, it is not straight forward to analytically include snow bridges into a height field approach.
Accumulating iterative solutions of Equation (2) with very
small diffusion kernels as in the supplementary animation is
probably a good starting point. This is because small kernels significantly simplify the choice of the kernel members
within the candidate cylinder.
A systematic challenge in visual snow simulation is the influence of long-range correlations in snow covers in the real
world. These correlations are, for example wind transport,

1847
∗

melting due to solar radiation (as addressed in [MGG 10])
and the mechanical response of the ground to the snow load.
Each of these processes is quite complex in itself, and all
interact with each other. The only way to develop a physically sound model in this situation is to start by formalizing
the most dominant factor first. This is what we believe the
diffusion height field (2) to provide, and this has not been
done before. Thus, we are confident that the diffusion approach is a good starting point for the future creation of
virtual snow scenes. The influence of wind transport in the
model would probably be the next visually relevant improvement. It would enter Equation (2) as a varying snowfall rate
σ (x, t). The exact values of σ (x, t) would be computed in
a windfield simulation. This would yield more snow on lee
sides and less in windward places. Eventually the computation could be simplified by virtue of modal analysis of the
windfield or other model reduction methods (cf. [TLP06]).
The influence of temperature is probably best fit into the
transport coefficient D of (2): smaller D would correspond
to higher temperatures with wet and unstable snow, whereas
large D would mean cold and stable snow. However, temperature does not only influence the macroscopic shape of
snow but also its optical properties. We anticipate that snow
temperature must also be reflected in the surface textures for
convincing results.

8. Conclusion and Future Work
We presented a method for snow accumulation constructed
on the base of a physical model for surface growth under adhesive particle impingement. Our method generates realistic
snow surface textures. The method is tilable and in principle
parallelizable. As the method and the theoretical foundation stand now they might prove efficient for fast and realistic support in 3D modelling tools. Moreover, snow cover
growth animations could be created be directly making use
of Equation (2). The interaction of the snow mass with the
ground, that is the ground’s mechanical feedback to the snow
load is a promising future work. It can be visually important, for example when trees or smaller plants are covered
with wet and heavy snow. The optical properties of snow
could also be related to physical measurements as given in
[MM52]. A more challenging project would pursuit to base
snow distribution on a theoretical framework that directly
creates bridges, overhangs and snow compaction. Here, 3D
reaction–diffusion systems or the Boltzmann equation are
promising approaches.

Acknowledgements

Figure 15: Computation times for different resolutions and
kernel radii. The reference scene is the plant shown in Figure
14 bottom.

The authors thank C. Schubert and H.-G. Maas for their
support in creating 3D-models and in rendering the sample
scenes, and xfrog.com and turbosquid.com for their free 3D
models. The authors thank the anonymous reviewers for their
constructive comments helping to improve this paper.

c 2011 Technische Universit¨at Dresden
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

1848

N. v. Festenberg & S. Gumhold / Diffusion-Based Snow Cover Generation

References
[BK07] BOMMES D., KOBBELT L.: Accurate computation of
geodesic distance fields for polygonal curves on triangle
meshes. In Proceedings of the VMV (Saarbr¨ucken, Germany, 2007), pp. 151–160.
[CC07] CHAN W. L., CHASON E.: Making waves: kinetic processes controlling surface evolution during low energy
ion sputtering. Journal of Applied Physics 101, 12 (2007),
121301-1–121301-46.
[DJ05] DONNER C., JENSEN H. W.: Light diffusion in multilayered translucent materials. In Proceedings of SIGGRAPH ’05: ACM SIGGRAPH 2005 Papers (New York,
NY, USA, 2005), pp. 1032–1039.
[DMA02] DESBRUN M., MEYER M., ALLIEZ P.: Intrinsic parameterizations of surface meshes. Computer Graphics
Forum 21, 3 (2002), pp. 209–218.
[DMK03] DEGENER P., MESETH J., KLEIN R.: An adaptable
surface parametrization method. In Proceedings of the
12th International Meshing Roundtable 2003 (Santa Fe,
NM, USA, Sept. 2003).
[DMSB00] DESBRUN M., MEYER M., SCHRO¨ DER P., BARR A.
H.: Anisotropic feature-preserving denoising of height
fields and bivariate data. In Proceedings of the Graphics
Interface (Montr´eal, Canada, 2000), pp. 145–152.
[Dud05] DUDASH B.: Snow Accumulation. Tech. Rep.,
NVIDIA Corporation, 2005.
[EW82] EDWARDS S. F., WILKINSON D. R.: The surface statistics of a granular aggregate. Proc. R. Soc. Lond. A 381,
1780 (1982), 17–31.
[FB07] FOLDES D., BENESˇ B.: Occlusion-based snow accumulation simulation. In Proceedings of the VRIPHYS
(2007).
[Fea00] FEARING P.: Computer modelling of fallen snow. In
SIGGRAPH ’00: Proceedings of the 27th Annual Conference on Computer Graphics and Interactive Techniques
(New York, NY, USA, 2000), ACM Press/AddisonWesley Publishing Co., New York, NY, USA, pp. 37–46.
[Flo03] FLOATER M. S.: Mean value coordinates. Computer
Aided Geometric Design 20, 1 (2003), 19–27.
[FO02] FELDMAN B. E., O’BRIEN J. F.: Modeling the accumulation of wind-driven snow. In SIGGRAPH ’02: ACM
SIGGRAPH 2002 Conference Abstracts and Applications
(New York, NY, USA, 2002), ACM Press, New York,
pp. 218–218.
[GGH02] GU X., GORTLER S. J., HOPPE H.: Geometry images.
ACM Transactions on Graphics 21, 3 (2002), 355–361.

[HAH02] HAGLUND H., ANDERSSON M., HAST A.: Snow
accumulation in real-time. In Proceedings of SIGRAD
(Nork¨oping, Sweden, 2002).
[Itˆo92] ITOˆ S.: Diffusion Equations. American Mathematical
Society, 1992.
[KS98] KIMMEL R., SETHIAN J. A.: Computing geodesic paths
on manifolds. In Proceedings of National Academy of Science USA (Washington, DC, USA, 1998), pp. 8431–8435.
[LGG*07] LU J., GEORGHIADES A. S., GLASER A., WU H., WEI
L.-Y., GUO B., DORSEY J., RUSHMEIER H.: Context-aware
textures. ACM Transactions on Graphics 26, 1 (2007),
doi:10.1145/1189762.1189765.
[LZK*04] LANGER M. S., ZHANG L., KLEIN A., BHATIA A.,
PEREIRA J., REKHI D.: A spectral-particle hybrid method
for rendering falling snow. In Proceedings of the Eurographics Symposium on Rendering (Nork¨oping, Sweden,
2004).
[MC00] MURAOKA K., CHIBA N.: Visual simulation of snowfall, snow cover and snowmelt. icpads 00 (2000), pp.
187–194.
[Mel74] MELLOR M.: A review of basic snow mechanics. In
Proceedings of the Grindelwald Symposium, IAHS Publication No. 114 (Wallingford, UK, 1974).
[MGG*10] MARE´ CHAL N., GUE´ RIN E., GALIN E., M´ERILLOU
S., M´ERILLOU N.: Heat transfer simulation for modeling
realistic winter sceneries. Computer Graphics Forum 29,
2 (2010), pp. 449–458. (Proc. Eurographics’10).
[MM52] MIDDLETON W. E. K., MUNGALL A. G.: The luminous directional reflectance of snow. Journal of Optical
Society of America 42 (1952), 572–579.
[MMAL05] MOESLUND T., MADSEN C., AAGAARD M., LERCHE
D.: Modeling falling and accumulating snow. In Vision,
Video and Graphics. E. Trucco and M. Chantler (Eds.).
Heriot Watt University, Edinburgh, The Eurographics Association (2005), p. 8.
[Nak54] NAKAYA U.: Snow Crystals: Natural and Artificial.
Harvard University Press, Cambridge, MC, USA, 1954.
[NIDN97] NISHITA T., IWASAKI H., DOBASHI Y., NAKAMAE E.:
A modeling and rendering method for snow by using metaballs. Computer Graphics Forum 16, 3 (1997). (Proc. Eurographics’97) http://diglib.eg.org/EG/CGF/volume16/
issue3/CGF172.html.
[NK02] NOVOTNI M., KLEIN R.: Computing geodesic distances on triangular meshes. In Proceedings of the 10th
International Conference in Central Europe on Computer Graphics, Visualization and Computer Vision’2002
(WSCG’2002) (Prague, Czech Republic, Feb. 2002).

c 2011 Technische Universit¨at Dresden
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

N. v. Festenberg & S. Gumhold / Diffusion-Based Snow Cover Generation

[OBW*08] ORZAN A., BOUSSEAU A., WINNEMO¨ LLER H.,
BARLA P., THOLLOT J., SALESIN D.: Diffusion curves: a
vector representation for smooth-shaded images. ACM
Transactions on Graph. 27, 3 (2008), 1–8.
[ON05] ONOUE K., NISHITA T.: An interactive deformation
system for granular material. Computer Graphics Forum
24, 1 (2005), 51–60.
[OS04] OHLSSON P., SEIPEL S.: Real-time rendering of
accumulated snow. In Proceedings of the SIGRAD
(G¨avle, Sweden, 2004).
[PTS99] PREMOZ˙ E S., THOMPSON W. B., SHIRLEY P.: Geospecific rendering of alpine terrain. In Proceedings of the
Eurographics Workshop on Rendering (Granada, Spain,
1999), pp. 107–118.
[SEN08] SALTVIK I., ELSTER A. C., NAGEL H. R.: Parallel methods for real-time visualization of snow. In Applied Parallel Computing. State of the Art in Scientific Computing. Springer-Verlag, Berlin, Germany, 2008,
pp. 218–227.
[SSK*05] SURAZHSKY V., SURAZHSKY T., KIRSANOV D.,
GORTLER S. J., HOPPE H.: Fast exact and approximate
geodesics on meshes. ACM Transactions on Graph. 24,
3 (2005), 553–560.

1849

[Sto05] STOFFEL M.: Numerical Modelling of Snow Using
Finite Elements. PhD thesis, ETH Z¨urich, 2005.
[TLP06] TREUILLE A., LEWIS A., POPOVIC Z.: Model reduction
for real-time fluids. In Proceedings of the SIGGRAPH
(New York, NY, USA, 2006).
[Tok06] TOKOI K.: Real-time rendering of accumulated
snow. In CGIV ’06: Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation
(Leeds, UK, 2006), pp. 310–316.
[Tra09] TRAUTMANN K.: Virtuelles
S¨achsische Zeitung (Dec. 29, 2009).

schneegest¨ober.

[Tur91] TURK G.: Generating textures on arbitrary surfaces using reaction-diffusion. In Proceedings of the
SIGGRAPH ’91: ACM SIGGRAPH 1991 Papers (New
York, NY, USA, 1991), pp. 289–298.
[vFG09] V. FESTENBERG N., GUMHOLD S.: A geometric algorithm for snow distribution of snow in virtual scenes. In
Proceedings of the Eurographics Workshop on Natural
Phenomena (Munich, Germany, 2009).
[WWXP06] WANG C., WANG Z., XIA T., PENG Q.: Realtime snowing simulation. Vision Computer 22, 5 (2006),
315–323.

c 2011 Technische Universit¨at Dresden
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

