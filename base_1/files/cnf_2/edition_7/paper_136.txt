Eurographics Symposium on Geometry Processing 2009
Marc Alexa and Michael Kazhdan
(Guest Editors)

Volume 28 (2009), Number 5

Diamond Hierarchies of Arbitrary Dimension
Kenneth Weiss1 and Leila De Floriani2
1 University

of Maryland, College Park
of Genova, Italy

2 University

Abstract
Nested simplicial meshes generated by the simplicial bisection decomposition proposed by Maubach [Mau95]
have been widely used in 2D and 3D as multi-resolution models of terrains and three-dimensional scalar fields,
They are an alternative to octree representation since they allow generating crack-free representations of the
underlying field. On the other hand, this method generates conforming meshes only when all simplices sharing
the bisection edge are subdivided concurrently. Thus, efficient representations have been proposed in 2D and
3D based on a clustering of the simplices sharing a common longest edge in what is called a diamond. These
representations exploit the regularity of the vertex distribution and the diamond structure to yield an implicit encoding of the hierarchical and geometric relationships among the triangles and tetrahedra, respectively. Here, we
analyze properties of d-dimensional diamonds to better understand the hierarchical and geometric relationships
among the simplices generated by Maubach’s bisection scheme and derive closed-form equations for the number
of vertices, simplices, parents and children of each type of diamond. We exploit these properties to yield an implicit pointerless representation for d-dimensional diamonds and reduce the number of required neighbor-finding
accesses from O(d!) to O(d).
Categories and Subject Descriptors (according to ACM CCS): I.3.5 [Computer Graphics]: Computational Geometry
and Object Modeling—Hierarchy and geometric transformations I.3.6 [Computer Graphics]: Methodology and
Techniques—Graphics data structures and data types

1. Introduction
Mathematical and scientific computing applications are often approached using a divide-and-conquer paradigm. Examples are the analysis and visualization of two- and threedimensional scalar fields, where the domain of the field is
adaptively decomposed into nested cells of a simple geometric shape. This divide-and-conquer paradigm produces effective multi-resolution models of the scalar field, which allow
an efficient manipulation of the field representation by generating suitable variable-resolution representations according to user requirements.
Subdivision strategies based on quadtrees and octrees
have been popular for regularly sampled data points inside
square or cubic domains. The drawback of these techniques
is that they introduce an exponential number of cells (of the
order d of the dimension of the domain) during each subdivision. Furthermore, both quadtrees and octrees (as well as
their d-dimensional generalization, that we call a 2d -tree) are
less suitable for generating conforming (i.e. crack-free) dec 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.
Published by Blackwell Publishing, 9600 Garsington Road, Oxford OX4 2DQ, UK and
350 Main Street, Malden, MA 02148, USA.

compositions since the bilinear or trilinear interpolant over
each square or cubic cell generates discontinuities on the
boundary of two adjacent cells if the cells have different
sizes. Thus, additional rules must be applied to ensure compatibility between neighboring cells.
In contrast, the simplicial bisection decomposition proposed by Maubach [Mau95] enables the generation of more
adaptive meshes over the same domain by breaking up each
2d -tree subdivision into d steps. This method generates conforming meshes, and thus crack-free representations of the
underlying field, only when all simplices sharing the bisection edge are subdivided concurrently. This is typically accomplished through a neighbor-finding operation which cycles through all such neighbors of a simplex σ and requires
O(|Neighbors(σ)|) accesses to the data structure. However,
despite the widespread use of these hierarchies, no general
analysis of the number of such neighbors in arbitrary dimensions has been carried out.
Efficient representations have been proposed for multi-

1290

K. Weiss & L. De Floriani / Diamond Hierarchies

resolution models of scalar fields in 2D and 3D based on
clustering maximal simplexes (triangles or tetrahedra, in
these cases) sharing their bisection edge into a so-called diamond. These representations exploit the regularity of the vertex distribution, and of the subdivision rule, which produces
diamonds of certain fixed shapes, to yield an implicit encoding of the hierarchical and geometric relationships among
the triangles and tetrahedra, respectively.
These subdivisions have many applications in the analysis
and visualization of scientific and medical data. They have
been applied to interactive terrain rendering [EKT01, LP02,
HDJ05] and multiresolution isosurface [GDL∗ 02] and interval volume extraction [WD08], as well as volume segmentation [KTY∗ 04], surface reconstruction [MVT03] and finite element analysis [Mau95, RL92]. Four-dimensional applications include multiresolution representations for timevarying volumetric datasets [LDS04, LPD∗ 04], acceleration structures for ray tracing [AMM07] and the analysis of bivariate complex functions [WB96]. Possible higher
dimensional applications include five-dimensional weather
data [HAF∗ 96], fixed point computations [Mau95] and the
solution spaces of parametrized equations.
Our contribution here is a formalization of the notion of
diamonds in arbitrary dimensions and their relationship to
the simplices generated by Maubach’s bisection scheme. We
frame our discussion of diamonds in terms of a cross product of two related simplicial decompositions of hypercubes.
Through a careful analysis of the properties of these structures, we prove that diamonds can be decomposed as a cross
product of these two structures and derive closed-form equations for the number of vertices, simplices, parents and children of each type of diamond. Specifically, we prove that ddimensional diamonds contain O(d!) d-simplices, and thus,
in general, neighbor-finding on these simplicial meshes requires O(d!) iterations. However, due to the regularity of
the diamond subdivision operation these simplices can be
grouped into O(d) clusters that are subdivided simultaneously. Consequently, while simplex-based representations
require O(d!) time to update and space to encode an extracted simplicial complex, diamond-based representations
can index O(d!) d-simplices, using only O(d) time and
space. Finally, we provide a compact pointerless representation for d-dimensional diamonds, enabling efficient representations for subsets of a hierarchy of diamonds.
The remainder of this paper is organized as follows. Section 2 provides some background notions on hypercubes and
simplicial complexes and introduces the notions of cross
simplex and cross complexes. Section 3 presents a review
of related work on regular simplicial subdivisions and on
extractions of conforming representations. Section 4 discusses simplicial d-complexes generated by subdividing a
d-dimensional hypercube. We first review Kuhn’s subdivisions and Maubach’s decomposition. We then introduce the
notion of fully subdivided hypercubes and prove relevant

properties. Section 5 discusses the hierarchy of simplexes,
which is a common representation for complexes generated
through Maubach’s subdivision rule and which has been investigated in arbitrary dimensions. In Section 6 we define the
hierarchy based on diamonds, that we call a hierarchy of diamonds in a dimension-independent way, while in Section 7,
we discuss and prove properties of diamonds related to their
geometry and to the hierarchical organization. In Section 8,
we introduce a dimension-independent representation for a
hierarchy of diamonds. In Section 9 we present an efficient
pointerless representation for conforming simplicial meshes
based on the diamond primitive and compare this representation to those based on the simplex primitive. Finally, we
draw some concluding remarks in Section 10.

2. Background Notions
In this Section, we review some background notions on hypercubes and on simplicial complexes and introduce some
concepts that we will use in the rest of the paper.

2.1. Hypercubes
Hypercubes, or d-cubes, are the d-dimensional analogues of
squares (2-cubes) and cubes (3-cubes). A 0-cube is a single
point, and a d-cube is created by extruding a (d − 1)-cube
one unit along a direction orthogonal to the previous (d −
1) directions (see Figure 1). Unless otherwise indicated, we
refer to axis-aligned hypercubes, where all such directions
are parallel with a coordinate axis in Rd .

Figure 1: Hypercubes: recursive definition.

Given a d-cube h, an i-face of h is any i-cube on the
boundary of h, where 0 ≤ i ≤ d. The number of i-faces of
a d-cube is given by 2d−i di . Of special importance are
the 0-faces, called vertices, the 1-faces, called edges and the
(d − 1)-faces, called facets of h.
The diameter of a polytope p is defined as the maximum
distance between any two points on the boundary of p. For a
d-cube h, the diameter is referred to as a diagonal and is
defined by opposite vertices, i.e. a pair of vertices whose
only common face is h. Let (v1 ,v2 ) be an unordered pair of
opposite vertices. Then the edge
√ between v1 and v2 forms a
diagonal of h and has √
length d. Similarly, a diagonal of an
i-face of h has length i.
c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

1291

K. Weiss & L. De Floriani / Diamond Hierarchies

Figure 2: Diagonal of a hypercube

(a) Cross simplex

2.2. Simplicial complexes
A d-dimensional simplex, or d-simplex, is the convex hull
of (d + 1) affinely independent points in the n-dimensional
Euclidean space. An i-face of a d-simplex σ is the i-simplex
defined by any (i + 1) vertices of σ. The number of i-faces
of a d-simplex is thus d+1
i+1 .
A simplicial mesh Σ is a collection of simplices Σ such
that all faces of a simplex σ ∈ Σ belong to Σ, and the interiors of simplices from Σ are disjoint. A simplicial mesh
is conforming if the intersection between any two simplices
σ1 and σ2 is either empty or a face belonging to the boundary of both of them. A simplicial complex is a conforming
simplicial mesh.
If d is the maximum dimension of any simplex in a simplicial complex Σ, then we call Σ a simplicial d-complex,
and refer to its d-simplices as cells. Further, Σ is a pure simplicial complex if all of its simplices are faces of cells in Σ.
For the remainder of this paper, all simplicial complexes are
assumed to be pure.
2.3. Cross simplexes and cross complexes
We utilize the simplicial join operation [RS72,Lic99] to generate higher-dimensional simplices from a pair of affinely
independent simplices and refer to the result as a cross simplex. Given an a-simplex σa and a b-simplex σb in affinely
independent subspaces, the cross simplex is the d-simplex
σ = σa ⊗ σb , defined by the vertices of σa and σb , where
d = a + b + 1.
For example, if σa is a 2-simplex (triangle) defined by 3
vertices and σb is a 0-simplex defined by a single vertex, then
the cross simplex σ = σa ⊗ σb is the 3-simplex (tetrahedron)
defined by the vertices of σa and σb (see Figure 3(a)).
Given simplicial i-complex Σi and simplicial j-complex
Σ j whose cells are pairwise affinely independent, we define
the cross complex Σd = Σi ⊗ Σ j as the simplicial d-complex
whose d-simplices are cross simplices of cells from Σi and
Σ j , i.e., ∀ cells σ ∈ Σd , σ = σi ⊗ σ j , where σi is a cell of Σi
and σ j is a cell of Σ j (see Figure 3(b)).
3. Related work
In this Section, we discuss methods related to simplicial subdivisions of a regular domain as well as the extraction of conforming simplicial complexes from these representations.
c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

(b) Cross complex

Figure 3: (a) The cross simplex of a triangle (blue) and a
vertex (red) is a tetrahedron. (b) A cross complex defined by
an 8 edge complex (blue) and a one edge complex (red).

The canonical subdivision of a d-cube into d! simplices
was originally proposed by Freudenthal [Fre42] and popularized by Kuhn [Kuh60] in the context of fixed points computations. [Bey00] provides a comprehensive review of simplicial refinement strategies.
Simplex bisection techniques subdivide each d-simplex
into two d-simplices along an edge. In 2D, Mitchell’s newest
vertex bisection [Mit92] chooses the edge opposite the most
recently introduced vertex of a triangle to bisect. An alternative approach [RL92] is to bisect the longest edge of each
triangle or tetrahedron. Maubach [Mau95] generalizes these
techniques to grids of arbitrary dimension, and proves that
simplex bisection, when applied to d-dimensional Kuhnsubdivided grids, generates at most d similarity classes of
d-simplices.
Simplicial bisection admits the extraction of highly adaptive simplicial complexes when all d-simplices sharing the
bisection edge are bisected concurrently. When using dsimplices as the modeling primitive, this requires an efficient
neighbor-finding algorithm to locate all such neighbors.
Symbolic neighbor-finding algorithms that run in logarithmic [Heb94, Mau96] or constant [EKT01, LDS04, AMM07]
time have been developed for regular grids in 2D [EKT01],
3D [Heb94], 4D [LDS04] and arbitrary dimensions [Mau96,
AMM07]. Maubach [Mau96] proves that the set of neighbors can be characterized by a connected (d −2)-surface and
conjectures that this surface is simply-connected. Although
the neighbor-finding algorithm must run O(|Neighbors(σ)|)
times to bisect a simplex σ, to the best of our knowledge,
there have been no attempts to describe the number of such
neighbors of a d-simplex on a regular grid. We prove that
there are O(d!) such neighbors, and reduce the number of
required spatial accesses to O(d).

1292

K. Weiss & L. De Floriani / Diamond Hierarchies

An alternate approach is to cluster the set of d-simplices
that share a bisection edge into diamonds. Efficient encodings of diamonds have been developed in 2D [LP02,HDJ05]
and 3D [GDL∗ 02, WD08], where the regularity of the updates and vertex distribution enables an implicit encoding
of the geometric and hierarchical relationships among the
simplices. Pascucci [Pas02] generalizes the diamond subdivision paradigm to general d-dimensional meshes but does
not provide a representation for such meshes or an analysis
of their properties in d dimensions. Linsen et al. [LPD∗ 04]
use this paradigm in the context of subdivision wavelets with
local support for 2D, 3D and 4D scalar fields. In 3D, their
adaptive structure is that of Gregorski et al. [GDL∗ 02].
4. Simplicial Subdivisions
In this Section, we discuss simplicial d-complexes generated
by subdividing a d-dimensional hypercube.

with diagonal ψ = (v1 , v2 ) by an affine mapping from the
vertices of ψ to (0d , 1d ).
An interesting property of Kuhn subdivisions, which will
be of use later and we prove now, is that it provides a Kuhnsubdivision to all faces of the initial hypercube.
Theorem 4.1 Let K(h) be the simplicial decomposition of a
d-cube h, and hi an i-face of h. Then K(hi ) = hi ∩ K(h) is an
i-dimensional Kuhn subdivision of the domain of hi .

4.1. Kuhn Subdivisions
Assume, without loss of generality, that a unit d-cube h is
embedded in a subspace [0, 1]d of Rn . Let 0d and 1d denote
a pair of opposite vertices forming a diagonal ψ = (0d , 1d )
from the lower left corner of h to its upper right corner. Also,
let e0 denote 0d and ei the i-th unit vector in Rd , e.g. e1 =
(1, 0, 0, . . .), e2 = (0, 1, 0, 0, . . .).
We refer to the d-simplex with vertices
vi =

Figure 4: Decomposition of a 3-cube into 3! = 6 simplices.

∑ ej
j≤i

as the base simplex S0 . For example, when d = 3, S0 has
vertices (0, 0, 0), (1, 0, 0), (1, 1, 0) and (1, 1, 1).
Let π be a permutation of the integers {0, 1, . . . , d − 1}
and let v = πv indicate the application of permutation π to
the coordinates of vertex v. For example, if v = (1, 12 , 0) and
π = {2, 0, 1}, then v = πv = (0, 1, 12 ). Finally, let πS denote
the application of π to each vertex of simplex S.
Then, a simplicial decomposition of h (due to Freudenthal [Fre42] and popularized by Kuhn [Kuh60]) into d!
cells (and their lower dimensional faces), which we denote as K(h), is defined by the mapping of each distinct dpermutation π onto the vertices of the base simplex S0 , i.e.,
K(h) = {π S0 |π is a permutation of {0, 1, . . . , d − 1}}. (1)
Since coordinate permutations do not modify 0d or 1d ,
every d-simplex in K(h) contains diagonal ψ of h. Also, the
ith vertex vi of any cell σ ∈ K(h) contains (d − i) coordinates
of value zero and i coordinates of value one. Thus, the edge
(0d , vi ) of σ is a diagonal of an i-face of h, and edge (vi , 1d )
is a diagonal of a (d − i)-face of h.
Kuhn subdivisions can be generalized to any d-cube h

Proof If i = 0 then K(hi ) is trivially a Kuhn subdivision.
Assume, without loss of generality, that h is a unit d-cube
with diagonal ψ = (0d , 1d ). We show that the (d − 1)-faces
of h are Kuhn-subdivided. Since d was arbitrary, the proof
for the remaining i-faces follows by induction.
Consider the simplicial (d − 1)-complex Σ obtained by removing vertex 1d from every simplex σ ∈ K(h). All cells of
Σ are defined by d vertices and are thus (d − 1)-simplices. In
fact, since ψ was the only diagonal of h, we can decompose
Σ into d subcomplexes, each containing simplices within a
(d − 1)-dimensional axis aligned hyperplane of Rd . In the
nth such subcomplex Σn ⊂ Σ this hyperplane can be defined
by the equation xn = 0. Thus, the d vertices of a cell σ ∈ Σ j
are of the form
n−1

vk = π( ∑ e j +
j=0

i

∑

e j ).

(2)

j=n+1

By projecting Σn onto the (d − 1)-dimensional subspace of
Rd that excludes coordinate xn , we obtain the (d − 1)! cells
of a Kuhn subdivided (d − 1)-cube (compare Equation 2 to
Equation 1).
Similarly, the simplicial complex defined by removing vertex 0d gives us Kuhn subdivisions for the d remaining
(d − 1)-faces of h, where each hyperplane is of the form
xn = 1.
4.2. Maubach Bisection
To bisect a d-simplex σ along one of its edges e, we insert
a new vertex vm at the midpoint of e and bisect σ by the
hyperplane defined by vm and the (d − 1) vertices of σ that
are not adjacent to e (see Figure 5). This creates two new dsimplices, covering the same domain as σ, each containing
vertex vm and one (but not both) of the endpoints of e.
c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

1293

K. Weiss & L. De Floriani / Diamond Hierarchies

(a) M0 (h) = K(h)

(b) M1 (h)

(c) M2 (h) = F (h)

Figure 5: Bisection of a 3-simplex along an edge e.

Maubach’s bisection scheme [Mau95] specifies the bisection edge for any cell σ in an initial simplicial d-complex Σ
or generated by repeated application of the bisection rule to
the cells of Σ. It depends only on the ordering of the vertices
of σ, and on the subdivision level σ of σ, which is initialized to zero for any cell in the original complex Σ. Given a
d-simplex
σ =(v0 , v1 , . . . , vk−1 , vk , vk+1 , . . . , vd ),
where k = d − ( σ mod d), the bisection edge is defined by
vertices v0 and vk , and its midpoint is vm = (v0 + vk )/2. The
two cells generated by the bisection rule have vertices
σ0 =(v0 , v1 , . . . , vk−1 , vm , vk+1 , . . . , vd )
σ1 =(v1 , v2 , . . . , vk , vm , vk+1 , . . . , vd ),
and the level of these simplices is incremented, e.g.
σ0

=

σ1

=(

σ + 1).

Maubach proves that when his bisection scheme is applied
to a Kuhn-subdivided d-cube h whose simplex vertices are
ordered as in Section 4.1, the generated d-simplices belong
to at most d similarity classes [Mau95]. Recall that simplices
are similar if there is an affine mapping consisting of only
uniform scaling, reflection, rotation and translation between
them. Since coordinate permutations are rigid mappings, the
d! cells in K(h) belong to the same similarity class. Furthermore, all cells at level ( mod d) belong to the same similarity class.
We denote the cells of K(h) as class-0 simplices, and in
general, a d-simplex σ as a class-i simplex if i = ( σ mod d).
Observe that the bisection edge of a class-i simplex is
aligned with the diagonal of a (d − i)-cube.
4.3. Fully Subdivided Hypercube
Consider the set of simplicial d-complexes Mi (h) generated
through repeated application of Maubach’s bisection to the
cells of K(h), where i denotes the level of the d-simplices
in Mi (h) and M0 (h) contains the d! cells of K(h). Since
each d-simplex in M0 (h) is replaced by two d-simplices
in M1 (h), M1 (h) contains 2 ∗ d! cells. Md (h) thus contains the 2d ∗ d! cells resulting from d such iterations, each
of which is of class-0 and is a factor of two smaller than
c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

Figure 6: Three consecutive Mi (h) simplicial complexes in
2D. (a) M0 (h) is equivalent to K(h) and has 2! = 2 triangles. (b) M1 (h) has 4 triangles. (c) M2 (h) is equivalent to
F(h) and has 4!! = 8 triangles.

those of M0 (h). We call Md (h) a Fully Subdivided Hypercube, which we denote as F(h).
We simplify the notation by observing that 2d ∗ d! can be
defined in terms of the double factorial function [Mes48] as
2d ∗ d! = (2d)!!
where the double factorial n!! is equal to 1 if n ∈ {0, 1} and
n ∗ (n − 2)!! otherwise. The values of (2i)!! for i = 1 . . . 4 are
2, 8, 48, 384.
4.3.1. Properties of F(h)
Let h be a d-cube with midpoint vc . Let K(h) be the Kuhn
subdivision of h along diagonal ψ, and F(h) its corresponding fully subdivided hypercube.
Lemma 4.1 For all cells σ ∈ F(h), vc is a vertex of σ. Furthermore, the bisection edge of σ is defined by vc and one of
the 2d vertices of h.
Proof This follows from the generation of F(h) in terms
of the Maubach complexes Mi (h) starting with M0 (h) =
K(h). After the first application of the bisection rule to the
cells of M0 (h), all cells σ of M1 (h) have the midpoint vc
of ψ as their d th vertex. Since none of the next d − 1 applications of the Maubach bisection scheme modify the d th
vertex, all cells of Md (h) = F(h) contain vc .
Since all cells in F(h) are class-0, the bisection edge is determined by the first and last vertices of σ. As described above,
the last vertex of σ is vc . Since σ is a class-0 simplex, its
bisection edge must be the diagonal of a d-cube. The only
edges of F(h) that satisfy this constraint are those between
vc and a vertex of h.
Recall that for a d-cube h, K(h) contains d! class-0 simplices. An alternate interpretation of F(h) is as a collection
of Kuhn-subdivided subcubes covering the domain of h and
centered at the midpoint of h.
Corollary 4.2 F(h) consists of 2d Kuhn-subdivided d-cubes
covering h and with side length half that of h. Thus, each of
the 2d subcubes contributes d! cells to F(h) for a total of
2d d! = (2d)!! cells.

1294

K. Weiss & L. De Floriani / Diamond Hierarchies

Theorem 4.3 Each i-face hi of a fully subdivided d-cube
F(h) is a fully subdivided (d − 1)-cube F(hi ).
Proof Consider the simplicial (d − 1)-complex obtained by
removing vertex vc from each cell σ ∈ F(h). Since each jface h j of a Kuhn-subdivided cube is a Kuhn-subdivided jcube, the removal of vc from a Kuhn-subdivided subcube
within F(h) adds the (d − 1)! cells of a Kuhn-subdivided
(d − 1)-cube to each of the d facets of h on which it is adjacent (see the proof of Theorem 4.1 for details). Since there
are 2d−1 subcubes adjacent with each facet hi of h, hi contains 2d−1 (d − 1)! = (2(d − 1))!! cells. Since these (d − 1)simplices are from a Kuhn-subdivided (d − 1)-simplicial
complex, they are all class-0 cells of dimension d − 1. Further, all cells of F(hi ) contain the midpoint of hi coinciding
with the midpoint of the 2d−1 subcubes adjacent to hi .
Corollary 4.4 Since all i-faces of F(h) contain their midpoint, F(h) contains ∑ 2d−i di = 3d vertices.
This enables us to define a fully subdivided d-cube as a
cross-complex of its boundary faces and vc .
Corollary 4.5 Let hi denote one of the 2 ∗ d facets of h. A
fully subdivided d-cube F(h) with midpoint vc can be decomposed as a cross-complex of the (d − 1)-simplices from
each F(hi ) and the singleton simplicial complex {vc }. E.g.
F(h) = {

F(hi ) ⊗ {vc }|hi is a facet of h}.

This provides a motivation for the double factorial notation.
Each of the 2d facets hi contributes (2(d − 1))!! cells of
F(hi )⊗vc , so F(h) contains 2d ∗(2(d −1))!! = (2d)!! cells.
We are also interested in the simplicial complex defined
by the simplices on the 2 ∗ d facets hi on the boundary of
F(h), which we call a fully-subdivided i-cube boundary and
denote as BF (h). Thus, BF (h) = ∪F(hi ) and is defined by
(2d)!! cells of dimension (d − 1). Each such cell corresponds to a cell of F(h) where the vertex at the center of
F(h) has been removed. Figure 7 shows examples of fully
subdivided i-cube boundaries for i = 1, 2, 3, and highlights
the center vertex of each facet of BF (h).

4-cube

(a) 1-cube

(b) 2-cube

(c) 3-cube

Figure 7: Fully subdivided i-cube boundary BF for (a) 1cube (b) 2-cube and (c) 3-cube.

by Maubach’s scheme. The two d-simplices σ1 and σ2 generated through a bisection operation on simplex σ are the
children of σ, and conversely, σ is the parent of σ1 and σ2 .
We can represent this relationship as a simplex tree, a binary tree whose root is a d-simplex from K(h). Furthermore,
the entire simplicial complex can be represented as a forest
of d! simplex trees whose roots are the class-0 cells of K(h).
All simplices in level of a simplex tree are congruent, and
the class, i, of a d-simplex σ at level σ is ( σ mod d). Further, the bisection edge of σ is the diagonal ψ of a (d − i)cube whose center is the new vertex.
The fundamental operation performed in applications on
such a forest of simplex trees is the extraction of adaptive
simplicial complexes. This is the basis for a well-known operation in computer graphics and scientific data visualization, called selective refinement. Let σ be a cell (node) of a
simplex tree τ and σ1 and σ2 its children. Since σ1 and σ2
cover the same domain as σ the hierarchical relationship between cells of τ defines a nested simplicial mesh. Thus, since
K(h) is a simplicial decomposition of the domain, repeated
application of the simplex bisection operation to cells in the
forest always provides a non-overlapping simplicial decomposition of the domain.
However, due to the local nature of the simplex bisection
rule, it does not, in general, generate valid simplicial complexes. Consider the faces of a cell σ in a simplicial complex
Σ generated according to the simplex bisection rule. Since Σ
is a simplicial complex, all faces adjacent to those of σ intersect only at common faces. However, after σ is bisected
along edge ψ, faces that were previously adjacent to ψ are
no longer conforming.
Thus, the bisection rule requires an additional constraint
to ensure the generation of valid simplicial complexes.
Namely, the level of all cells sharing bisection edge ψ of
a cell σ must be equal to that of σ before the bisection and
that all such cells are bisected concurrently with σ.
To satisfy this constraint, we must first find the set of
neighbors of cell σ along bisection edge ψ. The so-called
neighbor-finding operation, finds all simplices sharing (d −
1)-faces that have ψ as a common face. Neighbor finding can be accomplished by storing pointers to each of the
d + 1 neighboring cells [Mau95] or symbolically by manipulating location codes that uniquely identify each cell in
the forest [Heb94, Mau96, EKT01, LDS04, AMM07]. Symbolic neighbor-finding enables a pointerless representation
for cells in the forest, thus enabling each neighbor-finding
operation to be carried out in O(1) time. However, since each
neighbor must be found, this operation must be performed
O(|Neighbors(σ)|) times.

5. Simplex Hierarchies
Consider a d-dimensional hypercubic domain h subdivided
according to the Kuhn subdivision rule into d! cells. A hierarchical relationship exists between the simplices generated

6. Hierarchy of Diamonds
We have seen that conforming updates to a simplicial complex generated using Maubach’s bisection scheme are rec 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

1295

K. Weiss & L. De Floriani / Diamond Hierarchies

lated to the set of d-simplices surrounding a common bisection edge. An alternative to simplex bisection consists
of clustering d-simplices surrounding a common bisection edge into a new primitive, called a diamond [Pas02,
GDL∗ 02] and considering the hierarchical relationships between diamonds rather than those between simplices.
A diamond is the set of all d-simplices with a common
bisection edge, called the spine of the diamond. Since all dsimplices within a diamond are congruent, there are d similarity classes of diamonds and a diamond whose d-simplices
belong to class-i is referred to as an i-diamond. Its spine is
the diagonal of a (d − i)-cube.
A diamond δ is subdivided by bisecting all of its dsimplices using Maubach’s bisection scheme. Thus, subdivision doubles the number of cells within δ and we denote
its corresponding subdivided diamond as δs .
Let σi be an i-face of a d-simplex in diamond δ. Then,
σi is said to be on the interior of δ if all simplices σ that
contain σi as an i-face belong to δ. Otherwise, σi is said to
be on the boundary of δ. An important property of the diamond subdivision is that all changes occur within the interior of the subdividing diamond δ. Consequently, the faces
on the boundary of δ are unaffected by the subdivision operation. The local effect of the subdivision of a diamond δ is
to (a) remove its spine (b) add a vertex vc at the midpoint of
its spine, which we refer to as its central vertex and (c) add
edges from vc to each vertex v of δ.
The hierarchical relationship between the d-simplices
generated by Maubach’s bisection scheme defines a direct
dependency relation on the diamonds. A diamond δc is a
child of a diamond δ p , and conversely δ p is a parent of δc , if
δc contains at least one d-simplex generated by the bisection
of a d-simplex in δ p .
In contrast with the simplex hierarchy, which can be represented as a forest of binary trees, the diamond dependency
relationship can be described as a Directed Acyclic Graph
(DAG) ∆. The root of ∆ is the 0-diamond subdividing the hypercubic domain h (e.g. all simplices of K(h)). The nodes of
∆ are the subdividing diamonds, e.g. the pairs (δ,δs ) containing a diamond δ and its corresponding subdivided diamond
δs covering the same domain. Finally, the arcs of ∆ are defined by the dependency relationship among the diamonds.
7. Properties of a hierarchy of diamonds
We now focus on the structure of an arbitrary i-diamond δ
in d-dimensions. This leads to the derivation of closed-form
equations for the number of simplices and vertices in δ as
well as the number and location of its parents and children.
Theorem 7.1 An i-diamond δ in dimension d is the crosscomplex defined by K(hk ), a Kuhn subdivided (d − i)-cube,
hk , and BF (hi ), a fully subdivided i-cube boundary, hi , i.e.,
δ = {K(hk ) ⊗ BF (hi )}
c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

such that hk and the facets of hi are in affinely independent
subspaces of Rd , and the center of hk and of hi coincide.
Proof Consider the vertices of an arbitrary d-simplex σ ∈ δ
σ =( v0 , v1 , . . . , vk−1 , vk , v p1 , v p2 , . . . , v p j , . . . , vd ),
(d−i+1) vertices

i vertices

where k = d − i. Since δ is defined by its spine ψ = (v0 , vk ),
which is the diagonal of a (d − i)-cube, the vertices in position 0 in all d-simplices of δ are identical, and similarly for
the vertices in position k = d − i. Furthermore, the midpoint
vc = 12 (v0 + vk ) of ψ is the central vertex of δ and is the
vertex that will be inserted in position k for all d-simplices
generated during the subdivision of δ.
Due to the use of Maubach’s bisection scheme, vertex v p1
at position (d − i + 1) of σ, where i > 0, is the center of
a (d − i + 1)-cube h p . Also, v p1 is the central vertex of the
diamond δ p whose subdivision generated σ. Similarly, for
j ≤ i, the vertex v p j at position (d − i + j) of σ is the center
of a (d − i + j)-cube and v p j is the central vertex of the levelj ancestor diamond of δ.
The proof is split into two parts. We first show the (d −
i)-dimensional Kuhn-subdivided component of δ, K(hk ),
whose vertices are in the initial (d − i + 1) positions of any
d-simplex σ ∈ δ. Next, we show the fully subdivided i-cube
boundary component, BF (hi ), whose vertices are in the final
i positions of σ. Since σ is a d-simplex, all of its vertices
must be in affinely independent subspaces of Rd , and thus
σ is a cross-simplex of a (d − i)-simplex from K(hk ) and an
(i − 1)-simplex from BF (hi ).
Kuhn component: Consider the set of d-simplices within δ
whose final i vertices are the same, i.e. if σa and σb are two
such d-simplices, then the vertex at position (k + j) of σa is
equal to the vertex at position (k + j) of σb , for 0 < j ≤ i.
Since we use Maubach’s ordering for the simplices, the subspace of Rd spanned by these simplices is a (d − i)-cube
hk , whose diagonal is ψ. Furthermore, since our hierarchy
began with a Kuhn subdivision of h and because of Theorem 4.1, all i-faces of a Kuhn subdivided d-cube are Kuhn
subdivided, these simplices comprise a Kuhn subdivision of
hk , i.e. K(hk ), and there are (d − i)! such simplices.
Fully subdivided component: This proof involves a grid that
is dual to the one we have been using (i.e. the primal grid).
A vertex of the dual grid corresponds to the center of a dcube of the primal grid, and, in general, a j-face of the dual
grid corresponds to a (d − j)-face of the primal grid. Observe
that the vertices of this dual grid are offset from those of the
primal grid by one half unit in each axis-aligned direction.
Recall that, on the primal grid, the vertex v p j at position (d −
i + j) of σ is the center of a (d − i + j)-cube whose center
coincides with the central vertex of a parent of δ. Then, on
the dual grid, vertex v p j of σ is the center of an (i − j)-cube,
1 ≤ j ≤ i. Note that the central vertex of δ (which is not a
vertex of δ until after it subdivides) is the center of an i-cube,
hi on the dual grid.
In the following, consider the collection of d-simplices

1296

K. Weiss & L. De Floriani / Diamond Hierarchies

within δ whose initial (d − i + 1) vertices are the same, i.e.
if σa and σb are two such d-simplices, then the vertex at position j of σa is equal to the vertex at position j of σb , for
0 ≤ j ≤ (d − i). We can thus project these d-simplices into
an (i − 1)-dimensional subspace of Rd .
Our claim, which we prove through induction on i, is that
these (i − 1)-simplices decompose the boundary of a fully
subdivided i-cube hi , e.g. BF (hi ). In the base case, i = 0,
and BF (hi ) is empty and is therefore trivially the boundary
of a fully subdivided 0-cube.
For the inductive step, assume that in an (i − 1)-diamond δ p ,
the final (i − 1) vertices of each simplex correspond to the
boundary of a fully-subdivided (i − 1)-cube BF (h p ), whose
simplices therefore have dimension i − 2. When δ p is subdivided, its central vertex v coinciding with the center of h p is
inserted. In addition, edges are created from v to all vertices
of δ p , including the vertices of BF (h p ). This increases the dimension of each of BF (h p )’s simplices and generates F(h p )
(recall from Section 4.3 that F(h p ) is defined as the crosscomplex of BF (h p ) and the vertex at its center). All simplices generated during this subdivision contain vertex v in
position d − i. The final i vertices of each such d-simplex defines an (i − 1)-simplex, and together these (i − 1)-simplices
form the fully subdivided (i − 1)-cube F(h p ).
Now, consider the subset of these simplices that get contributed to an i-diamond δc that is a child of δ p . These are
characterized by having the same spine vertices (e.g. v0 and
vk ). Since δc is an i-diamond its central vertex is the midpoint of an i-cube hi in the dual grid. Among the 2 ∗ i facets
of hi , one is the fully subdivided (i − 1)-cube F(h p ). By
symmetry, each of the other facets are subdivided similarly,
and, thus, the boundary of hi is subdivided as a fully subdivided i-cube, i.e. BF (hi ).
This decomposition of Theorem 7.1 suggests the following closed-form equations for the number of d-simplices,
vertices, parents and children of any diamond δ. Let δ be an
i-diamond of dimension d, K(hk ) be the (d − i)-dimensional
Kuhn-subdivided component of δ and BF (hi ) be the fully
subdivided i-cube boundary component of δ.
Simplices. The number of d-simplices in an i-diamond is
(d − i)!(2i)!! This follows from the fact that δ is defined by
the cross complex of K(hk ) which contains (d − i)! cells and
BF (hi ) which contains (2i)!! cells. The d-simplices of δ are
cross simplices of those from K(hk ) and BF (hi ). Thus the
number of neighbors required in the neighbor finding operation is O(d!).
Vertices. The number of vertices in an i-diamond is (2d−i +
3i − 1). Since K(hk ) contains 2d−i vertices, and BF (hi ) contains 3i −1 vertices and they are both in affinely-independent
subspaces, the number of vertices in δ is just their sum.
Children. The number of children of an i-diamond is
2 ∗ (d − i) if i < (d − 1) and 2d if i = (d − 1). Due to
the Maubach subdivision, the spines of children of an idiamond, i < (d − 1), coincide with diagonals of the 2 ∗ (d −

i) facets of hk . When i = (d − 1), hk is a 1-cube (an edge of
a cube), and hi is a (d − 1)-cube. The spine vertices of δ’s
children are located at positions 0 and d of each d-simplex,
corresponding to one of the two vertices of hk and one of the
2d−1 vertices of hi . There are thus, 2d such children.
Parents. The number of parents of an i-diamond is 2 ∗ i if
i > 0 and d if i = 0. The central vertex of each parent of an
i-diamond, i > 0, coincides with the midpoint of one of the
2 ∗ i facets of hi . When i = 0, hi is a 0-cube coinciding with
the central vertex of δ. Let σ denote one d-simplex of δ and
let (v0 , vx ) denote the spine vertices of its parents, where v0
is the vertex at position 0 of σ and vx the spine vertex of the
parent δ p that generated σ. Then, since δ p was a (d − 1)diamond, its spine was aligned with a coordinate axis of Rd ,
thus, δ has d parents. Furthermore, if ψ = (v0 , vd ) is the spine
of δ then let v = vd − v0 be the difference between these
vertices. The spine of the jth parent of δ is defined by v0 and
vx = v0 + v · e j (where · indicates the dot product).
8. Encoding diamonds
In this section, we generalize the diamond representation
of [WD08] to yield an efficient encoding for a d-dimensional
hierarchy of diamonds ∆ over a hypercubic regular domain
of size (2N + 1)d , where N is the maximum level of resolution L EVELMax . The vertices of diamonds in ∆ have integer
coordinates in the range [0 . . . 2N ].
A diamond δ is defined by its spine ψ, or alternatively, by
the unique midpoint, vc , of its spine. Due to the regularity of
the vertex distribution as well as the updates, all geometric
and hierarchical relationships can be derived directly from
the binary representation of the coordinates (x1 , x2 , . . . , xd )
of vc using efficient hardware bit shifting. Let
T

x1 = x11 x12 . . . x1n τ11 τ21 00 . . . 0


 x2 = x21 x22 . . . x2n τ12 τ22 00 . . . 0 




..

(3)
vc = 


.




 xd = xd1 xd2 . . . xdn τ1d τ2d 00 . . . 0
τ

γ

be the binary representation of the central vertex. Our encoding depends on two quantities which can be extracted from
this representation: the scale γ and the type τ of δ.
Let T RAILING(xi ) denote the number of trailing zeros in
the binary representation of a coordinate xi . Then, the minimum of the number of trailing zeros among each of the d
coordinates of vc encodes the scale γ of δ, e.g.
γ = min(T RAILING(xi )).
i≤d

Thus, for a diamond at scale γ, the rightmost γ bits in any coordinate of vc are zero, but at least one of the bits in position
τ2 is nonzero. We define the depth of an i-diamond δ in terms
of the scale as D EPTHδ = L EVELMax −γ. A diamond’s depth
c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

1297

K. Weiss & L. De Floriani / Diamond Hierarchies

d=1

i=0

i=1

i=2

i=3

d=2

d=3

d=4

Figure 8: An i-diamond δ in dimension d is the cross-complex of K(hk ), a Kuhn subdivided (d − i)-cube, hk (top cube in each
cell) and BF (hi ), the boundary of a fully subdivided i-cube, hi (bottom cube in each cell). For i < d − 1, the central vertices
of children of δ are located at the midpoints of each (d − i − 1)-face of hk (blue vertices). For i > 0, the central vertices of
parents of δ are located at the midpoints of each (i − 1)-face of hi (red vertices). An example of i = 2 and d = 3 is illustrated in
Figure 3(b).

c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

1298

K. Weiss & L. De Floriani / Diamond Hierarchies

corresponds to the number of i-diamond ancestors it has in
the DAG on a path from the root to δ. The level σ of a cell
σ in an i-diamond δ is thus D EPTHδ ∗ d + i.

spine direction to find vertices v0 and vd of the spine. Then,
as in Section 7, v = vd − v0 and the d parents are located at
offset f = −u + v · e j .

The two bits at position γ + 1 and γ + 2 of each coordinate xi , which we denote as τ2i and τ1i , respectively encode the type τ of δ. The class of δ is encoded within the
bits τ2 of τ as the number of zeros, e.g. d − ∑ τ2i . The final n = L EVELMax − (γ + 2) bits in each dimension are only
used in this representation to distinguish between diamonds.

Since the vertices and d-simplices of BF (hi ) are defined
along all directions spanned by hi , they can be found by incrementally traversing in a direction within hi orthogonal to
the directions that have already been traversed. That is, since
the ancestor of a diamond at the center of an i-cube of BF (hi )
is the center of one of its facets, the traversal is only along a
single dimension.

The oriented direction of δ’s spine can be extracted from
τ using the following encoding. First, initialize the sign variable s to +1. Component ui of the direction vector u is then:

1,
if τ1i = 0 and τ2i = 1



−1, if τ1 = 1 and τ2 = 1
i
i
ui =
1
2

=
0
and
τ
0,
if
τ

i
i =0


1
0,
if τi = 1 and τ2i = 0.
In the fourth case, where τ1i = 1 and τ2i = 0, we must also
multiply the sign s by −1. The orientation of spine ψ is then
s ∗ u.
The geometric and hierarchical components of δ can be
computed as scaled offsets from vc . The unscaled offsets are
d-vectors f such that fi ∈ {−1, 0, 1}. Thus, a component of
diamond δ, at scale γ, whose center is p and whose offset
from vc is f can be computed as:
p = vc + 2γ ∗ f .

(4)

We now discuss the offset vectors to the elements of an
i-diamond δ at scale γ.
Kuhn-subdivided component. Since the class i of δ is encoded in the number of zeros in the rightmost bits of τ, the
subspace of Rd spanned by the Kuhn subdivided (d − i)cube K(hk ) are those defined by the (d − i) coordinates of
τ2i with value 1.
Specifically, δ’s spine ψ = (v0 , vk ) can be calculated using the oriented spine direction u, where v0 has offset vector f = −u and vk has offset vector f = u. Their coordinates can be obtained by plugging f into Equation 4. The
remaining vertices and cells can be found through an affine
mapping to the canonical subdivision of Section 4.1, or,
if d is reasonably small, through precomputed lookup tables [GDL∗ 02, WD08].
Since the 2(d − i) children of δ are located at the facets
of hk (for i < (d − 1)), offsets to their central vertices can be
computed as f = ±e j , in all coordinates that τ2j = 1. For i =
(d − 1), the 2d children are at offsets f = (±1, ±1, . . . , ±1),
and at scale γ + 1.
Fully-subdivided component. The i-dimensional subspace
spanned by BF (hi ) is along the coordinates in which τ2j = 0.
Similarly, for i > 0, offsets to the parents of δ are f = ±e j , in
all coordinates that τ2j = 0. For i = 0, we can use the oriented

Figure 8 illustrates the components of all diamond classes
up to dimension d = 4. Each cell corresponds to a diamond
δ of class i (columns) in dimension d (rows). The top hypercube in each cell is a Kuhn subdivided (d − i)-cube containing the oriented spine, whose vertices are colored black
and gray, respectively, and the children, whose central vertices (blue) are located at the center of its facets, at an offset
f = ±e j , in all coordinates that τ2j = 1. The bottom hypercube in each cell is the boundary of a fully subdivided i-cube.
The central vertices of the parents (red) of δ are located at the
center of its facets at offset f = ±e j , in all coordinates that
τ2j = 0. The two hypercubes intersect at their midpoints.

9. Encoding simplicial complexes
The encoding presented in Section 8 leads to an efficient
pointerless representation for a simplicial complex Σ extracted from a hierarchy of diamonds. Σ can be encoded as
a collection of diamonds, each of which contains a set of
d-simplices, such that, the collection of simplices from all
diamonds in Σ forms a simplicial complex covering the domain h. Since we can reconstruct the location of all vertices,
simplices, parents and children of a diamond δ from the coordinates of its central vertex, each diamond can be entirely
indexed by the d coordinates of its central vertex.
In general, not all d-simplices of a diamond will belong
to the complex Σ, and thus each diamond δ requires some
bookkeeping to track the set of its d-simplices belonging to
the complex Σ. We observe that each d-simplex in a diamond
δ was created during the subdivision of a single parent of δ.
Since an i-diamond, i > 0, has (d − i)!(2i)!! simplices and
only 2i parents, we observe that these d-simplices are contributed to δ in clusters of size (d − i)!(2(i − 1))!!. Similarly,
the d! d-simplices of a 0-diamond arrive in clusters of size
(d − 1)! from each of its d parents. Thus, a single bit is sufficient to track each cluster of d-simplices within δ, and, consequently, 2 ∗ d bits are sufficient to track all (d − i)!(2i)!!
d-simplices of diamond δ ∈ Σ.
Recall that the bisection rule for d-simplices requires that
all bisection-edge neighbors are present in the mesh. The
corresponding condition for conforming updates to a diamond δ is for δ to contain all of its d-simplices. This occurs when all parents of δ have subdivided. Thus, the O(d)
c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

K. Weiss & L. De Floriani / Diamond Hierarchies

bookkeeping bits of a diamond can also be used to cache the
subdivision status of each parent of δ.
As a consequence, the cost of encoding diamonds in a
diamond-based simplicial complex scales linearly with respect to the dimension, even though the number of simplices scales factorially with respect to the dimension. A
simple encoding for diamond-based simplicial complexes of
L EVELMax = N thus requires d ∗ N bits to encode the central
vertex and d ∗ 2 bookkeeping bits to encode the contained dsimplices of each diamond containing at least one d-simplex
in Σ.
In contrast, pointerless encodings for simplex-based simplicial complexes extracted from a forest of simplices typically use locations code to index the encoded simplices. The
location code for a simplex σ requires (a) an encoding of
the σ’s root tree, requiring O(log(d!)) bits, (b) the level σ
of σ, requiring log(d ∗ N) bits, and (c) a sequence of bits
corresponding to the tree traversal, requiring σ = O(d ∗ N)
bits. However, in existing schemes, additional information
is required for efficient (i.e. constant time) neighbor finding.
In [LDS04], an additional neighbor mask is required to efficiently ascertain the appropriate bisection-edge neighbors,
and in [AMM07] a reflection vector (consisting of an additional d bits) is required. Finally, since there are no O(1)
conversions between location codes and the coordinates of a
simplex σ’s vertices, the d + 1 vertices of each simplex can
be encoded along with the location code, or can be determined by traversing the tree from the root (requiring O( σ )
time).
Besides the storage savings achieved by diamond-based
encodings, the simplex-based encodings cannot efficiently
cache the status of its subdivided neighbors, and thus each
simplex bisection necessarily requires O(d!) iterations of the
neighbor-finding operation followed by O(d!) simplex bisections.
We now compare the storage requirements of the two representations in the concrete case of d = 3, where i-diamonds
can have 6,4 and 8 tetrahedra, for i = 0, 1 and 2, respectively.
Table 1 compares the number of diamonds |δ| to the number tetrahedra |σ| in meshes extracted from several volumetric datasets. The spheres dataset is an artificially generated distance field for 15 randomly placed spheres. All other
datasets were downloaded from the VolVis database. In all
cases, diamonds containing a specific isovalue were forced
to subdivide while those not containing the isovalue were
not. Across all tested datasets, the average number of tetrahedra per diamond was 3.75.
For

the

storage requirements, we assume that
L EVELMax ≤ 10, and thus, coordinates can be encoded
using 2 bytes, and location codes using 30 bits (4 bytes). For
the comparison of storage costs, we assume that diamonds
require 7 bytes each: 6 bytes for the coordinates of the
central vertex and 1 byte for the bookkeeping; and that
simplices require 6 bytes each: 4 bytes for the location code,
c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

1299

one byte for the combined level and tree root encodings,
and an additional byte for efficient neighbor-finding (as
discussed above). This encoding does not include storage
space for the 4 vertices of each simplex (containing 3
coordinates each), and thus their coordinates must be reconstructed e.g. using a top-down tree traversal. Although these
meshes are only in 3D, (where 3! = 6), the diamond-based
encoding is around 3 times more compact than a simplified
simplex-based encoding. Since the storage requirements
scale with the dimension d, these advantage increase as the
dimension d increases.
10. Concluding Remarks
We have generalized the notion of diamond to arbitrary dimensions as cross-complexes of two related simplicial decompositions of lower-dimensional hypercubes.
This has enabled us to analyze the properties of diamonds
and to derive closed-form equations for the number of dsimplices, vertices, parents and children of all types of diamonds in arbitrary dimensions.
In particular, we proved that an i-diamond in ddimensions contains (d − i)!(2i)!! d-simplices. Thus, representations in which the primitives are d-simplices become
very expensive to store as the dimension d of the problem
domain increases. Specifically, since neighbor-finding operations are required for extracting conforming meshes before any bisection operation, extracting conforming modifications to a simplicial complex is a problem with O(d!)
complexity.
In contrast, from the perspective of diamonds, we see that
the d-simplices within an i-diamond are generated in clusters
of size (d − i)!(2(i − 1))!! during the subdivision of each of
the parents of the diamond. Thus, in applications that require
the extraction of simplicial complexes, a diamond-based encoding requires only O(d) spatial accesses to ensure conforming updates to the complex.
We have proposed an implicit pointerless encoding from
which all geometric and hierarchical relationships within the
hierarchy can be derived using only the d coordinates of a
diamond’s central vertex. Such representation requires O(d)
bytes per diamond. Compared to simplex trees that require
O(d) bytes per d-simplex, but must represent O(d!) such dsimplices, our diamond-based representation is significantly
more compact.
We note, however, that while the diamond representation
can reduce the number of spatial accesses from O(d!) to
O(d) during the generation of adaptive domain decompositions, diamonds still contain a number of vertices which
varies exponentially with the dimension of the diamond.
Thus, we envision the diamond approach to yield the greatest
benefit when applied to low-dimensional problem domains
of dimension greater than three.

1300

K. Weiss & L. De Floriani / Diamond Hierarchies

Dataset

L EVELMax

Spheres
Spheres
Fuel
Hydrogen
Tooth
Engine
Bonsai

7
8
6
7
8
8
8

Number of elements
|δ|
|σ|
|σ|/|δ|
316 K 1.18 M
3.73
1.07 M 3.99 M
3.72
23.1 K
87.5 K
3.78
93.0 K
357 K
3.83
281 K 1.05 M
3.74
1.40 M 5.30 M
3.78
1.94 M 7.57 M
3.89

Storage costs (MB)
Σδ
Σσ
Σσ /Σδ
2.11 6.76 3.20 x
7.16 22.8 3.19 x
.15
.50 3.24 x
.62 2.04 3.29 x
1.88 6.01 3.20 x
9.36 30.3 3.24 x
12.98 43.3 3.34 x

Table 1: Comparison between the number of tetrahedra (σ) and diamonds (δ) in simplicial complexes extracted from the
hierarchy of diamonds and forest of simplices representations. For the storage comparison, diamonds in Σδ are encoded using
7 bytes and simplices in Σσ are encoded using 6 bytes. Storage costs are listed in megabytes, where 1MB = 10242 Bytes.

Acknowledgments
We would like to thank the anonymous reviewers for their
many helpful suggestions. This work has been partially supported by the National Science Foundation under grant CCF0541032. The volume datasets are courtesy of Stefan Röttger
and VolVis.
References
[AMM07] ATALAY F., M OUNT D., M ITCHELL J.: Pointerless
implementation of hierarchical simplicial meshes and efficient
neighbor finding in arbitrary dimensions. International Journal
of Computational Geometry and Applications 17, 6 (2007), 595–
631.
[Bey00] B EY J.: Simplicial grid refinement: on Freudenthal’s
algorithm and the optimal number of congruence classes. Numerische Mathematik 85, 1 (2000), 1–29.
[EKT01] E VANS W., K IRKPATRICK D., T OWNSEND G.: Righttriangulated irregular networks. Algorithmica 30, 2 (2001), 264–
286.
Simplizialzerlegungen von
[Fre42] F REUDENTHAL H.:
beschrankter flachheit. Annals of Mathematics (1942), 580–582.
[GDL∗ 02] G REGORSKI B., D UCHAINEAU M., L INDSTROM P.,
PASCUCCI V., J OY K.: Interactive view-dependent rendering of
large isosurfaces. In Proceedings IEEE Visualization 2002 (San
Diego, CA, October 2002), IEEE Computer Society, pp. 475–
484.
[HAF∗ 96] H IBBARD W., A NDERSON J., F OSTER I., PAUL B.,
JACOB R., S CHAFER C., T YREE M.: Exploring coupled
atmosphere-ocean models using Vis5D. International Journal of
High Performance Computing Applications 10, 2-3 (1996), 211.
[HDJ05] H WA L., D UCHAINEAU M., J OY K.: Real-Time Optimal Adaptation for Planetary Geometry and Texture: 4-8 Tile
Hierarchies. IEEE Transactions on Visualization and Computer
Graphics (2005), 355–368.
[Heb94] H EBERT D. J.: Symbolic local refinement of tetrahedral
grids. J. of Symbolic Computation 17, 5 (May 1994), 457–472.
[KTY∗ 04] K IMURA A., TAKAMA Y., YAMAZOE Y., TANAKA
S., TANAKA H., CREST J., AGENCY T., S AITAMA J.: Parallel
volume segmentation with tetrahedral adaptive grid. Proc. Int.
Conf. on Pattern Recognition 2 (2004).
[Kuh60] K UHN H.: Some combinatorial lemmas in topology.
IBM J. Res. Develop 4 (1960), 518–524.

[LDS04] L EE M., D E F LORIANI L., S AMET H.: Constant-time
navigation in four-dimensional nested simplicial meshes. In Proceedings Shape Modeling International 2004 (June 2004), IEEE
Computer Society, pp. 221–230.
[Lic99] L ICKORISH W.: Simplicial moves on complexes and
manifolds. Geometry and Topology Monographs 2, 299-320
(1999), 314.
[LP02] L INDSTROM P., PASCUCCI V.: Terrain simplification
simplified: a general framework for view-dependent out-of-core
visualization. IEEE Transactions on Visualization and Computer
Graphics 8, 3 (2002), 239–254.
[LPD∗ 04] L INSEN L., PASCUCCI V., D UCHAINEAU M.,
√
H AMANN B., J OY K.: Wavelet-based multiresolution with n 2
Subdivision. Dagstuhl Seminar on Geometric Modeling (2004).
[Mau95] M AUBACH J. M.: Local bisection refinement for nsimplicial grids generated by reflection. SIAM Journal on Scientific Computing 16, 1 (January 1995), 210–227.
[Mau96] M AUBACH J. M.: The efficient location of neighbors
for locally refined n-simplicial grids. 5th Int. Meshing Roundable
(1996).
[Mes48] M ESERVE B.: Double factorials. American Mathematical Monthly (1948), 425–426.
[Mit92] M ITCHELL W.: Optimal multilevel iterative methods for
adaptive grids. SIAM Journal on Scientific and Statistical Computing 13 (1992), 146–167.
[MVT03] M ELLO V., V ELHO L., TAUBIN G.: Estimating the
in/out function of a surface represented by points. Symposium on
Solid Modeling and Applications 2003 (2003), 108–114.
[Pas02] PASCUCCI V.: Slow-Growing Subdivisions (SGSs) in any
dimension: towards removing the curse of dimensionality. Computer Graphics Forum 21, 3 (2002).
[RL92] R IVARA M., L EVIN C.: A 3D refinement algorithm for
adaptive and multigrid techniques. Communications in Applied
Numerical Methods 8 (1992), 281–290.
[RS72] ROURKE C., S ANDERSON B.: Introduction to piecewiselinear topology. Ergebnisse der Mathematik und ihrer Grenzgebiete 69 (1972).
[WB96] W EIGLE C., BANKS D.: Complex-valued contour meshing. In Proceedings IEEE Visualization 1996 (October 1996),
IEEE Computer Society, pp. 173–180.
[WD08] W EISS K., D E F LORIANI L.: Multiresolution Interval
Volume Meshes. In IEEE/ EG Symposium on Volume and PointBased Graphics (2008), Eurographics Association, pp. 65–72.

c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

