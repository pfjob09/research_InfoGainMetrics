Eurographics/ IEEE-VGTC Symposium on Visualization 2009
H.-C. Hege, I. Hotz, and T. Munzner
(Guest Editors)

Volume 28 (2009), Number 3

Volume Deformations in Grid-Less Flow Simulations
Harald Obermaier1,2 , Martin Hering-Bertram2 , Jörg Kuhnert2 , and Hans Hagen1
1 TU
2 Fraunhofer

Kaiserslautern, Germany
ITWM, Kaiserslautern, Germany

Abstract
This paper presents a novel method for the extraction and visualization of volume deformations in grid-less point
based flow simulations. Our primary goals are the segmentation of different paths through a mixing device and the
visualization of ellipsoidal particle deformations. The main challenges are the numerically efficient processing of
deformation tensors and the robust integration of stream- and streaklines at boundaries of the dataset such that
closed segments are obtained. Our results show two- and three-dimensional particle deformations as well as the
segmentation of volumes in stationary fields and areas in time-dependent datasets taking consistent paths through
a mixing device.
Categories and Subject Descriptors (according to ACM CCS): Simulation And Modeling [I.6.6]: Simulation Output
Analysis—

1. Introduction
Visualization of vector fields plays an important role in modern engineering as progress in hard- and software allows
computation of an increasing amount of flow simulations.
Mixing processes form a part of those flow simulations that
are of direct significance to practical applications. Featurebased visualization of vector fields provides methods to explore local and global behavior of fields resulting from simulations of such applications. While local properties of the
flow such as divergence are fast to compute, they do not
give an insight into the overall behavior of the field and
are often not applicable without further processing. However, local information gathered from sections of the field
may be combined to represent a more global view of the
mixing process. In this paper, we present two different approaches to combine local properties to obtain a global visualization of mixing properties of flow vector fields, and show
their use in grid-less point based fields that were obtained by
the mesh-free Finite Pointset Method (FPM) [TK]. The first
method examines deformations of infinitesimal particles by
integration of deformation tensors along streamlines in stationary datasets and streaklines in time-dependent datasets.
The implicitly defined ellipsoidal volumes can be rendered
and color-coded, thus showing how infinitesimal spheres are
deformed throughout the dataset. The second method gathers segments of similar flow to form stream volumes and
c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.
Published by Blackwell Publishing, 9600 Garsington Road, Oxford OX4 2DQ, UK and
350 Main Street, Malden, MA 02148, USA.

streak areas. These stream sections are defined by a boundary representation resulting from a combination of separating lines and surfaces. Streak areas can be considered as generalization of (topological) separatrices to time-varying data.
While all methods presented in this paper work in vector
fields of arbitrary connectivity, they are inherently mesh-free
and were applied to grid-less datasets to produce the shown
results. These results include stream volume composition in
a cylindrical device used for mixing of liquid glass to obtain
uniform optical properties. The contributions of this work to
the field of vector field visualization are:
• Computation and visualization of deformations along
lines in stationary and time-dependent datasets.
• Flow segmentation by stream volume composition in stationary directed vector fields.
• Streak area visualization with adaptive boundary integrated streaklines.
In section 2, we give a short overview of related work in
this area of vector field visualization. Section 3 introduces
tensor deformations in stationary fields and a method to segment three-dimensional flow into stream volumes of similar flow. In section 4 the concepts of deformations in stationary fields are extended to streaklines and streak areas in
time-dependent vector fields. Section 5 compares both approaches, presents numerical examples, and concludes this
paper with a summary and a discussion of the results.

880

H. Obermaier, M. Hering-Bertram, J. Kuhnert, and H. Hagen / Volume Deformations in Grid-Less Flow Simulations

2. Related Work
The well-known concept of streamtubes [USM96] allows
the mapping of local flow properties such as velocity or divergence to the radius of tubular streamlines. Another linebased deformation approach called streamribbons [USM96]
visualizes local magnitudes such as angle of rotation to ribbon like structures. A method that uses deformations of
spheres to display local data along streamlines was presented
in 1994 by Brill et al. [BHD*94]. However, this streamball
technique as well as other methods are usually applied to local information of the field and do not incorporate univariate
functions such as accumulated deformation along a streamline. We show how this can be achieved in stationary and
time-dependent datasets.
The extraction of tetrahedral stream volumes with known
origins was introduced by prior research in [BML95] and
[MBC93]. Their algorithms are not based on streamsurface
composition and are limited to the extraction of volumes
with known source-areas. In [Hul92] and [GKT*08] the
construction of static and time-varying flow surfaces was
presented. Feature based topological segmentation of twodimensional flow fields has been examined in [LL99] by
Leeuw and Liere, who use a critical-point approach, what
we try to avoid in this work.

Figure 1: 2D tensor deformation for b = 1.

into v1 at x1 by the mapping:
v1 = v0 + J ∗ v0

(2)

||x −x ||

0
where J ∗ = J || f1(x )||
is a scaled version of the Jacobian at
0
x0 . For non-adaptive, Euler-integrated streamlines the scal||x −x0 ||
ing factor b = || f1(x )||
for two subsequent points on the
0
streamline equals 1 and J ∗ = J, since each step of integration advances the streamline by f (x0 ), see Figure 1.
When deforming volumes defined by a square tensor T ,
equation (2) can be rewritten as:

⇔

T1

= T0 + J ∗ T0

T1

= (I + J ∗ )T0
n−1

⇔ Tn+1 =
3. Deformations in Stationary Fields
3.1. Tensor Deformation
Second order square tensors are able to represent deformations of volumes. Every such tensor maps a given vector onto
a new, scaled or rotated vector, thus providing a transformed
coordinate frame. There are two basic types of second-order
tensor transformations: Orthogonal square matrices yield a
rotation, while symmetric square matrices yield a stretching
or shearing type of deformation.

The deformed volume at step n is therefore defined by the
initial tensor and an accumulation of all transformations
prior to step n. This relation corresponds to an explicit form
of the difference quotient:
T1 −T0
∆t

For adaptive streamline integration in a vector field f as in
(1), we use a Runge-Kutta 4th/5th order integration scheme
with a maximal angular deviation threshold as accuracy
measure for step size adjustments together with Moving
Least Squares (MLS) approximation [Nea] (same as used
in FPM simulation code), which does not only approximate
the field’s value at a given point x , but additionally returns
the Jacobian at x .
Z l

f (s(x)) dx

(1)

0

As the Jacobian describes how a vector is transformed when
moved in one of the three canonical directions, it keeps all
information necessary to observe rotating or shearing deformations at x .
At a position x0 with f (x0 ) and J being the MLS approximations of the field and the Jacobian, a vector v0 is transformed

= ∇ f T0

⇔

T1

= T0 + ∆t ∇ f T0

⇔

T1

= (I + ∆t ∇ f ) T0

For additional numerical stability when using large time
steps, the implicit form is used instead:

3.1.1. Computation

s(l) = p0 +

∏ (I + Ji∗ )T0

i=0

T1 −T0
∆t

⇔

T1

= ∇ f T1
= (I − ∆t ∇ f )−1 T0

Both methods require multiplication of n square matrices,
additionally the implicit method requires matrix inversion.
As the volume of the deformed object is to be preserved
during deformation due to a divergence of zero, all matrices
need to be traceless. Matrices M := (mi j ) with tr(M) = 0
due to numerical errors are altered to ensure a trace of zero:
1
mii = mii −
tr(M)
(3)
dim(M)
Multiplication scheme. Once we have determined the
sequence of tensors Mi = (I − ∆t ∇ f )−1 , they have to be
accumulated to describe a univariate deformation along the
streamline. We use a product length based matrix multiplication scheme to both reduce the resulting numerical errors
and the space needed for matrix storage. A simple example
c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

H. Obermaier, M. Hering-Bertram, J. Kuhnert, and H. Hagen / Volume Deformations in Grid-Less Flow Simulations

of the general multiplication idea is shown in Figure 2.
Compared to the canonical approach, the multiplication
graph shown has a multiplication depth of O(log n) rather
than O(n), therefore reducing the accumulated multiplication error. As prior tensor data is constantly updated by
matrix-product information results during the multiplication
process, storage usage is optimized.
For a given sequence of n matrices, we construct an array

881

{(0, 0, 0, 1)}, {(1, 1, 1, 1)}, {(2, 2, 2, 1)}, {(3, 3, 3, 1)}
{(0, 0, 0, 1), (1, 0, 1, 2)}, {}, {(2, 2, 2, 1)}, {(3, 3, 3, 1)}
{(0, 0, 0, 1), (1, 0, 1, 2)}, {}, {(2, 2, 2, 1), (3, 2, 3, 2)}, {}
{(0, 0, 0, 1), (1, 0, 1, 2), (2, 0, 2, 3)}, {}, {}, {(3, 2, 3, 2)}, {}
{(0, 0, 0, 1), (1, 0, 1, 2), (2, 0, 2, 3), (3, 0, 3, 4)}, {}, {}, {}, {}

3.1.2. Visualization
We use the accumulated tensors to visualize deformations
of implicitly defined volumes. M0 := (v1 v2 v3 ) = r · I with
r ∈ R+ is chosen as initial tensor, implicitly defining a
sphere S of radius r, Sr , as illustrated by Figure 3.
S is centered at (0, 0, 0) and v1 , v2 , and v3 are located on

Figure 2: Matrix multiplication scheme showing direction
of multiplication, storage target and indices of accumulated
tensors.
of size n of sorted sets Si of quadruplets. Such a quadruplet
holds the following information:
i
start
end
length

position in matrix sequence
lowest index of matrix in product
highest index of matrix in product
length of product

The
initial
distribution
of
quadruplet
sets
in
the
array
for
the
given
example
is:
[{(0, 0, 0, 1)}, {(1, 1, 1, 1)}, {(2, 2, 2, 1)}, {(3, 3, 3, 1)}, ...].
Sets in the array are sorted by the length parameters of their
members. The multiplication scheme works as shown in the
following pseudo code:
1: while ∃ quadruplet k, k.start = 0 do
2:
for each quadruplet i do
3:
j = first quadruplet of Si.end+1
4:
if isMinSum(i.length + j.length) then
5:
M j.i = M j.i · Mi.i
6:
Remove quadruplet j
7:
Insert l = (j.i, i.start, j.end, j.length + i.length)

into Si.start
8:
end if
9:
end for
10: end while

This scheme guarantees in every step, that the pair with
lowest total product length is multiplied and therefore reduces the depth of the multiplication tree to a minimum.
While this leads to an increased number of matrix multiplications, compared to the straightforward approach, it avoids
excessive accumulation of multiplication errors. Constant
complexity due to mapping and queuing of quadruplet sets
ensures that the computational overhead produced by the
quadruplet data structure stays on a minimum.
Example of the scheme for a sequence of four tensors:
c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

Figure 3: Initial sphere Sr with P ∈ sur f (Sr ) is transformed
into ellipsoid.
its surface. Every matrix Mi , i ∈ {0, ..., n} is a linear projection of the unit-sphere’s surface onto the surface of a deformed ellipsoid Ei , with sur f (E0 ) = sur f (Sr ). The mapping sur f (Sr )
x → Mi · x ∈ sur f (Ei ) allows simple construction of deformed ellipsoids.
A measure of the degree of deformation can be obtained by
length comparison of the ellipsoid’s major and minor axes.
Since deformed tensors usually are no longer orthogonal,
their column vectors do not correspond to these axes, as
shown in Figure 3.
A method for matrix decomposition known as Singular
Value Decomposition [MMH04] allows computation of
these axes. In the case of M being a real-valued matrix, it is
decomposed into the matrix-product of an orthonormal matrix L, a matrix Σ with non-negative numbers on the diagonal, and the conjugate transpose of an orthonormal matrix R.
After decomposition L keeps the left-singular vectors of M,
R∗ the right-singular vectors and Σ contains the so-called
singular values. Hereby the semi-axes ai of the ellipsoid defined by M are identical to the left-singular vectors vli scaled
to a length corresponding to the appropriate singular value
svi :
ai =

vli
svi
||vli ||

The quotient ω between the smallest and the greatest nonzero singular value is a valid measure of the deformation
applied to the unit-sphere. ω = 1 holds if the deformed ellipsoid is identical to the initial sphere. As deformation grows,

882

H. Obermaier, M. Hering-Bertram, J. Kuhnert, and H. Hagen / Volume Deformations in Grid-Less Flow Simulations

ω decreases towards 0. Therefore, this quotient allows a nondirected measure of the overall deformation of an ellipsoid.
For visualization purposes, this measure is color-coded by a
mapping of ω to the H-dimension of HSV color space, mapping red to ω = 1, see Figure 5.
Resizing. As ω is a direct indicator of the degree of deformation of a spherical volume, a value close to zero can be used
to identify positions in the tensor sequence, where associated
volumes start to degenerate to flat or line-like shapes. Once
such a position is found, subsequent matrix multiplications
are redone with a reset initial tensor M0 , thus resizing any
following volumes. Whether one chooses to use this information for resizing is however application dependent, since
even degenerate volumes might deform back to ellipsoidal
objects, as long as the tensor data is valid, i.e. columns of
the tensors are linearly independent.
3.2. Stream Volume Deformation
Stream volumes are used to visualize a wide range of physical phenomena such as smoke, fire or streams of liquid.
Common surface-based approaches rely on the availability
of a closed polygon as rake and adopt existing streamsurface
algorithms to extract volume like structures. Other methods such as the construction of implicit streamsurfaces by
extraction of isosurfaces from an artificially created scalar
field [Wij93] can be used for volume creation as well. These
methods are however not suitable to create stream volumes
if no data about the starting or ending regions of volumes
is available. In the following we summarize our approach
of volume composition, that resolves this issue as has been
proposed in [OKHH08].
3.2.1. Definition
In the context of this work, stream volumes are closed parts
of a vector field, whose boundaries are subject to certain constraints and tangential to the vector field. Boundaries of the
volume are defined by streamsurfaces and the boundary of
the dataset itself. Streamsurfaces are a generalization of the
univariate streamlines and their construction is based on a
modified version of the front advancing method proposed by
Hultquist et al. [Hul92].
3.2.2. Algorithm
Our algorithm to create stream volumes consists of four essential steps:
1. Detect separation lines on boundary objects such as obstacles.
2. Use these lines as rakes and start adaptive streamsurfaces
at all lines.
3. Intersect triangulations of streamsurfaces, thus creating
adjacent surface parts.
4. Compose stream volumes from individual streamsurface
parts.

These steps are detailed in the following:
In step one, separation or attachment lines on triangulated boundaries are found according to Kenwright et al.
[KHL99]. We detect additional separation and attachment
lines by examining the behavior of flow at convex edges of
the boundary triangulation, as such three-dimensional separating behavior cannot be detected by analysis of the projected vector field of single triangles. These computations
result in a set of lines located on flow obstacles, which will
be used as rakes for the generation of streamsurfaces. Step
two integrates adaptive streamsurfaces in forward or backward direction at separation and attachment lines. If outer
streamlines of surfaces have contact with geometry, they
are forced to move along the boundary geometry until they
meet with a separation or attachment line to guarantee watertight surfaces. This is possible on no-slip boundaries due
to the approximation properties of MLS. In step three triangulations of all streamsurfaces are intersected. Surfaces
of opposing direction (i.e: surfaces resulting from separation lines and surfaces originating from attachment lines)
produce crossing-intersections, while surfaces of the same
direction yield t-intersections when outer streamlines meet
with rakes of other surfaces. Intersection curves can be computed using existing geometry based algorithms. From these
intersections one obtains a set of triangulated surface parts.
Based on intersection-correspondences, step four assembles
single surface parts to stream volumes. As for every streamsurface part, the contributing intersection curves are known,
neighboring surface parts can be identified. A stream volume
is uniquely defined by the selection of one surface part and
the direction of its normal as every surface part contributes
to exactly two volumes. Due to watertight surface generation
and intersection, these volumes represent a closed volume of
the dataset.
The presented approach constructs volumes without any
prior knowledge of the volumes’ starting positions in a fully
automated manner. Their shape, orientation, and deformations give a valuable insight into properties of the mixing
process such as divergence, rotation, and quality of mixing.
4. Deformations in Time-Dependent Fields
4.1. Tensor Deformation
Streaklines are connections of sequences of particles released in a time-dependent field. They are not necessarily
tangential to the direction of flow. The integral curve (4) represents a streakline.
s(r,t) = p0 +

Z t

f (s(r, x)) dx

(4)

t−r

with s(0,t) = p0 and a particle parameter r ∈ [0,t]. While
the mathematical foundation of tensor deformation stays
the same as in stationary fields, the scheme of matrixaccumulation changes in time-dependent fields. Instead of
processing tensors of a distinct time step, particle deformations are traced over time. This means, that deformations at
c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

H. Obermaier, M. Hering-Bertram, J. Kuhnert, and H. Hagen / Volume Deformations in Grid-Less Flow Simulations

s(r ,t ) are defined by the sequence of tensors at s with r = r
and t < t .
4.1.1. Computation of Tensor Deformation
The sequence of tensors needed to define a particle deformation is in practice obtained by following a discrete particle through time and accumulating its Jacobians. Due to
discretization in time, this Jacobian J is now scaled by the
appropriate time step to form J ∗ from section 3.1.1. As accuracy requires adaptive streakline integration, and new particles are generated at p0 , not all particle-traces have the same
length.
Newly generated particles start with an initial tensor as described earlier. Tensor traces of deleted particles simply end,
if the particle is deleted. Special care has to be taken to particles, that were inserted during adaptive integration. As initializing these particles with an identity matrix leads to inconsistent deformation information, we use an interpolated
version of their neighboring particles’ tensors as an initial
tensor:
T0r = (1 − w)Tpr−l1 + wTqr+l2
where r is the index of the newly inserted particle. The particles r − l1 and r + l2 are the nearest left and right neighbors,
that have not been inserted in this time step (i.e: p, q > 0). T0
is calculated by euclidean distance based linear interpolation
of the two accumulated tensors.
4.2. Streak Area Deformation
Time-dependent vector fields pose new challenges to the
problem of volume extraction. In the three-dimensional case,
streamsurfaces are replaced by streak- or timeline based
surfaces [GKT*08], which are still the topic of active research, as adaptivity measures during integration require an
immense amount of additional processing, since a local approach to adaptivity as in [Hul92] is no longer feasible. Traditional approaches depend on separation line or entry-/exit
point tracking.
In the following sections, we present a technique to integrate adaptive streaklines along boundary geometry to avoid
tracking of separation geometry and present a texture based
visualization method to display dynamic stream areas.
4.2.1. Streakline Integration
In a dataset with an equidistant timeline, at each time step
n particles are generated at fixed position p0 and subsequently advanced through time and space. We use several
approaches to maintain a certain accuracy of integration:
4.2.1.1. Data dependent order of integration. Based on
the frequency of data output of a simulation, a discrete timedependent dataset can be more or less accurate with respect to interpolation of particle positions. To compensate
c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

883

the inaccuracy of relatively big time steps, our streaklineintegration uses a linearly interpolated integration scheme
with data dependent order k as shown in (5).
j+1

pi

1
j
j
j
j
j
= pi + ((1 − ) f (pi )i + f (pi )i+1 )
k
k
k

(5)

where pi+1 = pki is the final particle position at time step
i+1 and p0i = pi is the particle position in time step i. k is determined once per time step and particle by analysis of angular deviation between vectors from time steps i and i + 1. By
incorporation of further time steps and the use of quadratic
interpolation, accuracy could be improved even further. This
approach has a similar effect on accuracy as adaptive integration of streamlines with Runge-Kutta or comparable methods in the stationary case.
4.2.1.2. Adaptive insertion of particles. In regions of
high divergence, additional particles have to be inserted at
positions throughout the streakline to maintain a given particle resolution and guarantee a satisfyingly smooth streakline. We use the following criteria to decide whether to insert
a particle between two neighbors i, j in time step t:
• Distance based: if ||pti − ptj || > εd , with εd being a threshold which is a certain fraction bigger than the initial distance between two newly generated particles, insert ptk at
ptk = 12 (pti + ptj ).
• Angle based: if ∠(pi , p j , pk ) > εa , insert particles pt−1
r ,
t−1
t−1
1 t−1
pt−1
at pt−1
= 12 (pt−1
+
p
)
and
p
=
(p
+
s
r
s
i
j
j
2
pt−1
k ).
4.2.1.3. Adaptive deletion of particles. We delete a particle k, if the total distance to its neighbors falls below a given
threshold (e.g: 12 εd ) and the angle enclosed by its neighbors
is greater than 120◦ , i.e. we do not lose details.
4.2.1.4. Accurate boundary integration. Another reason
for us to propose grid-less methods for vector field approximation is the property of MLS to allow integration of streamand streaklines on boundary geometry with no-slip condition, as velocities approximated this way generally do not
evaluate to zero at the boundaries of the dataset. This behavior is desired when a true segmentation of the vector field is
to be obtained and this form of approximation is compatible
with the interpretation of simulation results. A major challenge during streakline integration is the process of boundary fitting, i.e. the event in time, when parts of a streakline
first meet with geometry of the boundary object as illustrated
in Figure 4.
Our fitting algorithm works as follows:
If a segment pti ptj of the streakline detects an intersection
with boundary geometry, one of the following cases might
occur. a) both particles penetrate the boundary of the dataset
b) one particle penetrates the boundary object c) no particles penetrate the boundary object (as shown in Figure 4).
In cases a) and b), the particles that penetrated the boundary

884

H. Obermaier, M. Hering-Bertram, J. Kuhnert, and H. Hagen / Volume Deformations in Grid-Less Flow Simulations

4.2.2. Visualization of Streak Areas

Figure 4: A segment of a streakline is fitted to boundary geometry, after an intersection was detected.

For a two-dimensional dataset, we create a texture of arbitrary but sufficient resolution and use Bresenham’s line algorithm [Bres65] to plot both the boundary of the dataset
and the traces of streak- and streamlines. In a second step,
all empty areas left and right of a streak- or streamline are
tagged and colored in a distinct color, using a simple recursive 4-neighborhood seeding algorithm. The dataset is then
overlaid with the resulting texture, visualizing a segmentation into areas of similar flow (see Figure 7).
5. Results and Comparison
5.1. Tensor Deformations

surface are relocated to the intersection between their paths
and the boundary surface and advanced to the appropriate
updated position and the algorithm proceeds with case c) if
there is no direct line of sight between these new positions.
In case c), the intersection points of the line pti ptj with geometry are examined. If these intersection points lie on neighboring boundary elements, the common vertex is added to
the streakline. If this is not the case, a new point is inserted
half-way between pt−1
and pt−1
in the previous time step,
i
j
and the algorithm is repeated for the new left and new right
segment at the current time step. In our tests, this algorithm
converged in less than 3 iterations.
A more straightforward approach might consider connecting
the two points according to the shortest connection along the
boundary object with respect to their corresponding intersection points, without inserting a new point in the previous
time step. This however does not always produce correct and
unambiguous results, especially in the case of big time steps
and obstacles with a low resolution.
The movement along boundaries works as described in
[OKHH08], with the additional requirement to keep track of
the fraction of the current path length spent on the boundary
object to correctly advance each particle to a new position
on the boundary. Particles on boundary are released, if their
velocity is virtually parallel to the boundary’s normal, thus
indicating a separating behavior.
This method allows the generation of streaklines at userspecified positions throughout the dataset. Their capability
to integrate along boundary makes them capable to indicate separating or, if integrated backwards, attaching behavior along their path, thus avoiding the necessity to track
and match separation and attachment points throughout the
whole dataset to obtain seeding locations for separating
lines, when initial material boundaries are known. While this
method works in two- and three-dimensional space (in the
three-dimensional space, additional intersections between
boundary elements and planes perpendicular to the streakline normal are needed) and can be integrated into the generation of streaksurfaces, this work focuses on the use in twodimensional datasets.

Both methods are based on the same mathematical model.
The tensor accumulation scheme in the stationary part is restricted to one time step and is therefore only required to
evaluate one matrix sequence. In addition to the increased
need of memory, a streakline occupies multiple time steps
and produces a large amount of comparatively short tensor
sequences. Adaptive streaklines require tensor interpolation
and a strategy to avoid visiting a particle more than once, that
can easily be achieved by particle matching between subsequent time steps.
Over time (or space), the shape of deformed tensors tends
to lose expressive power as it may degenerate to long or flat
shapes. In such cases different points on the surface have
low topological correspondence. If this occurs a reset of the
initial matrix of the following matrix sequence can produce
a better visualization of the desired properties. Figures 56 show practical results of tensor deformations in two- and
three-dimensional cases. The visualizations indicate a mixing and disturbing motion near the flow obstacle. This is due
to no-slip properties of the boundary surface. Specification
of the starting points for stream- and streakline integration
should either be done manually to analyze specific regions
of the flow field, or can be done automatically in a uniform
fashion to give an overall impression of the mixing properties of a certain flow field.
5.2. Volume and Area Deformations
The stationary case does not require tracking of separation
lines and can be visualized accurately by existing methods
and is therefore far less complex than the time-dependent
case, where adaptivity of surfaces may lead to an intolerable amount of particles and a huge increase in computation times. While streamline integration on boundaries has
to cover multiple special cases as shown in previous work,
it is computationally less demanding than the streakline approach, where at each time every segment of the streakline
has to be tested for intersection with geometry.
Area deformations near a flow obstacle in a planar dataset
of approximately 3.000 points are shown in Figures 7 and
8. Initial starting positions for streaklines were set manually
c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

H. Obermaier, M. Hering-Bertram, J. Kuhnert, and H. Hagen / Volume Deformations in Grid-Less Flow Simulations

885

ary object. In the shown datasets, a factor of less than 2 was
observed.
Stream volume deformations in a simulated mixing tube
with approximately 110.000 scattered points are displayed
in Figures 9-11. The shown dataset consists of a tube with
six twisted obstacles, each dividing the flow in two different
segments. Our method extracts 64 stream volumes, visualizing a stretching, rotating, and intermingling behavior of the
field.

Figure 5: Four 2D streaklines integrated past a sphericalobstacle. High resolution of lines gives a homogeneous impression, while low point resolution gives a good impression
of general deformation properties.

Figure 7: Visualization of streak areas in a sequence of three
time steps. Bending, stretching, thinning and thickening deformations in all areas are visible. Area analysis near the
right border of the dataset provides information about output material distributions.

Figure 6: 3D streakline with ellipsoids in a sequence of four
consecutive time steps. Clinching, stretching as well as rotational behavior over time and space can be observed. Coloring indicates areas with heavily deformed volumes.

in a symmetric fashion. In practice, these points are defined
by the input material distribution and should be an application specific output of the simulation. The inner area in the
periodic flow of Figure 8 is caused by a single boundaryintegrated streakline, which was started in the middle of the
entry region of the simulation. As indicated by a comparison of the Figures 7 and 8, such streaklines allow a more
detailed view of the mixing process. The main drawback of
boundary streaklines is the computational cost of their integration, since during every integration step intersection tests
with boundary have to be computed and particles are traced
along boundary elements. The factor of increased computation time depends strongly on the complexity of the boundc 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

Figure 8: Visualization of periodic streak areas in a Karman
vortex street with boundary streakline. Periodicity, frequency
and form of the deformations give an impression of the final
material composition.

5.3. Conclusion
We have proposed new methods to extract and visualize volume deformations and demonstrated their use in grid-less
vector fields of different applications. The first method focused on deformations of ellipsoidal volumes along lines,
extending previous work on local deformations to a global

886

H. Obermaier, M. Hering-Bertram, J. Kuhnert, and H. Hagen / Volume Deformations in Grid-Less Flow Simulations

Acknowledgments
This work was supported by the German Research Foundation (IRTG 1131) and by the Center for Mathematical and
Computational Modeling (CM)2 .

Figure 9: Visualization of two streamsurfaces (red, blue)
originating from different separation lines located on edges
of obstacles. For volume composition such surfaces are intersected and split.

References
[BHD*94] BRILL M., HAGEN H., DJATSCHIN W., RODRIAN H.,
KLIMENKO S. V.: Streamball Techniques for Flow Visualization.
In Proc. of Vis ’94 (1994), 225-231
[BML95] BECKER B. G., MAX N. L., LANE D. A.: Unsteady
Flow Volumes. Proc. of the 6th Conference on Visualization ’95
(1995), 329
[Bres65] BRESENHAM J. E.: Algorithm for Computer Control of
a Digital Plotter. IBM Systems Journal 4, 1 (1965), 25-30
[GKT*08] GARTH C., KRISHNAN H., TRICOCHE X., BOBACH
T., JOY K. I.: Generation of Accurate Integral Surfaces in TimeDependent Vector Fields. IEEE TVCG 14, 6 (2008), 1404-1411

Figure 10: Visualization of a single volume passing through
a mixing device, displaying twisting and stretching deformations.

view of deformations in vector fields. The second approach
constructs stream volumes in stationary datasets without the
prior knowledge of material boundaries and streak areas
based on boundary-integrated streaklines in time-dependent
fields. To reduce numerical errors during tensor computations, we utilized a flat matrix-multiplication scheme and
an implicit form of the underlying mathematical problem.
The two methods to extract stream volumes and streak
areas follow different approaches: The three-dimensional
version was based on intersection of separating streamsurfaces followed by a volume composition, whereas the
two-dimensional approach inherently avoids intersection of
streaklines and bypasses the problem of entry/exit point
tracking by the integration of streaklines on boundary geometry.
For future work, we plan to increase the robustness of our
approaches with respect to three-dimensional time-varying
stream volumes. One of the challenges in this context are
mesh entanglements, where tensor deformation data may
help adapt surface resolution.

[Hul92] HULTQUIST J. P. M.: Constructing stream surfaces in
steady 3D vector fields. In Proc. of Vis ’92 (1992), 173-175
[KHL99] KENWRIGHT D. N., HENZE C., LEVIT C.: Feature Extraction of Separation and Attachment Lines. IEEE TVCG 5, 2
(1999), 135-144
[LL99] LEEUW W. DE, LIERE R. VAN: Visualization of global
flow structures using multiple levels of topology. In Data Visualization 1999 (1999), 45-52
[MBC93] MAX N. L., BECKER B. G., CRAWFIS R.: Flow volumes for interactive vector field visualization. Proc. of the 4th
Conference on Visualization ’93 (1993), 19-14
[MMH04] MULLER N., MAGAIA L., HERBST B. M.: Singular
Value Decomposition, Eigenfaces, and 3D Reconstructions. Society for Industrial and Applied Mathematics, SIAM REVIEW 46,
3 (2004), 518-545
[Nea] NEALEN A.: An As-Short-As-Possible Introduction to the
Least Squares, Weighted Least Squares and Moving Least
Squares Methods for Scattered Data Approximation and Interpolation. Technical Report, Discrete Geometric Modeling Group,
TU Darmstadt
[OKHH08] OBERMAIER H., KUHNERT J., HERING -B ERTRAM
M., HAGEN H.: Stream Volume Segmentation of Grid-Less Flow
Simulation Technical Report, TU Kaiserslautern (2008)
[USM96] UENG S., SIKORSKI C., MA K.: Efficient Streamline,
Streamribbon and Streamtube Constructions on Unstructured
Grids. IEEE TVCG 2, 2 (1996), 100-109
[TK] TIWARI S., KUHNERT J.: Finite pointset method based on
the projection method for simulations of the incompressible
Navier-Stokes equations. Springer Lecture Notes in Computational Science and Engineering: Meshfree Methods for Partial
Differential Equations I, 26, Springer, Berlin.
[Wij93] WIJK J. VAN: Implicit Stream Surfaces. Proc. of the 4th
Conference on Visualization ’93 (1993), 245-252

Figure 11: Visualization of multiple stream volumes.

c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

