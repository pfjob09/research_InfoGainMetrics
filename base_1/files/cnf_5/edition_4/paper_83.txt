Embodying and Extracting Data in Web3D Models of Proposed Building
Developments

Robina Hetherington, Brian Farrimond, Paul Clynch
Liverpool Hope University
{hetherr@hope.ac.uk, farrimb@hope.ac.uk, clynchp@hope.ac.uk}

Abstract
As an application of XML (eXtensible Markup
Language), X3D (eXtensible 3 Dimensions), offers
opportunities for the embodiment, extraction, processing
and display of data from 3D models of architectural
proposals presented over the WWW.
Client side
manipulation of XML data using AJAX (Asynchronous
Javascript and XML), can be employed to provide
contextual information about the project.
In the context of urban planning the visualization of a
proposal by means of a 3D model will not provide all
information required by planning officials. Additional
data, such as maximum height, the percentage of the site
developed and building materials, are required. Relevant
numerical data exist within an X3D model, but are not in
the required form and techniques are described for its
extraction.
Descriptive information regarding the
development can also be embedded into the model and
techniques for this and its extraction and display are also
described. The techniques are illustrated by means of a
case study. Conclusions are drawn as to how the method
could be applied to a large scale project.
Keywords--- X3D, Ajax, XML, Ajax3D, SAI,
Architecture, Planning, Environment.

1

Introduction

Planning authorities in the UK and Europe are
frequently required to make data available in a digital
form over the Web. In the UK a significant number of
local authorities, responsible for managing the
development process, make pdf files of documents
relating to proposed developments available via websites.
However, more effective methods which allow the
display of local planning proposals in web based
interactive and information rich virtual reality, free at the

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

point of access, are required [1, 2]. Technical limitations
have, until recently, prevented the distribution and display
of three-dimensional models to non-specialist audiences
via the Web. However, recent developments in computer
hardware, and in particular the ready availability of
graphics cards capable of rendering realistic threedimensional models, along with the use of high speed
connections, mean that it is now possible to make and
distribute site planning models to all concerned with the
decision-making process.
This paper explores the use of XML technologies to
embed, display and exchange data in a single 3D model.
XML was designed for “industry-specific markup,
vendor-neutral data exchange, media-independent
publishing” [3]. X3D, an ISO standard, is a royalty free
format for real-time interactive 3D models. It has evolved
significantly from its beginnings as VRML (Virtual
Reality Modeling Language) [4]. The major difference
from VRML is that it is an application of XML. This
presents important opportunities for the integration of
building information into one X3D file along with the
geometrical data required to display the model. The
technologies of XML can be leveraged for the filtration,
computation and display of contextual and numerical data
relating to a proposed development. X3D plug-ins can be
used to display the model alongside this data, thus
providing a rich three-dimensional interactive rendering
of the design alongside descriptive text and numerical
information.
The paper is organized in a number of sections.
Section 2 presents a review of work relating to
information rich models delivered over the web. Section
3 sets the objectives of the work described in this paper.
Section 4 outlines the methods developed to create and
display the information embedded within the model file.
Section 5 presents a case study illustrating the application
of the techniques outlined in earlier sections to a real-life
planning application for a dwelling in the grounds of an
existing house. Section 6 discusses issues that arose in

the implementation of the method.
drawn in Section 7.

2

Conclusions are

Background

Three dimensional models of buildings are often not
sufficient to ‘tell the whole story’. Just as in real life a
visit to an unfamiliar place may benefit from the
provision of additional information, for instance a guide
book with dates, descriptions and histories, additional
information may be required to demonstrate fully the
potential impact of a proposed building development.
In the UK further information is required to
supplement the visualization of the proposed development
when applying for planning permission. Typically,
numerical information such as maximum height, floor
area and percentage of land developed is required along
with descriptive information regarding materials and
finishes [5].

2.1

Information Rich Virtual Environments

IRVEs (Information Rich Virtual Environments)
embed abstract information within a 3D model; thus
abstract and perceptual information are integrated into a
single environment. They differ from AR (Augmented
Reality) which enhances a physical world. They enhance
the virtual world with the abstract information [6].
Metadata, information that is associated with an
object in the X3D world, is part of ISO/IEC 19775, which
can be attached to X3D nodes. Metadata parameters can
be expressed in various data types [4]. The description of
the semantics of virtual environments is based on two
types; geometric objects and semantic objects [7].
There are a number of reported applications that
embed metadata within X3D models for different
purposes. For example, Barton et al [8] created X3D
models of an area of public housing to enable users to add
comments to the model. The aim is to enable public
participation in the form of ‘post-it’ type facilities. The
public's responses are stored in a database in XML
format. Customized tools were developed to support
web-based user interaction with information embedded in
an X3D DOM in real time.
The use of a single X3D file to contain all model
data, including abstract temporal data, has been
demonstrated by Hetherington et al [9]. In their work the
temporal data associated with the model was extracted
and displayed alongside the 3D visualisation of the model
in a web page. XPath and XSLT were used to filter and
transform this data from the MetaData tags into HTML.

2.2

of the model. However, the geometrical data can be used
to help the user to better understand the architectural
design.
Hetherington et al [10] demonstrated this
technique with a simple model constructed of primitive
shapes such as cuboids (Box) and extruded cross sections
(Extrusion) from which the required numerical
information was calculated. JavaScript was employed to
walk through the DOM where specific groups were
selected and geometrical data read from the Shapes
within the groups and stored in a data structure. That data
structure was then used in calculations and the results
were written into a webpage.

2.3

3

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

Objectives

Based upon the above background, the objectives for
this work were defined as:
1.

Investigation of the use of client-side JavaScript to
manipulate the data contained within the X3D file to
extract both numerical and textual data, perform
calculations and display the results. The types of
data required are mixed. Textual data can be
contained within MetaData tags, giving information
such as dates, materials and architect’s descriptions.
The numerical data required by planners, such as the
maximum height, the footprint, the proportion of the
site developed, are contained within the geometric
data of the X3D file, but not in an immediately
usable form. The objective is to extract and calculate
this numerical information.

2.

Investigation of the structure of the X3D file required
to enable the extraction of numerical and textual data.
It was proposed to display this data in a webpage
using techniques described by Hetherington et al
because of the familiarity with the webpage
environment of non-technologists [10]. The model
was to be contained in one part of the browser
window and the semantic information in the other.

Numerical calculations

Numerical information is required in addition to
visualisation in order to describe the building fully for
planning purposes. Geometric data generated by current
3D modelling software is intended only for the rendering

Interactive 3D models

The combination of Asynchronous JavaScript and
XML, known as Ajax, enables client programming to
create rich, responsive applications which work within a
web page. Ajax3D is based upon the integration of the
DOM (Document Object Model) and SAI to control X3D
scenes. Control of the state of the model from outside the
VR world has been defined by Parisi as Ajax3D. With
Ajax3D, immersive virtual worlds can be displayed
within a web browser, integrated with pages and other
media to enable professional, scalable, industrial strength
applications [11].

4

Development of the method

The techniques, using X3D and Ajax3D, were
initially developed using a small prototype imaginary

building, having a simple form consisting of two wings
on an irregular plot. Figure 1 illustrates the 3D model of
the simple building form loaded into a plugin, Flux [12]
with numerical information about the model calculated
and displayed using HTML below the 3D visualisation in
the webpage.
It was then implemented and refined on the more
complicated forms in the case study.

most
modelling
software
in
IndexedFaceSets or meshes.

the

form

of

Figure 2 Scene Graph showing Switch,
MetadataSet and MetadataString tags
In this work an IndexedFaceSet is used to create
the building forms and the techniques for obtaining
numerical information from the geometric data will be
described below.

4.2

Figure 1 Prototype model

4.1

Structure of the model

In earlier work by Hetherington et al [13], the X3D
model file was structured to allow for the display of the
building at different times using Group nodes. Each
Group node was also given a DEF parameter to identify
and distinguish each time period.
This method has been employed in this work where
MetadataString nodes have been used to contain
semantic data, such as architectural descriptions,
materials, dates, etc... These nodes are nested within
MetaDataSet nodes which are in turn nested within
Group nodes for different parts of the development, the
existing house and a number of alternative proposals, as
illustrated in the Scene Graph shown in Figure 2
Hetherington et al [10] employed primitive shapes
such as cuboids (Box) and extruded cross sections
(Extrusion) to create models of buildings of relatively
simple forms. However, these shapes are not adequate for
a complex buidling. Complex shapes are generated by

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

Loading the data

The approach employed in this work involves client
side manipulation of the model data. The definition given
by Parisi for Ajax3D is that it is a “web browser-hosted
program” [11]. Four types of file are required for the
client-side application:
 The HTML file which loads the other files and acts
as the user interface to display the 3D model in a
plugin and the contextual data


The X3D model files



The JavaScript file containing the program to extract,
calculate and display data



A CSS (Cascading Style Sheet) file containing the
display instructions.

The code shown in Figure 3 tests for the browser
type, loads the 3D plugin, in this case the Flux Player
[14], and then loads the X3D file.
If the browser is Internet Explorer, supporting
Active X, the plugin is assigned the name FLUX1 and
the X3D file is loaded into an Active X object.
For non-IE browsers such as Firefox, the plugin is
assigned the name FLUX2 and the X3D file is loaded
into an empty DOM document.
The load() function, after it has loaded the X3D
file, then calls a function, extractGroup() which

extracts the data from the X3D file and performs
calculations as outlined in the next section.
Finally, browser listeners are then added to the 3D
scene to allow the camera views and scenery to be altered
by HTML links.
function load(){
if (document.implementation &&
document.implementation.createDocument)
{
browser = document.FLUX2.getBrowser();
xmlDoc = document.implementation.createDocument('','',null);
xmlDoc.async = false;
xmlDoc.onload = extractGroup;
xmlDoc.load("wyncote.x3d");
}
else if (window.ActiveXObject)
{
browser = document.FLUX1.getBrowser();
xmlDoc = new ActiveXObject("microsoft.xmldom");
xmlDoc.async = false;
xmlDoc.load("wyncote.x3d");
while(xmlDoc.readyState != 4) {};
extractGroup();
}
if (browser != null)
{
listener = new Object();
listener.browserChanged = browserChanged;
browser.addBrowserListener(listener);
browser.loadUrlS ("wyncote.x3d");
}
}

vertices at ground level (y = 0) are identified from the
IndexedFaceSets in the model as shown in Figure 4.
<IndexedFaceSet
coordIndex="0 1 2 3 4 5 6 7 8 9"
solid="false" >
<Coordinate point="36 0 -40 -43
0 -2 -45.5 0 2 -46 0 5 -44 0
8 -42 0 10 -39 0 11 -13 0 18 4
0 25 22 0 34"/>
</IndexedFaceSet>

Figure 4 X3D IndexedFaceSet
The formula given in Equation 1 is then used to
calculate the area of the building.

A=

1 N −1
∑ (x i z i+1 − x i +1z i )
2 i =0

This formula calculates the enclosed area A using the
x and z coordinates as illustrated in Figure 5.

Figure 3 Code to load the X3D file

4.3

(1)

(x1, z1)

Processing numerical data

The method extracts and calculates 3 sets of values
for the existing building and the alternative proposals:
 Maximum height
 Floor area
 Percentage of site covered with buildings
(footprint).
JavaScript is used to walk through the document tree
of the model and select any Group with a DEF
parameter, extracting the group DEF, metadata and
dimensional data from the various Shapes within the
groups and storing it in a data structure. That data
structure can be used for a number of calculations. The
results are then written in the form of HTML which can
be displayed in the browser.
It is relatively easy to determine the maximum height
of the building, the JavaScript looks for the maximum
value of y and then subtracts the ground level value,
which in this case is 0.
For a rectangular building the calculation of the floor
area would be relatively simple. However, for complex
shapes the calculation is more complicated.
In the method employed the coordinates of the
building corners are used to calculate the area of the
ground plan of the building. The sequences of the

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

(x2, z2)
(x0, z0)

(x4, z4)
(x3, z3)

Figure 5 Co-ordinates of a polygonal ground
plan in the x-z plane where y=0 [15]

4.4

Display of the model and related
information

The calculated numerical information, along with the
textual metadata, is displayed as HTML by use of the
innerHTML within the JavaScript code to write text
dynamically to a named div tag within the body of the
HTML document. The JavaScript function is invoked
when the user clicks on the link on the web page,
selecting either the existing house on its own or along
with one of the alternative proposal.

5

Case study

This section outlines how the method developed for
the simple building was applied to a real-life situation.
The motivation for this work was a real project, namely
seedking planning permission for a proposed dwelling in
the garden of a house called Wyncote. As can be seen
from Figure 6, Wyncote is an unusual building with a

complex plan. It has a two storey central octagonal
volume and single storey wings forming a cross on plan.
This complexity thus involves considerably more difficult
calculations than for a simple rectangular shape.

a particular time period or proposal. JavaScript is used to
calculate numerical information such as the area of the
land covered, total floor area (footprint), maximum height
of existing and proposed buildings from the geometries of
the model. It also displays the semantic data, embedded
within the model as MetaData, such as the materials from
which the building is constructed.

Figure 6 X3D model of Wyncote with
photographic textures added

5.1

The model and code

The model of Wyncote and two alternative proposals
for a new house to be situated within the grounds was
coded by hand using Notepad++, a simple text editor,
partly because Wyncote was very difficult to model from
primitives and also to ensure extremely ‘clean’ code,
structured in a particular way. It was validated using
X3D-Edit [16]. The JavaScript was also written in
Notepad++ and initially debugged using Firefox, but also
checked with Internet Explorer. Issues associated with
the layout of the X3D code, especially line breaks, used to
make the code more readable caused some difficulites in
writing and debugging the code.
The method outlined in section 4.2 involved the
model data being contained in one X3D file, however, in
the case study a number of X3D files were included as
Inline files. The code to calculate areas looks for
IndexedFaceSets, however, items such as the trees,
are also generated from IndexedFaceSets and if
contained in a single X3D file would adversely influence
the calculation. The use of multiple X3D files also
simplified the creation of the model, by effectively
dividing it into ‘chunks’ of manageable data.

5.2

Display in the webpage

Figure 7 shows the final model embedded within a
webpage. The HTML links on the left control the display
of the site model to show the site as existing and with
alternative proposals. The links also control the display
of particular features of the model such as landscape, site
area and the view of the model. The text on the right
hand side of the display is generated dynamically from
the X3D file and depends upon the hyperlink selected for

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

Figure 7 Browser showing the building model
and the HTML generated from the X3D data

6

Discussion

The types of data required for planning applications
consist of descriptive text and numerical information.
The work has demonstrated how textual data can be
contained within MetaData tags, giving information such
as dates, materials and architectural descriptions. The
numerical information required by planners, such as the
maximum height, the footprint, the proportion of the
developed site, although contained within the geometric
data of the X3D file, is not in an immediately useable
form. It has been shown that if the model data is
structured in a particular way the information can be
extracted, calculations performed and the results
displayed as HTML using JavaScript.
The manipulation of the X3D data file required it to
have a particular structure. The method involved the use
of Switch and nested Group nodes to display the
model in different temporal states.
Semantic data
regarding each temporal phase of the building are then
contained as metadata nested within each Group node.
Elements of the model, which are not required for
calculation, such as the trees, can be modeled separately
and linked from within the main X3D file.

Although the model file size is relatively small,
19KB, the complete working application has 49 files
totaling 2.3MB. The size is due to the inline models of
the trees and the photographic images used to enhance the
model visually. These take time to load and display in the
browser, even on a fast computer. However once it is
loaded, because the application runs on the client
computer, the calculations for the alternative proposals is
fast and the different designs can be compared very
quickly.

7

Conclusion

This work has demonstrated that it is possible to
create a client side application using Ajax3D to extract,
calculate and display the necessary information required
for planning applications. It has been shown that this
information can be displayed dynamically in an
interactive browser based application alongside the
relevant 3D representation. The method was developed
and tested on a small, but complex domestic project. All
models were generated by hand using a basic text editor,
NotePad++. This is impractical for most applications.
The next step is to investigate how it could be used on a
larger and more multifaceted set of buildings with a
model generated by 3D modeling software such as Flux
Studio or 3ds Max. The JavaScript program has been
written for one specific model, further work will involve
more complex models containing a variety of geometries.
The selection of Groups with DEF attributes depends
upon the naming of elements and this also requires further
work and refinement to create a more reusable code
which will work on more than one model.
This paper constitutes a proof of concept based upon
a small domestic project. This work is now being
extended to a more complex real life project based upon
modelling the campus of Liverpool Hope University, to
show both how this campus has evolved over time and
also the nature of future development plans. The model
will then be used for both facilitating planning decisions
and marketing purposes. Enhancements to the method
that will be investigated will include the ‘clicking’ of
buildings in the model to call JavaScript functions for the
display of information regarding that building in the
webpage.

8

References

[1]

J. Counsell, S. Smith, and N. Bates-Brkljac, "Web 3D
based dialogue for public participation and the VEPs
Project," in IV2006, London, 2006, pp. 343-348.
A. Smith, M. Dodge, and S. Doyle, "Visual
Communication in Urban Planning and Urban Design,"
Centre for Advanced Spatial Analysis, University College
London 1998.

[2]

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

[3]
[4]

[5]

[6]

[7]

[8]

[9]

[10]

[11]

[12]

[13]

[14]

[15]

[16]

W3C, "Extensible Markup Language (XML)", 2006,
www.w3.org/XML/ accessed on 11/02/2007.
Web3D-Consortium, "Extensible 3D (X3D), ISO/IEC
19775-1:2004, Part 1 -- 7 Core component", 2005,
http://www.web3d.org/x3d/specifications/ISO-IEC19775X3DAbstractSpecification/Part01/components/core.html,
accessed on 11/11/2006.
Planning-Portal, "Planning Portal - Planning Permission",
2007,
http://www.planningportal.gov.uk/england/genpub/en/101
1888236124.html, accessed on 11/02/2007.
D. A. Bowman, C. North, J. Chen, N. F. Polys, P. S. Pyla,
and U. Yilmaz, "Information-Rich Virtual Environments:
Theory, Tools, and Research Agenda," in ACM
Symposium on Virtual Reality Software and Technology,
Osaka, Japan, 2003, pp. 81-90.
F. Pittarello and A. De Faveri, "Semantic Description of
3D Environments: a Proposal Based on Web Standards,"
in Web3D Symposium, Columbia, Maryland, 2006, pp. 85
- 95.
J. Barton, J. Plume, and B. Parolin, "Public participation
in a spatial decision support system for public housing,"
Computers, Environment and Urban Systems, vol. 29, pp.
630–652, 2005.
R. Hetherington, B. Farrimond, and S. Presland,
"Information Rich Temporal Virtual Models using X3D,"
Computers & Graphics, vol. 30, pp. 287-298, 2006.
R. Hetherington and B. Farrimond, "The Integration and
Display of Architectural Information Using XML and
X3D Technologies," in Proceedings of the 11th
International
Conference
on
Human-Computer
Interaction and 1st International Conference on Virtual
Reality, Las Vegas, 2005.
T. Parisi, "Ajax3D: The Open Platform for Rich 3D Web
Applications", 2006, http://www.ajax3d.org/whitepaper/,
accessed on 10th November 2006.
Media-Machines, "Media Machines - Virtual worlds, Web
3D,
X3D
for
the
rest
of
us",
2007,
http://www.mediamachines.com/, accessed on 8/02/2007.
R. Hetherington and J. Scott, "Adding a Fourth
Dimension to Three Dimensional Virtual Spaces," in
Web3D Symposium, Monterey, 2004, pp. 163-172.
Media-Machines, "Media Machines - Virtual worlds, Web
3D,
X3D
for
the
rest
of
us",
2006,
accessed
on
http://www.mediamachines.com/,
12/09/2006.
P. Bourke, "Calculating the area and centroid of a
polygon",
1988,
http://local.wasp.uwa.edu.au/~pbourke/geometry/polyarea
/, accessed on 18/11/2006.
D. Brutzman, "X3D-Edit for Extensible 3D (X3D)
Graphics
README",
2006,
http://www.web3d.org/x3d/content/README.X3DEdit.html, accessed on 12/09/2006.

