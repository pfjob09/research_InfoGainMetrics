Fifth International Conference on Computer Graphics, Imaging and Visualization
Visualisation

Efficient Algorithms for Non-Rational and Rational B´ezier Curves
Natasha Dejdumrong
King Mongkut’s University of Technology Thonburi
Computer Engineering Department
126 Pracha-Uthit Road, Bangmod, Tungkru, Bangkok, 10140, Thailand
natasha@cpe.kmutt.ac.th

Abstract

of the curves as well as the linear time complexity. Nevertheless, it is not worth enough to be a role model because
its control points do not really mimic the shape of the curve
[4].
Thus, there was an inspiration in formulating a prototype model that can gather all benefits and avoid disadvantages from the previous models. The proposed curve has
the shape similar and closed to the Said-Ball curve and possesses the linear computational complexity as of the WangBall and DP curves. It is anticipated that this model would
be expressive and used as an intermediate or transitional
model for the future curve design. Definitions

In this paper, a new basis with linear computational
complexity has been introduced and used to form nonrational and rational curves. Two algorithms for computing points on non-rational and rational proposed curves
are expressed with their linear complexity. Moreover,
the relationships between these proposed curves and the
B´ezier curves, for both non-rational and rational forms,
are given by using polar form and homogeneous coordinate approaches. Consequently, two efficient algorithms
with linear complexity have been introduced to be used in
drawing non-rational and rational B e´ zier curves.

1.1

Keywords—B´ezier Curve, Computational Complexity.

1 Introduction

n

In curve modeling and design, B´ezier curve is the de
facto standard and the first model that geometric modelers
will bring into mind because of its simplicity and stability. Although calculating points on the B´ezier curves consumes the quadratic computations by using de Casteljau
algorithm [1, 7], it has been used as an appropriate way in
constructing both polynomial and rational curves. Thus,
there were several ideas developed for finding the efficient
algorithms for evaluating the points on B´ezier curves, for
examples, by converting B´ezier curve into Said-Ball [9],
Wang-Ball [9, 3] or Delgado-Pe˜na form [6, 2].
An interesting method is to calculate for the Said-Ball
control points of a B´ezier curve and then computing for
points on the curve using Said-Ball algorithm [8, 10]. Although this algorithm is faster than the de Casteljau, it is
still quadratic complexity O(n 2 ). More efficient way is
to convert the given B´ezier points into the Wang-Ball control points of the same curve. The points on this curve can
then be generated by using Wang algorithm [8, 11], which
is linear complexity. Hence, the evaluation of the B´ezier
points on the Wang-Ball form is a good solution but it is
not shape preserving. Delgado-Pe˜na curve is another powerful model because it claims the shape preserving property

978-0-7695-3359-9/08 $25.00 © 2008 IEEE
DOI 10.1109/CGIV.2008.62

B´ezier Curves

An nth -B´ezier curve with n + 1 control points, denoted
by {bi }ni=0 , in E 3 , can be expressed by
B(t) =

Bin (t) · bi ,

0 ≤ t ≤ 1.

(1)

i=0

where
Bin (t) =
and

n
i

n i
t (1 − t)n−i ,
i
=

n!
.
i!(n − i)!

(2)

(3)

A rational B´ezier curve of degree n in E 3 is the projection of an nth -degree B´ezier curve in E 4 into the hyperplane w = 1. Here a point in E 4 is given by its coordinates
[wx wy wz w] . Then a rational B´ezier curve of
degree at most n is given by
n
n
i=0 wi · Bi (t) · bi
.
(4)
n
n
i=0 wi · Bi (t)
The set of weights {wi }ni=0 are the weights corresponding
to the set of B´ezier control points {b i }ni=0 .

B(t) =

1.2

A New Proposed Curve in Non-Rational
Form

A new polynomial curve representation of degree n with
n + 1 control points, denoted by {d i }ni=0 , can be explicitly

109

formulated by
n

D(t) =

Din (t) · di ,

0 ≤ t ≤ 1,

(5)

i=0

where the new blending functions, {D in (t)}ni=0 , can be recursively defined by
⎧
⎨ (3t)i · (1 − t)i+3 , for 0 ≤ i < n2 − 1
n
(3t)i · (1 − t)n−i , for i = n2 − 1
Di (t) =
⎩ n
for n2 + 1 ≤ i ≤ n.
Dn−i (1 − t),
(6)
Particularly, if n is even, then
n

n

1. If n is odd, let
⎧
di ,
⎪
⎪
⎪
⎪
⎨ (1 − t) · d
(1 − t) · d
di =
⎪
⎪
(1 − t) · d
⎪
⎪
⎩
di+1 ,

3

2

n

2

3

(1 − t) , 3t(1 − t) , 3t (1 − t), t

(7)

are called cubic blending functions (degree 3). This form
is exactly the same as of cubic B´ezier curve.
For n = 4,
= (1 − t)3 d0 + 3t(1 − t)3 d1
+6t2 (1 − t)2 d2 + 3t3 (1 − t)d3 + t3 d4 .
(8)
For n = 5,

2. n ← n − 1. If n ≥ 3 then let d i = di for all i and
go back to Step 1.
3. Finally, the point D(t) corresponding to the value t
can be obtained by:
R
=
S
=
D(t) =

D(t)

D(t) =

1.3

(1 − t)3 d0 + 3t(1 − t)4 d1 + 9t2 (1 − t)3 d2
+9t3 (1 − t)2 d3 + 3t4 (1 − t)d4 + t3 d5 .
(9)

The Rational Form of this Proposed Curve

Similarly, the rational form for an n th -degree rational
curve can be defined by
D(t) =

n
n
i=0 ωi · Di (t) · di
,
n
n
i=0 ωi · Di (t)

(10)

where {ωi }ni=0 are the weights corresponding to the control points, {di }ni=0 .

2 Two Proposed Algorithms with Linear
Complexity
2.1

An Algorithm for Proposed Non-Rational
Curves

Algorithm 1.
The evaluation of a point D(t) on this curve corresponding to the parametric value t ∈ [0, 1], can be computed by
using the iterative algorithm as following:

n
2

0 ≤ i ≤ n2 − 2
, i = n2 − 1
−1 + t · d
n
+t·d 2 ,
i = n2
+ t · d n2 +1 , i = n2
n
2 +1 ≤i ≤ n−1
(11)
n
2

If n is even, let
⎧
0 ≤ i ≤ n2 − 2
⎪
⎪ di ,
⎨
(1 − t) · d n2 −1 + t · d n2 , i = n2 − 1
di =
(1 − t) · d n2 + t · d n2 +1 , i = n2
⎪
⎪
⎩
n
di+1 ,
2 +1≤ i ≤n−1
(12)
This means that the curve with the control points
{di }ni=0 will be replaced by a new curve of degree
n − 1 with the new set of control points { di }n−1
i=0 .

Dnn2 (t) = 2 · 3 2 −1 (1 − t) 2 · t 2 .
For examples, n = 3, equation (5) can be reduced to
D(t) = (1 − t)3 d0 + 3t(1 − t)2 d1 + 3t2 (1 − t)d2 + t3 d3 .
The polynomials

n
2
n
2

(1 − t) · d0 + t · d1
(1 − t) · d1 + t · d2
(1 − t) · R + t · S

(13)

additions and 5n − 3 mulThis algorithm requires 5n−3
2
tiplications for n odd, and requires 5n−4
additions and
2
5n − 4 multiplications for n even. Hence, the computational complexity of this algorithm is only O(n).

2.2

An Algorithm for Calculating the Proposed
Rational Curves

Using homogeneous coordinates, an algorithm for computing the points on the non-rational curve can readily be
extended to the rational form. The extension can be expressed in the following algorithm.
Algorithm 2.
Similarly, the computation for a point D(t) on this rational
curve, can be expressed as follows:
1. If n is odd, let
⎧
ωi ,
⎪
⎪
⎪
⎪
for ≤ i ≤ n − 2
⎪
⎪
⎪ (1 − t) · ω n 2 + t · ω n , i =
⎪
⎨
2 −1
2
(1 − t) · ω n2 + t · ω n2 ,
i=
ωi =
⎪
⎪
⎪ (1 − t) · ω n2 + t · ω n2 +1 , i =
⎪
⎪
⎪
⎪
ω ,
⎪
⎩ i+1 n
for 2 + 1 ≤ i ≤ n − 1

110

n
2
n
2
n
2

−1

(14)

and

⎧
di ,
⎪
⎪
⎪
⎪
for 0 ≤ i ≤ n2 − 2
⎪
⎪
ωi+1
⎪
ωi
⎪
⎨ (1 − t) ωi · di + t ωi · di+1 , i =
ωi
(1 − t) ωi · di + t ωωi+1
· di+1 , i =
di =
i
⎪
ωi+1
ωi
⎪
⎪ (1 − t) ωi · di + t ωi · di+1 , i =
⎪
⎪
⎪
⎪ di+1 ,
⎪
⎩
for n2 + 1 ≤ i ≤ n − 1

n
2
n
2
n
2

−1

between the B´ezier curve and this proposed curve are considered and explicitly defined using polar form approach.
Proposition 1 The B´ezier control points {b k }nk=0 of a proposed curve of degree n can be given in terms of the control
points {di }ni=0 by
n
2

bk

(15)
If n is even, let
⎧
ωi ,
0 ≤ i ≤ n2 − 2
⎪
⎪
⎨
(1 − t) · ω n2 −1 + t · ω n2 , i = n2 − 1
ωi =
(1 − t) · ω n2 + t · ω n2 +1 , i = n2
⎪
⎪
⎩
n
ωi+1 ,
2 +1≤ i ≤n−1
(16)
bk
and
⎧
di ,
0 ≤ i ≤ n2 − 2
⎪
⎪
ω
⎪
ω
i+1
n
i
⎪
⎨ (1 − t) ωi · d n2 −1 + t ωi · d n2 , i = 2 − 1
ωi+1
ωi
(1 − t) ωi · d n2 + t ωi · d n2 +1 , i = n2
di =
⎪
⎪
⎪
d ,
⎪
⎩ i+1n
for 2 + 1 ≤ i ≤ n − 1
(17)
bk
Then replace the curve with the control points

3n−i

2i−3−n
i−k
n
k

n
i=

n
2

+2

for k <
n
2

−2

3i

=
i=0

· di

3n−i

2i−3−n
i−k
n
k

n
i=

n
2

+2

for k =
n
2

−2

=

3

i

i=0

i=

n
2

· di

3n−i

2i−3−n
i−k
n
k

+2

for k =
n
2

bk

−2

3i

=
i=0

+

(18)

3
i=

n
2

n−i

+2

for k =

3k

dk ,

n
k

· di +

3n−k

· dk ,

n
k

n
+1
2

n−3−2i
k−i
n
k

n

· di +

n
−1
2

n−3−2i
k−i
n
k

n

· di ,

n
n
− 1 or k >
+1
2
2

n−3−2i
k−i
n
k

+

where
= (1 − t)ω0 + tω1
= (1 − t)ω1 + tω2
= (1 − t)ωR + tωS .

· di

+

3. Finally, the point D(t) corresponding to the value t
is obtained by:

ωR
ωS
ωT

n−3−2i
k−i
n
k

+

2. n ← n − 1. If n ≥ 3 then let d i = di for all i and
go back to Step 1.

= (1 − t) ωωR0 d0 + t ωωR1 d1
= (1 − t) ωωS1 d1 + t ωωS2 d2
= (1 − t) ωωR
R + t ωωTS S,
T

3i

i=0

{di }ni=0 and the weights {ω i }ni=0 by a new curve of
degree n−1 with the control points { di }n−1
i=0 and the
weights {ωi }n−1
i=0 , respectively.

R
S
D(t)

−2

=

· di
2i−3−n
i−k
n
k

n

· di + 2 ·

3 2 −1
n
k

· dk ,

n
and n even.
2
(20)

(19)

Equation (20) can be simplified as in the following proposition.
Proposition 2 The B´ezier control points {b k }nk=0 of a proposed curve of degree n can be derived from the set of control points {di }ni=0 in terms of the matrix form by

This algorithm requires 5n − 3 additions, 15n − 9 multiplications and 5n−3
divisions for n odd. For n even, it
2
requires 5n − 4 additions, 15n − 12 multiplications and
5n−4
divisions. Therefore, the computational complexity
2
of this algorithm is also linear (O(n)).

[b0

3 Relationships between B´ezier and the Proposed Curves

b1

...

bn ] = [d0

d1

...

dn ] · Dn , (21)

or
n

Since a curve given in one form (one basis) can be represented in the other form, in this section, the relationships

bk =
i=0

111

n
δi,k
· di ,

(22)

n
where δi,k
is an element (i, k)th of an (n + 1) × (n + 1)
matrix, denoted by D n , and

n
δi,k

⎧
(n−3−2i)
⎪
3i k−i
,
for k < n2 − 1
⎪
n
⎪
(
)
⎪
k
⎪
⎪
⎪
(2i−3−n)
⎪
3n−i i−k
, for k > n2 + 1
⎪
⎪
(nk)
⎪
⎪
⎨ 3k
,
for k = n2 − 1
=
(nk)
⎪
⎪
3n−k
⎪
,
for k = n2 + 1
⎪
⎪
(nk) n
⎪
⎪
−1
⎪
⎪
2 · 3 2n ,
for k = n2 and n even
⎪
⎪
(
)
⎪
k
⎩
0,
otherwise.

dk

n
i=k+1

= b0

dn

= bn

dk

=

n
bk −
k

1
3k

n

−

3

for k <
=

3n−k
n
i=k+1

for k >
dk

=

n

−

3n−i

i=k+2

for k =
dk

=

1

i=0

n

−

3n−i

i=k+1

for k =

i=0

dω
1

...

dω
n ] · Dn .
(26)

. . . ωn dn
...
ωn

ω0 d0
ω0

=

·Dn ,
(27)

3i

wk bk
wk

n − 3 − 2i
di
k−i

n − 3 − 2i
di
k−i

3i

n

δi,k ·

=
i=0

ωi di
.
ωi

(28)

Equations (27) and (28) lead to the two following propositions.
Proposition 5 The B´ezier weights of this new rational
curve of degree n can be expressed in terms of the new
weights as follows:
...

[w0

wn ] = [ω0

ω1

...

ωn ] · Dn .

(29)

The B´ezier control points of this new rational curve are
given by
[w0 b0

ωn dn ] · Dn .
(30)
Given a rational n th B´ezier curve defined by its control
points {bi }ni=0 , the new weights and points for the proposed rational curve can be determined by solving a matrix
inversion in equations (29) and (30).
Proposition 6 The weights of the new curve for a rational
B´ezier curve of degree n can be expressed in terms of the
B´ezier weights as follows:

n
−1
2
k−2

...

b1

ω
bw
n ] = [d0

. . . wn bn
...
wn

w0 b0
w0

2i − 3 − n
di ,
i−k

n
bk −
k

3n−k

3i

...

bw
1

and

i=0

k−1

dn ] = [b0

Consequently, we have

n
+1
2

n
bk −
k

1
3k

...

d1

[bw
0

n − 3 − 2i
di
k−i

2i − 3 − n
di ,
i−k

3n−i

−

(24)

bn ] · (Dn−1 ) .
(25)
Using homogeneous coordinates, a B´ezier point b i and
i
a new proposed curve point d i can be expressed as b w
i =
wi bi
ωi
ωi d i
and di = ωi , respectively. Thus, from equawi
tion (21), the B´ezier control points of a rational curve can
be expressed in terms of the new curve control points and
their weights as:
[d0

2i − 3 − n
di ,
i−k

n−k

i=0

n − 3 − 2i
di
k−i

Proposition 4 The control points {d k }nk=0 of a proposed
curve of degree n for the B´ezier control points, {b i }ni=0 ,
can be shown by

n
−1
2

n
bk −
k

1

3i

i=0

n−i

i=n−k+1

dk

k−1

3i

n
and n even.
2

for k =
(23)

k−2

2i − 3 − n
di ,
i−k

3n−i

−

Proposition 3 The control points of this new curve corresponding to a given B´ezier curve of degree n can be expressed in terms of the B´ezier control points as follows:
d0

n
bk −
k

1
,
n
2 · 3 2 −1

=

n − 3 − 2i
di
k−i

2i − 3 − n
di ,
i−k
n
+1
2

[ω0

112

...

...

wn bn ] = [ω0 d0

ωn ] = [w0

w1

...

...

wn ] · (Dn−1 ) . (31)

The new curve control points for a rational B´ezier curve
are given by

4 Two Efficient Algorithms for Calculating
B´ezier Curves

wn bn ] · (Dn−1 ) .
(32)
Example 1 The relationships between the B´ezier control
points and the control points of this proposed curve when
the degree n = 4 and n = 5 are illustrated below.

As mentioned earlier, for computing points on a given
B´ezier curve, the de Casteljau algorithm is widely used. It
requires n(n + 1)/2 additions and n(n + 1) multiplications to calculate a point on a curve of degree n. In this
section, an efficient algorithm for calculating points on the
non-rational B´ezier curve will be presented as follows.
Algorithm 3: To compute a point on a non-rational B´ezier
curve,

[ω0 d0

...

ωn dn ] = [w0 b0

• for n = 4

⎡

1

⎢ 1
⎢ 4
D4 = ⎢
⎢ 0
⎣ 0
0
⎡

and
D4-1

b0
b1
b2
b3
b4

=
=
=
=
=

• for n = 5

⎢
⎢
=⎢
⎢
⎣

1
− 13
0
0
0

0
3
4

0
0
0
0
4
3

0
0
0

d0
(d0 + 3d1 )/4
d2
(3d3 + d4 )/4
d4
⎡

1

⎢ 2
⎢ 51
⎢
10
D5 = ⎢
⎢ 0
⎢
⎣ 0
0

0
3
5

0
0

...

⎤

0
0
1
0
0

0
0
0

0
0
0

0

1

0
0
1
0
0

0
0
0
0

0
0
0
− 31
1

d0
d1
d2
d3
d4

=
=
=
=
=

b0
(4b1 − b0 )/3
b2
(4b3 − b4 )/3
b4

0
0
0

0
0
0
0

0
0
0
0

9
10

0
0
0

9
10

0

0
0

0
0
0

0
0

3
4

1
4

4
3

3
5

0

⎥
⎥
⎥
⎥
⎦

0
0
0

1
10
2
5

Step 1: Convert the given B´ezier curve into the proposed
curve using Proposition 3 (or 4).

(33)

Step 2: Use Algorithm 1 for computing points on the proposed curve.
⎤
⎥
⎥
⎥
⎥
⎦

The computational complexity analysis of the algorithms for computing a point on the B´ezier curve, Said-Ball
curve, our new curve and Wang-Ball curve can be compared as follows. For example, when n is odd, the number
of additions for the curves are respectively as

(34)

n(n + 1) >

2n(n + 1) > (n + 1)2 > 5n − 3 > 3n − 1 (n > 3).

(35)

1

and
⎡
⎢
⎢
⎢
D5-1 = ⎢
⎢
⎢
⎣

b0
b1
b2
b3
b4
b5

=
=
=
=
=
=

1
− 23
− 19
0
0
0

5
3

0
0
0
0

10
9

0
0
0

d0
(2d0 + 3d1 )/5
(d0 + 9d2 )/10
(9d3 + d5 )/10
(3d4 + 2d5 )/5
d5

10
9

0
0

d0
d1
d2
d3
d4
d5

0
0
0
0

⎤

0

0
0
0
− 19
− 23
1

=
=
=
=
=
=

b0
(5b1 − 2b0 )/3
(10b2 − b0 )/9
(10b3 − b5 )/9
(5b4 − 2b5 )/3
b5

5
3

⎥
⎥
⎥
⎥
⎥
⎥
⎦

(n > 3)

Similarly, the number of multiplications are

⎤
⎥
⎥
⎥
⎥
⎥
⎥
⎦

5n − 3
3n − 1
(n + 1)2
>
>
2
2
2

(36)

113

It can readily be verified that the rational B´ezier curve
requires the most computational time while the Wang-Ball
curve requires the least. It should be noted that among
the algorithms presented, the Wang and our proposed algorithms have a linear computational complexity, O(n) while
the others have a quadratic computational complexity. This
interesting result leads to the development of a new algorithm for the rational B´ezier curve, based upon the relationships between the rational B´ezier and rational proposed
curves.
In the view of the efficient algorithm developed above
for our new rational curve, an efficient method for the evaluation of the rational B´ezier curve can be obtained using
the established relationships between the two models and
the algorithm in evaluation of the points on the presented
rational curves. This can be stated formally as in the following algorithm.
Algorithm 4: To compute a point on a rational B´ezier
curve,
Step 1: Convert a rational B´ezier curve into our new rational curve of the same degree using Proposition 6.

References

Step 2: Use Algorithm 2 for calculating the new rational
curve.

[1] P. de Casteljau. Outillages Methodes Calcul: Technical report. Citroen, Paris, 1959.

According to the results from previous work in [9, 5, 2,
3], the complexity analysis of the algorithms for computing a point on a rational B´ezier curve, a rational Said-Ball
curve, a rational DP curve, our rational curve and a rational
Wang-Ball are sorted in descending order in their computational complexity.

[2] N. Dejdumrong. Rational DP-Ball Curves. The
3rd International Conference on Computer Graphics,
Imaging and Visualization (CGIV’06), University of
Technology Sydney, Sydney, Australia:478–483, July
2006.

5 Discussions
1. It can be noticed that inversion of an (n+1)×(n+1)matrix is required in Step 1. Although this operation is time consuming (computational complexity
of O(n3 )), in practice, the conversion matrices from
the B´ezier form into our new basis form should be
calculated in advance. However, this conversion is
needed only once in drawing the curve where many
(about 50-100) points are calculated.

[3] N. Dejdumrong. Efficient Algorithms for Parametric
and Rational Wang-Ball Curves and Their Applications to B´ezier Curves. The 4th International Joint
Conference on Computer Science and Software Engineering (JCSSE2007), Khon Kaen University, Khon
Kaen, Thailand:66–70, May 2007.
[4] N. Dejdumrong.
A Shape Preserving Verification Technique for Parametric Curves.
The
4th International Conference on Computer Graphics, Imaging and Visualization (CGIV’07), King
Mongkut’s University of Technology Thonburi,
Bangkok, Thailand:163–168, August 2007.

2. The de Casteljau algorithm for computing a point on
a B´ezier curve of degree n has a time complexity
of O(n2 ). For the proposed algorithm (Algorithm
3), the computational complexity (in Step 2) is only
O(n). As such, this algorithm is much more efficient as compared to the de Casteljau algorithm but
less than Wang algorithm.

[5] N. Dejdumrong, H. N. Phien, H. L. Tien, and K. M.
Lay. Rational Wang-Ball Curves. International Journal of Mathematical Education in Science and Technology, 32(4):565–584, July 2001.

3. In the view of complexity of the de Castlejau algorithm, the rational B´ezier curve has a time complexity of O(n2 ) as for its non-rational case. Step 2 in
Algorithms 3 and 4 has a linear time complexity,
O(n). It is clear that Algorithms 3 and 4 are much
more efficient than the de Casteljau algorithm. As
for the cases of the non-rational B´ezier curves, both
algorithms become to be more efficient when n becomes large.

[6] J. Delgado and J. M. Pe˜na. A Shape Preserving
Representation with an Evaluation Algorithm of Linear Complexity. Computer Aided Geometric Design,
20(1):1–20, March 2003.
[7] G. Farin. Curves and Surfaces for Computer Aided
Geometric Design: A practical guide. Academic
Press, Morgan Kaufman Publishers, San Francisco,
5th edition, 2002.

6 Conclusions
In this work, a new basis for curve representation is
introduced with its two algorithms for rational and nonrational forms. Moreover, the relationships between rational (and non-rational) B´ezier and our rational (and nonrational) proposed curves are developed. Using these relationships, two algorithms for computing the points on the
rational (and non-rational) B´ezier curves are formally addressed. Two resulting algorithms are proved to be much
more efficient than the de Casteljau’s because they have
a linear computational complexity. As such they are recommended for use in plotting rational (and non-rational)
B´ezier curves.

[8] S. M. Hu, G. Z.Wang, and T. G. Jin. Properties of
Two Generalized Ball Curves. Computer Aided Design, 28(2):125–133, February 1996.
[9] H. N. Phien and N. Dejdumrong. Efficient Algorithms for B´ezier Curves. Computer Aided Geometric
Design, 17(3):247–250, March 2000.
[10] H. B. Said. Generalized Ball Curve and Its Recursive
Algorithm. ACM Transactions on Graphics, 8:360–
371, 1989.

Acknowledgment
[11] G. J. Wang. Ball Curve of High Degree and Its Geometric Properties. Appl. Math.: A Journal of Chinese
Universities, 2:126–140, 1987.

This work was supported by the laboratory of CAGD
and Animation (CADLAB), the department of computer
engineering, KMUTT.

114

