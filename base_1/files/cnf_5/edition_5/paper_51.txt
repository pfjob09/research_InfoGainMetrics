A shadow buffer technique for simulating snow-covered shapes
Kohe Tokoi
Wakayama University
{tokoi@sys.wakayama-u.ac.jp}
Abstract
Displaying a natural phenomenon is effective for
improving the reality of computer graphics. A display of
snow especially plays an important role in expressing a
sense of the season. However, since geometric modeling
of the various shapes of snow by hand is very
troublesome, it is desirable that snow coverage shapes
be automatically generated by simulation. This paper
proposes a high-speed modeling technique of snow
coverage. This technique takes account of the following
three conditions: “snowfall blocked by an object,”
“irregular motion of falling snow,” and “drifting snow.”
It applies the shadow buffer method to detect an object
which blocks snowfall, calculates the influence of
irregular motion of snow, and then determines the final
snow-covered shape by moving the snow to a stable
position.

1. Introduction
In recent years, the use of computer graphics in
movies or video games for natural phenomena, such as
fire, water, clouds, smoke, wind, and natural objects in a
field, is causing concern. Since in general these are
difficult to model realistically by hand, a they are often
reproduced by simulation. However, reproducing a
natural phenomenon precisely often needs much
calculation time and memory space. Accordingly,
various approximation and simplification techniques
have been used to reproduce them efficiently.
Among these, fire, wind, and snow suggest physical
feelings like heat and cold, and they play an important
role in a virtual space. Reproducing snow-covered
shapes is especially effective in expressing a sense of the
season. However, geometric modeling by hand of the
various shapes of snow in a landscape requires much
time and effort. Consequently, it is desirable that snowcovered shapes be automatically obtained by simulation.
There are many factors which determine a snowcovered shape: the irregular motion of falling snow,
existence of a covering object which obstructs snowfall,
wind direction, drifting snow, melting snow, avalanche,

compression of the snow, and viscous difference by
snow type.
However, it isn't suitable for interactive applications,
such as video games, to consider all these factors. Some
simplification or approximation is done by choosing
factors which are necessary to obtain the desired reality
of the snow covered shape.
There has been research on snow-covered landscape
simulation: research on generating the shape of melting
snow by heat propagation simulation[5], research on
deformation of a flexible object to model accumulated
snow shapes[3,8], research on the rendering method of
snow coverage using a metaball[7], and so on. There are
also such techniques as dropping a particle which
imitates a snowflake[6] and collision detection between
an object and a particle launched from another surface[2].
Although it is possible to apply a metaball's own
properties to reproduce crown snow, it has a gentlysloping shape[7] and it is difficult to reproduce a
complicated shape like a fallen snow lump or a cornice.
The technique that generates snow shape by dropping
particles which imitate snowflakes[6] needs a
considerable number of particles as well as memory
space and calculation time in order to raise rendering
quality. Fearing's method[2] has achieved very high
quality, but it has adopted a time-consuming technique
which detects an object which obstructs the falling snow
by launching many particles from another object surface.
In this paper, snow coverage is expressed using
three simple conditions: “presence of an object which
obstructs the falling snow,” “irregular motion of falling
snow,” and “drifting snow.”[4] This paper proposes a
fast modeling algorithm for snow-covered shapes using a
graphics hardware functions based on these conditions.
This algorithm employs a shadow mapping technique
using a Z-buffer in order to detect an obstructing object
and reflect the result of the irregular motion of the fallen
snow on the accumulated snow shape. Moreover,
movement of the snow after landing is represented by
moving the snow to a stable position according to the
rest angle.
By using these models, snow shapes which appear in
various scenes can be reproduced. This model is also
able to reproduce the shape of snow which blows into the
space under an object. On the other hand, this model

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

can't represent snow on a perpendicular object, crown
snow, a cornice, or a tree covered with snow. Each of
them lacks a support object, and the adhesive force of
snow must be taken into consideration to reproduce them.
We omit this force in this research.

covered shape. The final snow coverage shape is
generated by snowfall accumulation on this map.
In addition, although it is possible to group the
polygons automatically by applying some other types of
hidden surface elimination algorithm, it was done by
hand in this research.

2. Snow covered shape generation algorithm
The proposed technique calculates the distribution of
snowfall on the image which is generated by orthogonal
projection of the scene from directly above, and then
makes a snow-covered shape profile based on it. It is
possible for a complicated scene to generate a snowcovered shape profile easily, and to control the accuracy
with the resolution of the image. Moreover, this
technique does not need to take account the data
structure of the scene.
The following describes the concrete procedure. The
model scene is expressed by the polygons here.

2.1. Deciding possible snow coverage area
First, the proposed technique finds the area where
the snow can lie by gravity in order to generate snow
coverage on surfaces in the scene. This is called the
possible snow coverage area. Hidden surface elimination
processing using the Z-buffer algorithm finds this area.
Next, the polygons in the scene are grouped so that
they do not overlap when looking at the scene from
above. For example, although the polygons belong to
different objects, imagine they belong to the same group
B, in Figure 1 when they don't overlap when looking at
the scene from overhead.

2.2. Calculation of snow coverage probability
distributions
Snow, however, does not reach all the possible snow
coverage area calculated by the foregoing method,
although it falls evenly from the sky. The quantity of
snow which gets to the possible snow coverage area
varies due to the presence of an obstructing object,
fluctuation of an air current, etc. Consequently, the
probability that snow gets to the possible snow coverage
area is calculated as the probability distribution there.
This is called the snow coverage probability distribution.
2.2.1. Finding an obstructing object The
fundamental idea used for the calculation of snow
coverage probability distributions is shadow processing.
That is, the direction of the snowfall is treated as the
direction of incident light. Then, let the shadow area
decided by shadow processing be the area where snow
does not come because of obstruction by other objects
(Figure 3).
Blocking
object

Snowfall
direction

Shadow

Group A

Figure 3 Obstruction estimation by shadowing
Group B
Group C

Figure 1 Grouping of polygons

1 1 0 0 1 1 1

1 1 1 0 0 1 1

1 1 1 0 1 1 1

Composite

Snow
coverage

Group A

Group B

Object

Snow
coverage

Group C

Figure 2 possible snow-covered areas by group
When the hidden surface elimination processing
using the Z-buffer algorithm is complete, the orthogonal
projection image of each group is as follows (Figure 2).
In this way, the area which records a different value
from the initial Z-buffer content is the possible snow
coverage area for the group. The Z-buffer value is saved
as the snow amount map to use for the initial snow-

1

1 0.67 0 0.67 1
1
Probability of snow coverage

Figure 4 Arrangement of probability of snow
coverage
2.2.2. Consideration of irregular motion of falling
snow The motion of falling snow is not linear and
becomes irregular under the influence of air currents etc.
Consequently, snow may appear in the shadow area
decided by the foregoing process. In order to reproduce

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

this situation, multiple shadow areas using different
directions of snowfall are generated and then composited
(Figure 4).
Shifting due to snowfall direction is determined by
the two-dimensional distribution whose average value is
equal to the main snowfall direction. The result is gentlysloped snow coverage probability near the boundary of
the shadow of the object.

(a) Use the Z buffer algorithm with many snowfall directions

(Figure 5 (d)). The probable snow coverage distribution
for a possible snow coverage area is obtained in this way.

2.3. Snowfall processing
Based on this probable snow coverage distribution
(which is obtained by the above method), the amount of
fallen snow at each point on the possible snow coverage
area is determined.
When the snow coverage probability of a certain
point a is set as Pa and the amount of fallen snow at a
certain time t is set at M(t), the amount of snow at the
point Sa(T) where T is the elapsed time from the start
snowfall is calculated by the following formula:

S a T 

(b) The contents of each Z buffer
exposed
portion

exposed portion

exposed
portion

³

T

0

Pa M t dt

(1)

Based on this formula, the increment of the amount
of snow in a fixed time interval is accumulated on the
snow amount maps of all possible snow coverage areas.
In this case, since the height of the snow changes with
the snow accumulation, Pa also changes with time, but
here it is treated as constant.

2.4. Moving snow after its landing

(c) Compare possible snow coverage area and each Z buffer
Probable
snow coverage

Possible snow
coverage area of
Group B

By increasing of the amount of snow at each point
on the possible snow coverage area, the snow-covered
shape will become unnatural when the difference of the
amount of snow between a certain point and its
neighborhood exceeds a certain limit. In this case, the
amount of snow at the point and its neighborhood are
made smooth. In this research, this processing is
performed by moving the increased snow to a more
stable position using the technique of particle
deposition[1].

(d) Accumulate exposed portion of each snow coverage area

Figure 5 Calculation of the snow coverage
probability using the shadow map
2.2.3. Application of shadow mapping The
possible snow coverage area which is used as the basis of
snow coverage probability computation is not a plane,
and the obstructing object also has its own possible snow
coverage area. For this reason, the procedure of actually
computing snow coverage probability becomes more
complicated. The shadow mapping method is used for
this. This processing, performed in Figure 1, is illustrated
in Figure 5.
First, hidden surface elimination processing for the
whole scene for various snowfall directions is performed
(Figure 5 (a)), and the Z-buffer contents are obtained
(Figure 5 (b)).
Second, each snow amount map of the possible
snow coverage areas is adjusted for the point of view,
and the exposed portions are decided by comparison
between each snow amount map and Z-buffer. The case
where Group B of Figure 1 is compared with its Z-buffer
is shown in Figure 5 (c).
Finally, this processing is performed for multiple
snowfall directions, and the exposed portions are joined

2.4.1. Stabilizing In stabilizing, the snow is moved
to a more stable position by relating the amount of snow
at the target point and four points which adjoin it (Figure
6).

(a)

(b)

1/4
1/2

1/3

1/3

1/4

1/4

1/2

1/3

1/4

(c)

(d)

(e)

Figure 6 The method of moving snow after its
landing

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

The snow does not move if all slopes decided by the
amount of snow at a target point and the amount of snow
at each of the four adjoining points does not exceed the
rest angle (Figure 6 (a)).
If any of these slopes exceeds the rest angle, snow is
moved to the lowest point (Figure 6 (b)).
If two or more of these slopes exceed the rest angle,
the amount of fallen snow is equally distributed to these
points (Figure 6 (c) ~ (e)).
2.4.2. Fall processing of the landed snow When
the position where the snow drifted by stabilizing is
outside the possible snow coverage area, fall processing
of a lump of snow is performed (Figure 7).
This is the processing which moves snow from the
snow amount map of one area to another snow amount
map. The snow amount map of the highest possible snow
coverage area which is under the snow landing position
is chosen as the destination.
Top view of the snow amount map

Group A

3.1. Experimental equipment
The specifications of the computer used for this
experiment were as follows: INTEL Pentium III
800MHz CPU, 384MB main memory, nVIDIA
GeForce2 MX video controller, 32MB video memory
and used Microsoft Windows XP Home Edition. The
experimental software was developed using Microsoft
Visual C++ 6.0, OpenGL version 1.1, and GLUT version
3.7.

3.2. Real-time animation displays
The resulting generation of snow coverage in a
scene containing a table-like object is shown in Figure 8.
This animation included 646 frames between the upper
left frame and the lower right frame, and took 191.0
seconds (3.38 frames/second) with a display resolution
of 300 by 300 pixels. It also included two snow amount
maps with resolutions of 100 by 100 pixels, a rest angle
of 60 degrees, and fog effect. In this scene, the snowcovered shape was created on the table by stabilizing and
the snow coverage under the table was created by fall
processing of a lump of snow.

Group B
Group C

Snow fall position

Figure 7 Fall processing of the landed snow

2.5. Creation of snow coverage shape data
In this way, from all the snow amount maps, data of
the snow coverage shape is converted to polygons. The
picture of the snow-covered scene can be generated by
the rendering of the scene and these polygons together.

3. Experiments and evaluations
Implementing this technique generated some realtime animations that produced snowfall increases to the
scenes. Moreover, we also tested the ray casting based
method and compared it with this technique.

Figure 8 Snow coverage under an object
The proposed technique was used to render a scene
which composed of primitive objects included in the
OpenGL Utility Toolkit (GLUT). The result is shown in
Figure 9. In this case, since it was difficult to divide the
polygons which constitute one primitive object into
multiple groups, grouping of the polygons was
performed per primitive object. Therefore, since the
snow amount map is created per object, the snowcovered shape over the self-covered portion of the object
cannot be determined. As such, the snow-covered shape
was obtained except for the self-covered portion without
knowing the internal structure of the object. This
animation included 1318 frames between the upper left
frame and the lower right frame, and took 185.9 seconds
(7.09 frames/second) with a display resolution of 300 by
300 pixels. It also included five snow amount maps with
resolutions of 128 by 128 pixels, a rest angle is 45 degree,
with no falling snow display.
Figure 10 shows the result when the proposed
technique applied to a scene described by Data Exchange

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

Format (DXF). This scene included 12,646 triangles
excluding the snow coverage shape data. It was possible
to generate the snow coverage shape easily from such a
complicated scene by the proposed technique. This
animation included 96 frames between the upper left
frame and the lower right frame, and took 30.9 seconds
(3.11 frames/second) with a display resolution of 300 by
300 pixels. Two snow amount maps with resolutions of
200 by 200 pixels, rest angle of 45 degree, and fog effect
were also included.

compared with proposed technique for calculation time
using the same data.
The technique casts rays upward from vertexes in
the scene in order to find an object which interrupts the
snowfall. In that case, multiple rays are cast with jitter
from a vertex, and the snow coverage probability is
calculated at the vertex. However, comparison between
the two techniques is not equal, because ray casting
based method calculates snow coverage probability per
vertex and proposed technique calculates it for many
sample points on the object surface.

Figure 11 The case of using ray casting

Figure 9 Snow coverage on the GLUT primitives

Figure 12 The case of using proposed method

Figure 10 Snow covered scene using DXF
objects

3.3. Comparison with the conventional technique
Next, the technique of computing snow coverage
probability using the ray casting based method was

Scenes (a) and (b) of Figures 11 and 12 consist of
1600 triangles and 5114 triangles, respectively. Table 1
shows the calculation time of snow coverage probability
distribution using the proposed technique and ray casting
based method. The proposed technique can compute
snow coverage probability distributions at very high
speed compared with the ray casting based method.
In general, the calculation time is proportional to the
square of the number of polygons in the ray casting
method without any acceleration technique. The result of
Table 1 supports it.
On the other hand, by the proposed technique,
increase in calculation time in relation to increase in the
number of polygons in a scene is low. This is because the
time for data transmission from Z-buffer to CPU and the

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

processing time which composition of multiple Z-buffer
contents takes is great in comparison to the calculation
time for hidden surface elimination processing which
depends on the number of polygons. The hidden surface
elimination procedure is performed very fast with the Zbuffer hardware.

Moreover, the quality of the snow-covered shape can be
improved by increasing the number of projection planes
used for calculation of snow coverage probability.
Also, after stabilizing is carried out and the snowcovered shape is determined, the shape is controllable by
the rest angle and unnatural shapes are avoidable.

Table 1 Computation time of the snow coverage
probability

4.2. Features of the ray casting based technique

Ray
casting
based
method

Proposed
method

Scene

Fig. 10(a)
Fig. 10(b)
Scene
Fig. 11(a)
Fig. 11(b)

Number of
rays
3
5
10
5
Number of
projections
5
5

Processing
time (sec.)
4.917
7.841
15.062
158.347
Processing
time (sec.)
0.391
0.451

In addition, there is no relation between the number
of times of projection by the proposed technique, and the
number of rays of in the ray casting based method,
because the proposed technique composites Z-buffer
contents obtained by the projection of a scene in multiple
directions, but this ray casting sends rays in random
directions from every vertex. Moreover, in the picture
generated by the ray casting based method shown in
Figure 11, the boundary of snow coverage is fixed. This
is because only the polygons which face upward are
treated as the place for snow in the beginning of
processing.

(1) Calculation time is nearly proportional to the
number of rays.
(2) If the number of polygons increases, calculation
time increases greatly. This is because the
collision detection time takes the square of the
number of polygons.
(3) Since this technique determines the polygons
which will be covered by snow in the first stage of
processing, the outline of a snow-covered shape is
always fixed.
Although this technique can improve the quality of a
snow-covered shape by increasing the number of rays,
processing time increases proportional to the number of
rays. Moreover, although it is also possible to raise the
quality of the snow-covered shape by subdividing a
polygon, calculation time increases very much because
the number of collision detection processing increases
with a square of the number of polygons.
Although the amount of processing can be decreased
by optimal subdivision, the user who subdivides needs to
understand the algorithm and it is not easy work.
Moreover, this technique may generate unnatural
shapes when the amount of fallen snow becomes large,
since no there’s no stabilizing feature.

4. Discussion
This section evaluates the two techniques based on
the results shown in the previous section.

5. Future work
This section discusses other subjects related to highspeed modeling of snow-covered shapes.

4.1. Features of the proposed technique
(1) The process of determining snow coverage area
and snow coverage probability increases with the
number of target object groups.
(2) Processing time is not dependent on the number of
polygons of the target object.
(3) Since snow coverage probability determines
whether the amount of fallen snow increases or
not, change of the snow-covered shape with time
can be reproduced.
(4) Fine objects, such as leaves, are too small for the
resolution of the snow amount maps, and difficult
to depict.
In the above case, with objects such as trees, it is
better to use one snow amount map for the whole tree,
rather than use independent snow amount maps for every
leaf. However, such grouping of polygons is not
automated yet.
The quality or the accuracy of the snow-covered
shape is controllable by the resolution of the projection
plane at the time of deciding the snow coverage area.

5.1. Improvement of the speed of finding a
movement place of the snow in a fall processing
of a lump of snow
The present technique searches for the object at the
fall point of a lump of snow among all objects in the
scene when the lump of snow moves out of the possible
snow coverage area by the stabilization processing
(Figure 7). For this reason, the time which this search
takes cannot be disregarded when the complexity of the
scene increases. This can be accelerated with the
technique described below.
In order to accelerate deciding the place to which the
snow can move, a picture with hidden surface
elimination which looks at the whole scene from above is
first generated by an orthogonal projection.
The identifier of the snow amount map of the group
to which the polygon belongs is stored in the value of
each pixel of this picture.
If the snow movement place is not in a possible
snow coverage area, the place where the lump of snow

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

will be dropped is decided by reference to this picture.
And if the height of the place is higher than the original
snow position, another possible snow coverage area
where a lump of snow can be dropped is searched among
other groups.

5.2. Application of the functions of graphics
hardware
The proposed technique determines a snow-covered
shape by snow coverage probability distributions and
snow amount maps.
Although the accumulation buffer is used to
calculate snow coverage probability distributions in the
present case, operation and dynamic processing of a
texture can be done using the function of the latest
graphics hardware. For example, it is considered that the
stabilizing can be implemented using a fragment shader.
Also, displacement mapping or the function of a vertex
shader can be used for the generation of a snow-covered
shape.

Conclusions

References
[1]
[2]

[3]

[4]

[5]
[6]

[7]

[8]

Mark DeLoura, editor. GAME PROGRAMMING GEMS.
Charles River Media, 2000.
Paul Fearing. Computer modeling of fallen snow. In
SIGGRAPH 2000 Conference Proceedings, pages 37-46.
ACM, 2000.
M. Matsumiya, H. Takemura, and N. Yokoya. A virtual
clay modeling system for 3d free-form design using
implicit surfaces. IPSJ Journal, 42(5):1151-1160, 2001.
H. Moriki and K. Tokoi. Real - time simulation of the
fallen snow with consideration to the irregular motion of
the snow. IPSJ Transaction on Graphics and CAD,
2002(77):109-114, 2002.
K. Muraoka and N. Chiba. A visual simulation of
melting snow. IIEEJ Journal, 27(4):327-338, 1998.
K. Muraoka, N. Chiba, and I Ohtahara. Snowfall model
for simulating close view of snowy landscape. The
Journal of ITEJ, 49(10):1252-258, 1995.
T. Nisita, H. Iwasaki, Y. Dobasi, and E.Nakamae. A
modelling and rendering method for snow by using
metaballs. EUROGRAPHICS, 16(3):357-64, 1997.
Y. Oda, K. Muraoka, and N. Chiba. Particle-based visual
simulation of virtual clay. IPSJ Journal, 42(5):1142-150,
2001.

In this paper, a high-speed modeling for snowcovered shapes which can be applied to arbitrary scenes
was proposed. It reduces the snow coverage phenomenon
to three simple conditions: 1) presence of an object
which obstructs the falling snow, 2) irregular motion of
falling snow, and 3) drifting snow, in order to generate a
snow-covered shape simply and rapidly. This technique
applies the Z-buffer algorithm to decide the snowcovered shape from these models. It accelerates decided
the possible snow coverage area in a scene and decisions
about the object which obstructs the falling snow using
the function of graphics hardware. In addition, the
shadow map method is applied to finding obstructing
objects.
Moreover, we have tested the ray casting based
method and compared our technique with it. We have
verified the usefulness of our technique by this. We have
also shown that the quality of the picture generated is
controllable by the resolution of a projection plane,
without modifying the original scene.
Thus, the proposed technique has achieved high
processing speed, when compared with the ray casting
based method, because its processing seldom depends on
the number of polygons. Therefore, it can be applied to
applications like virtual reality and video games which
need high-speed processing.

Acknowledgements
This research was done with the cooperation of Mr.
Hironori Moriki. Thank you to the Dr. Tadahiro
Kitahashi for his many suggestions and comments.
Special thanks to Prof. Leonard Lundmark for his
suggestions and comments on how to make this paper
better.

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

