Implicit Blends with an Individual Blending Range Control on Every
Primitive’s Subsequent Blend
Pi-Chung Hsu
Department of Information Management,
Fortune Institute of Technology, Kaohsiung County, Taiwan.
{pcsh@center.fotech.edu.tw}
Abstract
In implicit surfaces, implicit blends are important
because they can be used to construct a complex
surface from primitive surfaces. Among existing blends,
blends with a blending range control are applied very
wide because they can deform blended primitives
locally after blending. However, this kind of blends
usually behaves like a pure union blend Min(f1,...,fk) on
non-blending regions. Hence, when they are used as a
new primitive in other blends, their primitives always
have similar subsequent blending surfaces with the
primitives in their subsequent blends. To solve this
problem, this paper proposes new implicit blends that
can provide parameters to individually adjust their
primitives’ subsequent blending surfaces, without
deforming the original blending surfaces. The
proposed blends can provide parameters m1,…,mk, to
enable their primitives f1,…,fk, to behave like Min
(f1/m1,…,fk/mk) on non-blending regions and its
original blending surface does not change whatever
positive values m1,…,mk, are set. As a result, in
sequential blends, the subsequent blending surfaces of
f1,…,fk, can be adjusted respectively by varying
parameters m1,…,mk. Furthermore, this paper also
proposes a generalized method that can transform
some of existing blends into a new blend with the
ability stated above.
Keywords-- Implicit surfaces, Blends.

1. Introduction
In implicit surface modeling, a surface is defined as
a level surface of a three dimensional function, called a
defining function. Implicit surfaces are attracting
attention because a complex surface can be constructed
freely from simple primitives, such as planes,
sphere,…, etc., by successive compositions of blending

operations, such as Boolean set operations. In the
modeling process, blending operations, also called
blends, play a very important role because they can be
applied to connect intersecting objects with
automatically generated transitions to smooth out the
unwanted sharp edges, kinks, and creases. In the
previous literature, blending operations with high order
continuity were defined by R-functions [17] and unit
step functions [19]. In addition, blends that can provide
blending range parameters to adjust the size of the
transition of the resulting blending surface and to limit
the transition in specific regions without deforming the
overall shapes of blended primitives can be found in [3,
4, 8, 9, 10, 11, 12, 13, 16, 18, 19, 21, 22, 23, 24]. For
low-degree computing complexity, soft object
modeling was proposed. In soft object modeling,
primitives are called soft objects and defined using
field functions, which can be found in [1, 2, 6, 7, 12,
14, 15, 25, 26]. Due to the use of field functions, soft
objects can be blended easily by performing addition
operations only. In addition, some other blending
operators that can offer blending range parameters for
blending soft objects were also proposed in [5, 11].
In fact, to have better shape control on sequential
blends, i.e. successive compositions of blends, existing
blending operations are usually required to possess the
following abilities:
(1). Can provide blending range parameters to
adjust the size of the transition of the resulting
blending surface without deforming the overall shapes
of the blended primitives;
(2). Can be differentiable everywhere to create
smooth sequential blending surfaces;
(3). Can behave like a pure union operation Min
(f1,…,fk) after blending on non-blending regions.
In order to develop a blend that can have the above
abilities, the displacement method in [22] and the scale
method in [11] were proposed. However, because the
blend, denoted as BDk(f1,…,fk), developed from the

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

displacement and the scale methods always behaves
like Min(f1,…,fk) after blending on non-blending
regions, this leads to the following problem:
When BDk(f1,…,fk) is used as a new primitive in
sequential blends such as BD2(BDk(f1,…,fk),fk+1),
primitives f1,…,fk, always have similar subsequent
blending surfaces with fk+1 because they always have
the same blending range to blend with fk+1. That is,
BDk(f1,…,fk) lacks individual blending range controls on
their primitives’ subsequent blends.
Therefore, to solve the above problem, this paper
proposes new blends that can have an individual
blending range control on every primitive’s subsequent
blending surface, without deforming the original
blending surface. Precisely, the proposed blends,
denoted as BTk(f1,…,fk), provide parameters mi, i= 1,...,k.
Adjusting mi, i=1,...,k, enables that:
(1). BTk(f1,…,fk) can behave like Min(f1/m1,...,fk/mk)
on non-blending regions after blending.
(2). The blending surface BTk(f1,...,fk)=0 can remain
unchanged whatever values mi, i=1,...,k, are set.
As a result, when BTk(f1,…,fk) is used as a new
primitive in sequential blends such as BT2(BTk(f1,…,fk),
fk+1) with a blending range r for BTk in BT2, varying mi,
i=1,...,k, can enable primitives f1,…,fk, to have blending
ranges r*m1,…, r*mk, respectively, to blend with fk+1 in
the blend BT2, and the shape of the blending surface
BTk(f1,…,fk)=0 keeps unchanged.
Furthermore, this paper also proposes a generalized
method to develop the proposed blend stated above.
Based on the generalized method, conic and even highdimensional super-ellipsoidal blends are developed.
The remainder of this paper is organized as follows.
Section 2 presents related works and then describes
their problems. Section 3 presents the generalized
method. Section 4 describes applications. Section 5
presents the bulge elimination by the proposed blends.
Conclusions are given in Section 6.

Furthermore, a complex object can be given by a
multiple blend on primitives S(fi, 0), i=1,…,k, and
defined using a blending operator Bk(x1,…,xk) by

2. Related works

Figure 1. The shape of B2(x1,x2)=0 with blending
range parameters r1 and r2.

In this section, definitions are given first. Then, the
displacement method in [22] and its problem are
described.

2.1. Definition of implicit surfaces
An implicitly defined object can be defined using
primitive defining functions fi(X):R3oR, i= 1,...,k, by
S(fi, 0) {{XR3|fi(X)d0},
whose shape can be given by the set {XR3| fi(X)=0},
also denoted as fi(X)=0 for short in this paper.

S(Bk(f1,…,fk), 0),
where the shape Bk(f1,…,fk)=0 is called the blending
surface and Bk(f1,…,fk):R3oR is called a blending
operation or a blend. In this paper, the operator Bk:
RkoR is also denoted as B*k(x1,…,xk), where the
symbol * stands for the name of the operator.
In fact, the operator Bk is aimed to smoothly connect
blended primitives S(fi, 0), i=1,…, k. The shape of
B2(x1,x2)=0 is usually required to be like that shown in
Figure 1, where the arc-shaped part is called the
blending region. The shape of the arc is controlled by
blending range parameters r1 and r2 and a curvature
parameter p, which can be used to adjust the size and
the shape of the automatically generated transition of
the resulting blending surface B2(f1,f2)=0, as shown in
Figure 2. In addition, in B2(f1,f2)=0, due to the blending
range control by r1 and r2, the shapes of primitives f1
and f2 can be deformed locally only in the blending
region, as shown from the shapes inside the boxes in
Figure 2(b).

x2

Blending region:
The arc-shaped part.
Non-blendingregion:
Min(x 1,x 2)=0,

r2

r1

(0,0)

x1

2.2. The displacement method
In the displacement method [22], given an existing
union blending operator HTk(x1,…,xk)=0 on S(fi, 0),
i=1,...,k, with blending range parameters ri, i=1,...,k,
then a blending operation, denoted as BDk(f1,…,fk):R3
oR, for sequential union blends can be given by
BDk(f1,…,fk)=hp
where hp is the root h of the equation

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

(1)

(a)

(a)
f2

f2
f1

f1

(b)

Figure 2. (a). Intersection blends on six planes,
with different shapes of edges by setting different
curvatures to the blending operators. (b). Union
blends on two cylinders, with different sizes of
blending regions, inside the box, and nonblending regions, outside the box, by setting
different blending ranges to the blending
operators.

(b)
(c)
Figure 3. (a). Left: an intersection S(-BD3(-f1,-f2, f3), 0) on 3 pairs of parallel planes; Right: a
super-ellipsoid. (b). The union of the two objects
in Figure 3(a), where f1 and f2 always have similar
subsequent blending surfaces with the superellipsoid. (c). The union of the two objects in
Figure 3(a), where f1 and f2 can have different
subsequent blending surfaces

T(h)=HTk(f1-h,…,fk-h)=0.
Because every level blending surface BDk(f1,…,fk)=h,
hR, can be viewed as the union blending surface of
S(fi-h,0), i=1,…,k, via the blending function HTk(x1,…,
xk), then BDk(f1,…, fk) can be used as a new primitive in
sequential blends.
Because the shape HTk(x1,…,xk)=0 is the same as the
shape Min(x1,…,xk)=0 in non-blending regions, BDk
(f1,…,fk) can always behave like Min(f1,…,fk) after
blending on non-blending regions. This property can
be obtained by solving the root h of the equation
Min(f1-h,…,fk-h)=0. Unfortunately, this property also
makes BDk(f1,…,fk) lead to the problem that
In sequential blends of BDk, BDk(f1,…,fk) can not
individually adjust its primitives’ subsequent blending
surfaces without deforming the original shape
BDk(f1,…,fk)=0. That is, BDk(f1,…,fk) cannot have an
individual blending range control on every primitive’s
subsequent blend.
For example, as shown in Figure 3(b), primitives f1
and f2 of S(-BD3(-f1,-f2,-f3), 0), the left object of Figure
3(a), always have similar subsequent union blending
surfaces with the super-ellipsoid. S(-BD3(-f1,-f2,-f3), 0)
cannot be used to create an object similar to that in
Figure 3(c).
Similarly, the blends from the scale method in [11]
have the same problem, too.

3. The generalized method

Section 3.1 presents the generalized method to
develop new blending operators that can solve the
problem in Section 2.2. Based on the method above,
two differentiable blending operators are developed in
Section 3.2. Section 3.3 derives two new families of
Boolean set operators from the operators in Section 3.2.
Section 3.4 shows how to calculate the gradient of the
proposed operators.

3.1. Basic steps of the generalized method
To solve the problem of the displacement and the
scale methods in Subsection 2.2, a union blending
operator, denoted as BTk(x1,…,xk), is proposed and
required to satisfy the following requirements:
(1). BTk(x1,…,xk) should offer parameters mi, i=1,...,k,
to behave like Min(x1/m1,…,xk/mk) everywhere on nonblending regions after blending. Since fi becomes fi/mi
on non-blending regions after the blend BTk(f1,…,fk)=0,
then varying mi, i=1,...,k, can individually adjust the
sizes of the blending surfaces of fi, i=1,..,k, with the
primitives in BTk(f1,…,fk)’s subsequent blends. For
example, in sequential blends BT2(BTk(f1,…,fk), fk+1)
with a blending range r for BTk in BT2, varying mi,
i=1,...,k, can make primitives f1,…,fk, have different
blending ranges r*m1,…,r*mk, to blend with fk+1,
respectively, in the blend BT2 .
(2). The shape BTk(x1,…,xk)=0 should always keep
unchanged whatever positive values mi, i=1,...,k, are set.
Thus, the shape BTk(f1,…,fk)=0 can remain unchanged

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

as mi, i=1,...,k, are varied to adjust the subsequent
blending surfaces of primitives fi, i=1,..,k, in BTk’s
subsequent blends.
To develop a union blending operator BTk(x1,…,xk)
that can fulfill the above requirements, a generalized
method is proposed and it includes the following two
steps:
Step (1): Choose an existing k-dimensional union
blending operator HTk(x1,…,xk)=0 with blending range
parameters ri, i=1,...,k, as the base surface. Precisely,
the base surface must be like the shape Min(x1,…,xk)=0
on non-blending regions. For example, the shape of
HT2(x1,x2)=0 must be like the arc-shaped curve in
Figure 4.

x2

r2

x2

Min (x1/m1,x2/m2)=h
BT2 =h, h>0
hm2
r2
BT2 =0

f1

hm1 r1

x1

BT2 =h, h<0

Figure 5. Level curves BT2(x1, x2)=h, hR, where
the curve in Figure 4 is used as the base curve
HT2(x1, x2)=0.

HT2 (x1, x2)=0
r1

M

f2

f2

f2

f2

x1

Figure 4. The shape of a base curve HT2(x1,x2)=0.
Step (2): Define a k-dimensional blending operator
BTk(x1,…,xk) using the base surface HTk(x1,…,xk)=0 by
BTk(x1,…,xk)=hp

(2)

where hp is the root h of the equation
T(h)=HTk(x1-m1h,…,xk-mkh)=0.

(3)

In fact, every level surface BTk(x1,…,xk)=h, hR, is
similar to the surface HTk(x1,…,xk)=0 translated by
m1h,…,mkh, along the vector [m1,…,mk]. For example,
using the curve in Figure 4 as HT2(x1, x2)=0, level
curves BT2(x1,x2)=h, hR, from Eq. (3) are shown as
the dotted curves in Figure 5. The shape and the
translation of level curves BT2(x1,x2)=h, hR, imply
that depending on m1 and m2, primitives f1 and f2 of
level blending surfaces BT2(f1,f2)=h, hR, may dilate
differently, as shown in Figure 6. Hence, primitives f1
and f2 of BT2(f1,f2) can have different subsequent blends
when BT2(f1,f2) is used as a new primitive in sequential
blends.
Some important properties of BTk(x1,…,xk) in Eq. (2)
are described as follows:
(1). On non-blending regions, BTk(x1,…,xk) behaves
like Min(x1/m1,…,xk/mk), and hence a primitive fi can
become fi/mi after the blend BTk(f1,…,fk)=0. The former
result is explained as follows. Since HTk(x1,…,xk)=0 is

Figure 6. The union of two cylinders by BT2(f1,f2),
where due to m1=1 and m2=2, f2 dilates more
quickly than f1 as the level surface BT2(f1,f2)=h is
set h=0, 0.25, 0.5, and 0.75.
Min(x1,…, xk)=0 on non-blending regions, then solving
the root h of the equation T(h)=Min(x1-m1h,…,xkmkh)=0 yields the function Min(x1/m1,…,xk/mk). This
explains the reason why.
(2). Setting zero to h of the equation T(h)=HTk(x1m1h,…,xk-mkh)=0 in Eq. (3) yields that the shape
BTk(x1,…,xk)=0 is always the same as HTk(x1,…,xk)=0,
whatever [m1,…,mk] is set.
(3). On blending regions, all surfaces BTk(x1,…,xk)
=h, hR, always have the same arc-shaped surface
with blending ranges r1,…, and rk, the same as those of
HTk(x1,…,xk)=0. The reason is because the shape

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

BTk(x1,…,xk)=h is similar to HTk(x1,…,xk)=0 translated
by [m1*h,…,mk*h].
All these above indicate that BTk(x1,…,xk) from Eq.
(2) can solve the problem of the displacement and the
scale methods stated in Subsection 2.2.

and mi>0 for i=1,…,k.
To solve the root hp of the equation T(h)=0 in Eq.
(5), one can apply the Regula Falsi method. And one
can use the value of the interval h( Min ik 1 ((xi-ri)/mi),

3.2. Differentiable blending operators

(*i) means Min(*1,…,*k). Thus, the root h can be
unique, and hence BTk in Eq. (5) can be differentiable.

Since Section 3.1 only gives a generalized method
to generate blending operators with blending range
controls on their primitives’ subsequent blends, this
section presents some base surfaces to derive
differentiable blending operators.
3.2.1. Two-dimensional operators. When the base
surface HT2(x1, x2)=0 in Step (1) is given by
­H ( x , x ) 0
HT2= ® 2 1 2
¯ Min ( x1 , x 2 ) 0

region II
otherwise

where H2(x1,x2)=r22x12+r12x22+r22r12-2r22r1x1-2r12r2 x2+
2px1 x2, -f<p<r2r1, and region II is {(x1, x2)R2| m2x1m1(x2-r2)>0 and m2(x1-r1)-m1x2<0}, then a binary BT2(x1,
x2) with blending range parameters r1 and r2 and a
curvature parameter p can be derived by solving the
quadratic formula of the equation H2(x1-m1h,x2-m2h)=0
and written as
­(b r (b 2  4ac) 0.5 ) /(2a) if a z 0 and regionII
°
BT2= ®
c / b
if a 0 and regionII (4)
° Min( x / m , x / m )
otherwise
1
1
2
2
¯

Min ik 1 (xi/mi)] as the initial guesses. The symbol Min ik 1

3.3. Boolean set operations
Although Eqs. (4) and (5) in Section 3.2 offer union
blending operators only, a full family of Boolean set
operations can be derived from the dual forms of Eqs.
(4) and (5) and written by:
(a). Union of S(f1,0),…, and S(fk,0): BTk(f1,…, fk),
(b). Intersection of S(f1, 0),…, and S(fk, 0): -BTk(f1, …, -fk), and
(c). Difference of S(f1, 0) from S(f2, , 0),…, and S(fk,
0): -BTk(-f1, f2,…, fk).

3.4. Gradient of BTk
Calculating the gradient of BTk is usually needed in
shading or other processes. To calculate the gradient,
the equation T(h)=0 in Eq. (3) is viewed as an equation
of variables h, x1,..., xk, and written by W(h, x1,..., xk)=0.
Then, from the implicit theorem of multivariable
calculus, the gradient of BTk can be calculated using the
value hp of the root h and the values of x1,..., and xk.
Precisely, the gradient can be written by
BTk( x )
i

where a=r12m12+r22m22+2pm1m2; b=2((r2-x2)r12m2+ (r1x1)r22m1-(x1m2+x2m1)p); c=(r1x2+r2x1-r1r2)2+2(p-r1r2)x1
x2. And the value of BT2 on region II has to lie in the
interval (h2, h1) where h1=Min(x1/m1, x2/m2) and h2=
(r1x2 +r2x1-r1r2)/(r1m2+r2m1). Thus, the root h can be
unique so that BT2 is differentiable.
3.2.3. High-dimensional operators. When the base
surface HTk(x1,…,xk)=0 in Step (1) is given by
HTk(x1,…,xk)= ¦ik 1[(ri  xi ) / r i ] p  1 0 ,
i

where [*]+ { Max(0,*) and both ri>0 and pi>1 hold for
i=1,…,k, then in Eq. (2), a hyper-ellipsoidal union
operator BTk with blending range parameters r1,…,rk,
and curvature parameters p1,…,pk, for simultaneous
multiple blends can be given by
BTk(x1, …, xk)= hp,

(5)

where hp is the root h of the equation T(h)=0 and
T(h)=HTk(x1-m1h,…,xk-mkh)= ¦ik 1[(ri  xi  mi h) /r i ]pi 1,

 W ( x ) (h p , x1 ,..., x k ) / W ( h ) (h p , x1 ,..., x k ) ,
i

where i=1,...,k.

4. Applications
Some applications of Eqs. (4) and (5) are described
in this section.
Application 1: When BTk(f1,...,fk) is used as a new
primitive in sequential blends, varying parameters
m1,...,mk, can individually adjust the blending ranges of
the subsequent blends of primitives f1,...,fk, without
deforming the blending surface BTk(f1,...,fk)=0. This can
be seen in Figure 7, where the value of parameter m2
for f2 of the intersection blend S(-BT3(-f1,-f2,-f3), 0) is
decreased from 1.2, 0.9, 0.6, to 0.3 to shrink the
subsequent union blending surface of S(f2 , 0) with the
super-ellipsoid for the objects from top left to bottom
right.
Application 2: When BTk(f1,...,fk) is used as a new
primitive in sequential blends such as BT2(BTk(f1,...,fk),
BTk(fk+1,...,f2k)), lowering m1,...,mk, can prevent fi,

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

(a)
S(b1 ,0)

f2

f2

S(b2, 0)
(a)

f2

S(-BT2(-b2, b1), 0)

f2
(b)

(b)
Figure 7. (a). Left: An intersection S(-BT3(-f1,-f2,f3), 0) on 3 pairs of parallel planes; Right: A
super-ellipsoid. (b). The shape changes of the
union of the two objects in Figure 7(a), where
only the subsequent blending surface of f2 with
the super-ellipsoid, in the marked regions, are
shrunk gradually, but the shape of S(-BT3(-f1,-f2,f3), 0) remains unchanged as m2 for f2 is decreased
from 1.2, 0.9, 0.6, to 0.3 for the objects from top
left to bottom right.
i=1,...,k, from generating unwanted subsequent blends
with fj, j=k+1,...,2k, in BTk(fk+1,..., f2k), without changing
the blending surface BTk(f1,...,fk)=0.
This is because lowering mi of BTk(f1,...,fk) and mj of
BTk (fk+1,...,f2k) can respectively raise the norms of fi and
fj to be ||(fi/mi)|| and ||(fj/mj)|| in BT2. As a result, the
distance that fi=0 and fj=0 can reach is reduced, so the
unwanted blend of fi and fj can be avoided.
This application is useful for the case that the
blending ranges r1 and r2 for BTk(f1,...,fk) and BTk
(fk+1,...,f2k) in BT2 are larger than the distance from fi=0
to fj=0 but the blend of fi and fj is unwanted. In such a
case, existing blending operators always generate an
unwanted blend between fi and fj, as illustrated in the
marking region of Figure 8(b). However, this can be
avoided via BTk as shown in Figure 8(c).

5. Bulge elimination

(c)

Figure 8. (a). A difference S(-BT2(-b2, b1), 0) of the
intersection, b2=-BT6(-f7,...,-f12)=0, from the
intersection, b1=-BT6(-f1,...,-f6)=0, where f1=0,...,f12
=0, are planes. (b). The side and the back views of
S(-BT2(-b2, b1), 0) where an unwanted blend is
generated in the marked regions because the
blending ranges for b1 and b2 in BT2 are larger
than the distance from f6=0 to f12=0. (c). The side
and the back views of S(-BT2(-b2, b1), 0) after
lowering the values of m6 for f6 in b1 and m12 for f12
in b2 in order to avoid the unwanted blend.
Meanwhile, the shapes b1=0 and b2=0 remain
unchanged.
by replacing blending ranges r1 and r2 with positive
position functions Pi(X):R3o(0, f), i=1, 2:
Pi(X)=ri(1-cosT+Z),
where T is the angle between the gradients of f1 and f2
at the point X and Z # 0. However, in the bulge
elimination, BT2(f1,f2) is almost similar to a pure union
operation Min(f1/m1,f2/m2) around the region cosT #1 as
shown in the circle on the crossing cylinders in Figure
9(a), where the values of Pi are almost zero. To enable
the differentiability of Min(f1/m1,f2/m2) around the
region cosT #1, the gradient (f1)/m1 needs to be equal
to (f2)/m2, that is, m1=m2||(f1)||/||(f2)|| must hold.
This equality can be fulfilled by replacing parameters
mi, i=1 and 2, with positive position functions Mi:
R3o(0, f), i=1 and 2, written by:
M1 ( X )

m1
­
®
¯m1  (m2 G  m1 )[cosș]

Similar to that in [11, 21], a union blend S(BT2(f1, f2),
0) from Eqs. (4) and (5) can perform bulge elimination

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

m1 ! (m2 G)
and
otherwise

M 2 (X )

­m2  (m1 / G  m2 )[cosș] 
®
m2
¯

m1 ! (m2 G )
otherwise

where G is G(X)=||(f1)||/||(f2)|| and [cosT]+ is
Max(cosT, 0).
Figure 9 demonstrates bulge elimination of a wheel,
S(BT2(BT2(f1, f2), f3), 0). Because m1 for f1 in BT2(f1, f2) is
set to be 0.3 and 1, the wheels can have different
corners on the region pointed by an arrow, and the
joint of the crossing cylinders always remains
unchanged. On the contrary, other existing blending
operators can not do this.

f2
f3

f1

(a)

f1

f1

(b)
Figure 9. (a). Left: A union S(BT2(f1, f2), 0) of
crossing cylinders; Right: A toroid S(f3, 0). (b).
Bulge elimination on the union S(BT2(BT2(f1,f2),
f3),0), where only the subsequent blend of f1 with
f3, pointed by an arrow, has different corners, but
the joint of the crossing cylinders, pointed by a
dotted arrow, remains unchanged, when m1 for f1
in BT2 is set to 1 and 0.3 for the objects from left to
right.

6. Conclusions
To have better shape control on sequential blends,
most of the existing implicit blends behave like
Min(f1,…, fk) on non-blending regions after blending.
This causes that when these blends are used as a new
primitive in other blends, the shape control on their
primitives’ subsequent blending surfaces rely solely on
the subsequent blending operators, and hence some
difficulties in the individual blending range control on
every primitive’s sequential blends develop, as stated

in Subsection 2.2. To solve this problem, this paper has
proposed some new blends that can provide parameters
to adjust their primitives’ subsequent blending surfaces,
respectively, without deforming the original blending
surface, when reused as a new primitive in other blends.
On the contrary, other existing blends do not have this
kind of ability.
Furthermore, to develop the blend stated above, a
generalized method has been proposed in this paper.
The proposed method can transform some existing
union blending operators into a new blending operator
that has the following abilities:
(1). Can provide blending range parameters to
adjust the size of the resulting blending surface,
without deforming the overall shapes of blended
primitives;
(2). Can be differentiable over the entire domain to
generate smooth sequential blending surfaces with
overlapping blending regions;
(3). Can provide parameters m1,...,mk, to behave like
a pure union Min(f1/m1,...,fk/mk) on non-blending
regions after blending without deforming the original
blending surface. As a result, the proposed blends can:
z Individually adjust their primitives’ subsequent
blending surfaces, without deforming the
original blending surface.
z Avoid unwanted primitive’s subsequent blends.
Based on the generalized method, two-dimensional
operators (conics) and high-dimensional blending
operators (super-ellipsoids) have been developed in
this paper. These two kinds of operators give more
parameters to adjust the resulting blending surface than
other existing operators do. Especially, the newly
developed operators also give every primitive an
individual curvature parameter to adjust the shape of
the transition of the resulting blending surface.

Acknowledgements
This research was supported by National Science
Council of Taiwan, under contracts NSC 94-2213-E268 -004.

References
[1] J. F. Blinn, “A generalization of algebraic surface
drawing”, ACM Trans. Graphics, vol. 1, no. 3, pp. 235-256,
1982.
[2] C. Blanc and C. Schlick, “Extended field functions for
soft objects”, In Proc. Implicit Surfaces 5, pp. 21-32, 1995.
[3] L. Barthe, V. Gaildrat, and R, Caubet, “Implicit extrusion
fields: general concepts and some simple applications”, In
Proc. Shape Modeling International 2001, pp. 114-123, 2001.

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

[4] L. Barthe, N.A. Dodgson, M.A. Sabin, B. Wyvill, and V.
Gaildrat, “Two-dimensional potential fields for advanced
implicit modeling operators”, Computer Graphics Forum,
vol. 22, no. 1, pp. 23-33, 2003.
[5] L. Barthe, B. Wyvill and E. de Broot, “Controllable
Binary CSG Operators for Soft Objects”, International
Journal of Shape Modeling, vol. 10, no. 2, pp. 135-154, 2004.
[6] B. Crespin, C. Blanc, and C. Schlick, “Implicit sweep
objects”, Computer Graphics Forum, vol. 15, no. 3, pp. 165175, 1996.
[7] A. Hanson, “Hyperquadrics: smoothly deformable shapes
with convex polyhedral bounds”, Computer Vision, Graphics
and Images Processing, vol. 44, no. 1, 191-210, 1988.
[8] C. Hoffmann, and J. Hopcroft, “Automatic surface
generation in computer-aided design”, The Visual Computer,
vol. 1, pp. 95-100, 1985.

[15] K. Perlin, “Hypertexture”, SIGGRAPH Computer
Graphics, vol. 23, no. 3, pp. 253-262, 1989.
[16] A. Pasko and V. Savchenko, “Blending operations for
the functionally based constructive geometry”, In Set
Theoretic Solid Modeling: Techniques And Applications,
CSG 94 Proceedings, Information Geometers, Winchester,
UK, pp. 151-161, 1994.
[17] A. Pasko, V. Adzhiev, A. Sourin, and V. Savchenko,
“Function representation in geometrical modeling: concepts,
implementation and applications”, The Visual Computer, vol.
11, no. 8, pp. 429-446, 1996.
[18] G. Pasko, A. Pasko, M. Ikeda, and T. Kunii, “Bounded
blending operations”, In Proc. Shape Modeling International
2002, pp. 95-103, 2002.
[19] Q. Li, “Blending implicit shapes using smooth unit step
functions”, In Proc.WSCG'2004, pp. 297-304, 2004.

[9] C. Hoffmann, and J. Hopcroft, “The potential method for
blending surfaces and corners”, In Geometric Modeling, G.
Farin, Ed., SIAM, Philadelphia, Pa., pp. 347-365, 1987.

[20] A. Ricci, “A constructive geometry for computer
graphics”, The Computer Journal, vol. 16, no. 2, pp. 157-160,
1973.

[10] L. Holmstrom, “Piecewise quadric blending of implicitly
defined surfaces”, Computer Aided Design, vol. 4, pp. 179189, 1987.

[21] A.P. Rockwood, and J.C. Owen, “Blending surfaces in
solid modeling”, In Geometric Modeling, G. Farin, Ed.,
SIAM, Philadelphia, Pa., pp. 367-383, 1987.

[11] P.-C. Hsu, and C. Lee, “The scale method for blending
operations in functionally based constructive geometry”,
Computer Graphics Forum, vol. 22, no. 2, pp. 143-158, June
2003.

[22] A.P. Rockwood, “The displacement method for implicit
blending surfaces in solid models”, ACM Trans. Graphics,
vol. 8, no. 4, pp. 279-297, 1989.

[12] P.-C. Hsu, and C. Lee, “Field functions for blending
range controls on soft objects”, Computer Graphics Forum,
vol. 22, no. 3, pp. 233-242, Sept. 2003.
[13] A.E. Middleditch, and K.H. Sears, “Blend surfaces for
set theoretic volume modeling systems”, SIGGRAPH
Computer Graphics, vol. 19, no. 3, pp. 161-170, 1985
[14] H. Nishimura, M. Hiral, T. Kawai, T. Kawata, I.
Shirakara, and K. Omura, “Object modeling by distribution
function”, Electronic Communications, J68-D, no. 4, pp.
718-725, 1985.

[23] J. Rossignac, and A. Requicha, “Constant-radius
blending in solid modeling”, ASME Computers In
Mechanical Engineering (CIME), vol. 3, pp. 65-73, 1984.
[24] J. Rossignac and A. Requicha, “Offsetting operations in
solid modeling”, Computer-Aided Geometric Design, vol. 3,
pp. 129-148, 1986.
[25] G. Wyvill, C. Mcpheeters, and B. Wyvill, “Data
structure for soft objects”, The Visual Computer, vol. 2, no. 4,
pp. 227-234, 1986.
[26] G. Wyvill and B. Wyvill, “Field functions for implicit
surfaces”, The Visual Computer, vol. 5, pp. 78-52,1989.

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

