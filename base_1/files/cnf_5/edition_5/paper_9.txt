A Scalable Algorithm for Adjusting Node-Node Overlaps
Xiaodi Huang1, A.S.M. Sajeev1, Wei Lai2
Department of Mathematics, Statistics and Computer Science, the University of New England,
Australia
Faulty of Information and Communication Technologies, Swinburne University of Technology
{xhuang, sajeev@turing.une.edu.au}
Abstract
The node-node overlaps, which occur in drawing of
labeled graphs, and more importantly, in the dynamic
drawing, have been a problem in graph visualization.
Several approaches have recently been proposed to solve
such a problem. These approaches, however, lack the
scalabilities of dealing with large number of overlapping
nodes. Providing a formal description of the problem,
this paper presents a scalable version of our previous
approach called the Force-Transfer algorithm.
Compared to other methods, our new algorithm is able
to achieve the compact adjusted layout of a large graph.
Keywords--- Graph Layout; Overlapping Nodes;
Force Transfer; Layout Adjustment

1. Introduction
In the field of graph visualization, nodes in a graph
represent objects or entities, which often have distinct
labels as their identifiers. These labels in a drawing may
be in the form of text, digits, or even images. Unlike
most of existing drawing algorithms, nodes should be
drawn as rectangles large enough to display labels, rather
than as abstract points with almost no size. UML
diagrams in CASE tools, for example, are labeled graphs.
The problem of node-overlapping may arise while
displaying such graphs by using traditional algorithms.
The resulting layout contains overlapping nodes, which
destroy the layout aesthetics, an underlying purpose of
graph layout. This is because these algorithms do not
take into account the node size. The need thus arises for
removing node-overlapping. More importantly, in a
dynamic environment where a graph is often modified
such as enlargement/shrinkage of sub-graphs and
addition/deletion of nodes, it is required that the graph
layout should be adjusted for these changes. While
eliminating node overlaps, the adjustment of an original
layout should be kept to a minimum. The techniques for
removing node-overlapping can directly be applied to
reposition overlapping windows in multi-window

applications, and to layout information display for small
devices such as mobile phones and PDAs [16].
Three primary kinds of approaches to solving the
node-overlapping problem have been reported in the
literature: uniform scaling [4, 7], constrained
optimization [2, 5, 6], and force-based algorithms [1, 4,
12, 14]. Preserving the original structure of a graph, a
straightforward approach called uniform scaling avoids
node overlaps by uniformly scaling the overlapping
layout. The layout may, however, be expanded
unnecessarily. The adjusted layout thus tends to be too
large. The constrained optimization approach makes use
of an objective function. This function consists of a
quadratic expression about the differences between the
initial and adjusted coordinates of nodes. An optimal
solution to such a function is then provided, subject to a
set of constraints that ensure no node-overlapping [5, 6].
These kinds of approaches can “give better layout than
the force scan algorithm, although they are slower” [5].
The force-based algorithm includes cluster busting in an
anchored graph drawing [14] and the force-scan
algorithm (FSA) [1, 4, 12]. The procedure of cluster
busting is iterative in that the nodes in a graph are
iteratively relocated in accordance with measurable
criteria. To improve the distribution of nodes (cluster
busting), these criteria minimize the differences between
the original layout and adjusted layout (anchored graph
drawing). Also, these algorithms have to run several
iterations so as to achieve a better-adjusted layout.
Compared to uniform scaling, FSA produces a compact
layout, preserving the mental map [12, 21] of an original
graph. To make a graph layout as compact as possible, a
variant of FSA [4] allows an additional pull force
between two nodes. Considering the node size in the
original spring embedded algorithm, D. Harel et al. [17]
recently proposed a modified spring method that
prevents node-overlapping at the beginning of a layout.
Other related work includes the SHriMp algorithm [15]
where nodes uniformly give up screen space to allow a
node of interest to grow. These nodes are appropriately
scaled to fit inside the screen. Using a heuristic method,
our previous approach called the Force-Transfer
Algorithm (FTA)[22] approximates a global, optimal
adjustment with minimal local changes. However, there

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

may be thousands of nodes and edges of a graph in
reality. In this case, most of existing approaches lack the
feasibility. In this paper, we extend FTA to a scalable
version that can handle relatively large graphs.
The remainder of this paper is organized as follows.
The following section presents a formal description of
removing node-overlaps problem. Section 3 presents a
way of determining the seed node of FTA, followed by
presenting a scalable version of FTA in Section 4. The
typical example of graph layout is given in Section 5.
Finally, the conclusion is given in Section 9.

2. Problem of Removing Node Overlaps
The important issues related to the problem of
removing node-node overlaps are: (1)what requirements
for an adjustment, and (2) how to measure the quality of
such an adjustment.
The basic requirement of an adjustment is to remove
all node-node overlaps with the least relocation of a
graph.
We begin with presenting the requirement of nonoverlapping nodes.
Suppose that an overlapping graph G=(V, E) has the
set of nodes denoted by V = {1, 2, ..., |V|}, and the set of
edges by E ⊆ V × V. Let ( xq0 , y q0 ) denote the centre of
node q (i.e., the index of a node is q) with a rectangular
bounding box of width wq and height hq, and let ( x1q , y 1q ) ,
2
q

1
q

2
q

2
q

1
q

2
q

( x , y ) , ( x , y ) and ( x , y ) denote its four corner
coordinates (See node q in Figure 1). Also, we suppose
that the nodes in G are sorted by their xi1 and then by

y1i values in the horizontal and vertical directions (the

coordinate of the upper left corner ( x1q , y 1q ) of node q, for
example), where i=1, 2, …, |V|.
x
(x1q, y1q)

y

(x2q, y1q)

h

k

q

l

(x0q, y0q)
(x1q, y2q)

(x2q, y2q)

j
0

0

(x v, y v)

Fig.1. A set of overlapping nodes
If the following equations are satisfied:
| xi0 − x 0j |≥ ( wi + w j ) / 2 and
(1)
| y i0 − y 0j |≥ ( hi + h j ) / 2
then nodes i and j are separated. Otherwise, the two
nodes are overlapping. One node in a graph may overlap
with many nodes directly or indirectly. We use NN(q) to
represent a set of nodes that directly overlap with node q.
RNN(q) is a subset of nodes in NN(q) that locate at the
right to node q. Although some nodes do not overlap

directly with q, they maybe indirectly overlap q via other
node(s) that directly overlaps with q. Therefore, we use
TNN(q) to denote a set of all nodes that directly and
indirectly overlap with node q. For example , we have
NN(q)={h, j, k}, RNN(q)={j, k}, and TNN(q)={h ,j ,k ,l}
in Figure 1.
The further question is how to measure the degree of
an adjustment.
Number of adjusted nodes: A straightforward way
is to count the number of nodes that has been
repositioned after an adjustment, denoted by λ1 = n / | V | ,
where n is the number of adjusted nodes.
Display areas: We are concerned also with the
change of occupying areas after an adjustment. This is
measured by λ2 = 1 − W / W ' , where W denotes the
minimal, occupying area of an original graph layout, and
W ' the area of the adjusted layout.
In fact, a compact adjustment is the primary goal of
the removing node-overlaps problem. We therefore
introduce another definition to measure the adjustment
degree with respect to the adjusted distances.
Cost function: A function used to measure the
degree of an adjustment. Its value equals the sum of the
moved distances over all the nodes in V after a layout
adjustment:

fcost (V , V ') = ¦ ¦(Δxij +Δ yij )
i∈V j∈V

where Δ xij and Δ y ij denote the moved distances of node
j in the x and y directions caused by the applied force f ij .
The second requirement of an adjustment is to
preserve the mental map of an original graph [4, 15]. In
practice, it is, however, difficult to entirely keep the
mental map of a large graph after an adjustment.
Therefore, the question is how to quantify the degree of
the destruction of the mental map. The preservation of
orthogonal ordering can be measured by the Kendall’s
tau distance [18, 19] that captures the number of
disagreements between two rankings. In the case of
graph layout, the rankings reflect the respective sequence
of node relative positions in original and adjusted layouts
denoted by V and V ' . We define a mismatched set
ν (V , V ' ) as follows:
ν (V ,V ' ) = {(i, j ) ∈ V | ( xi1 (V ) > x1j (V ) ∧ xi1 (V ' ) < x1j (V ' )) ∨ ( x1j (V ) < x1j (V ) ∧ xi1 (V ' ) > x1j (V ' ))
∨ ( yi1 (V ) > y1j (V ) ∧ yi1 (V ' ) < y1j (V ' )) ∨ ( yi1 (V ) > y1j (V ) ∧ yi1 (V ' ) < y1j (V ' ))}

In other words, the mismatched set contains a set of
node pairs whose order has been changed in an adjusted
layout. An indicator function is thereby given by
­1 if ( i, j ) ∈ν ( V , V ' )
τ ( i, j ) = ®
otherwise
¯0
The degree of orthogonal ordering changes is
defined as
2
λ3 =
¦ τ (i , j )
| V | (| V | −1) (i , j}∈V
It is normalized by |V| (|V|-1)/2, the maximum
number of mismatched node pairs, so that it takes a value
in [0, 1].

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

By using an aggregation function, the combination
of the number of adjusted nodes, orthogonal ordering,
and the cost function yields the following measure that
quantifies the degree of a layout adjustment.
η (V , V ' ) = f ( λ1 , λ 2 , λ 3 , f cos t (V , V ' ))
As an example, the aggregation function f (.) uses
the following simple one:
¦ τ (i, j )
n
( i , j )∈V
η (V , V ' ) = w 1
+ w2
|V |
| V | (| V | − 1) / 2
W
) + w 4 ¦ ¦ ( Δ x ij + Δ y ij )
+ w 3 (1 −
i∈V j∈V
W'
(2)

where w1 + w2+ w3 + w4 is 1. For simplicity, we may
assign equal importance to the three measures using
equal weight values.
With the above preliminaries, we are ready to
formalize the problem of removing node-overlaps.
Removing node overlap problem (RNOP): Given a
graph G with an overlapping node layout, an adjustment
for removing node overlaps should satisfy the following
conditions:
1. NN ( q ) = φ , ∀ q ∈ V
2. min{η (V, V' , s )
In the following, we show that the RNOP is NP.
Theorem RNOP ∈ NP.
Proof: we can solve the RNOP with a
nondeterministic algorithm. For all the possible
adjustments of a given overlapping graph, we compute
the value of η (V, V' ) to see whether it satisfies the
requirements given in Definition 6. It is obvious that the
time complexity for checking whether or not any two
nodes are overlapping is polynomial. Ƒ
Furthermore, the RNOP is NP-complete. Computing
the optimal Kendall tau aggregation, which serves as one
component of our measure of an adjustment degree, is
NP complete [19]. Since the RNOP is an NP-complete
problem, it is unlikely to find a good deterministic
algorithm with polynomial running time. None of a
complete solution to the problem has been reported in the
literature. We resort to an approximate and heuristics
algorithm. As before before, the minimization of
adjusted distances is of primary importance in an
adjustment. Relaxing other constraints, we present an
algorithm that approximately minimizes the cost
function.

the overlapping nodes in a graph, applying forces is
conducted one by one within two scans: the left-to-right
scan, and the top-to-bottom scan. As a result, some nodes
are moved to avoid overlaps in either the horizontal or
vertical direction. In fact, FTA addresses three issues:
how great a force should be, in which way an applied
force is transferred to other nodes, and where to start
with the first force. First, a minimum force between two
overlapping nodes is applied so that a local adjustment is
optimized. Second, the force is restrictedly transferred to
a dynamic sub-graph that is a group of overlapping
nodes. It is likely that a node does not overlap with any
node in the sub-graph, but does with at least one of them
after an adjustment. The nodes in the sub-graph are
therefore updated iteratively during the scan. An
adjustment will continue until such sub-graphs including
overlaps no longer exist in a final layout. It should be
noted that a node with the initially applied force, called
the seed node in FTA, can be any node of a graph.

4. Determination of Seed Node of FTA
FTA belongs to the force-based one, sequentially
applying the forces within scans. We need a particular
node in a graph to start the scans.
The seed node plays an important role in FTA. A
seed node should be chosen in such a way that it
minimizes the value of the cost function. In fact, the
RNOP can be viewed as an optimization problem. This
means
the
minimization
of
the
objective
'

function fcost (V , V ) , subject to removing all the
overlapping in a graph. Many methods may be employed
to find the solution such as Simulated Annealing [8],
Genetic algorithm [9], and Tabu Search [10, 11].
Applying those approaches to the RNOP, an optimal
point may be found as the centre of a seed node.
Determining this optimal point is, however, a timeconsuming process by means of these approaches.
In fact, it is not necessary to determine an accurate
position of the seed node, since FTA provides only an
approximate minimization of an adjustment. In the
following we present a heuristic that seeks a seed node
from an overlapping graph layout. The basic idea of this
approach is to estimate the central location of all
overlapping nodes according to their distribution.
We impose a window with a minimal size that
covers all overlapping nodes of a graph layout. Given
that the coordinates of the window centre is (x0, y0), we
have the seed node (xs, ys) as follows.

3. Force-Transfer Algorithm
In the section, we briefly review our Force-transfer
algorithm, based on answering three related, fundamental
questions.
The idea of FTA is to apply a minimal ‘force’ to one
of two overlapping nodes so as to separate them. For all

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

h

(x0, y0)

(a) Imposing three windows on G0
forms three virtual nodes

w

Fig.1. Determination of seed node
|V | −1

xs =

¦ (−1) p ( xi1 + x1i+1 )

|V |−1

¦ (−1) p ( yi1 + y 1i+1 )

, y s = i=1
2n
2n
­1 if xi1 ≤ x0 ( w / 2)or y 1i ≤ y0 (h / 2)
p=®
,
if xi1 > x0 or yi1 > y 0
¯0
i =1

where

j = min{ j ' | j ' ∈ RNN (i )} , and n is the number of pairs of

overlapping nodes.
The coordinates of overlapping nodes on the left of
the window centre are negative whereas those on the
right are positive in the above equation. As an example
shown in Figure 1, the coordinates of first two nodes are
negative whilst the rest three ones are positive in the
calculation. Also note that the n equals 3.
Another useful variant of FTA utilizes multiple seed
nodes rather than one seed node within a graph. In
general, a given graph layout varies in the distribution of
overlapping-node locations. Based on this fact, we assign
the respective seed node in several areas surrounded by
densely overlapping nodes. We will give this detailed
variant of FTA in Section 4.

5. Scalability of FTA
The above version of FTA cannot effectively handle
a graph with a large number of overlapping nodes. This
problem has become particularly important in the case of
a large, dynamic graph adjustment. In the following we
provide new versions of FTA. The idea is to apply FTA
to the multiple abstract levels of a large overlapping
graph, respectively, which has much smaller number of
overlapping nodes than the original one. This approach
starts with grouping the sub-graph of overlapping nodes,
namely, transfer neighbor nodes (TNN), into a virtual
node. The original overlapping graph can then be thought
of as a new, next abstract level graph, where the nodes
consist of virtual nodes and the rest of ungrouped,
original nodes.
Consider, for example, an original graph with three
groups of overlapping nodes as shown in Figure 2(a). We
impose three windows over these groups as big virtual
nodes. The FTA is applied to removing the node
overlaps within each virtual node respectively, the size of
which is expanded accordingly. The three virtual nodes
shown in Figure 2(b) then form the first abstract level of
a new overlapping graph. In this way, we repeat this
procedure until all overlaps have been removed.

(b) Applying FTA to remove the overlaps inside
the nodes within each virtual node. The virtual
nodes form the next abstract level of an
1
overlapping graph G

Fig.2. Determination of seed node
The multiple abstract level version of FTA would
still suffer from the problem of slow running in the case
of a TTN with a large number of overlapping nodes.
Suppose that all the nodes iteratively overlap with each
other in a large graph. In other words, a large graph
includes only one TTN. We develop a grid version of
FTA, in which a grid window is imposed over such a
graph with densely overlapping nodes. After removing
overlaps within each grid cell using FTA, all grid cells
are composed of the next abstract level of overlapping
graphs. In fact, the multiple abstract level version of FTA
can be regarded as the adaptive grid version of FTA.
Based on the above ideas, the procedure for the grid
version of FTA is given below.
A grid FTA
Input: a graph G= (V, E) with overlapping nodes
Output: an adjusted graph without overlapping
nodes
l=0, V0=V
while |Vl| > the threshold do
For all q ∈ V l
If t <| TNN (q) |< t1 Then
Impose a minimal window to include all adjusted
nodes in TNN(q)
Apply FTA to TNN(q)
If | TNN (q) |≥ t1 Then
Impose a grid window over all overlapping
nodes
Apply FTA to removing node-overlaps in each grid
cell
The imposed windows are regarded as virtual
nodes in the next abstract level of a graph; that is, Vl+1
l=l+1
end while
Remove all rest overlaps

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

Note that all already adjusted nodes may still be
relocated together with the relocation of its virtual node
during the adjustment of the next abstract level of a
graph.
In the experiments, the first threshold in the above
algorithm is 30, while the other thresholds are set to t
=10~20 and t1= 30~40. As for the size of a grid cell of
the window, we provide an experimental principle: the
number of overlapping nodes covered by each grid
should not exceed 40.

6. Layout Examples
FTA and its variances have been implemented in the
prototype called PGD using the Java programming
language. Two typical examples are shown in Figures 3.

environment of graph visualization. In this paper, we
have presented the Force-Transfer algorithm that
removes node-overlaps. The proposed approach employs
a heuristic method to approximate a global optimal
adjustment with the local minimal movement. Scanning
from particular nodes called the seed nodes in a graph,
this approach orthogonally transfers the minimum forces
to only those nodes that recursively overlap with the
nodes from where the forces start. We compare the
Force-Transfer with the Force-Scan algorithm,
demonstrating that our approach is able to generate better
results. It is concluded that FTA achieves an adjusted
layout with a good trade-off between a compact layout
and running time. Our approach can be applied not only
to adjust graph layouts, but also to position nonoverlapping objects such as windows and labels, by
specifying a minimum gap between the objects.

Conclusion
Graphs where the nodes include their labels are
often used in applications. A typical example of such
graphs is UML diagrams in CASE tools. In order to
make the label of each node readable, it requires that
drawings of these graphs should have no node
overlapping. This is also crucial in a dynamic

(a) A graph with many overlapping nodes

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

(b) Layout by FTA
Fig.3. An example of overlapping layout adjusted by the scale version of FTA

References
[1]

[2]
[3]

[4]

[5]

[6]

[7]

[8]

[9]

[10]
[11]
[12]

[13]

W. Lai and P. Eades (2002): Removing edge-node
intersections in drawings of graphs, Information
Processing Letters, 81:105-110.
W. He and K. Marriott (1998): Constrained graph
layout, Constraints, 3 (4): 289-314.
G. D. Battista, P. Eades, R. Amassia and I. Tollis
(1998): Graph drawing: algorithms for the
visualization of graphs, Prentice Hall.
P. Eades and W. Lai (1992): Algorithms for disjoint
node images. In Proceedings of the 15th Australian
Computer Science Conference, 253-265, Hobart.
K. Marriott, P. Stuckey, V. Tam and W. He (2003):
Removing node overlapping in graph layout using
constrained optimization, Constraints, 1-31.
W. He and K. Marriott (1998): Removing node
overlapping using constrained optimization, In
Proceedings of the 21st Australian Computer Science
Conference, Perth, 169-180.
W. Lai (1993): Building interactive diagram
applications. PhD thesis, Department of Computer
Science, University of Newcastle.
R. Davidson and D. Harel (1996): Drawing graphs
nicely using simulated annealing. ACM Transactions
on Graphics, 15(4):301-331.
B. P. Buckles and F. E. Petry (1992): Genetic
algorithms, Computer Society Press, Los Alamitos,
CA.
F. Glover (1989): Tabu search, Part I, ORSA Journal
on Computing, 1(3):190-206.
F. Glover (1989): Tabu search, Part IT, ORSA Journal
on Computing, 2(1):4-32.
P. Eades, W. Lai, K. Misue and K. Sugiyama (1995):
Layout adjustment and the mental map, Journal of
Visual Languages Computer, 6:183-210.
H. Kunihiko, I. Michilo, M. Toshimitsu and F. Hideo
(2002): A layout adjustment problem for disjoint

[14]

[15]

[16]

[17]

[18]
[19]

[20]

[21]

[22]

rectangles preserving orthogonal order, Systems and
Computers in Japan, 33(2):31-42.
K. A. Lyons, H. Meijer, and D. Rappaport (1998):
Algorithms for cluster busting in anchored graph
drawing. Journal of Graph Algorithms and
Applications, 2(1):1–24.
M. D. Story and A. H. Müller(1995): Graph layout
adjustment strategies. In Symposium on Graph
Drawing, GD’95, LNCS 1027, 487-499, Passau
Germany, September, Springer-Verlag.
M-F. Natasa and S. Ralph (2002): SmartView:
Flexible viewing of Web page Contents, the Eleventh
International World Wide Web Conference, Hawaii,
USA.
D. Harel and Y. Koren (2002): Drawing graphs with
non-uniform Vertices. Proceedings of Working
Conference on Advanced Visual Interfaces (AVI'02),
ACM Press, 157-166.
M.G. Kendall (1970): Rank correlation methods.
Griffin, London, UK.
C. Dwork, R. Kumar, M. Naor and D. Sivakumar
(2001): Rank aggregation methods for the Web.
Proceedings of the 10th International World Wide
Web Conference, Hong Kong.
X.D. Huang (2004): Filtering, clustering and dynamic
layout for graph visualization. PhD thesis, Swinburne
University of Technology, Australia.
P. Eades, W. Lai, K. Misue, and K.Sugiyama(1991):
Preserving the mental map of a diagram. Technical
report IIAS-RR-91-16E, International Institute for
Advanced Study of Social Information Science,
Fujitsu Laboratories Ltd.
Xiaodi Huang, Wei Lai (2003): Force-Transfer: A
New Approach to Removing Overlapping Nodes in
Graph Layout. 25th Australian Computer Science
Conference, 349-358.

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

