Fast accurate normal calculation for heightfield lighting on a non-isometric grid
Huanxi Zhao
School of Information Science and Engineering,
Central South University, 410083, Changsha, China
hxzhao@csu.edu.cn

Abstract
Heightfields are two-dimensional arrays of height values, commonly used to store terrain or water surface data,
and are also commonly used for calculating bump maps.
It is necessary to calculate normal vectors for heightfield
when shading it. A traditional way to obtain a vertex normal is to compute it as a weighted sum of the normals of
facets sharing that vertex. In this paper, instead of the classical approach and based on finite difference formulae, we
give a fast and more accurate normal calculation scheme
for heightfield over a non-isometric grid. Numerical and experimental results that support the theoretical analysis are
given.

the vertex. But these methods do not take advantage of the
special characteristics of heightfield meshes, and they are
general but relatively inefficient. By converting to triangles
we lose the orderly structure of the heightfield (see Fig.1),
which can be exploited to render more efficiently. Shankel
[10] described how we can take advantage of the special
characteristics of square heightfield meshes to significantly
optimize vertex normal calculation. Before long, McGuire
and Sibley [7] presented a hexagonal version of fast normal calculation for heightfield on an isometric grid. But,
the above two approaches have a restriction, they are only
effective on square heightfielts. The another main disadvantage of the existing normal calculation algorithm is of firstorder approximation accuracy in irregular heightfield grid
case. In this paper, we will present a fast and more accu-

1. Introduction
Many algorithms in image processing, computer vision
and computer graphics rely on the computation of surface
normals. For example, Shading an object is to simulate
the behavior of light incident on its surfaces. It is necessary to calculate normal vectors on the surfaces of the object for shading it. Heightfields are two-dimensional arrays
of height values, commonly used to store terrain or water
surface data, and are also commonly used for calculating
bump maps. Specially, heightfields serve one primary purpose in video games to act as the terrain upon which your
actors move around and experience the world. To this degree, depending upon the genre of game you’re making,
players may spend a large amount of time looking at the
terrain. With this in mind, it is often desirable to have a
terrain which is realistic and attractive to look at. The most
effective way to make this possible is by the use of lighting, shadows, textures, etc. For rendering the heightfield
we need to calculate the normals of a heightfield. Based on
the normal calculations algorithms of polyhedra mesh (see
the next section), the traditional approach of computing normals is to calculated a normal for each vertex in the heightfield by taking the average normal of all faces that contain

Figure
1.
heightfield.

Traditional

regular

ortho-

rate normal calculation algorithm for non-isometric heightfield grid(in fact, it is of second-order accuracy). The rest of
this paper is organized as follows. Section 2 gives a quick
history of normal calculations of polyhedra and a survey
of existing most common normal calculations algorithms
for heightfields. Section 3 presents our normal computation
scheme for heightfield. Section 4 gives numerical and experimental results to show the efficiency of our algorithm.
Section 5 concludes the paper.

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

Figure 2. The face normal n1 of the triangular
P1 P0 P2

2 Quick history of normal calculations
Since the early 1970s, graphics researchers have produced several algorithms to compute vertex normals for
polyhedra mesh (for example, [2, 3, 6, 7, 8, 10, 11, 12, 13,
14]). These algorithms differ substantially from each other,
but they all have in common the notion of weighting adjacent face normals in some fashion, that is, the formula of
the vertex normal computation is of the following form:
n

ωi ni

n=

(1)

i=1

where the weight ωi for normal ni depends only on edge
lengths and enclosed angles, and ni is the face normal of
the ith face (see Fig.2). Various weights have been proposed
for that purpose. Here, we decided to take a closer look at
some of them that are widely used.
The first vertex normal algorithm, which we will refer
to as the mean weighted equally (MWE) algorithm, was introduced by Henri Gouraud [4] in 1971, in his algorithm,
ωi = 1, that is, the normal of each adjacent facet contributes
equally to the vertex normal. In 1998, however, Thurmer
and Wuthrich [12]found that the results of the Gouraud’s
method strongly depend on the topology of the mesh around
the vertex being processed. To improve the accuracy of the
vertex normal computation method suggested by Gouraud,
they proposed a new method for computing vertex normals
which is mathematically more accurate and is referred to
as ”Mean Weighted by Angle” (MWA). In their algorithm,
ωi = αi , where αi is the angle btween the two edge vectors
vi = PPi and vi+1 = PPi+1 of the ith facet sharing the
vertex. Unlike MWE, MWA suggested that facets which
are ”attached” to a vertex normal should have their contribution to the vertex normal weighted by the angle of the
triangle that the vertex is part of. Not long after Thurmer
& Wuthrich proposed their new vertex normal algorithm, in
1999, Max [6] suggested assigning non-equal weights deriving from the geometry. In his non-equal weighted vertex
normal algorithm, which is referred to as the mean weighted
by sine and edge length reciprocals (MWSELR), the weight

αi
,vi = ||vi ||, and the weight proposed in his paωi = vsin
i vi+1
per give the correct normals for a polyhedron inscribed in
a sphere. His formulation accounts for the differences in
size of the facets surrounding the vertex by assigning larger
weights for smaller facets, which he found helped handle
the cases when the facets surrounding a vertex differ greatly
in length. In addition, Max also presented several other
vertex normal algorithms besides MWSELR, and we will
list these here for brevity. The weights are ωi = vi vi+1 ,
ωi = vi v1i+1 , and ωi = √vi1vi+1 . Recently, Chen and Wu
[2] found from the theory of curvatures of regular surfaces,
two triangles with equal area may have different effect on
normal vectors computation, which indicates that the areaweights need to reflect this observation. Therefore, they
proposed a so-called centroid-weight algorithm (CW), in
which wi = ||gi − P ||−2 where gi is the center of mass
the triangle. They claimed that the centroid-weights to reflect its mathematical or physical meaning.
Jin et al in [5] investigate the above-mentioned vertex
normal computation algorithms. They found that the most
accurate algorithm depends on the class and that for some
classes, in absolute sense, none of the available algorithms
is particularly good. In fact, numerical tests and asymptotic analysis indicate that the existing weighting schemes
for mesh normals behave asymptotically similar,converging
linearly in general and quadratically for a wide class of regular vertices (see [1, 8, 13]).
A heightfield is a one or two dimensional array of data
which represents the height of a piece of terrain at a specific (x, z) point in space. In regular heightfield case (see

Figure 3. The partitioning heightfield data, (a)
on uniform grid, (b) on non-uniform grid.

the left side (a) of Fig. 3, Xu et.al claimed that MWE algorithm, MWA algorithm and area-weighted averaging algorithm are of second-order accuracy. But these algorithm
are too general and lose computation efficiency. The efficiency is important when working with dynamic data. Taking into account the advantage of the special characteristics of square heightfield meshes, Shankel [10] presented
the square version fast heightfield normal calculation, furthermore, McGuire and Sibley [7] shows how a hexago-

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

nal grid is better suited for terrain rendering than a rectangular grid, and presented a hexagonal version fast normal computation scheme. Here, we give more detail for
hexagonal version. Let P = (Px , Py , Pz ) with neighbors
D, E, ..., I shown in Fig.4, we define the normal at P to
be the area-weighted average of the face normals from triangles P ED, P F E, P GF, P HG, P IH and P DI. that is,
the vertex normal is that unit vector in the direction of:
N

tation, the unit normal to (4) at the origin is
⎞
⎛
fx (0, 0)
1
⎠.
⎝
1
n=
1 + fx2 + fz2
f (0, 0)

(5)

z

See Fig.(5), Let |q0 qi | = hi (i = 1, 2, 3, 4), P0 =

= PE × PD + PF × PE + PG × PF
+ P H × P G + P I × P H + P D × P I.

By simple computing, we can obtain a compact expression
for normal,
4
π
N = ( sin( ))[GDy + EHy + 2F Iy ], 4, GDy − EHy ,
6
3
(2)
where GDy = Dy − Gy , EHy = Hy − Ey and F Iy =
Iy − Fy .

Figure 5. Four neighboring non-uniform data
points of q0 , and their surface points, respectively.
F (q0 ) = (0, f (0, 0), 0), P1 = (h1 , f (h1 , 0), 0), P2 =
(0, f (0, h2 ), h2 ), P3 = (−h3 , f (−h3 , 0), 0) and P4 =
(0, f (0, −h4 ), −h4 ), then the partial derivatives of F (x, z)
can be approximated with finite difference formulas such as
h3
h1
h3
h1
1
(
P1 − P3 − ( − )P0 )
h1 + h3 h1
h3
h1
h3
⎞
⎛
1 + O(h1 h3 )
= ⎝ fx (0, 0) + O(h1 h3 ) ⎠
O(h1 h3 )
and

Figure 4. A clockwise hexagonal neighbor of
P: D, E, F, G, H, I.

3 A simple and more accurate scheme
Assume the surface is smooth and has a normal existing everywhere. By inverse function theorem, the surface near the point (x0 , y0 , z0 ) can be expressed the form
y = f (x, z). Without loss of generality, we further assume that the point where the normal to be approximated
is the origin. Then the function f (x, z) can be expanded by
Maclauin series as
fxx 2
x
f (x, z) = fx (0, 0)x + fz (0, 0)z +
2
fzz (0, 0) 2
z + ···.
(3)
+ fxz xz +
2
Define the surface by he vector
⎛

⎞

x
F (x, z) = ⎝ f (x, z) ⎠ ,
z

(4)

where f (x, z) is given in (3). By means of simple compu-

h4
h2
h4
h2
1
(
P2 − P4 − ( − )P0 )
h2 + h4 h2
h4
h2
h4
⎞
⎛
O(h2 h4 )
= ⎝ fz (0, 0) + O(h1 h3 ) ⎠ .
1 + O(h1 h3 )

The approximation to the normal is obtained as in (5) from
h1 −−−→
h4 −−−→
h2 −−−→
h3 −−−→
( (P0 P1 ) − (P0 P3 )) × ( (P0 P2 ) − (P0 P4 )).
h1
h3
h2
h4
It is easy to see that the accuracy is of second-order, and
the computation only need 1 cross-product, which is more
cheaper than scheme (1). When the grid is square, that is,
−P3
−P4
h1 = h2 = h3 = h4 = h, then P12h
× P22h
is secondorder approximation to the normal, which is given in [8].

4
4.1

Numerical and experimental results
Numerical examples

To show the numerical convergence, we take several two
variable functions as artificial heightfield data over xy-plane
as surfaces in R3 so that the exact normal vector can be
easily computed. Both the exact and approximated normal vectors are computed at some selected domain points

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

qij = (xi , yj ) ∈ [0, 1] × [0, 1]. These points are chosen
j
i
, 20
) for i = 1, · · · , 19, j = 1, · · · , 19.
as (xi , yj ) = ( 20
The domain around qij is non-uniform rectangular grid by
choosing 4 distributed points:
qk = qij + rk (cos θk , sin θk ),

(6)

where rk = r(1 + 0.1 ∗ k), θk = (k − 1)2π/4,k = 1, · · · , 4,
then we map the plane mesh onto the surfaces by the selected bivariate functions. The convergence property and
the convergence rate are checked by taking r = 1/8, 1/16,
1/32, · · ·. The functions we use are the following
2
2
exp − 81
16 (x − 0.5) + (y − 0.5)
,
3
8
1
1 1
1
F2 (x, y) = (( )2 − (x − )2 − (y − )2 ) 2 − ,
9
2
2
2

F1 (x, y) =

1 1
1
8 , 16 , ..., 4096 ; j

= 1, 2.), we can draw the following conclusion for the irregularly distributed domain vertices: the
approximate normal converges in the rate O(r2 ).

4.2

Heightﬁeld image lighting example

We first construct an artificial heightfield by adding noise
into a two-dimension non-uniform grid data, then we implemented this non-uniform heightfield terrain rendering with
the five various normal algorithms. The effects are shown
in Fig.6. The first four images look almost the same as each
other, and the last image looks much better, because our
algorithm is of second-order accuracy but others are firstorder.

The numerical experiments show that as r → 0, the maximal error of the approximated vertex normal computed by
our algorithm over the above mentioned local triangulations
and the exact vertex normal computed from the continuous surfaces defined by Fj tend asymptotically to the form
ek (Fj , r) := Ckj rk for a constant Ckj and an integer k. Table 1-2 show the asymptotic maximal error e0 (Fj ), e1 (Fj )
and e2 (Fj )(j = 1, 2).
From these numerical results
Table 1. The Asymptotic Maximal Errors
ei (F1 , n)(i = 0, 1, 2)
1/r
8
16
32
64
128
256
512
1024
2048
4096

e0 (F1 )
2.452809e-002
6.101349e-003
1.527159e-003
3.833783e-004
9.669281e-005
2.460076e-005
6.364165e-006
1.702576e-006
6.361572e-007
2.730245e-007

e1 (F1 )/r
1.962247e-001
9.762158e-002
4.886909e-002
2.453621e-002
1.237668e-002
6.297794e-003
3.258453e-003
1.743437e-003
1.302850e-003
1.118309e-003

e2 (F1 )/r 2
1.569798e+000
1.561945e+000
1.563811e+000
1.570317e+000
1.584215e+000
1.612235e+000
1.668328e+000
1.785280e+000
2.668237e+000
4.580592e+000

Table 2. The Asymptotic Maximal Errors
ei (F2 , n)(i = 0, 1, 2)
1/r
8
16
32
64
128
256
512
1024
2048
4096

e0 (F2 )
1.575054e-001
5.278866e-002
1.381857e-002
3.479125e-003
8.726080e-004
2.191618e-004
5.527276e-005
1.405792e-005
3.634249e-006
9.684482e-007

e1 (F2 )/r
1.260044e+000
8.446185e-001
4.421942e-001
2.226640e-001
1.116938e-001
5.610541e-002
2.829965e-002
1.439531e-002
7.442941e-003
3.966764e-003

e2 (F2 )/r 2
1.008035e+001
1.351390e+001
1.415022e+001
1.425050e+001
1.429681e+001
1.436299e+001
1.448942e+001
1.474080e+001
1.524314e+001
1.624787e+001

(see the above tables, e0 (Fj , r)/e0 (Fj , 2r)

4 = 22 , r =

Figure 6. From up to down and from left to
right, the effects of high resolution terrain
rendered with the MWE normal algorithm,
MWA normal algorithm, the area-weighted
averaging normal algorithm, MWSELR normal algorithm and our normal algorithm, respectively.

5 Conclusions
For non-uniform heightfield data, finite difference formulae result in an approximation to the unit normal to
second-order accuracy, and the calculation is fast. The ex-

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

periment results show the second-order scheme is more effective in shading.

References
[1] T.Langer, A.G. Belyaev, and H.P. Seidel, Analysis and
Design of Discrete Normals and Curvatures, Research
Reports,MPI-I-2005-4-003,2005.
[2] S.G. Chen , J.Y. Wu, Estimating normal vectors and
curvatures by centroid weights, Computer Aided Geometric Design, v.21(5), pp.447-458, 2004
[3] A. S. Glassner, Computing surface normals for 3D
models. In A. S. Glassner, editor, Graphics Gems,
pages 562-566. Academic Press, 1990.
[4] H.Gouraud, Continuous shading of curved surfaces.
IEEE Trans Comput C-20(6):623-29,1971.
[5] S.S Jin, R.R. Lewis and D.West,A comparison of algorithms for vertex normal computation. The Visual
Computer 21:71-82, 2005.
[6] N.Max, Weights for computing vertex normals from
facet normals. J Graph Tools 4(2):1-6,1999.
[7] M. McGuire and P. Sibley, A Heightfield on an Isometric Grid, SIGGRAPH 2004 Sketch.
[8] D. Meek and D. Walton, On surface normal and
Gaussian. curvature approximation given data sampled from a smooth. surface, Computer-Aided Geometric Design 17, 521-543, 2000.
[9] Musgrave, F. K. Grid tracing: Fast ray tracing for
heightfields. Tech. Rep. YALEU/DCS/RR-639, Yale
Dept. of Computer Science, 1998.
[10] Shankel, J., Fast heightfield normal calculation. in
Game Programming Gems 3, Charles River Media,
Inc., 344348,2002.
[11] P. Tellier, Isabelle Debled-Rennesson, 3D Discrete
Normal Vectors, Lecture Notes in Computer Science,
Volume 1568, Jan 1999, Page 447.
[12] Thurmer G, Wuthrich C, Computing vertex normals
from polygonal facets. J Graph Tools 3(1):43-46, 1998
[13] Zhiqiang Xu, Guoliang Xu, Jia-Guang Sun: Convergence Analysis of Discrete Differential Geometry Operators over Surfaces. IMA Conference on the Mathematics of Surfaces 2005: 448-457
[14] R. Yagel, D. Cohen, and A. Kaufman, Normal Estimation in 3D Discrete Space, The Visual Computer, Vol.
8, No. 5-6, June 1992, pp. 278-291.

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

