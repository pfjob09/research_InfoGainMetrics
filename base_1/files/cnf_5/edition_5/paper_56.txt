3D Model Generation by Morphing
Kosuke Kaneko, Yoshihiro Okada and Koichi Niijima
Graduate School of Information Science and Electrical engineering, Kyushu University
6-1 Kasuga-koen, Kasuga, Fukuoka, 816-8580 JAPAN
{k-kaneko, okada, niijima}@i.kyushu-u.ac.jp
Abstract
This paper proposes a 3D model generation system
that outputs intermediate3D shape models between two
already existing 3D models by morphing. Although there
have been a lot of computer animation software, it takes
a long time to create a 3D shape model even using such
computer animation software. Morphing is one of the
techniques used to easily create 3D models. If we have
two different 3D shape models, it is possible to generate
intermediate 3D shape models between them by
morphing. However, there are two main problems in the
morphing of polygonal models. Those are vertex
mismatch and semantic topology mismatch. In this
paper, the authors propose an algorithm that is free from
the vertex mismatch problem and that automatically
determines the semantic topology match. The proposed
system based on the algorithm decomposes both two
polygonal models, makes decomposed element pairs
between them, and then generates intermediate 3D shape
models by morphing as for the decomposed element
pairs automatically.
Keywords--Polygonal
model,
Morphing,
Segmentation, Computer graphics

1. Introduction
Recent advances of computer hardware technologies
have made it possible to generate high quality CG
images in real time. And then 3D CG and CG animation
have been in great demand in video game industries and
movie productions. To create 3D CG and CG animation,
we have to prepare various 3D shape models. Usually
CG designers create 3D shape models manually using
CG animation software. However, this is very laborious
and time consuming task. In this paper, we propose a 3D
model generation system that enables to create 3D shape
models easily by morphing.
Morphing is one of the techniques used to easily
create 3D models. If we have two different 3D shape
models, we can create intermediate models between
them by morphing. However, there is a vertex mismatch
problem that usually two different polygonal models
have different number of vertices and it is difficult to

determine vertex correspondences between them. In a
conventional morphing system, the user has to determine
them manually and it needs a lot of time [2]. In this
paper, we propose an algorithm that is free from the
vertex mismatch problem. For generating intermediate
shape models by the morphing, we have to prepare two
different shape models. One is called an original model
and the other is called a target model. Moreover
intermediate shape models to be generated by the
morphing are called mimic models. First of all, our
proposed system makes a copy of an original model and
applies the morphing to this copy. So, mimic models to
be generated by the morphing have the same number of
vertices and the same vertex connectivity as those of the
original model. Therefore our system is free from the
vertex mismatch problem. It is easy to generate the copy
of an original model and apply the morphing to it to
generate mimic models. However, there is another
problem similar to the vertex mismatch problem. That is
semantic topology mismatch problem that two different
polygonal models have different semantic topology and
complexity, and we have to determine correspondences
between each semantically decomposed element of them.
In a conventional morphing system [7], this
decomposition and mapping task is also performed
through manual operations of the user by consuming a
lot of time. Our proposed system decomposes both the
copy model and the target model to their several
semantic elements and automatically determines
correspondences between each element of them based on
their two locations. We employ watershed segmentation
method [3, 4] for the decomposition process.
Consequently, we can obtain more precise intermediate
shapes as mimic models between an original model and a
target model even if they have a complex shape. For
example, Figure 1 shows an example of intermediate
models generated by our proposed morphing system. The
original object is a butterfly shape and the target shape is
a girl shape.

Figure 1: Morphing example between a girl model and a
butterfly model.

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

3.1. Essential algorithm for morphing
This paper is consisting of the followings. First of
all, we present related work in Section 2. In Section 3,
we explain our morphing algorithm. Then, Section 4
shows experimental results. Finally we conclude the
paper in Section 5.

2. Related work
There are several related works on generating 3D
shape models by reusing already existing models or by
specifying some parameters interactively. First of all,
Nishino, et al, proposed a 3D model design system that
generates many slightly different shape models by IEC,
Interactive Evolutionally Computing [5]. With this
system, the user can obtain various 3D shape models by
intuitive operations without any knowledge for designing
3D models. Morphing is one of the techniques to
generate 3D shape models easily. However, there is a
vertex mismatch problem. Yumoto, et al, proposed a
morphing algorithm of using a mimic model created
from an oval model [8]. This algorithm is free from
vertex mismatch problem similarly to our system. But if
a target model is very complicated, it is impossible to
create its mimic model from an oval model. In our
algorithm, if a target model is complicated, we segment
the surface of a model and decompose to several simple
elements, and apply the morphing each element pair of
the original model and the target model.
There is another problem that generated models by
the morphing often include self intersection regions. The
paper [1] treats an algorithm that avoids self intersection
regions. We can also avoid this problem because before
applying the morphing to a model, our algorithm
decomposes the model to several simple elements by the
watershed method proposed by Mangan, et al, [3]. Each
decomposed element is very simple so that self
intersection regions hardly exist.

An essential algorithm for the morphing is to move
vertices of the copy of an original model onto the surface
of a target model without changing the vertex
connectivity. Firstly, the center of the copy model is
moved to the center of a target model. And then, the
copy model is scaled down until it will be included in the
target model as shown in Figure 2. In this example of
the figure, a target model has a fruit shape and an
original model has a human head shape. As a next
process, all vertices of the copy model are moved
towards outside until each reaches the surface of the
target model. Figure 3 shows an image of this process.

Figure 2: A target model (a fruit) includes the copy
model of an original model (a head).

3. Morphing algorithm
In this section, we explain our morphing algorithm.
For generating intermediate 3D shape models by the
morphing, we have to prepare two different 3D shape
models. One is called an original model and the other is
called a target model. Intermediate models between the
two models to be generated by the morphing are called
mimic models. As previously explained, mimic models
have the completely same vertex connectivity as that of
the original model because mimic models are generated
by morphing a copy of the original model. It is easy to
obtain a copy of an original model only by making a
copy of the data about vertices and their connectivity of
an original model. So, our system is free from the vertex
mismatch problem. First of all, we explain an essential
algorithm of the morphing in the next subsection. After
that, we explain the decomposition process and the
mapping process to treat complicated shape models in
3.2 and 3.3 respectively. Finally, we describe how to
generate a mimic model as a composite model in 3.4.

Figure 3: An image of generating a mimic model.
After this process, we can obtain an intermediate shape
model between the target model and the original model
as a mimic model that has the completely same vertex
connectivity as the original model.
To move each vertex of a copy model onto the
surface of a target model, we have to find an intersection
point of any triangle face of the target model with the
moving line of the corresponding vertex as shown in
Figure 3. First of all, we have to find intersection points
for all the triangle faces of the target model. Each

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

intersection point can be obtained by calculating next
equation:

intersection point‫ ޓ‬G u d‫ޓ‬

(1)
Here, d is a vector from the center to the corresponding
vertex of an original model, and it is calculated by next
equation:

§ ax
¨
¨ay
¨a
¨ z
¨1
©
Here,

bx

cx

by
bz
1

cy
cz
1

 d x ·§ D ·
¸¨ ¸
 d y ¸¨ E ¸
 d z ¸¨ J ¸
¸¨ ¸
0 ¸¹¨© G ¸¹

a‫{ ޓ‬a x , a y , a z } ,

§0·
¨ ¸
¨0¸
¨ 0 ¸‫ޓ‬
¨ ¸
¨1 ¸
© ¹

(2)

b‫{ޓ‬bx , b y , bz }

and

3.2. Decomposition process by watershed
segmentation method
This essential algorithm for the morphing is too
simple to treat a complex shape of a target model. For
example, as shown in Figure 5, since the movement of
each vertex stops at a first intersection point, some
unreachable part of the target model come to exist.

c‫{ ޓ‬c x , c y , c z } are vectors from the center to three
vertices of a corresponding triangle face of a target
object respectively. If a target model has a closed shape,
we maybe find a triangle face whose corresponding G
having a negative value. Of course, we ignore such a
face. Equation (1) is calculated only to find an
intersection point of the line from the center and the
corresponding vertex of an original model with the
coplanar of a certain face of a target object. So, we have
to check whether the intersection point is located in that
face of the target object or not. Figure 4 depicts how to
calculate it. In the figure, three vertices of a triangle face
and the intersection point are denoted as A, B, C, and P
respectively. Here, we have to check whether the normal
direction of a corresponding face is the same as the
direction of the cross product between vectors AB and
AP. If it is true, next we will check whether the normal
direction of a corresponding face is the same as the
direction of the cross product between vectors BC and
BP.

Figure 5: Example of an undesirable result because
of a complicated target model.
To deal with this problem for more complex models, we
employ decomposition process using watershed
segmentation method [3]. We can obtain intermediate
shape models between an original and a target model by
decomposing them to their several semantic elements
and applying the morphing to each decomposed element
of the copy of an original model. Figure 6 is a 3D model
of an apple and decomposed elements from it by using
the watershed method.

Figure 6: Decomposition of an apple model by using
watershed method.
Figure 4: How to check that an intersection point is
located inside a triangle face.
If it is true, similarly we will check concerning vectors
CA and CP. If it is true, this condition means the
intersection point is located inside the triangle face.
Otherwise means no.

In the watershed method, a feature value should be
assigned to each vertex to generate a topographic map as
a height function derived from the feature values.
Usually a curvature of each vertex is used as the feature
value. And then, by flushing down waters on the map,
several water catchment areas can be determined.
Consequently, we can decompose one polygonal model
to several groups consisting of adjacent polygonal faces

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

by segmenting its surface based on the water catchment
areas. The algorithm is consisting of the following five
steps.
1.

Calculate a curvature of each vertex as its
feature value.
Locate and label all local minima, each of
which forms the bottom of a catchment basin.
Flat regions with uniform curvature are then
found, labeled, and classified depending on
whether they have any neighboring vertices
adjacent to their boundaries lower than their
curvature or not.
Move a token (downward, steepest descent)
starting from each remaining unlabeled vertex
of the surface until it encounters any label
region.
Merge shallow regions with their neighbor
regions until the depths of all the remaining
regions are above a present threshold value.

2.
3.

4.

5.

3.

The pair of i-th and j-th elements is stored as
shortest distance pair and the distance between
them is stored as next shortest distance if it is
shorter than the current shortest distance.

After these steps, we can obtain the best mapping. And
then, the system applies the morphing to each mapping
pair. Figure 7 is an example of the decomposition of two
different models and the mapping between them. The
left part shows a rocket model decomposed into three
elements and the right part shows a pegasus model
decomposed also into three elements. A square displayed
at the center of each element indicates which the element
is, and the same color squares represent the mapping pair.

We use a normal of each vertex for the calculation of its
curvature in Step 1. Firstly, a covariance matrix of one
vertex is calculated using next equation:

ª V xx V xy V xz º
«
»
« V yx V yy V yz »
«V V V »
¬ zx zy zz ¼

C

(3)

3.4. Mimic model generation

Its each element is expressed by next equation:

V

2
ab

1 N
¦ (a t  a )(b t  b)
Nt0

(4)

Here, N is the number of faces neighboring the vertex,
a {x, y, z} , b {x, y, z} , and { x t , y t , z t } is the x, y,
z element set of the normal of face t in the neighboring
faces.
Next, the norm of the matrix as curvature D is
calculated by next equation:

D

C

Figure 7: Mapping between an element of an original
model and an element of a target model.

By applying the morphing describe in 3.1 to each
mapping pair between decomposed elements of an
original and target model, the system generates mimic
models between them. Before the morphing, each
decomposed element of the original model is moved to
the center position of the corresponding decomposed
element of the target model, and is scaled down until it is
included in that element of the target model.

(5)

3.3. Mapping of decomposed elements
After decomposing an original model and a target
model to their element parts, we have to map each
element of the original model onto one of the
decomposed elements of the target model. Our proposed
system automatically determines this mapping based on
the locations of those two corresponding element parts.
The mapping is determined by the following steps. Here,
a distance between two elements is calculated using the
center points of their bounding boxes.
1.
2.

For each i-th element in decomposed elements
of the original model, do step 2:
For each j-th element in decomposed elements
of the target model, do step 3:

Figure 8: Each decomposed elements of a target object (a
rocket) include one of the decomposed elements of an
original model (a Pegasus).

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

Figure 8 shows a screen snapshot of one example
that decomposed elements of a target model (a rocket)
include each of decomposed elements of an original
object (a pegasus model). Next, through the same
operation as the case of a simple model, all vertices of
each decomposed element of an original model are
moved onto the surface of each corresponding element of
a target model. Consequently we can obtain intermediate
shape models between the original and the target model
as their mimic shape models. However when executing
this morphing process, there is another problem as
follows: Since before applying the morphing to one
decomposed element of an original model, we move its
center position besides making it scaled down, we have
to move not only the vertices but also the center position
of that element when applying the morphing to it.

In this case, both the original and the target model
are decomposed to three elements. The rocket is
decomposed to two wings and a body. The Pegasus is
also decomposed to the similar components. Each wing
of the Pegasus is a mimic model of the rocket wing. The
right part of the figure shows one mimic model of the
target model generated as a result of the morphing
between the Pegasus and the rocket. Other intermediate
mimic models between them are also shown in Figure 12.

4. Experimental results and discussion
In this section, we show some mimic models of
target models generated by the morphing from some
original models based on our algorithm as experimental
results. First one shown in Figure 9 is an example of the
morphing between both simple models. The original
model is a human-like head shape and the target model is
an apple shape. We obtained a mimic model of the
target model shown in the right part of the figure without
the decomposition process. Other intermediate mimic
models between them are also shown in Figure 10.

Figure 11: A mimic model of a rocket generated from a
Pegasus.

Figure 12: Rocket-Pegasus morph.
Moreover Figure 13 shows another example as a
result of the morphing between a butterfly model as the
original and a girl model as the target. In this case, both
the original and the target model are decomposed to six
elements, i.e., the butterfly is decomposed to four wings,
a body and a head, whereas the girl is decomposed to
two arms, two legs, a body and a head. The upper part of
the each butterfly wing corresponds to each of the two
girl arms.

Figure 9: A mimic model of an apple generated from a
human-like head model.

Figure 10: Fruit-head morph.
Next example is shown in Figure 11. In this
example, we applied the morphing between complex
original and target models. The original model is a
Pegasus shape and the target model is a rocket shape.
The right part of the figure shows a mimic model of the
target model generated from the original model.

Figure 13: A mimic model of a girl generated from a
butterfly.

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

References
[1]

Figure 14: Girl-butterfly morph.
And the lower part of the each butterfly wing
corresponds to each of the two girl legs. Similarly, the
body of the butterfly becomes a mimic model of the girl
body and the head of the butterfly corresponds to the girl
head. Other intermediate mimic models between them
are also shown in Figure 14.
As shown in Figure 14, our proposed algorithm is
available to generate intermediate shape models between
two different models even if those two models have a
complex shape and it is said that our proposed 3D model
generation system based on the algorithm is useful.
However, there are some restrictions on the original and
target model to completely automatically generate mimic
models between them as follows:

[2]

[3]

[4]

[5]

[6]

1.

2.
3.

The number of decomposed elements of an
original model must be the same as the number
of decomposed elements of a target model.
Both an original model and a target model must
have a closed surface.
A model must have its center point inside its
closed surface.

[7]

[8]

5. Concluding remarks
[9]

In this paper, we proposed a 3D model generation
system that generates intermediate shape models
between two different shape models by morphing. The
essential algorithm used for the morphing is free from
the vertex mismatch problem and the proposed system
can generates intermediate shape models between an
original model and a target model even if they have a
very complex shape. In such a case, the system
automatically decomposes each of the two models to its
several elements using the watershed segmentation
method and furthermore determines correspondences
between a decomposed element of the original model
and its corresponding decomposed element of the target
model based on the locations of them.
As described above, our 3D model generation
system proposed in this paper is very useful. However,
as described in Section 4, there are some restrictions on
the original and target model to completely automatically
generate mimic models between them. As future work,
we will improve the morphing algorithm to make the
system free from these restrictions. In addition,
watershed segmentation methods [3, 4] are apt to
decompose a 3D shape model into too small elements.
This is inconvenient. We are also supposed to use other
segmentation methods proposed in [6, 9].

Funatomi, T., Elimination of Local Self-intersection on
Three-dimensional Metamorphosis between patchmodels
Gregory, A., State, A., Lin, M.-C., Manocha, D. and
Livingston, M.-A., Interactive Surface Decomposition
for Polyhedral Morphing, A. Visual Computer, Vol. 15,
pp.453-470, 1999.
Mangan, A.-P., Whitaker, R.-T., Partitioning 3D Surface
Meshes Using Watershed Segmentation, IEEE
Transactions on Visualization and Computer Graphics,
Vol. 5, Number 4, pp.308-321, 1999.
Mizoguchi, T., Date, H., Kanai, S., and Kishinami, T.,
Feature Edge Extraction from Mesh Model based on
Wide Range Normal Evaluation and Modified Watershed
Method, (8th Joint Conference on Information Sciences,
pp.1610-1613, 2005.)
Nishino, H., Takagi, H., Cho, S. and Utsumiya, K., A 3D
Modeling System for Creative Design, Proc. of the 15th
IEEE Int'l Conf. on Information Networking (ICOIN-15),
pp.479-486, 2001.
Page, D.-L., Koschan, A.-F. and Abidi, M.-A.,
Perception-based 3D Triangle Mesh Segmentation Using
Fast Marching Watersheds, IEEE Computer Society
Conference on Computer Vision and Pattern Recognition
(CVPR '03) - Volume 2, pp.1063-1069, 2003.
Xiang, F., Hujun, B., Heng, P., Wong, T. and Peng, Q.,
Continuous Field Based Free-Form Surface Modeling
and Morphing, Computers and Graphics 25, pp.235-243,
2001.
Yumoto, A., Suzuki, K. and Sasaki, S., 3 Dimensional
Morphing using Oval – Spherical Mesh, Graphics and
CAD, pp31-38, 1995.
Zuckerberger, E., Tal, A. and Shlafman, S., Polyhedral
Surface Decomposition with Applications, Computers
and Graphics 26, pp.733-743, 2002.

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

