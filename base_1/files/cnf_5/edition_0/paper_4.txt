2012 Ninth International Conference on Computer Graphics, Imaging and Visualization

Approximating Online Handwritten Image by B´ezier Curve
Taweechai Nunthawisuttiwong
Department of Computer Engineering
King Mongkut’s University of Technology Thonburi
Bangkok, 10140, Thailand
taweechai.wee@gmail.com

Natasha Dejdumrong
Department of Computer Engineering
King Mongkut’s University of Technology Thonburi
Bangkok, 10140, Thailand
natasha@cpe.kmutt.ac.th

points and their polynomials. However, their comparison
techniques are different from those of image processing
ﬁeld. The technique for comparing two images of vector
format can be done by comparing their control points. In
general, the same curves or shapes can be represented by
different various degrees so that the curve transformation
into a proper degree will be performed before comparing two
curves. Furthermore, the images after afﬁne transformations,
e.g., rotation or scaling, should be rotated back for an
appropriate angle or resize by the same scaling factor before
comparison. This technique can be used to solve the problem
for the comparisons of similar images in image processing
ﬁeld. It can reduce computational time.
To transform a handwritten curve into a corresponding
vector graphics image, the curve interpolation technique will
be employed in this paper. In many applications, Newton and
Lagrange polynomials[1] are used for prediction or comparison the statistical information such as weather forecast.
Moreover, Newton and Lagrange polynomials are widely
used in computer simulation group. Although, both Newton
and Lagrange polynomials are different in their formulae,
they can technically construct the same curve. Moreover,
Newton and Lagrange polynomials can form the curve by
using coefﬁcient matrix form. Such matrix form can render
the curve simpler than using their polynomials.
To improve the efﬁciency in the approximation of handwritten images, Newton and Lagrange curves should be
converted into B´ezier curves[2][3][4][5]. B´ezier curve is one
of the well-known curves in geometric modeling. The computational complexity of a B´ezier curve is less than Newton
and Lagrange polynomials. Furthermore, the function of
Bernstein polynomials of B´ezier curve is much simpler than
Newton and Lagrange polynomials. When Newton/Lagrange
curve is converted into a B´ezier curve, the shape of curve
will be still the same but the control points will be altered
into the corresponding B´ezier control points. Such control
points will be used for curve comparisons.
Over the years, there are many techniques used to construct a B´ezier curve. Some methods improved the speed
of curve creation. Some ways generated the new form of
B´ezier curve such as monomial matrix form[6]. Recently,
there exists a faster way to be used for the scan conversion[7]

Abstract—In this paper, a B´ezier curve is constructed to
represent a hand-drawn image, expressed in the forms of
a set of consecutive dots. Using input’s sampling points,
an online handwritten curve is converted into a vectored
curve by Newton-Lagrange interpolation. Although NewtonLagrange curve can be used well in the approximation of the
handwritten curve, their polynomials are not appropriate in
the applications of computer aided geometric design (CAGD).
Therefore, Newton-Lagrange curve will then be converted into
a corresponding B´ezier curve. Ultimately, the ﬁnal result from
the conversion can be expressed in the forms of the B´ezier
control points. As a result, these B´ezier curve represents the
given handwritten curve image.
Keywords-Lagrange Polynomial, Newton Polynomial, B´ezier
Curve, Monomial Matrix

I. I NTRODUCTION
Nowadays, there are many electronic devices designed to
be easily used for drawing images. Typically, such images
are represented in the forms of bitmapped images. However,
this format is not appropriate in many applications, e.g.,
similarity comparison of two images. The solution is to
employ vector graphics format because of its advantages
over raster graphics format.
Generally, images can be classiﬁed into two categories:
raster graphics and vector graphics images. A raster graphics
or bitmapped image is represented by set of pixels. These
pixels consist of their position in two dimensional coordinates and their colors. These images are appropriate for
any display devices such as computer’s monitor screens.
On the other hand, a vector graphics image is composed
of geometric objects such as lines, ellipses, rectangles and
curves. These basic ﬁgures are expressed by mathematical
formulae. These images are appropriate for applications
In image processing, the bitmapped images are mainly
compared by matching pixel by pixel. Although employing
raster graphics image is simple, its computation is timeconsuming. Moreover, there is a common problem in the
similarity comparison of images with different location,
angle and size. Two images, located in different locations,
are treated as different images.
In geometric modeling, the vector graphics format is
mainly used to represent paths, shapes or curves. Such
images are constructed by using operation between control
978-0-7695-4778-7/12 $26.00 © 2012 IEEE
DOI 10.1109/CGIV.2012.24

17

f [ti ] = ci

(3)

2) Lagrange Polynomial: Beside the Newton polynomial,
the Lagrange polynomial offers an alternative approach
to polynomial interpolation. Given n + 1 control points,
{vi }ni=0 , and the knots, {ti }ni=0 , then the Lagrange polynomial expressed by
n

n

L(t) =

vi
i=0

Figure 1.

II. R ELATED T HEORY
A. Newton and Lagrange Polynomials
Newton and Lagrange polynomials are widely used in
numerical analysis and in many applications such as weather
forecast and computer simulation. Almost curves in Computer Aided Geometric Design (CAGD) or geometric modelling are shape-controlled by a set of control points, said
the curve passes through ﬁrst and last control points and
get close to the other points along the path. Newton and
Lagrange polynomials are used to create a special type of
curve which passes through all given control points.
In mathematics ﬁeld, Newton and Lagrange polynomials
are used to ﬁnd the function that contains the given set of
points. Moreover, it can be used to predict the data that
are not given. From their property, Newton and Lagrange
polynomials can be used to model the curve precisely and
easily. Furthermore, it is possible to convert a NewtonLagrange curve into another CAGD curve such as a B´ezier
curve, Said-Ball curve, or Wang-Ball curve.
1) Newton Polynomial: The curve is expressed by N (t)
with n + 1 control points,{ci }ni=0) , and a set of knots,
{ti }ni=0 , then the basis function of Newton curve can be
deﬁned by
n
i=0

⎡
N (t) = L(t) =

c0

c1

...

cn

⎢
⎢
·M ·⎢
⎣

1
t
..
.

⎤
⎥
⎥
⎥
⎦

(5)

tn
Where M is a coefﬁcient matrix of Newton-Lagrange
polynomials. It can be deﬁned as follows:
⎡
⎢
⎢
M =⎢
⎣

f0,0
f1,0
..
.

f0,1
f1,1
..
.

...
...
..
.

f0,n
f1,n
..
.

fn,0

fn,1

...

fn,n

⎤
⎥
⎥
⎥
⎦

(6)
(n+1)×(n+1)

To simplify and improve efﬁciency for using NewtonLagrange monomial matrix, M can be derived from the
inversion of Vandermonde matrix as follows:
⎡

i

f [ti , ti−1 , . . . , t0 ]

(4)

The
following
example
shows
the
interpolation of the deﬁned set of control points
{(0, 0), (1, 1), (2, 3), (3, 4), (4, 3), (5, 2), (6, 1), (7, 5)},
and set of knots {0, 17 , 27 , 37 , 47 , 57 , 67 , 1}, based on Newton
and Lagrange polynomials. The result is shown in Fig.1.
Note that both Newton and Lagrange polynomials generate
the same result.
3) Monomial Form of Newton and Lagrange Polynomials: Although the basis function of Newton and Lagrange
polynomials can be used to interpolate the polynomial curve,
it is hard to understand and model the curve because of the
polynomial complexity. Therefore, there is a new approach
to represent the Newton and Lagrange curve by using the
monomial form. The monomial matrix for Newton and
Lagrange can be written as follows:

A seventh degree Newton-Lagrange curve

of B´ezier curve in raster graphics display. That is the degree
elevation technique.
In this research, the handwritten images will be transformed into vector graphic images by using Newton and Lagrange interpolation. Then such curves will be transformed
into the corresponding B´ezier curves.

N (t) =

j=0,j=i

t − tj
, t ∈ [t0 , tn ]
ti − tj

(t − tj ), t ∈ [t0 , tn ] (1)

⎢
⎢
M =⎢
⎣

j=0

where
f [ti , ti−1 , . . . , tk+1 ] − f [ti−1 , ti−2 , . . . , tk ]
f [ti , ti−1 , . . . , tk ] =
ti − tk

where

(2)

18

m0,0
m1,0
..
.

m0,1
m1,1
..
.

...
...
..
.

m0,n
m1,n
..
.

mn,0

mn,1

...

mn,n

⎤−1
⎥
⎥
⎥
⎦

(7)
(n+1)×(n+1)

2) Monomial Form of a B´ezier Curve: Although this
approach is not considered the fastest method that can be
used to model the B´ezier curve [7], it can be easily used
to convert the B´ezier curve into another CAGD curve of
the same degree. The monomial matrix of a B´ezier curve is
deﬁne as follows:
⎡
⎤
C0 (t)
⎢ C1 (t) ⎥
⎢
⎥
B(t) = p0 p1 . . . pn ⎢
(12)
⎥
..
⎣
⎦
.
Figure 2.

Cn (t)

A cubic B´ezier curve

where

mi,j =
and

{tj }nj=0

⎧
⎨ 1,
⎩

tij ,

⎡
⎢
⎢
⎢
⎣

for i = 0,
for i > 0.

(8)

A B´ezier curve is the most well-known curve in geometric
modelling ﬁeld. The shape of a B´ezier curve is deﬁned by a
set of control points or control polygon as shown in Fig. 2.
A B´ezier curve has a convex property that the curve always
lies inside the control polygon and passes through its ﬁrst
and last control points. To construct a B´ezier curve of degree
n, the n + 1 control points are require.
1) Power Basis of a B´ezier Curve: This is the ﬁrst
approach to construct the B´ezier curve which is expressed as
a weighted sum of the control points. The weight function
is represented by a Bernstein polynomial which is deﬁned
as follows:
ti (1 − t)n−i

,0 ≤ t ≤ 1

⎡

⎥ ⎢
⎥ ⎢
⎥=⎢
⎦ ⎣

m0,0
m1,0
..
.

m0,1
m1,1
..
.

...
...
..
.

m0,n
m1,n
..
.

mn,0

mn,1

...

mn,n

mi,j = (−1)j−i

n
j

n!
i!(n − i)!

n

Bin (t)pi

,0 ≤ t ≤ 1

⎥
⎥
⎥
⎦

(14)

C. Conversion from Newton-Lagrange to B´ezier Curve
Curves of the same degree and the same control points
have different shapes if and only if they have different
polynomials [1]. To convert the curve into another type
while preserving the shape of the curve, the new set of
control points associated with the target polynomial must
be calculated. To convert a Newton-Lagrange curve into a
B´ezier curve using a monomial approach, a transformation
matrix can be derived as follows:

(9)

(15)

where
Pi are the B´ezier control points
Ci are Newton-Lagrange control points
M is Newton-Lagrange monomial matrix
B is B´ezier monomial matrix
i = 0, 1, 2, . . . , n

(10)

Let B(t) is the B´ezier curve of degree n with control
points, {p}ni=0 , then the curve can be derive by
B(t) =

⎤

tn

j
i

Pi = Ci · M · B −1
=

⎥⎢
⎥⎢
⎥⎢
⎦⎣

t0
t1
..
.

where
n is degree of a B´ezier curve.

where
n
i

⎤⎡

(13)
The matrix M = mi,j describes the basis transformation
between the polynomial basis and the monomial basis. The
elements of the matrix M can be determined as follows:

B. B´ezier Curve

n
i

⎤

Cn (t)

are a set of knots.

Bin (t) =

C0 (t)
C1 (t)
..
.

III. P ROPOSED M ETHODOLOGY

(11)

i=0

A. Proposed Idea

Beside the basis function of a B´ezier curve, there are many
approaches for modelling the B´ezier curve such as the de
Casteljau’s algorithm, degree elevation and the monomial
form approach. Other approaches can construct the curve
more efﬁciently than using the basis function.

The B´ezier curve is used to represent the handwritten
shape in raster graphics display. The basic idea is to apply
the Newton-Lagrange interpolation and curve conversion to
construct the handwritten shape in the form of vector graphic
image. The ﬁrst approximated handwritten shape is based

19

on Newton-Lagrange polynomials with control points. The
control points is acquired from sampling the handwritten
shape. The number of sampling points is depended on the
complexity of shape. The algorithm will ﬁnd the appropriate
number of sampling points which makes the most precise
on approximated curve. The approximated handwritten by
Newton-Lagrange polynomials are precise enough but it is
hard to apply their polynomials directly. To simplify the
formula of approximated handwritten by Newton-Lagrange
polynomial, the conversion process must be performed. After
converted the Newton-Lagrange curve into the corresponding B´ezier curve, the new sampling points are the B´ezier
control points. Ultimately, the control points of a B´ezier
curve can be used directly to compare with other curves,
or store them to model the curve in the future.

Figure 3. The result from approximating hand-drawn curve by using
uniform Newton-Lagrange interpolation

B. First Algorithm
The ﬁrst algorithm uses the uniform Newton-Lagrange
interpolation which value of knot vector is increased uniformly. To acquire the sampling points, the curve is sampled
every 50 points. For example if there are 200 points in the
input curve, 5 points will be sampled. Then use these sampling points as control points of a Newton-Lagrange curve.
The Newton-Lagrange control points will be transform into
B´ezier control points in the next step.
The following pseudocode is the algorithm used for
approximate handwritten shape by using uniform NewtonLagrange curve.
ALGORITHM
Input: A handwritten image.
Output: An approximated B´ezier curve.
BEGIN
1) Sample the curve by select one point per 50 points.
2) Transform these sampling points into B´ezier control
points by using a transformation matrix.
3) Draw the approximated handwritten curve by using
Bernstein polynomial with B´ezier control points.
END OF ALGORITHM
In Fig. 3, the curve in the left side is a hand-drawn curve
and the right side is the approximated curve. Fig. 3 shows
the approximated simple arc which is familiar with a handdrawn curve. In Fig. 4, the hand-drawn curve is longer and
has more curvature than the curve in Fig. 3. The result
shows an error near both ends of curve which occurs from
high-degree polynomial interpolation, which is called an illcondition [2]. Fig. 5 shows the result from approximating
a looped curve which has an error as the previous example
even it has a lesser degree.

Figure 4.
The error from approximating hand-drawn curve by using
uniform Newton-Lagrange interpolation

Figure 5. The error from approximating hand-drawn loop curve by using
uniform Newton-Lagrange interpolation

50 points. Distances between each sampling point are not
equal but the value of knot vectors increase uniformly.
Thus, this algorithm will change the uniform knot vectors to
nonuniform knot vectors. The nonuniform knot vectors are
acquired from distance of control points. Their value will be
added by the ratio of the distance between points and sum
of them.
The following pseudocode is the algorithm used for
approximate a handwritten shape by using nonuniform
Newton-Lagrange curve.
ALGORITHM
Input: A handwritten image.
Output: An approximated B´ezier curve.
BEGIN
1) Sample the curve by select one point per 50 points.
2) Create knot vectors which are added by a ratio between the distance of adjacent control points and the
sum of them.
3) Transform these sampling points into B´ezier control
points by using a transformation matrix.
4) Draw the approximated handwritten curve by using a

C. Second Algorithm
The previous algorithm has many errors at two ends
of curve because the relationship between control points
(sampling points) and knot vectors are not appropriate. The
sample points are derive from selected one point for every

20

Figure 9.

Figure 6. The result from approximating hand-drawn curve by using
nonuniform Newton-Lagrange interpolation

Figure 10.

Example of approximating simple curve

Example of approximating more complex curve

Figure 7.
The error from approximating hand-drawn curve by using
nonuniform Newton-Lagrange interpolation

rate which can avoid ill-condition.
The following pseudocode is the algorithm used to ﬁnd
the appropriate sampling rate for approximate handwritten
shape by using nonuniform Newton-Lagrange curve.
ALGORITHM
Input: (1)A handwritten image (2)Degree of the curve
Output: (2)An appropriate sampling rate (2) An approximated B´ezier curve.
BEGIN
1) Approximate the handwritten curve by a NewtonLagrange curve of the deﬁned degree. Vary the sampling ratio from 1/2 to 1/20. Compare pixel coordinates of the output curve with the input image for
each sampling ratio and keep the error data.
2) Select sampling ratio in step 1 which has the smaller
error, then transform these sampling points into B´ezier
control points by using a matrix transformation.
3) Draw the approximated handwritten curve by using a
Bernstein polynomial with B´ezier control points.
END OF ALGORITHM
From Figs. 9, 10, and 11, the errors which cause from
ill-condition, is disappear because this method will ﬁnd the
appropriate degree that construct the curve with the least
error. However, the loop curve, which is shown in Fig. 12,
still has the error from ill-condition, the appropriate number
of sampling points is selected.

Figure 8. The error from approximating hand-drawn loop curve by using
nonuniform Newton-Lagrange interpolation

Bernstein polynomial with B´ezier control points.
END OF ALGORITHM
In Fig. 6, the result from approximating hand-drawn
curve are the same as the previous algorithm. In Fig. 7
and 8, the errors of approximated curves are less than the
previous method. In Fig. 7, the error near both endpoints (ill
condition) still occurs but the shape of the curve are better.
For looped curve, as in Fig. 8, the nonuniform method is
better than the previous method.
D. Proposed Algorithm
An ill-condition can be found in all previous methods
because the number of sampling points are not appropriate. Thus, the method that ﬁnd the appropriate number of
sampling points should be applied. This new developed
algorithm will try to construct an approximated NewtonLagrange curve from a hand-drawn image by vary the degree
of the curve from 2 to 20, and a sampling ratio from 1/20 to
1/2, then compare the result with the input. The algorithm
will check only two ends of the curve for any ill-condition
occurs. This has been done to ﬁnd the appropriate sampling

IV. R ESULTS AND D ISCUSSION
Our approach shows the way to approximate handwritten
curves and their results. However there are some constraints
that this approach cannot approximate such a loop or zigzag
curve. Although this approach works well with simple
curve, there are some errors from selecting the appropriate

21

Figure 11.

data for a curve comparison engine. The purposed algorithm can be improved by using subdivision technique and
optimization technique. The developed algorithm should be
able to approximate complex curves such as loop curves,
cusp curves and zigzag curves. Although this approach
can only approximate simple handwritten curve, the errors
from ill-condition are reduced by using nonuniform NewtonLagrange polynomials and selecting the appropriate number
of sampling points.

Another example of approximating more complex curve

R EFERENCES
[1] David Salomon, Curves and Surfaces for Computer Graphics,
Springer, 2006
[2] G. Farin, Curve and surface for CAGD, Morgan Kaufmann
publish, 2002

Figure 12.

[3] C. Aphirukmatakun, and N. Dejdumrong, Relationships between Newton-Lagrange and CAGD Curves using Monomial Form Approach, the 7th International Joint Conference on Computer Science and Software Engineering (JCSSE
2010),pages 265-270, Bangkok, Thailand, May 12-14 2010.

Example of approximating loop curve

[4] P. B´ezier, Numerical Control: Mathematics and Applications,
Wiley, New York, 1972.

number of sampling points since the appropriate number of
sampling points is highly depends on the shape of the curve.
Furthermore, selecting a sampling ratio to avoid ill-condition
may effect the shape of the curve. This problem can be seen
clearly in Fig. 11. The curve in Fig. 11 changes a little bit
from its original handwritten image but both input and the
approximated curve and still similar to each other.
For complex curves such as loop curve and zigzag
curve, this approach may not efﬁcient for approximating.
To approximate complex curves, more techniques should be
applied such as subdivision and optimization algorithm. For
subdivision technique, the complex curve will be divided
into simple curves. Then, Newton-Lagrange polynomial
will interpolate all subcurve. This technique will solve the
problem for approximating complex handwritten curves but
there are many complex for collecting and approximating the
data. On the other hand, optimization technique will ﬁnd the
best number of sampling points and their position. If these
sampling points are located at the appropriate positions,
the approximated curve will be more precise. To use optimization technique, the constraint function must be deﬁned
but there is no constraint function for handwritten curves
anyway. Thus, it is hard to use optimization technique.
Moreover, comparison between a handwritten curve with its
approximated curve is not the same as we do in CAGD
curves. To compare both curves the duplicated points must
be deleted, and the number of control points in both curves
should be equal.

[5] P. de Casteljau, Outillages methods calcul. Technical report,
A. Citroen, Paris, 1959.
[6] C. Aphirukmatakun, and N. Dejdumrong, Monomial Forms for
Curves in CAGD with Their Applications, the 6th International
Conference Computer Graphics, Imaging and Visualization
(CGIV’09), pages 211-216, Tianjin University, Tianjin, China,
August 11-14 2009.
[7] C. Thanutong, N. Dejdumrong, Approximating B´ezier Curve by
Using Degree Elevation, The 7th International Conference on
Computing and Information Technology, pages 155-160, 2011.
[8] Z. Habib, M. Sarfraz, Rational Cubic Spline International with
Shape Control, Computer & Graphics Volume 29, Issue 04,
pages 594-605, 2005.
[9] Z. Habib, M. Sakai, M. Sarfraz, Interactive Shape Control with
Rational Cubic Splines, Computer-Aided Design & Applications, Volume 1, Issue 1-4, pages 709-718, 2004

V. C ONCLUSION
The proposed algorithm is useful and more efﬁcient to
be used in geometric modelling ﬁeld and some applications.
For example, use the result of this algorithm as reference

22

