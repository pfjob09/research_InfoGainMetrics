2009 Sixth International Conference on Computer Graphics, Imaging and Visualization

Rendering of 3D Cloud for Marine Search and Rescue Simulator in Real-time

1, 2, 3

Helong Shen1, Yong Yin2, Yongjin Li3
Key Laboratory of Marine Simulation and Control, Dalian Maritime University
3
Vessel Command Department, Public Security Marine Police Academy
1
shenhelong@gmail.com, 2bushyin_dmu@263.net, 3liyj.cn@gmail.com
Abstract

an important role in improving the immersion effect &
depth cue of MASRES.
In our previous work[2], based on Dobashi and
Nishita’s method[3-5], we modeled dynamic 3D cloud
using Cellular Automata running in real-time. Based on
this work and some other previous works[6-12], real-time
rendering of more realistic 3D cloud for the MASRES
visual system is studied in this paper.

Based on the previous work of modeling dynamic 3D
cloud using Cellular Automata, this paper renders
realistic 3D cloud for Marine Search and Rescue
Simulator visual system in real-time. Physically based
light interaction is implemented by Open Scene Graph
with a common PC. Light scattering and absorbing is
considered. After the 3D cloud integrated into the visual
scene, experimental results show that it has realistic effect
with fast rendering speed. It is suitable for the
applications of real-time simulation, Marine Search and
Rescue Simulator especially.

2. Previous Work
The previous works of 3D cloud simulation can be
mainly differs by the simulation process – physically
based or not. In order to get the best fidelity, physically
based approach should be used. They simulate the physical
process of fluid dynamics[9, 12-14]. But all their methods
need a large amount of computation time. Although Stam
demonstrated a real-time animation of smoke on a highend workstation, his method is also not suitable for
simulating area cloud in sky scene on a relative low
capability PC for MASRES. On the other hand, some
unphysical methods can simulate cloud with inexpensive
computation. Harris simulated 3D cloud in real time by
particle system. But he assumes the cloud is static and
models the cloud in advanced. He mainly aims at
rendering with imposters and programmable graphics
hardware[8, 15, 16]. Nishita-Dobashi etc. model clouds
quickly by Negal’s Cellular Automata model[17], which is
semi-physically based. They made many predigestions and
the transition rule is very simple and its computation is
inexpensive. Our modeling work is based on their methods.
The cloud simulation in Marine Simulation right now
mainly uses 2D texture mapping technology realized by
OpenGVS API or Vega API, etc. Same to games feature
clouds, a common approach is to paint clouds onto the
skybox texture. This places almost no overhead on
performance but the clouds do not look three-dimensional
and never get closer as the camera moves. Another
solution is to use a single sprite per cloud, which looks
realistic from a stationary camera but produces anomalies
as the camera rotates around it. All of this is not so
intuitionistic. In order to simulate the SAR helicopter
realistically, 3D cloud is needed.

Keywords: cellular automata, real-time, marine
search and rescue simulator, 3D cloud rendering

1. Introduction
Marine Search and Rescue Simulator (MASRES) is
an important equipment of maritime analysis, marine
search and rescue (SAR) training, navigation teaching and
research. The simulator can be applied to marine disaster
recur, simulation research of SAR on sea and harbor
project evaluation etc.[1] As showed in Figure.1,
MASRES is a synthesized simulation system with
searching and rescuing function in fact. Helicopter
simulation unit can carry out the task of landing,
searching, rescuing and communication etc. So a realistic
Primary
Ownship

Secondary
Ownship(No.1)

Secondary
Ownship(No.2)

Helicopter
Unit

LAN/WAN

CCTV Unit

IOS

RCC

Figure.1 MASRES system architecture
display of visual scene for helicopter simulation unit plays
978-0-7695-3789-4/09 $25.00 © 2009 IEEE
DOI 10.1109/CGIV.2009.55

170

3. Cloud Modeling

cld (i, j, k , ti +1 ) = cld (i, j, k , ti ) ∧ IS (rnd > pext (i, j, k , ti ))

In this paper, Cloud modeling is same to the work
in[2]. In the previous work, using Negal’s Cellular
Automata model, based Dobashi and Nishita’s work, some
improvement is made and dynamic 3D cloud is generated,
including cloud growth simulation, cloud extinction, cloud
shape controlling, wind simulation and so on. In this
paper, growth simulation and cloud extinction will be
introduced simply. More information in detail please refer
to[2].

hum(i, j, k , ti+1 ) = hum(i, j, k , ti ) ∨ IS (rnd > phum (i, j, k , ti )) (3)
act (i, j, k , ti +1 ) = act (i, j, k , ti ) ∨ IS (rnd > pact (i, j, k , ti ))
Where rnd is an uniform random number, and IS(e) is a
Boolean function that returns 1 if expression e is true, otherwise
returns 0.

4. Rendering of cloud in real time
4.1 Continuous Density Distribution

3.1 The Growth Simulation

The real cloudscape in our daily life has a continuous
density distribution. But the density obtained from the
simulation has only two values, which are 0 and 1. So a
smoothing method should be used to generate realistic
cloud. We use the method in[18]. The density calculation
equation is given as follows.

The CA model was advanced first by Nagel[17]. The
simulation space is compartmentalized into the cellular
group with cells number of nx×ny×nz. For every cell, three
variables, hum, act, cld, are set. Each represents vapor,
phase transition factor and clouds. These variables are
Boolean types, whose value is 0 or 1. Hum=1 means that
there is enough vapor to form clouds, act=1 means the
phase transition from vapor to water (clouds) is ready to
occur, and cld=1 means there are clouds. The transition
rules of these variables at each cloud cells are depicted as
follows.
hum(i, j , k , t + 1) = hum(i, j , k , t ) ∧ ¬act (i, j , k , t )

cld (i, j , k , t + 1) = cld (i, j , k ) ∨ ¬act (i, j , k , t )
act (i, j , k , t + 1) = ¬act (i, j , k , t ) ∧ hum(i, j , k , t )

ρ ( x, ti ) =

(3)

Where N is the number of cells in the spheriform area
Ω( x, R ) with the radius R. q (i, j, k , ti ) is the density of the
metaball placed at each cell at time ti, which is given by
the following function.
nc
1
q ( i , j , k , ti ) =
×
cld ( xl , m , n )
(4)
∑
N c l , m , n∈Ω ( xl ,m ,n )
Where cld is the binary distribution and xl,m,n is the
coordinate of the grid (l, m, n). In equation (4), f(x)is the
field function given as follows.
⎧ − 4 a6 + 17 a 4 − 22 a 2 + 1 (r ≤ R)
⎪
(5)
f (r ) = ⎨ 9
9
9
⎪⎩0,
(r > R)
In this paper, we set the spherical area with the radius
of 2l (l is the length of each cell grid) as a metaball for
each cell.

(1)

f

∨ act (i, j , k − 1, t ) ∨ act (i − 2, j , k , t ) ∨ act (i + 2, j , k , t )

q(i, j , k , ti ) f (| x − xi , j , k |)

i , j , k ∈Ω ( x , R )

∧ f act (i, j , k )
Where fact is a Boolean function and its value is
calculated by the status of act around the cell. The
following function is used by taking into account the fact
that cloud grow upward and horizontally.
(i, j , k ) = act (i + 1, j , k , t ) ∨ act (i, j + 1, k , t )
act
∨ act (i, j , k + 1, t ) ∨ act (i − 1, j , k , t ) ∨ act (i, j − 1, k , t )

N

∑

(2)

∨ act (i, j − 2, k , t ) ∨ act (i, j + 2, k , t ) ∨ act (i, j , k − 2, t )

4.2 Interaction between light and cloud cells

For more details about the rules please refers to[17].

As we know, the cloud is a group of water particles.
When passing though cloud, the light is scattered by the
particles. The part of the light impacted on a particle is
absorbed and changed to heat energy, and the rest of light
is scattered to neighbouring particles. This paper simulates
this process physically with some simplicity.
Here, cloud can be regarded as a dispersive medium.
The light will be scattered into all directions around the
particles. If we assume that scattering occurs only once, it
is possible to drive a simple expression for the amount of
light that remains after attenuation and scattering. As
shown in Figure.2, consider a ray of light with intensity I0
that travels through a cloud and reaches the eye point. The
light enters the medium at Pb and exits at Pa. Sunlight with
intensity Is enters the medium at Pc and is scattered in the
direction of the eye point at P. The amount of light that
reaches the eye point can then be written as

3.2 Cloud Extinction
The CA model mentioned above has a disadvantage that is
at one cell the variable cld would never change after
becoming to 1. So the cloud extinction never occurred at
this cell. Dobashi uses the method bellowed to deal with
the problem[3]. In order to simulate cloud extinction, one
threshold pext is set, to specify cloud extinction probability.
At each cell whose cld is 1, a random number
rnd (0 ≤ rnd ≤ 1) is generated and cld is changed to 0 if
rnd<pext. But there still is a problem, clouds are never
generated after extinction. Based on the same principle,
phase transition and vapor probability pact, phum are set
randomly to change the variable act, hum to 1 randomly.
The methods described in this section are summarized by the
following transition rules.

171

I = I ab + I sc
(6)
Where Iab is the amount of I0 that remains after
absorption. Isc is the total amount of scattered sun light that
remains after absorption. Iab is given by
I ab = I 0 exp(−τ ( Pa , Pb ))
(7)
Where τ is the optical depth
b

τ (a, b) = ∫ Ex ρ ( s)ds

(8)

a

ρ ( s ) is the density of the cloud cell at s that we get
from part 4.1. Isc is given by
Sunlig
ht

(a)

Figure.3 Captures of test results

Is

5. Implementation and Results
Pc

I

Pb

(b)

θ

P

P

Now, we give an overview of our implementation.
The same as in our previous work, users have to specify
the area for small CA models. As shown in Figure.3(a), we
set a billboard for each nx×ny surface. After modeling and
rendering, we can get realistic 3D cloud (Figure.3(b)) and
can simulate perfect effect for helicopter flying in and out
the clouds(Figure.4). Based on Visual studio 2005, we
implement the visual system by Open Scene Graph on a

I0

Figure.2 Light traveling through a cloud
Pb

I sc = I s ∫ Sc (θ ) exp(−τ ( Pc, l ) − τ (l , Pa))dl
Pa

(9)

In (8), (9) Ex and Sc (θ ) is the extinction coefficient
and scattering coefficient. Because we simulate the cloud,
the particles in cloud are large and Mie scattering
predominates. The extinction and scattering coefficients
does not show the same selectivity with respect to
wavelength as in Rayleigh scattering and are often
assumed to be independent of wavelength. Because of its
complexity, the details of Mie scattering theory is beyond
the scope of this work. So we use the parameters get
from[7]. According to[7], the Mie extinction coefficient
per kilometer for a typical cloud is
Ex = 16.33
(10)
The Sc (θ ) cited in [10] is
Sc (θ ) ∝

3(1 − g 2 )
(1 + cos 2 θ )
2
2(2 + g ) (1 + g 2 − 2 g cos θ )3/ 2

(11)

5
⎛ 4 25 ⎞
g = u − ⎜ − u 2 ⎟ x −1/3 + x1/3
9
⎝ 3 81 ⎠

(12)
1/ 2

5
125 3 ⎛ 64 325 2 1250 4 ⎞
x= u+
u +⎜ −
u +
u ⎟ (13)
9
729
2187 ⎠
⎝ 27 243
Where u varies from 0.7 to 0.85. However, this
function is very complex, and the calculation will take
many rendering times. So it’s not suitable for our real-time
running system. [16] used a simpler Rayleigh scattering
phase function and got good visual results. So this paper
uses the phase function in [16]for scattering coefficient
calculation.
Sc (θ ) = 3 / 4(1 + cos 2 (θ ))
(14)
Where θ is the angle between the incident and
scattered directions.

Figure.4 Helicopter in and out cloud

172

common PC with Intel Core Duo E8200, RAM 2G, Nvidia
Geforce 9800 GX2 graphics card.
We take Dalian Port for our cloud scene test area. The

immersion effect and depth due have been improved
greatly.

Conclusion

Table.1 Test results of 3D cloud in Dalian port
Model
cells Numbers.

Cloud
Pieces

Resolution

Frame
Rate(fps)

20×20×20
20×18×15
20×18×15
20×18×15
20×18×15

1
3
5
8
20

1280*1024
1280*1024
1280*1024
1280*1024
1280*1024

58~62
50~55
36~42
20~25
2~7

In this paper, we render 3D cloud for MASRES visual
system physically. Based on our previous work,
interaction between cloud and light is implemented and
get a more realistic result. After the 3D cloud being
integrated, the test results show that the visual system of
MASRES can run in real-time and has a relatively higher
frame rate. For the future work, various cloud kinds and
shapes should be generated, special effects such as sunrise,
sunset, light shaft, lightning should be rendered under a
higher frame rate.

region of simulation is 9000m × 8100m. After loading
land, port buildings, ships, helicopters, and dynamic sea
surface with shallow water waves which is implemented in
[19], the whole MASRES visual system runs at frame rate
of about 65~70fps. After generating different pieces of
cloud, we got the experimental results showed in Table.1.
As we see, if we place 5~8 pieces of clouds in our visual
scene, the whole system can run well in real-time. So the
clouds generated by our method in this paper are very
suitable for the visual scene system in Marine Search and
Rescue Simulator. Figure.5 shows the visual scene
contrast for using the cloud rendering method before and
after. In these pictures, the scene is more realistic and the

Acknowledgements
We would like to thank the anonymous reviewers for their
helpful suggestions and comments, and also thank the support by
the National Basic Research Program of China (973 Program)
(No. 2009CB32080X).

References
[1]

YiCheng Jin, Yin Yong, and Zhang Xianku, "Study on the
System Scheme of Marine Search and Rescue Simulator".
International Navigation Simulator Lecturers' Conference,
pp. 10, 2008
[2] Helong Shen, Yin Yong, and Li Yongjin, "Real-time
Dynamic Simulation of 3D Cloud for Marine Search and
Rescue Simulator". The 7th ACM SIGGRAPH
VRCAI2008, pp. 1-5, 2008
[3] Y. Dobashi, Kaneda K., Yamashita H. et al., "A Simple,
Efficient Method for Realistic Animation of clouds". SIGGRAPH
2000, pp. 19-28, 2000
[4] Y. Dobashi, Nishita T., and Okita T., "Animation of
Clouds Using Cellular Automaton". CGIM'99, pp. 251-256
1999
[5] Y. Dobashi, Nishita T., and Yamashita H., “Using
metaballs to modeling and animate clouds from satellite
images,” The Visual Computer, vol. 15, no. 9, pp. 471-482,
1999.
[6] A Bouthors, Neyret F, Max N et al., "Interactive multiple
anisotropic scattering in clouds". 2008 symposium on
Interactive 3D graphics and games pp. 173-182, 2008
[7] D Deirmendjian, “Scattering and polarization properties of
water clouds and hazes in the visible and infrared,”
Applied Optics, vol. 3, no. 2, pp. 187-196, 1964.
[8] Mark Jason Harris, “Real-Time Cloud Simulation and
Rendering,” The University of North Carolina at Chapel
Hill, 2003.
[9] Kajiya J.T., and BP Von Herzen, “Ray tracing volume
densities,” Computer Graphics, vol. 18, no. 3, pp. 165-174,
1984.
[10] T Nishita, Sirai T, Tadamura K et al., "Display of the earth
taking into account atmospheric scattering". SIGGRAPH
1993, pp. 175-182, 1993
[11] D. Overby, Melek Z., and Keyser J., "Interactive
Physically-Based Cloud Simulation". 10th Pacific
Conference on Computer Graphics and Applications
(PG'02), pp. 469, 2002

(a) Old cloud scene

(b) New cloud scene

Figure.5 Contrast of old and new clouds

173

[12] J. Stam, and E.Fiume, "Dipicting Fire and Other Gaseous
[13]
[14]

[15]

[16]
[17]
[18]
[19]

Phenomena Using Diffusion Processes". SIGGRAPH 95,
pp. 129-136, 1995
J. Stam, and Fiume E., "Turbulent Wind Fields for
Gaseous Phenomena". SIGGRAPH 93, pp. 369-376, 1993
Y. Dobashi, Kusumoto K., Nishita T. et al., "Feedback
Control of Cumuliform Cloud Formation based on
Computational Fluid Dynamics". SIGGRAPH2008, pp.
Article 94, 2008
Mark J. Harris, III William V. Baxter, Scheuermann
Thorsten et al., “Simulation of Cloud Dynamics on
Graphics Hardware,” Graphics Hardware, pp. 92-103,
2003.
Mark J. Harris, and Lastra Anselmo, "Real-Time Cloud
Rendering". Eurographics 2001, pp. 76-84, 2001
K. Nagel, and Raschke E., “Self-organizing Criticality in
Cloud Formation,” Physica A, pp. 519-531, 1992.
Y. Dobashi, Nishita T., Yamashita H. et al., "Modeling of
Clouds from Satellite Images Using Metaballs". Pacific
Graphics'98, pp. 53-60, 1998
Yongjin Li, Yong Yin, and Shen Helong, "Simulation of
Shallow Water Wave in Coastal Region for Marine
Simulator". The 7th ACM SIGGRAPH VRCAI2008, pp.
6-10, 2008

174

