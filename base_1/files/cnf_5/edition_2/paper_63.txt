2009 Sixth International Conference on Computer Graphics, Imaging and Visualization

Enhanced Algorithm for Extracting the Root of Arabic Words

Sameh Ghwanmeh

Saif Rabab'ah

Yarmouk University,
Irbid 211-63, JORDAN
sameh@yu.edu.jo

Al-al-Bayt University
Almafraq, JORDAN
rshalabi@aabfs.org

Riyad Al-Shalabi, Ghassan Kanaan
Arab Academy for Banking and Financial Sciences
Amman , JORDAN
rshalabi@aabfs.org
Another reason for using stemming is that the words in the
user query often do not exactly match the words in the
relevant documents because of the differences between them
in affixes of all kinds. This variation also gives rise to very
large index structures with resulting poor performance. All
these reasons make stemming especially important in Arabic
IR. Four different approaches to Arabic stemming can be
identified [7]:
- Manually constructed dictionaries
- Algorithmic light stemmers
- Morphological analyses
- Statistical stemmers
Most stemming algorithms concentrate only on
eliminating prefixes and suffixes. One light stemmer, for
example,
identified one set of prefixes and one set of
suffixes that should be removed based on the grammatical
functions of the affixes [1]. Statistical techniques have
widely been applied to automatic morphological analysis in
the field of computational linguistics, but although such
systems can be used on many different languages which
cannot be expected to perform well on languages like
Arabic, in which suffixing is not the only inflectional process
[7].
In this paper, we have introduced an enhanced root-based
algorithm that handles the problems of affixes, including
prefixes, suffixes, and infixes depending on the
morphological pattern of the word and stripping affixes
without using any lists of manually written roots. Series of
simulation experiments have been conducted to test the
performance, accuracy and correctness of the proposed
algorithm.

Abstract— Stemming is one of many tools used in information
retrieval to combat the vocabulary mismatch problem, in
which query words do not match document words. Stemming
in the Arabic language does not fit into the usual mold, because
stemming in most research in other languages so far depends
only on eliminating prefixes and suffixes from the word, but
Arabic words contain infixes as well. In this paper we have
introduced an enhanced root-based algorithm that handles the
problems of affixes, including prefixes, suffixes, and infixes
depending on the morphological pattern of the word. The
stemming concept has been used to eliminate all kinds of
affixes, including infixes. Series of simulation experiments have
been conducted to test the performance of the proposed
algorithm. The results obtained showed that the algorithm
extracts the correct roots with an accuracy rate up to 95%
Keywords- Information Retrieval; Stem; Suffix;, Prefix;
Infix; Affix; Root; Stopword

I.

INTRODUCTION

Arabic words are divided into three parts of speech:
noun, verb, and particle. Nouns and verbs are derived from a
closed set of around 10,000 roots. The roots are commonly
three or four letters and are rarely five letters. The number of
unique Arabic words (or surface forms) is estimated to be
about 6 x 106 words [5]. Because of the complex
morphological structure of the Arabic language, several
studies have been carried out to improve the processing of
Arabic words to get efficient stemming results in Arabic
Information Retrieval systems.
Information Retrieval (IR) deals with the representation,
storage, organization of, and access to information items.
The representation and organization of the information items
should provide users with easy access to the information in
which they are interested. Unfortunately, characterization of
the users’ information-need is not a simple problem [9].
Arabic information retrieval has a particularly acute need for
effective normalization and stemming. Both orthography and
morphology give rise to a huge amount of lexical variation,
so that a given word can be found in a huge number of
different forms [7]. This would increase the size of indexing
structure and decrease the performance of the system.
978-0-7695-3789-4/09 $25.00 © 2009 IEEE
DOI 10.1109/CGIV.2009.10

II.

ARABIC LANGUAGE PROBLEMS

There are many problems in the Arabic language such as:
x A word may have several meanings, depending on
its position within the text, so that it is ambiguous,
like the word (Ϧϴϋ).
x
Several words like (ΔΒγϮΣ ˬΔΒγΎΤϣ ˬΏϮγΎΣ ˬΐδΣ....),
have the same root in spite of their difference in
meanings.

388

x
x

x

x

Khoja [6] designed and implemented a stemmer
algorithm, which uses the morphological patterns to detect
roots of three or four letters. Khoja’s algorithm starts by
removing the suffixes, prefixes, and infixes of a given Arabic
surface word. After every elimination process, the algorithm
checks whether the removed affixes are part of the Arabic
root or they are additional letters added in the derivational
process. The resulting stem is then checked for correctness.
If any original letter is stripped out, the entire affix is
returned to the word. Finally, it matches the remaining letters
of the given Arabic root against list of patterns of the same
length to extract the root. The algorithm can process any
Arabic surface form, vowelized and nonvowelized. The
prepositions, pronouns, conjunctions, interjections, and a list
of Arabicized words are ignored while processing. An
additional step is performed to verify whether the extracted
root is valid. This step checks the extracted root against a list
of roots. The list consists of about 3800 trilateral and 900
quad literal roots. If it is found, then the extracted root is
preserved. The root algorithm based on the work of Khoja,
which is considered as an aggressive stemmer, has shown
performance superiority over a surface-based (no stemming)
approach. The difference in performance between the root
algorithm and the Arabic surface word approach is
statistically significant [8].
Al-Shalabi, Kanaan, and Muaidi [3] designed and
implemented a stemmer to find the roots of Arabic words by
assigning numeric values to the word’s letters, and perform
some calculations on these values to extract the roots. The
algorithm extracts the correct roots with an accuracy rate
reaching 95%.

Some words may be derived from more than one
root like the word "νΎϳήϟ΍, which has two roots
(" ξϳέ" ,"ν΍έ ").
The processes of exchange ( ϝ΍ΪΑϹ΍ ) which depends
on a phonetic rule rather than a syntactic, like the
word "ϡΎϴϗ" where the root is "Ϣϴϗ" but in this case
the letter "ϱ" must be exchanged to "΍" so that the
root becomes "ϡΎϗ". We must say here that the
exchange does not occur only with the vowels ( ˬϭ ˬ΍
ϱ), but it also occurs with other letters like in the
word "ρ΍ήδϟ΍" which is converted to " 10] "ρ΍ήμϟ΍ ].
Some words in the Arabic language that begin with
"ϭ" or "Ώ" are ambiguous words, because in some
cases these letters are part of the original root of the
word as in "ΙϮΤΑˬΩϮΟϭ" but in other cases they
represent a prefix as in "ϢϬϟ΍ΆδΑˬϢϬϠΘϗϭ".
When one letter of the pattern for the word is
deleted this affects the resulting root, as with: (ϯ΃έ).
In this word we delete (΃ ) in the present and
imperative tenses, so that the present tense of this
word must be (ϯ˴΃˸ήϳ˴ ) which has the pattern (Ϟόϔϳ),
) should be deleted (for
but the letter (΃
morphological reasons) and this l affect its pattern
so that letter (ω) is deleted before? (΃ ). So the
˵ ϔ˴ ϳ˴
present tense will be (ϯήϳ) and its pattern is ( (Ϟ
Examples
include:
11] ].
( ϲόϓ΍..ϲϣέ΍),(΍Ϯόϓ΍..΍ϮϋΩ΍),(ϥϮόϔϳ..ϥϮόδϳ ).
III.

LITERATURE REVIEW

Previous research papers and published books discussed
the relationship between the root and the morphological
patterns. One of these important Arabic books, entitled [10]
"ϑήμϟ΍ ϢϠϋ ϰϟ· ϞΧΪϤϟ΍" ,says that, “because most words in the
Arabic language have trilateral roots, the morphological
experts consider that the origins of Arabic words are three
letters in length. For this reason, if we want to balance stem?
A word to discover its root, we have to replace its original
letters by the letters of the Arabic word (Ϟόϓ). But when the
length of the word is greater than three characters, we
replace the original letters of the balanced word by the letters
of (Ϟόϓ), and the additional letters are replaced by the
pronunciation
as
with
( ,(Ϟόϔϧ΍..ϊτϘϧ΍),(ϞϋϮϓ..ήϫϮΟ
10] ”(ϞόϔΘγ΍..ΝήΨΘγ΍) ].
The Al-Shalabi [2] developed and implemented an
algorithm for finding the roots of Arabic words. This
algorithm can be summarized as follows:
x Remove the longest prefix that precedes the first
root letter in the input word.
x Denote the new word formed in step 1 by newword, the root letters of a given word will be
within the new-word, in fact they will be within
the first four or five letters.
x Check the first, second and third letter of the
new-word to see whether it is in the root list or
not.
x If not, check the other possibilities of the
trigram formed by the first, second and fourth
letters and so on.

IV.

DESCRIPTION OF THE PROPOSED ALGORITHM

The proposed algorithm can be described in the
following 15 steps:
1.
Check the length of the input word, if the
length is greater than three letters, then go to
step 2, otherwise the word could be a root or a
stopword.
2.
If the first two letters are "ϝ΍" then remove
them
3.
Replace the · ˬ΃ letters with ΍
4.
While the length of the word is greater than or
equal to six letters, recursively remove the
following suffixes: Ϣϛˬ Ϧϛˬ ϢΗˬ ϦΗˬ Ϧϳˬ ϥ΍ˬ Ε΍ˬ ϥϭ
Ύϫˬ Δϳˬ Ϣϫˬ ΎϧˬΎϣˬ ΍ϭˬ ϲϧˬ Ύϳˬ Ϧϫˬ. as in the word
"ϥϮϠϤΤϳ ".
5.
If the length of a word is greater than or equal
to six letters, remove the following prefixes: ϝΎϛ
ϝ΍ϭˬ ϝΎϣˬ ϝΎϓˬ ϝΎΑˬ. as in the words " ϝΎτΑϷΎϛ
ϑϮϴδϟΎΑˬ".
6.
If the length of a word is greater than four
letters remove the following two letter
prefixes:Ζγˬ ϲγˬ Ϧγ. Like in the words " ϞϤΤϨγ
ϲϣήΘγˬ".
7.
If the length of a word is greater than three
letters, and it starts with the letter "ϝ" then
remove this letter, as in the words "ϝ΄δϴϟˬ ϞΘϘϴϟ".

389

8.

9.

10.
11.

•

•

12.
•
•
•
13.

14.

•
•
•

If the length of a word is greater than three
letters, remove the following letters suffixes (if
found):ϩˬ Εˬ Γ. as in the words " ΔϣΰϠϣˬ Ζϟ΄γ
Ϫϴϣήϟˬ".
If the length of a word is greater than three
letters, remove the following letters prefixes
(if found):ϱˬ Ε. Like in the words " ϞϤΤΗ
ζϗΎϨϳˬ".
If the length of a word is greater than or equal
to four letters and the last letter is "΍", then
remove it. Like in the words ""ΎΘϗήγˬ ΎϨϟ΄γ .
The remaining letters of the word are matched
against a list of patterns which are stored in a
file, the selected pattern must has the same
length of a word, then we start matching letter
by letter as follows:
Compare the word with the pattern with the
same length, we check if the letters in the
word match the letters " ω", "ϝ " or "ϑ" in the
pattern. If so, we keep these letters and we
consider them as original letters in the root,
otherwise we remove these letter from the
word. For example in the word " ϝΎΘϗ" and the
pattern " ϝΎόϓ", we keep the letter " ϝ " and
remove the letter " ΍ ", and the root will be the
word "ϞΘϗ".
If some letters in the word and in the pattern in
the same position are not identical, then we
add these letters to the root, like in the word "
ΐγΎΤϣ " and the pattern " ϞϋΎϔϣ ", and the root
will be the word "ΐδΣ".
Check the number of identical letters between
the word and the selected pattern, we refer to
the number by the variable SIM:
If the length of original word is 4, then length
of SIM must be 1 as in the word "ΐΘϜϳ".
If the length of original word is 5, then length
of SIM must be 2 as in the word "ϝϮΘϘϣ".
If the length of original word is 6, then length
of SIM must be 3 as in the word ήϜϨΘγ΍"".
If none of the above rules in step 12 are
satisfied, then the selected pattern is not true,
go to step 11 and choose another pattern,
otherwise the root is found.
The resulting root must be processed. The
processes are not always accurate because
some of these processes do not depend on a
defined rules; they depend on what we call
exchange "ϝ΍ΪΑϹ΍", which means that
exchanging a letter in a root with another letter
either a vowel or non-vowel, for example:
If the root begins with letter "΅" or letter "΁ "
then replace it with the letter "΃ " as in the
words "Ϟϛ΂Ηˬ ΪϛΆϳ"
If the second letter in the root is "΅ "or "Ή"
then replace it with " ΃ " like as the words
"Ϟ΋Ύγˬ ϝϭΆδϣ".
If the last letter in the root is the letter "Ε"
then replace it with the letter " Γ "."".

15.

Additional steps are added to algorithm to
ensure as far as possible that the input word is
not an Arabic word, like the word "ΔϴϧϭήΘϜϟϹ΍".
These words are returned as is without any
processing.
V.

RESULTS AND DISCUSSION

The proposed algorithm handles the problems of affixes.
Patterns play a big role in a process of extracting the root of
the word, each word has its own pattern as in
" ϥϮϠόϔΘϳ..ϥϭήϜϔΘϳ ,", each letter in the word that replaces the
letters ϝˬωˬϑ in the pattern is considered as original letter
and added to the root. The system was designed to accept
input from a file or it can analyze one word at a time. Words
that the algorithm fails to analyze are normally foreign
words, irregular words or words that do not have trilateral
roots. A corpus of 242 abstracts from the Proceedings of the
Saudi Arabian National Computer conferences in machinereadable form is used in the testing procedure. The set of
abstracts was chosen randomly from the corpus for analysis.
Series of simulation experiments have been conducted to test
the performance of the proposed algorithm. The results
obtained showed that the algorithm extracts the correct roots
with an accuracy rate up to 95%. The efficient results have
provided a good step in the process of minimizing the size of
index structure. Sample of the outputs of are shown in Fig.1
and Fig. 2.

Figure 1. Sample output for one word.

Figure 2. Sample output for an input file.

390

VI.

REFERENCES

CONCLUSION

An enhanced algorithm based on the roots of the Arabic
word has been presented. The paper describes a new
algorithm to extract Arabic roots for Arabic words. The
algorithm is written with the goal of supporting natural
language processing programs such as parsers and
information retrieval systems. The algorithm has been tested
using thousands of Arabic words taken from a corpus of 242
abstracts from the Proceedings of the Saudi Arabian National
Computer Conferences. Human expert judgment were used
to evaluate the results, the algorithm successfully extracts the
proper roots with accuracy reaches to about 95%. The
incorrect roots were analyzed and we found out that they
belong to either a stop words or foreign words or words
having a weak letters. As a future work we will try to modify
the algorithm in order to handle the incorrect roots as much
as possible.

[1]

Aitao Chen, Fredric Gey, “Building an Arabic Stemmer for
Information Retrieval”, Proceedings of TREC 2002, Gaithersburg,
MD, pp. 631-639, 2002.
[2] Al-Shalabi, R., Evens, M., “A Computational Morphology System for
Arabic”, Workshop on Semitic Language Processing. COLINGACL’98, University of Montreal, Montreal, PQ, Canada,. pp. 66-72,
1998.
[3] Al-Shalabi, R., Kanaan, G., and Muaidi, H, “New Approach for
Extracting arabic Roots”, Proceedings of the International Arab
Conference on Information Technology. Alexandria, Egypt. pp. 123131, 2003.
[4] Hmeidi, I., Ghassan K., Evans, M., “Design and Implementation of
Automatic Indexing for Information Retrieval with Arabic
Documents”, Journal of the American Society of Information
Science, 48 (10): 867-881, 1997.
[5] Kareem Darwish, “Building a Shallow Arabic Morphological
Analyzer in One Day”,
Proceedings of the
Workshop on
Computational Approaches to Semitic Languages, University of
Maryland, College Park, MD, 2002.
[6] Khoja, S., "Stemming Arabic Text", Lancaster, U.K., Computing
Department,
Lancaster
University,
www.
comp.lancs.uk/computing/users/khoj aJstemmer.ps, 1999.
[7] Leah S. Larkey, Lisa Ballesteros, Margaret E. Connell, “Improving
Stemming for Arabic Information Retrieval: Light Stemming and Cooccurrence Analysis”, Proceedings of the 25th SIGIR, Tampere,
Finland, pp. 275-282, 2002.
[8] Mohammed Aljlayl, Ophir Frieder, “On Arabic Search: Improving
the Retrieval Effectiveness via a Light Stemming Approach”, ACM
Eleventh Conference on Information and Knowledge Managemen
(CIKM), McLean, VA,: pp. 340-347, 2002.
[9] Ricardo Baeza-Yates & Berthier Ribeiro-Neto, “Modern Information
Retrieva", Reading, MA; Addison Wesley, 1999.
[10] ”ϖϴΘϋ ΰϳΰόϟ΍ ΪΒϋ έϮΘϛΪϟ΍ ,ΔϴΑήόϟ΍ ΔπϬϨϟ΍ έ΍Ωˬ "ϑήμϟ΍ ϢϠϋ ϰϟ· ϞΧΪϤϟ΍ ” , 1991.
[11] " ,ϲΤΟ΍ήϟ΍ ϩΪΒϋ έϮΘϛΪϟ΍ ,ΔϴΑήόϟ΍ ΔπϬϨϟ΍ έ΍Ωˬ ˬ "ϲϓήμϟ΍ ϖϴΒτΘϟ΍ “, 2004.

ACKNOWLEDGMENT
The authors gratefully acknowledge and highly
appreciate the financial support and the remarkable resources
provided by Yarmouk University, Irbid, Jordan

391

