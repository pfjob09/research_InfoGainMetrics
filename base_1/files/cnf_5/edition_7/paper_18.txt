A novel approach to cartoon style rendering of an image with an approximated
crayon texture
Priti Sehgal
Keshav Mahavidyalaya,
University of Delhi
Delhi –110035
Email: psehgal25@rediffmail.com

P. S. Grover
Department of Computer Science,
University of Delhi,
Delhi-110007
Email: groverps@hotmail.com

Abstract

is the current trend in the research in NPR. Curtis et al. [8]
described a detailed simulation model for watercolor with
its painting style. Winkenback et al. [9] emulated the pen
and ink rendering style. Sousa et al. [7] simulated the
drawing materials such as graphite pencils, drawing paper,
blenders and erasers to develop drawing primitives such as
pencil strokes and mark making to create tones and
textures. Majumdar et al. [12] simulated the effect of
smudging charcoal on paper. They proposed a method to
generate a simple charcoal drawing. Murakami et al [3]
generated pastel strokes with pastel pigments to obtain
pastel drawing like image. They produced the pastel
drawing like texture by focusing on the attributes of the
pastel pigments and its interaction with paper. Recently,
Dave et al. [14] had simulated the model of wax crayons
for interactive stroke-based drawing applications. In their
model the crayon evolves as it interacts with the paper.
They calculate the amount of deposited wax using various
parameters. They also consider the smearing of previously
deposited wax. They rendered the distributed wax by
Kubelka-munk model. Another area of NPR study is
cartoon style rendering, that means rendering the objects in
a manner similar to that found in cartoons and comic
books [2]. Cartoons have an expressive quality to convey
mood and emotion, which allows the viewers to
immediately relate to the subject. There are several cartoon
style rendering algorithms available till date that provide
different forms of cartoon shading [5]. The cartoons
generally attract children, and amongst the colors, kids are
normally fond of crayons. So we had tried to merge these
two NPR techniques to make the cartoons more attractive.
For the sake of completeness, we present an overview of
the earlier work in Section 2, highlighting the limitations,
and discuss the new and improved algorithm in Section 3.

In this paper we present an efficient approach to cartoon
style rendering of an image with an approximated crayon
texture. The algorithm generates a crayon texture map,
with two crayon textures (illuminated color texture and
shadowed color texture) combined into one. The crayon
texture is generated using crayon stroke generation
technique. The texture is then mapped onto the image in
cartoon style using per-vertex mapping concept. This
algorithm results in an improved transition boundary
between the two texture colors, comparable to the normal
cartoon shaded image without crayon texture. If the image
generated by this algorithm is animated, then the
transition boundary would move logically with the object
as compared to our earlier algorithm (described in the
text), where transition boundary changed drastically with
slight movement of an object in the image. The present
approach can be used to generate variations in cartoon
shading easily and efficiently. We have also attempted to
approximate the effect of distribution of wax in the
resulting image.

1. Introduction
In computer graphics, non-photorealistic rendering
(NPR) is an interesting area of study [10,11]. NPR brings
art and science together by concentrating less on the
process and more on communicating the content of the
image. Generally, 3D computer graphics tools can design
approximate realistic photographic models. One of the
goals of NPR is to expand the artistic rendering styles to
create images and animations. In other words, NPR
provides techniques to combine the expressivities of
natural media with flexibility of computer graphics.
Simulation of a particular dry medium by devising new
techniques, algorithms and models and use them in
rendering of various representations of objects and images

2. Previous Work
Murakami et al. [3] presented an NPR technique to
generate pastel-like computer graphics image. In this

Proceedings of the International Conference on Computer Graphics, Imaging and Visualization (CGIV’04)
0-7695-2178-9/04 $20.00 © 2004 IEEE

technique they produced pastel drawing-like texture by
focusing on the attributes of pastel pigments and the
relationship between paper and pigments. They created
pastel strokes of different type and then used these strokes
to color an image. In our previous paper [4], we have used
these strokes to create a texture to render an image in
cartoon style. A crayon color contains the pastel pigments,
which when used on the paper; adhere to the high adhesion
parts of the paper in response to the pressure on the pastel.
Murakami et al. [3] described a pastel stroke generation
technique. They generated an interpolate stroke in the
direction of stroke vector. At the time of interpolation,
they defined the amount of pastel pigments to be applied to
the paper depending on the pigment holding capacity of
that part of the paper. In our previous work [4], we first
created a stroke texture image by a procedural texture
generation function [6] using a random number generator.
The pigment adhesion effect was considered later at the
time of mapping the texture on to the paper. That means
the value of a particular pixel in the crayon texture was
modified according to the pigment holding capacity of the
corresponding pixel in the paper texture. The stroke
texture and pigment holding capacity of paper texture are
summarized in Section 3. In this paper [4], we had
developed two crayon textures, one for illuminated diffuse
color and the other for shadowed diffuse color. The
textures were binded to a particular face of an image using
the cartoon style rendering algorithm [2]. Dave et al. [13]
simulation has not been used in our implementation since
that is basically for interactive stroke based applications
and our algorithm successfully generates an approximate
crayon texture (not exact) for cartoon style rendering
without much of complexity. The aim of showing an effect
of cartoon style rendering of crayon-textured image was
visible in the paper with the following drawbacks.
- Shape of transition boundary
Since the illumination is calculated per face, some
areas of the rendered image show unexpected results. The
transition boundary is not natural; rather it is polygonal
(triangular in case of triangle mesh). It means that
transition from one color to another color is taking place
only at the edges of the faces of the image. This effect is
clearly visible if there is smaller number of faces in an
image. See for example the cubes in Figure 1, where every
face of the cube is divided into two triangles each. Hence
we will get either half of the face or full face of e cube
shaded with one particular color.
- Space for the number of crayon textures required
It was suggested by Lake et al. [2] that one texture map
each would be required for every material (diffuse material
color) used in the cartoon coloring. But in the algorithm
we are using two textures instead of a texture map. A
crayon texture used, should be of minimum size 128x128
pixels, otherwise we will not be able to get the perfect
effect of the crayon texture due to filtering while texture

mapping. That means the memory requirement would
increase with increasing number of diffused material
colors used in a particular image.

Figure 1(a-n): Frames of the animated cube generated by previous
algorithm

-Animation of the image produced by the above
algorithm
Now, let us see whether the previous algorithm works
in animations. We animated the cartoon rendered cube
with crayons, by spinning it about x-y plane. Figure 1(a-n)
shows the different frames of the spinning cube. The
transition boundary between the different shades of the
cartoon should move along with the object in the
animation. Frames in Figure 1 (a-h) shows the results as
expected. Figure 1(i) and Figure 1(m) show a drastic
change in the transition boundary from their previous
frames. This is an undesirable aspect of any animation.
The reason for this kind of change is per-face mapping of
the texture. Another reason is that, we are not considering
the exact positions of the object and exact light position for
lighting calculation; just the face normal and light
direction is used in the calculations.

3. A new approach to cartoon style rendering
of an image with an approximated crayon
texture
This section gives a step-by-step description of the
proposed algorithm.

3.1 Creation of a crayon texture map
3.1.1 Crayon texture generation
Firstly, a crayon texture is generated. One of the
methods to simulate the effect of dry media is through

Proceedings of the International Conference on Computer Graphics, Imaging and Visualization (CGIV’04)
0-7695-2178-9/04 $20.00 © 2004 IEEE

Procedural textures. These textures are generated with
mathematical functions rather than being hand-drawn by
an artist. Many of the procedural textures have been
generated through Perlin Noise functions [6]. We have
been able to achieve the effect of a crayon by a simple
stroke generation technique [3] using a random number
generator as in the previous algorithm [4]. A stroke texture
is created by first generating a basic line stroke by
interpolating between the points on the line randomly [4].
Same strokes are then created above and below the basic
line stroke till the width of the texture [4]. The most
important thing to take care in this case is the chosen
random number. Improper random number may lead to
undesirable results. The algorithm for stroke texture
generation is summarized below.
Stroke Texture: The following steps are used to create
a stroke texture:
- Consider two points, origin and endpoint, which
define a basic line.
- Divide this line into fixed length dl by placing
points in between.
- Give a blur to this line by randomly displacing
the points (by using a random number generator)
- Interpolate between the points in the basic line.
This will generate in between points based on
linear interpolation, the constant for which is
chosen randomly for every pair of vertices.
- Next to create a texture, same strokes are created
above and below the basic line stroke, this
process is repeated till the width of the texture,
with random values of in between points. We can
also modify the texture to create vertical strokes
or slanted strokes.

hmin is the minimum of 4 height fields of a paper
grain
m and pi are constants, and m is not necessary and
can be omitted
Much of the complexity of the paper model [7] has not
been considered in our algorithm. Since we need to
reflect cartoon shading with crayons we have used a
simple equation [Eqn 2] to define pigment holding
capacity or adhesiveness of the paper [4] and are able to
achieve the desired results.
Pi = 0.75 * (hmax - hmin)

(2)

To achieve the effect of crayon on the paper, we had
first created a crayon texture (Section 3.1.1) and then the
value of a pixel in the crayon texture was modified
according to the pigment holding capacity of that pixel [4].
That means the color of the pixel is darkened/lightened
depending on the value of pigment adhesion of the pixel.
3.1.3 A Crayon Texture map
In a cartoon shading algorithm, we create a color
texture map, which can be of two-three colors, generally
two; one is the illuminated color and the other the
shadowed color [2]. In our earlier algorithm [4], we used
two-three textures depending on the colors in the texture
map, unlike that; here we create a crayon texture map as
suggested by Lake et al. [2]. The illuminated and diffuse
colors of the cartoons are calculated using the following
equations [Eqn 3, Eqn 4].
ci = ag * am + al * am + dl * dm

3.1.2 Crayon texture on Paper Model

(3)

The texture of the papers used in the pastel drawings as
support media is one of the most important elements that
need to be considered. The paper unevenness determines
the adhesiveness of the paper. We have represented paper
as a height field with all heights between 0 and 1 as
defined by Sousa and Buchanan model [7] with slight
changes, as in our previous algorithm [4]. Each pixel on
the screen (considered to be a paper) is surrounded by four
height fields. The pigment holding capacity of a pixel (or
paper grain) is defined by these height fields. Initially, our
algorithm randomly generates the height fields. Pigment
holding capacity as defined in [7] is defined as below
[Eqn 1] .
Pi=500+2500*(|tan-1(hmax–hmin)|*4/pi)m

hmax is the maximum of 4 height fields of a paper
grain

(1)

Here, Pi is the pigment/Lead (in case of Pencil) holding
capacity,

cs = ag * am + al * am
(4)
Here, ci is the illuminated color,
cs is the shadowed color,
ag is the coefficient of global ambient light,
al is the coefficient of diffuse light,
am is the ambient coefficient of the objects material
and
dm is the diffuse coefficient of the objects material
These two colored textures are obtained by modifying
the RGBA values of the generated crayon texture in
Section 3.1.1 with calculated values [Eqn 3 and Eqn 4].
First half of crayon texture map is filled with illuminated
colored crayon texture and the second half is filled with
the shadowed colored crayon texture. Another black
colored crayon texture is also created for outlines.
Increasing or decreasing the illuminated or shadowed part
of the texture map can provide the variations in the

Proceedings of the International Conference on Computer Graphics, Imaging and Visualization (CGIV’04)
0-7695-2178-9/04 $20.00 © 2004 IEEE

cartoon shading. Shadow and highlight texture map may
also be created in which three colors are used instead of
two. In this type of texture map, small part of the
illuminated texture map is filled with highlight colored
crayon texture. Figure 2 shows some of the variations of a
crayon texture map that can be created by our algorithm.
Figure 2(a) shows the two-tone texture map, which is half
shaded with illuminated color and half with shadowed
color. Figure 2(b) is again a two-tone map but with most of
it shaded with illuminated texture. Figure 2(c) shows
shadow and highlight texture map. All these texture maps
will have different effect on the image, which can be seen
in the later sections.

3.2 Cartoon Rendering
A non-photorealistic technique to render images in a
style similar to the one found in cartoons and comic books
is being studied extensively [5]. There are two main parts
of any cartoon style rendering algorithm – Cartoon
Shading and Outlining. We have already discussed in
section 3.1.3 that the cartoon shades are restricted to twothree colors. The texture used for cartoon shading has been
developed in Section 3.1. The use of the above texture to
render an image in cartoon style will be discussed below.

Figure 2(a) : 50%
illuminated color

Figure 2 (b): 75%
illuminated color

calculate the shade of every vertex. The shade implies the
illuminated or shadowed color of the cartoon. The shade of
every vertex of the image is calculated by the following
lighting equation [Eqn 5].
Coli = ag * am + al * am + {MAX (L.n , 0)} * dl * dm

(5)

Here Coli is the color of the vertex,
L is the unit vector from vertex to the light position
n is the unit vector normal to the vertex
This equation is the source of illuminated and diffuse
colors of the cartoon in Eqn 3 and Eqn 4. Since we have
already generated the 2D texture map, this equation helps
to choose a crayon color from the texture map. We
calculate MAX (L.n, 0) for every vertex and use these pervertex values as texture coordinates for the computed
texture map. This would provide us with one texture
coordinate while; the map generated is a 2D texture map.
Hence the following pseudocode is used for texture
mapping.
// pseudocode
for every face of the image
for every vertex (i) of the face
s = shade calculated for ith vertex using
MAX(L.n,0)
t = shade calculated for (( i +1) mod 3)th
vertex using MAX(L.n,0) (3 because face is considered
to be a triangle).
Here, s and t are the texture coordinates. These coordinates
are used because the boundary between lit and shadowed
colors of the image depends on the cosine of the angle
between light and normal vectors. This angle is provided
by the dot product L.n. The crayon-shaded texture created
in Section 3.1 is a longitudinal texture i.e. the total width
of the texture is divided into different shades. Hence, scoordinate of the vertex would determine the shade
calculated for that particular vertex and t-coordinate would
determine the shade calculated for the next vertex of that
face of an image. s-coordinate will index into a particular
crayon shade and the value of t-coordinate will help to
specify the location of transition boundary if the shade for
the next vertex is different. Once the texture coordinates
are provided, the indicated texture is interpolated between
the vertices according to the texture coordinates.

Figure 2 (c): shadow and highlight texture map
Figure 2: Variations of Crayon Texture maps

3.2.1

Per-Vertex shading calculation

Once the crayon texture map is created, the next task is
to map this texture on to the image in cartoon style. To
perform the shading of any image, first we need to

3.2.2 Texture Interpolation
The interpolation of the texture in this case may lead to
undesired results, if the two vertices of a triangle/face map
to same texture coordinates. This happens due to 3D
graphics API’s texture filtering modes. One mode chooses
the nearest texel to the pixel (“nearest”), while other
interpolates amongst the set of texels nearest to the pixel

Proceedings of the International Conference on Computer Graphics, Imaging and Visualization (CGIV’04)
0-7695-2178-9/04 $20.00 © 2004 IEEE

(“linear”). In both the modes, if the texture coordinates of
the two vertices of a face happen to be same, then the
corresponding face is mapped with constant color. Also, if
the texture selected for projection (through the texture
coordinates) on to the face of an object, is too small as
compared to the size of the face of the object, the result is
inaccurate due to texture magnification. Hence, the
computed texture coordinates are modified during
rendering as required. The algorithm works well for
slightly simplified meshes, but as the polygons grow larger
in size from increased simplification a perspective texture
distortion will become apparent across the interpolated
regions of each of the larger triangles. The texture
coordinates will be correct at the vertices, but will not be
interpolated correctly across the faces. This is due to
“double perspective” effect caused by texture mapping
from an image that has already been projected
(perspectively-correct). In order to properly map this
image back to the mesh geometry, we must unproject and
undue the original perspective mapping [1]. This problem
arises because we are assigning (s,t) texture coordinates to
vertex (x,y,0,1). In order to perform perspectively correct
texture mapping, we start with original vertex (x,y,z,1)
with texture coordinates (s,t,0,1), we transform the vertex
(x,y,z,1) by model view transformation and perspective
transformation to get (x’,y’,z’,w). We then transform this
homogeneous vertex into 3D normalized device
coordinates space through a perspective divide and get
(x’/w,y’/w,z’/w) with texture coordinates also divided by
w (s/w,t/w,0,1/w). Hence, now we draw the image with
modeling transformation as identity, projection
transformation to project the image onto the screen, vertex
coordinates supplied by (x’/w,y’/w,z’/w) and texture
coordinates supplied by (s/w,t/w,0,1/w). This results in
perspective correct texture mapping.

3.3

Drawing Silhouettes and outlines

Another important aspect of cartoon style rendering is
the black outlines of the image. The outlines can be
classified as – a Boundary edge (edge that is not shared
by two polygons), a silhouette edge (edge between a front
facing polygon and back facing polygon), a crease edge
(edge between two polygons when the angle between
them is greater than some threshold value) and a material
edge (edge shared by two polygons of different
material)[5]. The silhouettes and the crease edges are
detected by creating a hashed edge list as used in cartoon
style rendering algorithm by Lake et al. [2]. Silhouettes
are detected by computing dot product of two face
normals adjacent to an edge with the viewing vector and
comparing the product of these dot products with zero
[Eqn 6]. Crease edges are detected by comparing the dot
product of two face normals adjacent to an edge with
some threshold value [Eqn 7]. The outlines are also

crayon texture mapped; the color of the texture used is
black in this case.
(facenormal1.eyevector)*(facenormal2.eyevector)<=0 (6)
(facenormal1.facenormal2) > threshold value

(7)

Here, facenormal1 and facenormal2 are two face normals
adjacent to an edge and
eyevector is the viewing vector
The final result is displayed in Figure 3(c).

3.4 Enhancing wax distribution in an image
The resulting image in Figure 3(c) gives quite
convincing results with the exception that the effect of a
crayon texture is quite sharp. When we apply a crayon
stroke on the paper, the small amount of wax distributes
along the sides of the crayon stroke. To achieve such an
effect of distribution of wax, we have applied a slight
lateral blur to the final rendered image to get a hazy effect.
The result is shown in Figure 3 (d).

Figure 3(a): Cartoon style
Rendered cube with
a crayon texture using
previous algorithm [4]

Figure 3(b): Cartoon rendered
cube without a crayon texture

Figure 3(c): Cartoon style Rendered cube with
a crayon texture using our
algorithm

Proceedings of the International Conference on Computer Graphics, Imaging and Visualization (CGIV’04)
0-7695-2178-9/04 $20.00 © 2004 IEEE

Figure3 (d): Image generated Figure 3 (e): Image generated
using our algorithm
using shadow and
enhanced with wax
highlight texture map
distribution

Figure 4 (a-m): Frames of the animation produced by a spinning
cube generated using new approach

Figure3: Cartoon rendered Images with various effects

4. Animation
We animated the cube generated by this algorithm by
spinning it about X_Y plane. The frames of the animation
are shown in Figure 4. The drawback of our previous
algorithm as discussed in Section 2.0 has also been
rectified as can be seen in Figure 4 (a-m); the transition
boundary is not changing drastically with slight movement
of the object. The transition boundary changes more
logically.

5. Implementation and Results
We have implemented the above-developed algorithm
on PIII 1.3 GHz, with Intel 82810E Graphics Controller
card using Borland C++. The resulting image produced by
the algorithm is shown in Figure 3(c). Figure 3(a) displays
the same image produced by our previous algorithm [4]
and Figure 3 (b) displays the same image without the
crayon texture. As can be seen the transition boundary is
more natural in Figure. 3(c), closer to that in Figure 3(b).
The boundary in Figure 3(c) is achieved without further
subdivision of the faces of the polygon as suggested earlier
[4]. Thus time and space required for the subdivision is
saved and a natural boundary between the shades is
produced efficiently. Figure 3(d) shows the effect of wax
distribution in an image. Figure 3(e) displays the cube
generated by using shadow and highlight texture map.
Another improvement is that the transition boundary,
between the shades, changes along with the object as
desired, in case of animation as seen in Figure 4 (a-m).
There is no major change in the transition boundary with a
small rotation of the cube. Figure 5 displays some more
results of our algorithm. The algorithm works fine with a
complex image (more number of vertices and faces) as
shown in Figure 5. Some texture distortion can be seen in

Figure 5 (b). This problem occurs due to texture mapping
with hard constraints. The triangle mesh vertices in our
algorithm are constrained to have specific, computed (s, t)
coordinates. Eckstein et al. [14] have devised a technique
to provide a solution to this problem by introducing extra
vertices in the triangulation if needed. The solution
provided would rectify the problem at the cost of speed.
Since our algorithm does produce convincing results of
cartoon rendering with rough crayon coloring, we have not
adopted the provided solution but can be a part of future
research.

6. Conclusion
The comparison of the image produced by our algorithm
can be made with the image produced by the cartoon style
rendering algorithm [2] without the crayon texture. The
transition boundary in Figure 3(c) is very near to that in
Figure 3(b). So our algorithm is capable of generating
cartoon rendered images as if they are shaded with
crayons. The algorithm produces more realistic images
efficiently. Our algorithm can be enhanced to include more
than two shades in which case the texture map produced,
would be a combination of more than two textures. Also
we can show major or minor part of the image in shadow
by increasing or decreasing the shadowed texture part in
the texture map. Figure 3(e) shows the image produced by
variations of crayon texture maps discussed in Section
3.1.3. The drawback of our previous algorithm [4] as
discussed in Section 2 has also been rectified as can be
seen in Figure 4(a-m); the transition boundary is not
changing drastically with slight changes in the location of
the object. The images generated using the algorithms
proposed in this paper can add to the entertainment and fun
of computer graphics world. The cartoon films with crayon
colored cartoons would obviously prove to be beneficial
more attractive. The algorithms can be made more
efficient by using advanced graphics hardware accelerated

Proceedings of the International Conference on Computer Graphics, Imaging and Visualization (CGIV’04)
0-7695-2178-9/04 $20.00 © 2004 IEEE

rendering and multitexturing techniques. The images can
also be enhanced by adding shadows and crayon specular
highlights. These can be a part of future research in this
area.

Figure 5 (a): Human figure rendered using our algorithm

[3] K. Murakami, and R. Tsuruno, “Pastel-Like Rendering
Considering the Properties of Pigments and the Support
Medium” In SIGGRAPH 2002
pages.cpsc.ucalgary.ca/~mario/npr/bib/refs/00s/2002/murakami02.pdf
[4] P. Sehgal, and P. S. Grover, “Cartoon Style Rendering of
Crayon Textured Image”. Published in the proceedings of The
International Conference on imaging science, systems and
technology’03(CISST’03). Volume II , pp-685-689, 2003.
[5] P. Sehgal, and P. S. Grover, “study and Analysis of Cartoon
style Rendering algorithms”. Accepted for the publication in the
“Journal of Computer Society of India”,2003.
[6] K Perlin, “An Image Synthesizer”. Computer Graphics
(SIGGRAPH’85 Proceedings), v.19, pp 287-296, July 1985.
[7] C. M. Sousa and J. W. Buchanan, “Observational models of
graphite Pencil materials”, proceedings of Eurographics 1999.
[8] C. J. Curtis, S. E. Anderson, J. E. Seims, K. W. Fleischer
and D. H. Salesin, “Computer Generated Watercolor”, In
Siggraph 97 Conference proceedings (Aug 1997).
[9] G. Winkenbach and D. H. Salesin , “Computer-generated Pen
and Ink illustration”, In Proceedings of ACM SiGGRAPH 94,
pages 91-100,1994.
[10] B. Gooch and A. A. Gooch , “Interactive Non-Photorealistic
Rendering”, Department of Computer Science, University of
Utah,
www.cs.utah.edu/~gooch/NPRcourse_SIG99/NPRcourse_
sec10_gooch.pdf
[11] H. Winnemöller, ”Implementing Non-photorealistic
Rendering Enhancements with Real-Time Performance”
Master's thesis, Computer Science Department, Rhodes
University, February 2002.
[12] A. Majumdar and M. Gopi , “Hardware accelerated real
time Charcoal Rendering”. In Non-Photorealistic Animation and
Rendering 2002 (NPAR’ 02), Annecy, France.
[13] D. Rudolf, D. Mould, E. Neufeld, “Simulating Wax
Crayons”, 11th Pacific Conference on Computer Graphics and
Applications, 2003, pp 163- 173.
[14] I. Eckstein, V. Surazhsky, And, C. Gotsman, “Texture
Mapping with Hard Constraints”, Computer Graphics Forum 20,
3, pp 95—104, 2001.

Figure 5 (b): Fish rendered using our algorithm
Figure 5: Cartoon style rendering of images with crayon texture
using a new algorithm

7. Bibliography
[1] P. S. Heckbert, “Survey of Texture Mapping”, In IEEE
Computer Graphics and Applications, Vol. 6, no. 11,pp. 56-67,
1986.
[2] A. Lake, C. Marshall, M. Harris, and M. Blackstein,
“Stylized rendering techniques for scalable real-time 3d
animation”. In NPAR 2000: symposium on Non-photorealistic
Animation and Rendering, pages 13-20, 2000.

Proceedings of the International Conference on Computer Graphics, Imaging and Visualization (CGIV’04)
0-7695-2178-9/04 $20.00 © 2004 IEEE

