SIMILARITY MEASURE BASED ON OBBTREE FOR 3D MODEL SEARCH
Keitaro Kaku1 , Yoshihiro Okada1,2 , Koichi Niijima1
1

Graduate School of Information Science and Electrical Engineering, Kyushu University,
6-1, Kasuga-koen, Kasuga, Fukuoka, 816-8580, JAPAN,
{k-kaku, okada, niijima}@i.kyushu-u.ac.jp
2
Intelligent Cooperation and Control, PRESTO, JST

ABSTRACT
Recently the demand of 3D models has been growing
in the CG production and the video game industry.
Many 3D models have already been created and stored.
We need a 3D model database system that allows us
to retrieve required 3D models quickly and accurately.
In the design of 3D model database systems, there is
the question which feature of 3D models is suitable as
the similarity measure for 3D model searches. In this
paper, the authors propose the use of OBBTree for
the similarity measure and describe its usefulness by
showing its experimental results and comparison results with the recent major method called D2. The
proposed method showed better results than D2.
1. INTRODUCTION
In video game industry and movie production, there is
the great demand for 3D models and many 3D models have already been created and stored. We need a
3D model database system that allows us to retrieve
required 3D models from such a large database quickly
and accurately. To achieve this goal, it is necessary
to ﬁnd the best feature of 3D models as the similarity measure. Indeed, to ﬁnd the best feature is very
diﬃcult because 3D models have various shapes and
topologies. Even if some models belong to the same
class and have the same topology, it is not guaranteed
that they have the same 3D shape. We think there is
not only one perfect similarity measure that is available
for all kinds of 3D models because a certain similarity
measure good for some kinds of 3D models may not
be suitable for the other kinds of 3D models. Therefore, we think that among diﬀerent similarity measures,
one should be used adaptically according to the type
of a query 3D model. In this paper, we propose the
use of OBBTree [1] for the similarity measure and describe its usefulness by showing its experimental results
and comparison results with the recent major method
called D2 proposed by Osada et al [5]. Our proposed

method showed better results than D2. D2 is a 3D
model matching algorithm that uses the distribution
of distance between any two random points on the surface of a 3D model.
There are also some other researches on the 3D model
matching besides D2. Paquet and Rioux [6] proposed
a 3D model database system. This system manages
colored 3D models because it employs the color distribution in addition to the scale and the shape distribution as the similarity measure. As the similarity
measure based on local features of shapes, Hiraga et al
[2] proposed topology matching technique using Multiresolutional Reeb Graphs. Okada [3] proposed a 3D
model database system that uses the silhouette image
matching for 3D model searches and accepts the hand
sketch image query. He also proposed an intuitive interface for entering the query of the 3D model database
system [4]. As described above, each search method is
good for some kinds of 3D models but it is not good for
other kinds of 3D models. It is diﬃcult to say which is
the best method. In this paper, we propose the use of
OBBTree as one of similarity search methods because
it brings good experimental results as compared with
D2.
The remainder of this paper is organized as follows:
In Section 2, we brieﬂy describe OBBTree and the feature information using OBBTree of 3D models. Section
3 explains our similarity search method in more detail.
In Section 4, experimental results are shown to clarify
the usefulness of OBBTree as the feature information
for 3D model searches. Finally Section 5 concludes the
paper.
2. FEATURE INFORMATION USING
OBBTREE
OBBTree is a tree structure of tight-ﬁtting oriented
bounding boxes of a 3D model. Each node of OBBTree
is an oriented bounding box (OBB). Originally, OBBTree was proposed by Gottschalk, et al for the collision

Proceedings of the International Conference on Computer Graphics, Imaging and Visualization (CGIV’04)
0-7695-2178-9/04 $20.00 © 2004 IEEE

detection between two models. Each of the two models
has its own OBBTree. By traversing two OBBTrees
and testing for overlaps between their OBBs, it is possible to detect the collision between the two models. In
this way, OBBTree of a 3D model is treated as an approximation of a model shape. We propose the use of
OBBTree as the feature information of 3D models for
the similarity search. Each OBB, a node of OBBTree,
has a rectangular box shape. We represent OBBTree
as a tree each node of which is the center position of
a corresponding OBB of the OBBTree. We use such a
tree as the feature information of a 3D model for the
similarity search. Actually, the information of such a
tree is stored in a ﬁle, a feature information ﬁle. Figure
1 shows the example of OBBTree and Figure 2 shows
the contents of a feature information ﬁle. For more
details of how to build OBBTree, see the paper [1].

Fig. 3. Examle of regenerated model

Fig. 1. OBBTree

3. SIMILARITY SEARCH OF 3D MODELS
This section explains our 3D model search method.
Our method uses OBBTree of a 3D model to generate its feature information.
# Aspect ratio, P2/P1 and P3/P1
0.421179 0.318294
# Level
x,
y,
z
0
0
0
0
1 -0.228391 0.004380 -0.005147
2 -0.213318 -0.220427 -0.003792
2 -0.225427 0.220163 0.002092
1 0.219503 -0.009269 0.002935
2 0.20753 -0.222309 0.000263
2 0.217151 0.220835 0.000174

Fig. 2. A feature information ﬁle

Fig. 4. Normalized model

3.1.1. Initialization
We use the library provided by the authors of the paper [1] to build an OBBTree from a 3D model in our
program codes. This library generates OBBTree by
the distribution of polygons of a 3D model. However,
polygons of a model have diﬀerent area size. This affects generated OBBTree, that is, it is possible that two
OBBTrees generated from two diﬀerent representation
of the same shape model are diﬀerent if they consist of
the diﬀerent area size polygons. To solve this problem,
we regenerate a 3D model consisting of many small
triangle faces whose positions are determined by uniformly sampling vertices on the polygons of an original
model. Figure 3 shows one example model generated
by this way.
3.1.2. Normalization

3.1. Preparation
Indeed, we need initialization process and normalization process before generating the feature information.

Each model has an arbitrary orientation, i.e., its principal axes are diﬀerent from the principal axes of other
model. As the ﬁrst step of normalization process, each

Proceedings of the International Conference on Computer Graphics, Imaging and Visualization (CGIV’04)
0-7695-2178-9/04 $20.00 © 2004 IEEE

of all models must be rotated to have the same direction and size of its ﬁrst principal axis. Furthermore,
to make the same size of all 3D models completely,
each 3D model must be re-sized as its bounding box
is normalized into a cubic shape as shown in Figure
4. However, in this case, the information of aspect
ratio of a model is disappeared. This information is
one of the features very useful as the similarity measure. Therefore, we store this information in a ﬁle in
advance before the normalization process. This information will be used as one of the similarity measure
as explained later. After the normalization process, we
specify max level to create feature information ﬁles for
all models. max level means the level of leaf nodes of
the OBBTree, that is, the height of the OBBTree. The
level of a root node is zero.

Fig. 5. Matching algorithm

3.2. Similarity measure
We use two similarity measures. One is the aspect ratio of models and the other is the OBB’s position information of their OBBTrees. Using two measures, we
calculate an error between model A and B. This error
value means dissimilarity between them.
3.2.1. Error for aspect ratio between two models
The following equation means an error between two
3D models concerning their aspect ratios. We use the
Euclidean distance as the error.

×
Ea =

B2
A2
−
A1
B1

2

+

B3
A3
−
A1
B1

2

(1)

Here A1 ,A2 and A3 are respectively the ﬁrst, second
and third principal axis length of model A. B1 ,B2 and
B3 are those of model B. Actually, two values in the
2
ﬁrst column of the ﬁle in Figure 2 correspond to A
A1
B2
B3
3
and A
A1 , or B1 and B1 .
3.2.2. Error about position information of OBBs between two models
We specify the arbitrary value l as the level of leaf nodes
of OBBTrees. The 3D positions of those leaf nodes are
used to calculate an error between two models. Since
an OBBTree is a binary tree, the number of leaf nodes
at level l is 2l . Each leaf node is labeled by its position
counted from the most left leaf. (xi A , yi A , zi A ) means
x-, y- and z-coordinate of i-th leaf node of model A and
(xi B , yi B , zi B ) means those of model B. The following
equation is used to calculate an error between two 3D
models concerning their OBB’s position information.

n

Ec =

Õ

(xi A − xi B )2 + (yi A − yi B )2 + (zi A − zi B )2

(2)

i=1

Here n(= 2l ) is the number of leaf nodes of each
OBBTree at level l. Indeed there is one problem. Two
OBBTrees A and B of the same kind of models do not
guarantee that one node of A and its corresponding
node of B have the minimum distance. Before calculating the error between OBBTree A and OBBTree B
by the above equation, we need to sort the nodes at
level l of OBBTree B to make each node of OBBTree
A and its corresponding node of OBBTree B have the
minimum distance. For the sorting, we use simple replacement method as follows. As shown in Figure 5,
there are one parent node of A and its corresponding
parent node of B. LA and RA are respectively left and
right child nodes of the parent node of A. LB and RB
are those of the corresponding parent node of B.
(1) First of all, calculate the following equations
about two diﬀerent combinations. These equations
mean Minkowski norm (N=1). We use Minkowski
norm due to the less calculation cost rather than
Euclidean distance.
d1 = |LA − LB | + |RA − RB |

(3)

d2 = |LA − RB | + |RA − LB |

(4)

(2) If d1 ≥ d2 then replace sub-tree LB and RB
with each other.
This process consisting of steps 1 and 2 is recursively
applied to the descendants concerning LB and RB .

Proceedings of the International Conference on Computer Graphics, Imaging and Visualization (CGIV’04)
0-7695-2178-9/04 $20.00 © 2004 IEEE

4.2. Evaluation measure
We use the same three evaluation measures described
in [5]. They are ”First tier”, ”Second tier” and ”Top
match” as follows.
First tier: This criteria means the percentage of top
(k − 1) matches (excluding the query) from the
query’s class, where k is the size of the class. This
criteria is stringent, since each model in the class
has only one chance to be in the ﬁrst tier.

First tier =

Top(k − 1)matches
k−1

(6)

Second tier: This criteria is the same type of result,
but for the top 2(k − 1) matches.
Second tier =

Fig. 6. 3D model database
3.2.3. Total error between two models
We calculate a total error value using the next equation.

Top2(k − 1)matches
k−1

(7)

Top match: This criteria means the percentage of
test in which the top match was from the query’s
class.
4.3. Results and discussion

wc Ec + wa Ea
Error =
wc + wa

(5)

Here wa and wc are weight values speciﬁed by the user
arbitrarily.
3.3. Principal axes mismatch problem
As described in Sec. 3.1, for all models, we arranged
the ﬁrst principle axis into the same direction. However, this is not enough in practice because the principal axes mismatch occurs as explained in the paper [3].
To solve this problem, we have to calculate error values for 24 patterns of diﬀerent principal axes directions
and regard their minimum value as the dissimilarity.
4. EXPERIMENTS
In this section, we show experimental results to clarify
the availability of our 3D model search method. In this
experiment, we use D2 method for comparison. Before
the discussion on the results, we describe our 3D model
database and evaluation measures.
4.1. 3D model database
We use a 3D model database which consists of 145 models classiﬁed into 25 classes. Figure 6 shows those 25
classes and the number of 3D models belonging to each
class.

In our model search method, there are three parameters, l, wc and wa . We tried similarity searches using diﬀerent parameter values to grasp those inﬂuence. Table 1 and 2 show the results of two cases,
i.e., l = 3, wc : wa = 5 : 5 and l = 6, wc : wa = 6 : 4.
Each Table shows the values of First tier, Second tire
and Top match for each diﬀerent class. Its ”mean” row
shows the average values for all the 3D models. Elapsed
time means total calculation time to obtain all the results shown in one Table. The main diﬀerence between
Table 1 and Table 2 is l. l means the detail level of
models, that is, the height of their OBBTrees. Note
that a larger value of l brings better results as for the
accuracy, however, its calculation cost becomes worse.
This means that the user can ﬁnd even complicated 3D
models by specifying larger l. Actually we performed
some more search trials using various wc : wa at different l. wc and wa are weights for the error Ea of
the OBB’s position infomation and for the error Ec
of the aspect ratio of models. These errors Ea and
Ec are both important because when l is 3, the case
wc : wa = 5 : 5 indicates the best result and when l is
6, the case wc : wa = 6 : 4 indicates the best result.
To clarify the usefulness of our model search method,
we also tried similarity searches using other method
called D2 proposed by Osada et al [5] on the same 3D
model database because the paper [5] reports good experimental results. D2 uses the distribution of distance

Proceedings of the International Conference on Computer Graphics, Imaging and Visualization (CGIV’04)
0-7695-2178-9/04 $20.00 © 2004 IEEE

Class
airplane
helicopter
human
head
animal
ﬁsh
chair
monitor
glasses
bottle
sofa
tank
missile
submarine
guitar
tree
ball
car
bike
gun
sword
dinosaur
fruit
pencil
table
mean
time(sec)

First
Tier
0.60
0.25
0.17
0.30
0.21
0.17
0.17
0.25
0.55
0.45
0.30
0.05
0.36
0.45
0.21
0.29
0.50
0.95
0.50
0.47
0.50
0.20
0.25
0.50
0.67
0.36
22

Second
Tier
0.77
0.30
0.27
0.40
0.36
0.33
0.25
0.30
0.60
0.60
0.53
0.10
0.50
0.55
0.29
0.40
0.83
1.00
0.67
0.57
0.67
0.20
0.60
0.60
0.67
0.47

Top
Match
0.67
0.80
0.33
0.20
0.57
0.25
0.45
0.25
0.80
0.20
0.50
0.00
0.71
0.60
0.57
0.67
0.25
1.00
0.67
0.50
0.25
0.60
0.20
0.60
0.83
0.51

Table 1. level = 3, (wc : wa = 5 : 5)

between two random points on the model surface as the
similarity measure. The distribution is represented as
the histogram and the similarity of two models is calculated by matching their histograms. Table 3 shows
the results of D2. By comparing Table 2 and Table
3, it is found that the classes obtained good results in
D2 and those in our method are diﬀerent. For example, D2 excels in the ball class and the monitor class,
our method excels in the car class and the bike class.
Since D2 method uses the shape distribution as the feature information of 3D models, D2 shows good results
for 3D models similar to typical 3D shapes, e.g., cube,
sphere, cylinder shapes. Due to this reason, D2 excels
in the ball class and the monitor class. Table 4 shows
the best mean values of our method in each diﬀerent
l and the mean values of D2. At l = 2, 3, our method
is better than D2 as for the accuracy and search time.
As l increases, each mean value increases gradually but
the search time also increases non-linearly. This is be-

Class
airplane
helicopter
human
head
animal
ﬁsh
chair
monitor
glasses
bottle
sofa
tank
missile
submarine
guitar
tree
ball
car
bike
gun
sword
dinosaur
fruit
pencil
table
mean
time(sec)

First
Tier
0.63
0.35
0.30
0.30
0.17
0.42
0.18
0.16
0.60
0.35
0.37
0.10
0.38
0.50
0.26
0.32
0.67
0.90
0.67
0.40
0.58
0.20
0.50
0.45
0.67
0.39
116

Second
Tier
0.80
0.45
0.30
0.55
0.33
0.58
0.28
0.32
0.60
0.50
0.57
0.20
0.50
0.65
0.33
0.49
1.00
1.00
0.83
0.53
0.83
0.25
0.65
0.55
0.70
0.52

Top
Match
0.83
0.80
0.17
0.20
0.71
0.50
0.55
0.13
0.80
0.60
0.50
0.00
0.71
0.80
0.43
0.78
0.75
1.00
0.67
0.67
1.00
0.40
0.80
0.80
0.83
0.60

Table 2. level = 6, (wc : wa = 6 : 4)

cause the computaional complexity of our matching algorithm is O(2level ).
From the above discussion, it is said that our method
stands comparable with D2 and our similarity measure
based on OBBTree is available for the similarity search
of 3D models. The main advantage of our model search
method is that the user can choose the detail level of
the similarity measure by specifying l according to the
complexity of a query model.
5. CONCLUSION
This paper proposed a 3D model search method using
OBBTree as the similarity measure. We experimented
on our 3D model database and obtained acceptable results. As described in Sec. 4, the advantage of our
method is that the user can adequately choose the detail level of the similarity measure by specifying the leaf
node level l of OBBTree according to the complexity of

Proceedings of the International Conference on Computer Graphics, Imaging and Visualization (CGIV’04)
0-7695-2178-9/04 $20.00 © 2004 IEEE

Class
airplane
helicopter
human
head
animal
ﬁsh
chair
monitor
glasses
bottle
sofa
tank
missile
submarine
guitar
tree
ball
car
bike
gun
sword
dinosaur
fruit
pencil
table
mean
time(sec)

First
Tier
0.47
0.15
0.43
0.40
0.17
0.25
0.31
0.23
0.40
0.30
0.30
0.20
0.12
0.35
0.24
0.24
0.92
0.35
0.33
0.27
0.08
0.05
0.20
0.30
0.20
0.28
28

Second
Tier
0.73
0.40
0.50
0.60
0.29
0.33
0.42
0.41
0.50
0.30
0.47
0.20
0.19
0.65
0.29
0.29
1.00
0.45
0.33
0.33
0.42
0.10
0.35
0.55
0.27
0.40

Top
Match
0.67
0.00
0.50
0.40
0.29
0.00
0.64
0.00
0.60
0.60
0.33
0.20
0.29
0.20
0.29
0.67
1.00
0.60
0.67
0.50
0.25
0.00
0.40
0.60
0.33
0.40

Table 3. D2

a query model. As future works, we will develop a 3D
model DBMS based on the proposed method, which
allows us to retrieve required 3D models easily and accurately by interactively specifying parameters l, wc
and wa . Also we intend to integrate the method proposed in this paper and our previous 3D model search
method [4].

method
level = 1
(wc : wa = 6 : 4)
level = 2
(wc : wa = 5 : 5)
level = 3
(wc : wa = 5 : 5)
level = 4
(wc : wa = 6 : 4)
level = 5
(wc : wa = 6 : 4)
level = 6
(wc : wa = 6 : 4)
level = 7
(wc : wa = 6 : 4)
D2

First
Tier

Second
Tier

Top
Match

time
(sec)

0.28

0.40

0.35

12

0.29

0.43

0.40

16

0.36

0.47

0.51

22

0.37

0.50

0.57

37

0.38

0.52

0.60

63

0.39

0.52

0.60

116

0.39

0.52

0.62

226

0.28

0.40

0.40

28

Table 4. Total results of each method

HAND SKETCH QUERY, Proc. of IEEE Int. Conf.
on Multimedia and Expo, Vol. I, 889-892, 2002.
[4] Y. Okada, 3D Model Database System by Hand
Sketch Query and Its Intuitive Interface, 13th
European-Japanese Conf. on Information Modeling
and Knowledge Bases (13EJC), 258-265, 2003.
[5] R. Osada, et al, Matching 3D Models with Shape
Distributions, Int. Conf. on Shape Modeling & Applications, 154-165, 2001.
[6] E. Paquet, M. Rioux, Nefertiti: a query by content system for three-dimensional model and image
databases management, Image and Vision Computing, 17, 157-166, 1999.

6. REFERENCES
[1] S. Gottschalk, M.C. Lin, F. Manocha, OBBTree:A
Hierarchical Structure for Rapid Interference Detection, Proc. of ACM SIGGRAPH’96, 171-180, 1996.
[2] M. Hiraga, Y. Shinagawa,T. Kohmura and T.L. Kunii, Topology Matching for Full Automatic Similarity Estimation of 3D Shapes, Proc. of ACM SIGGRAPH2001, 203-212, 2001.
[3] Y. Okada, 3D MODEL DATABASE SYSTEM BY

Proceedings of the International Conference on Computer Graphics, Imaging and Visualization (CGIV’04)
0-7695-2178-9/04 $20.00 © 2004 IEEE

