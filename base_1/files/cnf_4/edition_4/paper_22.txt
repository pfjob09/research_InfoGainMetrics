Pixelplexing: Gaining Display Resolution Through Time
James Shearer∗

Michael Ogawa†

Kwan-Liu Ma‡

Visualization and Interaction Design Innovation (VIDi) Lab

Toby Kohlenberg§
Intel Corporation

University of California, Davis

A BSTRACT
Animation is frequently utilized to visually depict change in timevarying data sets. For this task, it is a natural fit. Yet explicit animation is rarely employed for static data. We discuss the use of animation to overcome three common limitations faced by information
visualization applications in the context of small-display devices:
constraints on the output display, limited interaction possibilities,
and high data density. We provide concrete examples of applying
animation to combat such limitations for four common visualization types: geo-spatial data, treemaps, parallel coordinate displays,
and large graphs. Unlike previous work which examines animation
for maintaining user orientation during view changes or for displaying data variables, we discuss animation’s utility for multiplexing available screen space. In the context of constrained displays,
we demonstrate its ability to effectively gain screen resolution, to
quickly uncover trends, to help find unexpected data patterns, and
to reduce visual clutter.
Keywords: Visualization for small displays, Animation, Scalability issues, Clutter Reduction
1

I NTRODUCTION

Sometimes the “payoff” moment for a visualization researcher is
when he or she sits back after a hard day’s programming, rewarded
with a nicely rendered animation of a previously inert and lifeless
data set. For the time-varying data sets common to scientific simulations, this is particularly true. Likewise, animation thrives in the
information visualization community, although typically in a different role. Here, animation is most often deployed to keep users
oriented during the view and focus changes inevitable in a highly
interactive application. A classic example of such work is Robertson, Mackinlay, and Card’s Cone Trees, a hierarchy visualization
in which the authors utilize animation to facilitate object tracking
during view changes [24]. As the authors point out, animation permits instant reorientation in the information space where the user
might otherwise require seconds. Yet animation is otherwise rarely
utilized in representations of static data.
Seemingly unrelated to visualization animation is the near ubiquity of small-display electronics now popular with technology consumers. Palmtop computers, cell phones, iPods – they all present
surprisingly able output devices upon which visualization has yet
to really take hold. Likely, this is because the rich data sets visualization targets – and the corresponding visual renderings – are
far too dense for 320x240 pixels. But the sheer enormity of this
device population makes them tempting targets, especially considering that such devices are themselves sources of much data (e.g.
large music libraries and sprawling contact lists).
∗ e-mail:

jjshearer@ucdavis.edu
msogawa@ucdavis.edu
‡ e-mail: ma@cs.ucdavis.edu
§ e-mail: toby.kohlenberg@intel.com
† e-mail:

IEEE Pacific Visualisation Symposium 2008
4 - 7 March, Kyoto, Japan
978-1-4244-1966-1/08/$25.00 ©2008 IEEE

One goal of information visualization is to create a useful, possibly interactive picture that makes otherwise inaccessible data useful
and meaningful. Often, applications will rely on techniques such as
zooming or filtering to combat the problem of overly-dense data.
These techniques, some of which are discussed in Section 2, can be
extremely effective. However, many techniques typically presume
enough screen real estate to accommodate user interface widgets
for control of the filtering, zooming, or other technique. Further,
they usually require a familiar interaction model: a mouse and keyboard with several input triggers (buttons, keys, etc.). Small devices
exhibit neither of these traits, as described below.
Limited Display Resolution The efficacy of many visualization applications is ultimately beholden to the available output device and its associated display resolution. For example, many methods for visually representing data will fail given the insufficient
pixel supply offered by most smart phones, ipods, or similar handheld devices – there simply is not enough screen space.
Beyond the obvious constraints placed on the actual picture,
small displays hinder typical visualization in a more subtle way
by limiting the room for user-interface widgets. Normally, a designer can expect to have plenty of room to accommodate the dropdown controls, text fields, and buttons needed for many filteringstyle techniques. While a small display certainly does not proscribe
such controls, their inclusion would even more severely limit the
pixels available for presenting useful images.
Limited Interaction The typical computer used to operate visualization tools has a very familiar interaction model: a mouse and
keyboard. It is therefore no surprise that most techniques described
in the literature implicitly require such facilities. Yet the input and
interaction mechanisms available on small devices varies considerably. Some have touch screens, permitting mouse-like interaction,
yet some do not. Others have keyboard access, yet this is far from
universal. A visualization targeting this extremely heterogeneous
input ecosystem can presume very little about what input facilities
will exist on the final “render” device.
Data Density In some visualizations, multiple pieces of information map to the same screen location, not because of limited
resolution, but because of the specific technique utilized, combined
with a property of the data. To return to the example of graph exploration, consider the many edge crossings intrinsic to most large
data sets. As the many edges “pile up” it can be difficult to identify
the endpoint nodes for a given edge, or usefully apply categorical
coding such as color and varied line width. Additional screen resolution does not necessarily help in such scenarios, and much information visualization research aims at overcoming this data density
problem. In a recent example of such work, Holten describes a
method [11] of visually bundling edges of certain types of digraphs
for the purpose of reducing visual clutter. This problem of data density is certainly not exclusive to small displays, yet we consider it
in our examples.
Animated Approach In this paper we present four examples
of applying animation to visualizations of static data in order to
overcome the problems described above. Though the exact technique differs depending on the parent visualization, all four cases
involve using time as an added display dimension to gain resolution.

159

Furthermore, we detail benefits of such animation incidental to its
usefulness as a multiplexor of pixel resolution, such as the ability
to highlight patterns otherwise obscured by high data density.

niques to enable use on small, constrained-display devices.

2

Because of the aforementioned limitations of small-display platforms, we cannot presume the screen space or interaction necessary
facilitates most common filtering, zooming, and related techniques.
Instead, we must consider mechanisms for effectively gaining resolution that do not require extensive interaction.
The underlying idea of our work is straightforward. We multiplex the display space using the added dimension of time via
whatever form of smooth animation is appropriate to the task at
hand. The exact visual design of the animation depends on the employed “parent” visualization technique, and Section 4 discusses
four unique types. Yet in all cases we have examined, the underlying methodology is unchanged.
First, we select a subset of data points using random sampling
or using some algorithmic choice. Then, for a certain period of
time, the selected data is visually enhanced by either allowing it
increased screen space, or by visually diminishing (or removing)
the unselected data. In either case, our technique aims to retain the
global context and trends of the base visualization, while presenting low-level details not typically available in an overview. Our
general technique could be stated as this: continuous sampling and
animation of the underlying data within an existing visualization.
Note that in the presented examples, the controls provided for
fine-tuning the animation are meant for the visualization designer,
and are not presumed to be available or necessary on the display
device. An example of this scenario is a push-based system where
a workstation-equipped manager delivers statistical data to a field
team equipped with smart phones.

R ELATED W ORK

Much research exists which explicitly deals with mapping large
data spaces to limited 2D displays. In 1994, Noik examined the
then-current state-of-the-art for presenting graph-like data sets, and
devised a taxonomy describing these techniques [20]. His taxonomy included three broad types of view emphasis: filtering, in
which some elements are hidden, distortion, in which some elements are geometrically altered, and adornment, in which attributes
like color and shading are utilized to differentiate elements. Further, three of the seven fundamental tasks identified by Shneiderman [26] – overview, zoom, and filter – are key for dealing with
constrained visual spaces. Using distortion to selectively emphasize certain information has been particularly well researched, with
many implementations building on Furnas’ paper about fisheye distortions [9]. Our work is similar to this large body of research in
that we aim to adapt visualizations to devices with constrained displays and limited interaction, yet we approach the problem using
animation assuming standard interaction mechanisms are difficult
or severely hampered.
There is little research discussing visualization in the context
of PDA-sized displays. Three notable exceptions are FishCal [3]
by Bederson et al., and AppLens and LaunchTile [16] by Karlson,
Bederson, and SanGiovanni. FishCal leverages interactive fisheye
views in order to present a more navigable, useful calendaring application targeting PocketPC-style devices. Similarly, AppLens and
LaunchTile detailed and evaluated two different types of zooming
interfaces for accessing applications on PDAs.
Beyond its frequent use for time-varying data, animation often
serves as an aid to navigation for 2D renderings of static data. Van
Wijk and Nuij [28] discuss the importance of such animation, and
present a general method for creating smooth transitions in very
large 2D information spaces. Yee et al. [31] use animation to keep
users oriented during changes in focus in a large radial graph. Similar examples can be found in the prefuse [10] visualization gallery
at http://perfuse.org/gallery, particularly the RadialGraphDemo and
TreeViewDemo. Another interesting application of animation is
by Robertson et al. [23], where it is utilized to smoothly integrate
and present multiple hierarchical data stores which share common
nodes. Lum et al. present a use of particle system-based animation [18], albeit for 3D data, in which the motion of particles is
used to enhance the surface shape of volumetric data.
Some researchers have discussed the use of motion for carrying
data in a visualization. Two examples are by Ware [29] and Bartram [2]. These provide detailed descriptions of uses of motion,
and provide guidelines for its application in a visualization context.
Ellis and Dix present a useful taxonomy of clutter reduction techniques [6] for information visualization, citing animation as one
possibility. Though the authors highlight the utility of animation
in six of the nine clutter reduction categories, they maintain that it
cannot help discriminate points and lines or show the overlap density in situations of over-plotting. We believe that our examples in
Sections 4.3 and 4.4 demonstrate that animation can satisfy these
criteria as described in their work.
We emphasize that pixelplexing is not meant to enhance user
orientation during view changes, or detail a new way to carry an
additional data dimension via animation or motion. Our use of animation is wholly different; its intention is to increase the visualization “working” space by using time as an added display dimension.
It is most similar to the work on Rapid, Serial, Visual Presentation
(RSVP), a broad technique thoroughly described by Spence [27].
Unlike most applications of RSVP, however, our overall goal is to
apply animation to modify existing information visualization tech-

160

3

3.1

M ETHODOLOGY

Sampling Explained

As noted above, we display sampled data in each animation frame.
To have an accurate representation of the data as possible, we need
to have an unbiased sampling method. In general, we use simple
random sampling (SRS) for sampling the data. In this technique,
all data points are equally likely to be chosen for the sample. For
example, if we wish to simple-sample the U.S. Census data, each
person living in the United States (the population) would have an
equally likely chance of appearing in the sample.
A small sample size is easy to obtain and manage, but will have
more variation from the true population. On the other hand, a large
sample is a more accurate representation of the population, but is
harder to manage and display. In our visualization systems, the user
has control over the per-frame sample size.
One problem with SRS is that it tends to omit outliers. However, this problem is addressed in our animation method because
over time (and thus, over many samples), the outliers have a much
greater chance of being represented.
4

A PPLICATION E XAMPLES

In the following sections, we provide four examples of visualization paradigms which benefit from our animation technique. For
each example application, we discuss our motivations for applying
animation, the sampling method used, the specific details of the animation, and the results achieved. Where appropriate, we also note
related work for the example visualization techniques.
4.1

Cenimation: Geo-spatial Data

This example originated from our entry in the 2006 IEEE InfoVis
contest, Cenimation. The positive feedback generated from the associated poster session provided the impetus for the additional case
studies discussed in this paper.

(a) Maryland with Circle Glyphs

(b) Maryland with “Drunken” Square Glyphs

Figure 1: Two stills from Cenimation depicting the U.S. Census 2000 ethnic breakdown for the state of Maryland. The left image uses circular
glyphs with randomized maximum size while the right images uses “drunken,” or arbitrarily-oriented square glyphs. In Cenimation, users can
control the glyph size and shape, as well as the growth rate and number of planted glyphs per unit time to affect a variety of animations.

4.1.1

Data

The U.S. Census Bureau provides a 1% sample of its diverse data
for public use. The data is divided according to geographic regions
called Public Use Microdata Areas (PUMAs). Though they typically fall along county boundaries, PUMAs must contain at minimum 400,000 people. As a result, the PUMAs surrounding populous areas tend to be small, and PUMAs in less populous areas
are comparatively large. For example, the large state of Nebraska
has only four PUMAs, one of which comprises the small area immediately surrounding the city of Omaha. From the 1% public use
sample, we extracted ethnicity data for the 50 states. This variable
categorizes how surveyed residents self-identify within seven major
ethnic categories.
4.1.2

Why Animation?

Our goal was to develop a technique which could effectively present
the described census data on a small, resolution-limited display
such as an ipod (approximately 320x240 pixels). The most obvious
approach to the above data is to subdivide each PUMA into regions
of size proportional to the racial distribution and apply some color
coding. Yet, this technique poses an interesting challenge with regard to the smaller PUMAs and racial minorities. There are two
significant problems with this approach.
The first, specific to small displays, is the fact that the areas assigned to minorities can approach mere handfuls of pixels, effectively rendering that group invisible. For example, if the total area
for a PUMA is 25x25 pixels, a group comprising 2% of the population would be relegated only 13 total pixels. While such an encoding is accurate with regards to the ethnic proportions, it might
fall beneath the threshold of what the viewer can easily see. We
desired a method which would accurately represent the population
distribution, but would enable the viewer to clearly see all ethnic
groups in a given region.
A second problem when providing a categorical color coding of
the map is choosing exactly where to place each color. This is particularly true of the census data, which is provided in fairly coarsegrained regions. Returning to the example of Nebraska, we find that
the entire western half of the state is a single giant PUMA. Where,
in a static coloring, does one place the Caucasians? The AsianAmericans? No matter where we choose, it is likely misleading or
incorrect in that it implies that people with a given encoding live
exactly at the chosen location.

4.1.3

Design and Results

Our design utilizes color alongside animation to help the census
data tell its story, even on pixel-constrained displays. On startup,
we assign each of the seven ethnic categories a color and then begin the animation loop. During each iteration of the loop, we select a random location within each PUMA and “plant” a new glyph
which will grow to full size in subsequent iterations. The color of
this glyph is probabilistically assigned based on the racial distribution of the glyph’s PUMA. For example, if 25% of the residents
of a given PUMA self-identified as African American, then each
glyph planted in this PUMA will be encoded as such with probability 0.25. This process continues indefinitely, during which users can
experiment with glyph shape, size, birth rate, and growth rate. The
result is a bubbling visualization in which the overall distribution of
the PUMAs is clear, but which also addresses the aforementioned
problems.
As the animation progresses, an overall picture of the racial
makeup emerges. Two stills from our application are shown in
Figure 1. At any given moment, the distribution of colors approximately reflects the statistical PUMA makeup, similar to a traditional
color-coded picture. Yet our animation allows every planted glyph,
even those representing the smallest minorities, to grow to full size
before being occluded by subsequent glyphs. This improves the
situation for minorities substantially. Consider the case of a 1%
minority living in the city of Pittsburgh, Pennsylvania. As the animation progresses, that minority will be “planted” only 1% of the
time. Yet when it is, the user will actually see that 1% since it is allowed to grow to maximum glyph size, which might be the full size
alloted to that PUMA. Through time, the user gains a clear picture
of the data.
By planting new glyphs in random PUMA locations, we also
manage to avoid misleading geo-spatial encodings. During the animation, old glyphs are eventually occluded by new glyphs. Consequently, any given area of the display will not remain a single color
forever, unless that area is completely homogeneous. The placement of ethnicities within the PUMA gradually morphs from location to location over time, so that users do not form a false mental
picture of the geographic location of a race.
Because the PUMAs associated with populous areas tend to be
small, they receive more new glyphs for any given unit of time.
As a result, the cities tend to bubble and boil with life, whereas
the sparsely populated areas have a more sedate overall appearance. This liveliness, combined with the expected racial diversity

161

of cities, causes the population centers to jump out at the viewer.
Homogenous, calm areas tend to fade into the background. This
demonstrates how animation rate can differentiate or highlight portions of the data set.
Since its success at the 2006 IEEE InfoVis Contest, we have
received much feedback regarding Cenimation. Most hands-on
observers immediately understood the time-multiplexing concept
upon seeing the live demonstration. People seemed to particularly
enjoy watching the very populous cities colorfully bubble away.
This highlights an incidental benefit of animation. When applied
with care, it can add a visually engaging and entertaining aspect to
a visualization. While this is rarely a primary concern for “hardcore” data analysis, it can be compelling for more casual users.
4.2

Treemaps

Treemaps are a popular space-filling technique for visualizing hierarchical data first introduced by Schniederman and Johnson [25,
15]. While a complete description of treemap construction can be
found in these works, the basic idea is as follows. The main viewing
rectangle corresponds to the root node of the hierarchy. This rectangle is subdivided horizontally or vertically into n sub-rectangles
where n is the number of child elements. The size of each rectangle
is proportional to some selected attribute of the data (i.e. file size
when visualizing a file system). The process continues recursively
for each rectangle, alternating the splitting axis. The leaf nodes
– the “innermost” rectangles – are colored based on some other
data attribute (i.e. file type). Combined with interactive zooming,
treemaps offer a powerful technique for displaying a lot of data in
a constrained space.
The original treemap “slice-and-dice” algorithm, however useful, tends to produce elongated, thin rectangles given certain data
sets. Such visual elements can be difficult to navigate and can potentially obscure color coding. Both Wattenberg [30] and Bruls et
al. [19] introduced subdivision algorithms to cope with this problem. In both of these works, the authors sacrifice the relative ordering of child elements in order to produce rectangles with a lower
aspect ratio, noting that such elements are easier to navigate. Some
tasks, however, are easier if two elements adjacent in the input are
also adjacent in the generated treemap. Bederson, Schniederman,
and Wattenberg introduced Ordered Treemaps and a modification
to Squarified Treemaps [4] which preserve ordering while generating lower aspect ratio rectangles to accommodate such situations.
Fekete and Plaisant [7] discuss applying animation to treemaps for
the purpose of comparing multiple views and maintaining the user’s
spatial orientation during geometrical changes in the view. We also
apply animation, but towards a different goal.
4.2.1

(b) Cushion & Squarified

(c) Animated - Random

Why Animation?

Though treemaps are fundamentally designed to make the best possible use of available screen space, highly subdivided rectangles
can be visually problematic at low screen resolutions. Consider the
case of using a treemap to visualize a filesystem hierarchy containing various media files, as depicted in Figure 2(a). In this example,
subdivision size is proportional to the folder content size, and color
coding is based on the file type, which ranges from larger movie
files to smaller .mp3 and .aac files. Notice the area to the far right,
where one folder has a very high number of small, differently categorized files. On a small display, the relative sizes and color coding
of the child elements could be difficult to distinguish, as each element would be assigned only a handful of pixels. Even using an
aspect ratio minimization technique, such as squarified treemaps,
depicted in Figure 2(b), will not help if the rectangles simply become so small that differentiation (or selection) is hard. Zooming
could certainly help in this case, if not for the limited interaction
presumed of our target devices.

162

(a) Slice-and-Dice

(d) Animated - Ticker-Tape
Figure 2: These four treemaps show different rendering techniques
applied to a directory hierachy containing media files which are colorcoded by file type. In the slice-and-dice treemap, it’s hard to distinguish the individual small files in the rightmost directory. Using a
cushion, squarified treemap greatly improves the situation, but the
many .mp3 and .aac files are still realtively small, and could be hard
to select or label. The bottom two images show stills from our two
animated treemap representations. Both offer larger, more visible
representations of the contained files at the expense of showing only
a portion at a given moment of time.

4.2.2

Design and Results

Our suggested treemap animation requires only a minor modification to subdivision algorithms. After performing the subdivision for
a given node in the hierarchy, we check to see if a sufficient percentage of the resulting rectangles fall below a chosen minimum size in
either dimension. Such areas of the treemap – these parents with
many, tiny children – become animated areas. We apply one of two
animation techniques.
The first is similar to that used for the geo-spatial census data,
as depicted in Figure 2(c). Glyphs representing the child elements
are randomly planted in the animated region and are allowed to
grow to full, visible size before slowly fading into the background.
Maximum glyph size can be used to distinguish relative child size,
as with traditional treemaps. Since we are already allocating large
amounts of space to each glyph in the multiplexed region, we can
use this space for display of more interesting data, such as icons,
album covers, or file “thumbnail” previews.
An alternative option, which preserves the relative ordering of
the elements, is to animate the child elements in a scrolling, tickertape fashion, as depicted in Figure 2(d). As with random selection,
the size of the glyph is varied to convey relative size differences
among the files. With either technique, however, size relative to
the non-animated elements is lost; this is one tradeoff required by
this “Treemapimation.” Yet this might be an acceptable concession
in order to regain useful color coding, and we see our animation
as a useful optional tool which can augment the already powerful
treemap technique in certain, pixel-starved circumstances. Also,
we can apply lessons from the aforementioned RSVP literature to
govern the speed of the scrolling, or to add additional information
(such as album covers or thumbnail previews) to the glyphs.
4.3

Parallel Coordinates

Parallel Coordinate displays are an often employed methodology for exploring multivariate data. First introduced by Inselberg [12, 13], parallel coordinates have spawned considerable research in the information visualization community. Most relevant to
our work is research that deals with over plotting in large data sets.
Johansson et al. described a method based on high precision textures and user-defined transfer functions to allow interactive exploration of clusters in parallel coordinate displays [14]. Additionally,
they introduce the notion of feature animation, whereby animated
areas on the coordinate axes provided information about cluster
properties by using variations in the animation phase velocity. Ellis, Bertini, and Dix present an elegant solution for managing saturated visualizations (including parallel coordinate displays) called
the Sampling Lens [5]. Their lens provides a localized view which
uses a user-controlled sampling rate to “see into” the global, saturated data. Novotny and Huser [21] present an interesting method
that abstracts very large multidimensional data using 2D binning to
achieve a less-cluttered parallel coordinate display while retaining
both global trends and outlier information.
Besides Johansson’s feature animation, there has been seemingly
little research applying animation to parallel coordinate data sets.
Barlow and Stuart described Animator, a software package that
uses animation to convey information regarding the movement of
objects, through time, in a multi-dimensional space [1]. Our application of animation specifically deals with non-time-varying data,
with the intent of both revealing otherwise hidden patterns and gaining a data overview.
4.3.1

Data

The example data set comes from a particle physics simulation conducted at the Princeton Particle Physics Laboratory’s Center for
Gyrokinetic Particle Simulation of Turbulent Transport in Burning
Plasmas. It contains six data points for each of 1,000,000 particles, each of which is crucial for isolating different types of parti-

cle behavior. Other researchers from our research group have developed an interactive particle visualization system that leverages
linked views, including a parallel coordinate display. The goal of
this system is to give the plasma scientists great control over the
particle selection, and provide a deeper understanding of their simulation data.
4.3.2

Why Animation?

The particle data set contains a large number of points: large
enough that even on a high-resolution display over plotting is a serious issue. We desired a technique that would allow us to see the
high-level trends provided by a traditional parallel coordinates visualization, while revealing lower level details that could be hidden
by the over plotting. Some of the aforementioned techniques provide excellent results in this situation, yet they can be difficult to
implement or computationally costly.
4.3.3

Design and Results

During our animation (dubbed Paramation), we periodically select
(using random sampling) a new group of particles to add to the parallel coordinate display. These new poly-lines fade in from transparent to fully opaque, remain opaque for a specified hang time,
and then fade to a light, neutral gray. This “ghosting” of previously selected lines, shown in Figure 3(a), shows the global trends
so far, and can be interactively cleared at will. We offer a secondary
background mode, shown in Figure 3(b), in which a traditional parallel coordinates display using alpha accumulation is placed in the
background. This can be helpful in gaining a global view of the
entire data set during the animation. Users can interactively toggle
between the two views.
The duration of fade in, fade out, and hang time are interactively
modifiable. Further, the user can control the number of particles
selected. By manipulating these parameters, the user can alternate
between a sedate animation showing few lines at once, to a more
frenetic animation. The former animation is suitable for showing
patterns that are lost in a traditional display, such as the crossing of
lines between axes shown in Figure 3(c). Note the assignment of
a unique color per line, which assists in tracking a single particle
through the six variables. The busier animation is more suited for
highlighting global trends in the data. By watching the animation
proceed for several seconds, a user can quickly become oriented
to the axis “hot spots,” 3(d) without any interaction. This instant
overview may help guide later exploration with a more traditional,
non-animated interface.
We have added interaction that allows the user to restrict particle
selection to those particles that pass though user-defined selections
on the coordinate axes. A user can click and drag across multiple
portions of the available axes, and only points which pass through
the designated areas on all axes will be available for animation (Figure 4). Similar selection is an oft-found feature in parallel coordinate implementations, and it allows a user to selectively disregard
uninteresting portions of the data. However, when combined with
animation, this feature exhibits another useful property: it allows
users to quickly compare the relative frequency of points passing
though two or more different locations on a single axis. By selecting two (or more) sections on a single axis, the user can see which
receives the most animated “traffic.”
We have found that Paramation is well suited for gaining a quick
overview of the multivariate data. It revealed inter-axis patterns that
we did not see in the standard parallel coordinates display, which
utilizes the aforementioned 2D binning algorithm. What’s more,
we were able to instantly see the high-traffic areas on all data axes
prior to any interaction. We see this as a useful tool for the initial
stages of data discovery, especially when the relationships between
variables are still relatively mysterious. We consider this technique
an extension of the Sampling Lens technique; one which offers con-

163

(a) Ghosting

(b) Standard

(c) Inter-Axis Crossing

(d) Axis Hotspots

Figure 3: Figures 3(a) and 3(b) show the two background modes available in Paramation. In Ghosting mode, lines fade to a neutral gray color
and remain in the background as the animation progresses. This serves to indicate global trends so far, and can be cleared by the user. In
Standard mode a more traditional parallel coordinates display (using an alpha-accumulation of all 1,000,000 samples) is utilized. This view offers
an overall global view of the data set during animation. Figure 3(c) shows how axis crossings (1st and 2nd axes) and other low-level details
are revealed using slower, less populous animation, while global context is preserved by the chosen background mode. Figure 3(d) is a still
from a more frenetic animation, in which axis hot spots jump out at the user without manual axis interaction. For example, it is clear that on the
axis second from the right (labeled “M”), many more points pass through the lower portion despite the uniform gray background provided by the
standard parallel coordinates view.

tinuous sampling without explicit user interaction, and which maintains global patterns via a different mechanism. It’s also relatively
easy to understand and implement, requiring only the addition of
an animation loop and sampling code.
4.4

Graph Exploration

A persistent and fundamental problem with graph exploration is
scalability. In node-link diagrams, the sheer number of vertices
and edges in a large graph clutters the screen and makes reasonable
navigation difficult to impossible. According to [22], displaying a
well-chosen sample of a graph can be almost as effective as displaying the entire structure.
Random sampling, by definition, cannot show a graph’s structure
completely. A given sample may omit certain structures that others
contain, and vice versa. How then can one sample be shown to a
user and not others? We propose to use animation for displaying
many samples to the user, so that one is not favored over another,
and so that taken together, they may give the user a more complete

164

picture of the graph’s structure.
4.4.1

Data

Our graph data set is a subset of the public hosts on the world wide
web with pages matching the search query ‘california.’ [17] This
graph contains 9664 nodes with 16150 edges between them. We
applied a custom force-directed layout based on Fruchterman and
Reingold’s [8].
4.4.2

Why Animation?

Figure 5(a) shows this graph as displayed in a 1024x768 pixel window. The dense central cluster makes it very hard to get a sense of
what’s really happening inside this graph. We felt that using animation to affect continuous graph sampling could quickly yield an
overall sense of the graph, which would be useful for later exploration.

4.4.3

Design and Results

We implemented three graph sampling methods exactly as described by Raefiei [22]. For a graph G = (V, E):
Random nodes Use SRS (simple random sampling) on the nodes
to obtain set V and draw the edges whose endpoints are in V .
Random edges Use SRS on the edges to obtain set E and draw
the edges in E .
Random nodes and their neighbors Use SRS on the nodes to obtain set V . Then add the neighbors of nodes in V to obtain
set V . Draw the edges in V .
We have also devised an additional sampling method:

Figure 4: Restriction of available points via user-defined selection of
axis locations. Here, only the particles that have data values in a selected region on each axis will be available for random selection. An
axis with no selection does not contribute to the restriction of available particles.

Random spanning tree Display a nondeterministic spanning tree
of the graph at each frame.
We found SRS to be effective in revealing the internal structure
of this graph as detailed in Figure 5(b). As expected, the continuous graph sampling quickly shows the numerous internal clusters.
We added the ability to modify sample size and sample frequency,
which is useful to find the most dominant nodes and edges.
Growing a network outward from a given starting set of nodes or
edges can be an effective exploration strategy [22]. A key advantage of seeing these internal, layered clusters is the ability to select
a good starting point for detailed graph exploration. As with Paramation, we feel this technique is well suited for the initial stages of
data exploration when data density overwhelms the available display space. This example also demonstrates that continuous animated sampling can help reveal the overlap density in heavily overplotted regions, and can also help distinguish between individual
points and lines in an overcrowded display.
5

(a) The entire ‘Califonia’ graph

6

(b) A Still from the animated ‘California’ graph
Figure 5: The top image shows the complete ‘California’ search
graph. The large, dense cluster in the middle resists any understanding of what is happening with this graph. The bottom image shows
one still from a continuous animation of the same graph using SRS
sampling. Over many such samples, the user gains an understanding of the overall graph structure and can more easily identify areas
for more detailed exploration.

F UTURE W ORK

We see this work as the first step in an ongoing investigation into
more extensive use of animation in our community. Certain aspects
of the work would benefit from further study, such as the perceptual aspects of Cenimation’s particular use of animation. It would
be interesting to measure exactly how accurately a user can divine
population distributions, or if the bubbling effect evokes misleading assumptions. We’d plan to experiment with other cycling-style
animations in the context of cartographic representations.
In a broader sense, we hope to investigate the application of animation to more information visualization methodologies. Our hope
is that through more examination, we will deduce a set of general
guidelines for devising animations to assist with pixel-constrained
displays. Regarding animation, the line between useful and irritating currently seems particularly blurry. We believe this situation
can be remedied, and that continued work with animation on static
data will yield a more defined boundary.
C ONCLUSION

We believe the presented examples of pixelplexing make a compelling argument for the utility of animation when display resolution is extremely limited. By temporally multiplexing the available
screen space, we are able to regain lost detail, even while showing
less information at any single moment. For many tasks, especially
those in the realm of small devices, this is a perfectly acceptable
solution. Further, animation coupled with background context can
reveal low-level, fine-grained detail that can become lost in dense
data displays. This benefit exists harmoniously with the “overall
story.” We find animation can quickly yield a global sense of the
data without the need for explicit user interaction, and can aid in
clutter reduction.

165

For these reasons, we believe the addition of a well-chosen animated component can assist in the initial data discovery stages during 2D visualization of a static data set. We hope that this work
stimulates further investigation of how researchers can employ animation to better realize useful visualization on the world’s numerous small displays and in any situation where users find themselves
wanting for additional screen space. We believe animation is a seriously undervalued technique which can help design better constrained display visualizations. This, in turn, will help raise awareness for our field in consumer electronics and popular culture, a
situation in which everyone benefits.
7 ACKNOWLEDGEMENTS
This research was supported in part by Intel Corporation, the U.S.
National Science Foundation through grants CCF-0634913, IIS0552334, CNS-0551727, and OCI-0325934, and the U.S. Department of Energy through the SciDAC program with Agreement No.
DE-FC02-06ER25777.
R EFERENCES
[1] N. Barlow and L. J. Stuart. Animator: a tool for the animation of
parallel coordinates. pages 725–730, 2004.
[2] L. Bartram, C. Ware, and T. Calvert. Filtering and integrating visual
information with motion. Proceedings on Information Visualization,
pages 66–79, 2001.
[3] B. B. Bederson, A. Clamage, M. P. Czerwinski, and G. G. Robertson.
Datelens: A fisheye calendar interface for pdas. ACM Trans. Comput.Hum. Interact., 11(1), 2004.
[4] B. B. Bederson, B. Shneiderman, and M. Wattenberg. Ordered and
quantum treemaps: Making effective use of 2d space to display hierarchies. ACM Trans. Graph., 21(4):833–854, 2002.
[5] G. Ellis, E. Bertini, and A. Dix. The sampling lens: making sense of
saturated visualisations. In CHI ’05: CHI ’05 extended abstracts on
Human factors in computing systems, pages 1351–1354, New York,
NY, USA, 2005. ACM Press.
[6] G. Ellis and A. Dix. A taxonomy of clutter reduction for information
visualisation. Transactions on Visualization and Computer Graphics,
13(6):1216–1223, Nov.-Dec. 2007.
[7] J.-D. Fekete and C. Plaisant. Interactive information visualization of
a million items. In Information Visualization, 2002. INFOVIS 2002.
IEEE Symposium on, pages 117–124, Los Alamitos, CA, USA, 2002.
IEEE Computer Society.
[8] T. M. J. Fruchterman and E. M. Reingold. Graph drawing by
force-directed placement. Software - Practice and Experience,
21(11):1129–1164, 1991.
[9] G. W. Furnas. Generalized fisheye views. In CHI ’86: Proceedings
of the SIGCHI conference on Human factors in computing systems,
pages 16–23, New York, NY, USA, 1986. ACM Press.
[10] J. Heer, S. K. Card, and J. A. Landay. prefuse: a toolkit for interactive
information visualization. In CHI ’05: Proceedings of the SIGCHI
conference on Human factors in computing systems, pages 421–430,
New York, NY, USA, 2005. ACM Press.
[11] D. Holten. Hierarchical edge bundles: Visualization of adjacency relations in hierarchical data. IEEE Transactions on Visualization and
Computer Graphics, 12(5):741–748, 2006. Danny Holten.
[12] A. Inselberg. The plane with parallel coordinates. The Visual Computer, V1(4):69–91, December 1985.
[13] A. Inselberg and B. Dimsdale. Parallel coordinates: a tool for visualizing multi-dimensional geometry. In VIS ’90: Proceedings of the 1st
conference on Visualization ’90, pages 361–378, Los Alamitos, CA,
USA, 1990. IEEE Computer Society Press.
[14] J. Johansson, P. Ljung, M. Jern, and M. Cooper. Revealing structure within clustered parallel coordinates displays. In Proceedings of
the 2005 IEEE Symposium on Information Visualization, Washington,
DC, USA, 2005. IEEE Computer Society.
[15] B. Johnson and B. Shneiderman. Tree-maps: a space-filling approach
to the visualization of hierarchical information structures. In VIS ’91:
Proceedings of the 2nd conference on Visualization ’91, pages 284–
291, Los Alamitos, CA, USA, 1991. IEEE Computer Society Press.

166

[16] A. K. Karlson, B. B. Bederson, and J. SanGiovanni. Applens and
launchtile: two designs for one-handed thumb use on small devices.
In CHI ’05: Proceedings of the SIGCHI conference on Human factors
in computing systems, pages 201–210, New York, NY, USA, 2005.
ACM Press.
[17] J. Klienberg. http://www.cs.cornell.edu/Courses/cs685/2002fa/.
[18] E. B. Lum, A. Stompel, and K. L. Ma. Kinetic visualization: a technique for illustrating 3d shape and structure. In IEEE Visualization
’02: Proceedings of the IEEE conference on Visualization ’02, pages
435–442, Washington, DC, USA, 2002. IEEE Computer Society.
[19] M. Bruls and K. Huizing and J. J. van Wijk. Squarified Treemaps. In
Proceedings of Joint Eurographics and IEEE TCVG Symp. on Visualization (TCVG 2000), pages 34–42. IEEE Press, 2000.
[20] E. G. Noik. A space of presentation emphasis techniques for visualizing graphs. In Proceedings of Graphics Interface ’94, pages 225–234,
Banff, Alberta, Canada, 1994.
[21] M. Novotny. Outlier-preserving focus+context visualization in parallel coordinates. IEEE Transactions on Visualization and Computer
Graphics, 12(5):893–900, 2006. Helwig Hauser.
[22] D. Rafiei and S. Curial. Effectively visualizing large networks through
sampling. vis, 0:48, 2005.
[23] G. Robertson, K. Cameron, M. Czerwinski, and D. Robbins. Polyarchy visualization: visualizing multiple intersecting hierarchies. In
CHI ’02: Proceedings of the SIGCHI conference on Human factors in
computing systems, pages 423–430, New York, NY, USA, 2002. ACM
Press.
[24] G. G. Robertson, J. D. Mackinlay, and S. K. Card. Cone trees: animated 3d visualizations of hierarchical information. In CHI ’91: Proceedings of the SIGCHI conference on Human factors in computing
systems, pages 189–194, New York, NY, USA, 1991. ACM Press.
[25] B. Shneiderman. Tree visualization with tree-maps: 2-d space-filling
approach. ACM Trans. Graph., 11(1):92–99, 1992.
[26] B. Shneiderman. The eyes have it: A task by data type taxonomy
for information visualizations. In IEEE Visual Languages, number
UMCP-CSD CS-TR-3665, pages 336–343, College Park, Maryland
20742, U.S.A., 1996.
[27] R. Spence. Rapid, serial and visual: a presentation technique with
potential. Information Visualization, 1(1):13–19, 2002.
[28] J. J. van Wijk and W. A. A. Nuij. Smooth and efficient zooming
and panning. In IEEE Symposium on Information Visualization 2003,
pages 15–23, 2003.
[29] C. Ware. Information visualization: perception for design. Morgan
Kaufmann Publishers Inc., San Francisco, CA, USA, 2000.
[30] M. Wattenberg. Visualizing the stock market. In CHI ’99: CHI ’99 extended abstracts on Human factors in computing systems, pages 188–
189, New York, NY, USA, 1999. ACM Press.
[31] K.-P. Yee, D. Fisher, R. Dhamija, and M. Hearst. Animated exploration of dynamic graphs with radial layout. In INFOVIS ’01: Proceedings of the IEEE Symposium on Information Visualization 2001,
Washington, DC, USA, 2001. IEEE Computer Society.

