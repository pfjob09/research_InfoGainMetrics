A Scalable Architecture for Visual Data Exploration
Jonathan Decker∗

Alex Godwin†

Mark A. Livingston‡

Denise Royle§

Naval Research Laboratory

Naval Research Laboratory

Naval Research Laboratory

Naval Research Laboratory

A BSTRACT
Intelligence analysts in the areas of defense and homeland security
are now faced with the difficult problem of discerning the relevant
details amidst massive data stores. We propose a component-based
visualization architecture that is built specifically to encourage the
flexible exploration of geospatial event databases. The proposed
system is designed to deploy on a variety of display layouts, from
a single laptop screen to a multi-monitor tiled-display. By utilizing
a combination of parallel coordinates, principal components plots,
and other data views, analysts may reduce the dimensionality of a
data set to its most salient features. Of particular value to our target applications are understanding correlations between data layers,
both within a single view and across multiple views. Our proposed
system aims to address the limited scalability associated with coordinated multiple views (CMVs) through the implementation of an
efficient core application which is extensible by the end-user.
Keywords: Coordiated Multiple Views, Visual Analytics, Ultrascale Visualization
Index Terms:
H.5.2 [Information Interfaces and Presentation]: User Interfaces—Graphical User Interfaces; E.1 [Data Structures]: Tables; H.4.2 [Information Systems Applications]: Types of
Systems—Decision support
1 I NTRODUCTION
The amount of data currently available overwhelms our capacity to
perform analysis on it. Therefore, building tools to sort through
data and determine trends or patterns amongst those variables becomes an important first step. Geospatial analysts must sort through
many layers of data to determine which variables may be useful as
predictors of events. A method that enables an analyst to assess the
risk based on demographic data, terrain information, and any prior
events would be a powerful tool in analysis. Such a tool would need
to combine traditional data analysis techniques with visualization
methods in a way that allows a non-expert in statistics and visualization to navigate and interpret the data. While there are many
ways to approach such issues, we have chosen to provide multiple
views of the data as our first step. Our system uses a combination
of spatial layouts (an important view for reasoning about geospatial
information), plots of the results of numerical analysis (e.g., principal component analysis) and visualizations used to find correlations
in the data (e.g., parallel coordinates).
Flexibility within an application of this nature is paramount
within the arena of defense. Through analysis of the problem domain and interaction with experts in the field, visualization designers may anticipate many of the needs of the end user. However,
by providing a means for interacting with existing visualizations
as well as specifying new ones, designers provide a more robust
toolkit for suiting a wide variety of problems and user preferences.
∗ e-mail:jonathan.decker@nrl.navy.mil
† Now

at Charles River Analytics e-mail:agodwin@cra.com

‡ e-mail:mark.livingston@nrl.navy.mil
§ e-mail:denise.royle@nrl.navy.mil

IEEE Symposium on Visual Analytics Science and Technology
October 12 - 13, Atlantic City, New Jersey, USA
978-1-4244-5283-5/09/$25.00 ©2009 IEEE

Figure 1: An example of using multiple views to make a simple discovery. Here an outlier in the PCA scatter plots is highlighted on the
right, and this turns out to be all the tracts of Puerto Rico, which have
undefined values for almost all the variables used. Finding bad data
is important, since it can throw off analysis.

If users require a means of analysis that is not currently present in
the provided set of tools, then they have the ability to create a new
one without resorting to other software packages that are disconnected from the current data suite and possibly unfamiliar to the
user. Experienced analysts often have a routine developed for the
fast fusion and interpretation of incoming data, and a system that is
limited in its adaptability to the needs of an analyst will go unused.
Flexibility enables the system to adjust to user preferences by mapping visual objects in a manner consistent with the user’s particular
strengths and interests.
Existing CMV applications are limited in their ability to manage
interactive performance when viewing large data sets over 100,000
records, and have little to no support for dynamic or complex data,
faults that have been outlined by Andrienko and Andrienko [1]. We
feel that the issue of scalability is a major problem with existing
CMV research. The only solution is a complete reversal in the
paradigms presented by previous research, primarily the concept
of deep class hierarchies and ease of development through managed language and modular Object-Oriented Programming (OOP).
These practices incur overhead which can significantly reduce the
capacity of an application to read, interpret, and display data. Instead, the source code should be written to be as efficient as possible, and the capability for extension should be shifted from the
programmer to the end-user through scripting languages and usercreated views based on a set of pre-defined data operations and visual metaphors.
The focus of this research is the flexible exploration of data

221

what additional columns should be defined. Furthermore, cascaded
tables can be defined on top of the base tables, which contain a
subset of the base table’s data, as defined by a row filter (Figure
2). Row filters can be defined as Lua expressions that produce a
Boolean result.

Figure 2: Clockwise from bottom center: Zoomed view of all census
tracts, zoomed view of MD tract, two PCA plots of MD, NC tracts, MA
tracts, and DC tracts. The center view displays the MO tracts.

through the creation of coordinated multiple views (CMVs). Component based visualization is frequently accomplished through the
use of layout toolkits, such as the Improvise system [7], or as extensible frameworks such as prefuse [5] and the Infovis Toolkit [2].
Our system is designed following several of the design patterns
outlined by Heer [4], which are themselves derived from Gamma
et al.’s earlier work [3]. Specifically, we implement the data column, cascaded tables, proxy tuple, and expression patterns in our
data model. However, in contrast to systems which use their own
expression languages, like Improvise and prefuse, our expressions
leverage the Lua scripting language [6]. Moreover, our system is
designed from the ground up for memory efficiency so that it performs interactively on the massive, complex data sets that GIS analysts must explore. These data sets have between 1,500-2,000 variables, which includes both spatial and temporal data.
2

E XPRESSION -D RIVEN V ISUALIZATION S YSTEM

Previous guiding principles have frequently cited the need for an
expressive specification of visualization parameters. Heer’s design
patterns [4] provide an excellent set of guidelines for creating a
visualization-oriented data model that supports the use of expressions, and we have incorporated many of these patterns into our
own architecture specification. User-created expressions provide
an additional layer of customization in visual analysis, particularly
in the design of CMV applications [7].
We use the popular column-oriented data model, which allows
for dynamic queries for many interactive techniques, such as brushing and highlighting, which is currently implemented in our system
(Figure 1). We use a forest structure of cascading tables, where
each child table sees the columns of its parent as well as its own
additional columns. There is also a special type of column that uses
a user-defined expression and a set of columns as input parameters.
An expression column can be used as a decorating column by simply evaluating a set of the columns in the table model to a color,
visibility parameter, size, shape, or other visual property. Expression chaining can be used to great effect by modifying the view
parameters and creating entirely new visualizations.
The proposed system runs on a single machine with multiple
display adapters. Each visualization can be set to span multiple
displays, and measurements can be provided at initialization to account for the space between monitors, including monitor bezels.
Views can also be resized and dragged anywhere within the multimonitor space. Data is stored in tables where each column represents the value of every entry for a specific data attribute. The user
may specify which data sets are loaded, where they are stored, and

222

3 R ESULTS AND C ONCLUSIONS
We evaluated the application by loading the 2000 census tract data
set, which has over 65,000 records and over 40 variables. This includes the census tracts themselves, which are stored as rings with
hundreds of vertices. On a six-tile display wall, we have been able
to brush between windows at interactive rates (a few seconds for a
complete update between all views). While this performance is sufficient for exploration, it is mainly limited by the execution time of
table scans, which still significantly underperforms direct memory
access time. This is caused by accessing values through a hierarchical class structure in our implementation of the column design
pattern. Our open research goal is to follow the concepts behind
these existing design patterns, without sacrificing performance.
The system we have proposed is the foundation for a truly scalable architecture which will allow for visual exploration of large,
high-dimensional, complex, and dynamic datasets. This contribution involves a low-level implementation focused on memory and
rendering efficiency. We have also allowed for user extensions
through the inclusion of expression columns and row filters.
We plan to continue our work by creating new components for
the analysis and reduction of the dimensional space of data, such
as the Kriging methods which enable analysts to interpolate data
values and fill in the missing details. Currently the Lua expressions
operate on tuples, but we’re working to extend this idea so that expression columns can be informed by entire tables.
Additionally, we will incorporate direct data set access into our
column-based table structure, to allow for access to large-scale
and/or dynamic data. We will also seek to build non-interactive
analysis into the system, as well as automation based on user preference. Finally we will extend our system so that it may run on a
computing cluster, which is a crucial step to achieve an optimally
scalable system.
Our driving application is the display of GIS data for analysts.
We plan to evaluate our system for use in predictive analytics and as
a teaching tool for new analysts. The system will undergo usability
testing and user evaluation with a subject matter expert.
R EFERENCES
[1] G. Andrienko and N. Andrienko. Coordinated Multiple Views: a Critical View. In Proceedings of the Fifth International Conference on
Coordinated and Multiple Views in Exploratory Visualization, pages
72–74. IEEE Computer Society Washington, DC, USA, 2007.
[2] J. Fekete. The infovis toolkit. In IEEE Symposium on Information
Visualization, 2004. INFOVIS 2004, pages 167–174.
[3] E. Gamma, R. Helm, R. Johnson, and J. Vlissides. Design patterns:
elements of reusable object-oriented software. Addison Wesley, 1995.
[4] J. Heer and M. Agrawala. Software design patterns for information visualization. IEEE Transactions on Visualization and Computer Graphics, 12(5):853, 2006.
[5] J. Heer, S. Card, and J. Landay. Prefuse: a toolkit for interactive information visualization. In Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, pages 421–430. ACM New York,
NY, USA, 2005.
[6] R. Ierusalimschy, L. H. de Figueiredo, and W. C. Filho. Lua - an extensible extension language. Software: Practice & Experience, 26(6):635–
652, 1996.
[7] C. Weaver. Building highly-coordinated visualizations in Improvise. In
IEEE Symposium on Information Visualization, 2004. INFOVIS 2004,
pages 159–166.

