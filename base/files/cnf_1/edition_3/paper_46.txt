Combining iterative analytical reasoning and software development
using the visualization language Processing
VAST 2009 Badge and Network Traffic Mini Challenge Award: Good Tool Flexibility
∗
Claudia Muller-Birn
¨

Lukas Birn†

Carnegie Mellon University

Capgemini sd&m AG

A BSTRACT
Processing is a very powerful visualization language which combines software concepts with principles of visual form and interaction. Artists, designers and architects use it but it is also a very
effective programming language in the area of visual analytics. In
the following contribution Processing is utilized in order to visually
analyze data provided by IEEE VAST 2009 Mini Challenge Badge
and Network Traffic. The applied process is iterative and each stage
of the analytical reasoning process is accompanied by customized
software development. The visual model, the process and the technical solution will be briefly introduced.

information should be quickly grasped. The presentation should allow an interactive exploration of data and it should be reusable as a
monitoring instrument for similar questions.

Index Terms: H.1.2 [User/Machine Systems]: Visual Analytics;
D.2.3 [Coding Tools and Techniques]: Object-oriented programming
1 I NTRODUCTION
Visual analytics, i.e. visual data mining and information visualization, comprises different areas which deal with visual representations and interaction techniques, data representations and transformations, as well as production, presentation, and dissemination
[4]. An essential understanding of the fundamental rules for effectively expressing information using graphic techniques is still
needed and the IEEE VAST Challenge offers a platform to test the
adaptability of existing software tools, to review specified visualization approaches, and to exchange ideas and visions between the
participants.
In the following contribution one solution is explained which
deals with badge and network traffic data of Mini Challenge 1. The
data sets contain one month of activity data of 59 employees in
an embassy. The IP traffic logs comprise 115,414 records and the
proximity data logs 10,162 records. Furthermore, information regarding the IP address of each computer, which is assigned to one
workplace within the embassy, and the offices with the corresponding employees are given. All data is combined in one visual model
to detect a suspicious person who is supposed to send data to a
criminal organization outside the embassy. An iterative analytical
process is applied. Depending on the respective stage of knowledge the programmed visualization is improved. In the following
sections, the specified visual model, the applied analytical process
and the implemented software solution are described. Advantages
of applying Processing are particularly emphasized.
2 BASIC V ISUAL M ODEL
Requirements are defined In order to define the visual representation. The major approach is to consolidate all necessary information in one view. The visual model should display the timedependent employee’s activity data as simply as possible and all
∗ e-mail:

claudiamuellerbirn@cs.cmu.edu

† e-mail:lukas.birn@capgemini-sdm.com

IEEE Symposium on Visual Analytics Science and Technology
October 12 - 13, Atlantic City, New Jersey, USA
978-1-4244-5283-5/09/$25.00 ©2009 IEEE

Employee enters the building

Employee enters area of limited access

Request Payload

Request Payload

Figure 1: Basic visual model of all employees with all proximity data
logs and the traffic logs (monthly overview)

The basic visual model contains the proximity data logs and traffic logs. Employees are organized on the vertical axis in descending order. The timeline is arranged on the horizontal axis. There
are three types of events: prox-in-building, prox-in-classified, and
prox-out-classified. When an employee enters the embassy, a green
fading bar is used to show the “fuzziness” of this event, and a red
bar depicts the presence of an employee in the restricted area. White
bars visualize traffic on an employees computer. The request and
response payloads are displayed as sparklines. Positive amplitude
of white bars indicates the request payload and negative amplitude
indicates the response payload.
3

A NALYTICAL P ROCESS

The applied analytical process consists of six phases: acquire,
parse, represent, reasoning, refine, and interact [1]. The first two
phases are carried out by the software solution. All available data
from the IEEE VAST 2009 Mini Challenge 1–Badge and Network
Traffic is downloaded. The developed software parses all data sets
(proximity card logs and network traffic logs). The basic visual
model is defined within the phase “represent” (cp. Section 2). The
remaining three steps—“reasoning”, “refine” and “interact”—are
repeatedly carried out. Each iteration leads to another rule violation or hypothesis and the respective visual model is extended depending on the revealed insights. Results of the phase “interact” are
explained in Section 4.
The first phase “reasoning” unfolds if an employee leaves the restricted area and there is no prox-in-classified event, or he enters
without a previous departure in which case a rule violation exists.
This rule violation called piggybacking into/out of restricted area
is displayed by a yellow corona. The visual model reveals three

251

employees, nos. 30, 38 and 49, who go against policy and piggyback (enter or leave the restricted area without badging in or out
by following a co-worker who did badge in or out). However, the
available information is not sufficient to identify the suspicious person.
Two assumptions are now defined. Firstly, only one person from
the embassy is suspected of sending data to an outside criminal organization. Secondly, each employee has access to each computer
in the embassy and each computer is assigned to only one employee
and should theoretically only be used by this employee. We specify therefore our first hypothesis: “There should be no traffic on
a personal computer during the absence of the defined user.” We
apply this hypothesis to state our second rule violation, unattended
network access. It is represented by an orange corona in the visual
model. After applying this rule violation on our data set, we reveal
eight events of activity while its defined user is in the restricted area.
The timelines of employees nos. 15, 16, 31, 41, 52 and 56 show this
rule violation. Consequently the target IP address, to which the data
was sent, is checked. During unintended network access this target
address is always used. It is the IP address 100.59.151.133. We
define our second hypothesis: “The revealed IP address belongs to
the criminal organization and every data transfer to this address is
unauthorized.” Based on that, we specify our third rule violation
access to suspicious IP, represented by a pink corona. Activities on
computers of eight further employees apply to this rule violation.
These are employees nos. 8, 10, 13, 16, 18, 20, 31 and 32. The
defined rule violations disclose 13 employees with unusual behavior. We therefore regard them as suspects. The second and the third
rule violations describe basically the same situation. Data is sent
to the criminal organization. But the (orange) rule violation unattended network access overlays the (pink) rule violation access to
suspicious IP.

Network access during restricted area

Restricted area policy violation

Access suspicious IP

Figure 2: Reduced visual model of employees who have a least one
rule violation and no alibi (suspicious person is highlighted by a semitransparent white box))

Based on these results we are not able to narrow the number
down to one person. A further adaption of our visual model is necessary. We define the third hypothesis: “Not being in the embassy,
staying in the restricted area, or using the defined users computer
can be seen as an alibi which excludes these employees from being the suspect.” We define three restrictions on this visualization:
firstly, remove all users who are not in the embassy when data is
sent to the criminal organization, secondly, remove all users staying in the restricted area while an unauthorized data transfer happens, and thirdly, remove all users using their assigned computer at
the very moment the unauthorized data transfer happens. For the
last restriction, a time lag of one second is permitted between the
unauthorized data transfer and the usage of the assigned users com-

252

puter. Consequently, an employee is not the target person if he used
his computer within one second before and after the unauthorized
data transfer. The final visual model (cp. Figure 2) contains all
employees with their rule violations and also semitransparent green
boxes which highlight the existing alibis of users in the restricted
area or entering the embassy while or after an unauthorized data
transfer takes place. The defined restrictions reduce the number of
displayed employees and their visualized activities. Now the target
person can be identified very easily. Because of the missing alibi,
we detect employee no. 30 as the suspect. A semitransparent white
box highlights this employee.
4 T ECHNICAL S OLUTION
The nature of the provided data leads to the decision to implement a
highly customized solution. Because of its features the open source
programming language Processing [2] is utilized to create the visual model. Processing combines software concepts with principles
of visual form and interaction [1]. It offers a rich function set for
visualizations which can be easily applied and is very flexible. Processing is built on top of the Java programming language developed
to generate and modify images.
In the phase “interact”, methods are added to the final visual
model in order to manipulate all available data more conveniently
and to allow the user to control the visualized employee list. During
the analytical reasoning process, we realized that an overview of
the data is needed first. Secondly, the user should be able to zoom
and filter the data and details on demand. By selecting the area of
interest using the mouse (click and drag), only the requested part of
the visualization is shown. The different activities of employees can
be differentiated more easily this way. Thirdly, each activity has a
tooltip which always comprises the employee number and in terms
of proximity data logs the start and end time and in terms of the
traffic data logs the day, time and target IP address. Hovering over
data points triggers the tooltip. The visualization can be initialized
by pressing the key “i”. It is possible to reduce the whole list to the
suspicious person. This feature simplifies the final identification of
the suspect.
Only a few elements of the Processing library are applied to create the visual model. The implementation was tightly connected
to the analytical process, but the overall programming efforts were
reasonable. A possible feature of an improved version is a multiselect drop-down menu to interactively select arbitrary subsets of
employees. However, even the implemented solution shows the capability of the open source visualization language Processing.
Plans are in place to integrate this visual model into the open
source software SONIVIS [3]. This software facilitates the exploration of interaction, context and knowledge networks in virtual information spaces. Besides network analysis the software offers different statistical evaluations, in which the introduced solution can
be integrated.
5 C ONCLUSION
A flexible software application is developed based on the visualization language Processing. The possibilities of Processing are of
course not fully tapped. Nevertheless the proposed solution shows
how, with reasonable effort, an effective visual analytics interface
can be programmed.
R EFERENCES
[1] B. Fry. Visualizing data. O’Reilly, Sebastopol, CA, 2008.
[2] B. Fry and C. Reas. Processing. http://processing.org, 2009.
[3] SONIVIS. SONIVIS: Social networks in virtual information spaces.
http://www.sonivis.org, 2009.
[4] J. J. Thomas and K. A. Cook. Illuminating the Path: The Research and
Development Agenda for Visual Analytics. National Visualization and
Analytics Center (NVAC), 2004.

