Multidimensional Data Dissection Using Attribute Relationship Graphs
Chris Weaver∗
School of Computer Science and Center for Spatial Analysis
The University of Oklahoma

A BSTRACT
Visual exploration and analysis is a process of discovering and dissecting the abundant and complex attribute relationships that pervade multidimensional data. Recent research has identified and
characterized patterns of multiple coordinated views, such as crossfiltered views, in which rapid sequences of simple interactions can
be used to express queries on subsets of attribute values. In visualizations designed around these patterns, for the most part, distinct
views serve to visually isolate each attribute from the others. Although the brush-and-click simplicity of visual isolation facilitates
discovery of many-to-many relationships between attributes, dissecting these relationships into more fine-grained one-to-many relationships is interactively tedious and, worse, visually fragmented
over prolonged sequences of queries.
This paper describes: (1) a method for interactively dissecting multidimensional data by iteratively slicing and manipulating a
multigraph representation of data values and value co-occurrences;
and (2) design strategies for extending the construction of coordinated multiple view interfaces for dissection as well as discovery
of attribute relationships in multidimensional data sets. Using examples from different domains, we describe how attribute relationship graphs can be combined with cross-filtered views, modularized
for reuse across designs, and integrated into broader visual analysis
tools. The exploratory and analytic utility of these examples suggests that an attribute relationship graph would be a useful addition
to a wide variety of visual analysis tools.
Index Terms:
D.2.2 [Software Engineering]: Design Tools
and Techniques—[User Interfaces]; H.2.3 [Information Systems]:
Database Management—[Languages]; H.5.2 [Information Systems]: Information Interfaces and Presentation—[User Interfaces]
1 I NTRODUCTION
Many data sets of interest in visual analytics [27] come in the form
of one or more multidimensional relational tables. These data sets
often include a mix of geospatial, temporal, numerical, and categorical information. Nonetheless, they tend to be predominantly nominal in nature, consisting of multiple dimensions of people, places,
events, institutions, things, ideas, and other kinds of named entities
and groups that represent the who and the what of social, political,
legal, educational, financial, and other complex human systems.
Graph visualization has become an extraordinarily popular
means to explore and analyze the many relationships that exist between the entities and groups in such systems. Our comprehension of the world around us, from the material to the conceptual, is
highly associative. Consequently, the information representations
into which we map our understanding of the world tend to be full of
relationships, even if those relationships are not always explicit in
data. Graph visualization is effective because it can explicitly represent many-to-many relationships in perceptually immediate, cognitively direct, and interactively accessible ways. The visualization
∗ e-mail:

weaver@cs.ou.edu

IEEE Symposium on Visual Analytics Science and Technology
October 24 - 29, Salt Lake City, Utah, USA
978-1-4244-9487-3/10/$26.00 ©2010 IEEE

community continues to develop many useful and usable techniques
for displaying and interacting with objects and their relationships.
The real challenge, however, lies in providing ways to deeply explore and analyze the often tangled web of implicit relationships
that the complex human processes of naming and measurement and
organization infuse into every seemingly mundane data set.
With visualization as a discipline continuing to mature from craft
to science, there is increasing interest in discovering patterns and
pathways for synthesizing “visual-interactive compounds” that are
demonstrably useful for data exploration and analysis in both broad
and targeted applications. This paper describes one such pattern,
attribute relationship graphs, that allows analysts to dissect multidimensional relationships by both drilling down into and slicing
across attributes in order to expose the many-to-many details of attribute value co-occurrences spread across one or more data sets.
Attribute relationship graphs extend the cross-filtered views
technique [33] by adding a node-edge-hyperedge diagram that supports flexible exploration of attribute value co-occurrences across
two or more columns of tabular data, using a multigraph representation. This representation can be interactively filtered on a selection
of columns as well as on selections of arbitrary subsets of values
in those columns—essentially a fully filterable mapping of the top
two levels of an N-dimensional data cube into nodes, edges, and
hyperedges (visually encoding the latter as node-containing packs).
The general structure of a typical attribute relationship graph
design consists of well-known visualization components: dimensionally appropriate views for brushing the unique values of each
attribute; checkboxes for toggling filtering between any directed
pair of these views; a graph view that shows values and value cooccurrences; and checkboxes that toggle filtering of nodes for each
attribute, edges for each undirected attribute pair, and hyperedges
for each directed attribute pair. This structure supports a process in
which trained analysts can follow complex lines of inquiry by using sequences of simple, freely interleaved interactions to perform
specific visual data exploration and analysis tasks.
We start by describing an example in which an attribute relationship graph is used for visual exploration of recent award-winning
movies in the Internet Movie Database. After summarizing related
work on multidimensional visual data analysis and graph visualization, we describe the attribute relationship graph technique and a
general method for designing visualizations of tabular data sets using it. Using additional examples from two other data domains, we
proceed to describe how attribute relationship graphs can be flexibly
customized with respect to data types across multiple dimensions,
incorporated into more wide-ranging multiple view designs, and
modularized for reuse across designs. We conclude by considering
analytic utility and usability in terms of the perceptual and interactive characteristics of the graph view as an extension of crossfiltering, practical restrictions on query expressiveness, scalability
and interactive performance, and future directions.
2

E XAMPLE : C INEGRAPH

The Internet Movie Database (IMDB) is a popular web site for
browsing and searching information about movies, including the
actors and crew members who make them, the genres they belong
to, when they were released to theaters, the awards they have won,

75

I

B

A

K
D

J

C

L

G

P

O

E
N
F
M
H

Figure 1: The Cinegraph visualization of recent movies in the Internet Movie Database. The attribute relationship graph shows correspondences
between awards and award-winning movies that took in less than $100M at the box office. The graph simultaneously shows that only one person
involved with at least one of these movies has been both a director and a cinematographer, although not necessarily of the award winners.

and the ratings that online fans have given them. This large and
complex mix of social, attitudinal, relational, and temporal data is
strongly analogous to many data sets of central interest in visual analytics. Moreover, popular interest in and familiarity with movies
makes exploration and analysis of IMDB an exemplary target for
more broadly accessible applications of new visualization methods.
However, current tools typically allow users to ask at most a few
canned questions about two or three dimensions of the data, typically with interactive manipulation of only one of those dimensions.
Open-ended exploration also demands visual tools and techniques that can handle not only a broad range of data volumes, but
also an increasingly large number of interrelated data dimensions
that involve a rich mix of data types with complex, domain-specific
semantics. The IMDB subset created for the InfoVis 2007 contest,
for instance, describes only mainstream movies from 2001 to 2007,
yet occupies four tables that contain 20204 records about movies,
ratings, and release dates, 246755 records about people and roles,
35384 records about genres, and 43 records about awards, respectively. Movies typically have ten or more people, many of whom
fill multiple roles, and three or more genres. However, the distribution of data value occurrences and many-to-many relationships
varies extremely. Exploring data of this sort requires simultaneous
agility, flexibility, expressiveness, and expansiveness of interaction.
We used Improvise [31] to develop Cinegraph [32], an interactive visual tool for exploring and analyzing the IMDB subset. The
tool maps nine attributes of the movies database—movies, genres,
people, roles, awards, release dates, average ratings, number of ratings, and box office totals—into a collection of multiple coordinated views laid out in a single-window user interface (Figure 1).
A scatter plot matrix displays the rating count, rating average, and
box office attributes together, each plotted against the other two, as
a single ratings “dimension”. A calendar shows release dates. The
remaining five attributes populate table views. Cross-filtering connects these dimensions, allowing users to drill-down by turning on
and off brushing of arbitrary sets of data values in those dimensions.
Figure 1 shows an example of one point in an exploration of

76

awards. After (A) selecting all awards, the user (B) filters genres,
movies, people, and roles on awards to get a general sense of the
number, distribution, and specific instances of “winners” in each
of these dimensions. Being particularly interested in cinematographers and directors, the user (C) selects these two roles, then (D)
further filters people on roles. Wondering which people have filled
which roles, the user (E) turns on both kinds of nodes in the attribute
relationship graph, then (F) the edges that connect them, revealing
that (G) only Steven Soderbergh has been both a director and a cinematographer in an award-winning movie. Turning on (H) packs
around people for each role shows this even more clearly. Now
curious about relatively low-budget movies, the user (I) turns on
filtering of movies by rating, then (J) rubberbands to ultimately select movies that made less than $100M at the box office; the movies
table view (K) dynamically updates during the navigation. Turning
on (L) movie and award nodes, then (M) packs of movies for each
award, the user can see which movies have some award in common,
but not which one. Turning on (N) edges reveals the many-to-many
relationships between movies and awards, including that (O) Mystic River won awards for both leading actor and supporting actor,
but that (P) none of the selected movies has won best picture.
Using the attribute relationship graph, the user can drill into arbitrary subsets of movies, people, and their characteristics, then
slice across attributes to dissect many-to-many details about kinds
of movies, groups of people, and even patterns of moviemaking
over time. As a result, the user can explore local regions of complex associations between attribute values much more efficiently
than through exhaustive sequential construction of the one-to-many
visual states that are frequently required using a cross-filtered design alone. Furthermore, like cross-filtering, attribute relationship
graphs generalize well to tabular data formats and thus appear suitable for template-based rapid visualization design. Nevertheless,
Cinegraph was designed and built by hand and applied to the InfoVis 2007 contest data set in under a week, with only two days
needed for live design including implementation of both crossfiltering and the attribute relationship graph in seven dimensions.

3

R ELATED W ORK

Attributed relational graphs [5] have long been used for defining visual languages [12]. Visualization of attributed relational data has
also been noted as important [14], but has been largely overlooked
from a systematic perspective, despite many examples of domainspecific visual tools that include some sort of interactive multigraph representation. We make an important distinction between
attributed relational graphs (also known as attributed graphs), in
which an object is related to its attributes (characteristics) through
directed edges, and an attribute relationship graph, in which the values of database attributes (column values) are related through undirected edges that indicate co-occurrences in records. This distinction is tricky when one interprets each data record to be a collective
description of some attributed object. We focus on co-occurrences
between attributes rather than between an entire record and its attributes. This difference has a profound impact on the data transformations, visual representations, and ultimately analytic utility of
attribute relationship graphs. (In this paper, we use “attribute relationship graph” to denote both the design pattern and its instances.)
Well-known graph visualization toolkits, such as GraphViz [8]
and JUNG [21], provide extensive options for reading, drawing,
and navigating graphs in a scalable manner. These toolkits can
be used to define topology, encode data values, support spatial
navigation and selection, and perform dynamic layout. Interactive manipulation of graphs remains largely limited to interaction in graphs, including panning, zooming, rotation, brushing of
nodes, expand/collapse of subgraphs, and automatic and manual
layout [35]. The CGV system [28] provides a comprehensive set
of such interaction and filtering capabilities, including basic coordination of attributed graphs with other views. The visual representation of graphs has also been considered in terms of a pipeline
of data transformations [15, 16, 26]. The InfoVis Toolkit [6] and
prefuse [10] used flattened tabular representations of graphs and
trees, thereby unifying the transformations used for graph views
and other views under the data state model [3]. However, these approaches provide at most a few fixed entry points for introducing
prescribed kinds of coordinated interaction into the transformation
pipeline, making them well-suited for visualizing graphs but less so
for general use in multiple coordinated view designs.
Multiple coordinated view visualizations draws on a variety of
design patterns [7], some general [18] and some specific to visualization [9]. A variety of classic and recent visual analysis tools use
multiple coordinated views to support drill-down into relationships
in data, using multidimensional brushing in scatter plot matrices
in XmdvTool [29], interactively filtering of a central view by selecting subranges of data attribute values in sliders in Spotfire [1],
attribute aggregation polyarchies [4], elastic hierarchies [37], ranking in social network graphs [22], ontologically annotated semantic
graphs [36], a hybrid of node-edge diagrams and matrices in NodeTrix [13], and combinations of parallel coordinate plots with nodeedge diagrams [24] and cross-linked space-filling hierarchies [23].
In developing attribute relationships graphs, we are interested not
only in adding to the space of existing multidimensional visual
analysis tools, but also in identifying and formalizing the higherorder patterns of coordinated view composition that make these
tools useful, usable, and generalizable across application domains.
ShowMe [19] (based on Tableau) is an exploratory visualization builder based on drag-and-drop editing of attribute hierarchies
across scales. The combination of cross-filtering and attribute relationship graph is similar to multiscale visualization in ShowMe in
how it is based on rapid interactive composition of complementary
aspects of a central view, but differs in three ways. First, it provides
a means to explore the details of many-to-many associations at the
ground level of individual records, rather than the patterns of association that occur at higher levels of aggregation. Second, it allows
the inclusion of dynamically derived attributes. Third, its data and

visual abstraction operations can be parameterized in terms of additional external interactions, allowing design variations in support
of special data types or analysis requirements.
Jigsaw [25] combines a variation of cross-filtering, in the form
of value selection in cross-linked lists of entity types in documents,
with a node-edge diagram specifically designed for exploring the
many-to-many connections between those entities through the documents in which they appear. As a kind of attributed relational
graph, the Jigsaw graph allows expansion and collapse of the entity
nodes surrounding any given document node. Consequently, the
graph provides an additional means of domain-specific drill-down
interaction, in contrast with the general slicing interaction provided
by node/edge/pack toggling in attribute relationship graphs.
Visualization schemas [20] models coordinated interaction between pairs of views in terms of one-to-one, one-to-many, and
many-to-many relationships between data attributes. Any two
views can coordinate, using a compound join, to display associations between data records in terms of their attributes. Cross-filtered
views by itself can be thought of as a visualization schema involving independent, switchable, many-to-many filtering on selections between pairs of views. Attribute relationship graphs extend
cross-filtering by making the one-to-one and one-to-many details
of many-to-many relationships visually explicit within a centralized
target that reflects drilled subsets of values only within a sliced subset of dimensions. The approach generalizes across application domains but allows substantial customization of data transformations,
visual representations, and interactions in response to the particular
data characteristics and analytic needs of those domains.
4

ATTRIBUTE R ELATIONSHIP G RAPHS

In this section, we consider attribute relationship graphs from three
different perspectives: (1) as a method for interactively dissecting
many-to-many relationships in multidimensional data, by building
and modifying a graph that shows selected values (in selected dimensions) as nodes and selected classes of value co-occurrences
as edges and hyperedges; (2) as a general pattern for constructing
an interdependent set of data transformation operations that support the method; and (3) as an open-ended space of design variations for instantiating the pattern in particular visual analysis applications, including the encoding and filtering of data values and
co-occurrences as graph elements. We describe each perspective
with reference to examples of dissection in visualizations designed
to support analysis in three different information domains.
4.1

Interaction As Dissection

Exploring data has often been compared with looking for needles
in a stack of needles. When exploring heterogeneously typed multidimensional data, it is more like looking for hidden gems in a
large box full of miscellaneous buttons, baubles, screws, rubberbands, and other objects of various shapes, sizes, and colors, untangling them from each other, and trying to understand how they
came to be in the same box. Looking, untangling, and understanding all rely on the analyst’s perception, knowledge, and experience
to drive choices about which potential relationships between objects and their characteristics are worth considering over the course
of exploration and analysis. The corresponding goal of attribute relationship graphs is to facilitate the identification and detailed characterization of many-to-many relationships in multidimensional information through visual interaction. As such, it extends the crossfiltered views method [33] by using visual interaction to ask even
more detailed questions through dissection rather than mere observation of bulk correspondences between data item characteristics.
Visualizations built around an attribute relationship graph add a
shell of queries, views, and interactions to an existing cross-filtered
design. This additional structure is made up of two essential elements: a graph view, and a collection of switches for manipulat-

77

a

b

c

d

A N

D

O

Q

G

E

C L

M
B
I

K
P

F

H

J

Figure 2: Dissection of visualization-related CAREER awards from the NSF CISE directorate from 2000 to early 2010. The attribute relationship
graph progressively shows: (a) all principal investigators (PIs) in visualization-related programs, (b) only the CAREER PIs, (c) all other programs
under which their CAREER awards fall, and finally (d) only these other programs. A yellow-to-red color scale encodes total award amounts.

ing its contents. The graph view displays a multigraph of attribute
value co-occurrences by mapping each unique value into a node,
each set of common co-occurrences into an edge, and the set of
co-occurrence sets of any given value into a hyperedge. Nodes,
edges, and hyperedges fall into equivalence classes according to the
attributes, combination of attributes, and permutation of attributes
that define them, respectively. Each switch toggles the visibility of
a single equivalence class of graph element. Graph exploration is
thus like dissection: examine data items for potential relationships
by drilling into and slicing across dimensions to expose a specific
cross-section. The example visualizations in Figures 1,2,5 use variations of this structure to support exploration in different domains.
Dissection as a mechanical process is nothing more than a sequence of freely interleaved brushing, switching, and graph layout
interactions provoked by observation of visible values in the graph
and the cross-filtering views. For example, Figure 2 shows dissection of the cross-section of NSF CAREER awards related to visualization, built as follows. First, (A) select the visualization-related
programs, (B) filter PIs on programs, then (C) select all PIs. Turn
on (D) Program and PI nodes, (E) Program-PI edges, and (F) PIProgram packs. (G) Apply manual and automatic layout as desired.
(The generic force-directed algorithm alone does a reasonable job,
but manual tweaking helps.) Figure 2a shows the graph at this point.

78

Next, (H) filter award IDs on programs. In the Awards view,
(I) sort by title, then (J) range select all titles that start with “CAREER”. (K) Filtering on award IDs shows how CAREER awards
distribute over NSF organizations, managers, programs, states, institutions, and PIs; CoPIs can be ignored because CAREER awards
don’t have any. (L) Again select all PIs. The graph now shows only
PIs who have visualization-related CAREER awards (Figure 2b).
Now, (M) filter programs on PIs. Only the Graphics & Visualization program remains of the three, meaning that every award is in
this program. (N) Again select all programs, then relayout the graph
(Figure 2c). Knowing that all PIs are in Graphics & Visualization,
(O) deselect it, thereby removing its node and associated links to
make the graph less dense. What remains is a graph showing only
the “non-visualization” programs for each award (Figure 2d). It
also reveals that (P) only three awards are solely in Graphics & Visualization, and others are in special programs like (Q) EPSCoR.
At this point, the analyst could, for instance, find out which state
the EPSCoR award is from by picking the award’s PI and filtering
States on PI to discover the answer, New Mexico. Alternately, the
analyst could select all States (already CAREER-filtered), turn on
State nodes and State-PI edges, then look at the many-to-many relationships to dissect nominal geographic relationships, also referring
to the map to gain insight into spatial geographic relationships.

G’α

σα
α β

Cαβ

Tβ’

φαβ

Cαβ’

σβ

Cliquing

Drilling

φαN

Nα

Σ

T

N

E
φαβ

Eαβ

Σ

T

E

P
φαβ

Pαβ

Σ

T

P

P
φβα

Pβα

Slicing

input

input

input

Collecting

1

ψN

3

ψE

5

ψP

T

N

T

E

T

P

graph

graph

graph

Forming

2

πN

4

πE

6

πP

T

N

T

E

T

P

glyph

glyph

glyph

Layout

λ?
7

φN

8

φE

9

φP

T

N

T

E

T

P

view

view

view

σN?
σE?
σP?

Packs

id id

Λ

Edges

Tα’

φα

∞

node, edge, pack
matrices

Nodes

Grouping
’
γα
Tα
Gα

cross-filtering
matrix

Encoding Filtering Brushing

Figure 3: Data transformation pipeline for attribute relationship graphs. Left: The analyst specifies graph elements by slicing off particular data
dimensions and drilling into those dimensions to select grouped/cliqued data values. Right: The data values are collected and formed into a
graph topology that is visually encoded and optionally filtered. The analyst can layout and brush elements in the resulting graph representation.

4.2

Queries

Attribute relationship graphs are built upon a general model of
data abstraction, visual abstraction, and coordination for visualizing
graphs. The model is a specialization of the data state model [3] in
which graph data structures and their visual representations are declared in terms of interactively driven tabular data transformations
(Figure 3, right). Under the model, designers specify the topology, visual encoding, filtering, layout, and brushing of graph views
using well-known data abstraction, visual abstraction, and coordination mechanisms to specify content, appearance, and behavior.
A series of transformation pipelines forms (ψ), encodes (π), filters (φ ), and handles brushing (σ ) for each graph element. Interdependencies between pipelines enforce topological constraints; all
edges require two anchor nodes (possibly the same), and all packs
require at least one member node. In the node pipeline (N), an additional transformation calculates the position of nodes as a function
of current visual state using a combination of interactive (λ ) and automatic (Λ) layout. In the edge pipeline (E), the transformations on
each edge have access to the data and visual abstractions of its anchor nodes. Similarly, the transformations on each pack in the pack
pipeline (P) have access to the abstractions of its member nodes.
This allows encoding of edges and packs in terms of node encodings, such as to draw edges as arrows that connect node shapes in
a visually appealing way, regardless of changing positions of nodes
during dynamic layout. This also allows encoding in terms of topology, such as to filter edges on in-degree or packs on member count.
Every transformation is a potential entry point for coordination;
calculation of transformations (1 − 9), interactive brushing and layout (?), and automatic layout (∞) are all concurrent and update dynamically during coordinated interaction to or from the graph. It is
often necessary to exploit only a few of the data transformation and
interaction entry points in the model to design a graph tailored to a
particular set of desirable exploration and analysis capabilities.
Collection of the three data sets for input into the three pipelines
is not specified by the model, and can consist of any transformations
that the visualization designer chooses to use for preprocessing.
This flexibility of graph specification makes it relatively straightforward to adapt the results of cross-filtering for use as input into the
graph (Figure 3, left). In cross-filtered visualizations, data transformation consists of: grouping records into sets (G) for each unique
attribute value; filtering each set, keeping records whose attribute
values co-occur with those brushed in a subset of other views; visually encoding each value and its filtered set; and brushing values
in each view. Because values are mapped one-to-one into nodes,
the filtered groups (G ) of values that have been drilled down to in
the cross-filtering views can be reused unchanged as input into the

N ) is a concatenation of the
node pipeline. The node input data (Tinput
records in a subset of the filtered groups. The cross-filtering matrix
determines which subsets of values; the node matrix determines
which subset of groups (attributes).
Whereas nodes are first-class elements, independent of other elements, edges and packs are second-class elements defined in terms
of a pair of anchor nodes (for edges) or a set of member nodes associated with a common reference node (for packs). Both can be
calculated by mapping a pair of values into two anchor nodes (for
edges) or a member and a reference node (for packs). Just as the
group transformation calculates a table of {value, set} records for
use in forming nodes, a clique transformation—essentially a grouping equijoin—calculates a table (C) of {value, value, set} records
for use in forming edges and packs. Cliques are cross-filtered (C )
in the same way as groups. Because co-occurrence is symmetric,
E ) is a conand hence edges are undirected, the edge input data (Tinput
catenation of records from a combination of the filtered cliques; but
because the co-occurrences for a given value can be both one-tomany and many-to-one, and hence packs are directed, the pack inP ) is a concatenation of records from a permutation of
put data (Tinput
the filtered cliques. Edge and pack matrices determine which subsets of cliques, respectively. Overall, construction of an attribute relationship graph requires calculation of m groups and m2 cliques for
an m-dimensional data set. The results can be accumulated lazily
as previously unvisited checkboxes are toggled on in the matrices.
An attribute relationship graph can thus be incorporated into an
existing cross-filtered visualization with or without changes to existing views or their coordinations. Moreover, visualizations combined in this way inherit much of the design flexibility of both the
general graph model and the cross-filtered views model.

4.3 Design Variations
The query strategy used in the design of attribute relationship
graphs has evolved through experience with several visualizations.
The current data transformation pipeline is concrete and may be
reused as a flexible template in new visualizations. Each visualization design involves customization of each transformation in order
to accommodate particular data sets and analysis tasks. Customization includes picking one or more data sets to load, choosing which
dimensions to include in dissection, then declaring m group and
m2 clique transformations for those dimensions. Visual encoding
in the cross-filtering views is essentially unconstrained and may be
specialized to suit the character and distribution of each data dimension. Encoding of graph elements is constrained by space and
topology considerations, yet still affords a large space of practical
variation. To elucidate attribute relationship graphs as a pattern for

79

Node
Types
Types

Auxiliary
Effects

Nominal
Categorical
Numerical
Temporal
Spatial
Pre-filtering
Per-Record Filtering
Temporal Filtering
Spatial Filtering
Topological Filtering
Rich Node Encoding
Node Actions

Cinegraph

VAST Wiki Editors

genre, award, role

revision type, part of speech

theatrical release date

edit date, time of day

movie, person

author, word

box office, rating average, rating count

-

-

sliders (ratings & roles thresholds)
-

cross-filtering on dates
-

movie posters, person photos, genre icons
all but roles & ratings link to imdb.com

NSF Awards

manager, program, institution, PI, co-PI

directorate, organization, application field
-

-

-

state

-

directorate and year range (hidden)

individual edits

cross-filtering on dates, time of day

individual awards
start date

-

map region brushing (United States)

coloring of nighttime/daytime, extreme words

color scale for award amount totals

-

words link to dictionary.com

sliders (edge and pack counts)

links to award searches on nsf.gov

Figure 4: Variation in node data types and auxiliary graph effects (filtering, encoding, and activating) in the three example visualizations.

visual tool design, we briefly describe some of the more extensive
structural variations (Figure 4) used in the example visualizations.
4.3.1

Visual Abstraction

Whereas each cross-filtered view can map values into graphical
attributes using nearly any visual encoding technique that allows
per-item brushing, the graph view is restricted to visual encodings that accommodate connectivity of nodes and edges, containment/connection of nodes in packs, and dynamics of node position
in freeform or geometrically constrained layouts. Visual encoding
of nodes can involve virtually any reasonably sized and reasonably
convex shapes, but edges are best drawn as traditional lines or arrows, with packs as hulls or blobs (rather than, say, stars of thin
lines that could be easily confused with edges). Perhaps surprisingly, brushing in the graph is not a requirement and is not a direct
part of the dissection process. Nevertheless, an ability to highlight
graph elements by selecting them may increase the effectiveness of
examining large graphs during dissection [30]. Locking [28] is a
high priority for addition to the general graph model.
All graph elements can involve more than simple shape encoding to differentiate equivalence classes. For instance, nodes for
movies, people, and awards in Figure 1 reflect differences in both
attribute types and specific values using clearly distinguishable images. Edges can draw text describing connections (like in Have
Green [36]), or show whether each node value is currently crossfiltered on the other using arrowheads on either or both ends. Moreover, it is possible to encode the grouping or cliquing data set of cooccurrences associated with a node’s, edge’s, or pack’s value(s).
Edge thickness and pack transparency are useful ways to depict
co-occurrence counts, although large variation in these counts as a
function of data distribution requires careful design. Encoding the
co-occurrence data sets themselves turns nodes into small multiples
of nested scatter plots, heatmaps, or histograms (although performance has been dismal when we have attempted to do so). Finally,
a node can be triggered to perform an action as a function of its
value or its grouping set, such as to link to the IMDB web page of
an actor or to search the NSF web site for the awards of a PI.
4.3.2

Data Abstraction

All of the attribute relationship graph visualizations that we have
built so far have involved substantial customization of individual
transformations at all points in the pipeline, but without changing
the pipeline itself. Some of the more extensive structural variations
involve addition of auxiliary views and sliders that: (1) preprocess
and prefilter raw data sets at the beginning of the pipeline; (2) provide a detail view of all data records, optionally allowing dissection on a per-record basis by adding a unique record identifier (or
other primary key) as a filtering dimension; or (3) provide alternate
geographic or temporal representations for additional encoding or

80

filtering of particular graph elements. The graph can also be filtered
and/or encoded topologically. For example, the NSF visualization
(Figure 2) varies in five major ways. First, we split the one-table
award database into nine dimensions across four relational data tables in a simple star schema with the award identifier as primary
key. Second, we mitigated interactive performance limitations due
to large data size by prefiltering out all but the CISE directorate.
Third, we included the award identifier as a cross-filterable dimension. Fourth, we allow dynamic filtering of the graph on navigation
in time series and map views. Finally, sliders filter edges and packs
on minimum co-occurrence counts.
4.3.3

Attribute Types

The data type of each dimension is a critical design factor. In general, graph views are unlike other views in that they depict bags of
objects rather than true coordinate spaces ordered in one or more
dimensions. Although many techniques exist for laying out graphs
to account for such information, doing so would break the dimensional symmetry of graph appearance and behavior during dissection, especially in the face of variation from zero to one to two
or more numerical dimensions. Data values are thus deliberately
treated as effectively nominal or categorical at all points along the
pipeline. Consequently, graph views depict numerical, temporal,
and spatial values in an artificial way, stripped of the ordering and
distribution information implied by their parent dimensionality.
Designing the cross-filtering views to depict values in their natural dimensional contexts may help to counterbalance this major
limitation in using such a basic kind of graph view for dissection.
For example, hours of the day in the wiki visualization (Figure 5)
appear both as nodes and as selectable bars in a time series histogram. Dates appear in a calendar as well. In a like manner, crossfiltering bestows attribute relationship graphs with qualified support
for derived attributes, multiple attributes treated as one composite
attribute, and multiple attributes across spatial and temporal scales.
5

D ISCUSSION

Evaluating complex visual tools is an ongoing challenge [2]. Despite its demonstrated utility for expressing a wide variety of tasks
in different application domains—we have also built attribute relationship graph visualizations for CD collections, historic hotel registers, and shape classification experiments—the very flexibility of
design that makes the technique so broadly useful also makes it an
extraordinarily difficult target for evaluating usability. Evaluation
of the cross-filtering technique on its own—see [34] for details—
revealed two usability problems. First, a selection occlusion effect arises when selected items both cross-filter other views and are
themselves cross-filtered out. We suspect that addition of the graph
has a mixed impact on this effect, because (1) it shows all selected
items in a dimension (or at least allows them to be seen by panning)

Figure 5: Visualization of wiki edits from the VAST 2008 Wiki Editors Mini Challenge. The attribute relationship graph shows connections between
prominent authors, frequent words, and revision types during early morning and afternoon activity at the end of two multi-day editing periods.
Times (hours of the day) and dates are both treated as nominal data values; the corresponding nodes in the graph have been laid out by hand.

even when some of those items are invisible in their cross-filtered
view, but (2) may create confusion due to this inconsistency. The
alternative, filtering out these invisible items in the graph, would
effectively reduce the graph to a simple drill-down view.
Second, an out of sight, out of mind effect occurs because users
have trouble remembering more than the most recent states in the
analysis process. We suspect that the graph alleviates this problem
somewhat by shifting memory demands from tedious one-to-many
interaction sequences in the cross-filtering views to simpler manyto-many examinations in the graph. While we believe that everyday
formative evaluation of particular attribute relationship graph visualizations would help us to identify usability problems like these,
our growing conviction is that characterizing them in complex designs requires systematic access to analytic provenance [17, 11]—
access that, in analysts’ hands, might address the problems directly.
The time to develop example visualizations has been about a
week; the most recent visualization (NSF) took about ten hours.
Reusable templates, added to Improvise for declaring cross-filtering
and attribute relationship transformations, are one reason for this
improvement in development time. Attribute relationship graphs
are nevertheless generalizable, and can be adapted to other visualization toolkits and systems that are based on the data state model.
When calculating a clique query, each pair of uniquely occurring
values can accumulate the data records in which they co-occur. The
resulting small data set can be subjected to data transformations like
any other, but its primary purpose is for calculating simple aggregates over the pair of values, such as to count the records for encoding as an edge width, or to sum amounts for encoding as a pack
fill color. Accumulating and transforming many small data sets is
expensive, and is not needed in any of the example visualizations.
Consequently, clique queries currently calculate only counts rather
than accumulate co-occurrence data subsets for each pair of values.
On current desktop hardware, typical interactive response is below
100 milliseconds in Cinegraph and the wiki edit visualization, but
often exceeds ten seconds in the NSF visualization.
For m dimensions and n data records, the full set of m2 clique
queries has time complexity of O(m2 n2 ). By lazily calculating each

clique, when the user first toggles on either the edge or one of the
packs for some pair of dimensions, clique calculation becomes a sequence of amortized O(n2 ) operations interspersed throughout the
analysis process. This strategy is effective for dissection because it
is common for only a fraction of all possible dimensional pairs to
be visited during any given analysis session—even when all dimensions are involved individually—but can cause impatience while
waiting for new cliques to be calculated. Moreover, variability in
the number of unique values of each attribute is common, creating imbalances in the cardinalities of graph element equivalence
classes, causing unevenness in group and clique calculation speed,
and posing a design challenge in mapping value distributions into
appropriate views for cross-filtering. Response time in the NSF
visualization is slow—especially when aggregating award totals—
because the large and skewed interactive working set thrashes the
in-memory data transformation caches implemented in Improvise.
Cross-filtered views supports analysis by selecting values of each
attribute separately, meaning that dissection under cross-filtering
is unary. Attribute relationship graphs allow binary dissection by
making it possible to examine values of attributes pairwise. While
analytic utility is substantially increased, it remains dimensionally
limited. In Figure 2, edge thickness reflects all awards to a PI under
each program, not just CAREER awards. Although each clique’s
data set could be filtered on the selected values of other attributes,
the edge encoding would still only reflect a count; the multigraph
information in each edge is not encoded at all, let alone to reflect
filtering beyond that of its two node anchor attributes. Attribute relationship graphs thus support visual dissection of relationships at
one, but only one, order higher than cross-filtered views. One wonders what visual techniques might support dissection of trinary and
higher-order relationships in multidimensional data.
6

C ONCLUSION

Attribute relationship graphs are a method and visualization design pattern for exposing and dissecting many-to-many relationships buried in heterogeneously typed multidimensional data sets.
Several example visualizations demonstrate the generality and flex-

81

ibility of attribute relationship graphs, and provide insights into specialization for different data sources and analysis needs. Through
significant extension of the cross-filtering method and pattern, we
have made further progress in identifying, characterizing, instantiating, and reusing effective multiple view compositions at a high
level of design abstraction. Our ongoing goal is to provide analysts
with increasingly flexible and precise yet usable means to explore
and analyze deep details and subtle patterns in complex data spaces.
More broadly, we aim to help build a methodological foundation
for the development of classes and instances of synthetic pathways
that are demonstrably useful for designing visual-interactive compounds for effective exploration and analysis of data in both general
and specialized knowledge domains.
ACKNOWLEDGEMENTS
Thanks to the InfoVis 2007 Contest and VAST 2008 Challenge
organizers for preparation of the data used in this paper, and to
Carsten G¨org and Anthony Robinson for many related discussions.

[16]

[17]

[18]

[19]

[20]

[21]

R EFERENCES
[1] C. Ahlberg. Spotfire: An information exploration environment. SIGMOD Record, 25(4):25–29, December 1996.
[2] S. Carpendale. Evaluating information visualizations. In Information
Visualization, volume 4950 of Lecture Notes in Computer Science,
pages 19–45. Springer, 2008.
[3] E. H. Chi and J. T. Riedl. An operator interaction framework for visualization systems. In Proceedings of the IEEE Symposium on Information Visualization (InfoVis), pages 63–70, Research Triangle Park,
NC, October 1998.
[4] N. Conklin, S. Prabhakar, and C. North. Multiple foci drill-down
through tuple and attribute aggregation polyarchies in tabular data.
In Proceedings of the IEEE Symposium on Information Visualization
(InfoVis), pages 131–134, Boston, MA, October 2002.
[5] H. Ehrig. Introduction to the algebraic theory of graph grammars (a
survey). In Proceedings of the International Workshop on GraphGrammars and Their Application to Computer Science and Biology,
pages 1–69, London, UK, 1979. Springer-Verlag.
[6] J.-D. Fekete. The InfoVis Toolkit. In Proceedings of the IEEE Symposium on Information Visualization (InfoVis), pages 167–174, Austin,
TX, October 2004.
[7] E. Gamma, R. Helm, R. Johnson, and J. Vlissides. Design Patterns:
Elements of Reusable Object-Oriented Software. Addison-Wesley
Professional Computing Series. Addison Wesley, 1st edition, 1994.
[8] E. R. Gansner and S. C. North. An open graph visualization system
and its applications to software engineering. Software Practice and
Experience, 30(11):1203–1233, 1999.
[9] J. Heer and M. Agrawala. Software design patterns for information visualization. IEEE Transactions on Visualization and Computer
Graphics, 12(5):853–860, September/October 2006.
[10] J. Heer, S. K. Card, and J. A. Landay. prefuse: A toolkit for interactive
information visualization. In Proceedings of the Conference on Human Factors in Computing Systems (CHI), pages 421–430, Portland,
OR, April 2005. ACM Press.
[11] J. Heer, J. D. Mackinlay, C. Stolte, and M. Agrawala. Graphical histories for visualization: Supporting analysis, communication, and evaluation. IEEE Transactions on Visualization and Computer Graphics,
14(6):1189–1196, November/December 2008.
[12] R. Helm and K. Marriott. A declarative specification and semantics
for visual languages. Journal of Visual Languages & Computing,
2(4):311–331, 1991.
[13] N. Henry, J.-D. Fekete, and M. J. McGuffin. NodeTrix: A hybrid visualization of social networks. IEEE Transactions on Visualization and
Computer Graphics, 13(6):1302–1309, November/December 2007.
[14] M. L. Huang. Information visualization of attributed relational data. In
Proceedings of the 2001 Asia-Pacific Symposium on Information Visualisation (APVis), pages 143–149, Darlinghurst, Australia, Australia,
2001. Australian Computer Society, Inc.
[15] M. L. Huang, Q. V. Nguyen, and T. Hintz. Attributed graph visualization of collaborative workspaces. In International Conference on

82

[22]

[23]

[24]

[25]

[26]

[27]

[28]
[29]

[30]
[31]

[32]

[33]

[34]

[35]

[36]

[37]

Computer Graphics, Imaging and Vision: New Trends (CGIV), pages
155–161, July 2005.
X. Huang, P. Eades, and W. Lai. A framework of filtering, clustering
and dynamic layout graphs for visualization. In Proceedings of the
Australasian Conference on Computer Science (ACSC), pages 87–96,
Newcastle, Australia, 2005. Australian Computer Society.
T. J. Jankun-Kelly, M. Kwan-Liu, and M. Gertz. A model and framework for visualization exploration. IEEE Transactions on Visualization and Computer Graphics, 13(2):357–369, March-April 2007.
G. E. Krasner and S. T. Pope. A cookbook for using the model-viewcontroller user interface paradigm in Smalltalk-80. Journal of ObjectOriented Programming, 1(3):26–49, August 1988.
J. D. Mackinlay, P. Hanrahan, and C. Stolte. Show Me: Automatic presentation for visual analysis. IEEE Transactions on Visualization and
Computer Graphics, 13(6):1137–1144, November/December 2007.
C. North, N. Conklin, K. Indukuri, and V. Saini. Visualization
schemas and a web-based architecture for custom multiple-view visualization of multiple-table databases. Journal of Information Visualization, 1(3-4):211–228, December 2002.
J. O’Madadhain, D. Fisher, S. White, and Y. B. Boey. The JUNG (Java
universal network/graph) framework. Technical report, University of
California, Irvine, 2003.
A. Perer and B. Shneiderman. Balancing systematic and flexible exploration of social networks. IEEE Transactions on Visualization and
Computer Graphics, 12(5):693–700, September/October 2006.
A. J. Pretorius and J. J. van Wijk. Visual inspection of multivariate
graphs. In Computer Graphics Forum, volume 27, pages 967–974.
Eurographics Association, 2008.
R. Shannon, T. Holland, and A. Quigley. Multivariate graph drawing using parallel coordinate visualisations. Technical Report 3020,
University College Dublin, 2008.
J. Stasko, C. G¨org, and Z. Liu. Jigsaw: Supporting investigative
analysis through interactive visualization. Information Visualization,
7(2):118–132, 2008.
M. Streit. Interactive visualization of complex graphs. In Proceedings
of the Central European Seminar on Computer Graphics (CESCG),
Slovakia, April 2007.
J. J. Thomas and K. A. Cook, editors. Illuminating the Path: The Research and Development Agenda for Visual Analytics. IEEE Computer
Society, August 2005.
C. Tominski, J. Abello, and H. Schumann. CGV–an interactive graph
visualization system. Computers & Graphics, 33(6):660–678, 2009.
M. O. Ward. XmdvTool: Integrating multiple methods for visualizing
multivariate data. In Proceedings of the IEEE Conference on Visualization (VIS), pages 326–333. IEEE Computer Society Press, 1994.
C. Ware and R. Bobrow. Supporting visual queries on medium-sized
node-link diagrams. Information Visualization, 4(1):49–58, 2005.
C. Weaver. Building highly-coordinated visualizations in Improvise.
In Proceedings of the IEEE Symposium on Information Visualization
(InfoVis), pages 159–166, Austin, TX, October 2004.
C. Weaver. InfoVis 2007 contest entry: Cinegraph. In Proceedings
of the IEEE Symposium on Information Visualization (InfoVis) (Compendium), Sacramento, CA, October 2007.
C. Weaver. Cross-filtered views for multidimensional visual analysis. IEEE Transactions on Visualization and Computer Graphics,
16(2):192–204, March-April 2010.
C. Weaver, D. Fyfe, A. Robinson, D. W. Holdsworth, D. J. Peuquet,
and A. M. MacEachren. Visual exploration and analysis of historic
hotel visits. Information Visualization, 6(1):89–103, February 2007.
G. J. Wills. NicheWorks: Interactive visualization of very large
graphs. Journal of Computational and Graphical Statistics, 8(2):190–
212, June 1999.
P. C. Wong, G. Chin, Jr., H. Foote, P. Mackey, and J. Thomas. Have
Green – a visual analytics framework for large semantic graphs. In
Proceedings of the IEEE Symposium on Visual Analytics Science and
Technology (VAST), pages 67–74, Baltimore, MD, October 2006.
S. Zhao, M. J. McGuffin, and M. H. Chignell. Elastic hierarchies:
Combining treemaps and node-link diagrams. In Proceedings of the
IEEE Symposium on Information Visualization (InfoVis), pages 57–64,
Minneapolis, MN, October 2005.

