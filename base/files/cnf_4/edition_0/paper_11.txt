SideKnot: Revealing Relation Patterns for Graph Visualization
Dichao Peng∗

Neng Lu†

Wei Chen‡

Qunsheng Peng§

State Key Lab of CAD&CG, Zhejiang University

A BSTRACT
Graph is an intuitive and powerful tool to present relationships
between entities. Efficiently visualizing graphs with node-link
diagrams is a great challenge due to visual clutter induced by edge
crossing and node-edge overlapping. Many edge bundling methods
are proposed to disclose high-level edge patterns. Though previous
methods can successfully reveal the coarse graph structure, the
relation patterns at individual node level can be overlooked. In
addition, many edge bundling algorithms are computationally complex to prevent them from scaling up for extremely large graphs. In
this paper, we propose SideKnot, an efficient node-based bundling
method to cluster and knot edges. SideKnot is light, runs faster than
most existing algorithms, and can disclose the relation patterns of
an individual node such as its standing in the graph and pattern of
relations with its neighbors.
Index Terms:
I.3.3 [Computer Graphics]: Picture/Image
Generation—Line and curve generation I.3.5 [Computer Graphics]:
Computational Geometry and Object Modeling—Hierarchy and
geometric transformations
1 I NTRODUCTION
Graphs have been widely used to depict relationships between entities in many application areas, such as social networks, transportation networks, software systems and computer networks. These
heterogeneous relations can be modeled by simple node-link diagrams, in which nodes represent data objects and links depict their
interrelations. With the number of nodes and edges increasing,
visual clutter quickly becomes an obstacle for effective visualization: excessive edge crossing and node-edge overlapping can
prevent human from understanding the information and discovering
underlying patterns among the relations.
To better illustrate the challenge, we will use a graph in the
context of wireless network monitoring as an example. Figure 1
shows a snapshot of trust relations between computing nodes in
a simulated wireless network. The network is composed of 50
nodes, where the grey grids in the background indicate network
connectivity between them. The computing nodes help each other
route network packets along the grey grids and adjust their trust
upon others based on whether a packet transmission is successful
or failed. Encoding the trust level with a color gradient bar in
the lower part of Figure 1, we display the trust relations between
these computing nodes in a simple node-link diagram. With a
large number of edges crossing each other, it is difficult to discover
patterns in the highly cluttered graph. For example, the trust
relations with node A or node B are buried in many other crossed
edges. It is not clear to the network administrator how node A or
node B is trusted by its peers, which is important to help diagnose
the encountered scenario to identify possible attack schemes.
∗ e-mail:

pengdichao@cad.zju.edu.cn
† freeneng@zju.edu.cn
‡ chenwei@cad.zju.edu.cn
§ peng@cad.zju.edu.cn

IEEE Pacific Visualization Symposium 2012
28 February - 2 March, Songdo, Korea
978-1-4673-0866-3/12/$31.00 ©2012 IEEE

Visual clutter shown in this example is a common problem of
graph drawing in many other application areas, such as airline
routes between cities and relations in social networks. Graph
clutter reduction has been extensively studied by the graph drawing
community. There are several research directions to address this
challenge.
First, the layout of nodes can be arranged to get them uniformly
scattered on the graph. This can be achieved by various methods
such as simulating forces to direct the layout [2, 7, 8], iteratively
forming Voronoi diagrams to remove overlap [17], using hierarchical space decomposition method [20]. While these approaches
are effective, in some applications such as trust graph monitoring
and airline routes visualization, the position of a node has semantic
meaning and it may be inappropriate to adjust the layout.
Secondly, interactive visualization systems [18, 24, 25] are
proposed to help users explore graphs, usually combined with
focus-plus-context scheme to balance between high-level structures
and local details. In [18], navigation schemes are proposed to help
users easily find correlative nodes and smoothly navigate from node
to node in large graphs. The EdgeLens approach [25], on the other
hand, adopts a spline-based technique to make edges disperse from
user defined area to achieve decluttering in a localized area.
Another promising approach to reduce visual clutter is edge
bundling [5, 9, 10, 12, 13, 14, 15, 26]. In this line of research, edges
that are similar with each other in some sense (proximity, angle,
length etc.) are merged into a bundle, in which they share part of
their routes. Bundling edges can greatly reduce visual clutter and
disclose high-level edge patterns of the graph. More detailed review
of edge bundling approaches will be discussed in Section 2.
In this paper, we follow the same line of research by bundling
edges to reduce visual clutter. Existing edge bundling approaches
imitate the process of fanning electrical wires into a bundle and
fanning them out at the other end. This greatly helps revealing the
coarse structure of the graph, but can sometimes overlook relation
patterns at the node level. In some applications, it is more important
to show the connection trends of a node or a group of nodes rather
than revealing the network structure. For example, in the trust
graph monitoring context (Figure 1), the network administrator is
especially concerned about how one node is trusted by its peers,
while the skeleton structure of the graph is of less significance.
Our approach is partly motivated by the challenge of trust graph
visualization. The idea is, instead of knotting edges in the middle
and fanning them out on both sides, we can move the knot from the
middle of the edge to the node side. In this way the connections to
individual nodes can be clearly visualized while we still preserve
the high-level structural patterns. Hence we name our node-based
bundling method SideKnot. Compared with conventional edge
bundling approaches, SideKnot has the following merits:
• Revealing Relation Patterns of Individual Nodes. As the
name suggests, SideKnot bundles edges at the node side
to disclose relation patterns at the individual node level.
This distinguishes SideKnot from existing edge bundling
techniques that are specialized at revealing coarse structure
of the graph.
• Handling Directed and Weighted Graphs. SideKnot can
process and well present the direction and/or weight of edges,

65

A

highly distrusted

neutral

B

highly trusted

Figure 1: Original unbundled graph of 2263 trust relations between
50 nodes in a wireless network. The grey grids in the background
shows wireless connectivity between the nodes, while the colored
lines are their trust relations established upon packet transmission
along the wireless links. The lower color gradient bar is used to
encode the low-to-high trust level.

showing directional patterns and making edges with extraordinary weight stand out on the visualization.
• Light-weighted algorithm. As will be explained in Section
4.2, our light-weighted algorithm makes it possible to process
extremely large graphs that many edge bundling approaches
can not handle. The feature of low computational complexity
also opens the time window to bundle edges in real time for
medium sized graphs. This is a desired feature for applications like real-time trust relation monitoring. In addition,
SideKnot requires a constant recalculation time when an edge
is added to or removed from the graph, which once again suits
the need of real-time rendering of time-varying graphs.
• User Interaction. Interactive graph exploration is well
supported by our approach. Besides traditional user interactions such as selecting, highlighting, zooming and panning,
SideKnot can also integrate with interactive graph exploration
techniques [18, 21, 24, 25].
The remainder of this paper is organized as follows. In Section 2
we give an overview of previous edge bundling approaches. Section
3 illustrates the design of SideKnot in detail, followed by Section 4,
in which we show and explain visualization result of SideKnot and
provide a performance evaluation. Finally, Section 5 concludes the
paper and gives possible directions for future work.
2 R ELATED W ORK
General graph clutter reduction has been extensively studied by
the graph drawing and information visualization communities. We
have introduced the node layout adjustment and interactive-based
approaches in Section 1. In this section, we will review edge
bundling approaches, as they are most related to our method. For

66

more thorough surveys on general clutter reductions, please refer to
[6, 23].
Flow map layout [19] is one of the pioneers to cluster similar
edges into bundles in order to reveal the flowing trend from a single
source to multiple destinations. By curving and merging edges,
flow map automatically builds a binary tree with the single source
as the root and generates hierarchical structure based on the leaf
positions. Encoding the edge weights with line width, it presents
a clear flow distribution to the user. A limitation of flow map lies
in its difficulty to present multiple one-to-many flows at the same
time: the visualization can quickly get cluttered when multiple flow
maps are drawn on top of each other.
Hierarchical Edge Bundling (HEB) [12] is proposed to bundle
edges in graphs with defined hierarchy. HEB takes advantage of
the hierarchical structure of a graph to define a set of control points,
which generate B-spline curves fitting toward the polyline paths
defined by the hierarchy. As its name suggests, HEB requires a
graph to have hierarchical structure, which makes it not applicable
to general graphs.
Cui et al. [5] proposes one of the first edge bundling methods suitable for general graphs. In their Geometry Based Edge
Bundling (GBEB) method, a mesh is built to discretize the plane
into small grids, in which edges of similar orientation are aggregated to form bundles. This method may create curvature variations,
which can make edge bundles hard to follow by users [13].
A Force-Directed Edge Bundling (FDEB) algorithm [13] is
proposed by Holten and van Wijk to create a more smooth bundling
effect. The FDEB algorithm defines forces between edges that
attract each other. Simulated forces between well defined “similar”
edges are calculated to direct the bundling process. Although the
concept of FDEB is simple, its computational complexity is high
due to the many-to-many force calculation between edges.
Lambert et al. [15] approach the edge bundling problem using
a mesh based algorithm. An irregular weighted mesh is built upon
the original graph, from where each edge finds a shortest path on
the mesh to be winded from the source to its target. The algorithm
is reported to be faster than FDEB [13], but its ability to process
large graphs is not tested.
To address the scalability problem, Gansner et al. proposed a
fast algorithm named MINGLE [9]. Based on the edge positions,
MINGLE builds an edge proximity graph to model their similarities. Edges closest to each other on the edge proximity graph
are bundled in a recursive fashion. The amount of ink needed to
draw edges is used to measure if a bundling process is effective
and eventually controls the termination of the algorithm. MINGLE
runs in O(|E|log|E|) time, where |E| is the number of edges. This
effectively elevates edge bundling algorithms to be able to process
graphs with millions of edges in reasonable time. Moreover, it
opens the time window to process (medium sized) time-varying
graphs [3] in a real time fashion.
3

S IDE K NOT: K NOTTING E DGES AT N ODE S IDE

Existing edge bundling methods operate as if virtual knots tighten
a number of similar edges in the middle, which forms the skeleton
of the graph structure. SideKnot, as its name suggests, moves the
virtual bundling knot from the middle-body of the edge to the node
side. Thus edges connecting the same node are visually bundled
together to help us discover possible relation patterns at individual
node level.
Figure 2 shows the processing pipeline of SideKnot. Firstly we
cluster the edges connected to each node based on their orientations.
Then the edges belonging to the same cluster are bundled with
splines. Finally we optimize the visualization by adjusting edge
transparency, in order to emphasize the edge head and/or tail to
fulfill demand of the application.

α

Edge
Clustering
Original graph

Edges grouped
into four clusters

Spline
Controlled
Bundling

Transparency
Adjustments

Edges knotted at node side

Visualization result

Figure 2: Processing pipeline of SideKnot. Edges are colored for illustration purpose only.

group into
cluster ? If α<diff and β<limit
Merge into old cluster

β

C2
N2

α
Otherwise
Create new cluster

N1

C1

C2

Figure 3: The clustering algorithm.

N2

3.1 The SideKnot Algorithm
N1

C1

3.1.1 Edge Clustering
The first step of SideKnot is to group edges connected to each node
into several clusters according to their directions. Although the
popular K-means algorithm can easily achieve this goal, its computational complexity is not optimal: as the pairwise distance (in
terms of separation angle) between all edges has to be recalculated
for each iteration round, it is hard to scale up for extremely large
graphs.
Here we propose to use a simple but effective clustering method.
The algorithm starts by finding two edges with minimal separation
angle, which will form the first cluster. As illustrated in Figure
3, this cluster will grow by adding a new neighboring edge if
both of the following two conditions are met: 1) the separation
angle between the new edge and its closest neighbor in the cluster
must not exceed a predefined value diff ; 2) if the edge is added
to the cluster, the angle covered by the cluster must not exceed
a predefined value limit. If any of the conditions is not met, a
new cluster will be created. From figure 3 we can see that diff
and limit are two parameters used to tune the level of clustering,
where diff defines the maximum intra-class difference between
edges while limit puts a limit to the maximum angle covered by a
single cluster. Compared with K-means, this method only requires a
pre-sort of edges connected to each node, which takes significantly
less computation time.
Note that the description above assumes that the graph is undirected. For directed graph, users may have pre-existing interests on
the incoming-only, outgoing-only or both-way connection patterns,
depending on the nature of application. For example, in trust-graph
monitoring, users may be specifically interested to find out how a
node is trusted by its peers, which requires highlighting incoming
connections only. On the other hand, for the people migration
graph, we may be interested to find out how humans migrate into
and out of a city. In this case, when both-way connection pattern
is desired, we need to perform edge clustering for incoming and
outgoing edges separately.

Figure 4: Spline-controlled edge bundling process. Up: an edge (in
bold) is connecting nodes N1 and N2 ; this edge belongs to the red
clusters for node N1 and N2 , respectively; we find control points C1
and C2 along the average direction of both clusters. Down: a spline
(in bold) is generated with control points C1 and C2 .

3.1.2 Spline-Controlled Edge Bundling at Node Side
After the edges connected to each node are properly clustered, we
generate a spline to bundle edges of the same cluster at the node
side. We will illustrate this process in Figure 4, using the bold red
edge connecting nodes N1 and N2 as an example. As shown in the
figure, after the last step, this edge is grouped into two clusters at
its source and target node side, respectively.
The bundling process begins by finding the average directions of
both clusters, showing as dot dash lines in Figure 4. This average
direction can be either calculated as the arithmetic mean or median
value of the edge angles within the cluster. Along the average
directions, we find two control points (e.g. C1 and C2 ) for each
edge, with their distances to the corresponding nodes (e.g. N1 and
N2 ) proportional to the length of the actual edge:
DC1 N1 = DC2 N2 = λ DN1 N2

(1)

where λ ∈ [0, 1] is a user-definable bundling strength factor. The
larger value of λ , the further the control point is away from the
node. When λ falls close to 0, the control point almost stacks
with the node, leading to a visually trivial bundling effect. On the
other hand, if a larger λ is chosen, the spline is pulled closer to the
average direction, yielding a tighter bundle. However, when λ is
too large (usually larger than 0.5), the generated spline will become
zigzagged and visually unpleasant.
The choice of spline can be selected from many existing spline
functions such as cubic Bezier spline, B-spline and Hermite spline.
The figures and results throughout this paper are generated with

67

cubic B-spline, for the ease of adding additional control points to
integrate with interactive edge dispersing approaches, as will be
explained in Section 3.3. Our experiments show that similar results
can be generated with Bezier spline as well.

PN
C
Pi+2

3.2 Transparency based Optimizations
A naive implementation of our approach can reveal the relation
patterns in a highly cluttered graph. But in some graphs, edge
crossing can still cause “webbing” style clutter, especially in areas
with high edge density. In fact, due to our bundling strategy (at
node side rather than edge body), the amount of ink saving [9]
of SideKnot varies from 1% to 10%, which may not be sufficient
enough to reduce cluttering for some graphs. In this section, we
introduce a transparency based optimization scheme to weaken the
webbing effect and make user-interested information stand out.
This optimization is a trade-off at the cost of possible loss of
information by reducing the transparency of edge body. Though
this optimization should be used carefully, we will show that it
indeed helps emphasize connection patterns at the individual node
level.
The specialty of SideKnot lies in its ability to present directional
relation patterns of individual nodes. Due to its edge clustering and
bundling schemes, the two sides of an edge are more informationrich about the orientation of a cluster than the middle-body. Based
on this assumption, we propose a scheme to visually emphasize the
head and tail of an edge by adjusting the transparency of different
segments of a spline.
Assume we draw each spline using a broken line of N segments,
with numerical IDs from 0 to N − 1. In a 1600 by 900 resolution,
a typical value of N=20 would be sufficient to smoothen the curved
lines. For undirected graphs, we would like to draw the middlebody more transparent than both sides. The transparency of a spline
segment can be adjusted as a polynomial function of the segment
ID:
(
)p
2
N −1 p
αseg (ID) = (1 − b)
ID −
+b
(2)
N −1
2
where p 0 and 0 b 1 are user-definable parameters. A larger
value of p makes the transparency drop faster along the spline,
while b defines the minimal transparency of the edge in the middle.
For directed graphs, the user may be more interested in the
destination of an edge than its source, or vice versa. For example, in
the application of trust graph monitoring, users are concerned about
how a given node is trusted by its peers, rather than how it trusts
others. Similar to Equation 2, but just to emphasize the destination
side1 of an edge, the transparency can be calculated as follows:
)p
(
ID
αseg (ID) = (1 − b)
+b
(3)
N −1
Note that p, b and N in Equation 2 and 3 are constants while ID is a
discrete variable with limited number of values: ID ∈ {0, 1, ..., N −
1}. We can easily calculate αseg (ID) for all IDs and store them into
a lookup table for later references. This effectively brings down the
calculation cost of this optimization to a neglectable level.
The transparency adjustment serves as focus+context scheme to
refine the visualization result: while the actual context of every
single edge is reserved (and fades out) in the visualization, the edges
are highlighted at the node side to generate effective emphasis on
the connection direction patterns. This feature is especially helpful
in applications where such patterns are of user interests. Examples
of such applications include trust graph monitoring, where users
want to find out if a node is specifically distrusted by a group of
nodes resided at similar locations (as will be shown later in Figure
1 To stress the source side,

be easily derived.

68

similar transparency adjustment functions can

Pi+3

Pi+1
E

r

Pi

P0
Figure 5: Illustration of the edge dispersing process. A spline is
broken into N line segments P0 P1 ...PN . User defines EdgeLens center
E and its radius of influence r. All line segments with distance to E
less than r are dispersed by adding control point C.

7). However, this transparency optimization is a trade-off at the
cost of possible information loss: by reducing the visibility of edge
body, it can be hard for users to perform tasks such as following
a specific edge from source to target. For this reason, we suggest
carefully taking advantage of this transparency adjustment. When
following an edge from end-to-end is a crucial task in the graph
application, a higher b should be chosen to best avoid information
loss. On the other hand, if the edge integrity is trivial to the
application or task, the user can tune down b to let the connection
direction patterns pop-up in the visualization.
3.3 Interactive Graph Explorations
Besides edge crossing, node-edge overlapping is another major
source of visual clutter in graph drawing. Interactive schemes such
as EdgeLens [25] are specially designed to target this problem
and can effectively remove the overlapping in a user-definable
localized area. Apart from simple user interaction techniques such
as select, highlight, zoom and pan, our approach can seamlessly
integrate with EdgeLens and many other interactive graph exploration schemes such as [18, 21, 24]. In this section we will illustrate
how our approach can incorporate a slightly-modified version of
EdgeLens while maintaining the feature of our generated edge
bundling result.
Figure 5 illustrates the process of making edges disperse from
a user defined central point. In this example we assume the spline
has been generated by SideKnot, in the form of a broken line of
N segments P0 P1 ...PN . We let user define a center point E and its
radius of influence r, where all line segments with a distance to
E less than r will be dispersed away from E. For example, line
segment Pi+1 Pi+2 is within the radius of influence of E. So we cast
a perpendicular ray from E towards Pi+1 Pi+2 , on which we will add
a control point C to achieve the displacement. The distance from
C to E, DCE , is affected by the user-specified magnitude parameter
of EdgeLens, which in turn affects the level of dispersing of the
recalculated spline P0′ P1′ ...PN′ .
The differences between EdgeLens and our implementation are
twofold. Firstly, instead of adding two control points next to C,
we use only one control point to achieve the displacement. Our
results show that one control point per line segment is sufficient to
pull the edges away and creates less zigzag effects. Secondly, when
multiple consecutive segments of a spline are within the radius of
influence of E, we only add one control point to disperse the edge.
Figure 6 shows the result of edge dispersing on the bundled U.S.
airline graph. In Figure 6(a), a node is blocked by a bundle of edges
and it is hard for naked eyes to see the blocked node and the route

(a)

(b)
Figure 6: Integration with EdgeLens [25]. (a)Part of the bundled
result of the U.S. airline graph. A node is blocked by a bundle of
edges. (b) Edges dispersed from a user-defined point (green dot).

connections to its peers. With the help of edge dispersing from a
user defined point (green dot in Figure 6(b)), the localized area is
distorted to clear up space near the blocked node. Note that the user
may or may not know the existence of the blocked node beforehand.
But with the help of interactive graph exploration tools provided by
SideKnot, we can easily find such node-edge overlapping.
4 R ESULTS
In this section we will present and explain the results of SideKnot
on different graphs and provide performance analysis of our algorithm. Section 4.1.1 shows the bundling result of trust graph that
we introduced earlier. Section 4.1.2 presents and compares results
of the popular U.S airline dataset studied by existing approaches.
Then Section 4.1.3 shows our visualization result on a relatively
larger dataset. We will demonstrate how our technique can work
with directed, undirected and/or weighted graphs and explain the
visual patterns in the bundled results. Finally a performance study
will be provided in Section 4.2.
4.1 Visualization Examples and Comparison
4.1.1 The Trust Graph
As mentioned in Section 1, SideKnot is partly motivated by the
application of monitoring a time-varying trust graph in wireless
network, where users are more concerned about relation patterns
of individual nodes rather than the coarse graph structure.
Figure 7 shows our visualization result of the original trust
graph in Figure 1. Same as in Figure 1, two graphs are displayed
simultaneously on the visualization: 1) the network connectivity
graph (grey grids in the background), showing whether two nodes
can directly communicate with each other and 2) the trust graph
(red and green lines), representing the trust relations between these
nodes, which are established gradually upon successful or failed
network packet transmissions.
Although the original unbundled graph can show that node A and
B are distrusted by some nodes, the bundled result (Figure 7(a))
further reveals the directional patterns of the relations: node A is

distrusted by nodes from the lower part of the network, whereas
node B receives negative trust evaluations mostly from the upper
left corner. This pattern can be made clearer when user selects node
B for highlight (as shown in Figure 7(b)). The trust relation scenario
can be further investigated by the network administrator in order to
provide forensics explanations. For example, the distrusted node
may be an attacker performing conflicting behavior attack [22], or
it can be a good node framed by bad mouthing attacks casted from
dishonest recommendations [16].
In addition, Figure 7 also reveals that many nodes along the
network boundaries (e.g. node C, D and E) receive noticeably less
trust evaluations than nodes in the center of the network, a pattern
hard to be discovered from the original graph. This phenomenon
originates from the fact that the route selection policy always
favors routes with shortest path. Under this policy, nodes in the
center of the network have better chances to be selected as route
stations, thus accumulate more trust evaluations than nodes along
the boundaries. As a result, this unfairness of route selection policy
is easily identified by examining the trust graph with SideKnot.
On the other hand, node F and G are also on the boundary of
the network. But compared with node C, D and E, they receive
significantly more trust evaluations from the rest nodes. This
can be explained by the network connectivity topology. On the
connectivity graph, node F and G are cut vertices according to
graph theory, whose removal will make the graph disconnected
[4]. In other words, edge F-G connects two subgraphs, whose
intercommunications solely rely on this connection. Thus, node
F and G are frequently selected as route stations and hence receive
more trust evaluations than node C, D and E.
Besides pattern revealing, another challenge raised by the trust
graph monitoring application is real-time rendering. With the
movement of wireless computing nodes, the connection topology
of the wireless network changes in real-time and their trust relations
updates with every packet transmission. In order to identify threats
for fast countermeasure, the visualization need to be rendered as
fast as possible. As will
( be shown
) in Section 4.2, our light-weighted
|E|
algorithm runs in O |E|log |V | time, which can process graphs
with thousands of edges in less than 0.1s.
4.1.2 The U.S. Airline Route Graph
Figure 8 compares visualization results of a graph widely studied
by existing edge bundling approaches [5, 9, 13], a layout of 2101
airline routes between 235 cities within the continental U.S.
Compared with the original graph, the result generated by GBEB
[5] (Figure 8(b)) forms several strong bundles in horizontal and
vertical directions, which shows the coarse structure of the network.
One limitation of GBEB lies in its lack of abilities to identify the
start and end points of a given edge or bundle due to high curvature.
FDEB [13] skips unnecessary bundling by defining the similarity
between a pair of edges: edges are bundled when they are similar
enough. The bundling performed by FDEB (Figure 8(c)) shows less
curvature and can also reveal the skeleton of the network structure.
The goal of SideKnot is to disclose the connection patterns of
individual nodes rather than to present the network structure. As
shown in Figure 8(d), the route directions of most individual nodes
are revealed by our approach. For example, we can see that many
middle-western cities (e.g. HDN, EGE, DEN, COS etc.) have
more routes to the east than ones to the west, which suggests their
stronger connections with the eastern part of U.S. This pattern can
not be easily identified from the original graph or existing bundling
results.
As another example, in the middle-southern area (Texas), the
connection patterns between SAT, AUS and HOU are very different: while the airline routes of SAT and AUS mostly connect to
northeastern cities, HOU shows an additional bundle of routes to

69

F

F

B

A

B

A
G

G

C
D

C
D

E

E
(b)

(a)
highly distrusted

neutral

highly trusted

Figure 7: Bundled result for trust graph (Figure 1). (a) Bundled result. (b) Node B is selected by user and its trust relations get highlighted.

(a)

(b)

HDN
DEN
EGE

(c)

AUS
COS

SAT

HOU

(d)

Figure 8: Edge bundling for U.S. airline route graph. (a) Original graph with 235 nodes and 2101 edges. (b) Bundled with GBEB [5]. (c) Bundled
with FDEB [13]. (d) Bundled with our method. Our visualization shows a number of middle-western cities (e.g. HDN, EGE, DEN, COS and more)
have more routes to the east than to the west, suggesting their stronger connections with the eastern part of U.S.

70

dataset
U.S. airlines
yeast
migration
world airlines
wiki-vote
net50
amazon0302
net100
net150
Stanford
pattern1

the west. This suggests that HOU acts as a major route station
between east and west U.S. in the southern area.
4.1.3 The World Airline Route Graph
Figure 9 shows results of applying SideKnot on a larger graph,
the world airline routes (6630 nodes and 58278 edges). With a
large number of edges plotted on a relatively small canvas, the
visual clutter is overwhelming. After bundling (Figure 9(b)), the
clutter is greatly reduced. But in areas of high node and edge
density (e.g. eastern U.S. and western Europe), naked eyes are
not able to tell connection patterns of individual nodes due to low
resolution. Figure 9(c) and (d) zoom in the areas near New York
and Amsterdam and highlight flights connecting to nodes JFK and
AMS, respectively. In the enlarged view, connection patterns are
clearly disclosed by the bundling result.
As a summary of visualization results of our approach, it is
specialized at revealing relation patterns for individual nodes, but
provides less coarse graph structure than existing edge bundling
methods. Though our raw bundling result can exhibit more
“webbing” effects, the clutter caused by edge crossing is effectively
reduced by our transparency adjustment methods to make the
connection trends of individual nodes stand out from the graph.
4.2 Performance Study
We have presented the visualization results of SideKnot in the
previous sub-section. As we discussed, SideKnot runs fast for
medium-sized graphs and can scale up for extremely large graphs.
In this section, we will give a quantitative analysis of the computational complexity of our method and compare its performance
against existing approaches.
Assume we are working with a simple undirected graph G =
(V, E), with |V | vertices and |E| edges. The complexity of SideKnot
is largely determined by the complexity of the edge clustering step2 ,
during which we need to sort the edges connected to each vertex.
In the best case, all edges are uniformly distributed across all
vertices, making the number of edges connected to each vertex
2|E|
equal to |V | . A sorting algorithm (e.g. merge sort in any case
(
)
2|E|
2|E|
or quick sort in average case) would take O |V | log |V | time
(
)
2|E|
to execute, yielding a total execution time of O 2|E|log |V | (or
(
)
|E|
O |E|log |V | after constant removal) for all nodes. On the other
hand, in the worst case, the edge distribution is concentrated at as
less central nodes as possible. In the worst scenario, we have to
sort all edges altogether, which takes O(|E|)log(|E|) time. In realworld graph scenarios, we may observe small-world graphs, graphs
following power-law degree distribution, complete graph, etc. As
will be shown shortly, in the field our algorithm is among the fastest
in existing edge bundling approaches[5, 9, 10, 12, 13, 14, 15, 26].
We implemented SideKnot in C++ with OpenGL for rendering.
For better comparison with other algorithms, we tried to measure
the performance of SideKnot on a platform most similar to the one
used by [9]. We timed the running speed of SideKnot on an Intel
Core(TM)2 Duo E4500 @2.20 GHz processor with 8GB RAM and
a GeForce GTX275 graphics card. Table 4.2 shows the execution
time of SideKnot with comparisons to MINGLE [9], FDEB [13]
and GBEB [5] on different datasets. As can be seen from the table,
SideKnot is able to bundle graphs substantially faster than FDEB
and GBEB. Our algorithm achieves the same level of processing
speed as MINGLE for small-to-medium sized graphs, but performs
better on larger graphs, due to its low computation complexity.
2 The

spline generating and transparency adjustment steps both requires
linear computation time for a single edge, leading to an O(|E|) complexity.

|E|
SideKnot MINGLE FDEB GBEB
2101
0.1
0.1
18.8
2.5
6646
0.6
0.9
9780
0.8
1.0
76.9
12.9
58278
5.4
100762
8.6
18.4
464440 46.9
87.1
899792 85.3
277
1001640 96.1
204
1538840 139.2
355
1992636 185.0
404
4652095 436.6
1049
-

Table 1: CPU time (in seconds) comparison between SideKnot and
other edge bundling algorithms. The performance of MINGLE, FDEB
and GBEB are reported by [9, 13] and are measured on platforms
similar to our test bed. The layouts of all graphs except U.S. airlines,
migration and world airlines are generated with sfdp from Graphviz
[11], which are the same as MINGLE.

5

C ONCLUSIONS AND F UTURE W ORK

In this paper we present SideKnot, a novel and intuitive edge
bundling method specialized at revealing relation patterns of individual nodes. SideKnot effectively reduces visual clutter and
emphasizes connection trends at the node level. Our light-weighted
algorithm with low computational complexity can achieve realtime rendering for medium sized graphs and can scale up for large
graphs. In addition to that, SideKnot is geared with interactive
graph exploration techniques to help user explore the graph and
reduce node-edge overlapping in localized areas.
For future work, one interesting direction is to extend our
work from planar space to spherical space. Among the different
graphs studied by the graph drawing community, many of them
are projected from spherical space to planar space before bundling.
During the projection process, nodes close to each other in the
spherical space can be projected far apart. For example, in Figure
9, a short airline route connecting two islands on different sides of
the 180◦ longitude can be falsely represented by a very long edge
across the map. We plan to adapt our approach to the spherical
space and investigate clutter reduction under this condition.
In addition, reducing edge crossing and node-edge overlapping
also remains future work. On one hand, the webbing effect caused
by edge crossing can be further reduced at the cost of adding
additional control points to tighten the bundles. On the other
hand, we can use the same technique discussed in Section 3.3 to
make edges disperse away from all nodes to remove node-edge
overlapping. Both improvements involve adding more control
points, which may introduce zigzag effects and require more
computational resources. How to balance between better clutter
reduction and less side effects would be another interesting topic of
research.
ACKNOWLEDGEMENTS
We would like to thank the anonymous reviewers for their insightful comments. This work is supported by NSF China (Grant
60873123) and China Postdoctoral Science Foundation (Grant
2011M501004).
R EFERENCES
[1] OpenFlights: Flight Logging and Mapping. http://openflights.org/.
[2] F. Bertault. A force-directed algorithm that preserves edge crossing
properties. In Graph Drawing, pages 351–358. Springer, 1999.
[3] A. Casteigts, P. Flocchini, W. Quattrociocchi, and N. Santoro. Timevarying graphs and dynamic networks. Ad-hoc, Mobile, and Wireless
Networks, pages 346–359, 2011.

71

New York

Amsterdam

Moscow
Beijing

New York
Tokyo

Honolulu

Sao Paulo
Sydney

(a)

New York

Amsterdam

(c)

Moscow
Amsterdam

Beijing
Tokyo
Honolulu

Sao Paulo
Sydney
(b)

(d)

Figure 9: World airline route graph collected by openflights.org [1]. (a) Original graph with 6630 nodes and 58278 edges. (b) Bundled with our
method. (c-d) Zoom in near New York and Amsterdam with routes connecting JFK and AMS highlighted, respectively.

[4] G. Chartrand. Introductory graph theory, chapter Cut-Vertices and
Bridges, pages 45–49. Dover Publications, 1985.
[5] W. Cui, H. Zhou, H. Qu, P. Wong, and X. Li. Geometry-based edge
clustering for graph visualization. IEEE Transactions on Visualization
and Computer Graphics, pages 1277–1284, 2008.
[6] G. Ellis and A. Dix. A taxonomy of clutter reduction for information
visualisation. IEEE Transactions on Visualization and Computer
Graphics, pages 1216–1223, 2007.
[7] T. Fruchterman and E. Reingold. Graph drawing by force-directed
placement. Software:Practice and Experience, 21(11):1129–1164,
1991.
[8] E. Gansner and Y. Hu. Efficient node overlap removal using a
proximity stress model. In Graph Drawing, pages 206–217. Springer,
2009.
[9] E. Gansner, Y. Hu, S. North, and C. Scheidegger. Multilevel
agglomerative edge bundling for visualizing large graphs. In In
Proceedings of IEEE Pacific Visualization Symposium, pages 187–
194. IEEE, 2011.
[10] E. Gansner and Y. Koren. Improved circular layouts. In Graph
Drawing, pages 386–398. Springer, 2007.
[11] E. Gansner and S. North. An open graph visualization system
and its applications to software engineering. Software Practice and
Experience, 30(11):1203–1233, 2000.
[12] D. Holten. Hierarchical edge bundles: Visualization of adjacency
relations in hierarchical data. IEEE Transactions on Visualization and
Computer Graphics, 12(5):741–748, 2006.
[13] D. Holten and J. J. Van Wijk. Force-Directed Edge Bundling for Graph
Visualization. Computer Graphics Forum, 28(3):983–990, June 2009.
[14] A. Lambert, R. Bourqui, and D. Auber. 3d edge bundling for
geographical data visualization. In 14th International Conference
Information Visualisation, pages 329–335. IEEE, 2010.
[15] A. Lambert, R. Bourqui, and D. Auber. Winding roads: Routing edges
into bundles. Computer Graphics Forum, 29:853–862, 2010.

72

[16] Z. Liu, S. S. Yau, D. Peng, and Y. Yin. A Flexible Trust Model for
Distributed Service Infrastructures. IEEE International Symposium on
Object-Oriented Real-Time Distributed Computing, 0:108–115, 2008.
[17] K. Lyons, H. Meijer, and D. Rappaport. Algorithms for cluster
busting in anchored graph drawing. Journal of Graph Algorithms
Appl, 2(1):1–24, 1998.
[18] T. Moscovich, F. Chevalier, N. Henry, E. Pietriga, and J. Fekete.
Topology-aware navigation in large networks. In Proceedings of
the 27th International Conference on Human Factors in Computing
Systems, pages 2319–2328. ACM, 2009.
[19] D. Phan, L. Xiao, R. Yeh, P. Hanrahan, and T. Winograd. Flow Map
Layout. IEEE Symposium on Information Visualization, pages 219–
224, 2005.
[20] A. Quigley and P. Eades. Fade: Graph drawing, clustering, and visual
abstraction. In Graph Drawing, pages 77–80. Springer, 2001.
[21] M. Sarkar and M. Brown. Graphical fisheye views. Communications
of the ACM, 37(12):73–83, 1994.
[22] Y. Sun, Z. Han, and K. J. Liu. Defense of trust management
vulnerabilities in distributed networks.
IEEE Communications
Magazine, 46(2):112–119, February 2008.
[23] T. von Landesberger, A. Kuijper, T. Schreck, J. Kohlhammer, J. J.
van Wijk, J. D. Fekete, and D. W. Fellner. Visual Analysis of Large
Graphs: State-of-the-Art and Future Research Challenges. Computer
Graphics Forum, to appear.
[24] N. Wong and S. Carpendale. Using edge plucking for interactive graph
exploration. In Proc. of IEEE Information Visualization Symposium,
Poster Compendium, pages 51–52, 2005.
[25] N. Wong, S. Carpendale, and S. Greenberg. EdgeLens: An Interactive
Method for Managing Edge Congestion in Graphs. Information
Visualization, IEEE Symposium on, 0:7–58, 2003.
[26] H. Zhou, X. Yuan, W. Cui, H. Qu, and B. Chen. Energy-based
hierarchical edge clustering of graphs. In Pacific Visualization
Symposium, pages 55–61. IEEE, 2008.

