Visual Analysis of Large Graphs Using (X,Y )-clustering and
Hybrid Visualizations∗
Vladimir Batagelj

Walter Didimo

Giuseppe Liotta

University of Ljubljana
vladimir.batagelj@fmf.uni-lj.si

University of Perugia
didimo@diei.unipg.it

University of Perugia
liotta@diei.unipg.it

Pietro Palladino

Maurizio Patrignani

University of Perugia
palladino@diei.unipg.it

University Roma Tre
patrigna@dia.uniroma3.it

A BSTRACT
Many different approaches have been proposed for the challenging problem of visually analyzing large networks. Clustering is
one of the most promising. In this paper we propose a new
goal for clustering that is especially tailored to hybrid-visualization
tools. Namely, that of producing both intra-cluster graphs and
inter-cluster graph that are suitable for highly-readable visualizations within different representation conventions. We formalize
this concept in the (X,Y )-clustering framework, where Y is the
class that defines the desired topological properties of intra-cluster
graphs and X is the class that defines the desired topological properties of the inter-cluster graph. By exploiting this approach hybridvisualization tools can effectively combine different node-link and
matrix-based representations, allowing the users to interactively explore the graph by expansion/contraction of clusters without loosing their mental map. As a proof of concept, we describe the system VH Y XY (Visual Hybrid (X,Y)-clustering) that integrates our
techniques and we present the results of case studies to the visual
analysis of co-authorship networks.
Keywords: Large Graphs, Graph Clustering, Hybrid Visualization, Visual Analytics.
Index Terms:
G.2.2 [Mathematics of Computing]: Discrete Mathematics—Graph Theory; H.5.2 [Information Systems]:
Information Interfaces and Presentation—User Interfaces; I.3.6
[Computing Methodologies]: Computer Graphics—Methodology
and Techniques; I.5.3 [Computing Methodologies]: Pattern
Recognition—Clustering;
1 I NTRODUCTION
Due to the huge amount of relational data handled by modern information systems in many application domains, the need of tools
that support humans in the visual inspection of these data is rapidly
growing. For this reason, the problem of visually analyzing large
graphs and networks has received an incredible amount of attention
in the last decade, but the design of efficient and effective solutions
remains a problem only partially solved. In particular, this problem
poses two major challenges: (i) The most effective algorithms designed in the graph drawing area are conceived to compute aesthetically readable layouts for relatively small and sparse graphs, and
often they do not scale well on graphs having hundreds or thousands of vertices [13, 29]; (ii) there is an intrinsic difficulty of the
human mind to interpret big amounts of visual data at a whole; this
implies that systems for the visual analysis of large graphs must
∗
The research in this paper began at Dagstuhl Seminar No. 08191
“Graph Drawing with Applications to Bioinformatics and Social Sciences”,
May 2008.

IEEE Pacific Visualisation Symposium 2010
2 - 5 March, Taipei, Taiwan
978-1-4244-6686-3/10/$26.00 ©2010 IEEE

be necessarily equipped with interaction methods that allows for
an overview of the graph and for an incremental exploration of the
data while maintaining the visual complexity of the diagram low
(see, e.g., [11, 36]).
1.1 Visualization of Large Graphs
Different solutions have been proposed so far to face the above challenges:
• From one side, fast graph drawing algorithms have been invented to overcome the scalability limits of classical graph
drawing techniques (see the work of Hachul and J¨unger for
a survey and an experimental study [25]). These algorithms
however compute a flat layout of the whole graph that can
be useful to get an overview of the entire graph structure
but that is typically too complex and confused for detailed
views. To enable viewers to see portions of primary interest presented in full detail while at the same time getting an
overview of all context, a popular interaction strategy, known
as focus+context, can be applied (see, e.g., [27] for a survey
on focus+context approaches). A technique that works within
this strategy is the well-known fisheye view, that produces a
distortion resembling the effect of using fisheye lenses on traditional layouts. However, since this distortion is independent
of the layout technique, it may destroy the aesthetics governing the specific drawing algorithm (for example more crossings can be introduced during the interaction). An alternative focus+context method that takes into account some layout
parameters is the well-known hyperbolic view; however, this
method is mainly tailored for trees. An alternative zooming
method, called topological fisheye view, has been proposed
by Gansner, Koren and North [22]; it precomputes a hierarchy
of coarsened graphs that are combined on-the-fly into renderings, with the level of detail dependent on distance from one
or more foci.
• From the other side, interactive visualization approaches have
been proposed to explore a large graph incrementally. They
can be summarized into two main categories:
– Bottom-up approaches: The graph is visualized a piece
per time. For example, a user can move on the graph with
a “topological window” of limited size, and only the portion
of the graph inside the topological window is shown at each
time [19]. Again, a user can start from a seminal node of the
graph and explore it around, by enhancing the diagram step by
step [10]. Bottom-up approaches are intuitive, but suffer from
two main drawbacks: (a) The user does not have an overview
of the graph; (b) preserving the user’s mental map during the
browsing is difficult.
– Top-down approaches: They provide an initial high-level
view of the whole graph and then give the user the possibility

209

of exploring specific portions of the graph to get more details, without destroying her mental map for the high-level
view. The majority of the top-down approaches are based
on clustering. The nodes of the graph are first grouped into
clusters, according to some clustering technique; then a highlevel view of the graph is shown, in which the nodes are the
computed clusters and the relationships between the vertices
of the graph are visually summarized as connections between
the corresponding clusters. The user can expand each single
cluster to inspect it inside, or she can contract a previously
expanded cluster, so obtaining many views of the graph at
different levels of details. Examples of this approach can be
found in [2, 5, 14, 35, 39].
Top-down approaches based on clustering are among the most
promising strategies for the visual analysis of large graphs. However, if the input graph is not already clustered, an automatic clustering algorithm is needed. One of the main limits of the existing
graph clustering algorithms is that they just look for the highly connected portions of the graph to compute clusters, but they do not
guarantee any property on the high-level structure of the clustered
graph (i.e., the inter-cluster graph); as a consequence, computing a
readable layout of such a high-level structure can be difficult and
asking what is the best algorithm to draw it remains in general an
unanswered question.
1.2 Contribution of the Paper
In this paper we introduce a novel methodology for the visual analysis of large networks within the top-down approach. The main
ingredients of our methodology are: (i) A new framework for designing automatic graph clustering algorithms. (ii) The use of hybrid visualizations for the representations of the different parts of
the graph. More precisely:
(I) We define an algorithmic framework for computing two-level
clustering algorithms that guarantee desired topological properties
not only for the intra-cluster graphs but also for the inter-cluster
graph. We call such a clustering an (X,Y )-clustering, where Y
is the class that defines the topological properties of intra-cluster
graphs and X is the class that defines the topological properties of
the inter-cluster graph. This allows us to exploit different visualization algorithms for the X and the Y classes.
(II) Based on the above framework, we define an efficient graph
clustering algorithm such that each intra-cluster graph has vertexdegree at least k (for an appropriate k), and the inter-cluster graph
is planar. Our algorithm finds the maximum k that guarantees these
properties.
(III) We describe a system called VH Y XY (Visual Hybrid
(X,Y)-clustering) that integrates our clustering algorithm and that
allows for an interactive top-down exploration of a large graph. It
makes it possible to combine effective node-link graph drawing algorithms for visualizing the inter-cluster graph (which is guaranteed to be planar by our clustering algorithm) with matrix-based
representations, or other more suitable node-link representations,
for dense intra-cluster graphs.
(IV) To show the feasibility and the effectiveness of our approach we present an application of VH Y XY to the analysis of
co-authorship networks and we discuss the results of a case study.
1.3 Related Works
The problem of computing clusterings that guarantee topological
properties both for intra-cluster graphs and for the inter-cluster
graph was previously studied by Brandenburg [9]. His model however requires that the set of clusters covers all the vertices of the
graph and, as it will be clarified in Sec. 2, this requirement strongly
limits its use in real-life applications.

210

From the point of view of the visualization paradigm, the use of
hybrid visualizations has been explored in several works. Namely,
Henry, Fekete and McGuffin describe the first system, N ODE T RIX
that combines node-link and matrix-based representations in the
same layout [26]; however, in N ODE T RIX clusters are not automatically computed, but they are defined manually by the user who
interacts with the drawing. A comparison between advantages of
matrix-based representations versus node-link ones is described by
Ghoniem, Fekete and Castagliola [23]. Techniques for searching
orderings of vertices that highlight clusters in matrix-based representations of social networks are described by Doreian et al. [16].
Abello, Kobourov and Yusufov describe a visualization approach
based on fisheye views and treemaps [1]. A system that combines different node-link layouts for conveying distinct portions of
a network on the basis of their topological properties is described
by Archambault, Munzner and Auber [4]. Other examples of hybrid visualizations combine node-link layouts with space-filling approaches [28, 37, 41]. Also, a hybrid visualization that combines orthogonal drawings with circular drawings for a graph with a given
two-level clustering is described by Di Giacomo et al. [15].
1.4 Structure of the Paper
The remainder of the paper is structured as follows. Our (X,Y )clustering framework is defined in Sec. 2. Complexity results and a
specific (X,Y )-clustering algorithm are described in Sec. 3. The
system VH Y XY and its application to the visualization of coauthorship networks are presented in Sec. 4 and in Sec. 5, respectively. Conclusions and open problems are given in Sec. 6. For
reasons of space some proofs are omitted in this abstract and will
appear in a forthcoming full version of this work.
2

(X,Y )- GRAPHS AND C LUSTERING

Let G = (V, E) be a graph, with vertex set V and edge set E. A
cluster of G is a subset V ′ ⊆ V of vertices of G. In this paper we
always assume that a cluster consists of at least two vertices (i.e., we
do not consider trivial clusters consisting of a single vertex). Given
a cluster V ′ of G, we denote by G[V ′ ] the subgraph of G induced by
the vertices of V ′ .
Let C = {V1 ,V2 , . . . ,Vh } be a set of disjoint clusters of G. The
graph of clusters of G with respect to C , denoted by H(G, C ), is the
graph obtained from G by collapsing each cluster of C into a single
vertex and by replacing multiple edges with a single one. More
formally, let VC = V1 ∪V2 ∪ · · · ∪Vh . Graph H(G, C ) consists of a
vertex set VH and of an edge set EH defined as follows:
• For each vertex v ∈ V \VC there is a distinct vertex u(v) ∈ VH
associated with v. For each cluster Vi ∈ C there is a distinct
vertex u(Vi ) ∈ VH associated with Vi (1 ≤ i ≤ h).
• Let (v, v′ ) ∈ E be an edge of G. If v, v′ ∈ V \ VC , there is the
edge (u(v), u(v′ )) ∈ EH . If v ∈ V \VC and v′ ∈ Vi (1 ≤ i ≤ h),
then there is the edge (u(v), u(Vi )) ∈ EH . If v ∈ Vi , v′ ∈ V j , and
i = j (1 ≤ i, j ≤ h), then there is the edge (u(Vi ), u(V j )) ∈ EH .
Notice that, by definition, H(G, C ) does not contain self-loops or
multiple edges. Also, some of the vertices of H(G, C ) correspond
to clusters in C and others correspond to single vertices of G. A
vertex corresponding to a cluster will be also called a cluster vertex
in the following. For example, Fig. 1(a) depicts a graph G and a
set C of three clusters (the vertices of each cluster are the gray
vertices inside a closed dashed region); Fig. 1(b) shows that graph
of clusters H(G, C ).
Let X and Y be two classes of graphs with certain properties and
let G = (V, E) be a graph. We say that G is an (X,Y )-graph if there
exists a set C = {V1 ,V2 , . . . ,Vh } of disjoint clusters of G such that:
(i) Graph H(G, C ) belongs to X; (ii) subgraph G[Vi ] belongs to Y ,

cluster graphs. This approach leads to a hybrid visualization of
G, like the one proposed in the system N ODE T RIX presented by
Henry et al. [26]; however, in N ODE T RIX the clusters are not automatically computed, but they are defined manually by the user who
interacts with the drawing.
In this section we explore two different combinations of (X,Y )clustering that appear to be natural choices for the visualization of
a large graph in the top-down approach. While for the first of these
two combinations we have a negative result in terms of tractability,
the other one can be algorithmically exploited in polynomial-time
and can be effectively adopted for application purposes.

(a)

(b)
Figure 1: (a) A graph G and a set of three clusters C = {V1 ,V2 ,V3 }. (b) The
graph of clusters H(G, C ); cluster vertices are drawn bigger than the others.

for each i = 1, . . . , h. In this case we also say that C is an (X,Y )clustering of G. For example, the graph in Fig. 1(a) is a (planar,
4-clique)-graph, because each cluster of C induces a 4-clique and
the graph of clusters is planar.
We remark that our definition of (X,Y )-graph generalizes the
definition of X-graph of Y -graphs introduced by Brandenburg [9],
in which it is required that C is a partition of V , i.e., V = i=1,...,h Vi .
The model proposed by Brandenburg is interesting from a theoretical point of view, but it turns out to be too restrictive from the
application point of view, because it is in general difficult to design efficient and/or effective clustering algorithms according to its
requirements. Conversely, in the next section we show that it is possible to design a polynomial-time algorithm for an interesting type
of (X,Y )-clustering, which can be effectively used for a top-down
visual analysis of large graphs.
3

C OMPLEXITY AND A LGORITHMS FOR (X,Y )- CLUSTERING

Following the intuitive notion of cluster, the majority of the automatic graph clustering algorithms attempts to detect groups of
vertices whose induced subgraphs are highly connected. However,
these algorithms do not guarantee any property on the structure of
the graph of clusters, and therefore a readable high-level visualization of the clustered graph remains in general a difficult task.
Looking for a specific (X,Y )-clustering makes it possible to know
in advance the properties of the graph of clusters, other than the
properties of the subgraphs induced by each cluster. In particular,
if X is some class of sparse graphs, we can apply classical effective node-link graph drawing algorithms for the visualization of the
graph of clusters [13]. Also, if Y is some class of highly connected
graphs, one can adopt a matrix-based visualization for the intra-

3.1 (Planar, k-clique)-clustering
Most graph drawing algorithms have been designed to work effectively on sparse graphs and especially on planar graphs [13].
Also, as already observed, clusters in a graph are usually thought
as subsets of highly connected vertices. A natural question is therefore asking whether a large graph is a (planar, k-clique)-graph, i.e.,
whether it admits an (X,Y )-clustering such that the subgraph induced by each cluster is a k-clique (for some fixed k) and the graph
of clusters is planar.
A result by Kratochv´ıl [30] implies that in the X-graphs of Y graphs model defined by Brandenburg [9] (where the clusters represent a partition of the whole set of vertices), deciding whether
a graph G can be seen as a planar graph of k-cliques is NP-hard.
Unfortunately, we found that also in our (X,Y )-graph model the
problem remains difficult. More precisely, we have the following
result, whose proof is not reported here for reasons of space and
due to its high technicality.
Theorem 1. Let G be a graph and let k ≥ 5 be a positive integer
number. Deciding whether G is a (planar, k-clique)-graph is NPhard.
Theorem 1 strongly motivates to look for some other family Y
of highly connected graphs. In the next subsection we exploit the
notion of k-core of a graph and present a polynomial-time (X,Y )clustering algorithm that is suitable for application purposes. We
recall that the notion of k-core was introduced by Seidman [34] in
1983, and used in several application areas for the decomposition
and the analysis of large graphs, especially in the field of social
networks and biology (see, e.g., [3, 6, 8, 17, 21, 24, 33, 40]).
3.2 (Planar, k-core component)-clustering
We investigate (X,Y )-graphs where X is the class of planar graphs
and Y is the class of “k-core connected components” of a given
graph. Before giving the formal definition of these (X,Y )-graphs,
we recall basic definitions about k-cores (see also Fig. 2(a)).
Let G = (V, E) be a graph and let k be an integer number such
that 0 ≤ k < |V |. Let W be a non-empty subset of V . The induced
subgraph G[W ] of G is a k-core (or a core of order k) of G if all
vertices of W have degree at least k in G[W ] and G[W ] is a maximal
subgraph of G with this property. The core number of a vertex of G
is the highest order of a core that contains this vertex.
Notice that, due to the maximality property, if G contains a kcore, then it is unique. Also, the k-core of G is not necessarily
connected. A connected component of a k-core of G will be simply
called a k-core component of G.
For any fixed k, denote by Gk the k-core of G (if it exists). The
following property is an immediate consequence of the definition.
Property 1. If G contains a k-core Gk , for k ≥ 1, then G contains
a (k − 1)-core G(k−1) and Gk ⊆ G(k−1) .
A graph G is a (planar, k-core component)-graph if it is an
(X,Y )-graph where X is the class of planar graphs and Y is the
class of connected k-cores of G. It is immediate to observe that any

211

graph is a (planar, k-core component)-graph for some k. In particular, if G is a k-connected graph (for k ≥ 1) G is surely a (planar,
k-core component)-graph, because in this case the k-core of G coincides with G itself and H(G, C ) is a single vertex, which is trivially
planar. The next lemmas will be used as basic tools for designing an (X,Y )-clustering algorithm based on the concept of k-core
components.

T HE S YSTEM VH Y XY: (X,Y )- CLUSTERING AND H YBRID
V ISUALIZATIONS
In this section we present the VH Y XY system, which integrates the
algorithm described in Subsec. 3.2, making it possible for the user
to visually analyze a graph by automatic clustering and interactive
exploration of the drawing. The system adopts a top-down strategy: (i) Initially the user is presented with the graph of clusters,
where all clusters are collapsed so to have an overview of the graph
structure (see, e.g., Fig. 3); (ii) then, the user can interactively explore the drawing by expanding/collapsing clusters and navigating
through them. At each exploration action the drawing is updated accordingly. To save computation time and preserve the user’s mental
map, the drawing inside each cluster region is computed for the first
time only when the user asks for the expansion of that region, and
the drawing is stored in a cache for its future visualizations. Figure 4 shows how the drawing of Fig. 3 is modified when the user
expands one of its clusters.
In the next subsections we give details about the algorithms used
to compute the drawing of the graph of cluster and the drawing
inside each cluster region.
4

(a)

(b)
Figure 2: (a) A graph G where the vertices are labeled with their core numbers. The closed darker region indicates the 5-core of G; each of the two closed
lighter regions indicates a 4-core component of G (their union is the 4-core of
G). (b) The (planar) graph of clusters obtained by collapsing the 4-core component. Notice that the graph of clusters is not planar if we collapse the 5-core;
this implies that the (planar, 4-core component)-clustering of G depicted in the
figure is a main planar core-clustering of G.

Lemma 1. Let k be a positive integer number. If G is a (planar, k-core component)-graph then it is a (planar, (k − 1)-core
component)-graph.
Lemma 2. Let G be a (planar, k-core component)-graph and let C
be the set of all k-core components of G. Then H(G, C ) is planar.
Observe that the higher values of k correspond to smaller clusters. Hence, it is interesting for applications to look for the maximum k such that G = (V, E) is a (planar, k-core component)graph, which corresponds to look for the smallest clusters such
that the graph of clusters is planar. A (planar, k-core component)clustering of G is called a main planar core-clustering of G, if k
is the maximum possible value for which G is a (planar, k-core
component)-graph. For example, the (planar, 4-core component)clustering shown in Fig. 2(a) is a main planar core-clustering of
G, and Fig. 2(b) shows the corresponding graph of clusters. Using
Lemmas 1 and 2, the following result can be proven.
Theorem 2. Let G be a graph with n vertices and m edges. There
exists an algorithm that computes a main planar core-clustering of
G in time O((n + m) log n).

212

Figure 3: A view of the graph of clusters, where all clusters are collapsed.
Bigger vertices represent clusters. The different scale of color for each vertex
is used to reflect its core number: Darker colors correspond to higher core
numbers.

4.1 Visualization of the graph of clusters
The graph of clusters computed using the algorithm described in
the proof of Theorem 2 is always planar by definition, so that we
can potentially apply any of the drawing algorithms described in
the literature for general planar graphs to obtain a highly readable drawing (see, e.g., [13]). Nevertheless, the drawing algorithm
should also support constraints that facilitate in the preservation of
the mental map during the browsing of the user. Namely, according
to our convention, the drawing algorithm must deal with vertices
of different sizes and the drawing of the graph of clusters should
not change too much when a cluster is collapsed/expanded (that is,
when the size of a vertex is modified). For this reason we decided
to use two specific drawing frameworks, which are among the most
popular in graph drawing (see [13] for more references):
(a) The topology-shape-metrics approach introduced by Tamassia [38]. It makes it possible to compute an orthogonal drawing of

Figure 4: A new drawing of the graph where one cluster is expanded; the
graph induced by the cluster is drawn with a circular layout algorithm.

the graph (that is, a drawing in which all edges are chains of horizontal and vertical segments) by optimizing a wide range of aesthetic criteria. In particular, our system makes use of a network flow
based drawing algorithm described in [12] that handles vertices of
any degree and of prescribed size, and that represents a good heuristic both in terms of bend minimization and in terms of area drawing
compaction. Also, it makes it possible to update a drawing when
the size of some vertices is modified without changing the shape of
the drawing, i.e., the sequence of the bends along the edges and the
angles formed by the edges around each vertex (see, for example,
Fig. 3 and Fig. 4).
(b) The force-directed approach introduced by Eades [18]. It
applies a physical model to compute a drawing. In the seminal paper of Eades, vertices are modeled as electrically charged particles
and edges are modeled as springs (each edge is drawn as a straightline segment); vertices are assigned with an initial random position,
and then they are iteratively moved according to the forces acting
on them, until a zero-energy state is achieved. We adopt a similar model, and assign to each vertex representing a cluster region
a charge that is proportional to its desired size, so that a big vertex
has a large repulsive force and staves neighbors off. To preserve
the user’s mental map when the size of a vertex changes, the new
drawing is computed by updating the charge of that vertex and by
looking for a new zero-energy state moving each vertex from its
previous position.
4.2 Visualization of the clusters
Since our clustering algorithm looks for k-core components, we often have dense graphs inside a cluster region. For this reason, and
since we do not have any size constraint for inner vertices, we give
the user the possibility of choosing among a wider range of drawing algorithms for the layout of the graph inside each cluster region
(see, e.g., Fig. 5). The possibility of choosing independently the
layout of each cluster and a layout for the graph of clusters, immediately leads to the possibility of having many different hybrid
visualizations for the whole graph.
As previously mentioned, VH Y XY supports both node-link representations and matrix-based representations for the visualization
of a graph induced by a cluster. The system provides some statistics
about the properties of the graph inside each cluster region, and the
user can take advantage of these data to choose the most suitable

Figure 5: A view of the graph where two clusters are expanded and drawn
with different algorithms (force-directed to the left and orthogonal to the right).

drawing algorithm for each specific cluster, also depending on the
desired aesthetic criteria. For example, if the graph to be drawn is
almost a complete graph, a matrix-based representation is probably
more effective than a node-link one. Currently, VH Y XY integrates
the algorithms described in [7, 12, 18, 20] for the circular, orthogonal, force-directed, and layered drawing conventions, respectively.
To avoid confusion and to limit the visual complexity of the
drawing, when the graph inside a cluster region is drawn with a
node-link representation edges connecting vertices inside the clusters with vertices outside the cluster are shown only on demand; we
call these edges inside-outside links. The system uses a (light) red
color to highlight those vertices that are incident to some insideoutside links: If the user selects a red vertex its inside-outside links
are displayed.
As usual, in the matrix-based representation adopted by
VH Y XY, the graph is represented as a square matrix where for
each node vi ∈ G there is a row and a column with index i and the
position of the matrix with indices (i, j) is filled if and only if there
exists the (undirected) edge (vi , v j ) in G. Note that the position (i, i)
represents a self-loop. We remark that a hybrid visualization combining node-link and matrix-based representations was previously
introduced in the system N ODE T RIX [26]. As already observed
however, in N ODE T RIX user built matrices by manually clustering
the graph; also, although in N ODE T RIX the user can change the
ordering for the vertices in the rows and columns of each matrix,
there are no automatic facilities to reduce the number of crossings
between inside-outside links. Conversely, VH Y XY makes it possible to show all the inside-outside links in such a way that the number of crossings between these links is automatically minimized using a heuristic algorithm. Namely, the ordering of the vertices in
each row/column is computed by applying a standard two-layercrossings minimization heuristic to the connections on each of the
four sides of the matrix (see, e.g., [13]); then, once for rows and
once for columns, the system chooses the two orderings that minimize the sum of crossings for each side. Note however that having
a different ordering of the vertices for the rows and for the columns
may be sometimes confusing for the user, because positions (i, i)

213

may not correspond to self-loops; to help the user to easily identify
a cell whose row and column correspond to the same vertex, we use
a grey color for such a cell. Additionally, it is possible to force the
heuristic to reduce the number of crossings while using the same
ordering for the vertices in the rows and in the columns.
5

A N A PPLICATION E XAMPLE :
AUTHORSHIP N ETWORKS

V ISUAL A NALYSIS

OF

CO-

To show the effectiveness of our clustering algorithm and of the system VH Y XY, we present here an application example to the visual
analysis of co-authorship networks in computer science. To this
aim we get use of the popular DBLP dataset [31], which is freely
available over the Web and which contains most data about papers
in computer science. The DBLP dataset holds the name of every
author and the details of all papers written by her (like the conference/journal and the publication year).
We observe that the need of using visual analysis tools for exploring such large networks is also witnessed by a recent project
from the same authors of the DBLP dataset, called DBLP V IS [32];
the outcome of this project is an on-line system that allows users
to make queries to the database and get back visual representations
of the answer. More precisely, three types of queries are possible
with this service: (i) Look for an author and see the relationships
between that author and a core set of scientific topics written by
her, or a core set of authors who have a paper in common, or a core
set of conference/journal names representing where the author has
published her papers. (ii) Look for a single word and see which
conferences/journals published papers about that topic. (iii) Look
for a conference/journal name and see a core set of related topics or
of related authors.
From the visualization point of view, the system presents a star
rooted at the subject of the query with connections to the related
objects (authors, topics, or streams1 ). Each connection has different
colors, representing the evolution of the relationship over time, and
a length, representing the strength of the relationship.
Our kind of application to the analysis of the co-authorship
networks constructed from the DBLP data is pretty different
from DBLP V IS, and allows for a more complex exploration of the
data. Namely, we focus on this task: Giving a certain topic t, discover the authors who published papers about t and their relationships. Our application makes it possible to define a topic t by means
of an advanced query expression, consisting of words and boolean
operators (AND / OR). The user can also decide to apply filters like
the time interval and the types of publications.
Once the user submitted the query, the application uses a customized version of VH Y XY to visually present the results and it
allows for an interactive exploration of these results. The user is
presented with a network of co-authorships that is automatically
clustered by using the (planar, k-core component)-clustering algorithm available in VH Y XY, and can perform all the exploration actions described in the previous sections. The network is constructed
as follows: (i) There is a vertex associated with each author, and the
label of a vertex is the name of the corresponding author. (ii) There
is an edge between two vertices if the corresponding authors wrote
at least one paper together in the specified time interval; each edge
has a weight that corresponds to the number of papers associated
with the edge; the label of the edge is the set of titles and years of
the corresponding publications.
5.1 A Case Study
As a case study, we describe one example of analysis of coauthorship networks for a specific query in the area of graph drawing and visualization. Another case study of a larger network will
be discussed in the full version of the paper. In this example we
1A

214

stream is either a conference or a journal in the DBLP V IS world

analyze papers about orthogonal drawings of graphs. To this aim
we submit the following query: “orthogonal AND (drawing OR embedding)”. Our application looks for those papers that match the
query in their titles. The analysis is done over the period of time
1960–2009 and we do not put any restriction on the kind of publications. The resulting network has 101 vertices and 168 edges.
Although this network is not really large, it contains several dense
portions, so that a flat drawing of it is not readable. The system
is able to compute a planar main core clustering algorithm and a
drawing of the resulting graph of clusters in about 1 second on a
standard PC with a 1.6 GHz Intel Centrino Duo processor and 2GB
of RAM. The resulting drawing is depicted in Fig. 6. The thickness
of a connection represents the strength of the cooperation between
the corresponding authors.

Figure 6: A drawing of the graph of clusters for the query “orthogonal
(drawing

OR

AND

embedding)”.

From the drawing one can see that there are different connected
components, each of them denoting a community of authors who
wrote papers together on the subject of the query. Many of these
communities correspond to small and planar graphs and they are
drawn without need of clustering. The biggest of the small communities contains 7 authors, all coming from Asia; the authors of
this community having the highest degrees are Takao Nishizeki and
Md. Saidur Rahman, who also represent the pair of authors with the
strongest connection. Figure 7(a) shows a zoom of this community
and Fig. 7(b) shows a tooltip listing all papers in which Nishizeki
and Rahman cooperated.
Two of the communities contain a denser subgraph (core) represented as a cluster. Three communities are non-planar graphs
that cannot be further simplified in terms of planarity with our planar main core clustering algorithm; they correspond to the isolated
clusters at the bottom of the drawing, and each of them consists of
a small clique of authors that wrote only one paper together. Focusing on the two communities that contain a clustered core, we
can see that one of the two cores consists of 25 vertices and 66
edges while the other core consists of a clique of just 4 vertices.
Figure 8 shows an expansion of these two cores, represented with
different conventions. The larger core mainly hosts authors from
Canada, Italy, and USA; the smaller core component hosts authors
from Germany; in this core we have selected author Michael Kaufmann, so that its inside-outside links are highlighted. Drawing the
larger core with a force-directed algorithm, the vertices are further
visually clustered into two main denser parts: The vertices in the

Figure 8: Expanding the clusters of the two largest communities.

upper side of the drawing are mainly Canadian authors, while those
in the bottom side of the drawing are mainly from Italy and USA
(see Fig. 9). In the figure data about author Roberto Tamassia are
displayed.
6

(a)

C ONCLUSIONS AND O PEN P ROBLEMS

We described a new methodology for the visual analysis of large
networks, based on a novel clustering technique that guarantees the
planarity of the inter-cluster graph, while each intra-cluster graph is
a k-core connected component for the maximum possible value of
k. Our approach allows for effective hybrid visualizations to represent intra- and inter-cluster graphs. As a proof of concept we implemented a system using the new methodology and proved its effectiveness by discussing case studies of analysis on co-authorship
networks in computer science. In the near future we plan to investigate other families of X and Y graphs for which an (X,Y )-clustering
can be found efficiently and can be effectively used in practical situations, and we plan to experiment our methodology on further application domains.
ACKNOWLEDGEMENTS
We thank Franz Brandenburg for his many valuable comments.

(b)
Figure 7: Focusing on the largest community with no cluster.

R EFERENCES
[1] J. Abello, S. Kobourov, and R. Yusufov. Visualizing large graphs with
compound-fisheye views and treemaps. In GD 2004, volume 3383 of
LNCS, pages 431–441, 2004.
[2] J. Abello, F. van Ham, and N. Krishnan. Ask-graphview: A large
scale graph visualization system. IEEE Trans. Vis. Comput. Graph.,
12(5):669–676, 2006.

215

Figure 9: Redrawing the bigger core component with a force-directed algorithm helps in further detecting sub-communities.

[3] M. Altaf-Ul-Amin, K. Nishikata, T. Koma, T. Miyasato, Y. Shinbo,
M. Arifuzzaman, C. Wada, M. Maeda, T. Oshima, H. Mori, and
S. Kanaya. Prediction of Protein Functions Based on K-Cores of
Protein-Protein Interaction Networks and Amino Acid Sequences.
Genome Informatics, 14:498–499, 2003.
[4] D. Archambault, T. Munzner, and D. Auber. Topolayout: Multilevel graph layout by topological features. IEEE Trans. Vis. Comput.
Graph., 13(2):305–317, 2007.
[5] D. Auber, Y. Chiricota, F. Jourdan, and G. Melanc¸on. Multiscale visualization of small world networks. In IEEE INFOVIS 2003, pages
75–81, 2003.
[6] V. Batagelj, A. Mrvar, and M. Zaverˇsnik. Partitioning approach to
visualization of large networks. In GD 1999, volume 1731 of LNCS,
pages 90–97, 1999.
[7] M. Baur and U. Brandes. Crossing reduction in circular layouts. In
WG 2004, volume 3353 of LNCS, pages 332–343, 2004.
[8] B. Bollob´as. The evolution of sparse graphs. In A. Press, editor, Graph
Theory and Combinatorics, pages 35–57, 1984.
[9] F.-J. Brandenburg. Graph clustering 1: Circles of cliques. In GD 1997,
volume 1353 of LNCS, pages 158–168, 1997.
[10] A. Carmignani, G. D. Battista, W. Didimo, F. Matera, and M. Pizzonia.
Visualization of the high level structure of the internet with HERMES.
J. Graph Algorithms Appl., 6(3):281–311, 2002.
[11] B. Craft and P. Cairns. Beyond guidelines: What can we learn from
the visual information seeking mantra? In IEEE 9th International
Conference on Information Visualization, pages 110–118, 2005.
[12] G. Di Battista, W. Didimo, M. Patrignani, and M. Pizzonia. Orthogonal and quasi-upward drawings with vertices of prescribed sizes. In
GD 1999, volume 1731 of LNCS, pages 297–310, 1999.
[13] G. Di Battista, P. Eades, R. Tamassia, and I. G. Tollis. Graph Drawing.
Prentice Hall, Upper Saddle River, NJ, 1999.
[14] E. Di Giacomo, W. Didimo, L. Grilli, and G. Liotta. Graph visualization techniques for web clustering engines. IEEE Trans. Vis. Comput.

216

Graph., 13(2):294–304, 2007.
[15] E. Di Giacomo, W. Didimo, G. Liotta, and P. Palladino. Visual analysis of one-to-many matched graphs. Journal of Graph Algorithms and
Applications - special issues of GD 2008, 2009. to appear.
[16] P. Doreian, V. Batagelj, and A. Ferligoj. Generalized Blockmodeling.
Cambridge University Press, 2005.
[17] S. N. Dorogovtsev, A. V. Goltsev, and J. F. F. Mendes. k-core organization of complex networks. CoRR, abs/cond-mat/0509102, 2005.
[18] P. Eades. A heuristic for graph drawing. In Congressus Numerantium,
volume 42, pages 149–160, 1984.
[19] P. Eades, R. F. Cohen, and M. L. Huang. Online animated graph drawing for web navigation. In GD 1997, volume 1353, pages 330–335,
1997.
[20] M. Eiglsperger, M. Siebenhaller, and M. Kaufmann. An efficient implementation of Sugiyama’s algorithm for layered graph drawing. In
GD 2004, volume 3383, pages 155–166, 2004.
[21] M. Gaertler and M. Patrignani. Dynamic Analysis of the Autonomous
System Graph. In IPS 2004, International Workshop on Inter-domain
Performance and Simulation, Budapest, Hungary, pages 13–24, 2004.
[22] E. R. Gansner, Y. Koren, and S. C. North. Topological fisheye
views for visualizing large graphs. IEEE Trans. Vis. Comput. Graph.,
11(4):457–468, 2005.
[23] M. Ghoniem, J.-D. Fekete, and P. Castagliola. On the readability
of graphs using node-link and matrix-based representations: A controlled experiment and statistical analysis. Information Visualization,
4(2):114–135, 2005.
[24] A. V. Goltsev, S. N. Dorogovtsev, and J. F. F. Mendes. k-core (bootstrap) percolation on complex networks: Critical phenomena and nonlocal effects. CoRR, abs/cond-mat/0602611, 2006.
[25] S. Hachul and M. J¨unger. Large-graph layout algorithms at work: An
experimental study. J. Graph Algorithms Appl., 11(2):345–369, 2007.
[26] N. Henry, J.-D. Fekete, and M. J. McGuffin. Nodetrix: a hybrid
visualization of social networks. IEEE Trans. Vis. Comput. Graph.,
13(6):1302–1309, 2007.
[27] I. Herman, G. Melanc¸on, and M. S. Marshall. Graph visualization and
navigation in information visualization: A survey. IEEE Trans. Vis.
Comput. Graph., 6(1):24–43, 2000.
[28] T. Itoh, C. Muelder, K. Ma, and J. Sese. A hybrid space-filling and
force-directed layout method for visualizing multiple-category graphs.
In IEEE PacificVis 2009, pages 121–128, 2009.
[29] M. Kaufmann and D. Wagner, editors. Drawing Graphs. Springer
Verlag, 2001.
[30] J. Kratochv´ıl. String graphs II - recognizing string graphs is NP-hard.
J. Comb. Theory, Ser. B, 52(1):67–78, 1991.
[31] M. Ley.
The DBLP computer science bibliography.
http://www.informatik.uni-trier.de/∼ley/db/.
[32] M. Ley. The DBLPVis project. http://dblpvis.uni-trier.de/.
[33] T. Łuczak. Size and connectivity of the k-core of a random graph.
Discrete Mathematics, 91(1):61–68, 1991.
[34] S. B. Seidman. Network structure and minimum degree. Social Networks, 5:269–287, 1983.
[35] L. Shi, N. Cao, S. Liu, W. Qian, L. Tan, G. Wang, J. Sun, and C. Lin.
HiMap: Adaptive visualization of large-scale online social networks.
In IEEE PacificVis 2009, pages 41–48, 2009.
[36] B. Shneiderman. The eyes have it: A task by data type taxonomy for
information visualizations. In Proc. Visual Languages Conference,
pages 336–343, 1996.
[37] G. Sindre, B. Gulla, and H. G. Jokstad. Onion graphs: aesthetics and
layout. In IEEE Symposium on Visual Languages, pages 287–291,
1993.
[38] R. Tamassia. On embedding a graph in the grid with the minimum
number of bends. SIAM Journal on Computing, 16(3):421–444, 1987.
[39] F. van Ham and J. J. van Wijk. Interactive visualization of small world
graphs. In IEEE INFOVIS 2004, pages 199–206, 2004.
[40] S. Wuchty and E. Almaas. Peeling the Yeast protein network. Proteomics. 2005 Feb;5(2):444-9., 5(2):444–449, 2005.
[41] S. Zhao, M. J. McGuffin, and M. H. Chignell. Elastic hierarchies:
Combining treemaps and node-link diagrams. In IEEE INFOVIS
2005, page 8, 2005.

