Multiple Views on System Traces
A. Johannes Pretorius∗

Jarke J. van Wijk†

Technische Universiteit Eindhoven

Keywords: Trace visualization, time series visualization, user defined widgets, multivariate visualization, system analysis
Index Terms: H.5.2 [Information Interfaces and Presentation]:
User Interfaces—Graphical user interfaces (GUI); I.3.8 [Computer
Graphics]: Applications; I.6.4 [Simulation and Modeling]: Model
Validation and Analysis
1

I NTRODUCTION

In many engineering domains analysts study execution traces to understand the behavior of complex systems. A popular approach for
such analysis is to generate traces by simulation [12]. First, a mathematical model is constructed for the system being considered. Using this behavioral description as input, automated tools generate
a finite sequence of consecutive system states. This system trace
expresses the system’s behavior over an interval of time.
In this article we introduce a technique for the interactive visual
analysis of system traces. We present our technique in the domain
of system analysis, but we argue that our results also apply to the
wider context of multivariate time series analysis.
In Section 2 we introduce three perspectives that can be taken
on multivariate system traces and discuss related research. We then
show how we integrate these perspectives into a single solution for
the visual analysis of traces in Section 3. To show how our technique can be used to solve real-world problems we provide a use
case in Section 4. We discuss our results in Section 5 and conclude
in Section 6.
2

DATA

PERSPECTIVES

We define our data as follows:
1. A trace T = (t1 , s1 ), ..., (tk , sk ) where si is the state at time ti
for i = 1, ..., k.
2. Every state si ∈ T has n associated variables x j with domain X j . X j is either (1) discrete with X j = {x j,1 , ..., x j,l j }
or (2) continuous with X j = [x j,1 , x j,l j ].
∗ e-mail:

a.j.pretorius@tue.nl

† e-mail:vanwijk@win.tue.nl

IEEE Pacific Visualisation Symposium 2008
4 - 7 March, Kyoto, Japan
978-1-4244-1966-1/08/$25.00 ©2008 IEEE

n
Variables

We present a new method for the visual analysis of multivariate
system traces. Our method combines three perspectives: (1) a
schematic diagram, (2) time series plots and (3) a state transition
graph. After we show how these perspectives are related, we discuss their integration into a single solution for the visual analysis of
multivariate system traces. The combination of the three perspectives provides the user with a rich analysis interface that enables
gaining significant insight into system behavior. We illustrate some
of the advantages of our approach by providing a real-world use
case.

a

b

1

A BSTRACT

1

Time

k

Figure 1: Common perspectives on multivariate system traces.

As illustrated in Figure 1, the above definition suggests taking one
of two perspectives on multivariate system traces. Although less
evident, it also gives rise to a third useful perspective. We discuss
these below.
2.1 Perspective 1: schematic diagram
By focusing on the variables axis in Figure 1 (a) it is possible to get
a “snapshot” of a system. That is, a point in time is considered as a
function of the values that the state variables assume.
In system analysis, this perspective is often taken by mapping
values to a schematic diagram that represents the system being studied. For example, to study an automated parking garage, one of the
authors was involved in a project where a single system state is
mapped to a 2D floor plan of the garage [7]. Visual cues such as
color and position are used to encode the values of the different
variables (representing parking spaces, cars, and so forth). Despite
its simplicity and limited features, this solution was very effective
and a number of interesting discoveries were made. For example,
it was possible for the system to literally tear cars in half. The
diagrams also proved very effective for communicating findings
to other stakeholders. The success of this approach results from
the fact that the user is presented with a visual representation that
closely fits his or her conceptualization of a problem.
Despite its effectiveness, the above solution is a custom one. To
be generic, it should be possible for users to define diagrams themselves. Ribarsky et al. propose user defined glyphs of which the
graphical properties can be interactively bound to data [11]. Based
on the values assumed by a particular data item, properties such as
the position and size of the corresponding glyph change. Similar
results exist for computational steering [16]. The user can define
diagrams that realistically reflect their understanding of a problem.
These diagrams are then parameterized by linking them to a scientific simulation engine. The dynamic behavior of the system is
shown as an animation. Diagrams can also be used to steer simulations by acting as input devices for changing variable parameters.
It has been shown how such techniques assist the user in gaining
a better understanding of the influence of multiple data parameters
on complex scientific simulations.
2.2 Perspective 2: time series plots
The diagram based techniques discussed in the previous section resort to animation to show how state variables change over time.
However, since a sequence of frames is shown in rapid succession,
it is difficult to discover correlations between variables (causality)

95

s2
s5

s1

s2

s3

s4

s5

s1
s3

(a)
s4
(b)
Figure 2: System trace as a graph.

and trends over the time axis [15]. The notion of overview and
detail is also missing. By focusing on the time axis, as illustrated
in Figure 1 (b), it is possible to address these issues. Many examples of such an approach can be found in the time series visualization literature where the values assumed for a particular variable are
plotted against time [14].
Recent work on time series visualization focuses mainly on two
issues: presentation and visual querying. Weber et al. [21] propose
circular layouts to deal with large data sets and to highlight periodic
data patterns. Hao and Keim [2] address large data sets with a hierarchical space-filling strategy. They assign larger and more prominent display real estate to more important variables. Hochheiser
and Shneiderman [4] propose query-by-example widgets for time
series. These enable the user to visually specify queries based
on which large sets of time series are filtered. Likewise, Wattenberg [18] allows the user to sketch a profile before retrieving similar
time series.
In this article our focus is on integrating time series visualization
with other perspectives that can be taken on our data. However, our
approach is flexible enough to be combined with presentation and
query techniques such as those discussed above.

ing data hierarchically. This approach combines a calendar based
representation with traditional line plots.
Since the user associates meaning with state variables found in
our data, clustering reduces the complexity of a data set in a semantically rich way. It also results in a multivariate graph, where
every vertex represents a particular combination of variable values.
A few methods have recently been developed to visualize graphs as
a function of their multivariate vertices. Wattenberg [20] developed
a technique where vertices are positioned on a grid based on the values that their associated variables assume. Similarly, Shneiderman
and Aris [13] position nodes in non-overlapping regions of which
the meanings are clear to the user.
3

A PPROACH

We have developed a technique for the interactive visualization of
multivariate system traces that integrates the three perspectives introduced in Section 2. To validate our approach we have built a
prototype to which we refer in the remainder of this article. Figure 3 shows the three different views we have developed. To use
these, our prototype provides the user with an overview of all variables that describe the system states (see Figure 3 (a)). For variables
with continuous domains, the user is provided with a range within
which all values fall. When a variable with a discrete domain is
selected, the user is presented with a list of its domain values (see
Figure 3 (b)).
We provide a number of operations that can be performed on the
variables and on their domains. The position of any variable can be
adjusted in the list and variables can be duplicated. The ordering
of variables has an influence on the different visualizations, as we
show in the following sections. Discrete domain values can also
be reordered. Continuous domains can be discretized by performing classification, or binning. We currently provide classification
based on three popular algorithms: equal intervals, quantiles and
mean-standard deviation [3]. This can be easily extended with other
methods. For example, we foresee including symbolic approximation techniques such as SAX [6].
3.1 User defined diagram

2.3 Perspective 3: state transition graph
The rationale behind studying system traces is often the following.
If a finite sequence of states is representative for a system, then
by understanding this (partial) behavioral description, it is possible to gain insight into the system as a whole. We have argued that
schematic diagrams are good for showing the details of one or a few
individual states. Also, time series plots are well suited for showing
causality and for identifying patterns. However, none of these techniques present the user with a high-level representation of system
behavior. To achieve this, we propose taking a third perspective by
considering trace date independently of time.
When time is discarded and an equivalence relation is defined on
the states si ∈ T a graph is generated (see Figure 2). More precisely,
consider the relation ≡G where si ≡G sl if and only if si, j = sl, j for
j = 1, ..., n. Let V be the set of equivalence classes of ≡G on T .
Next, for all si let ei = ([si ], [si+1 ]) for i = 1, ..., k −1 where [si ] is the
equivalence class of si . Now, let E be the set of all ei and we have
the graph G = (V, E) where V contains its vertices and E its directed
edges. Note that this graph represents the (partial) multivariate state
space or transition graph of the system being studied [1].
The above equivalence relation enables the user to cluster trace
data based on the values assumed for the different state variables.
As we show in Section 3.3, this allows for an abstract representation of the data. We are not the first to suggest such an approach.
Lin et al. [5] use augmented suffix trees to summarize time series
structure. By interacting with this tree, the user is able to identify
and zoom into interesting parts of the time series. Van Wijk and Van
Selow [17] propose a multi scale technique that clusters time vary-

96

To define diagrams that fit his or her conceptualization of a system,
the user switches to edit mode (see Figure 4). In edit mode we
provide an integrated graphical editor with which the user can draw
simple primitives such as ellipses, rectangles, lines and arrows (see
Figure 4 (a), (b)). These can be rotated, resized and moved.
Inspired by the idea of user defined glyphs [11] and parameterized graphical objects [16] we have developed a visualization
technique based on user defined diagrams [10]. We define seven
Degrees of Freedom (DoFs) for all shapes: x-position, y-position,
width, height, rotation (about a movable pivot), hue and opacity.
In this way DoFs represent the graphical properties of every shape.
The user can edit DoFs by direct manipulation. As outlined below, this involves defining a range for the DoF and linking a state
variable with it.
After selecting a shape the user is presented with a graphical
representation of its DoFs. For the geometric DoFs (x-position, yposition, width, height, rotation), the user selects and drags handles
to define a linear range (see Figure 4 (c)). Non-geometric DoFs
(hue, opacity) are also defined visually (see Figure 4 (d)). Since the
shortest path in color-space is often unintuitive we enable the user to
define a number of control points in the hue- and opacity channels.
This allows for an exact path to be specified. Alternatively, it is
possible to select one of a number of preset color mappings from a
list.
When editing a shape, the user is shown a list of all its associated
DoFs (see Figure 4 (e)). To link a state variable and a DoF, the user
drags and drops the variable (see Figure 4 (f)) on the appropriate
DoF. One variable can be linked with many DoFs, but any DoF

Figure 3: Visualization of multivariate system traces.

can only have a single variable associated with it. This enables the
user to link the variables found in the system trace with a custom
diagram.
The diagram representing a particular state is obtained by mapping variable values to the ranges of the DoFs. This is done by
interpolation. For a variable and DoF that have been linked, the
data values assumed by the variable determine the graphical property represented by the DoF. For example, in Figure 5 we consider
two variables. Both have a continuous range of [0, 1]. The diagram
contains a single rectangle. Variable 1 has been linked with the DoF
describing the rectangle’s x-position and Variable 2 with the DoF
describing its y-position. For a state where Variable 1 = 0.5 and
Variable 2 = 1.0 we get the resulting diagram on the right. In our
prototype, we show the results of mapping a state to a user defined
diagram in the diagram view (see Figure 3 (c)).
In an initial version of our prototype we did not support text in
diagrams. However, users expressed a requirement to annotate their
custom diagrams with both static and dynamic text. To cater for
this we introduced another primitive called a text anchor (see Figure 4 (g)). A text anchor behaves just like a normal shape. For
instance, it can also be rotated and it has the same seven DoFs as
any other shape. However, for every one of its DoF’s that has been
associated with a state variable, the user can select whether to dis-

play the variable name and value, the variable name only, or the
value only.
3.2 Time series plots
After switched back to analysis mode, the user can select and load a
subset of state variables into the time series view (see Figure 3 (d)).
To handle large data sets, we provide the user with two time scales.
At the top there is a global time scale representing the complete
system trace (see Figure 3 (d.1)). The user has a current view within
the global time scale that is represented by a beveled slider handle.
The current view is visualized at a magnified resolution on the
local time scale (see Figure 3 (d.2)). The variables that have been
loaded are visualized as a number of parallel time series plots. Time
is mapped to the x-axis from left to right. The values that are assumed for a variable are normalized and mapped to the y-axes. By
sharing the same time axis, the user is able to compare the behavior
of the different variables. By dragging the slider in the global scale
the content of the local time scale can be adjusted. The user can
also increase or decrease the length of the slider. This results in respectively zooming out or zooming in on the data in the local time
scale. The vertical order of the plots corresponds to the order of the
variables in the selection (see Figure 4 (a)). As mentioned before,
the user can adjust this ordering.

97

Figure 4: Integrated graphical editor.

Our prototype also offers other basic interactive features. For
example, when the mouse is rolled over the local time scale, the
current position is highlighted and the values of all selected variables are shown with tool tips (see Figure 3 (d.3)). As mentioned in
Section 2.2, extending our time series view with other interaction
techniques is possible and will not interfere with our approach.

a number of child clusters branching from the root. Every resulting cluster now contains a disjoint subset of the states in the root
cluster. Next, each of these clusters is sub-partitioned based on
the second variable, resulting in a third level in the hierarchy (see
bottom of Figure 6 (a)). We note that clustering in this fashion requires variables with discrete domains. This is one of the reasons

3.3 State transition graph
In Section 2.3 we introduced an equivalence relation that enables us
to consider a multivariate trace as a directed graph. We now explain
how we apply this idea in our prototype. To make the approach
more flexible, we enable the user to select and consider a subset of
the variables. That is, for any si , sl ∈ T it holds that si ≡G sl if and
only if si, j = sl, j for j ∈ I where I ⊆ {1, ..., n}.
The above enables the user to perform variable-based clustering [9]. The user first selects a subset of state variables and then
clicks on the cluster button (see Figure 3 (a)). The entire set of
states si ∈ T is taken as the root of a clustering hierarchy as shown
at the top of Figure 6 (a)). The set is then partitioned based on
the different values assumed for the first variable. This results in

Variable 1 = 0.5
With range [0, 1]
Variable 2 = 1.0
With range [0, 1]

Variable 1
Variable 2
...

(a)

X-Pos → Variable 1
Y-Pos → Variable 2
1.0

+

=

Y-Pos

0.5

X-Pos
Figure 5: User defined diagrams.

98

Variable 1
Variable 2
...

(b)
Figure 6: Variable-based clustering.

for providing the classification algorithms discussed at the start of
this section.
As outlined in Section 2.3, clustering generates a graph. The
nodes of this graph are the leaf nodes of the clustering hierarchy
and contain sets of individual states. The edges are bundles of transitions that connect adjacent states in the original trace. The transition graph is visualized as an arc diagram [19]: edges are represented as semi-circular arcs that span from the source to the target
cluster (see Figure 6 (b)). The thickness of an arc is proportional
to the number of bundled transitions. The arc diagram is positioned
on the leaf clusters of the clustering hierarchy (see Figure 3 (e)).
Since clusters are positioned at equal horizontal intervals, arcs of
equal height suggest repeated behavioral patterns. Arc orientation
encodes transition direction and is interpreted clockwise.
Figure 7: Industrial steam generator.

3.4 Integration
We have explained how the three perspectives on multivariate trace
data introduced in Section 2 have been implemented in our prototype. The result is three different views on the same trace data: a
schematic diagram, a time series plot and a transition graph (see
Figure 3 (c)–(e)). For the different views to be complementary they
have been tightly integrated with each other, as we show below.
The user can select individual states or ranges of states in the
time series view. Consequently, the clusters in the graph view that
contain these states are highlighted (see Figure 3 (d.4)). Similarly,
when a cluster is selected in the graph view, all states in it are highlighted in the time series view.
By double clicking a state in the time series view or a cluster in
the graph view, these visualizations can be extended with diagrams.
Consequently, the time series view or the graph view is annotated
with callouts showing the user defined diagram (see Figure 3 (d.5)).
All parameterized DoFs are calculated as outlined in Section 3.1.
Using icons on the diagram (see Figure 3 (d.6)) the user can animate
or step over a selected range in the time series view. To maintain
context, the time series and cluster views are updated to highlight
the current state while animating. When the user moves the mouse
over a diagram in the time series or graph view, it is shown at a
larger magnification in the inspection view (see Figure 3 (d.7)).
In terms of integrating the different views, we have learned a
number of lessons. To create a sense of coherence and to more
clearly correlate views, our design has evolved to using color consistently. For instance, in initial experiments we did not use color
coding in the time series view. However, our users repeatedly asked
whether it was possible to map values to the same colors used in
the diagram and graph views. Consequently, we have adapted our
prototype to default to using the same color mapping in all three
views. In this article we use a perceptually ordered white to brown
scheme. In cases where the user deems it necessary, it is possible to
override this by specifying a different path to interpolate over (see
Section 3.1).
Another insight deals with the layout of the views. Initially, we
reasoned that users would want a high level overview of system behavior as the most prominent visualization with all other views in
the periphery. We translated this to positioning the graph view centrally with diagrams and time series views playing a supportive role
and shown on user demand. However, users much prefer having the
time series view as their main point of reference. Next, they want to
inspect parts of this view with diagrams. We support this with the
capability of showing diagrams overlaid on the time series view.
However, users also want to inspect diagrams in detail. Since there
is a trade-off between obscuring the time series view with diagrams
and the effort needed to switch to a separate view, we keep overlaid
diagrams small and show detail in a linked view. By positioning the
graph view below the time series, it plays the more supportive role
preferred by users.

4 U SE CASE : INDUSTRIAL STEAM GENERATOR
To illustrate how our technique can assist users with the analysis
of multivariate system traces we now present a use case. We consider an industrial steam generator. The data set was generated by
simulation from a mathematical model of a boiler at Abbott Power
Plant, Champaign, Illinois [8].
This system consists of two parts. First, there is the furnace (see
Figure 7 (a)). Fuel and air are injected into the furnace and are
consumed by a burner. Combustion generates heat and flue gases.
The gases are sucked out via an exhaust. The second part of the
installation is a steam drum that sits at the top of the furnace, above
the burner. When heat is generated the drum gets hot. The water
that is fed into it also heats up, reaches boiling point and starts to
evaporate. The steam produced in this fashion gushes out of the
drum at the top right and is used for power generation and heating.
Our data set consists of 9,600 states that are described by four
variables. These are:
1. Drum pressure: the pressure inside the steam drum (PSI).
2. Oxygen exhaust: excess oxygen in the exhaust gases (%).
3. Steam flow: the rate of steam flow from the steam drum (kg/s).
4. Water level: the water level inside the steam drum.
Using our prototype’s editor, we have composed a diagram that represents the steam generator (see Figure 7 (b)). The furnace is represented by the larger white rectangle and the drum by the smaller
gray rectangle. The pressure inside the drum is encoded with the
height and color of a bar toward its right. The water level inside the
drum is linked to a bar toward its left. Similar to drum pressure, it
increases in height proportional to the water level. The elongated
rectangle at the top right of the diagram represents the steam output
valve. The color and horizontal length of a bar inside it have been
parameterized to represent steam flow. Finally, the rectangle toward
the lower right is the exhaust. Similar to steam flow, it contains a
bar that increases in length and changes color proportional to the
percentage of excess oxygen in the exhaust.
4.1 Steam flow
Suppose we are interested in those states where steam flow is high.
To identify these states using our diagram alone, we would have
to step through 9,600 frames. However, using the time series view,
this task is much easier. To start we can load the steam flow variable
into the time series view of our prototype. When we zoom out we
get the result shown in Figure 8 (a). We can see that the steam flow
rate fluctuates quite a bit over time. We may even argue that there
are some repeated patterns visible in the fluctuation. It is possible
to zoom in on the data and investigate these further but perhaps

99

Figure 10: Drum pressure versus steam flow.

Figure 8: Steam generator, time series view.

more interestingly, we would like to determine whether there are
correlations with the other variables that describe our data.
When we load all four variables into the time series view, we get
the result depicted in Figure 8 (b). The variables were first ordered:
steam flow, drum pressure, oxygen exhaust, water level. Again the
user can zoom in, zoom out and move to different parts of the time
series to look for local and global patterns. It is possible to identify
correlations in this fashion. For instance, it appears as if steam flow
is high whenever the water level and drum pressure are high and
when there is little excess oxygen in the exhaust gases. By double
clicking on a few of these states we get diagrams such as the one in
Figure 9 that seem to support this observation.
To confirm the above hypothesis, it would be useful to identify
and select all states where steam flow is high. We can zoom in on
individual states where this holds, but it is also possible to identify
such states using variable-based clustering (see Section 2.3).

100

ceed by classifying both these variables’ domains into four classes
using the equal intervals method [3]. This results in partitioning the
domains into four equal intervals, all representing 25% of the total
range.
When we consequently cluster on steam flow and drum pressure
we get the results in Figure 10. From the figure we see that our
earlier hypothesis does not hold. The two clusters that have been
annotated with diagrams show that even when steam flow is in the
top 25% of its range, there are states where drum pressure is in the
range 25–50% and 50–75%. This is shown in two ways. First, the
two leaf clusters third and second from the right would not exist if
this had not been the case (see Figure 10 (a)): the second level cluster corresponding to steam flow in the range 75–100% (right-most)
would only have a single child node. Second, consider the height
and color of the bar encoding drum pressure in the two diagrams
(see Figure 10 (b)). In both, this bar does not reach its maximum
height and does not assume a dark brown color (compare to Figure 7 (b)).
4.3 Water level

4.2 Drum pressure
To perform clustering, we can classify the continuous domains
found in our data to get a number of discrete intervals (see Section 3). Our previous observation suggests that a high steam output
is always coupled with high drum pressure. We want to find out
whether this hypothesis really holds. For instance, we want to learn
whether states exist where steam flow is at a maximum but where
drum pressure is not too high. We may argue that this is an ideal
state for the system to be in since steam output is high but we do not
run the risk of generating too much pressure in the drum. We pro-

For steam production, there has to be water in the drum. When
we classify the water level domain in the same way as above and
then perform variable-based clustering (steam flow, drum pressure,
water level), we get the results shown in Figure 11. However, we
note that we are actually only interested in distinguishing between
(1) those states where there is too little water and (2) those states
where there is enough. This enables us to reduce the complexity of
our visual analysis even further. To do so we group the second, third
and fourth intervals of water level together (see Section 3). That is,
we define a mapping 0–25% → too low, 25–100% → ok. When we
apply the same variable-based clustering as above we get the results
shown in the lower right of Figure 12 (compare the number of arcs

Figure 9: High steam flow.

Figure 11: Steam flow, drum pressure and water level.

Figure 12: Multiple views on an industrial steam generator.

and leaf clusters with those in Figure 11).
Using the clustering results we can identify all states where
steam flow is in the top 25% of its range, drum pressure is in the
range 50–75%, and where the water level is not in the bottom 25%
of its range. These states are all clustered in the leaf second from
right of the clustering hierarchy (see Figure 12 (a)). When we select this cluster all individual states in it are highlighted in the time
series view. This holds for both the global (see Figure 12 (b)) and
the local time scales (see Figure 12 (c)).
When we zoom in to see more details, we are able to learn more
about those states where we have a high steam flow, an acceptable
drum pressure and sufficient water. For example, from the states
preceding the highlighted section of Figure 12 (c) we see that drum
pressure has been reasonably constant for a stretch of time while
the excess oxygen in the exhaust recently dropped to its minimum.
This observation is not that obvious to interpret. We can reason
as follows. There will be little excess oxygen in the exhaust gases
when (1) little air enters the furnace, or when (2) the burner efficiently turns the air and fuel mixture into thermal energy. We can
rule out (1) since this would also result in a drop in drum pressure
and steam flow, which is not the case (see Figure 12). The second
explanation seems more feasible. This conclusion can be verified
by navigating to other highlighted states where the steam flow is
high, and where there is sufficient pressure and water.
We make one more observation regarding Figure 12. If we consider the transitions represented by arcs (interpreted clockwise), we
see that there are no transitions from states where there is a high
rate of steam flow and sufficient pressure and water to states where
there is very little water, and vice versa. We see this by observing
that there are no arcs between the highlighted cluster and the cluster
immediately to its left (see Figure 12 (d)). The latter cluster represents states where steam output is high, there is sufficient pressure,
but very little water.

5

D ISCUSSION

By providing different views on multivariate system traces, the user
is enabled to take different perspectives on the data. This implies
switching between different conceptualizations of a problem. Our
point of departure is that this assists the user in making cognitive
switches, resulting in a deeper understanding of the data being studied. We currently offer a different linked view for every perspective
introduced in Section 2. A promising opportunity for future work is
to investigate how these views could be integrated more seamlessly.
This could imply combining views and could also lead to new user
interaction methods. The ability of users to show diagrams on demand in the time series and diagram views is a first step in this
direction.
Our results suggest possible extensions for custom diagrams. Although the small set of DoFs we define for every shape is sufficient
to illustrate our ideas, more complex and expressive ones are possible. For example, currently users can only define a linear range for
the geometric DoFs (position, size and rotation). However, there
may also be problems that require more complex paths. Also, the
ability to specify a hierarchy of shapes and DoF dependencies could
allow for very intricate diagram behavior to be defined. Alternatively, the user could be provided with a number of predefined widgets, such as various common visualizations. By only linking one
or more variables with such a widget the user could be spared the
effort of assembling them from various shapes. Investigating the
trade-off between simplicity and expressivity in user defined diagrams is an interesting theme for future work.
We have presented our approach in the context of system analysis and our use case is an example that has a natural physical
representation. This is an important class of problems that is frequently encountered. However, we suspect that our approach could
be used earlier in the system design cycle. To investigate this, we
aim to collaborate with system analysts to see whether our technique could be applied during the development of the mathematical models that are used as input for simulation [12]. In a fashion
analogous to debugging, many problems could be identified before

101

the model is finalized. This is opposed to only inspecting the results
after the model has been completed. We are also interested in applying our technique to compare simulated and actual traces (performance measurements from implemented systems) of the same
system. This could be achieved by considering the measured and
simulated variables in parallel.
We argue that our approach is flexible enough to deal with other
application domains or time series data in general. This could be
supported by classification algorithms that take the distribution of
variable values along the time axis into account, as we remarked
in Section 3. For example, because the discretization algorithms
we currently offer only consider variable domains, a high spike and
a high plateau would be grouped into the same class. However,
techniques such as SAX [5] distinguish between such patterns. Our
technique could be easily extended to offer additional classification
methods and to support user interaction with results. For example,
when classifying a numeric domain the user may want to employ
statistical methods first and then manually update intervals to fall
on the nearest multiple of 10.
Related to the above are the linearity assumptions that we make
in our current approach. For example, we use linear interpolation to
calculate the graphical appearance of shapes in the diagram view.
For problems such as our use case, this is reasonable. However,
to deal with problems where the distribution of values are skewed
more flexibility may be an advantage. Logarithmic scales could
be a first step. It may also be an advantage to treat different types
of variables (nominal, ordinal, divergent, and so forth) in different
ways. Our framework of three conceptual perspectives on the same
data set is flexible enough to allow such extensions. For example,
the user could be provided with alternative presentations to the traditional time series plots we discuss in this article (see Section 2.2).
This also holds for the graph view. We have opted for combining
a clustering hierarchy with an arc diagram such that the positions
of the nodes have meaning to the user. However, other presentation techniques could be used. Finally, color schemes tailored for
different data types could easily be included.
6

C ONCLUSION

We have presented a new method for the visual analysis of multivariate system traces. Our approach is based on three perspectives
that can be taken on trace data: a schematic diagram, time series
plots and a state transition graph. We have provided background
on these perspectives and have shown how they were incorporated
in a single solution that enables the user to consider trace data in
complementary linked views.
The combination of the different perspectives provides the user
with a powerful analysis tool. With custom parameterized diagrams
the user explores the data with a visual representation that closely
fits his or her conceptualization of the problem. The user is able to
analyze correlations and patterns in the time series view, while analyzing high-level system behavior with the graph view. To illustrate
this we have implemented a prototype that is available for download
at www.win.tue.nl/˜apretori/vistrace/. To show the merit of our approach we have provided a use case of a data set that describes the
behavior of an industrial steam generator.
ACKNOWLEDGEMENTS
This research was funded by the Netherlands Organization for Scientific Research (NWO) under grant 612.065.410. Our data set was
obtained from Eamon Keogh (University of California, Riverside).
We would like to thank Tamara Munzner (University of British
Columbia) for valuable discussions, input and suggestions. We
thank the anonymous referees for their thoughtful feedback on an
initial draft of this article.

102

R EFERENCES
[1] A. Arnold. Finite Transition Systems. Prentice Hall, 1994.
[2] M.C. Hao, U. Dayal, D.A. Keim, and T. Schreck. Importance-driven
visualization layouts for large time series data. In Proceedings of the
IEEE Symposium on Information Visualization (InfoVis 2005), pages
203–210, 2005.
[3] J.A. Hartigan. Clustering Algorithms. John Wiley & Sons, 1975.
[4] H. Hochheiser and B. Shneiderman. Dynamic query tools for time
series data sets: timebox widgets for interactive exploration. Information Visualization, 3(1):1–18, 2004.
[5] J. Lin, E. Keogh, and S. Lonardi. Visualizing and discovering nontrivial patterns in large time series databases. Information Visualization, 4(2):61–82, 2005.
[6] J. Lin, E. Keogh, S. Lonardi, and B. Chiu. A symbolic representation
of time series, with implications for streaming algorithms. In Proceedings of the 8th ACM SIGMOD Workshop on Research Issues in
Data Mining and Knowledge Discovery, 2003.
[7] A. Mathijssen and A.J. Pretorius. Verified design of an automated
parking garage. LNCS, 4346:165–180, 2007.
[8] G. Pellegrinetti and J. Bentsman. Nonlinear control oriented boiler
modeling - a benchmark problem for control design. IEEE Transactions on Control Systems Technology, 4(1):57–64, 1996.
[9] A.J. Pretorius and J.J. van Wijk. Visual analysis of multivariate state
transition graphs. IEEE Transactions on Visualization and Computer
Graphics, 12(5):685–692, 2006.
[10] A.J. Pretorius and J.J. van Wijk. Bridging the semantic gap: visualization of transition graphs with user-defined diagrams. IEEE Computer
Graphics and Applications, 27(5), 2007.
[11] W. Ribarsky, E. Ayers, J. Eble, and S. Mukherjea. Glyphmaker: creating customized visualizations of complex data. IEEE Transactions
on Visualization and Computer Graphics, 12(3):733–740, 1994.
[12] A.B. Shiflet and G.W. Shiflet. Introduction to Computational Science:
Modeling and Simulation for the Sciences. Princeton University Press,
2006.
[13] B. Shneiderman and A. Aris. Network visualization by semantic substrates. IEEE Transactions on Visualization and Computer Graphics,
12(5):733–740, 2006.
[14] E.R. Tufte. The Visual Display of Quantitative Information. Graphics
Press, second edition, 2001.
[15] B. Tversky, J.B. Morrisony, and M. Betrancourt. Animation: can it facilitate? International Journal of Human-Computer Studies, 57:247–
262, 2002.
[16] J.J. van Wijk, R. van Liere, and J.D. Mulder. Bringing computational
steering to the user. In Proceedings Scientific Visualization - Dagstuhl
’97, pages 304–313, 2000.
[17] J.J. van Wijk and E.R. van Selow. Cluster and calendar based visualization of time series data. In Proceedings of the IEEE Symposium on
Information Visualization (InfoVis 1999), pages 4–9, 1999.
[18] M. Wattenberg. Sketching a graph to query a time series database.
In Proceedings of the SIGCHI Conference on Human Factors in Computing Systems Extended Abstracts (CHI 2001), pages 381–382, 2001.
[19] M. Wattenberg. Arc diagrams: visualizing structure in strings. In Proceedings of the IEEE Symposium on Information Visualization (InfoVis 2002), pages 110–116, 2002.
[20] M. Wattenberg. Visual exploration of multivariate graphs. In Proceedings of the SIGCHI Conference on Human Factors in Computing
Systems (CHI 2006), pages 811–819, 2006.
[21] M. Weber, M. Alexa, and W. M¨uller. Visualizing time-series on spirals. In Proceedings of the IEEE Symposium on Information Visualization (InfoVis 2001), pages 7–13, 2001.

