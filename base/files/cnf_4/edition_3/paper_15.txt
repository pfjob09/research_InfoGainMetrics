A Self-adaptive Treemap-based Technique for Visualizing Hierarchical
Data in 3D
Abon Chaudhuri∗

Han-Wei Shen†

Computer Science & Engineering
The Ohio State University, USA

A BSTRACT
In this paper, we present a novel adaptive visualization technique
where the constituting polygons dynamically change their geometry and other visual attributes depending on user interaction. These
changes take place with the objective of conveying required level
of detail to the user through each view. Our proposed technique
is successfully applied to build a treemap-based but 3D visualization of hierarchical data, a widely used information structure. This
new visualization exploits its adaptive nature to address issues like
cluttered display, imperceptible hierarchy, lack of smooth zoomin and out technique which are common in tree visualization. We
also present an algorithm which utilizes the flexibility of our proposed technique to deal with occlusion, a problem inherent in any
3D information visualization. On one hand, our work establishes
adaptive visualization as a means of displaying tree-structured data
in 3D. On the other, it promotes the technique as a potential candidate for being employed to visualize other information structures
also.

on multiple regions of the visualization may not be possible due to
the same reason.
3D visualizations usually resemble rigid polygonal structures
and hence inherit many properties of polygonal 3D objects leading
to problems like occlusion and view selection. Having this resemblance to 3D rigid bodies stand as an obstacle to build effective 3D
visualization. If these rigid 3D structures are given the ability to
dynamically modify their geometry and other visual attributes on
the basis of user interaction, the problems mentioned above can be
tackled with novel strategies. That we have introduced 3D structures capable of undergoing such changes in our tool of displaying
hierarchical data supports that statement.
In this paper, we present a new technique to visualize treestructured data by incorporating adaptive 3D structures to conventional treemap. Successful application of adaptive visualization to
hierarchical data opens up possibilities of this being employed to
visualize other information structures also. The main contributions
of our work can be summarized as follows:

Index Terms: I.3.3 [Computer Graphics]: Methodology and
Techniques—Interaction techniques; I.3.8 [Computer Graphics]:
Miscellaneous

• Our method exploits the adaptive nature of 3D structures to
develop an algorithm that solves the occlusion problem in a
novel way. Instead of getting the user into the trouble of finding a view for an occluded surface, the visualization adapts
its geometry to minimize occlusion. The flexibility of the 3D
structures also protects the 3D view from getting distorted due
to perspective projection.

1 I NTRODUCTION
Efficient visual representation of large hierarchical data is considered a major goal to achieve in information visualization. Two
main techniques employed so far to near that goal are node-link
representation and space-filling visualization, Treemap being the
prominent representative of the latter. Even though treemaps and
treemap-based approaches have established themselves as screenspace efficient, interactive tools for visualizing tree-structured data,
the challenge is far from being called off unless issues like the following can be neatly resolved: cluttered display for hierarchies with
high depth and/or width, maintaining stability of structure as well
as good aspect ratio of rectangles, focusing on regions of interest,
smooth navigation up and down the hierarchy.
Research endeavors in the domain of tree visualization have been
aiming at addressing as many of these issues as possible. Among
various modified schemes suggested and explored, the idea of promoting treemap to three dimensions has been paid considerable attention. This approach has connected treemap research to another
major debate regarding effectiveness of 3D tools to visually represent information as compared to their 2D counterparts.
In general, 3D visualization tools offer better screen-space utilization, but avoiding occlusion and proper view selection stand as
tough challenges. Since no viewpoint can capture the entire 3D object at once, users may find it problematic to navigate to regions
not visible from current viewpoint. Simultaneously concentrating
∗ e-mail:

chaudhua@cse.ohio-state.edu

† e-mail:hwshen@cse.ohio-state.edu

IEEE Pacific Visualization Symposium 2009
April 20 - 23, Beijing, China
U.S. Government work not protected by U.S. copyright

• Our work presents a 3D treemap-based visualization which
nicely deals with some of the issues regarding tree visualization and thus, establishes adaptive visualization as an useful
technique for visually exploring large hierarchies. More precisely, our method produces views free of cluttered data items,
distinguishes between views which display context and those
focusing on selected regions, allows smooth navigation from
focus to context view and vice versa, attains zoom, globally
as well as locally.
An overview of the visualization is as follows: In our treemapbased algorithm algorithm, 3D structures appear and disappear
based on user’s request to view detailed information and hence, do
not permanently add to the complexity of the visualization. As the
user selects different rectangles to visualize hidden information, the
3D visualization dynamically change configuration to offer a better
view to the user. And most interestingly, with each request to display or hide some portion of the data, a group of polygons repositions themselves with the objective of minimizing occlusion.
The rest of the paper is organized as follows: section 2 presents a
brief survey of papers related to treemaps and 3D tree visualization
tools. Various aspects of our design including algorithm for minimizing occlusion are described through multiple subsections under
section 3. Section 4 discusses the visual cues used to strengthen
perceptibility of the tool. Section 5 demonstrates how our visualization can be used to answer specific queries and to highlight
various features of a particular data set. This section precedes a
short Conclusion which summarizes the work and hints at possible
extensions.

105

2 R ELATED W ORK
2.1 Tree Visualization
Treemaps [5], introduced by Johnson and Shneiderman in their
milestone work, display hierarchical data in a rectangular 2D area
in space-filling manner. Starting from the entire area, it continues
to partition the rectangular space unless each rectangle represents
a leaf node of the tree. The partitioning is done in such a way that
area of each rectangle is proportional to the value of an attribute of
the corresponding tree node. Treemaps are quite efficient in representing structural as well as content information of a hierarchy in a
single display.
Since introduction of treemaps, numerous works have been published focusing on improving different aspects of this visualization
tool. More than one layout algorithms [4] [10] [1] [13], strategy
of sub-dividing a rectangle representing an internal node into a set
of smaller rectangles corresponding to its children, have been proposed with the objective of improving aspect ratio and maximizing
stability. A comparative analysis of different layout algorithms is
available here [13]. Works like Cushion Treemap [15] have enhanced the visual cues, e.g.-color and shading to provide with better perceptibility of the hierarchy. Various zooming and browsing
techniques [9] [3] have emerged so that the user can navigate up
and down the hierarchical structure without much difficulty.
In addition to these works which have added or modified features
and functionalities to treemaps keeping its basic structure intact,
many attempts have deviated from the conventional treemap to produce new kinds of tree visualization. Sunburst visualization [11],
for example, was developed as another space-filling technique, but
with a radial display based on pie diagrams. Elastic hierarchies [17]
was a venture to blend node-link and space-filling techniques.
2.2 3D Interface for Tree Visualization
Research to visualize tree-structured data in 3D was taking place in
parallel with progress of treemap-based techniques. Cone Tree [7],
way back in 1991, was developed as a 3D equivalent of node-link
representation. This paper unfurled the idea of displaying only portions of a tree at a time by introducing techniques they called growing and pruning. This technique offers better screen space utilization and better average aspect ratio only at the cost of imposing an
upper limit on number of levels to be displayed. Tanaka et al. introduced Treecube [12] which directly mapped the treemap layout
algorithms to 3D primitives. Both the papers use transparent shading to reduce the effect of occlusion to some extent. StepTree [2],
even though developed specifically to represent file system hierarchy, presents another way of 3D tree visualization by stacking up
levels. Their paper deals with occlusion by rendering only modified
files as solid 3D boxes and the rest as wire frames. This technique of
utilizing an attribute which is particular for a file data item is hard to
generalize. Beamtrees [14] also use the third dimension to visualize the hierarchical structure more vividly. They, instead of getting
rid of occlusion, utilize it as a cue to perceive depth and hierarchy.
Circle Packing [16] presents a 3D cylindrical display of hierarchical information. Schulz et al. [8] developed a generic framework of
designing treemap-based visualization in 3D, but skipped detailed
discussion on occlusion.
3 A LGORITHM
Our algorithm creates a treemap-based visualization which, adaptive by nature, can efficiently display large hierarchical data in 3D.
This section introduces the reader to the challenges in tree visualization only to unfold different components of our algorithm and to
explain how those components deal with the challenges.
3.1 Cluttered Treemaps
Attempt to display the entire tree at once in the stipulated screen
space often results in a cluttered treemap (Fig. 1(a)) with small rect-

106

angles and illegible node labels. Our algorithm directly attacks the
problem of cluttering by displaying only selected levels of the tree
at once. Initially our visualization renders only up to certain levels
of the tree and hence, resembles a normal treemap from appearance. The user has the freedom to choose how many levels are to
be displayed in what we call Basic Map(Fig. 1(b)). Unlike normal
treemap where each smallest rectangle corresponds to a leaf node
of the tree, each rectangle in our basic map, to be called Base Rectangle, represents a node at the deepest level being displayed.
This display, while it addresses the problem of cluttering, nevertheless is incomplete unless the user is given access to the levels not
yet visible. Hence, based on user interaction, basic map has to create screen space for the level(s) rooted at nodes that correspond to
rectangles of basic map. In our visualization, that space is provided
by rectangles which appear as perpendicular to the basic map at
the upper horizontal edge of user-selected base rectangles. Deeper
levels of data rooted at the node represented by a base rectangle
are displayed in the form of another treemap, which we call lifted
map(Fig. 1(c)) on this extra screen space. The basic map automatically tilts itself backward to create an optimal view of the standing
structure.
Given the same data, a treemap with multiple lifted maps look
less cluttered than a normal treemap because of the facts that the
lifted maps show up in yet unused 3rd dimension and their orientation and color are different from that of base rectangles. Moreover,
the user’s freedom to hide or display lifted maps according to need
and degree of cluttering strengthens our scheme.

(a)

(b)

(c)

Figure 1: (a) Cluttered Treemap: displaying all 5 levels of NBA 2003
data set. (b) Basic map which renders only first 4 levels. (c) Information at level 5 is shown through rectangles standing perpendicular
to the basic map. For a better understanding of our technique and
related discussions that follow, the supplementary video may turn out
to be useful.

3.2 Perceiving Hierarchy of Data
Any 3D representation of hierarchical data needs to clearly define
how to perceive the hierarchy from it. Users, who are accustomed
with parent-child representation of treemaps, should be able to easily adapt to the new system. Figure 2 explains the parent-child relationship in our visualization. Each lifted treemap basically represents a tree whose root is the node represented by the base rectangle
lying at its feet. In other words, a base rectangle and the entire area
of the lifted map standing at this base rectangle correspond to a
single node of the tree.
3.3 Occlusion
Figure 3 suggests that the aforesaid solution to cluttered display requires some strategy to deal with occlusion. In tilted view, a lifted
map always blocks some portion of the basic map and possibly
some part of other lifted maps, if any, irrespective of the location
of user’s eye. As multiple lifted maps pop up, the problem becomes
prominent.

Figure 4(a) & 4(b).
G

....

....

....

DE

....

....

F

G .... F .... A
B
D

A

C

F

B

A

A

C
E

Figure 2: Perceiving hierarchy: Left. The entire tree. Levels to be
displayed in basic map are in shaded box. Middle. The basic map.
Rectangles correspond to nodes at deepest displayed level, eg.- A,
G, F. Right. The lifted map that stands atop rectangle labeled A
displays subtree rooted at A.

3.3.2

Elevation map

The basic map is associated with an elevation map which, we shall
see in Section 3.3.3, requires to be updated at the occurrence of two
events: popping up and closing down of a lifted map. Elevation of
each rectangle is stored as an integer which, multiplied by the current height (see section 3.4) of a lifted map gives the actual amount
by which it is displaced parallelly from the plane where the map lies
initially. Hence base rectangles that are at elevation 0 stay on that
plane. In the beginning, all the base rectangles stay at elevation 0.
Occurrence of a couple of events place them at different elevation
levels.
The basic map appears 2D as long as all the base rectangles have
elevation 0. Otherwise, when the angle of tilt is zero, a rectangle with higher(lower) elevation appears closer to(farther from) eye
(Fig. 5(a)). As the user starts to tilt the map backward, the ones
with higher(lower) elevation appear to be placed on top of (below)
the ones with lower(higher) elevation (Fig. 5(b)). Hence, the elevation map imparts some kind of front-back(up-down) relationship
between rectangles in non-tilted(tilted) view.
Top

Back
(Top)

Front
(Bottom)

Bottom

(a) Basic map
Figure 3: Problem of Occlusion

Rotating the entire map or zooming in on one portion, which
seems to be a quick fix, helps to visualize a couple of lifted maps
located close to each other only at the cost of losing view of the rest
of the map. Moreover, allowing uncontrolled zoom-in may take
to unusable views where it is difficult for the user to keep track of
user’s eye location in object space.
Our scheme of adaptive structure solves the problem in a novel
way. The basic idea is that whenever a lifted map emerges, all the
base rectangles that would be potentially occluded by it in some
configuration of the map elevate themselves to the height of the
lifted map. Each of these elevated rectangles block the view of one
or more base rectangles; hence they also need to be elevated. This
process of elevating base rectangles start from the location of the
newly lifted map and rolls on recursively until the far end of the
basic map is reached. In a similar fashion, closing down of a lifted
map initiates a process of lowering of a group of base rectangles.
3.3.1

(b) Tilted map

Figure 4: Top-Bottom Relation between base rectangles in Basic
Map changes to Front-Back Relation in Tilted View.

Front

Back
0

1
0

Above (Front)

0

0

0

Below (Back)

1

0

0
0

0

0

(a) No-tilt view

0

0

0

0
0

0

0

0

(b) Tilted view

Figure 5: Elevation map imparts a Front-back(Up-Down) Relation between base rectangles in non-tilted(tilted) map.

Front-Back and Top-Bottom Relationship

Before discussing the algorithm, it would be appropriate to clarify
how we have defined front-back and top-bottom relation between
two base rectangles. In the basic map, all rectangles stay perpendicular to the line of sight given the line of sight intersects the center
of the entire map. So the basic map, in appearance, is no different
from a conventional 2D treemap. Whenever a lifted map appears,
the basic map tilts in a way so that the upper or top end of the 2D
basic map moves away from eye and the lower or bottom end comes
closer. As a result, between any two base rectangles, the one that
is completely below (on top of) the other in basic map automatically turns out to be in front (at back) of the other in tilted map, see

3.3.3

Algorithm for Adaptation of Elevation Map

At Popping up of a Lifted Map: When a base rectangle at elevation h is selected by the user, the adjacent ones which are at
back of it are elevated to a level at least (h+1). Then each of these
rectangles is probed and their backward neighbors are elevated in
a similar fashion. This process should go on recursively unless a
rectangle which has no backward neighbor is reached. On successful completion of the run, each rectangle should be at an elevation
which is equal to or greater than the maximum elevation of all its
adjacent front rectangles. Figure 6(a) is a sample case showing how
the elevation maps are updated.

107

0

0
0
0 0

0

0

0

0

1

0

0

0 0

0

0

0

0
0

0 0

0

Selected Base Rectangle

1

1

0 0

0

2

1

1

1

0

1

0

0 0

0

2

2
0

1
0

0

(f)

(e)

(d)

0

1

0

1

0 0

0

0

Selected Base Rectangle

1

1

0

0

0

(c)

(b)

(a)

1

1

0

1

(a) Popping up of rectangles: In a and c, user selects shaded base rectangles to view details. In all the diagrams, the rectangle
whose backward neighbors are being checked is marked with a star. An arrow stretches through the shaded backward
neighbors.

2

1

2

0 0

0

0

1
0 0

0

1
0

2

0
0
0 0

0

0
0

0

(f)

0

0
0

0

0
0

0

0
0 0

(g)

2

0

0

0

0 0

0

0

(d)
1

0

2

2

1

(c)

0
0 0

2
1

0
0 0

0

1

0

2

2

1

2

(b)
selected base rectangle

(a)

(e)

0

1

1

2

1

0

0

0

0
0

1

0

2

0 0

1
0

0
0

0

(h)

(b) Closing down of rectangles: In a, user selects rectangles to hide details. In all the diagrams, the rectangle whose backward neighbors are being
checked is marked with a star. The one undergoing updating of elevation is shaded. An arrow stretches through the front neighbors of the one being
shaded.
Figure 6: Sequence of diagrams explaining two cases of adaptation algorithm. To clearly show the elevation values at every stage, the diagrams
are drawn in such a way that they look tilted at 0◦ . In the actual application, they would appear as tilted at some angle.

108

At Closing down of a Lifted Map: In the second case where
the user closes down a lifted structure, the algorithm starts from
the parent rectangle which is at the feet of the lifted structure. The
algorithm checks the backward neighbors one by one to see if they
should be lowered. This checking is not quite straightforward.
Suppose a rectangle A is one which lies at the feet of a closing
lifted map. Suppose B is a backward neighbor of A. Now if B can
be lowered or not, more precisely speaking, the amount of allowable lowering for B does not depend only on A, but on all the front
neighbors of B, namely A, E and D from Figure 7. For any given
base rectangle, its backward neighbor can be lowered if -

to no-tilt view without closing down the lifted maps, the base rectangles no longer appear to be at equal distance due to foreshortening (Fig. 8(b)). On the other hand, when the user tilts it at its
maximum (i.e., one right angle), the lifted maps, located at different distances from eye, offer a view from which it is hard to perceive
hierarchy of the data (Fig. 8(c)).

1. None of the front rectangles has their lifted maps visible.
2. After lowering down, it will be at elevation at least equal to
maximum elevation of all of the front neighbors.
More generally speaking, a back rectangle B can be lowered by the
amount (see Fig.7): EB − Max(EI + HI ) where I ∈ A, E, D. EI and
HI respectively denote elevation of a rectangle I and height of its
lifted map associated to it. If the lifted map at I is not yet displayed,
HI = 0. If the above two conditions are satisfied, the back rectangle
comes down to the same level as the A.

(a)

(b)

(c)

Figure 8: (a) Occlusion free treemap with multiple lifted maps and
elevated base rectangles. (b) Distorted Basic map: obtained by tilting
the figure at left back to zero degree. (c) Distortion at full tilt: 90◦
rotated view of figure at far left.

Back

.....
.....

.....

B
D

E

A

.....
Front

Figure 7: All Front neighbors of B determine if B can be lowered.

The decision about lowering down of backward neighbor taken,
the algorithm proceeds similarly. The same process is repeated with
each rectangle which was being treated as a backward neighbor in
previous stage. This process rolls on recursively unless the back end
of the map is reached. Figure 6(b) displays a sequence of operations
while closing down a lifted structure.
3.3.4

Data Structures

A quick review of the adaptation strategy reveals requirement of
two data structures to successfully manage the two cases described
in Section 3.3.3. While dealing with the first case, for each base
rectangle, a list of all its adjacent backward neighbors along with
their elevations is to be computed. In the second case, the algorithm, in addition to the previous one, needs another data structure
which is basically a list of all front neighbors along with their elevations for each base rectangle.
Given N base rectangles, computation of both the lists has complexity (N 2 ). But this needs to be done only once unless the hierarchical data itself changes. Hence construction of both the lists
can be performed as a pre-processing step before rendering the basic map. With occurrence of each event, the elevation values of each
rectangle must be updated which is a linear order computation.
3.4

Distortion due to Perspective Viewing

The idea of placing rectangles at various elevation levels solves
occlusion (Fig. 8(a)), but invokes another problem. Our visualization being 3D, perspective projection seems to be the natural
choice among different projection techniques. But with multiple
lifted maps having displayed, the adaptation algorithm positions
base rectangles at different elevations. Now if the user rotates back

Effect of both distortions is nullified by exploiting the adaptive
nature of our visualization. We have introduced proportionality between angle of tilt, which we can call θ , and height of a lifted map,
say h, to get away with distortion shown in Fig. 8(b). As a result, instead of directly popping up with a constant height, the lifted maps
smoothly grow and shrink with increase and decrease of angle of
tilt allowing the user to rotate back to see the basic map as it was
(see Figure 10 and 11).
Distortion at full tilted view (Fig. 8(c)) is overcome by incorporating adaptiveness to the base rectangles also. As the angle of
tilt increases, all the base rectangles gradually contract with the objective of bringing all lifted maps to same x-y plane in full tilted
view. The interesting thing is that base rectangles contract at different rates depending on their position with respect to the targeted
x-y plane. The contraction can be looked upon as movement of
two parallel straight lines at two different rates: the top and bottom
edges of the rectangle. If the targeted plane is z = T , the top and
bottom edges reside on the planes z = t and z = b respectively, and
the contraction is to happen over a span of change of angle θ , then
the rate of contraction for the top edge is (t − T )/θ and for bottom
edge is (b − T )/θ , assuming t ≥ b ≥ T (see Figure 9).

y

z = 0 plane

A

x

z=t
z=b

z

z=T

Figure 9: Contraction of a sample base rectangle A. The basic map
rotates around z = 0.

3.5 Zoom-in Technique
Zoom-in and out technique built in a tree visualization system provides the user with a means of smooth navigation through different

109

(a) θ = 45◦

(b) 45◦ > θ > 30◦

(c) 30◦ > θ > 15◦

(d) θ close to 0◦

Figure 10: (a) Basic view with some randomly selected lifted maps. (b)-(d) As the angle of tilt gradually goes down to 0◦ , the heights of the lifted
maps proportionally reduce so that basic view suffers no distortion. The sequence will produce a basic view same as in Fig. 1(b).

(a) θ = 45◦

(b) 45◦ < θ < 70◦

(c) 70◦ < θ < 90◦

(d) θ = 90◦

Figure 11: (a)-(c) Base rectangles contract to bring all lifted maps to same image plane as angle of tilt approaches 90◦ . (d) At 90◦ tilted view, the
view is similar to that of a 2D treemap with details exposed.

levels of the tree. Traditional zoom-in techniques can always be applied to our visualization, but adaptive nature of our 3D structures
itself offers different ways of attaining zoom. The basic idea is that
the polygon targeted to be zoomed in on can itself bring changes to
its geometry and/or position to appear larger.
Local zoom: The proportionality between angle of tilt θ and
height of a lifted map h (see section 3.4) has been utilized to attain
natural zoom on individual rectangles. In a conventional treemap,
the area of the base rectangle would have been used to render the
treemap corresponding to the deeper levels below the node represented by that rectangle. In our method, the lifted rectangle provides the space for rendering inner levels. The lifted rectangle’s
width, say l has to be equal to that of the parent base rectangle. But
its height h can be controlled by varying the angle of tilt. Given w,
the length of the base rectangle, the available screen area for displaying details would be l ∗ w in a conventional treemap and l ∗ h in
our method. Since h = k ∗ θ for some constant k, to attain a bigger
display area than what conventional treemap could offer, the basic
map needs to be tilted at a minimum angle(see Figure 12) for which
k ∗ θ > w.

l
l
A

h1

A

w

A

h2

A

w

Figure 12: Left. The basic map is tilted at θ1 such that h1 = k ∗ θ1 < w.
Hence no zoom achieved. Right. The basic map is tilted at θ2 such
that h2 = k ∗ θ2 > w. A gain equal to h2 /w on area for rendering lifted
map is obtained.

110

Global zoom: Again the adaptability of the base rectangles, as
discussed in section 3.4, provides another way of zooming in on
the entire treemap. Careful selection of the x-y plane where all
lifted maps should reach at full tilted view is the key. If a base
rectangle’s top edge is at z = c initially and the targeted plane is
z = d where d < c; the rectangle, while contracting, carries the
lifted map associated to it closer to the eye as angle of tilt increases.
Figure 13 demonstrates with a single base rectangle how a zoom-in
effect is obtained in this way.

A

A

A

Figure 13: If a base rectangle is made to slide forward as angle of
tilt increases, its associated lifted map gradually expands, even if
its height stays constant over change of angle, as is the case in the
diagrams. The black thick line represents axis of rotation of the entire
map. The blue line which denotes extended top edge of rectangle A
gradually moves forward.

3.6

Focus and Context Visualization

Our algorithm offers a wide range of views depending on the angle
of tilt, which varies from 0 to 90◦ . Sidewise rotation also produces
a number of views. Having so many of them can be called justifiable only if all these views convey some information and more
importantly, not all of them display same information. In our case,
we use the two extremes, the ones tilted at 0 and 90◦ , to represent
two 2D treemaps. Given a tree with D levels of which first d are
displayed in basic map, the 90◦ view can potentially represent the
entire treemap with all nodes up to level D. The intermediate views,

while they guide the user smoothly from one end to the other preventing abrupt change, also allow the user to focus on details at
different parts of the basic map.
The proportionality and contraction scheme discussed in section
3.4 determines if visualizing focus or context is the main goal for
a particular view. The contraction of base rectangles purposefully
start at 45◦ , not at 0◦ . As a result, in the views where 45◦ > θ > 0◦
(Fig. 10), the base rectangles (which present context) stay intact
and height of lifted maps (which present focus) are comparatively
small. These views mostly convey context information. The views
with 45◦ < θ < 90◦ comprise thinned base rectangles and elongated
lifted maps (Fig. 11), and naturally emphasize on details. Hence
the transition from 0 to 90◦ view can be interpreted as a shift either
from less to more informative view or from context to focus view.
If the user somehow loses track of structural(context) information
while concentrating on a lifted map(focus), it is just a matter of
tilting back to restore a view that restores the hierarchy.
4

V ISUAL C UES

Visual cues play important role in assisting the user to perceive various features of a visualization. Our implementation of a prototype
using Java binding of OpenGL also takes recourse to cues in the
form of color and shading, redundant polygons, animation and navigation techniques.
Like normal treemap, our visualization uses color of each rectangle as representative of some suitable attribute of the data. Unlike
normal treemap, it renders rectangles of some intermediate level,
not the ones corresponding to leaf nodes. Usually the intermediate
nodes of a hierarchical data do not have attributes. But we have set
up a relation between each parent-child pair so that some value of
an attribute can be assigned to each node of a tree-structured data,
beginning with the values at the leaf nodes. The relation is that the
value of an attribute, say x, of the parent node is some function of
the values of x of all its children. The exact function can be chosen
depending on the attribute. In most of the cases, averaging turns out
to be an appropriate choice [6].
In our implementation, HSB (or HSL) color model has been
used, the hue of a rectangle being proportional to its aggregated attribute value [6]. Different ranges of saturation and brightness have
been reserved to represent the base rectangles and the ones on the
lifted map. This is important to maintain a distinction between two
sets even if their attribute values come close to each other. Apart
from choice of color, smooth shading has been incorporated as another visual cue that would strengthen the distinction between adjacent rectangles.
Our algorithm is concerned only about base rectangles and lifted
maps. But rendering only those polygons would result in a visualization which, in addition to containing holes and cracks, would fail
to create an impression of 3D (Fig.14). We include extra polygons
which we call support walls to get a better perception of 3D.

Even though we have solved the occlusion problem algorithmically, minimal occlusion still remains as a result of perspective
viewing and presence of support walls. To deal with this, we have
allowed sidewise rotation of the structure within the range of -30◦
to 30◦ . It equips the user with one more degree of freedom that the
user can exploit to get better view of a partially occluded portion.
The changes in geometry that take place at the occurrence of certain events or due to user interaction can be tracked visually because
they are guided by smooth and slow-pace animation.
5

C ASE S TUDY

NBA 2003 Statistics Dataset which consists of 5 levels of hierarchy
classifies the list of all participating players according to names of
Conference, then Division and finally Team. We use this data set to
demonstrate how to use our visualization.
In situations where the user is interested in only a portion of
the data, our technique provides with a better view than a normal
treemap by hiding details of the remaining. For example, figure 15
shows how to obtain detailed view of Atlantic Division on the backdrop of only overview of other three divisions. It is troublesome to
identify and separate rectangles corresponding to one particular Division from a normal treemap (Fig. 15(a)) which displays all levels
of the data. In our technique, this is a two-step process. First step,
namely, selection of number of levels to be displayed in basic view,
can hide the entire details of portions not of interest(Fig. 15(b)). Selecting the rectangle denoting the region of interest is the next easy
task to complete the goal(Fig. 15(c)).

(a)

(b)

(c)
Figure 15: (a) Normal Treemap: The manually placed frame encloses
the Atlantic Division. (b) Basic View up to 3 levels show four Divisions. (c) The entire lifted map represents Atlantic Division.

Figure 14: Importance of support walls: Left. Treemap rendered
without support walls. Middle. Image after adding support walls.
The leftmost lifted map is occluded by support walls. Right. Sidewise
rotation used as a tool to visualize the occluded lifted map.

The first step, as described in previous paragraph, allows the user
to pick the best view from many and hence is a crucial one. For
example, if the user’s query is about a particular team, say Boston
Celtics, all of the Figures 16(a)- 16(c) can generate a view of it,
but Figure 16(c) clearly focuses on it best possible way. A basic
knowledge about the hierarchy of the data being displayed helps
the user efficiently perform the first step.
Ability to display selected parts of data can be utilized (see Figure 17) to generate a view suitable for comparison. Figure 17 (left)

111

(a) Basic view up to 2nd (b) Basic view up to 3rd
level: shows Conferences in level: shows Divisions in
lifted maps
lifted maps

(c) Basic view up to 4th level:
shows Teams in lifted maps
Figure 16: Selection of levels for Basic View: In (a) and (b), the
rectangles enclosed in the black frame belong to Boston Celtics. In
(c), the lifted map itself corresponds to Boston Celtics.

displays only those lifted maps which correspond to the Teams intended to be compared. Even though the lifted maps stay at various
distances from eye, the contraction of base rectangles bring all of
them to same x-y plane at 90◦ tilt, making the full tilted view a good
one for comparison, even though the portions to be compared may
not lie adjacent to each other.
6 C ONCLUSION AND F UTURE W ORK
Our work introduces self-adaptive 3D structures in the domain of
information visualization and demonstrates its use in visualization
of hierarchical data. This, in stead of finishing the task, opens up a
new set of challenges. To mention a few, our algorithm for dealing
with occlusion mainly depends on the front and back relationship
between polygons with respect to eye. So this algorithm appears
to be easily extensible to other 3D visualizations represented with
a bunch of polygons. Moreover, researchers may find it interesting to study how our adaptable visualization can deal with dynamic
changes in the hierarchy. In future, in addition to performing a
user study to evaluate merits and demerits of our tree visualization
system, we plan to apply self-adaptive visualization to different information structures and if possible, to scientific data.
R EFERENCES
[1] Benjamin B. Bederson, Ben Shneiderman, and Martin Wattenberg.
Ordered and quantum treemaps: Making effective use of 2d space to
display hierarchies. ACM Transactions on Graphics, 21(4):833–854,
October 2002.
[2] Thomas Bladh, David A. Carr, and Jeremiah Scholl. Extending treemaps to three dimensions: A comparative study. Computer Human
Interaction, pages 50 – 59, 2004.
[3] Renaud Blanch and Eric Lecolinet. Browsing zoomable treemaps:
Structure-aware multi-scale navigation techniques. IEEE Transactions on Visualization and Computer Graphics, 13(6):1248–1253,
November 2007.

112

Figure 17: View for comparison: Left. Lifted maps corresponding
to Miami Heat (front) and New Orleans Hornet (back). Right. Full
tilted view: Only two regions to be compared are displayed on the
background of support walls.

[4] Mark Bruls, Kees Huizing, and Jarke J. Van Wijk. Squarified
treemaps. In Joint Eurographics and IEEE TCVG Symposium on Visualization, 2000.
[5] B. Johnson and B. Shneiderman. Tree-maps: a space-filling approach
to the visualization of hierarchical information structures. In IEEE
Conference on Visualization ’91, pages 284 – 291, 1991.
[6] Xinghua Lou, Shixia Liu, and Tianshu Wang;. Fanlens: A visual
toolkit for dynamically exploring the distribution of hierarchical attributes. In IEEE Pacific Visualization Symposium 2008, pages 151 –
158, 2008.
[7] George G. Robertso, Jock D. Mackinlay, and Stuart K. Card. Cone
trees: animated 3d visualizations of hierarchical information. In
SIGCHI conference on Human factors in computing systems: Reaching through technology, pages 189 – 194, 1991.
[8] Hans-Jorg Schulz, Martin Luboschik, and Heidrun Schumann. Interactive poster: Exploration of the 3d treemap design space. In IEEE
Symposium on Information Visualization ’07, 2007.
[9] Kang Shi, Pourang Irani, and B. Li. An evaluation of content browsing techniques for hierarchical space-filling visualizations. In IEEE
Symposium on Information Visualization ’05, pages 81 – 88, 2005.
[10] B. Shneiderman and M. Wattenberg. Ordered treemap layouts. In
IEEE Symposium on Information Visualization 2001, pages 73 – 78,
2001.
[11] J. Stasko and E. Zhang. Focus+context display and navigation techniques for enhancing radial, space-filling hierarchy visualizations. In
IEEE Symposium on Information Visualization ’00, pages 57 – 65,
2000.
[12] Y. Tanaka, Y. Okada and K. Niijima. Treecube: visualization tool for
browsing 3d multimedia data. In Seventh International Conference on
information Visualization 2003, pages 427 – 432, 2003.
[13] Ying Tu and Han-Wei Shen. Visualizing changes of hierarchical data
using treemaps. IEEE Transactions on Visualization and Computer
Graphics, 13(6):1286–1293, November 2007.
[14] F. van Ham and J.J van Wijk. Beamtrees: compact visualization of
large hierarchies. In IEEE Symposium on Information Visualization
’02, pages 93 – 100, 2002.
[15] J.J. Van Wijk and H. Van de Wetering. Cushion treemaps: visualization of hierarchical information. In IEEE Symposium on Information
Visualization ’99, pages 73 – 78, 1999.
[16] Weixin Wang, Hui Wang, Guozhong Dai, and Hongan Wang. Visualization of large hierarchical data by circle packing. In SIGCHI conference on Human Factors in computing systems, pages 517 – 520,
2006.
[17] Shengdong Zhao, M.J. McGuffin, and M.H. Chignell. Elastic hierarchies: combining treemaps and node-link diagrams. In IEEE Symposium on Information Visualization ’05, pages 57 – 64, 2005.

