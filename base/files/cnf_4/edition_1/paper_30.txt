An Advanced Network Visualization System for Financial Crime Detection∗
Walter Didimo

Giuseppe Liotta

Fabrizio Montecchiani

University of Perugia
didimo@diei.unipg.it

University of Perugia
liotta@diei.unipg.it

University of Perugia
fabrizio.montecchiani@gmail.com

Pietro Palladino
University of Perugia
palladino@diei.unipg.it

A BSTRACT
We present a new system, V IS FAN, for the visual analysis of financial activity networks. It supports the analyst with effective tools
to discover financial crimes, like money laundering and frauds.
If compared with other existing systems and methodologies for
the analysis of criminal networks, V IS FAN presents the following
main novelties: (i) It combines bottom-up and top-down interaction paradigms for the visual exploration of complex networks; (ii)
It makes it possible to mix automatic and manual clustering; (iii) It
allows the analyst to interactively customize the dimensions of each
cluster region and to apply different geometric constraints on the
layout. V IS FAN also implements several tools for social network
analysis other than clustering. For example, it computes several
indices to measure the centrality of each actor in the network.
Keywords: Financial Visualization, Crime Detection, Graph Visualization, Graph Clustering.
Index Terms:
H.5.2 [Information Systems]: Information
Interfaces and Presentation—User Interfaces; I.5.3 [Computing
Methodologies]: Pattern Recognition—Clustering;
1

I NTRODUCTION

Financial crimes represent a major problem of many governments
and are often related to organized crimes like terrorism and narcotics trafficking. Money laundering and frauds are among the most
common types of financial crimes. They are based on relevant volumes of financial transactions to conceal the identity, the source,
or the destination of illegally gained money. The amount of money
laundered globally is thought to easily exceed 1 trillion annually. To
face this problem, most governments have created special investigation agencies, called financial intelligence units (FIUs). The main
goal of FIUs is to collect and analyze suspicious transaction data
in order to discover financial crimes, so to defend the integrity of
worldwide financial markets and to prevent from organized crimes
that can mine the homeland security.
The major challenge of FIUs is to deal with the volume and the
complexity of the collected data, which can be modeled as financial
activity networks (FANs) whose nodes represent persons or companies and whose edges represent their connections according to a
set of possible criteria. It is widely accepted that the exploration of
such networks in order to discover criminal patterns strongly benefits from a strict integration of social network analysis (SNA) and
visualization tools [16, 37, 39, 40]. Due to the heterogeneity of the
data and to the different methodologies followed by FIU’s analysts,
any system for the visual analysis of FANs should offer a variety of
flexible tools that guarantee strong interaction with the user. As it
∗ The research in this work is supported in part by the MIUR project
AlgoDEEP prot. 2008TFBWL4.

IEEE Pacific Visualisation Symposium 2011
1 - 4 March, Hong Kong, China
978-1-61284-934-8/11/$26.00 ©2011 IEEE

will be discussed in the next section, there is a general lack of these
tools in the existing systems for the analysis of criminal networks.
In this paper we present a new system, called V IS FAN. If compared with other existing systems and methodologies for criminal
network analysis, V IS FAN presents the following main novelties:
(i): It fully combines bottom-up and top-down interaction
paradigms for the visual exploration of complex networks. Using the bottom-up interaction paradigm the analyst can start from
a seminal node and can iteratively enhance the network with new
elements by adding neighbors of the displayed nodes. With the topdown interaction paradigm the analyst can use hierarchical clustering to recursively aggregate elements on the whole network currently displayed. Each cluster can be collapsed or expanded independently at any time, so that the analyst can simplify the network
at her convenience. These two kinds of interaction paradigms can
be alternated while maintaining consistency.
(ii): It makes it possible to mix automatic and manual clustering.
The system automatically computes a hierarchical clustering by exploiting k-cores, which have been proven to be effective for discovering relevant groups in social networks (see, e.g., [7, 19, 28, 34]).
In particular, we propose a general clustering approach and then
specialize it to financial activity networks. The analyst can manually edit the current clustering at any time by creating new groups
or by modifying the existing ones.
(iii): It allows the analyst to interactively customize the dimensions of each cluster region. The readability of the drawing inside a
cluster region and the number of attributes shown for this drawing
are proportional to the dimensions of the region. This kind of interaction can be regarded as a new focus+context technique with multiple foci. We remark that, experiments providing evidence of the
usefulness of focus+context techniques to navigate clustered graphs
have been conducted by Schaffer et al. [33]. The analyst can also
impose different constraints on the node positions to preserve her
mental map. For example, she can force some nodes to stay close
together or she can fix the position of a subset of nodes. The drawing algorithm attempts to compute a readable layout while taking
into account all constraints defined by the analyst. To this aim V IS FAN implements a tailored version of the force-directed paradigm.
In addition, V IS FAN is equipped with several tools for social
network analysis other than clustering, like several indices to measure the centrality of each actor in the network.
The reminder of this paper is structured as follows. Section 2
presents the literature related to our research and discusses the main
differences with our contributions. Section 3 introduces the characteristics of the financial activity networks that can be analyzed with
our system. Section 4 describes the system V IS FAN and the main
ingredients beyond its drawing algorithm and its SNA functionalities; it also illustrates a case study using real data. Conclusions and
future work are presented in Section 5.
2 R ELATED W ORKS
The development of advanced methodologies and software systems
for the analysis of criminal networks has received increasing attention after the September 11 terroristic attacks. A survey on these

203

systems is presented by Xu and Chen [40]. Chang et al. present
the system W IRE V IS, specifically tailored for the visual analysis of
financial wire transactions for fraud detection [10]. Tang et al. presented a social network analysis approach to detect illegal financial
activities performed over the Internet [37]. Both the methodologies
of Chang et al. and of Tang et al. use charts and plots, while they
make little use of network visualization techniques.
Among the systems that use network visualization tools we
mention I2 A NALYST ’ S N OTE B OOK [29] (http://www.i2inc.com/),
N ETMAP [27] (http://www.netmap.com/), and XANALYS L INK
E XPLORER [3] (http://www.xanalys.com/). They implement classical layout algorithms to represent relational data, like force-directed
algorithms, hierarchical layout algorithms, and circular drawing
algorithms [13]. The research project COPLINK defines a system using hyperbolic trees to visualize large crime networks [12].
This system has been successively equipped with a classical springembedder algorithm and with some SNA tools, like association path
searching and automatic clustering [11]. Another interesting system conceived to support investigation processes is J IGSAW[35];
it is mainly focused on extracting relevant entities (persons, addresses, dates, etc.) from a collection of documents, and to suggest
possible correlations between these entities. It also provides a basic
graph view displaying connections between entities and documents
in a nodelink diagram, allowing analysts to explore the documents
by showing and hiding links and nodes.
Differently from V IS FAN, all systems listed above use basic implementations of classical graph drawing algorithms and lack of an
effective integration of SNA tools within a highly interactive visualization environment. For example, they do not consider the
possibility of visually interacting with clusters and/or having clustering techniques specifically designed for emphasizing fraudulent
patterns by means of visual inspection.
V IS FAN is built upon a prototype system, called V IS F OR F RAUD [15], which handles only flat clustering and which neither
allows the user to fully combine bottom-up and top-down interaction paradigms nor to interact and customize the computed clusters. The drawing engine of V IS FAN adopts a force-directed algorithm whose basic physical model is similar to that described by
Fruchterman and Reingold [26]. In order to deal with clusters, layout constraints, and user interaction, the physical model has been
engineered with extra elements and forces (see also the survey by
Tamassia for the use of constraints in graph drawing [36]).
The top-down interaction paradigm used in V IS FAN is inspired
by that proposed by Eades and Huang [22]. However, differently
from [22], V IS FAN makes it possible to modify the clustering during the exploration of the network and to enhance the network with
new elements by automatically positioning them in the current cluster hierarchy. Also, the approach proposed by Eades and Huang
does not deal with clusters of prescribed dimensions, while V IS FAN allows the analyst to resize every single cluster region at her
convenience. We observe that Frishman and Tal described a forcedirected appraoch for dynamic clustered graphs, where vertices,
edges, and clusters can be modified by the user [25]. However,
the algorithm of Frishman and Tal is restricted to two-level clustering and the dimensions of each cluster is automatically computed
and cannot be modified by the user. Dogrusoz et al. described a
force-directed algorithm for drawing undirected compound graphs
with nodes of different sizes [18]. However, their approach does not
allow the user to interact with the drawing in order to enhance the
network with new elements and to modify the cluster dimensions
or collapse clusters into single nodes.
Concerning the clustering process, do Nashimento and Eades
proposed a semiautomatic framework, where the user can provide
hints to the system [17]. Again, their approach is restricted to twolevel clustering; also it is aimed at computing a good partitioning
of the vertices independent of their semantic. We also remark that

204

several systems, other than that presented by Eades and Huang,
adopt a top-down interaction paradigm based on clustering (see,
e.g., [1, 4, 5, 14, 33, 38]). Also, there exist systems that adopt
a bottom-up exploration approach as that used by V IS FAN (see,
e.g., [9, 21]). However, as far as we know, there is no previous
system that allows for a full combination of the two paradigms.
We finally observe that V IS FAN is able to compute several indices of node centrality specifically defined for social networks
and/or criminal networks, including those recently defined in [30,
31]. The analyst can display the values of these indices as node attributes in the layout. The importance of considering many different
indices of centrality in social graphs emerges from an experimental
comparison performed by Le Merrer and Tr´edan [32].
3

F INANCIAL ACTIVITY N ETWORKS

The investigations performed by the FIUs are driven by data contained in different types of reports, which are filed by financial subjects like banks, casinos, money service businesses, etc. There are
three main kinds of such reports (see the book of Westphal for further details [39]): (a) Currency Transaction Report (CTR). It is a
report that any financial institution of the United States must file
and send to an FIU when one of its customers executes a financial
transaction that exceeds 10, 000 USD. (b) Suspicious Activity Report (SAR). It is a report that a financial institution of the United
States files and submits to a FIU when it feels that one or more
financial transactions executed by some of its customers may be
illegal. If the SAR refers to a group of transactions, it reports aggregated data, and many details on each single transaction are lost.
(c) Suspicious Transaction Report (STR). It is a report adopted by
many countries in the world. An STR is similar to a SAR but it
involves only one transaction and therefore contains more details.
If an institution feels that a group of related transactions are potentially illegal, it has to file and submit to an FIU a different STR for
each single transaction.
CTRs, SARs, and STRs contain several data, like subjects involved in the transactions, amount of the transactions, bank accounts, addresses, types of the transactions, motivations for the
transactions, etc. When available, an FIU can complement these
data with other kinds of information like, for example, possible relationships between subjects. All the data collected in this way by
an FIU give rise to financial activity networks (FANs), whose analysis is the subject of our research. Therefore, the nodes of a FAN
are entities like banks, companies, persons, transactions, bank accounts, and reports filing these data. Links between entities represent many possible types of semantic connections.

Figure 1: A small FAN represented by the interface of VISFAN.

For example, suppose that a person p requires a bank transfer t
from a bank account a to a bank account b, and suppose that A is
the bank that manages a and B is the bank that manages b. In the
FAN there will be six entities representing p, a, b, A, B, and t respectively. Also, there will be the links (a,t), (t, b), (t, p), which
establish that t involves two accounts, a (the source) and b (the destination), and that p is the person who required the transaction. The
links (A, a), (B, b) will establish the relationships between banks

and bank accounts. Furthermore, there will be a link (p, a) meaning that p is allowed to operate on a (e.g., if p is the owner of a
or if p has been delegated from an owner of a). As in other systems for criminal network analysis, V IS FAN uses a specific icon to
convey each type of entity in a FAN. Fig. 1 shows a layout generated by V IS FAN for a simple network like that described above. In
the FAN a and b are labeled #001-0000-0000 and #002-0000-0000,
respectively; A is the New York City Bank, B is the Philadelphia
Bank, p is James Smith, and the node representing the bank transfer t is labeled with the amount of the transfer, i.e., 25, 000 USD.
4

T HE S YSTEM V IS FAN

(a)

Subsection 4.1 briefly illustrates the system requirements, according to the needs of FIU analysts. Subsection 4.2 describes the user
interface and the interaction functionalities of V IS FAN. Clustering
and drawing algorithms are discussed in Subsection 4.4. Subsection 4.5 presents a case study that illustrates the use of V IS FAN on
real data.
4.1 System Requirements
In order to collect the system requirements we cooperated with
analysts of the financial investigation unit of the Republic of San
Marino. They helped us to understand the typical process followed
by an FIU analyst: She usually begins a new investigation from a
specific STR or from a people involved in an STR, and then she
explores the network around this seminal node until, based on her
experience, she judges the acquired information enough promising
to infer potentially criminal patterns, if any. The analyst typically
wants to elaborate on the portion of network on the screen, and aims
to understand how the different actors currently under examination
(i.e., those displayed) are related to each other, independently of
the other elements of the network. In case the analyst judges the
displayed information insufficient, she can continue to expand the
network, and both centrality indices and clusters should be updated
by the system. The system is typically required to deal with networks having at most few hundreds of nodes and edges. Indeed,
if a network becomes too large, the analyst usually decides to save
the map and to start from a new investigation seed, so to handle the
visual complexity. The analyst should be allowed to reload at any
time all maps generated and saved for the same investigation process, and to use them for comparisons or reporting activities. One
important issue is that the system is not required to discover criminal patterns by itself, but it is mainly intended by the analyst as a
strong support for her investigation activity. For this reason the system must provide strong interaction, conceived for semi-automatic
solutions. For instance, during the analysis of the network the analyst may decide to enhance an automatically computed cluster with
additional elements or to force some objects to keep some relative
positions in order to preserve her mental map.
4.2 Interface and Interaction
We designed the visual paradigms and interaction functionalities of
V IS FAN having in mind the system requirements described above.
The analyst can start a new investigation from a desired seed entity (e.g., a person, a company, an STR), searching in the database
accessed by V IS FAN. She can also control the size of the initial
network, by specifying the maximum graph theoretic distance from
the selected entity. With a distance equal to one only the seed entity
and its adjacent nodes are displayed. Fig. 2(b) shows an example of
an initial network obtained by considering all entities having graph
theoretic distance at most two from the seed entity Paolo Amato
(the selected node in the figure). The analyst can then explore and
elaborate on the network with different interactive tools:
- Bottom-up exploration. The set of nodes and edges can be incrementally enhanced by exploring some of the displayed entities.

(b)
Figure 2: (a) Interface that allows the analyst to begin a new investigation. (b)
The initial network obtained from the seed entity Amato Paolo with maximum
graph theoretic distance two.

By double clicking on a node, all of its neighbors and their connections are added to the current network if not already shown. A new
layout is automatically computed according to the status of the previous network, which depends on the presence of cluster regions or
other types of geometric constraints. If the previous drawing contained a hierarchy of cluster regions, every node that enters in the
new network is automatically assigned to a suitable cluster region
according to a criterion that will be explained in Subsection 4.4. A
small green box over a node indicates that such a node has not been
explored yet; this avoids the analyst to repeat the same exploration
action twice. Fig. 3(a) shows the layout of a new network obtained
from that of Fig. 2(b) by exploring two entities, Fabio De Santis
and Claudia Fontana (the selected nodes in the figure).
- Top-down exploration. The analyst can ask the system to automatically compute a cluster hierarchy on the current network. This
action will group nodes into clusters and subclusters according to
some specific algorithm. Our current clustering algorithm exploits
the concept of k-core, and it will be explained in details in Subsection 4.3. Once a cluster hierarchy has been computed, the system
decides the initial dimensions of each cluster region based on the
number of nodes inside it. In the layout, the boundary of each cluster region is displayed as a rectangle. To help the analyst in capturing the structure of the cluster hierarchy, the corresponding cluster
inclusion tree is also displayed on the left-hand side of the interface. V IS FAN offers various interaction facilities with the clusters
and their regions. The analyst can drag nodes inside or outside a
cluster region, so modifying its associated cluster. She can move
a cluster inside or outside another cluster, so modifying the cluster

205

(a)

(b)

side a cluster region and the number of attributes shown for this
drawing are proportional to the dimensions of the region. Resizing
clusters acts as a new focus+context technique with multiple foci.
Fig. 3(b) shows a new layout of the network in Fig. 3(a), where
some clusters have been defined. In Fig. 3(c) a cluster region has
been collapsed and another has been resized.
- Geometric Constraints and Filtering. The analyst can apply
several constraints on the position of the nodes during the exploration of the network. Using the mouse she can select a group of
vertices and ask the system to keep them close or far to each other,
or to stay near to a selected point of the canvas; she can also fix
the position of a subset of nodes. The drawing algorithm attempts
to compute a readable layout while taking into account all the constraints defined by the analyst. The use of geometric constraints can
help the analyst to keep her mental map during the browsing of the
network and to have a certain control on the relative positions of
some nodes based on their typology. Furthermore, the analyst can
filter out any desired types of entities and/or connections to reduce
the visual complexity of the layout.
- Node Centrality. V IS FAN implements a wide range of indices
for measuring the centrality of a node, like betweenness, closeness,
degree, eigenvector centrality [24, 32], and the most recent information centrality [30]. The values of a specific type of index is
conveyed in the layout by displaying a small bar near to its associated node (long bars denote high values of centrality). The analysts
can quickly switch from the visualization of a type of index to another and all indices are normalized so that they can be easily compared. The use of geometric constraints can be combined with that
of node centrality indices; for example, the analyst can decide to fix
the position of the most relevant vertex in the center of the canvas.
We remark that centrality indices make sense only for nodes representing the actors of the network, like persons, companies, and
banks. Hence, in order to compute the centrality of these actors, we
run the algorithm on a different suitable network consisting only of
actors. Namely, we add an edge between two actors if the length of
the shortest path between them is at most d (for a preset constant d),
and then we remove all nodes that are not actors. Fig. 4(a) shows
the indices of degree centrality displayed as node attributes in the
drawing. In this case, we fixed d = 2. Fig. 4(b) shows a table displayed by V IS FAN to compare all the node centrality indices for
the given network.
4.3 Clustering Algorithm

(c)
Figure 3: (a) Layout of a new network obtained by that of Fig. 2(b), by a
bottom-up exploration of nodes labeled Fabio De Santis and Claudia Fontana.
(b) The same network, where some clusters have been defined; each cluster is
represented as a rectangular region in the new drawing. (c) A different layout
of the clustered network where a cluster has been collapsed (the filled node)
and another has been resized.

hierarchy. She can create new clusters or delete some of the existing ones. She can collapse/expand a cluster region, so to hide/show
its interior. The drawing algorithm will react at each user’s change
in order to rearrange the layout. The analyst can also resize each
cluster region at her convenience with the same kind of interaction
used to resize a window in a classical operating system graphical
user interface, that is, dragging the boundary of the cluster. Since
the drawing algorithm does not allow overlap between clusters that
have not inclusion relationships, the readability of the drawing in-

206

Our automatic clustering algorithm relies on the concept of k-core,
which was introduced by Seidman in 1983 [34], and successfully
used in social network analysis (see, e.g., [2, 6, 7, 8, 19, 28]).
Let G = (V, E) be a (multi)graph and k be an integer number such
that 0 ≤ k < |V |. Let W be a non-empty subset of V . The induced
subgraph G[W ] of G is a k-core (or a core of order k) of G if all
nodes of W have degree at least k in G[W ] and G[W ] is a maximal
subgraph of G with this property. The core number of a node of
G is the highest order of a core that contains this node. Due to the
maximality property, if G contains a k-core, such a k-core is unique.
Note that, the k-core of G is not necessarily connected; a connected
component of a k-core of G will be called a k-core component of G.
For any fixed k, denote by Gk the k-core of G (if it exists). It is
immediate to see that if G contains a k-core Gk , for k ≥ 1, then G
contains a (k − 1)-core Gk−1 and Gk ⊆ Gk−1 .
For a given graph G, our clustering algorithm computes all kcores of G, and defines a distinct cluster for each k-core component. The inclusion relationships between clusters correspond to the
inclusion relationships between the associated k-core components.
Fig. 5(a) shows a graph G where the nodes are labeled with their
core numbers; the different k-core components of G are also represented. Fig. 5(b) shows the inclusion tree of the cluster hierarchy
defined by our algorithm on G, based on its k-core decomposition.

(a)

(b)

(a)

(c)

(d)

(e)

(f)

(b)
Figure 5: (a) A Graph G where the nodes are labeled with their core-numbers.
Figure 4: (a) A FAN and the degree centrality values of its nodes shown as
bars. (b) Table that compares all node centrality indices available in the system.

Let G be a graph obtained by the analyst after some bottomup exploration steps. Due to the nature of our financial activity
networks, G typically consists of several nodes modeling transactions connected to nodes modeling accounts, persons, institutions
or companies. A node that models a transaction will be called a
transaction-node in the following. A transaction-node can have either degree two (for instance, when a person executes a cash deposit on a certain bank account, the transaction-node is connected
both to the person and to the bank account) or degree three (like
in the case of a bank transfer, as illustrated in Fig. 1). Hence, a
transaction-node can only belong to k-core components with k ≤ 3,
and we observed that applying our clustering algorithm directly on
G usually leads to few clusters representing 1-core, 2-core, or 3core components. In order to get more effective clusters, which
are mainly representative of critical patterns, we first run our algorithm on a different network G′ obtained from G with the following transformation: (i) If t is a transaction-node of degree two and
(a,t), (t, b) are the two edges incident to t, then we remove t and
its incident edges and we add an edge (a, b) in their place. (ii) If t
is a transaction-node of degree three, connected to the nodes a, b, c,
then we remove t and its incident edges and add the edges (a, b),
(b, c), and (c, d) in their place. Once we have applied the clustering algorithm on G′ , we get an inclusion tree T ′ that describes the
cluster hierarchy of the clusters of G′ . Note that, the set of nodes
of G′ coincides with the set of nodes of G without the transactionnodes. Hence, for each node u of G that is not a transaction-node,
T ′ associates with u the cluster corresponding to the parent node of
u in T ′ . Let t be a transaction-node of G. To decide to which cluster
t is assigned, we use a simple rule (which appears to be a natural
choice): The cluster of t corresponds to the node of T ′ that is the

The closed regions colored with different gray scales denote the k-core components, and each region is labeled with a different letter. (b) The inclusion
tree of the cluster hierarchy defined by our algorithm on graph G. (c) A Graph
G representing a FAN with five transaction-node (black nodes). (d) The graph
G′ obtained from G by applying a transformation on the transaction-nodes. (e)
The clusters obtained for G′ by using our clustering algorithm; each closed
region represents a different cluster. (f) The final clusters obtained for G.

lowest common ancestor of all nodes incident to t in G. For example, Fig. 5(c)–5(f) show a graph G representing a possible FAN with
some transaction-nodes, the graph G′ obtained from G by applying
the transformation described above for the transaction-nodes, the
clustering obtained for G′ , and the final clustering for G.
If the analyst executes a bottom-up exploration step on a clustered network, new nodes might enter in the network, and our system has to quickly assign each of these new nodes to one of the previously computed clusters. Our approach is to assign a new node u
to the cluster that contained the highest number of adjacent nodes
of u in the previous network. Of course, after several bottom-up
exploration steps this approach may lead to a clustering that is not
particularly effective for the current network. In this case, the analyst can decide to automatically recompute from scratch a new
clustering, using the algorithm described above.
The k-core clustering algorithm can be implemented in O(n + m)
time for graphs without selfloops, where n and m are the number of
vertice and the number of edges, respectively. Our implementation
for graphs with multiple edges takes O((m + n) log n) time. The
algorithm runs very fast: It takes less than 0.5 seconds for networks
with 1, 000 nodes and 3, 000 edges, running under Windows 7 on
an Intel Core i5 - 2.26GH and 6GB RAM.
4.4 Drawing Algorithm
The drawing algorithm implemented in V IS FAN is a force-directed
technique whose basic physical model is inspired to that proposed
by Fruchterman and Reingold [26]. Similarly to the approach orig-

207

inally proposed by Eades [20], in the model of Fruchterman and
Reingold nodes behave as electric particles connected by springs;
the electrical charges cause repulsion between nodes, while the
springs cause attraction. In the model proposed by Fruchterman
and Reingold, given two nodes u and v, the attractive force Fa and
the repulsive force Fr between u and v are modeled by the following
equations (which only approximate a realistic physical model):
Fa (u, v) =

2

d (u,v)
k ,

k
Fr (u, v) = − d(u,v)

d 2 (u,v)
k ,

2

k
Fr (u, v) = −Kr (u, v) d(u,v)

where Ka (u, v) and Kr (u, v) are real values that depend on the constraints defined on u and v, and are used to increase or to reduce the
intensity of the forces, as clarified in the next subsections. If there
is no constraint on u and v, then Ka (u, v) = Kr (u, v) = 1, and we fall
in the model of Fruchterman and Reingold.
Since the number of iterations of our force-directed drawing algorithm is bounded above by a constant, which we tuned experimentally, its time complexity is quadratic in the number of vertices
of the graph. The drawing algorithm takes in the average 6 seconds
for clustered graphs with 100 vertices and 300 edges; it requires
about 2.5 minutes for graphs with 400 vertices and 1, 200 edges.
4.4.1 Handling clusters
Similarly to the idea of Eades and Huang [22], for each cluster C
we define a dummy node vC placed at the center of the rectangular
region representing C, and connect vC to all nodes belonging to
C. Then, we increase the intensity of the attractive force acting
between vC and any other node of C by setting Ka (vC , u) > 1 for
each u in C. Also, we reduce the intensity of the repulsive force
between any two nodes u and v of C by setting Kr (u, v) < 1. The
value assigned to Kr (u, v) depends on the dimensions of the cluster
region. Smaller clusters will determine smaller values of Kr (u, v).
This strategy helps to keep the nodes of C relatively close to each
other. However, it may still happen that either a node of C leaves the
rectangular region representing C or that a node not belonging to C
enters in such a region. To avoid these situations, we enhance our
physical system by modeling the boundary of each cluster region
as a heavy rigid body; if a node u hits such a boundary on a side s,
we stop the movement of u in the direction orthogonal to s. This
prevents u from entering or leaving the cluster region. Also, as for
nodes, we allow cluster regions to move in the drawing, although
they oppose a certain resistance to the forces acting on them. More
precisely, we move a cluster region when there are some nodes that
hit its boundary (from the inside or from the outside). We compute
the resultant of all forces exerted by these nodes on the boundary
and we move the cluster region along the direction of this resultant,
after a suitable reduction of its intensity; this reduction is done to
simulate the inertia of the heavy rigid body (see Fig. 6). Once the
position of a cluster region is updated, a further step is executed
to readjust the position of those nodes that might have improperly
traversed the boundary of the cluster region. With a similar strategy
we handle the situations when a cluster region hits another cluster
region, so avoiding that two cluster regions overlap.

208

(b)

(c)

Figure 6: Schematic illustration that shows how a cluster is moved when some

where k is a constant that represents the desired distance between
any two nodes, and d(u, v) is the real distance between u and v. In
the implementation of Fruchterman and Reingold repulsive forces
act only between adjacent nodes, so to reduce the running time of
the algorithm. Like every classical force-directed method, the algorithm starts from an initial position of the nodes and then iteratively
moves the nodes according to the forces acting on them; the algorithm stops after a preset number of iterations or when a suitable
total energy function of the system becomes sufficiently small.
In order to deal with clusters and other constraints, our physical
model is slightly modified and equipped with extra objects. We use
the following more general equations for the forces:
Fa (u, v) = Ka (u, v)

(a)

2

nodes hit its boundary. (a) Two nodes that hit the boundary of a cluster from the
inside; the arrows represent the corresponding forces exerted by two nodes on
the cluster region. (b) The resultant force depicted as a dashed arrow; (c) The
movement of the cluster region. The intensity of the resultant is decreased to
simulate the inertia of the cluster region.

4.4.2 Handling Relative and Absolute Node Positions
Constraints on the node positions can be handled easier, varying
the values of functions Ka and Kr . If we impose a constraint that
forces a group U of nodes to stay close together in the drawing, the
algorithm adds the minimum number of dummy edges required to
make U a clique, and then strongly reduces the intensity of the repulsive force acting between every pair of nodes u and v of U. This
is done by setting Kr (u, v) ≤ 0.5. On the contrary, if we set a constraint that forces the vertices of U to stay far from each other, the
intensity of the repulsive force acting between every pair of nodes
u and v of U is strongly increased, by setting Kr (u, v) ≥ 2. More
suitable values for Kr (u, v) can be tuned experimentally. To fix the
position of a node u in the drawing, the algorithm cancels the effect of all forces exerted by every other node on u. This is done by
setting Ka (u, v) = Kr (u, v) = 0, for every vertex v = u. If we wish
that a certain group U of nodes remains relatively close to a certain
point p of the canvas, the algorithm creates a dummy node u fixed
at location p, and connects u to all nodes of U using dummy edges.
4.5 Case Study
We present an example of application of our system to a financial activity network that contains two fraudulent patterns. These
patterns correspond to real data described in an official document1
published by the Financial Crimes Enforcement Network (FinCEN)
- United States Department of the Treasury in the 2003 [23]. Following the narratives contained in that document, we reconstructed
the corresponding networks according to our notation, and we embedded these networks in a connected super network containing extra elements artificially created to add some noise to the fraudulent
patterns. As extra elements we imagined new persons representing
relatives of the real actors, some transactions performed by these
persons, and some other attributes like addresses and documents.
The real-data consist of 68 nodes and 112 edges. The artificial data
consist of 36 nodes and 51 edges. The two fraudulent patterns refer
to two distinct structuring schemes. According to these schemes,
one or more subject perform a sequence of small transactions for
money laundering. Refer to the book of Westphal for more details
on this kind of pattern [39]. Fig. 7 shows a picture of the network
with both all real and artificial elements. This network was obtained
after a few bottom-up exploration steps starting from person John
Doe, one of those mentioned in FinCen’s document. We then applied our clustering algorithm to the displayed network; a drawing
of the resulting clustered network is shown in Fig. 8. The computation of the clustering took 0.05 seconds, while the computation
of the drawing took 7 seconds. To simplify the visual complexity of the drawing, we hid from the visualization some elements,
like those representing documents and addresses. The cluster hi1 http://www.fincen.gov/statutes

regs/files/sarnarrcompletguidfinal 112003.pdf

erarchy computed by our algorithm reflects quite carefully the patterns described by FinCEN’s document. More precisely, from the
picture one can observe that there exist two disjoint clusters, each
containing other subclusters. The two disjoint clusters capture the
two distinct fraudulent patterns, and the deepest clusters include the
actorsmainly involved in the illegal activity. The level of depth of a
cluster actually reflects the level of criticism of the illegal activity.
As explained in Subsection 4.1 the system is intended to provide
hints to the analyst, who can further elaborate on the layout.
5

C ONCLUSIONS AND F UTURE W ORK

We presented V IS FAN, a system for the visual analysis of financial
activity networks aimed to support users in discovering financial
crimes. In the near future we plan to extend V IS FAN to the analysis of other kinds of financial activity networks, like those arising
from all transactions performed by the customers of a bank institute, independently of the existence of SARs or STRs. From the
algorithmic point of view the integration of geometric constraints
into multi-scale force-directed drawing algorithms may be required
to handle this type of larger networks. It would be also of great interest to enhance our system with both techniques to automatically
extract data from documents and other kinds of views (other than
graph views) like, for example, those present in J IGSAW[35]. Finally, further experimental studies involving FIU analysts will be
helpful for a better validation of our system.
R EFERENCES
[1] J. Abello, F. van Ham, and N. Krishnan. Ask-graphview: A large
scale graph visualization system. IEEE Trans. Vis. Comput. Graph.,
12(5):669–676, 2006.
[2] M. Altaf-Ul-Amin, K. Nishikata, T. Koma, T. Miyasato, Y. Shinbo,
M. Arifuzzaman, C. Wada, M. Maeda, T. Oshima, H. Mori, and
S. Kanaya. Prediction of Protein Functions Based on K-Cores of
Protein-Protein Interaction Networks and Amino Acid Sequences.
Genome Informatics, 14:498–499, 2003.
[3] T. Anderson, L. Arbetter, L. Benawides, and A. Longmore-Etheridge.
Security works. Security Management, 38(17):17–20, 1994.
[4] D. Archambault, T. Munzner, and D. Auber. Grouseflocks: Steerable exploration of graph hierarchy space. IEEE Trans. Vis. Comput.
Graph., 14(4):900–913, 2008.
[5] D. Auber, Y. Chiricota, F. Jourdan, and G. Melanc¸on. Multiscale visualization of small world networks. In IEEE INFOVIS 2003, pages
75–81, 2003.
[6] V. Batagelj, W. Didimo, G. Liotta, P. Palladino, and M. Patrignani.
Visual analysis of large graphs using (x, y)-clustering and hybrid visualizations. In PacificVis, pages 209–216. IEEE, 2010.
[7] V. Batagelj, A. Mrvar, and M. Zaverˇsnik. Partitioning approach to
visualization of large networks. In GD 1999, volume 1731 of LNCS,
pages 90–97, 1999.
[8] B. Bollob´as. The evolution of sparse graphs. In A. Press, editor, Graph
Theory and Combinatorics, pages 35–57, 1984.
[9] A. Carmignani, G. Di Battista, W. Didimo, F. Matera, and M. Pizzonia. Visualization of the high level structure of the internet with
HERMES. J. Graph Algorithms Appl., 6(3):281–311, 2002.
[10] R. Chang et al. Scalable and interactive visual analysis of financal wire
transactions for fraud detection. Information Visualization, 7(1):63–
76, 2008.
[11] H. Chen, H. Atabakhsh, C. Tseng, B. Marshall, S. Kaza, S. Eggers,
H. Gowda, A. Shah, T. Petersen, and C. Violette. Visualization in law
enforcement. In CHI, pages 1268–1271. ACM, 2005.
[12] H. Chen, D. D. Zeng, H. Atabakhsh, W. Wyzga, and J. Schroeder.
Coplink: manging law enforcement data and knowledge. Commun.
ACM, 46(1):28–34, 2003.
[13] G. Di Battista, P. Eades, R. Tamassia, and I. G. Tollis. Graph Drawing.
Prentice Hall, Upper Saddle River, NJ, 1999.
[14] E. Di Giacomo, W. Didimo, L. Grilli, and G. Liotta. Graph visualization techniques for web clustering engines. IEEE Trans. Vis. Comput.
Graph., 13(2):294–304, 2007.

[15] E. Di Giacomo, W. Didimo, G. Liotta, and P. Palladino. Visual analysis of financial crimes. In Proc. of the Working Conference on Advanced Visual Interface (AVI 2010), pages 393–394. ACM, 2010.
[16] W. Didimo and G. Liotta. Mining Graph Data, chapter Graph Visualization and Data Mining, pages 35–64. Wiley, 2007.
[17] H. A. do Nascimento and P. Eades. A system for graph clustering
based on user hints. In Selected papers from Pan-Sydney Area Workshop on Visual Information Processing (VIP2000), volume 2 of CRPIT, pages 73–74. ACS, 2001.
[18] U. Dogrusoz, E. Giral, A. Cetintas, A. Civril, and E. Demir. A layout
algorithm for undirected compound graphs. Inf. Sci., 179:980–994,
2009.
[19] S. N. Dorogovtsev, A. V. Goltsev, and J. F. F. Mendes. k-core organization of complex networks. CoRR, abs/cond-mat/0509102, 2005.
[20] P. Eades. A heuristic for graph drawing. In Congressus Numerantium,
volume 42, pages 149–160, 1984.
[21] P. Eades, R. F. Cohen, and M. L. Huang. Online animated graph drawing for web navigation. In GD 1997, volume 1353, pages 330–335,
1997.
[22] P. Eades and M. L. Huang. Navigating clustered graphs using forcedirected methods. J. Graph Algorithms Appl., 4(3):157–181, 2000.
[23] FinCEN - United States Department of the Treasury. Guidance on
preparing a complete & sufficient suspicious activity report narrative
(http://www.fincen.gov/), 2003.
[24] L. C. Freeman. A set of measures of centrality based on betweenness.
Sociometry, 40:35–41, 1977.
[25] Y. Frishman and A. Tal. Dynamic drawing of clustered graphs. In Proceedings of the IEEE Symposium on Information Visualization, pages
191–198, Washington, DC, USA, 2004. IEEE Computer Society.
[26] T. M. J. Fruchterman and E. M. Reingold. Graph drawing by forcedirected placement. Softw., Pract. Exper., 21(11):1129–1164, 1991.
[27] H. G. Goldberg and T. E. Senator. Restructuring databases for knowledge discovery by consolidation and link formation. In Proceedings of
the First International Conference on Knowledge Discovery and Data
Mining, pages 136–141. AAAI Press, 1995.
[28] A. V. Goltsev, S. N. Dorogovtsev, and J. F. F. Mendes. k-core (bootstrap) percolation on complex networks: Critical phenomena and nonlocal effects. CoRR, abs/cond-mat/0602611, 2006.
[29] P. Klerks and E. Smeets. The network paradigm applied to criminal
organizations: Theoretical nitpicking or a relevant doctrine for investigators? Recent developments in the netherlands. Connections, 24:53–
65, 2001.
[30] V. Latora and M. Marchiori. A measure of centrality based on the
network efficiency. New Journal of Physics, 9, 2007.
[31] N. Memon and H. L. Larsen. Structural analysis and destabilizing
terrorist networks. In DMIN, pages 296–302. CSREA Press, 2006.
[32] E. L. Merrer and G. Tr´edan. Centralities: Capturing the fuzzy notion
of importance in social graphs. In Proc. of the EuroSys Workshop on
Social Network Systems (SNS’09), pages 33–38. ACM, 2009.
[33] D. Schaffer, Z. Zuo, S. Greenberg, L. Bartram, J. Dill, S. Dubs, and
M. Roseman. Navigating hierarchically clustered networks through
fisheye and full-zoom methods. ACM Trans. Comput.-Hum. Interact.,
3(2):162–188, 1996.
[34] S. B. Seidman. Network structure and minimum degree. Social Networks, 5:269–287, 1983.
[35] J. Stasko, C. G¨org, and Z. Liu. Jigsaw: supporting investigative
analysis through interactive visualization. Information Visualization,
7:118–132, April 2008.
[36] R. Tamassia. Constraints in graph drawing algorithms. Constraints,
3:87–120, April 1998.
[37] L. Tang, G. Barbier, H. Liu, and J. Zhang. A social network analysis approach to detecting suspicious online financial activities. In
Advances in Social Computing, LNCS, pages 390–397, 2010.
[38] F. van Ham and J. J. van Wijk. Interactive visualization of small world
graphs. In IEEE INFOVIS 2004, pages 199–206, 2004.
[39] C. Westphal. Data Mining for Intelligence, Fraud, & Criminal Detection. CRC Press, 2009.
[40] J. Xu and H. Chen. Criminal network analysis and visualization.
Comm. of the ACM, 48(6):101–107, 2005.

209

Figure 7: A FAN containing fraudulent patterns. The network consists of 104 elements and 163 connections.

Figure 8: The FAN of Fig. 7, after the execution of our clustering algorithm. Some elements have been hidden to diminish the visual complexity of the diagram.

210

