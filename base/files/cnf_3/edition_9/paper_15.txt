Exploring Web Site Log Data with a Multi-Classification Interface
Mark Sifer
Sydney University
School of Information Technology
NSW 2006 Australia
{sifer@it.usyd.edu.au }
Abstract
Many interface designs have been developed for the
exploration of multi-dimensional data sets, many based
on finding subsets by filtering attribute values
independently or successively. However, many of these
interfaces do not also support the use of hierarchies for
selection and summarisation. This paper shows how an
interface that uses coordinated hierarchy views of data
supports the exploration of such data. Our interface is
demonstrated with our SGViewer tool and a web site log
dataset where visits to a web site have been organised
into time, downloads, visitor address and referrer
address dimensions. A configurable nested tree
visualisation is used to present each dimension
hierarchy. We show how both rapid and flexible
exploration of this data is supported by our interface.

1. Introduction
The exploration of large datasets remains a difficult
problem. A whole range of techniques exist to support
such exploration which depend partly on the nature of
the data, for example whether it is already in a relational
database, or whether it exists as large text files. There is
also the issue of who will be exploring the data, whether
they can be expected to have familiarity with relational
database concepts or whether a greater range of users is
envisioned. In the context of very large datasets, data
mining approaches which use statistical or machine
learning heuristics can discover “interesting” subsets of
data, while manual exploration may allow users to locate
interesting patterns or subsets of the data. A dataset that
has often been the subject of such efforts in recent years
is web-site logs.
The initial motivation for this work was the desire to
monitor our web site. Knowing that people were visiting
our site and knowing details about their visits motivated
us to maintain and improve our site. We had set up a site

to promote the Structured Graph Format (SGF), an XML
format and some tools which produced and used the
format. One of these tools, Structured Graph Viewer
(SGViewer) [7] was a java applet, which acted as an
interactive sitemap for users when downloaded through
their internet browser. We wanted to know whether
anyone was actually downloading our tools, and over
time whether this trending up or down. Initially we
processed the raw text web-site log with “grep” to
answer this. There was also a whole range of tools for
summarising web-site logs according to a variety of
attributes. But we wanted to look for trends in arbitrary
subsets of the data, for example the trend for visitors that
came from Japan, that were referred to our site by
Yahoo, and actually downloaded one of our tools. We
also wanted support for exploring the log in a flexible
way, so we could look for interesting and perhaps
unexpected trends. The SGViewer sitemap applet was
gradually extended to better address these needs.

2. Related work
Related work encompasses many areas including
interfaces for querying multidimensional data, interfaces
that provide query previews, techniques that could be
used for navigating or visualising previews when shown
in tree form and OLAP systems. Each of these areas is
covered next.
A number of systems for interactive querying of
multidimensional data have been developed. Dynamic
query systems [1] use selections in multiple widgets, one
for each data dimension to locate subsets of the data.
Changes to a widget's selection have a direct effect on
the query result set. FocusTable [13] supports
incremental queries on large attribute value tables, by
successive selection of values in the rows of interest. The
table filters out columns with values excluded by these
selections so a user can drill-down to a subset of
columns.

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

Some systems display data distribution to guide
progressive querying. Eick [4] extended sliders used for
filtering data, to show data distribution. Query previews
[10,15] for large online databases “supply data
distribution information about the database that is being
searched and give continuous feedback about the size of
the result set for the query as it is being formed”. The
Table Lens [11] can show value distributions for
multiple attributes, but requires users to reorder rows for
this.
In [16] Wittenburg et. al. describe a extension of
dynamic queries where each widget is a bargram that
shows the distribution of relevant values. Glyphs above
the bars reflect the query results, showing the value
ranges where results lie and the value ranges that could
enlarge the result set if selected. Snap [8] is an
architecture for coupling visualisations of relational data.
It supports a range of coordinations including drill-down.
The tradeoff for this flexibility is the need to explicitly
create the coordinations.
A number of visualisation techniques to support the
navigation of very large hierarchical structures have been
developed. Focus+context is a popular approach. 2D
examples include fisheye lenses [5], hyperbolic maps [6].
These apply a non-linear distortion to a tree so that nodes
is a focus area are clearly visible (the focus area) where
other nodes are squeezed into the remaining space (the
context).
Techniques that blend large trees with content
overviews include TreeMaps [12], ValueBars [2],
pieTree [3] and Sunburst [14]. Our interface uses a one
dimensional space filling variation of TreeMaps, but like
Sunburst shows subtree depth and is zoomable.
On-Line Analytic Processing (OLAP) star schema
can describe multi-dimensional data that have dimension
hierarchies [9]. This is a possible representation for our
data. The standard interface for such systems is the
crosstab or pivot table which are an extension of multidimensional spreadsheets.
Next we present our data model and interface by
exploring a web-site log. The architecture of the web-site
log system is then given. Finally additional support for
more complex queries such as ANDs within a panel are
described and conclusions are given.

3. Querying a web log
In this section we present our data model then show
how our interface is used to query a web-site log. As
already noted, a key difference between our work and
others is our concern with attributes that have values that
are partially ordered, that is, can be presented as
classifications. We will show the user steps required to
drill-down through the data by making filtering

Calendar

Dec 99

Day 01

Guest 01

Downloads

Jan 00

Day 02

Viewer 2.0

FP Generator

Day 03

Guest 02

Refer

Search

Guest 03

Guest 04

Guest 05

Yahoo

Cyber Map

XML

Directory

Guest 06

Guest 07

Figure 1. Web log dataset with guest visits under
three classifications, calendar, downloads and
referrer.

decisions, and to change these decisions later to explore
variations.

3.1. The Data Model
We model the data as a set of elements where each
element has attribute values. The model is queried by
filtering attribute values. When values are unordered,
explicit selection of individual values must be made,
while when values are totally ordered interval selections
can also be made. When values are partially ordered,
selections of a value together with the values below it
can be made.
The data model for our web log example is a set of
visits (to our web site) where each visit has a date,
domain address (the location of the visitors web browser
on the internet), refer address (the web page that referred
them to our web site) and the set of tools that was
downloaded from the site during the visit (usually none).
We used the rough approximation that each visitor
comes from a different IP address. A visit is intended to
approximate one person looking at a number of pages on
our site and also perhaps downloading some of our tools.
So a single visit usually covers many page requests. For
this example, if the same visitor returned several times
on the same day it would only counts as one visit.
Figure one shows the attributes for visits by seven
guests to our web site that came on days 1 or 2 of
December 1999. Only two guests downloaded
something. Guest 3 down-loaded both viewer 2.0 and
FPGen, and guest 4 downloaded only viewer 2.0. Most
guests were referred by yahoo through the directory
listing or via a search request. CyberMap and XML sites
also referred some people.
To answer “which guests referred by yahoo
downloaded something ?” the refer attribute would be
restricted to yahoo, which includes both search and
directory, that is guests 1, 2, 4 and 6, and the downloads
attribute would be restricted viewer 2.0 or FPGen, that is
to guests 3 and 4. The query result is then the
intersection of these sets, guest 4, who downloaded
viewer 2.0 on the first day of December 1999. Next
SGViewer is introduced.

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

Figure 2. The initial state of SGViewer showing a web log in four classifications

Figure 3. Visits to the SGF site restricted to those guests which come from the .com domain

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

3.2. Introducing the Interface
Our example dataset of visits to the SGF web site
contains 3548 visits over four months. In this section we
introduce our SGViewer interface for exploring this data.
Figure two shows the initial state of SGViewer, each
classification panel shows all possible visits. Because all
visits have time and referrer values these panels include
all visits. However because only a few visits included a
download of something, the download classification only
covers these few visits as was the case in figure one.
Each panel shows one classification. From the top
these are: a calendar, downloads, guest domain address
and referrer address classifications. In figure one the leaf
nodes; the individual visits to the SGF site, participated
in all classifications, but were visually presented once. In
contrast in figure two visit leaf nodes are repeated in
each panel.
Each panel uses the same zoomable nested tree
layout but with box widths and fill varied. In the top
calendar panel, the third level shows individual days,
which have been set to an equal box width while box fill
levels are varied to create a nested bar chart which shows
the visitor trend at both day and month levels. In the
second download panel, siblings boxes have been set to
equal widths, while in the guest address and refer address
panels the leaves have been set to equal widths. Each
panel’s tree can be explored with animated zooms by
selecting a node while the cursor is in zoom mode.
Expand and contract modes can also be used to vary the
width of a subtree. If some panels are not being used
they can be hidden via the toggle bar at the top of the
frame. The text at the bottom right of the frame “Guest
domain: com” states the label of the box that the cursor is
hovering over.
A user queries by making selections in the
classification panels. That is, clicking boxes with the
mouse while the cursor is in select mode. The lock icon
on the right of each panel indicates which panels have
already been set, a gray internal panel border also
indicates a panel has been set. The SELECTION text
field under the bottom panel records a text version of
what the current query is.
In figure three the user has selected the “.com”
visitor domain with a mouse click. This highlights the
.com subtree with a blue two pixel borders placed around
all boxes in the .com subtree and changes the other three
panels with animated transitions. Before the selection the
other panels presented all visits, while after the selection
they showed only those visits where the guest came from
the .com domain. While after the selection the visitor
domain panel continues to show all visits.
The domain panel box widths show relative
proportions, so a user can see that about one quarter of
visitors come from .com. The root calendar box indicates
that 943 visits are being shown out of the total 3548

visits. The second level shows the monthly trend, which
is trending slightly up, while the third level shows the
daily trend, which is quite irregular. The bottom refer
panel shows most visits from .com have no declared
refer (a “-”), and the strongest source of refers was
yahoo, with most due to search requests and some due to
the SGF yahoo directory listing. Though variable sibling
width proportions are not used in the downloads panel,
we can see that viewer 2.0 was downloaded the most.
Each classification in figure three has a different
though overlapping set of leaf nodes. The Calendar panel
leaf nodes are the 943 visits that came from .com. The
Downloads panel leaf nodes are the subset of the 943
visits that came from .com where something was
downloaded from the SGF site. The Visitor Domain
panel leaf nodes include all 3548 visits. The Referrer
panel leaf nodes are the 943 visits that came from .com.
Under the viewer 2.0 box in the downloads panel
some thin horizontal bars appear. These bars are
introduced whether a node has more than 50 children
(this limit is set on startup) to aid the selection of nodes
with large numbers of children when zooming.

Figure 4. The user further restricts to guests
that have download viewer 2.0 or FP Gen (top)
and then restricts again to guests that were
referred by the yahoo site (bottom)

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

3.3. Drilling-down through the Data
Next we explore the visitors from .com in figure
three further, to see how much have they been
downloading viewer 2.0 or FP Gen. Viewer 2.0 is
selected with a mouse click, and then FP Gen selected
with a shift-click. The result is shown in figure four
(top). These selection have set the downloads panel, so it
also has a gray inner border and its lock icon is now
highlighted. The current total selection shown near the
bottom of the frame is: com AND (viewer 2.0 or FP
Gen). The remaining unset panels, refer pages and
calendar have changed, they now only show visits for the
current total selection. There has been no change to the
visitor domain panel which was set earlier, except most
blue borders within .com have changed to purple. Purple
borders are used for the local panel selection, while
nodes which are in the total selection retain a blue
border.
The calendar now shows only those visits from a
.com domain where viewer 2.0 or FP Gen was
downloaded. It shows a flat monthly trend, while the
major referral source is yahoo. We decide to explore
further again, this time to look at the contribution of
yahoo to this monthly trend. Yahoo in the refer panel has
been selected and the result is shown in figure four

(bottom). Note that the content of the refer panel has not
changed except for the selection borders around the
yahoo subtree nodes, though the gray inner panel border
and highlighted lock icon now indicate it also is set. The
calendar now shows 23 visits, but the trend is upwards.
The total selection (query result) is now: com AND
(viewer 2.0 or FP Gen) AND yahoo.
To review, the user actions required for the example
query were: .com in the domain panel was selected, then
viewer 2.0 and FP Gen in the downloads panel were
selected, and finally yahoo in the refer panel was
selected. After each user action, the remaining unset
panels were restricted to show overall selection (the
intersection of panel selections) providing feedback on
the distribution of remaining visits, guiding further
exploration of the data. The panels were not set in
vertical order, but rather in an arbitrary order based on
user interest. At each step the selection text field
displayed in text the current query so far, and in
particular recorded the order in which panels were set,
the left to right ordering of AND terms.

3.4. Revising Query Selections
After a user sets a panel by making several
selections in it, it is not fixed, later after other panels

Figure 5. Applet 2.0 in Downloads was shift-clicked extending the downloads selection to viewer 2.0
or FP Gen or applet 2.0

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

Figure 6. The refer pages panel shown in global mode (top) and after zooming into org (bottom)

have been set, it can be revisited and changed. For
example continuing the earlier example, the user decides
to change the downloads selection. The downloads panel
retains the original context of the viewer 2.0 and FP Gen
selections, so alternatives remain visible. The user notes
that applet 2.0 was also downloaded during four visits
from .com and decides to include these visits in the query
by shift-clicking applet 2.0, a single user action. The
result is shown in figure five. The total selection
becomes: com AND (viewer 2.0 or FP Gen or applet 2.0)
AND yahoo. The total selected visits, shown in the top
calendar node increased from 23 to 24 visits, so only one
of the visitors from a .com address who downloaded
applet 2.0 was referred by yahoo. The panels that were
set after the downloads panel and the unset panels were
updated. Both the refer and calendar panels include the
extra visit. Panels that were set before the downloads
panel, the domain panel are not affected.
Noting that only one out of four of the .com
downloaders of applet 2.0 came from yahoo, the user
may wonder who referred the rest. To find out the user
would click applet 2.0 (not shift-click as before) and the
total selection would become: com AND (applet 2.0)
AND yahoo. The refer panel would show one visitor
from yahoo, one from cybergeography and two
undeclared “-” refers. Later if the user wished to drop the
download constraint and just see the trend for visits from
.com addresses that were referred by yahoo they would
click the download panel’s lock icon, unseting it. The
resulting total selection would be: .com AND yahoo.

3.5. Showing a Panel in Global Context
The context for each unset panel is the intersection
of the set panel selections. Unset panels (i.e. that panels
that have not been set with a selection yet) only show
elements in this context of prior selections. The context
for unset panels was also recorded as the query selection
in textual form in the SELECTION text field.

Sometimes rather than drilling down further; a user
may wish to see what has been excluded. The
local/global toggle shown on the right of each panel as a
pair of binoculars supports this; it is used to show a
global view of a classification, allowing excluded
elements and sub-classifications to be seen. That is, it
allows a user to see which parts of a classification do not
contribute to the query result.
Figure six (top) shows the result of toggling the
global button of the refer panel in figure five. The purple
borders show the panel selection of yahoo that was made
earlier, and the boxes with blue borders are for visits in
the total selection. Elements that were previously
excluded are coloured gray, for example subclassification co.jp and ne.jp. Another excluded subclassification appears under .org, to see what this is the
user clicks .org while the cursor is in zoom mode, figure
six (bottom) shows the result. No visitor from .com that
downloaded viewer 2.0, applet 2.0 or FP Gen was
referred by xml.org.
The global mode behaviour of panels in chart mode
is an exception. They highlight in-context elements via
the box fill level of their ancestors. The calendar panel in
our example is a standard panel with global and chart
modes turned on, where the layout has been set to equal
width for the third level, which shows the relative daily
trend for the prior query selection. While the calendar
has been used to show the query output, it could also act
as a filter. A user could select dec 99 in the calendar first,
then viewer 2.0 in downloads to see what the domains
and refers were for visitors that downloaded viewer 2.0
in December.
To summarise, a query is made by making selections
in panels with mouse clicks. Panels in which a selection
has been made are considered set. The query result (the
intersection of panel selections) is shown in those panels
which have not been set, such as the calendar panel in
the example. Each panel preserves the context of when it
was first set, so later changes to its selection can be

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

easily made. Excluded elements can be seen by placing a
panel in global mode.
text log

4. System architecture
The input to SGViewer is a structured graph format
(SGF) XML file. This file contains both the web site log
dataset and configuration information which tells the
viewer how to present each of the classifications. The log
SGF file is created by another java program,
logConverter which inputs a standard apache web log
(set to include refer pages). Our web site was one of
many served by the local web server; so grep was used to
filter the servers log for the our site’s log subset. Figure
seven provides an overview of this.
Some approximations were made in creating the
web site log dataset. We relied on Internet Protocol (IP)
addresses to identify each visitor. However many web
users can go through the same proxy server, while some
proxy systems can send page requests from a single user
through multiple proxy servers. Also there can also be
web caches is various places, from a visitors own
browsers cache to a large organisation’s firewall caching
requests to minimise internet bandwidth usage. Some of
these problems can be solved by using cookies. But
overall, for a small site like ours these approximations
seemed reasonable, while for the accurate tracking of a
large site they would not be.
The SGF format used by the viewer does not contain
any web site log specific tags. It encodes an arbitrary
simple structured graph: a set of nodes, classifications for
these nodes, and possibly some networks as well. The
viewer has been used for other applications such as
multi-classification sitemaps by inputting an SGF file
with different content. The viewer can operate as either a

apache
web server

grep
process
filtered
text log

log
Converter
SGF log

SGViewer
Figure 7. The system for transfering web
site log data to SGViewer

java application or applet. When used as an applet,
URL’s can be associated with nodes so that clicking a
node in open cursor mode, opens the associated URL in a
new browser window. A limitation of this
application/applet design is the viewer supports only
around 10,000 data points in five dimensions. Beyond
this excessive amounts of memory are consumed.
The viewer also has the potential to support other
classification visualisations. Each panel visualisation
component implements a limited java interface that is
passed the panel’s context, classification, the full dataset,
and outputs the panels selection set.

5. Making more complex queries
The queries demonstrated so far have been of the

Figure 8. Making an intra-classification AND query. In the downloads panel the user
selects viewer 2.0 (top), clicks the restrict button located at the bottom left of the frame
(middle) then selects FPGen (bottom).

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

form: a conjunction of disjunctions. This should be
sufficient when each classification is a tree. But our data
model permits classifications to be arbitrary rooted
orders, such as the downloads classification where
multiple tools may be downloaded during a single visit,
requires elements with multiple sub-classification
parents. In such cases, queries such as what is the trend
for visits where both viewer 2.0 and FPGen were
downloaded (such as guest 3 in figure one) are
reasonable, or to find out what the specific interest in
FPGen was, a query like: what is the trend for visits
where FPGen but not viewer 2.0 was downloaded, could
be asked. The former query requires an intraclassification AND operation, while the latter requires a
classification AND NOT operation.
Intra-classification AND operations are made via a
local restrict. Figure eight shows the progress of a local
restrict operation in the downloads panel of our example.
The effect of the restrict operation was to exclude from
the download panel all visit elements that are not
selected, that is to exclude all visits where viewer 2.0
was not downloaded. Selections made after the restrict,
are then selecting a subset of the visits where viewer 2.0
was downloaded. The query text field would now show:
viewer 2.0 and FPGen. However, local restrict is more
difficult to use than standard queries where AND
selection from different panel is used, as the restrict
button must be explicitly pressed by a user. In some
cases, the alternative of placing a classification in
multiple panels may be more acceptable, though there is
a tradeoff, of operation complexity (use of an explicit
restrict) versus interface screen space (for multiple
panels).
Portions of a classification can also be deselected
which allows AND NOT queries to be made. A user
places the cursor in deselect mode, then clicks the subclassification that will be excluded. For example, to set
the downloads panel to visits where FPGen but not
viewer 2.0 was downloaded, a user first selects viewer
2.0 then deselects FPGen.

some support for this and we hope to complete it in the
future.

References
[1].

[2].

[3].

[4].
[5].
[6].

[7].

[8].

[9].
[10].

[11].

[12].

Conclusions
[13].

We have shown how our SGViewer interface
supports the exploration of multi-dimensional data such
as web server log data. At each query step our nested tree
visualisation showed distribution information guiding the
exploration. Selections were done by clicking in
hierarchy panels while the hierarchy panel coordination
ensured the context of each query selection was
maintained to make later revision easier.
Our web log data set also include a visit graph which
captured prior and later visit relationships. The
integration of this would allow queries such as “when did
the visitors that downloaded a given tool in February
return later” to be asked. SGViewer already provides

[14].

[15].

[16].

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

Ahlberg, C. and Shneiderman, B., Visual information
seeking: tight coupling of dynamic query filters with
starfield displays. In Proceedings of CHI’94, (April,
Boston, MA), ACM Press, 1995.
Chimera, R. Value bars: An information visualization and
navigation tool for multi-attribute listings. In Proceedings
CHI'92, ACM Press, 293-294.
Dix, A. and Ellis G. Starting Simple - adding value to
static visualisation through simple interaction. In
Proceedings of Advanced Visual Interfaces, 1998, ACM
Press, 124-134.
Eick, S., Data visualization Sliders. In Proceeding of
UIST’94, ACM Press, 119-120.
Funas, G. Generalized Fisheye Views. In Proceeding of
the CHI'86 (Boston MA, 1986), ACM Press, 16-23.
Lamping, J., Rao R., and Pirolli, P. A Focus+Context
Technique based on hyperbolic geometry for visualizing
large hierarchies. In Proceeding of CHI'95 (Denver CO,
1995), 401-408.
Liechti, O., Sifer, M. and Ichikawa, T. Structured Graph
Format: XML metadata for describing web site structure.
In Proceedings of the 7'th International World Wide Web
Conference, (Brisbane, Australia 1998), 11-32.
North, C. and Shneiderman, B. Snap-Together
visualization: a user interface for coordinating
visualizations via relational schemata. In Proceeding of
Advanced Visual Interfaces, 2000.
Pedersen, T., and Jensen C., Multidimensional Database
Technology. IEEE Computer 34(12), 2001.
Plaisant, C., Bruns, T., Doan, K. and Shneiderman, B.,
Interface and data architecture for query previews in
networked information systems. ACM Transactions on
Information Systems, 17, 3, 1999, 320-341.
Rao, R., and Card, S.K. The Table lens: Merging
graphical and symbolic representations in an interactive
focus+context visualization for tabular information. In
Proceeding of CHI'94 (Boston MA, USA, 1994), ACM
Press, 318-322.
Shneiderman, B. Tree visualisation with treemaps: a 2-d
space-filling approach. ACM Transactions on Graphics,
11(1), Jan. 1992, 92-99.
Spenke, M., Beilken, C. and Berlage T., FOCUS: the
interactive table for product comparison and selection. In
Proceedings of UIST’96, ACM Press, 1996, 41-50.
Stasko, J. and Zang, E., Focus+Context Display and
Navigation Techniques for Enhancing Radial, SpaceFilling Hierarchy Visualizations, In Proceeding of the
IEEE Symposium on Information Visualisation, 2000.
Tanin, E., Plaisant, C., and Shneiderman, B., Browsing
Large Online Data with Query Previews, Proceedings of
the Symposium on New Paradigms in Information
Visualization and Manipulation - CIKM, 2000, 80-85.
Wittenburg, K., Lanning, T., Heinrichs, M., and Stanton,
M. Parallel bargrams for consumer-based information
exploration and choice. In Proceeding of UIST'01, ACM
Press, 51-60.

