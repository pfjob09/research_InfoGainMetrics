USER-DEFINED MAPPING FUNCTIONS AND COLLISION DETECTION TO IMPROVE THE
USER-FRIENDLINESS OF NAVIGATION IN A VIRTUAL REALITY ENVIRONMENT
Gernot Opriessnig
University of Technology Graz
Lessingstraße 25/II
A – 8010 Graz Austria
email: gernot.opriessnig@ifb.tu-graz.ac.at

Keywords:
Finite Elements

3D-Navigation, Real-Time Visualisation, Collision Detection, Virtual Reality,

Abstract
In the last years real-time visualisation with virtual
reality techniques has become to an essential part of
numerical simulation in almost all major fields of
engineering. This circumstance causes a high percentage
of users, having only a basic or no experience in the
handling of such systems. Especially in traditional fields
of technology like tunnelling the technical staff,
researchers or other involved persons are not familiar
with the navigation in a virtual environment.
An excellent visualisation of the available data that
can be used very easy has been shown as absolutely
necessary to sell the technology of numerical simulation.
The navigation is a central part of the usability of a
visualisation tool.
This paper describes the improvements of the
navigation of the “Tunnelling Visualisation System –
TVS” [1][2] which are collision detection and several
modifications of mapping the user input to the virtual
reality scene. The reason for these modifications is the
improvement of the systems user-friendliness by making
the navigation more realistic and exact.

technology to people working in tunnel construction one
has to have very effective and easy to use software tools.
Visualisation of data plays an important role here. There
is a large market of visualisation software in the technical
sciences.
A large majority of this software however is
concentrated on areas of mechanical engineering such as
the aircraft and the automobile industry. Visualisation in
the area of rock and soil mechanics has mostly been
performed using software which has been adapted from
other areas. However visualisation in tunnelling has
special requirements with respect to the display of data
and the easy of use of the system. The Tunnelling
Visualisation System (TVS) was developed, to fulfil these
requirements (Figure 1).

1. INTRODUCTION
The use of numerical simulation on site to assist the
tunnel engineer in often very difficult decisions is not
very wide-spread. However, to be able to sell this kind of

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

Figure 1: Screenshot of the TVS-GUI;
displayed is the geometry of a cavern-system
TVS allows the user to perform a virtual walk
through a tunnel which exists in computer memory only.
During the virtual walk through the model the user may
observe different results of numerical simulations and
geological features. With the use of special hardware
(head-mounted display) the model becomes 3D.
Tunnelling engineers usually are not very familiar with
the use of complicated computer-software, and they
should not be required to study huge user-manuals, to be
able to walk through the virtual tunnel.
Making stereoscopic pictures of the tunnel face,
which is needed to identify geological structures, brings
the possibility, to give the model a realistic appearance,
by using these photos as texture. With the Tunnelling
Visualisation System it is possible to provide the client
and other interested parties with a guided tour of tunnels
in planning and may be used to alleviate concerns by
environmentalists.
Another application of TVS is the planning of rescue
operations after tunnel or mine collapses. This allows
rescue personnel to plan rescue scenarios and to train
rescue procedures in the event of a tunnel fire. Since the
real simulation of the effects of a fire in a real tunnel is
rather expensive and cumbersome and in many cases not
possible it is convenient to perform a virtual simulation.
In such a simulation relevant data about the tunnel and the
fire are stored in computer memory. Using visualisation
techniques based on the concept of virtual reality these
data can then be displayed in such a way that the user has
the impression of actually being in a real tunnel observing
a real fire. This software tool can then be used to test
different rescue scenarios the only expense of this
exercise being computer time.
The developing hardware is a Dell Inspiron™ 8200
Notebook (2 GHz Mobile Pentium™ IV; 512 MB RAM;
NVidia Geforce™ 4 Go Graphics Board), Cybermind™
Hi-Res 900ST HMD and a Spaceware™ 3003 SpaceBall.

2. NAVIGATION
To make the navigation easy a SpaceBall is used.
This device is designed to be used in the threedimensional space so the navigation can be done
instinctive. Moving the ball of this three-dimensional
input device will change the position, turning it changes
the viewing-direction. Tests with persons with less or no
experience in using a VR-System have shown that it takes
only minutes to become familiar with the SpaceBall. The
mouse can only be moved in two dimensions. That makes

it necessary to use several combinations of movements
and mouse-clicks to control position and viewingdirection. It takes much longer to become firm with this
kind of navigation.
For an efficient work with the system the user
should be able to determine his position very precisely,
and without moving his hand from the SpaceBall, move
very fast from one position in the virtual space to another.
For this purpose an adaptive scaling is used to improve
the user-friendliness of the navigation. The user can
determine several parameters of the transformation
function between SpaceBall-movement and the scene.
The input device submits six values to the
visualisation tool:
SpaceBall-Values
x-direction

±3000

y-direction

±3000

z-direction

±3000

rotation around x-axes

±1000

rotation around y-axes

±1000

rotation around z-axes

±1000

The Tunnelling Visualisation System evaluates only
five of these numbers. The rotation around the z-axes is
being ignored, because this type of navigation produces a
floating horizontal line which is not useful in the field of
tunnelling. The rotation around the x-axis changes the
view in up-down direction, around the y-axis causes a
left-right turn.

2.1 Nonlinear Motion Mapping
To combine the possibility of exact positioning with
a high VR-speed a progressive mapping-function is
applied (Figure 2). This function is the same for
movement as well as for rotation. First both data-types are
scaled down linear to the same range of values. After this,
the progressive mapping is being applied. Two
parameters can be modified: the linear scaling-factor
defines the point (Figure 2: Point A) of intersection
between the nonlinear mapping-function and the linear
one.
In the region between zero and this point the VRspeed is less due to the scaling, outside it is higher. The
second modifiable parameter is the order of progression: a

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

higher value causes more difference between slow and
fast movement.
VR - Speed
5
4
3
2

A

2.3 User-defined system of coordinates

1

0.5

Figure 3: Moving in the x-z-plane
The user interface of the Tunnelling Visualisation
System offers the possibility, to activate or deactivate
each of the five available values. If the user decides to use
e.g. only the z-coordinate only this movement is being
processed, and the walk is performed on a line in this
direction. Choosing two coordinates causes a movement
in a plane (Figure 3).

1

1.5

2

SB - Movement

y

Figure 2: Progressive (dashed) and linear SpaceBalltransformation)
Viewing
direction

2.2 User-defined selection of active axes
The major advantage of the SpaceBall is the very
flexible and intuitive usability. Navigation in the three
dimensional space becomes very easy, but if it is
necessary to “walk” along a line, some users might have
some problems to do this, even with some experience in
using this input device.
One possible solution for this problem is to choose
manually, what information is being processed or ignored.
As mentioned above, six values describing the actual
condition of the input device are available. To get a
movement along a line it is necessary to use the
SpaceBall in a way, that from three movementcoordinates two are zero. In this case the rotation-values
certainly have to be zero too. This can be reached, if only
the remaining movement-value is being processed. All
other ones are ignored.

z

x

y’
z’
Viewing
direction

y
y

x’

Į

z

ȕ

x

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

x

Figure 4: Viewing line as base of a new system of
coordinates

The possible options described in 2.2 have one
major weakness: with these adjustments it is not possible
to choose any line or plane to move on it. Only the base
vectors of the coordinate-system and the three planes that
can be described by two of them are possible.
The solution for this problem is a user-defined
system of coordinates. The Tunnelling Visualisation
System offers two possibilities of navigation: moving in
absolute coordinates, that means that – independent from
the viewing line a SpaceBall-movement in z-direction
causes a change of position in this direction
(Figure 4 top). The alternative way to this is to take the
viewing line as z-vector of a new system of coordinates
(Figure 4 bottom).
A forward command to the SpaceBall causes a
movement in viewing direction. This kind of navigation is
frequently used in computer games. The system of
coordinates is being changed if the viewing-direction is
modified by turning the SpaceBall, so it is very easy to
adapt this system. In combination with the possibilities
described in 2.2 it is now possible to move straight along
each line or within any flat surface. To get this it is
necessary to do a transformation of coordinates, which is
performed using the rotation matrix of Euler [4]. The new
moving vector is product of this matrix with the
SpaceBall coordinates.

navigation very complicated, Į is restricted to a range
–ʌ/2 to ʌ/2.

2.4

Alternative to the manual activation or deactivation
of the mentioned components it is also possible to
perform an automatic detection of dominant directions.
The smallest value or the smallest two values are ignored.
The user can choose if one or two dominant directions of
SpaceBall movement will be processed. That causes, that
it is possible to move straight or in a plane and change the
direction without moving the hand from the input device.

3. COLLISION DETECTION
The navigation described in chapter 2 works
independent from the geometry displayed. That means
that it is possible to move through the visible structures, a
circumstance that can be an advantage or a disadvantage.
In real life a walk is usually done along the ground.
To get this effect in a Virtual-Reality environment it is
necessary to detect, which parts of the structure are under
the actual position of the virtual walker [5]. But only
those parts of the model which describe real surfaces are
to consider. Other parts, like cutting-planes or vectors
have to be ignored. To figure out, how to find the
important parts of the geometric information it is
necessary to know the basics about the available data.

@
D
@
D
i
y
i
y
jikzy
j
z
j
z
@
D
@
D
@
D
@
D
@
D
D@
D@
D@
D@
D
{k{
{k@
@
D
@
D
y
ijky
z
z{ijjk@
@
D
@
D
@
D
@
D
@
D
D@
D@
D@
D@
Dz{
mx
Cos a
Sin a
0
my = - Cos b Sin a Cos a Cos b Sin b
Sin a Sin b - Cos a Sin b Cos b
mz

*

SBx
SBy
SBz

which is:

Cos a SBx + Sin a SBy
mx
my = - Cos b Sin a SBx + Cos a Cos b SBy +Sin b SBz
mz
Sin a Sin b SBx - Cos a Sin b SBy +Cos b SBz

ǹ
Ǻ
SBx
SBy
SBx
mx
my
mx

Rotation around the x-axis
Rotation around the y-axis
SpaceBall movement in x-direction
SpaceBall movement in y-direction
SpaceBall movement in z-direction
VR movement in x-direction
VR movement in y-direction
VR movement in z-direction

The SpaceBall rotations are converted in a similar
way. To prevent a head-over turn, which would make the

Automatic determination of dominant
components of SpaceBall movement

3.1 The data-base

The Finite Elements Method (FEM) is one of the
most frequently used in the field of numerical simulation,
so this kind of data is very important for the visualisation
of simulation data.
Figure 5 shows an example for the geometric data
used for the mentioned method. The three-dimensional
space is filled with cubic elements. A standard FE-mesh
for a tunnelling simulation consists of app. 105 Elements.
Usually 20-50 load-steps are calculated. Including the
simulation results (deformation, stresses …) up to 1 GB
of data are available. For the purpose of visualisation it is
necessary to find those parts of the mesh, which describe
the surface of the simulated structure [6]. The solution of
this search is a wireframe that consists of quadrilateral
elements (Figure 6).

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

Figure 5: 3D mesh of a Finite Elements simulation (half
symmetric tunnelling example)
The mesh in Figure 6 contains the base information
for the decided navigation type. During the walk through
the model the nearest element below the actual viewerposition has to be found.

being ignored. This information is being found by using
the depth-buffer of the graphics-hardware. This buffer
usually is used for a correct visibility of the displayed
objects. Independent from the order of drawn objects only
those parts of an object without anything between the
viewing-point and itself are visible. In the depth-buffer all
elements displayed are sorted in order to their distance to
the viewer. This sorting is performed very fast, so it can
also be used to find the next element under the actual
viewer-position.
During the walk the viewing line is being changed to
vertical downwards without outputting the result. It is
only drawn to the buffer. After that the first entry in the
depth buffer is the searched element. To save graphicsperformance only a reduced version of the geometry is
used for this. Textures, interpolation and lighting effects
are disabled. Certainly this control-view is only being
done if this is necessary – if the position of the viewingpoint has been changed. To figure out, what amount of
change is tolerable without searching for a new y-value,
the average size of the elements used is being calculated,
a calculation that only necessary once for a system. This
average value is taken as the allowed change of position
between two control-views.

3.3 Smooth change of the moving vector
m

m
Yn
Yn-2
Yn-1
Figure 7: Moving direction defined by three y-values

Figure 6: Surface elements from Figure 5; displayed are
the tunnel-surface and the ground above it

3.2 Detection of the needed y-position
The navigation with the “walk along the ground”
mode works similar to the possibilities described in
chapter 2. Almost all adjustments described there are
possible. Only the SpaceBall value for the y-movement is

For a smooth change of position the y-value is not
being assigned direct to the viewer-position. This would
cause jumps in the movement. The Tunnelling
Visualisation System takes the actual y-value (yn) and the
last two ones (yn-2, yn-1). These points are connected by a
second order curve using the Newton-InterpolationAlgorithm (Figure 7). The gradient of this curve in the
point yn is taken as new moving vector m . This causes a
very smooth fly over the surface. The distance between
the surface and the viewing position can be chosen by the
user.

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

3.3 Detection of collisions with geometrical
structures
In real life it is – certainly – not possible to walk
through a wall or other structures. In the Virtual Reality
this can be done without any problems. For a realistic
navigation it might be useful to prevent this. In the field
of tunnelling sometimes it is necessary to walk along the
tunnel to watch the simulation results in this area.
Therefore it is needed to detect objects crossing the
walking vector. The applied procedure is the same than
described in 3.2. Only the direction of the control view is
a different one. For this purpose the walking-vector has
been chosen.
During the walk it is being checked if there are any
objects intersecting the inputted walking-vector.
m

m new

basic geometry, no interpolation) after 60 “real” frames
cause only a marginal loss of performance.

4. CONCLUSION

The methods described in this paper cause a
fundamental improvement in the 3D-navigation with the
SpaceBall. The possibility to move geometrical exactly
straight ahead or in a plane is an essential feature if the
user wants to observe e.g. the tunnel advance. It becomes
easy to move parallel to the centre of the tunnel or on a
fault-zone.
The application of collision detection makes the
navigation more intuitive because it is more realistic not
to be able to move through structures. The method using
the hardware-capabilities for this purpose increases the
performance.
Especially for users with less experience in the use
of Virtual-Reality techniques this is an important
improvement of the usability of the Tunnelling
Visualisation System.

5. References

m
m

[1] Opriessnig G.: “Visualisation in Tunnelling – a Virtual
Reality Environment for Tunnelling Engineers“ Felsbau 1/99,
Verlag Glückauf GmbH Essen

Figure 8: Change of moving direction due to a
colliding object
In case of an object found the moving-vector is
modified. Components perpendicular to the object in front
of the viewer are set to zero. The new movement is
tangential to the object (Figure 8) – the user walks
parallel to the wall.

3.4 Loss of performance
The Tunnelling Visualisation System generates 60
frames per second; 30 for each eye in stereo-mode. (app.
105 quadrilateral elements (Figure 6), 10 interpolationnodes per side for a smooth curve; textures and
volumetric results). Without any movement there is no
loss of performance. During the walk two additional
frames per passed element-length have to be rendered.
Experience shows that this takes app. one second. Two
frames with a reduced scene (no textures, no results, only

[2] Opriessnig G, Beer G.: ”Real-Time Visualisation of large
volumetric Data-Sets“ Proceedings Fourth IASTED
International Conference Computer Graphics and Imaging
(CGIM 2001) Honolulu, Hawaii, USA
[3] Noble R., Clapworthy G.:
“Improving Interactivity within a Virtual Sculpting
Environment” Proceedings IEEE 1998 International Conference
on Information Visualisation IV98;
Southbank University London, UK
[4] K. Meyberg, P. Vachenauer
“Höhere Mathematik 1 – Differential- und Integralrechnung
Vektor- und Matrizenrechnung“ Springer Verlag Berlin
Heidelberg New York ISBN 3-540-51798-7
[5] He T., Kaufmann A. “Collision Detection for Volumetric
Objects“; Software Production Research Department; Bell
Laboratories IU-328, 1000 E. Warrenville Road Naperville, IL
60566
[6] Opriessnig G. , Beer G. “Data Optimisation for the
Visualisation of FEM-Results“ Proceedings IEEE 2000
International Conference on Information Visualisation. IV 2000
IEEE Computer Society, Southbank University London, UK

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

