Visual Bracketing for Web search Result Visualization
Jonathan C. Roberts and Edward Suvanaphen
Computing Laboratory, University of Kent
j.c.roberts@kent.ac.uk, es45@kent.ac.uk
Abstract
This paper introduces a novel visual bracketing
method that provides detail-in-context views where the
inner part contains the Focus bracketed by the context
information at a lower semantic level We demonstrate
two designs for web search result visualization that
obviate the need to frequently select the next button for
viewing multiple search results.
Keywords: Focus+context, detail in context, greeking,
bracketing, multiple views.

1. Introduction
Search engines are an important part of information
gathering, and serve as road signs for the Internet; they
point the users in the right direction enabling them to
find specific sites or general information about a topic.
Traditional search engines (e.g. Google, Yahoo and
Excite) visualize the results in the form of a text-based
list. The actual data contained within each returned list
varies from search engine to search engine, but in
general, the title of the page is returned, a short extract of
some text from the page is included along with a URL
link to the page.
However one problem with search engines is that they
return too much information, this coupled with a
traditional text representation means that there is not
enough space on the screen to display all the results. The
search engine may find 100 or 100,000 pages of
information relevant to the query. Conventionally the
result list is divided into smaller portions and returned
10, 50 or 100 at a time, but it is only feasible to view 5 to
10 results at any one time on the screen without scrolling
which this forces the user to click on the next button, to
view the next set of results
Some critics may argue that search engines are becoming
more effective at finding the ‘correct’ answer. While this
may be true, it is often more beneficial to allow the user
to select and decipher what they believe to be a correct
answer rather than displaying a reduced set of results.
Certainly, from our experiences browsing a larger set of
results is useful, because the users develop and change
their understanding of what and how they are searching
based on the returned results. Thus, we believe it is more

prudent to visualize a large number of the results. That
may be achieved through distortion or focus+context
methods that will provide a hierarchical view of the data.
Our aim is to design a visualization that (1) utilizes
Focus+Context techniques enabling the user to more
effectively browse through the results and quickly drill
down to relevant information, while gaining an
understanding of the context of the selected information;
(2) uses multiple views to provide different levels of
detail and additional information; (3) to display the
results in a way that would be innately familiar to
traditional web users.
We achieve this, first by using a text representation ņ
that will be familiar to the users ņ and second by a
bracketing technique where lower ‘level of detail’
brackets the regular representation to provide the detail
in context.

2. Data Gathering & Visualization
This research focuses on visualization techniques rather
than the data gathering process. Thus, we use the Google
API to provide the required data, which provides a
convenient way to gather web search result data and
integrate it with an application.

2.1. Search results
The Google API is well-written and simple to use. For
example, the search term string can be submitted to
Google using the API, and the results are subsequently
returned in a list of elements each named
GoogleSearchResultElement’s (SRE’s).
One SRE contains nine variables concerning one url that
matches the keyword search. In this work we focus on
four of the main variables (title, URL, paragraph of text
and page size). We use a model-view-controller designpattern in our implementation, and thus store each of the
SRE’s in a list that can be visualized on demand.
Web searching provides a rich data source and there are
many variables that may be gathered and displayed.
Indeed, some search engines such as Google and

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

Vivisimo offer additional information in the form of
thumbnail images and Cluster based semantics,
respectively. The multitude of variables may be grouped
into four categories [2]:
1) The search query itself, including number of
keywords, operators used (e.g. Boolean inclusion/
exclusion)
2) Information about the actual search results, the SRE
information (e.g. rank, text snippets, results from
different engines or different sessions).
3) The content of the information (e.g. media types,
content size, position of keywords on the page).
4) The structure of the pages, including the quantity of
internal or external links, the position and layout of
the site or page.
The Google API currently has some restrictions for
example it cannot be run in an applet and limits the
number of queries per day to 1000. We refer the readers
to the online documentation to find out more about the
Google API [1]. Gathering additional information can be
achieved by using bespoke search engines or additionally
visiting each site (returned in the SRE) [2] although this
is obviously much slower than using the native API.

2.2. Search Result Visualization
The information contained within an SRE is mostly
textual, thus the developer either needs to display the
information in textual forms or develops an appropriate
abstract mapping. In this paper we focus on visualizing
the textual information rather than graphically displaying
the SRE information. Different techniques may be used
that simplify the text, extract keywords and phrases, or
exchange parts of the text directly into graphics; for
example, systems such as SeeSoft [3] and WebTOC [4]
replace some of the lines of text with colored lines.
Other researchers have investigated graphical
representations of the search data such as Cugini’s [5]
three-dimensional scatter-plot and McCrickards SQWID
[6] visualization. Dots and colour pixels are also
commonly used to represent individual SRE’s. For
example Dotfire [7] represents digital library search
results, Sparkler [8] uses colored dots and relevancy in a
bull’s-eye formation, TileBars [9] maps the position of
the keywords and xFind plots relevance to y-axis and
document size to the x-axis [10]. Finally, Cugini [5]
compares textual and graphical interfaces.

3. Bracketing Concept & Design
Detail-and-Context is known by several names such as
poly-focal projection, fisheye view and distortionorientated presentation [11]. These techniques allow the

user to first focus on features or interesting parts of the
visualization while viewing the surrounding context.
Reducing the detail, or distorting and squashing the
information may form the context view. Moreover,
sometimes a semantic change accompanies the viewing:
increasing or decreasing the detail in the view (such as
used by ToolGlass [12]).
The idea of visual bracketing is inspired from bracketing
in photography. When professional photographers take
pictures they make an estimation of the correct light and
speed levels, set up the camera with these parameter
settings
and
take
multiple
pictures
with
parameterizations either side. In defining bracketing, we
quote “[bracketing is a technique where the
photographer] takes a series of images of the same scene
at a variety of different exposures that bracket the
metered exposure (or manual exposure)” [13].
In our case we achieve a visual bracketing effect by
displaying different semantic information in the fore and
after visualizations. The inner part contains the detail
view while the bracketed visualizations contain the
context information at a lower level of detail. For web
search result visualization the inner part contains full
information about a number of search results while the
bracketed views contain less detailed information such as
solely the url, this is shown visually in Figure 1(center).
Indeed, further bracketed views may enfold the former,
showing less detail still. Thus the information is depicted
in different views using various levels of detail, Figure 1
(right).

Figure 1. Schematics showing bracketed visual
depictions of the Search Result Elements (SRE).
Left, shows the traditional scroll list, each result in
full detail. Center, shows the bracketed version with
two levels of detail: full detail SRE that is bracketed
by a simplified view of URLs. Right, shows a threelevel bracketed view, with the third level being
depicted by greeking.
The different level-of-details (LOD) may be generated
from various algorithms, e.g. abstracting the information
in some way or simply binning the information. In our

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

implementation the second level depicts less information
while greeked lines represent the third LOD. Greeking,
as used by Robertson [14] as part of his document lens
visualization and SeeSoft [3] in software visualization,
exchanges the characters of the text by straight lines.
This technique is useful to provide summary and
overview information about a text document.
A sliding window methodology is also applied to the
design, such that the user may directly slide the focus
view up and down to change the information that is
displayed in the center (and corresponding bracketed)
views. This acts in a similar way to a fish-eye view [15],
where the center window displays the full resolution and
a lower level-of-detail is shown either side. But with our
method there is a non-continuous change in the level of
detail rather than a gradual change (along with a
coincident semantic change).
Moreover, this visual bracketing concept is similar to the
perspective wall design [16], albeit horizontal rather than
vertical. The perspective wall technique displays the data
in three dimensions on a two-dimensional wall. The user
focuses on the information in the center wall, with the
side parts of the walls to display the context; information
on the wall may be scrolled to change the focus. The
differences with our method are that (1) the bracketing
may occur at multiple levels (brackets of brackets), (2)
we employ a semantic level change and (3) the user may
alter the brackets size.

3.1. Different interaction methodologies
User interaction needs to be considered when designing
the visualization. In our design the user may decide on
the width of each bracket, as depicted in Figure 2, as the
bracket increases so the area (that it is moving towards)
decreases the number shown.

are different implementations; we describe two main
variants of this operation.
First, the width of each window bracket is kept constant,
apart from the outer most panes, as depicted in Figure 3.
Thus, the user moves each of the brackets together as one
unit: they are locked together. The information changes
appropriately.
Second, the user may grab each inner bracket (the focus
view) and move that up and down within the restriction
of the width of the encapsulating bracket. If the user
attempts to push past the boundary of the next bracket
then that bracket width changes and moves as well, etc.

Figure 3. Schematic showing the different scrolling
mechanisms. (1) The original bracketed view. (2)
Constant width method where the surrounding
brackets X,Y are kept constant and the areas above
and below A,B respectively are enlarged/reduced.
(2) and (3) show the inner-bracket scrolling method,
where the panes may scroll inside the bracket up to
the bracket end (3) or push past the bracket (4).

4. Realizations
We have implemented two visualization variants using
the aforementioned bracketing model in order to
compare and contrast the proposed concepts. The models
have been implemented in Java 1.4 with Swing
components. The first is based on our bracketing design
(utilizing the first interaction methodology), and the
second displays the information in multiple views
(highlighting the information via a bracketing scheme).

4.1. Bracketing search result visualization

Figure 2. Schematic showing how the user can
change the width of each bracket.
Additionally, the user may slide the focus window up
and down. Although this seems a simple operation, there

Figure 4 shows a screen shot of this realization. After the
user types and submits a query to the Google web service
a set of results are visualized according to our bracketing
concept. One result is shown in full detail (focus view),
the next n (in this case 5) are displayed either side as
URL’s and the remaining results are displayed as

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

greeked lines. The user can scroll up and down to alter
the focus information, or merely click on any result
(Greeked or URL) and the result will become the new
focus view; the rest of the visualization rearranges itself
accordingly. The user can view the associated web page
by clicking on the link in the focus view, which opens
the page in a new browser.
Users can bookmark results. These bookmarks are
highlighted and allow the user to return to view these
results at a later stage. When two or more results are
bookmarked another scrollbar appears on the right-hand
side (named the snap-bar). The snap-bar allows the user
to move (snap) between highlighted results, enabling the
user to quickly return to marked elements.

4.2. Multiple Views with highlighted brackets
The second visualization separates the semantic
information into multiple views; a screen shot of this
implementation is shown in Figure 5. Each view displays
(in their own view pane) different semantic levels of the
same SRE: full SRE information, URLs, greeked lines,
respectively. Thus different multiform information is
displayed in each view [17]. The pane containing the
greeked list displays the entire list. The URL list displays
ten results at a time, and the fully detailed pane displays
five results at a time.
Each view is coordinated such that when the selected
SRE changes in any of the views, the other views
automatically update, keeping the views consistent.
Again the user may bookmark elements. Bookmarking a
result in one view will highlight it in all the other views.
The bracketing concept is simulated in this model by the
use of coloured bands. This reinforces the context
information between the views. Each colour band
denotes the information that is visualized in the
corresponding higher level of detail view. Thus, the
highest detailed view depicts the current selected item,
the next down highlights the elements that are displayed
in the more detailed view along with the current
selection, and so on. This allows users to match the
currently viewed data elements in one viewing pane with
those in the other view panes. This hierarchical
association is used within the spiral calendar [18], where
one view depicts the year, the next a month, then a day
etc. The Highlighting colour is also different so that the
user can easily distinguish which results that have been
bookmarked.
Additionally, the length of the greeked lines visualizes
the size of the document. This provides an additional
layer of information and gives the user an additional
visual cue to use when searching the list of results.

5. Evaluation
We performed a preliminary user trial with our
implementations using 3 male and 3 female users, each
user was given a brief demonstration of the program and
then encouraged to interact with the visualization.
Afterwards the user was asked to complete a
questionnaire; the findings have been encouraging. Users
found the controls of both models easy to understand and
manipulate, users in general favored the second model
stating that it made the search results easier to view and
provided extra functionality compared to a normal search
engine (e.g. Google).
When comparing the visualizations to Google and other
search engines, the bookmark function was praised most
as a useful tool to identify and remember SRE’s of
interest. Users also agreed that the Greeked visualization
provided a useful overview of the data (through the size
representations in the Greeked lines) and that it aided
them in their search by providing additional visual
landmarks.
The models are currently undergoing a longer trial,
comparing and contrasting our two display techniques
with traditional text-based realizations. In this project we
support early testing (early in the design cycle) because
such user evaluations influenced our designs. For
instance, initially we did not include size information in
the greeked pane until after an early user evaluation. We
are also investigating other user suggestions such as
incorporating hot-keys (e.g. bookmark, move-to next
bookmark, etc), and adding an extra view pane to display
very large (10,000 or more) results more effectively
(perhaps using pixel based techniques).

6. Future Work
The next challenge is to integrate these techniques closer
with the browser such as integrating the navigation into a
Web-Browser Toolbar. Indeed, we have already explored
the use of Java Applets to incorporate the program into
an HTML browser, but Applet security and the
restrictions of the Google API have so far inhibited this
development. Currently we are examining the use of Java
Servlets to provide our web interface. Servlets can
dynamically create HTML pages and hence can pass data
to an Applet (through the use of <PARAM> tags)
without faulting Applet security. Retrieving data from
the Applet is also a problem because the Servlet can only
pass data to the Applet. Using other search engines in
place of the Google API may provide different data and
hence create a variety of visualizations.

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

Figure 4. Screen shot of the bracketing visualization. The focus view shows the full detail of the Search
Result Element, solely the urls are depicted in the adjacent bracket, finally greeked text (of the urls)
are shown in the outer most level.

Figure 5. Screen shot of the multiple view variant. Separate semantic information is shown in each
views: greeked lines, URLs, full SRE information, respectively. Different shades show the bracket
information.

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

7. Conclusions
We have developed and implemented two designs based
on the bracketing concept that successfully visualize web
search results using the Google API. The ideas utilize
detail-in-context and multiple view techniques to display
search result data. From our user trial we discovered that
overall users found the Bracketing visualization an
improvement over normal search result visualizations
because it is faster to browse results and extra features
such as the result highlighting allow user to keep track of
interesting results.
Finally, we believe the bracketing idea may be applied
and adapted to many other applications and situations,
and particularly useful for viewing of large data-sets

Acknowledgements
We thank the number of volunteers who evaluated our
system and acknowledge Keith Franklin and Christian
Jacobsen for their invaluable coding tips.

References:
[1]

[2]

Google Web API url: http;//www.google.com/apis/

Jonathan Roberts, Nadia Boukhelifa and Peter Rodgers.
“Multiform Glyph Based Search Result Visualization”.
In Proceeding Information Visualization 2002. IVS,
IEEE, July 2002, pp. 549-554.
[3] S. Eick. “Graphically displaying text. Journal of
Computational and Graphical Statistics”. June 1994.
3(2):127--142
[4] Ben Shneiderman, David Feldman, and Anne Rose.
“WebTOC: A Tool to Visualize and Quantify Web Sites
using a Hierarchical Table of Contents”. Technical
Report CS-TR-3992. February 1999
[5] John Cugini, Sharon Laskowski, Marc Sebrechts, Joanna
Vasilakis, Michael S. Miller. “Visualization of Search
Results: A Comparative Evaluation of Text, 2D, and 3D
Interfaces”. Research and Development in Information
Retrieval. 1999, pp. 3-10.
[6] D. Scott McCrickard, Colleen M. Kehoe “Visualizing
search results using SQWID”. In Proceedings of the
Sixth International World Wide Web Conference. April
1997.
[7] Ben Shneiderman, David Feldman, Anne Rose, and
Xavier Ferré Grau. “Visualizing Digital Library Search
Results with Categorical and Hierarchical Axes”. HCIL
Technical Report No. 99-03. June 1993.
[8] K. Perrine S. Havre, E. Hetzler and E. Battelle.
“Interactive Visualization of Multiple Query Results”. In
Proceedings of the IEEE Symposium on Information
Visualization 2001 INFOVIS'01. 2001. pp. 105-112.
[9] Marti A. Hearst. “TileBars: Visualization of Term
Distribution in Full Text Information Access”.
Proceedings of CHI’95. May 1995.
[10] K. Andrews, C. Gütl, J. Moser, V. Sabol, W. Lackner.
“Search Result Visualization in xFind”. In Proceedings
UIDIS. IEEE Computer Society, 2001. pp. 50-58

[11] Y. K. Leung and M. D. Apperley. “A review and
taxonomy
of
distortion-oriented
presentation
techniques.” ACM Transactions on Computer-Human
Interaction. 1994. 1(2):126—160.
[12] Eric A. Bier and Maureen C. Stone and Ken Pier and
William Buxton and Tony D. DeRose. “Toolglass and
Magic Lenses: The See-Through Interface”. SIGGRAPH:
Computer Graphics, Volume 27. 1993. pp. 73-80.
[13] url: Auto-Bracketing: http://www.dpreview.com/learn/
Glossary/Exposure/Auto_Bracketing_01.htm.
[14] G. G. Robertson, J. D. Mackinlay. “The document lens”.
In UIST '93. ACM Press, Atlanta GA, USA, Nov. 1993.
[15] G.W. Furnas. “Generalized Fish-eye view”. In
Proceedings of the SIGCHI conference on Human
factors in computing systems. Boston, Massachusetts,
United States, 1986, pp. 16-23.
[16] Jock D. Mackinlay, George G. Robertson, Stuart K.
Card. “The perspective wall: detail and context smoothly
integrated”. Proceedings of the SIGCHI conference on
Human factors in computing systems: Reaching through
technology. New Orleans, Louisiana, United States,
1991.
[17] J. C. Roberts. “Multiple-View and Multiform
Visualization”. In Visual Data Exploration and Analysis
VII, Proceedings of SPIE, 3960. January 2000, pp. 176185
[18] J. D. Mackinlay, G. G. Robertson and R. DeLine.
“Developing Calendar Visualizers for the Information
Visualizer”. In Proceedings of UIST'94, ACM
Symposium on User Interface Software and Technology.
1994, pp. 109-118.

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

