Visualizing Topology in Self-Organizing
Management Overlays
Sven Graupner

Artur Andrzejak

Vadim Kotov

Zuse-Institute Berlin (ZIB)
School of Computer Science
Hewlett-Packard Laboratories
Carnegie Mellon University
1501 Page Mill Road, Palo Alto, Takustr. 7, D-14195 Berlin, Germany
andrzejak@zib.de
Moffett Field, CA 94035, USA
CA 94304, USA
vadim_kotov@cs.cmu.edu
sven.graupner@hp.com

Abstract
System management in IT organizations faces growing
complexity and the need to operate more in ad-hoc,
collaborative, cross-domain environments. Management
systems today are built for rather small organizations in
the order of 103 elements and structured in domains.
System management today relies on static hierarchical,
preconfigured organization. Involvement of human
operators causes the need for effective visualization of a
diversity of management-related information.
With the desire towards ad-hoc collaboration across
organizations, specifically fostered by grids, static, wellknown and preconfigured management topologies are
becoming hard to maintain. Dynamic topology creation
and exploration is needed when new collaborations are
established. Topology across organizational domain is
also called management overlay.
Algorithms are needed that can self-organize topology, as
well as algorithms that can render and update the layout
for visualizing topology information presenting
management information on operator consoles. Changes
constantly occurring in an ad-hoc topology need to be
updated and presented accordingly.
The paper discusses ad-hoc topologies and impact on
management systems. The paper is based on experiments
with various algorithms with self-organizing capabilities
and hyperbolic visualization techniques for visualizing
ad-hoc topologies for management overlays.

1

Introduction

Several trends characterize the IT landscape today. One
important trend is towards the desire for establishing
collaborative environments with changing partners on an
ad-hoc basis. The trend is fostered by grid technology [1].
The ability to establish collaborative environments on an
ad-hoc basis is promising and appealing to IT customers
in many ways where business requires collaboration.
Agility and adaptivity are key words for supporting IT

infrastructures. Examples are manifold such as when
manufacturers want to quickly establish or change supply
chain relationships with changing partners in changing
markets. Service organizations want to be able to solve
project tasks in collaboration with internal or external
partners and share resources, documents, and information
for this purpose for a limited time. Many more reasons
exist why ad-hoc collaborations in business and science
are desirable and on demand for IT vendors.
The desire for ad-hoc collaboration has impact on IT
systems and IT infrastructures and their management
systems. What had been rather closed and static in the
past is now becoming opened up to partners appearing
and disappearing rather frequently in an ad-hoc and
unplanned fashion, while yet meeting expectations of
security, predictability and reliability, traditional tasks of
IT support organizations and management systems.
Challenges for IT management systems are:
- How to establish and manage secure and protected
collaborative domains among changing partners?
- How to deal with unpredictable numbers of elements
to be managed when new partners are joining a
collaborative domain.
- How to identify topology of a collaborative domain
as basis for visualizing management information?
It seems obvious that static configuration of IT systems
and their management systems approaches limits that
cannot be overcome by gradual improvements.
Algorithms with capabilities of self-organizing topologies
have become popular in form of distributed hash tables
[2] used in peer-to-peer systems [3]. It seems obvious that
self- organizing topology is a very needed capability in
collaborative management environments as well.
The following section provides a brief overview of a
management overlay that seamlessly spawns across
traditional management domains when establishing a
collaborative domain with varying number of participants.

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

Section 3 explains algorithms we investigated in regard to
their topology self-organizing capability for establishing
and maintaining the management overlay.
Section 4 summarizes how established management
overlay topologies can be visualized without relying on
configured layout information as used in traditional
management systems. We specifically experimented with
hyperbolic visualization, which allows visualization of
large numbers of elements in a seamless continuum
mapped on a sphere rather than the traditional twodimensional approaches.

Actions are propagated through defined interfaces of MO
to underlying resources. MO exist separately and
independently of resources. They are linked to one
another forming an overlay as shown in the figure.
Relationships among resources are reflected as
relationships among MO in the overlay layer.
Figure 1 shows a management overlay that spans three
partner domains participating in a collaborative domain.
The management overlay is shown in the upper part with
managed objects and relationships among MO.

2 Management Overlay for Ad-hoc
Collaborative Environments
A management overlay is an overlay network [4] used for
system management purposes. Subjects to management
are resources (the term resource is used to encompass
systems, services, documents, potentially any kind of
hardware or software IT asset) partners joining a
collaborative domain want to share with other partners to
achieve the purpose of the collaboration. These resources
are subsets of each partner’s own set of resources resource
inventories. As partners join, and with them, resources are
brought into the collaborative domain, those resources
switch context from being part of the originating
environment of an individual partner to now being part of
a collaborative domain. This context switch has
implications to management systems associated with
resources. Usually, different partners will have own
systems and policies for managing their resource
inventories. The idea is that with switching from a partner
context into a collaborative domain context, a resource is
untied from its management system in the partner
environment and linked to the management system used in
the collaborative domain.
There are many problems associated with resources and
management systems, as they exist today. Both, resources
and management systems are not prepared for switching
contexts. The focus in this paper is on the aspect of
topology-establishing algorithms used for creating
management overlay and ways to visualize those
topologies without preconfigured topology information.
It is typical in management systems that resources are
accompanied by “managed objects” (MO), proxies of
resources in the management domain. MO are linked to
resources in an appropriate manner for reporting status
data from resources to MO and further to the management
system. Instead of dealing with the diversity of resources
underneath, management systems interact with managed
resources through MO using standardized interfaces and
protocols provide for interaction with the management
system. The same applies to corrective actions
management systems impose on managed resources.

managed objects
(MO) for resources

resources

three partner domains

Figure 1: Collaboration of with three partner domains.

3

Algorithms with Self-Establishing
Topology

Most client-server systems provide a central point of
access where the global knowledge of the system is
present. As a consequence, the easiest way to set up and
to optimize the topology of the underlying communication
network is to do it “by hand”. This situation changes
dramatically in very large or dynamic systems, where the
global knowledge of the system cannot be obtained, e.g.
because it will change before all information is collected.
At this point algorithms for automatic creation and
adjustment of topologies come into play. However, as a
by-product we obtain techniques which dramatically
decrease the system maintenance efforts. This property
makes it attractive to use them in management overlays of
different scales.
In this section we we discuss how algorithms with selforganizing topology can be used in management overlays.

3.1 Peer-to-Peer Networks
Peer-to-peer networks are a recent example of selforganizing networks, with most prominent example being
the file-sharing networks.

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

Disregarding the functionality, such networks can be
broadly classified into heterogeneous (where some nodes
fulfill more tasks than others) and homogeneous, with all
nodes being equal. As for the first type, examples are
completely centralized systems as former Napster, or
hierarchical such as the Morpheus/KaZaA network.
Among the homogeneous network we find classes of
unstructured systems (such as Gnutella), and structured
ones, known as the Distributed Hash Tables (DTHs).
Most sophisticated solutions among these systems are the
DHTs. They provide an efficient routing mechanism
which allows finding of a particular node with data
labeled by a key. In most cases, there is some kind of an
abstract space (e.g. a ring for Chord or d-dim torus for
CAN) which imposes a topological overlay structure upon
the participating nodes. The disadvantage of this solutions
are routing inefficiencies which occur if the overlay
topology is not aligned with the physical network.
The most important examples of such systems are:
- Plaxton/Pastry/Tapestry [8]: are based on prefixrouting, similar as in telephone network. In Plaxton,
each node becomes a root of a tree spanning the
network, and can be reached along the edges of this
tree. The other systems use a variation of this idea.
- Chord [2] features a ring-based topology. Each node
becomes a point on a ring, and knows nodes of
distance 2i for i = 0,..,160. In this way, routing to
another peer can halve the remaining distance to the
target in each hop.
- In CAN [4] nodes correspond to hypercubes in a
abstract d-dimensional space, and know only the
nodes responsible for adjacent hypercubes. Routing is
performed by following a line to the target in the
abstract space.
How topology is established. In heterogeneous networks,
either the central node or one of the supernodes must be
known in advance. A new node registers at such a node
and so becomes part of the network. In homogeneous
networks, at least one active member of the network must
be known. In an unstructured network, its neighbors
become also neighbors of the new node.
As for DHT, the procedure is more complicated. Usually,
the new node gets an identifier computed by a hash
function or chosen randomly. This identifier determines
the location of the node in the abstract space. As next the
node currently closest to this identifier is localized (using
the routing mechanism), and the new node “takes over” a
part of the abstract space from the old node, sharing some
of the neighbors as well. Thus, the choice of the identifier
for a new node influences the grow of the topology. To
maintain a balanced state, such an identifier is chosen

either randomly, or via a consistent hash function which
tends to disperse the nodes equally.

3.2 Ant Colony Optimization Algorithm
In [9] several distributed and self-organizing algorithms
for placement of services (or applications/jobs) to servers
are presented. One of them is an algorithm based on Ant
Colony Optimization featuring a high degree of scalability
and fault-tolerance.
In this system, a service manager Ms is instantiated for
each service s. If service s is not placed yet, or an
overload condition has occurred, Ms creates multiple ants
(“agents”) and sends them out in the underlying server
network. Each ant has a service list containing s including
all services cooperating with s. For each service, the ant
knows its current resource requirements. It also knows the
current communication requirements among services.
The ant travels from one server to another choosing the
servers along the path based on locally available
information (mostly traces of other ants – the
“pheromone”) and a random choice.
In each step, one of the services from the list is assigned
to the current server. The path created in this way
represents a partial solution to the placement problem
found by this particular ant. When the ant has assigned all
services, it reports its path to the service manager Ms of s
and terminates. The service manager compares reported
paths for best assignments. This assignment is also
compared with the current placement of services. Finally,
Ms decides about rearrangement of the placement.
For the above algorithm it is not necessary to know the
physical network topology completely. More important is
the topology of the transient overlay “network” created by
a service, its service manager and the spawned ants. Such
a network is created according to local information
(ensuring scalability) and is highly fault-resilient.

3.3 Agents in Overlay Networks
Another self-organizing algorithm for placement of
services described in [9] uses agents which move around
in a CAN-based overlay network. Each agent is
responsible of a group of services and in every step it
evaluates a possible assignment of all services to the
current server and its neighbors. To increase the reliability
and shorten the exploration time, several agents for a
single group of servers are instantiated.
The evaluation of potential new placements is initiated by
retrieving the capacity parameters and utilization data of
the current server and its neighboring servers by means of
a peer-to-peer overlay network. This data is then subject
to evaluation by an objective function. The group agents
belonging to the same service group periodically

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

exchange their best scores. If the score of one of them is
better than the real placement (also taking into account a
penalty for moving services), this group agent initiates a
rearrangement of the placement.
Since the evaluation of a new agent placement incurs a lot
of effort, the next move of an agent must be chosen
carefully. Agents are guided by information from an
overlay network that provides capacity-related attributes
of servers. In this overlay network described in [11]
servers are connected in a peer-to-peer manner to achieve
fault-tolerance and self-organizing properties (i.e. servers
may join and leave without a reconfiguration required).
The functionality of this CAN-based network allows
range queries for attributes. In our case we are mostly
interested in server processing and storage capacity.
The hypercubes in the abstract space of the adapted CAN
system are ordered according to a generalized ddimensional Hilbert curve.
The topology of the overlay network is imposed by the
CAN abstract space and the Hilbert curve. As mentioned
above, this topology is responsible for self-organizing
functionality and fault recovery. However, the agents may
also move along physical network topology which
provides an additional variety for the explorations.

4

Topology Visualization

Visualization of topology is important in management
systems. Operators need to navigate the space of managed
objects. An example is shown in Figure 2.
Since this space of managed objects to visualize is large,
management systems mostly uses a hierarchical approach.
A top-view presents a global overview of the managed
domain, and the operator can “click-in” on selected
symbols opening more detailed views on components
behind symbols. This approach has traditionally been
used in management systems. Figure 2 shows a typical
management console of Openview, a widely used system
management product by Hewlett-Packard.

3.4 Broadcast of Local Eligibility
A third approach from [9] for service assignment is based
on techniques used in the coordination of physical robots
[12]. In this case, we obtain a simple hierarchical
topology with potentially unlimited scalability.
We consider a cluster (subset) of servers with a
distinguished server called cluster head. Each member of
the cluster has the ability to broadcast a message to all
other members of the cluster. This can be done either
directly or via the cluster head. The placement of services
in this cluster is periodically re-evaluated by arbitration
between peer servers in so-called decision cycles.
Obviously, the scalability of the above approach is
limited. To improve it, a hierarchical approach is
proposed. Basically, the cluster heads at level k are
considered as “normal” members of a cluster of level k+1.
However, they compete only for those services, which
could not be installed in their own cluster (see step 5.
above). After a decision round in the cluster of level k+1,
these pending services are possibly moved to another
peer, which is a cluster head for a cluster of level k. In the
level k cluster, these services become part of the list of
services participating in normal decision cycles.
The cluster size is essential for the balance between
system responsiveness and flexibility. Identifying a
correct hierarchical structure can be done similarly to
clustering algorithms in sensor networks [13].

Figure 2: Top-view to the Network Presenter screen in
Openview showing a wide-area network.
Clicking into individual symbols will open more detailed
views on selected management components.

4.1 Topology Visualization with Configured
Layout Information
Both examples make use of configured layout
information. The information used for graphical layout on
console screens if typically created during as
customization during deployment of a management
system. Changes in the topology will cause changes in the
presentation information, undesirable in collaborative
environments where system changes are common.
Figure 3 shows the typical structure of a visualization
system used in management systems. During
customization, the management system is provided with
various models such as data model and topology model.
Those models are used by the management system during
operation. Some management systems also have a
capability of self-establishing topology models based on
probing a managed domain. This can often be found in

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

network management. Part of the management models is
the presentation layout model that tells the User Interface
(UI) component of the management system how to display
information on the screen. Presentation layout is static
information and created during customization. Current
information from the management system is merged with
the presentation layout information for the final layout
displayed on the console (the ‘+’ operator in Figure 3).
console
visualization
layout

+
presentation
layout
management - data model
- topology model
model

4.3 Hyperbolic Visualization
Hyperbolic visualization overcomes some of the
limitations of tree-based visualization techniques:
- seamless expansion of levels and detail in the focal
region and hiding detail at the edges,
- presentation of large numbers of elements and their
topology structure in a seamless continuous space
mapped on a sphere, and
- capability to render arbitrary graph topologies.
Specifically the last point overcomes a restriction of the
tree-based visualization methods discussed before. For
this reason, hyperbolic visualization became popular as
visualization technique for the web. Products exist for
visualizing web content by hyperbolic views. A good
introduction in the mathematical background of
hyperbolic visualization is provided in [6].

management
data

management system
Figure 3: Visual layout generation.
In web-based management systems, presentation layout
information and management data layout information are
merged by XSLT style sheet translations.

4.2 Topology Visualization without
Configured Layout Information
When topology is dynamic and changing frequently, static
configuration of topology information cannot be applied
as described. One of the choices is to dynamically create
and update topology models and using them for
visualization as shown before. This path can be taken
when topology is not changing too frequently and is not
departing too much from the pattern laid out initially.
Another path is using computed topology without a
preconfigured layout. Figure 4 shows an example of a
three-dimensional, generated, tree-based presentation
layout with hierarchical management information.
The tree-layout generator used in both examples derives a
graphical tree structure from hierarchical component
information. It renders elements at the same level of
hierarchy aequvidistantly on a circle with a radius
determined as function of level depth and maximum
number of elements for the level.
The advantage of tree-based visualization is that it can be
generated from current relationships of elements that exist
in an overly at different levels.

Figure 4: Three-dimensional visualization in Visigent [5].
These properties make hyperbolic views attractive for
visualizing non-hierarchical management overlays.
Mathematically, non-Euclidean geometries of topology
graphs can be modeled by the behavior of parallel lines:
in Euclidean space there is exactly one line passing
through a given point which is parallel to a given line, but
in hyperbolic geometry there are many. In this space, the
area of a circle grows exponentially with respect to its
radius, whereas in Euclidean space the area only grows
linearly. This property of hyperbolic distance enables to
visualize exponentially growing numbers of elements.
Figure 5 shows a visualization of a management overlay
graph. With navigating regions of interest over the focal
point, detail expands showing elements (blue boxes

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

indicate normal status). Regions farer away from the focal
point disappear seamlessly on the horizon of the sphere.

In general, with “virtual spaces” moving forward, it can
be anticipated that interfaces such as hyperbolic views
will be adopted as navigation and control instruments in
operating complex systems including management overlay
systems for collaborative environments.

References
[1] Foster, I., Kesselman, C., Nick, J. M., Tuecke, S.: The
Physiology of the Grid – An Open Grid Services
Architecture for Distributed Systems Integration, 2002.
[2] Stoica, I., Morris, R., Karger, D., Kaashoek, M. F.,
Balakrishnan, H.: Chord: A Scalable Peer-to-peer Lookup
Service for Internet Applications, Proceedings of ACM
SIGCOMM, San Diego, August 27-31, 2001.
[3] Milojicic, D., Kaleogeraki, V., Lukose, R., Nagaraja, K.,
Pruyne, J., Richard, B., Rollins, S., Xu, Z.: Peer-toPeer
Computing,
HP
Labs
Technical
Report,
http://lib.hpl.hp.com/techpubs/2002/HPL-2002-57.html.
[4] S. Ratnasamy, P. Francis, M. Handley, R. Karp, and S.
Shenker: A Scalable Content-Addressable Network,
SIGCOMM 2001, San Diego, August 27-31, 2001.

Figure 5: Hyperbolic view using h3 [7].
For the visualization shown in Figure 5 a tool called h3
[7] has been used. This tool uses element descriptions as
input and renders and displays the shown scene.
In general, hyperbolic visualization provides a novel
approach to visualizing information in system
management. Advantages are the computer-generated
layout avoiding the need for preconfigured layout
information, coverage of very large spaces of elements,
seamless expansion and fading out of detail by navigating
the scene over the focal point being an interesting
alternative to traditional “click-in” user interfaces, and
intuitive navigation. On the opposite side is a barrier of
using abstract spaces in system management.

5

Summary

We have presented the need for collaborative
environments and sharing resources and the impact and
challenges to management systems under which resources
are operated. Several algorithms a have been discussed
that can be used to establish management overlay
structures that span across multiple underlying
environments in a collaborative domain. Self-organizing
capability of management overlays is a property making
overlay structures different compared to traditional
management systems that rely on static information.
Experimental user interfaces have been built for these
requirements. Simple tree-based visualization has been
presented first before a more compelling approach based
on hyperbolic views has been presented. Advantages and
shortcomings of existing techniques have been discussed.

[5] Andrzejak, A., Graupner, S., Kotov, V., Trinks, H.: SelfOrganizing Control in Planetary-Scale Computing,
IEEE/ACM International Symposium on Cluster
Computing and the Grid (CCGrid 2002), pp 359-364,
Berlin, Germany, May 21-24, 2002.
[6] Munzner, T., Burchard, P.: Visualizing the Structure of
the World Wide Web in 3D Hyperbolic Space, special
issue of Computer Graphics, ACM SIGGRAPH, New
York, 1995, pp. 33-38, http://graphics.stanford.edu/
papers/webviz/htmlnosplit.
[7] Munzner, T.: H3: Laying Out Large Directed Graphs in
3D Hyperbolic Space, IEEE Symposium on Information
Visualization, Phoenix, AZ, October 20-21, 1997,
http://graphics.stanford.edu/papers/h3/.
[8] J. Kubiatowicz, D. Bindel, Y. Chen, S. Czerwinski, P.
Eaton, D. Geels, R. Gummadi, S. Rhea, H. Weatherspoon,
W. Weimer, C. Wells, and B. Zhao: OceanStore: An
Architecture for Global-Scale Persistent Storage,
ASPLOS ‘00, MA, USA, 2000.
[9] A. Andrzejak, S. Graupner, V. Kotov and H. Trinks:
Algorithms for Self-Organization and Adaptive Service
Placement in Dynamic Distributed Systems, HP Labs
Technical Report HPL-2002-259, 2002.
[10] J. Kleinberg: The Small-World Phenomenon: An
Algorithmic Perspective, Cornell Computer Science
Technical Report 99-1776, October 1999.
[11] A. Andrzejak and Z. Xu: Scalable, Efficient Range
Queries for Grid Information Services, P2P2002,
Linköping, Sweden, 5-7 September 2002.
[12] B. B. Werger, and M. Matariü: From Insect to Internet:
Situated Control for Networked Robot Teams, Annals of
Mathematics and Artificial Intelligence 31(4), 2000.
[13] D. Estrin, R. Govindan, J. Heidemann, and S. Kumar:
Next century challenges: Scalable coordination in sensor
networks, Proceedings of MOBICOM, August 1999.

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

