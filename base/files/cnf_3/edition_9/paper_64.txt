Treecube: Visualization Tool for Browsing 3D Multimedia Data

1

Yoichi Tanaka1, Yoshihiro Okada1,2 and Koichi Niijima1
Graduate School of Information Science and Electrical Engineering, Kyushu University
6-1 Kasuga-koen, Kasuga, Fukuoka 816-8580, JAPAN
{y-tanaka, okada, niijima}@i.kyushu-u.ac.jp
2
Intelligent Cooperation and Control, PRESTO, JST
Abstract

This paper proposes a new 3D visualization tool for
hierarchical information. A 2D visualization tool for
hierarchical information called treemap [1] has already
been proposed by Ben Shneiderman, et al. in 1992. In
general, hierarchical information is represented as a tree
structure. Treemap hierarchically lays out each node as a
bounding box, whose size is the same as the specific weight
or attribute value of the node. After the original treemap
algorithm called slice-and-dice, some extensions to it have
been proposed: squarified treemap [2], ordered treemap
[3] and strip treemap [4]. Furthermore, quantum treemap
[4] is a quantization version of these extensions. In this
paper, the authors propose a new 3D visualization tool for
hierarchical information called treecube that can be taken
as a 3D extension of treemap. Especially, this paper shows
its usefulness for browsing 3D multimedia data, i.e., 2D
images, 3D shape models, motion data, etc., originally
stored in a file system.
Key Words
Visualization, Multimedia, 3D CG, Browsing, Treecube

1. Introduction
Recent advances in hardware technologies have made it
possible to create 3D images in real time even using a
standard PC and 3D CG has become very common in
game and movie industries. As a result, many polygonal
models and motion data have been created and stored. 3D
CG creators and designers need any tools that help them
to easily find their required polygonal models and motion
data. This fact motivated us to propose a new 3D
visualization tool called treecube for browsing 3D
multimedia data originally stored in a file system.
Our treecube is derived from a 2D visualization tool
called treemap [1] proposed by Ben Shneiderman, et al in
1992.
Treemap visualizes hierarchical information.
Generally, hierarchical information is represented as a tree
structure. Treemap hierarchically lays out each node as a
bounding box, whose size is the same as the specific

weight or attribute value given to the node. Practically, a
lot of tree-structured data exist and the size of such data is
going to be greater and greater. Such a huge size of treestructured data needs efficient visualization tool. As a
result, the treemap has become one of the very useful
visualization tools. Furthermore, some extensions to the
original treemap called slice-and-dice have been proposed,
for instance, squarified treemap [2], ordered treemap [3]
and strip treemap [4]. Moreover, quantum treemap [4] is a
quantization version of these extensions. However, all of
them are 2D layout algorithms.
We developed 3D layout algorithms of treecube by
extending the 2D layout algorithms of treemap. To be
precise, in this paper, we have extended 2D versions of
layout algorithms of slice-and-dice treemap, ordered
treemap, strip treemap and quantum treemap to their 3D
counterparts. We have developed a 3D visualization tool
based on these 3D layout algorithms. This tool is useful
for browsing 3D multimedia data, i.e., 2D images, 3D
shape models, motion data etc., originally stored in a file
system because it can automatically lay out them in a
specified, restricted 3D space.
The remainder of this paper is organized as follows:
Section 2 explains layout algorithms of our treecube.
Section 3 extends these layout algorithms into quantum
version. Section 4 shows the actual visualization tool for
browsing 3D multimedia data.
Finally Section 5
concludes the paper.

2. Layout algorithms of treecube
2.1 Slice-and-dice treecube algorithm
The slice-and-dice treemap algorithm creates a layout where
the bounding box of each item (node/leaf) is located by the
simple linear order. However, the aspect ratio of each
bounding box does not satisfy the requirement that the aspect
ratio should be one for visual efficiency. In this slice-anddice treemap algorithm, a basic operation is applied to each
intermediate node. It lays out all the child nodes of this node.
Each of them is placed vertically if their level is an even

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

number, and horizontally if it is an odd number. In order to
extend the slice-and-dice treemap algorithm to 3D, we
modified it as described below.
Like the treemap algorithm, treecube algorithm also treats
tree structural data consisting of several nodes. At first, the
user has to fix a rectangular solid. In the slice-and-dice
treecube algorithm, each node is represented as a rectangular
solid whose space corresponds to the weight value. All the
child nodes of a parent node should be placed filling the
space of this parent node space. So the rectangular solid
space of a parent node is divided into the same number of
sub-rectangular solids as the number of child nodes of the
parent node. This is an essential operation. Its concrete
algorithm is as follows:

subdivision along
the x-axis direction
the y-axis direction

the z-axis direction

the x-axis direction

Fig. 1(a): Hierarchical information and the direction of the
subdivision operation in its each level.

1. The system subdivides the given rectangular solid space
along the direction determined by the level of the tree,
i.e., along x-direction if the level is i*3, along y-direction
if the level is i*3+1, and along z-direction if the level is
i*3+2, where i is a non-negative integer.

z-axis

P
x-axis

2. To lay out child nodes, the above process is applied to
their sub-bounding boxes recursively.

Q

Figure 1(a) and 1(b) show an example of hierarchical
information and its layout performed by the slice-and-dice
treecube algorithm respectively.

y-axis

Fig. 1(b): Slice-and-dice treecube layout of the hierarchical
information shown in Fig. 1(a).

Implementation
Figure 2 shows a screen shot of treecube visualization tool.
In this case, the tool visualizes file and subdirectory structure
of a certain directory of a file system using the slice-and-dice
treecube algorithm. This visualization tool is developed
using IntelligentBox, which is an interactive 3D graphics
software development system. Because of the availability of
transparent rendering mode in IntelligentBox, the user can
see inside as well as outside. To see the distribution of the
aspect ratios of bounding boxes in a treecube, each bounding
box has its own color determined by the aspect ratio. It is
calculated using the following equations.

a u 3.0 u w /( h  w  d ),
g a u 3.0 u h /( h  w  d ),
b a u 3.0 u d /( h  w  d ),
r

(1)

where r , g and b are the red, green and blue color
components respectively, of a bounding box, a is its weight
value, 3.0 is a heuristic value, w , h and d are measures of
its width, height and depth respectively.
These equations indicate that if w , h and d have almost
the same value, the color becomes gray, otherwise, the color
becomes red, green or blue. That is, the aspect ratio is close
to one, the color is close to gray. In the slice-and-dice
treecube layout of Figure 2, all bounding boxes are almost

Fig. 2: Layout example of hierarchical information by the
slice-and-dice treecube algorithm.

blue. In other word, their shapes are long towards the zdirection. These bounding boxes are so thin that it is
difficult to put 3D objects in them. This is the same negative
feature as that of the slice-and-dice treemap algorithm.

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

2.2 Ordered treecube algorithm
Main difference between the ordered treecube algorithm
and the ordered treemap algorithm is that a rectangular solid
(bounding box) is divided into five volumes as shown in
Figure 3. There are R1 , R 21 , R 2 2 and R3 as four subbounding boxes adjacent to R p . A rectangular solid R is
one of the inputs given to the ordered treecube algorithm,
which represents a parent node. Another input is an ordered
list of children of this parent node. First of all, a pivot, i.e.,
R p has to be determined. Similar to ordered treemap, there

R2-2

R2-1

Rp
R1

R3

Fig. 3: The pivot configuration of the ordered treecube
algorithm.

are three ways to choose a pivot as follows:
1. Pivot-by-size: choose a node with the largest weight,
2. Pivot-by-middle: choose a node located in the middle of a
child-node list,
3. Pivot-by-split-size: choose a node that will split the list
into approximately equal total weights.
After selecting R p using one of the three methods, the
remaining items of the list are assigned to four sub-bounding
boxes except R p . Then, the algorithm is applied to the each
sub-bounding box recursively.
Concrete Algorithm
The ordered treecube algorithm using pivot-by-size is
described below.
1. An item of the largest space in the list is chosen as pivot P.
2. If the width of R is greater than or equal to its height and
depth, then divide R into five rectangular solids, i.e.,
R p , R1 , R 21 , R 2 2 and R3 , as shown in Figure 3. If
the height is greater than the width and the depth, use the
same basic arrangement but rotate 90 degrees along the
diagonal line. If the depth is greater than the other two
dimensions, rotate -90 degrees.
3. Item P is placed in the sub-bounding box R p , whose
exact position will be determined by Step 4.
4. Distribute items of the list (except P) into four lists L1,
L2-1, L2-2, L3 laid out to R1 , R 21 , R 2 2 and R3
respectively. Let L1 consist of all items whose indices are
smaller than that of P in the ordering. Let L2-1, L2-2, and
L3 consist of all items whose indices are greater than that
of P, and let L2-1 consist of all items whose indices are
smaller than those of the items in L2-2, which are smaller
than those of the items in L3.

Fig. 4: Layout example of hierarchical information by the
ordered treecube algorithm.

5. Recursively lay out L1 in R1 , L2-1 in R 21 , L2-2 in
R 2 2 and L3 in R3 by applying step 1 through step 4.
Implementation
Figure 4 shows another screen shot of treecube
corresponding to the ordered treecube algorithm. This also
visualizes file and subdirectory structure of the same
directory shown in Figure 2. As you see, although there are
still some thin bounding boxes but most bounding boxes
have a bright color in comparison with those of Figure 2.
These are low aspect ratio bounding boxes. That is to say,
the ordered treecube algorithm is apt to generate more lowaspect ratio bounding boxes rather than the slice-and-dice
treecube algorithm. This means that the ordered treecube
algorithm is suitable for visualization of 3D multimedia data
rather than the slice-and-dice treecube algorithm.

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

current slice

x_node_box

new empty slice

x_strip

x_parent_box

strip

z_node_box

z_strip

y_slice
y_node_box

z_slice

y_strip

y_slice

y_parent_box

x_slice

z_slice

(c) bounding boxes in a strip

y_slice

z_slice
z_parent_box
x_slice

x_slice
new empty strip

current strip

(b) strip

(a) slice

Fig. 5: Strip treecube algorithm.

2.3 Strip treecube algorithm
In this subsection, we introduce another treecube
algorithm called strip treecube algorithm, which is a 3D
extension to the strip treemap algorithm. We describe
here the layout algorithm concerning the x-axis direction
only; since the y-axis and z-axis directions are treated
similarly. Before starting layout processes, the user has to
specify one rectangular solid named “R” and one list
consisting of weighted nodes of a tree regarded as
hierarchical information. In this case, the sum of the
weights of nodes should be the same as the volume of R.
At the first step, the system inserts a new rectangular solid
called “slice” into R. Its width and height values are the
same as those of R, but its depth is initially zero. After
that, system starts adding nodes into the slice one by one
to determine their bounding boxes. While adding one
node, the system calculates the depth value of the slice
using the following equations,
­
° x _ slice
°°
® y _ slice
°
° z _ slice
°¯

x _ parent _ box

(2)

y _ parent _ box
the amount volume of items in the slice
x _ slice u y _ slice

­ 1 j § volume _ of (ni ) ·½
¸¸¾ d z _ slice2
® ¦ ¨¨
j
z
slice
_
¹¿
¯ i 0©

(3)

where, ni is the i-the added node and j is the total
number of nodes added in the slice.
Here, we assume that if the equation (3) becomes true,
the bounding box of each node may become the cubic
shape, i.e., each aspect ratio becomes close to one. This
equation that stands for the x-y plane of each node in the
slice is calculated by the depth of the slice and the volume
of items. This is the main desired feature. Therefore,
when the equation (3) becomes true, the system stops
adding nodes. This is the first stage.

Fig. 6: Layout example of hierarchical information by the
strip treecube algorithm.

At the second stage, the system inserts new rectangular
solid called “strip”. Its width and depth are the same as
those of the slice, and its height is initially zero. Similar
to the case of the slice, the system starts adding the nodes
of the slice into the strip one by one. Since the volume of
all the added nodes into the strip must be the strip volume,
so while adding one node, the system calculates the height
value of the strip using the following equations,
­ x _ strip
°
°
® y _ strip
°
°¯ z _ strip

x _ slice
the amount volume of items in the strip
x _ slice u z _ slice
z _ slice

(4)

Moreover, the bounding box assigned to each added node
is prepared. Its depth and height are already determined
and its width is calculated based on its volume as follows:

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

­
° x _ node _ box
°°
® y _ node _ box
° z _ node _ box
°
°¯

the volume of the item
y _ strip u z _ strip
y _ strip
z _ strip

(5)

and the aspect ratio will become fixed. When the average
aspect ratio of all the nodes added into the strip is close to
one, the system stops the adding process. Then the
system adds a new empty strip, whose width and depth
are the same as those of the previous strip, and the system
lays it out to adjust the previous strip. The previous
process is also applied to the remaining nodes in the slice.
After all the nodes in the slice are laid out into the some
strips, the system also inserts new empty slice to add the
remaining nodes into it. The system recursively applies
this process. Finally you can obtain the strip treecube as
shown in Figure 6. There are many bounding boxes,
whose color is pale green or orange. As you seen and can
easily understand, the strip treecube algorithm generates
almost the same number of low-aspect ratio bounding
boxes as that of the ordered treecube algorithm.
Moreover, the strip treecube algorithm arranges given
data simply in a certain direction, so the order of data is
almost preserved in comparison with ordered treecube
layout.

3. Quantum treecube algorithm
3.1 Overview of quantization
As mentioned above, bounding boxes generated by the
treecube layout algorithms have arbitrary aspect ratios.
As extensions of treemaps, the quantum treemaps [4] are
proposed to visualize fixed size object such as 2D images
grouped together into meaningful categories. Similarly,
we can extend our treecubes to lay out classified 3D
objects, e.i., polygonal models and motion data.
Our quantum treecube algorithm generates the layout of
multiple fixed size 3D objects. For this, it is necessary to
change the size of the rectangular solid, which is
generated using basic treecube algorithms, i.e., slice-anddice, ordered and strip treecube algorithms, in order to
make its width, height and depth be integer multiples of
the given 3D object size. Bounding boxes have a grid of
cells, in each of which one fixed size 3D object is located.
Even if there are empty cells in the bounding boxes, all
objects can be laid out sufficiently in these bounding
boxes. However, if the volume of a given 3D space quite
differs from the total amount of the volumes of objects
laid out in the space, this is undesirable. That is, when
you want to lay out 50 objects, whose size is (1 u 1 u 1) ,
into a given bounding box, whose size is (100 u 100 u 100) ,
the bounding box after resizing becomes completely

different from the user specified shape. For avoiding this
problem, we use a relative ratio of the width, height and
depth of a given rectangular solid instead of their absolute
values. Then it is possible to keep off the drastic
deformation of a bounding box by making the numbers of
objects laid out along each of x-, y-, and z-direction fit to
the user specified size. This is done as follows.

3.2 Concrete quantization process
Required inputs for the quantum algorithms are the
number of objects to be laid out into a bounding box, the
substantial size of the objects, i.e., the absolute values of
their width, height and depth, and the user specified ratio
of the width, height, and depth of the bounding box. As
mentioned above, all objects have the same size and every
bounding box must contain a grid whose cells fit to basic
object size. It is possible to determine the grid by
calculating the number of laid out objects in each
direction. Those are i, j and k calculated based on the
following two conditions.

n d ijk

(6)

ix e : jy e : kz e # xb : y b : z b

where, n is the number of all objects to be laid out,
xe , y e and z e are the width, height and depth values of
a basic object, xb : y b : z b is user specified ratio of the
width, height and depth of a given 3D space. Then you
can obtain i, j and k value as follows.
i

ª x2 y z n º
«3 b e e2 »,
«« y b z b x e »»

j

ª y2x z n º
«3 b e e2 »,
«« x b z b y e »»

k

ª z 2 x y n º (7)
«3 b e e2 »
«« x b y b z e »»

As a result, the substantial size of the bounding box is
calculated by the following equations.

x

ix e , y

jy e , z

kz e

(8)

Finally, the system generates such a bounding box. All
bounding boxes located in a given rectangular solid will
be resized by the above process. Then all objects of
hierarchical information will be laid out into each
bounding box.
Implementation
The above quantization process is applicable to all
treecube algorithms, i.e., ordered, slice-and-dice and strip
algorithms. It is possible to extend such non-quantum
treecube algorithms to quantum versions by the following
modifications. A ratio of three sides of an internal
bonding box is calculated by the basic treecube algorithm,
using a ratio of its parent bounding box as a length.

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

text information as if he/she was located in the building of a
real museum.

5. Concluding remarks
This paper proposed a new 3D visualization tool for
hierarchical information called treecube. This is 3D
extension to 2D visualization tool called treemap [1]. There
have been some layout algorithms of treemap, i.e., sliceand-dice, ordered and strip treemap algorithms. We
extended these three algorithms into 3D versions.
Moreover, there have been quantization versions of treemap
algorithms. Then we also implemented quantization
versions of treecube algorithms. The treecube algorithms
automatically lay out 3D objects, which are originally
stored in a file system, in a specified, restricted 3D space.
This paper explained these layout algorithms of treecube
and showed a practical visualization tool developed using
IntelligentBox. We described that this tool is useful for
browsing 3D multimedia data.

Fig. 7: Quantum Strip Treecube algorithm.

If it is the bounding box of a leaf node, the substantial
length of the bounding box is calculated using the above
expression. The size of an internal bounding box is
altered, based on its aspect ratio, into the substantial
length which encloses its all child bounding boxes
perfectly, after the bounding boxes were calculated.
Finally, if the length of each rectangular solid is uneven,
they are equalized to the longest one in them.

4. Visualization
multimedia data

tool

for

browsing

3D

The visualization tool demonstrated in Figure 2, 4 and 6 is
also useful for browsing 3D multimedia data, i.e., 2D images,
3D shape models, motion data and so on because the
treecube algorithms automatically lay out 3D objects in a
specific, restricted 3D space. Figure 7 shows the same
visualization tool that visualizes 3D shape models and 2D
images in a common 3D space. In this case, the tool uses the
quantum strip treecube algorithm. As previously mentioned,
this tool is developed using IntelligentBox.
As
IntelligentBox is a 3D graphics software development system
and provides various functionalities as software components
called boxes, a file selection function for directory structure
information files and an input function for several
parameters of treecube layout algorithms are implemented as
composite boxes as shown in Figure 7. Using this
visualization tool, the user can browse 3D multimedia
objects and can find out his/her required 3D objects
interactively.
As future work, we will develop a virtual museum system.
It would enable the user to browse and search many kinds of
database records represented by a 3D shape model, color,

Acknowledgements
This work is partially supported by research grant of the
Okawa Foundation for Information and Telecommunications,
Japan.

References
[1] Shneiderman, B. (1992). Tree Visualization With
Treemaps: A 2-D Space-Filling Approach. ACM
Transactions on Graphics, 11(1), pp.92-99.
[2] Buls, M., Huizing, K., & van Wijk, J.J. (2000).
Squarified Treemaps. Proc. of Joint Eurographics and
IEEE TCVG Symposium on Visualization (TCVG
2000) IEEE Press, pp. 33-42.
[3] Shneiderman, B., & Wattenberg, M. (2001). Ordered
Treemap Layouts. Proc. of IEEE Information
Visualization (InfoVis 2001) IEEE Press, pp. 73-78. .
[4] Bederson, B.B, Shneiderman, B. & Wattenberg, M.
(2002). Ordered and Quantum Treemaps: Making
Effective Use of 2D Space to Display Hierarchies.
ACM Transactions on Graphics, 21(4), pp. 833-854.
[5] Okada, Y. and Tanaka, Y. (1995). IntelligentBox: A
Constructive Visual Software Development System for
Interactive 3D Graphic Applications, Proc. of
Computer Animation '95, IEEE Computer Society
Press, pp.114-125.

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

