Visualization of Routes in Design Process Planning
Dr P John Clarkson, Andres Melo and Dr Claudia Eckert
Engineering Design Centre, University of Cambridge, UK
Email - pjcl o@eng.cam.ac.uk
plan is greatly affected by the availability of appropriate
development resources, the quality of development team
co-operation and the level of technical and commercial
risk associated with the development.
Process planning is also dependent upon identifying
key attributes which characterize the process. These
include identification of
0
tasks which must be performed sequentially;

Abstract
Design process planning is essential f o r business
success. However, it is complex f o r all but the simplest
products. There is therefore a need f o r eflective support
f o r the design process planner to help them visualize and
assess alternative design process strategies.
This paper describes a new approach to design
process planning, known as sigriposting, which has the
potential to assist in the characterization, and hence
planning, of a particular design process, by identifying a
number of possible design routes.
The success of signposting is critically dependent
upon the planner’s ability CO visualize the emergent
process characteristics. A number of route visualization
techniques are therefore presented and discussed. The
preferred approach is then developed further in an
attempt to nzaximize its visualization potential.

tasks which may be performed in parallel;

0

processes which incur the lowest risk of overrun.
There is increasingly a need for effective planning
techniques which address these issues, balancing the
process characteristics with the available resources to
chose the best design route. As a result of the authors’
long association with GKN Westland Helicopters Ltd,
who have a particular need to capture their existing design
processes [ 2 ] , a new approach to design process capture
and planning has been developed. This approach, known
as signposting, enables complex design processes to be
described by a series of discrete tasks, which in turn may
be ordered to form an appropriate route through the
design process [3].
This paper begins with a description of signposting and
its output which, in common with many planning
techniques, can be presented in graphical form, thus
presenting a visualization challenge. The paper continues
by describing the authors’ attempts to rise to this
challenge and define an appropriate visual interface for
the planning tool. To this end it presents a case study of a
practical visualization problem and concludes by
proposing a novel approach to design process
visualization.

1. Introduction
Design process planning is an essential part of new
product development. Effective planning, along with the
skills of the development team, go a long way to
determine the eventual market success (or failure) of a
new product [ 11.
The planner has many objectives when defining a new
design process. Foremost amongst these is the desire to
identify the most efficient, and by definition effective,
process consistent with the design goals and available
resources. To succeed the planner needs to be aware of
constraints imposed on the planning process not only by
resources but also by the process itself. For example, there
may be some tasks which must be executed sequentially
whilst other may be executed in parallel. In addition, the
order of the tasks may effect the level of redesign
experienced during the process, since delayed execution
of tasks prone to failure may increase their negative
impact on the design.
Process planning for anything but the simplest product
is complex. The quality of the resultant plan is critically
dependent upon the certainty of the product design goals
and the skills of the planner in selecting and adapting
historical process data. In addition, the execution of the

2. Signposting the design process
The signposting model will now be described, starting
with the assumptions upon which the model is based. This
is followed by a description of the use of the model
representation, taking as an example a mechanical design
case study.

155
0-7695-0743-3/00
$10.000 2000 IEEE

task clusters which may be grouped to form larger
activities;
bottlenecks in the design process;

2.1. The Signposting Model

sequence will terminate when the design goals, defined in
terms of required confidences in key parameters, have
been met. Often more than one design route is possible
and guidance is then required to select the most
appropriate route.

The signposting model is based upon the assumption
that the design process may be thought of as a series of
tasks concerned with the estimation and iterative
refinement of key design and performance parameters.
In the initial stages of aerospace design, empirical
formulae and rough calculations are used to establish
estimates of key design parameters. Later, more exact
predictions may be derived using complex computational
tools andor physical tests on prototypes. Due to the
higher costs of these later analyses, they are usually only
performed when the designer has sufficient confidence in
the accuracy of key input parameters.
For example, the Refine geometry task is used to
increase the confidence in the geometry by ensuring that
the estimate is physically feasible. The potential change in
the confidence of the geometry is indicated by a
confidence mapping. In this case, an estimate of the
geometry may be considered to be a feasible estimate if
the stress concentration and bulk stress are less than the
limits prescribed (Fig. 1).

2.2. Signposting a mechanical design example
Signposting may be used at many levels in the design
process ranging from design of the whole product [ 5 ]
through the design of a assembly [3] to the design of a
generic component [ 6 ] . For the remainder of this paper the
later example will be used to illustrate the issues of design
route visualization.
Mechanical component design may be described in
simplistic terms as the definition of a geometry to carry a
given set of loads subject to constraints on the allowable
bulk stress within the component and on local stress
concentrations. However, even with this simple definition
if can be seen that these parameters are interdependent.
Consider, for example, that knowledge of the
component's geometry and applied loads are required to
calculate the bulk stress, which in turn is required to fully
define the geometry. This parametric interdependence is
typical of many real design problems.
The signposting model removes this problem by
defining more than one task to define each parameter.
Indeed, a number of tasks are required to estimate and
then iteratively refine the parameter values. Consistent
with this approach a set of twelve tasks can be identified
for mechanical component design which allow evaluation
of the component's geometry, loads, stress concentration
and bulk stress to low, medium and high levels of
confidence. Mappings for these tasks are shown in Fig. 2.

Fig. 1 The task confidence mapping
In the model, confidence is represented using three
discrete levels:
Low an initial un-proven design or performance
estimate;
Medium - a feasible design or performance estimate;
High a feasible design or performance estimate if
the resultant product performance satisfies the
design requirements.
The confidence mappings are derived from the textual
descriptions of the tasks and the expert's knowledge of its
appropriate use. They describe the maximum benefit to be
achieved by executing the task.
Given the available parameters and their associated
levels of confidence, it is possible to estimate the effect of
undertaking specific tasks from their associated
confidence mappings [4].The identification of available
tasks for any particular parameter state forms the basis of
the signposting technique. Repeated searches will then
reveal a sequence of tasks, i.e. a design route. The

Fig. 2 Selected mechanical design tasks

2.3. The mechanical design process
The design process for a mechanical component, as
derived from the confidence mappings of Fig. 2, is shown
in Fig. 3. Parameter states, in the form of confidence
tables, are shown interspersed with the tasks to be
executed.

156

(i) Minimum

(U) prescribed

Final
Final

~

state

~
(vi) Prrscribed
sequence

(VU) Maximum

confidence

Fig. 3 The signposted mechanical component design process
apparent with even a moderate number of design tasks.
This brings with it the challenge of visualizing these
routes prior to planning the design process.
Signposting can be used solely as a means, at each
point in the design process, to identify and select possible
design tasks. However, this limits its potential. Design
process planning is analogous to chess, good moves can
lead to early victory. In design, good planning can lead to
cost effective design and a good product. So what defines
good design process planning?
In order to answer this question it is necessary to know
something of the number and characteristics of all
possible design routes. Then, when presented with a
choice of tasks, the most appropriate may be chosen in the
light of its associated downstream process.
The raw data for a signposting model, as illustrated in
Fig. 2, provides few clues as to the complexity of the
route map which emerges (Fig. 3). A number of
visualization methods commonly used in design process
planning will now be discussed.

The following process characteristics for this particular
case should be noted:
The process starts with no confidence in any of the
parameters, i.e. minimum confidence.
The only task which may be attempted initially is
Estimate loads, and when this is complete the
loads will be known to a low level of confidence.
Another search for possible tasks now identifies
Sketch geometry as a candidate, resulting in the
geometry acquiring a low level of confidence.
A further search yields Analysis loads, Visual
check and Initial check as possible tasks leading to
increases in the confidence of the geometry, stress
concentration and bulk stress parameters
respectively.
This search and execution sequence continues in
the middle section of the design process where
there are many possible routes, each resulting in the
incremental
improvement
of
parameter
confidences.
The design process continues with the execution of
Simulate loads, Initial FE analysis or Stress
analysis leading to increases in the confidence of
the loads, stress concentration and bulk stress
parameters respectively.
The design is concluded by execution of the Final
FE analysis and Finalize geometry tasks.
All parameters will now have achieved a high level
of confidence, i.e. maximum confidence.
The task of finding the most appropriate route to
complete the design process has three parts: route
identification, route evaluation and route selection.
Analysis of the mechanical design example reveals twohundred and eight possible routes where, in this case, all
twelve tasks are required to complete the overall design.

3.1. Design structure matrices
A design process may be represented as an a priori task
execution sequence defined using knowledge of task precedence captured within a Design Structure Matrix (DSM)
[7]. In a DSM a task’s context is recorded in terms of the
tasks required to be completed before it may be started.
Fig. 4 shows design structure matrices for the
component design tasks identified in Fig. 2, where a tick
indicates that the task identified by the column must
precede the task identified by row. For example, task 6
must be preceded by tasks 2 and 5. The original matrix
shows the tasks in numerical order, while the re-ordered
matrix [8] shows rows and columns interchanged in a
successful attempt to form a lower-triangular matrix.
Although the re-ordered DSM reveals potential task
interdependence, it says little about the characteristics of
the resultant design process. The absence of ticks just
below the leading diagonal of the re-ordered matrix
identifies alternative task sequences, but it is difficult to
identify such routes or constraints on the placement of
individual tasks within the overall process.

3. Visualizing the design process
Signposting models for all but the smallest design
processes can produce many possible design routes. This
is the result of the combinatorial complexity which is

157

The complementary PERT chart, first used by he US
Navy in the 1950s, shows the dependencies between tasks.
It may be derived from and is an alternate graphical form
of the DSM. The PERT chart for the component design
process is shown in Fig. 6 based on same assumptions as
the Gantt chart. Again the chart provides some indication
of the allowable task sequences, but gives little indication
of allowable routes, i.e. complete task sequences. In
contrast to the Gantt chart, however, it is able to adapt to
accommodate rework in the design process.
Original matrix

Re-ordered matrix

Fig. 4 The design structure matrix

Gantt and PERT (Program Evaluation and Review
Technique) charts are traditionally used in process
planning to aid visualization of complex processes and to
assist in resource allocation [9]. The Gantt chart,
introduced by Henry Gantt in the early part of the 20"
century, uses horizontal bars against a timeline to
represent the execution of tasks. The earliest possible start
time and possible slack time may also be shown.
A Gantt chart for the component design process is
shown in Fig. 5 based on the assumption that all tasks will
be executed by a single designer and take equal time. It
clearly shows the initial (4, 1) and final (12, 3 ) task
sequences identified in Fig. 3. However, the ordering of
the intermediate tasks is obscured and the project manager
or designer would need to carefully reinterpret the chart
following execution of each task. The use of more realistic
task durations would be likely to add to the confusion.

Fig. 6 The PERT chart
In summary, the combination of the Gantt and PERT
charts, coupled with resource planning and critical path
analysis algorithms, remains a simple and often effective
means of process planning. However, the richness of Fig.
3 is lost, and with it a better understanding of the nature of
a particular design process.

3.3. Task sequence and parameter state diagrams
There remains a need for a method to aid visualization
of the individual design routes as part of the process of
task evaluation and selection. Fig. 3, which makes all
routes and decision points explicit, is useful in this
respect, but is overly complex and time consuming to
draw. An alternative is the task sequence diagram. This is
an expansion of the PERT diagram which allows multiple
instances of each task, therefore enabling tasks sequences
as well as task precedence to be shown. The aim is to
show all possible task sequences on one diagram.
A task sequence diagram for the component design
process is shown in Fig. 7. It represents all 208 possible
routes with the dark lines corresponding to the links
already shown in Fig. 3.

Task Earliest Possible
id
start
slack

4

Last
task

First
task

3.2. Gantt and PERT charts

b
Progress

Fig. 5 The Gantt chart
Although the chart provides some indication of the
allowable task sequences, the earliest start times imply a
particular design route is preferred where this is not
actually the case. In addition, the Gantt chart is inflexible
and unable to respond to the rework inevitable in any
design process.

Fig. 7 The task sequence diagrams

158

Even with this simple mechanical design example the
large number of routes poses a challenge in terms of
displaying all the alternatives. However, the routes
overlap and share a number of parameter states which may
be uniquely defined. Consider the expansion of the shaded
part of Fig. 7 shown in Fig. 8 (many tasks options have
been omitted for clarity).

much reduced complexity when compared to the task
sequence diagram. Therefore, It is proposed that the
parameter state network is used as a basis for visualizing
possible design process routes identified by the
signposting model.
The following sections discuss possible methods of
constructing parameter state networks, i.e. route maps of
the design process. Two such approaches are presented.
The first utilizes knowledge of possible routes to calculate
parameter state numbers which can then be used to define
the parameter state network. The second searches for task
alternatives as a means to identifies the parameter state
network directly.

4. Visualization from routes
Fig. 8 Parameter states

Potential design routes may be found using a number
of different search algorithms. Such searches yield a list of
routes defined by task sequence, from the parameter state
number sequences, and hence parameter state network,
can be derived. Since the number of possible routes can
be high, the emphasis in this section is on finding
algorithms which allow automated calculation of the
parameter state numbers. Three related algorithms are
now discussed.

The Analyze loads, Visual check and Initial check
tasks may be executed in any order resulting in the same
parameter confidences at the end of the process. Hence it
can be seen that the design routes diverge from the Sketch
geometry task and re-converge to perform the Refine
geometry, St Venant's or Stress analysis tasks.
The parameter confidences may therefore be used to
define parameter states. These may also be known as
design states since they define particular states of completion of the design. If a unique number can be assigned to
each such state, then a network of states and their
associated links, i.e. tasks, may be constructed (Fig. 9).

4.1. Two-bit parameter codes

A straightforward way of assigning unique values to
parameter states is to use a 2-bit code to represent the
confidence of each design parameter. The confidence is
then represented by a 2-bit code, where:
+
i
J
EInitial
Final
00 - no confidence;
Slate
state
01 - low confidence (an estimate);
Fig. 9 Parameter state network
10 - medium confidence (a feasible estimate);
11 - high confidence (the final value)
The task sequence diagram and parameter state
The parameter state can then be described as the
network are related. The former uses the tasks as nodes in
a network linked by parameter states, while the later uses
number formed by the concatenation of these parameter
the parameter states as nodes linked by tasks. Both are
confidence codes. For the mechanical design example the
derived from the representation used in Fig. 3, but the
resultant state is then an 8-bit number (Fig. IO).
parameter state network will always be simpler in form.
B
L
Parameter

Iv % hj ha h? h ha

3.4. Summary of common methods

tXt

state

number

In summary, the design structure matrix and PERT
chart are very useful for capturing task dependencies, but
limited in their ability to assist visualization of possible
design routes. Similarly, the Gantt chart is useful for
identifying the time available for task execution, but
misleading in its suggestion of a potential process.
Conversely, the task sequence diagram shows all possible
routes, but appears too complex. Finally, the parameter
state network also identifies all possible routes, but with

Fig. 10 Parameter states using an 8-bit code

159

Estimate loads (task 4) will set bit b3. Hence, the new
parameter state number is related to the current state and
the task executed. These parameter state number
increments are illustrated in Fig. 12 and the resultant
process routes are shown in Fig. 13. This formula is
particularly easy to evaluate for design routes represented
by a sequence of task identifiers.

These parameter state numbers may be plotted against
a time axis with each increment representing the execution
of a single design step. Fig. 11 shows the resultant
network obtained by plotting all possible routes for the
mechanical design example. The nodes represent unique
parameter states, linked by specific tasks. Note that all
links have a positive gradient, but that this gradient is no
measure of absolute progress.

New parameter state = Current parameter state

+
0

1

2

3

4

5

6

7

8

9 1 0 1 1 1 2

+

t(c"rrm'~k
n"mhr'-l

Fig. 12 Parameter states using a 12-bit code

Design Steps

The topology remains the same as for the 8-bit code,
but the gradient of a link now uniquely identifies the task
represented by the link. However, a new problem
emerges. The parameter states in the lower portion of the
figure are difficult to distinguish.

Fig. 11 Design routes using an 8-bit code
There are thirty-one distinct parameter states or nodes,
measured in terms of parameter confidence, in a network
connected by fifty-three links. It is interesting to note that
the number of nodes is less than the maximum possible
(256) since not all the states can be reached by allowable
task sequences.
There is, however, a drawback associated with using a
2-bit parameter code. The parallel links in Fig. 11
represent the execution of tasks specific to a particular
parameter but do not uniquely identify a particular task.
This would make it difficult for the planner or designer to
identify a particular route from the map, or identify the
range of steps over which a particular task could be
performed. This problem may be overcome using a 3-bit
parameter code.

4096

;

e 1
-

3

I

3072

2048

.v)
I

Y

I
1024

0
0

1

2

3

4

5

6

7

8

9 1 0 1 1 1 2

Design Steps

4.2. Three-bit parameter codes

Fig. 13 Design routes using a 12-bit code
The parameter confidences may alternatively be
represented by a 3-bit code, using 000, 001, 011 and 111.
Again the parameter state number is defined as the
number formed by the concatenation of these parameter
confidence codes. For the mechanical design example the
resultant state is then a 12-bit number (Fig. 12).
There are now many more redundant state codes.
However, the gradient of each link is uniquely associated
with the task represented by the link. The added advantage
is that the parameter state may now also be calculated
from knowledge of the tasks executed. The successful
completion of task t, can be used as a trigger to set bit b,.,
of the parameter state number, for example, execution of

This should come as no great surprise since the
gradient of the links ranges from 2' to 2" in multiples of
two. Alternative tasks which differ little in number, e.g.
tasks 6 and 7, will then be difficult to distinguish,
representing a difference of only 32 points on a scale of
4096. The following section describes one possible
stretching function which attempts to resolve this problem.

4.3. A modified three-bit parameter code
The network derived using Equation 2 may be
modified to accentuate the different parameter states.

160

nodes and then linking them as appropriate. This allows
for a wider variety of algorithms to be employed, three of
which are now discussed.

There are many possible modifying functions, but all
essentially need to stretch the network. The result of one
such stretching operation is shown in Fig. 14.
The new network is not a complete success. Whilst the
parameter states have been partially separated, the
gradients of each link have also been modified such that
repeated tasks no longer share the same slope. This is
likely to be true of all stretching functions.

5.1 Manually drawn networks
The parameter network may be drawn manually (Fig.
15). Here the separation of states is easily achievable, but
the unique identification of tasks may be lost.

3

(I)

$

e2

0

1

2

3

4

5 6 7
Design Steps

8

9

1011

12
0

Fig. 14 A stretched 12-bit process network

1

2

3

4

5

6 7 8 9
Design Steps

1

0

1

1

1

2

Fig. 15 A hand-crafted process network

4.4. Summary.of visualization from routes

In principle, manually drawn networks could result in
adequate separation of the states whilst maintaining
identification of the tasks. However, this is not an intuitive
process and a more methodical approach to network
construction is required.

In summary, parameter state diagrams can be derived
automatically from knowledge of possible task sequences.
The three-bit parameter code method enables a unique
definition of parameter states, coupled by lines whose
gradient identifies the linking tasks. In this later respect it
provides more insight into the design process than the
two-bit code or modified three-bit code methods.
However, adequate parameter state separation cannot be
guaranteed with any of these codes.
An added benefit of this approach is the fact that a
network can be derived from partial or complete data. In
the former case the network may be incomplete, but will
still allow some comparison of routes. Note, however, that
even partial data may reveal additional routes. For
example, no more than eleven carefully chosen routes are
required to define the whole network for the mechanical
component design process, which then describes 208
potential design routes.

5.2. A tangent method
The three-bit parameter code method provided a
unique definition of parameter states, coupled by lines
whose gradient identified the linking tasks. The tangent
method retains these properties by associating a unique
gradient to each task, in turn defining unique parameter
states. Note that the converse would not necessarily be
true, as is seen in the two-bit parameter code example.
The tangent method allocates gradients to all the tasks
such that the angles between adjacent gradients are equal.
The method attempts to maximize the separation of states
by allocating gradients with the greatest possible angular
separation to tasks emanating from states which allow
greatest process divergence.
Consider the network for the mechanical component
design example shown in Fig. 16, the states with three
outgoing links have been allocated the most divergent
angles (such as at steps 2 , 5 and 7).
The tangent method produces a network with well
separated states and uniquely identified tasks. In addition,
prismatic structures emerge in the network which identify
groups of tasks (for example, between steps 2 and 5)
which may be done in any order or in parallel.

5. Visualization from networks
Parameter state diagrams may also be constructed from
knowledge of the parameter state network. This may be
derived from an analysis of all possible design routes or
from a search directed specifically to identify the
parameter states and associated linking tasks.
The process of constructing the parameter state
diagram is now one of placing the parameter states or

161

5.4. Summary of visualization from networks

0

1

2

3

4

5
6
7
Design Steps

8

There are a number of network construction methods,
based on knowledge of possible parameter states and their
associated linking tasks, which provide adequate
separation of the parameter states in addition to lines
whose gradients identify the linking tasks. This is in
contrast to the route-based methods where adequate
parameter state separation could not be guaranteed.
The tangent method, in particular, produces a useful
diagram, which not only has the properties described
above, but also enables identification of task groups. This
later capability, although present in the three-bit parameter
code and unitary vector methods, is particularly evident
when using the tangent method. A further benefit which
arises from using a network description is the reduction in
data required to define the network.
In the case of the mechanical component design
example, the network is defined by thirty-one parameter
states connected by fifty-three links as opposed to 208
task sequences of twelve tasks each.

9 1 0 1 1 1 2

Fig. 16 A tangent method network

5.3. A unitary vector method
The unitary vector method is a variant of the tangent
method where all links now have the same length and
angular separation is again used to try and ensure state
separation. Fig. 17 shows such a network for the
mechanical component design example where gradients
again identify a particular task as in Fig. 11. Note that the
horizontal scale is now arbitrary but shown for
convenience with the same scale as in previous figures.

6. Design process characterization
The focus so far has been on identifying potential
methods for visualizing a network of alternative design
process routes with varied success. Of those methods
discussed the tangent method appears to provide the most
clarity, particularly with regard to identifying serial and
parallel tasks. However, much further investigation is
required to substantiate this view. It remains to discuss
methods appropriate for identifying task clusters,
bottlenecks and low risk routes.

6.1. Risk assessment and route selection

0

1

2

3

4

5
6 7
Design Steps

8

Signposting enables the identification of many possible
design routes. The challenge to the designer is to choose
the most appropriate, and in many cases the lowest risk,
route. However, all the networks presented so far provide
no insights as far as design process risk and route
selection are concerned. It is therefore necessary to take a
different approach to visualization of risk.
There are many risk assessment methods available.
However, for the purpose of this discussion a risk measure
based on cost will be used. This allows the likely cost of
project overrun, in percentage terms, to be calculated at
each stage of the design process (Fig. 18). Details of this
approach are discussed in Clarkson et al. [6].
This risk may be plotted for all design routes. This
provides a good view of the spread of risk between
different routes. However, individual route identification
is not directly possible. Some addition means are required
to select the lowest risk routes or to compare the risk of
particular routes.

9 1 0 1 1 1 2

Fig. 17 A unitary vector diagram
State separation is still achieved, although it is at times
less apparent than in than in the tangent method. For
example, the nodes in the lower center part of the network
between steps 5 and 6 are much closer than with the
tangent method.
The diagram also has a much changed aspect ratio, an
artifact of the need to use scales which maintain the length
of the unitary vectors. All previous diagrams have been
stretched vertically to aid visibility. The prismatic
structures remain. However, there is an apparent loss of
clarity, in comparison to the tangent method, since the
parameter states are no longer vertically aligned.

162

60

routes from any point in the network to the end of the
process. This later point allows recovery from design
failure to follow the lowest risk routes.

50
40
-Y

30

8

4
.$ 20

04

I

I

;

1

2

3

~

4

I

!

I

I

I

5

6

7

8

9

;

!

\!
Y

101112

Design steps

Fig. 18 Absolute risk assessment
An alternative is to derive a risk network whose nodes
represent the same nodes as on the parameter state
diagram, but those values associated with each node are
now a measure of risk (Fig. 19). Tasks are represented by
individual links at each step of the process and the lowest
gradient link emerging from a node now represents the
lowest risk route.
6o
50

0

1

2

3

4

5

6

7

8

9

1

0

1

1

1

2

Design Steps

Fig. 20 Lowest risk route selection

3
t
I

However, the diagram gives no direct indication of the
relative risk of potential routes which, as can be seen from
Fig. 19, can be small. The use of color could potentially
add further information, conveying the subtlety of risk
variation between routes.
There is much further work to be done to develop
robust methods to calculate project risk. However, there
would appear to be methods which could aid the
visualization of such risk, independent of the risk measure
used.

6.2. Bottlenecks and clusters
0

1

2

3

4

5

6

7

8

9

1

0

1

1

1

It was suggested in the introduction to this paper that
process planning was dependent upon identifying key
attributes which characterized the process. These included
sequential tasks; parallel tasks; task clusters; and
bottlenecks in the design process. The first two of these
have already been evident in the mechanical component
design example.
In order to explore the possibility of identifying the
other characteristics a more complex case study is
required. Therefore an extended mechanical design
process has been constructed which comprises twentyseven tasks and nine parameters. The tangent diagram for
this process is shown in Fig. 21. A few characteristics of
this process, marked in the figure, should be noted:
(a) sequential tasks which must be executed in the order
shown;
(b) parallel tasks which may be executed in any order or
concurrently;
(c) task clusters, a special case of (b), where there many
parallel tasks;
(d) bottleneck tasks where one or more tasks must be
performed at a particular stage of the process.

2

Design Steps

Fig. 19 Relative risk assessment
The risk network and route network diagrams are
therefore isomorphic. Hence, route identification and
comparison is now possible using the risk network
diagram if the identity of the nodes can be made clear.
Again an interactive link with the tangent diagram would
be particularly useful. The risk network has the added
advantage that it can also be used to assess the relative
risk of partial routes. This also enables risk assessment to
continue if the designer chooses to change routes during
the design process.
Finally, it is possible to combine some elements of the
risk network diagram (Fig. 19) with the tangent diagram
(Fig. 16). Consider, for example, Fig. 20 which shows a
tangent diagram modified to show (with thicker lines) the
lowest risk route emerging from each node. The modified
network clearly identifies the lowest risk design process
routes, of which there are six, for the mechanical
component example. In addition, it shows the lowest risk

163

0

1

2

3

4

5

6

7

8

9

10

11 12

13

14

15 16

17

18

19 20

21

22

23 24

25

26

27

Design Steps

Fig. 21 A tangent method network for a 27-task model of mechanical component design
The extended mechanical design process is therefore
characterized by an initial serial sequence (a) followed by
a short parallel sequence (b). This is then followed by two
large task clusters (c), separated by a bottleneck (d), and
concluded by a final short parallel sequence (b).
These characteristics could have major implications for
the success of the process. In particular, it is important to
understand the nature of the bottleneck and whether it
represents a particular risk to the project. The task clusters
also highlight potential for extensive parallel working and
the need for resources to be available concurrently.

Acknowledgments
We are grateful to the UK Engineering and Physical
Sciences Research Council (EPSRC, grants GWM14357
and GlUM23236) for their support of this project.

References
[I] Mass N.J. and Berkson B., “Going slow to go fast,” The
McKinsey Quarterly, 4: 19-29, 1995.

7. Conclusions

[2] Hamilton J.R., Clarkson P.J. and Burgess S., “The
modelling of design knowledge for computer supported
aerospace design,” Proceedings of the 1 l r h International
Conference on Engineering Design, Tampere 1997.

Process planning is dependent upon identifying key
attributes which characterize the process. These include
identification of:
tasks which must be performed sequentially;

131 Clarkson P.J. and Hamilton J.R., ‘“Signposting’, a
parameter-driven task-based model of the design process,”
Research in Engineering Design, 2000.

[4] Clarkson, P.J. and Hamilton, J.R., “‘Signposting’ the
design process,” Proceedings of the 12Ih International
Conference on Engineering Design, Munich 1999.

tasks which may be performed in parallel;
0

task clusters which may be grouped to form larger
activities;
bottlenecks in the design process;

[5] Jarrett J.P. and Clarkson P.J., “The surge-stagnate model
for complex design,” Proceedings of the Engineering
Design Conference, London 2000.

processes which incur the lowest risk of overrun.

[6] Clarkson P.J., Melo, A.F. and Connor A.M.,
“Signposting for design process improvement, a dynamic
approach to design process planning,” Artificial Intelligence
in Design, Worcester 2000.

The signposting technique presented in this paper has
the potential to accentuate these features. However, it will
only be effective in doing so if an appropriate
visualization method is used to present its output.
A number of different methods have been explored,
ranging from manually drawn diagrams to automatically
generated networks. Of these, the tangent diagram, which
is a form of parameter state network, would appear to be
the most effective. It can be used to aid visualization of all
the design process attributes listed above.
However, much further research is now required to
ascertain whether this will generally be the case. In
addition, extensive user trials are required to confirm the
benefits of signposting, in conjunction with the tangent
diagram, for design process planning.

[7] Steward D.V., “The Design Structure System: A Method
for Managing the Design of Complex Systems,” IEEE
Transactions on Engineering Management, 28(3): 7 1-74,
1981.

[SI Eppinger S.D., Whitney D.E., Smith R.P. and Gebala
D.A., “A Model-Based Method for Organizing Tasks in
Product Development,” Research in Engineering Design 6:
1-13, 1994.
[9] Krueckeberg D.A. and Silvers A.L., “Program Scheduling,” in Urban Planning Analysis: Methods and Models,
John Wiley, 231-255, 1974.

164

