Fur and Hair: practical modeling and rendering techniques.
A. Iones*, A.Kruph**, S. Volodarsky**, S. Zhukov**
*Advanced Productions Inc.
iones @apigames.com www .apigames.com
**CREAT Studio
{ antonk, slavav, s.zhukov} @creatstudio.com ww w .creatstudio.com
Abstract
Modelingfur and hair remains one of the hottest subjects
in modem computer graphics. Although some promising
techniques to model and renderfurry and hairy objects were
developed in the recent past, and several commercialpackages
are available, the problem still remains very challenging. The
speaker will present afresh practical technique to model and
render fur and hairs, that is applicable for actual animation
production process. This will be demonstrated using images
and videos taken from the real, commercially-created
animations.
Keywords: hair, fur, modeling techniques, rendering,
simulation, collision of hairs.

1. Introduction
Computer graphics is now a mature industry, and many
modeling, rendering, animation and other techniqueshavebeen
developed in order to produce believable images and
animations on TV screens. Still, many important problems are
not yet solved, or the solutions are far from being easy to
implement for actual production purposes.
Especiallyproblematic is the task of representing humans
and animals. Their furry and hairy surfaces are among themost
difficult to reproduce. Fur and hair have many fuzzy properties
that are difficult to qualify and quantify, such as flexibility,
softness, and translucency, not to mention the hair dynamics
and overall hairstyle. Besides, the abundance of indvidual hair
strands makes the problems even more difficult - a typical
person’s head has 100,000to 150,000 hairs. Finally, small scale
of individual hair’s width poses significant aliasing problem.
Obviously, it’s beyond human’s capabilitiesto manipulate
such a great number of entities in a software package
individually just by hand. Fortunately, computer graphics
researchers and practitioners have come up with numerous
techniques that help to resolve this problem by allowing
manipulating with a limited set of parameters. Thus, these very
complex natural phenomena can be simulated.
Although some of the developed techniques are already
being used for production rendering, most of the developed
techniques are still very complicated. The first fully computergenerated film,Pixar’s Toy Story, used volume shaders [131to
reproduce human hair. The approach worked, but it took 9
months to write the code. And this is probably the reason why
most of the best developed techniques are implemented only as

2. Previouswork
2.1. Research results
There are four fundamental problems that need to be
resolved in order to produce realistic characters with fur and/or
hair: hair modeling and growth, hair motion, collision detection
and rendering [lo]. The researchers addressed each of these
problems, and a few integrated solutions were developed.
One of the first impressive results of a more limited
problem of fur modeling and rendering was achieved by Kajiya
and Kay [2]. They used a generalization of 3D texturing to
simulate hairs. Perlin and Hoffert [I41used 3D-noise based
volume densities to render soft furry surfaces. Several
researchers used a similar approach based on volumetric
textures since that time [3][4][5].
Another hair rendering method is based on polygonal
representation of hairs, and the use of Z-buffering for hidden
surface removal. Csuri et al. [6] were among the first to use it to
render fur-like volumes. Their approach was based on explicit
hair representation, and Z-buffer was used for hidden surface
removal. Excellent results were obtained by Mdler [7][8], and

145
0-7695-0743-3100
$10.000 2000 IEEE

proprietary internal software tools by special effects production
companies.
Still, some off-the-shelf packages are available on the
market right now. Most of them, though, being capable to
properly handle fur, fail to produce good hairs. Modeling hair is
still a relatively young field, and available solutions have not
reached their full potential yet.
Therefore, to satisfy our own production needs we had to
develop our own algorithms to generate and render hairs (and
fur). We came up with a set of techniques and algorithms that
are currently implemented in Hair Designer tool, developed at
CFEAT Studio. Our goal was to deliver an intuitive userftiendly interface to generate hairs, and to be able to smoothly
integrate the rendering results into overall production pipeline,
complementing our production modeling and rendering
packages (Softimage and mental ray). Our hair and fur
technology is now widely used in most challenging Creat
Studo’s projects such as intros, outros and cut scenes for
Activision’s games WuTang, Shanghai Second Dinasty, X Men, and others.
The detailed dmussion of the overall technology
definitely falls beyond the scope of this article, so we briefly
discuss the principal aspects of it, and elaborate more on of the
key elements of it -hair growth and interpolation techniques.

very few tools (practically none from those we tried)
support global hairstyles, including such complex effects as
parting; therefore it’s very hard to achieve acceptablelooking images for people with specific hairstyles;
unfortunately, many of the tools have complex user
interfaces, and their control approaches are far from being
intuitive;
some of the tools allow hair growing only from spline
surfaces (Nordisk) or from surfaces with well-defined UV
coordinates; such surfaces allow specifylng various hair
parameters via textures mapped onto these surfaces, but
such an approach is rather limited to be used in actual
production.
very few of the above mentioned tools have good dynamic
simulation module;
most of the tools don’t handle well the hair growth from
skin-animated surfaces (that’s very important for
mustaches, eyelashes, eyebrows and beard).
Overall, in order to satisfy our production needs we could
not use any of the off-the-shelf tools and we had to come with
our own technology, which is implemented in our Hair
Designer tool. Probably, the main reason for doing this was that
simulating hair is an extremely non-trivial matter, and that’s
why there’s no single product on the market that solves every
problem, especially if you consider the integration of hair
rendering results into overall production pipeline.

by Watanabe and Suenaga [9] who represented hairs as
connected segments of triangular prisms.
Probably the first integrated solution to hair processing,
that included hair modeling, dynamics and rendering was
described in [lo]. The authors expliciflyrepresentedhairs using
3-dimensional curved cylinders (composed of straight
cylindrical segments). The hair dynamics model was based on
simple differential equations of one-dmensional angular
moments, previously described in [ 121. This allowed to account
for collision and self-collision. Finally, the authors developed
an illumination model (described in details in [12]. The
developed framework was used top produce an award-winning
film Marilyn Monroe in Montreal. Overall, the model was
pioneering, and it was very successful. Still, we consider it is
not easy-teimplement and control for production purposes
(especially the dynamics simulation).

2.2. Available off-the-shelf tools
To satisfy increasing production needs, various
algorithmic approaches were tackled to develop efficient and
productive techniques. Many leading animation production
companies developed specialized proprietary software tools
that facilitatethe handling of this intrinsicallycomplex task. In
a few recent years several feature films were produced that
make use of the proprietary technology. The best examples of
these are ILM’s J u m j i , DigitalDomain’s Panda Picnic,
Dreamquest’s Mighty Joe Young, Sony Pictures Imageworks’
Stuart Little, Disney’s Dinosaur, and so on.
Recently, hair and fur modeling and rendering packages
reached the market. These packages include Digimation’s
Shag: Hair and Shag: Fur, Glassworks’ FurSWer, Phoenix
Tools’ Fur KIT for Softhage, Maya Fur plug-in, Nordisk’s
Fur Designer, Joe Alter’s “Shave and Cut”, and so on. In spite
of the seemingly abundance of these tools, very few of them
address the problem of hair handling. Indeed, fur and hair
natural properties seem to be similar, but actually they are quite
different. It turns out that at the moment fur generation
techniques much better developed and described, while the
problem of long hair simulation supporting hairstyles,
animation, collision with head, obstacles and self-collision
between individual strands, and rendering, is far from being
trivial and well-researched. From our practical experience,
most of the above-mentioned tools do pretty well while
handling fur and, similarly, short hairs, but are fairly difficult
(with the exception of Shag: Hair) to control while dealing
with long hairs.

3. Hair Designer approach
3.1. Problem statement
As stated above, any fur and hair production tool should
address the following major problems:
- modeling hairs using a certain “hair growing” algorithm,
that would need as little modeler’s control over individual
hairs as possible. There should be means available to
control the whole hairstyle.
- hair motion.
- hair dynamics and collision simulation.
- hair rendering (using hair illumination model).
In the following sections we briefly discuss the main
challenges that we had to address for each of these tasks. A
complete discussion of these problems is beyond the scope of
this article, so we just classify the problems and give the brief
description of the solution.Also, we discuss with greater d d s
one of the most fundamental issues - hair growth.

2.3. Motivation for Hair Designer development

3.2. Hair representation, modeling and growth

After a detailed analysis of the available tools we realized
that none of them is really suitable for our production needs.
The main problems of the off-the-shelf tools are:
- most of the tools are oriented on handling fur, while we
needed a general solution that would be applicable to
reproduce hair, and other furry materials (such as felt);
- being fur-oriented, the tools usually give a modeler little
control over the hair kection, especially far away from the
emitting point;

As the first step of hair growth, we define the surfaces that
would serve as hair emitters. In Hair Designer, we can grow
hairs both from NURBS and polygonal surfaces. A single
model might have several areas of hair growth, some of them
might even overlap. Each hair is represented as a linear spline
with any number of control points. The exact number of points
is determined dependmg on the complexity of the hair shape,
and its length.
Although to achieve good visuals we don’t need to use as
many hairs as they exist on real heads and other surfaces, the

146

number of individual strandsis still rather large’. Thereforeone
of the main challenges of a hair modeling tool is to provide an
intuitive user-friendly interface that would enable creating
various types of hairstyles by manipulation of a very limited
number of parameters.

Control hairs and interpolation. Similarly to ILM’s hair
simulation software [l], our control scheme is based on
manipulation of a limited set of control hairs.
Control hairs represent the shape of certain strands in
different parts of the hairy surface. A modeler needs to create
only these control hairs and the rest of the hairs is grown
automatically with the use of specific interpolation techniques.
The principal shape of the hairstyle is defined with the use of
these control splines, and then various “global effects” can be
applied to change certain parameters, such as wavy-ness, curlyness, length dispersion among individual strands, etc.

of hair modeling pipeline. Bad interpolation leads to the need to
create an abundance of control hairs, the influence of which
onto different parts of the hairstyle can be rather confusing.
Also, this causes incoherence between frames in dynamic
simulation, and various aliasing problems. In contrast, good
interpolation scheme may help to address such difficult
problems such as avoiding intersection between hairs by
making sure control hairs don’t intersect. The interpolation
problem is discussed with more details in Section 4.

Hair effects. Once the basic hairstyle is created using
interpolated control hairs, a number of useful effects can be
applied to them to change various parameters. In Hair
Designer, we implemented the following major effects:
- curls - grouping hairs to simulate hair clumping;
- tension - within curls, and tension to the given control
hairs;
- length variation - change the lengths of individual hair
strands;
- wavyness - controls how wavy hairs are related to just
interpolated ones;
Two last effects are achieved by applying procedural 3D
noises [15] to modify certain hair parameters. Note, that
wavyness is a very important effect for overall hair visual.
Without it hairs looks too flat, and an important trait of specular
highlight changes is missed.

3.3. Hairdynamics
Figure 1. Control hairs.

H ~ dynamics
K
simulation algorithms present a significant
challenge. The dynamics of each hair is very complex, and
proper simulation of hair motion should account for collision
with the surfaces, other hairs, character motion and various
forces such as gravity and wind. Besides, the algorithms should
handle thousands of individual strands. It becomes impractical
to design the algorithms that would deal with individual hairs,
so we have to come up with models to approximate them.
In Hair Designer, we implemented a dynamics model that
we apply to control hairs only. Lets assume that control hairs in
their default position, character animation,collision objects and
wind and gravity parameters are given. In HairDesigner, the
dynamics simulation computes the shape of the control hairs,
and then the other hairs are interpolated from the control ones.
The hairs are actually re-grown on each frame of animation, so
solid interpolation scheme is mandatory to avoid aliasing.
The generic problem of forward dynamics of a set of rigid
bodies connected by joints is far from being trivial. The
problem can be solved using Featherstone’s algorithm [16],but
many researches [ 18][20] point out that this algorithm remains
confusing and is difficult to implement.
In our simulation, we solve a simplified version of this
generic problem. That is, hairs are represented as linked joints
(line segments) with point masses at each end of a joint. Each
joint has two degrees of freedom, and distances between joints
remain unchanged during simulation. On each frame of
animation hair position can be computed as a solution of a
system of linear equations with three-&agonal matrix, which is
resolved at each step of simulation. So the simulation requires
linear time (in terms of the number of joints in a hair) per
frame. In spite of its simplicity, this model allows us to define
such physical parameters as joint density, stiffness, internal

Once a few control hairs are created, preliminary hairs can
be grown. Then, a modeler can either change the shape of the
existing control hairs, or add a few more to achieve finer
control over certain parts of hairs. This approach is very
intuitive. Once a preliminary hairstyle is created (for which
usually it’s enough to use just a few control hairs), a modeler
identifies the areas that don’t have acceptable shape, creates
extra control hairs and adjusts their shape. These new control
hairs will affect neighbor areas of hair growth, leaving the rest
of hairs untouched.
Clearly, such an approach relies on the power of modem
modeling packages to manipulate with 3D splines.
A real hairstylist uses scissors, combs and cosmetics to
impart the shape of hairs. Note that in our approach we don’t
make use of any “virtual scissors” or “combs” (such as those
used in FiberFactory2 tool), although something in this flavor
would seem natural from the first glance. Actually, after a
series of experiments we found that these concepts are too
vague and difficult to control by an end-user. Unlike, individual
control splines can be easily modeled, and their influence on
overall hairstyle is fairly obvious. From this point of view
control splines technique seems to be very intuitive. For
example, to define a very curly hairstyle one may just draw a
control spline of a ringlet shape and grow hairs just from it.

Interpolation problem. Proper interpolation scheme is
an extremely involved problem, and it’s a very important part

’

In our tests we found out that in order to create a decent head we need to use
approximately 10,OOO-20,OOOhairs - about 10%of the actual number of hairs on
real humans; for mustaches this number is about 3,000,for eyebrows - 1,500.

147

subpixel Z-buffer used hair sorting by distance with subsequent
pixel blending.
Shadows and especially self-shadows are very important
in order to produce believable hair images (Figure 2). To
account for both of these effects, we use shadow buffer
technique (also discussed in [12][23]). Shadow buffers are
created for all light sources, that helps to account for both
shadows and self-shadows.

damping and wind friction. The advantage of this model is that
it allows to compute a simple (and yet realistic!) animation for
hairs of any shape including such difficult as waves and spirals.
The major element of our simulation module is a socalled “Compensated gravity” algorithm that computes
stiffness and hair position in order to preserve designed shape
of hairs. This is needed to maintain the shape of hairs
unchanged after including gravity into simulation, but it still
allows hairs to move freely.
For collision detection we use cylindrical representation
of each joint and do it using non-penetration contact forces or
so called penalty method [21][22]. We find a contact point of
cylindrical hair segment and obstacle and apply force away
from obstacle surface to endpoints of hair segment. Then repeat
this process until the hair will be pushed out. This algorithm
uses non-elastic collision model and doesn’t take into account
friction forces at contact point, but this doesn’t affect to overall
realism of the simulation.
The other problems of hair dynamic are self collision and
collision between control hairs. But the discussion of them falls
beyond the scope of this article.

4. Details on
algorithms

hair

and fur interpolation

In this section we describe the interpolation problem
solution with more details. Assume that we have some control
hairs located at the surface, and we need to grow the hairs.
Each control hair should influence the direction of hairs grown
nearby, and their “influence zones” overlap. So some
interpolation scheme need to be used in order to grow hairs.
This interpolation scheme should have certain natural
properties:
1. Interpolated hairs near the control hair should be s d a r to
it;
2. Interpolated hairs shouldn’t intersect surface;
3. Interpolated hairs shouldn’t intersect each other if control
hairs don’t intersect (that’s especially important for
dynamics simulation).
Several interpolation schemes are discussed below.

3.4. Hair rendering
As mentioned above, hair rendering is a very challenging
problem. The basic problems that need to be addressed are:
- hair illumination model, that computes the illumination of a
given point on the hair; we should note that hair interaction
with light is very complex: hairs are anisotropic and highly
specular, and they produce haloing effects under backlight
conditions;
- aliasing; very small subpixel size of individual hairs
projected onscreen would cause significant aliasing if not
addressed properly;
- shadowing (by and on other surfaces), and self-shadowing;
- finally, large number of hairs necessitates the development
of the most computationally-effective algorithms in order to
make the technique practical.
In our approach, we use hair illumination model s d a r to
the one described in [2] and [12].
Hair Designer’s renderer is implemented as a volume
shader for mental ray [171 (our main production renderer), so
the principal step in the computations is to determine the pixel
value for a given ray. In order to do this, we establish a
rectangular window (corresponding to a pixel for primary rays)
and render hairs onto it. Rendering is performed with use of
subpixel 2-buffer, which naturally helps to take care of hair
aliasing.

4.1. Fur interpolation scheme
Let’s discuss first fur interpolation technique. The
following are the fundamental fur properties:
- fur growth direction (with respect to surface normal) should
be kept similar to control hairs.
- control hairs define global orientation along surface (this
property is hard to quantify for curved surfaces).
Since fur hairs are short, it’s more important to define the
growth direction, rather than the shape towards the hair ends.
Therefore fur control hairs define fur growth direction, that can
be represented as the direction with respect to surface normal
and surface tangent at the rrrowth point.

Figure 3. Fur interpolationalgorithm. Control hairs are
located at the grid corners.

Our fur growth interpolation algorithm is presented
below.
1. Select the point of growth of a new hair.
2. Collect control hairs that have non-zero influence for this
point.
3. Calculate weights of each of the control hairs.

Figure 2. White fur with self-shadow.

This is approach is similar to a more ad-hoc approach
presented in [121, where the authors instead of utilizing explicit

148

4. Transform control hairs to the growth point. The

transformation matrix translates control hair to the growth
point, rotating the surface normal at control hair to be
aligned with the surface normal at growth point.
5. Interpolate between transformed control hairs using
computed weights. For each hair segment we calculate its
length and direction using weighted lengths and directions
of collected control hairs.
One can see that this algorithm satisfies fur properties, as
well as generic interpolation hair properti& i and 2.
Interpolation property 3 can be violated, but it is not very
important for fur, since the hairs are relatively short.

4.2. Hair interpolation problem
Lets start with the discussion of a simplified problem interpolation for two control hairs on the plane (Figure 4a). It’s
obvious that fur interpolation algorithm can’t be directly used
for long hairs because it violates property 3, which very
important for hairs, and it doesn’t provide control over the
shape of hairs far from origin (Figure 4b). Straightforward
linear interpolation cannot be used as well, since it also violates
property 3 (Figure 4c).

c)

guarantee that the grown hairs don’t intersect if control ones
did not (Figure 4d).
1. Select the point of growth of a new hair.
2. Calculate estimated hair length (as the weighted average
length of control hairs influencing thhsi growth point).
3. For all hair segments do
- find the closest point on control hairs to current
segment’s end (using distances in 3D);
- calculate weights of control hairs’ points to hair (using
distances in 3D);
- interpolate control hairs directions in closest points,
using calculated weights;
- obtain next hair segment using length and direction.
This algorithm doesn’t guarantee C’continuity of hairs in
general case, but in practice this does not affect the overall
visuals of hairs. This algorithm also has a singularity when
control hairs intersect but it can be eliminated using welldefined control hair weights. In spite of described potential
difficulties, the presented algorithm solves interpolation
problem fairly well.

Partings. The main advantage of the interpolation technique is
that it gives good control of the hairs grown from control hairs.
and the shape ofthe hairs is very predictable and intuitive ibr ;I
modeler. In this section we describe how this scheme can be
applied to produce such a complex effect as hair parting.
User should define zone of influence of each control hair.
In other words, user should subdivide emitter surface into parts
and specify what control hairs have influence to each part. If’
hair emits from a certain part, then only the control hairs tiom
that part are used for interpolation.
We can also simulate “partial partings” (those that don’t
cross the whole hair surface, like most partings on humans’
heads). Let P to be a shortest path from hair growth point C l o
control hair origin H along emitter surface S, and D be its
length (Figure 5). Let Pl to be a shortest path from C t o H
along S not intersecting the parting cut, and D , be its distance.
The weight of control hair can be modulated by the ratio
(D/D,)’, where y 2 1. If parting cut divides the whole in two

4

Figure 4. a) Sample problem. b) Result of fur algorithm.
c) Linear interpolation. d) Our algorithm.

“Proper” solution. Lets assume that the surface is the sourcc
of tluid and two control hairs define a channel where the fluid
can move. We call a srreardine the line for which the
tangential vector at each point coincides with the fluid direction
at the point. Obviously, that such stream-lines are smooth and
satisfj, interpolation properties 1, 2 and 3. So, interpolation
problem can be stated out as a well-studied problem in fluid
mechanics. It is known that stream-lines can be obtained from
Laplas’ equation, which can be solved, for example, using
conformal mapping from area between control hairs to a
rectangle. However even numerical solution of this equation
very difficult to obtain for any shape of control hairs. Therefore
we had to find another approach.

The interpolation algorithm. The main idea of our algorithm
is to preserve the ratio of the distances from hair growth point

along the surface to control hairs along hair. This was we can

Figure 5. Partial Parting

5. Conclusion
Hair and fur simulation and rendering still remains a very
difficult problem for realistic image synthesis. To date and to
our knowledge, no single off-the-shelf solution is really suitable
to satisfy all production needs, and that’s why we had to come
up with our technology described above in this paper, and
implement it in our in-house tool Hair Designer.
With the use of Hair Designer we were capable to
produce high-quality images with different hairy and furry

149

objects, and these results were easy to integrate into overall
production pipeline. Efficient interpolation schemedescribed in
details in Section 4 helped to provide our animators with
intuitive means to create different complex hairstyles. Currently
the technology is used in most of the animation projects at
Studio. Among them are intros, outros and cut scenes for
Activision’s games WuTang,Shanghai SecondDinasty and X-

Men.

[21] Matthew Moore and Jane Wilhems. Collision detection and
response for computer animation. Computer graphics, 22(4):289-298,
August 1988.
[22] Mickael McKenna and David Zeltzer, Dynamic simulation of
autonomous legged locomotion. Computer Graphics, pp 29-38, 1990.
Sigraph Conference Proceedings.
[23] W. Kong and M. Nakajima. Visible Volume Buffer for Efficient
Hair Exmession and Shadow Generation, Computer Animation 99,

References
[I] Rouet., C.: “How ILM meets the Fur Challenge”, in “Advanced
Graplucs and Animation”, vol. 6., # 2,2000, pp. 36-37
[2] James T. Kajiya and Timothy L. Kay. Rendering Fur with Three
Dimensional Textures, Computer Graphics (Proceedings of
SIGGRAPH 89), 23 (3), pp. 271-280 (July 1989, Boston,
Massachusetts).
[3] A. Sourin and A. Pasko and V. Savchenko. Using real hnctions
with application to hair modelling, Computers &Graphics, 20 (l), pp.
11-19 (January 1996). Pergamon Press / Elsevier Science.
[4] Alexandre Meyer and Fabrice Neyet. Interactive Volumetric
Textures, Eurographics Rendering Workshop 1998, pp. 157-168(June
1998, Vienna, Austria). Eurographics.
[5] Fabrice Neyet. Modeling, Animating, and Rendering Complex
Scenes Using Volumetric Textures, IEEE Transactions on
Visualization and Computer Graphics, 4( l), pp. 55-70 (January-March
1998).
[6] Csuri C., Hakathom R., Parent R., Carlson W., Howard M.
‘‘Towards an interactive high visual complexity animation system”,
Computer Graphics 13 (2). 1979, pp. 289-299
[7] Miller, G.: From wire frames to furry animals. In Graphics
Interface ‘88,pages 138-146, Edmonton, Alberta, June 1988.
[8] Miller, G.: ‘“The Motion Dynamics of Snakes and Worms”,
Computer Graphics, 1988 22(4), pp. 169-178
[9] Watanabe, Y., Suenaga, Y. A trigonal prism-based method for
hair image generation, IEEE Computer Graphics & Applications, 12
(1). pp. 47-53 (January 1992).
[lo] Agnes Daldegan and Nadia Magnenat Thalmann and Tsuneya
Kurihara and Daniel Thalmann. An Integrated System for Modeling,
Animating and Rendering Hair, Computer Graphics Forum
(Eurographics 93), 12 (3), pp. 211-221 (1993, Oxford, UK).
Blackwell Publishers.
[ 11J Ken-ichi Anjyo and Yoshiaki Usami and Tsuneya Kurihara. A
simple method for extracting the natural beauty of hair, Computer
Graphics (Proceedingsof SIGGRAPH 92), 26 (2), pp. 111-120 (July
1992, Chicago, Illinois).
[ 121 LeBlanc, A. M., Tumer, R. and Thalmann, D. “Rendering Hair
using Rxel Blending and Shadow Buffers,” The Joumal of
Visualizations and Computer Animation 2 (1991), pp. 92-97.
[I31 Upstill, S.: ‘The RenderMan Companion. A Programmer’s
Guide to Realistic” Computer Graphics, Addson-Wesley, 1992
[14] Perlin, K., Hoffert “Hypertexture”, Compuer Graphics 23 (3),
1989, pp. 253-262
[15] David S. Ebert, et al. Texturing and modelling: a procedurial
approach. Academic Press, 1998.
[16] R. Featherstone. The calculation of robot dynamics using
articulated body inertias. International Joumal of Robotics
Research, 2( 1):13-30, 1983
[17] Softimage@ 3D v. 3.7 ‘“ental ray. Programmer’s Guide”.
Printed in Canada, 1996
[18] B. Mitrich. Impulse Based Dynamic Simulation of Rigd Body
Systems. PhD thesis, University of Califomia at Berkley, May 1996.
[19] D. Baraff. Analytical methods for dynamic simulation of
non-penetrating rigid bodies. In Computer Graphics (Proc.
SIGGRAPH), volume 23, pages 223-232. ACM, July 1989.
[20] D. Baraff. Dynamic Simulation of Non-penetrating Rigid
Bodies. PhD thesis, Comell University, May 1992.

150

15 1

