SinusCone @@-AThetaPhi Algorithm for Human Arm Animation
Huang Jing
Center for Graphics and Image Technology
Nanyang Technological University
Singapore 639798
p 146587934@ntu,edu.sg

Edmond C . Prakash
School of Computer Engineering
Nany ang Technological University
Singapore 639798
ASprakash@ntu.edu.sg

Abstract
Arm animation algorithms are ofen categorized by their
constraint expansion strategy. One option is the geometric bounding polygon-cone strategy, a simple containment
search strategy that traverses the search space in the order
in which successor bounding polygon edges are generated.
An alternative is the Thetaphi-cone strategy, which was designed to make it possible ro use domain-speci$c heuristic
information. By exploring promising parts of the cone space
Jirst, Thetaphi-cone algorithms generally are more eficient
than polygon-cone algorithms.

1 Introduction
The research on constraints is always an important area
since there are constraints at all levels of the motion control
and for animation techniques to realize realistic motions.
However, to specify constraints is really a tough task due to
the complex structure of the human, different task requirements and also based on animators’ specification. Figure. 1
shows the different joints of the human model. Especially
for the joints which have more than one degree of freedom, the joint limits always cover an irregular space area in
shape. Thesejoint limits are hard to be defined and it is even
harder to check whether a joint has violated its constraints
by using conventional methods. Most of the research in this
area has focused on geometric representation, interpolation
controls and dynamic simulation. Our effort is trying to introduce a totally different way, which is based on biological
analysis, to solve this problem. The objective of this paper is to use an accumulated database, which is built and
stores all the discrete joint limits data of each joint, as the
definition of constraints. Hence, the problem of checking
whether a given body segment is within its motion range
or not has been changed into another category of searching
a proposed data in a given database so that the result can
be directly obtained. What is most important is that this

0-7695-0743-3100$10.00 0 2000 E E E

Figure 1. The STAB
method is a general solution to the joint limits problem and
it can be used for each joint without considering the number
of the degrees of freedom of each joint.

1.1 Previous Work
The problem of constraints has been divided into two categories. One is the constraints of joint limit, which we will
mainly focus in this paper. And the other is collision detection. This category of constraints requires the animation
system has some intelligence for its behavior control. Since
it is beyond OUT scope of research, it will not be discussed
here. Constraints at the level of joint limits have been studied in detail by several researchers.

318

Korein’s Approach: Korein[4] presented a method for
testing spherical joint limits, in which the focus is to judge
whether a given point on the sphere lies within a polygon on
the surface of that sphere. For example, the sphere might be
centered at the shoulder with its radius the length of the upper arm. The point to be detected is the proposed elbow position and the polygon describes the joint limit. His method
is interesting and not too complex to realize if the motion
range are not required to be very accurate.
Engin et al: Engin and co-workers[l, 21 gave a threedimensional mathematical model of the shoulder motion
range based on a statistical in vivo database. They created
a shoulder joint sinus in their work to define the upper arm
motion, while the upper arm axial motion was not investigated. Wang et al. extended the Engin’s work by quantifying the upper arm axial motion range.
Wang’s Approach: Xuguang Wang and Jean Pierre Verriest [8, 71 also presented a shoulder sinus cone to specify
the motion range of the shoulder. And they used the grey
scale to specify the axial motion range with different upper arm position and orientation. Their main algorithm of
detecting joint limit violation is based on that of Korein’s.
Maurel’s Approach: A more detailed approach for animation by Maurel[S, 61 insists that we should consider not
only the shoulder joint, but the joint as the neck as well.
A more elegant approach however we feel is not to stop at
the neck but to observe that. The neck moves if the human
leans forward or sideways so the reference point can be extended to the hip. In some cases even the human hip moves
as well when doing some stretching exercises or when the
human tilts as a whole. But specifiying all these constraints
is going to be no easy task. So we limit our discussion to
the Sinus cone after all tilting, leaning and shifting of the
shoulder to the final position has taken place.
Other Approaches: Other methods are based on interpolation. If the starting and ending position of the joint are
both within its motion range, then choosing a proper way
to interpolate inbetween segments will guarantee that the
joint limits remain satisfied during the whole motion. This
requires carefully selecting interpolating spline and specifying additional key frames when the motion path is too long.
Kochanek[3] proposed an interpolation technique based on
a generalized form of piecewise cubic Hermite spline.
However, there isn’t any system yet today that helps us
to easily define the joint limits of the human model effectively and accurately. Hence, what we intend to do is to
find a relatively simple way of realizing human constraints
definition and detection.

to test the containment of the arm.
0

0

0

Point Outside Polygon: Is required to estimate for every new position and orientation of the arm. To check
if a point is inside a polygon, involves O(n) tests in the
case of a n-polygon and also complicates testing in the
region of concavity in the cone.
Boundary Point Determination: If outside the cone,
moving back to the boundary is tedious.

- A check needs to be done to determine the nearest boundary, which involves testing all the n
edges of the polygon.

- Intersection test with the nearest edge required to
move the position to the boundary.
0

0

0

Multiple Joints: Has to be done separately for each
a d l e g and other nodes.
Different Joints: Has to be done separately for each
a d l e g and other nodes.
Multiple Humans: Has to be done for every human in
the environment.

To overcome these problems we propose a ThetaPhi
cone algorithm, that precomputes the projected sinuscone
and stores the cone in an accumulation table. The precomputed sinuscone can be defined and enhanced according to
the biological requirements, so it guarantees the best sinuscone that can be defined. The accumulation helps to add
specific postures, that cannot be generated by simple bounding functions, but can be measured using mocap or other
medical instruments.
A very simple containment test technique helps to locate
the nearest boundary on the sinuscone accumulation buffer
and to eventually move the arm to the nearest boundary.

1.3 Problem Definition
The problem of constraints can be stated as follows:
1. As for a given joint, how to collect and obtain the data
of its joint limits?

2. Given a position and orientation of a body segment, by
what means can we detect its validity?

1.2 Problems with Previous Work
The problems with earlier approaches:
0

Polygon Boundary Vertices: Uses n vertices on the
polygon, which is a function of the number of vertices
on the sinus cone.

3. How to adjust body segments in order to satisfy the
constraints when the constraints are violated?

Sphere-Polygon Definition: Uses a 3D polygon-cone

319

ThetaPhiiusCoaeInitO

t

4. Even when all the constraints are satisfied, the motions

I* matrix to stores the motion range curve in (theta,phi) buffer *I

and postures generated may look awkward. So what
extra constraints should be added to produce natural
looking movements?

INPUT MData;
INPUT delta; I* a tiny value to be summed up during every step *I
INPUT theta = -180; phi = -90;
INPUT Table; I* a void mahix to store the look-up table *I
DO WHILE ( phi < 90)
check in MData to find if there exists any data with the same phi

1.4 Contributions

value;
IF(two data(theta1. phil) and (theta2. phi2) have been found)
I* thetal < theta2 *I
DO WHILE( theta < 180)
IF (theta < thetal or theta > theta2)
Table(theta*, phi*) = 0;
I* theta* and phi* refer to the position of
corresponding theta and phi in the Table matrix *I
ELSE
Table(theta*, phi*) = I ;
END IF
theta = theta + delta;
END DO
ELSE
only one data are stored in certain position of Table;
END IF
phi =phi +theta;
END DO

1. We provide a method for easy specification of joint
limits for global and local control.

2. Our method will greatly simplify the task and reduce
our efforts when the database has been set up, since the
detection of joint limits violation can be made directly.

3. We show that the same method can be used to each
joint which proves its generality.

2 The New ThetaPhi Model

1
Figure 3. Procedure for Initialization of SinusCone ThetaPhi

2.1 SinusCone ThetaPhi Accumulation Buffer

a set of data in two dimension. After the transformation,
these 2D data are stored into a table in a certain order. Now
a look-up table of shoulder joint limit has been created. The
term Accumulation Buffer is appropriate, since it can be
progressively constructed from shoulder data. The accumulation buffer is created and stored as shown in Fig. 4.
X
--0.

0

-90

I

Figure 2. The Theta-phi coordinate axis for the
shoulder joint

Figure 4. STAB look-up table creation
The sphere S can be centered at the shoulder joint with
its radius the length of the upper arm. The curve C represents the joint limit of the shoulder, which is formed by a set
of maximum possible position points of the elbow. As for
an arbitrary point on the surface of the sphere, the position
can be determined only by two parameters, theta and phi,
as shown in figure 1. In order to digitize the motion range,
we have to create a set of horizontal planes parallel to XY
plane. Every plane can be determined only by the parameter phi. If we can get the discrete data of the shoulder joint
limit on every plane, we then can finally digitize the whole
motion range. Suppose P is an arbitrary horizontal plane.

Since joint limits are not easy to specify especially when
the definition is required to be mostly accurate, we present
another way to solve this problem. That is, to create a lookup table of joint limits for each joint. The construction
of the SinusCone ThetaPhi Accumulation Buffer(STAB) is
shown in Fig. 3.
In order to illustrate more clearly, we limit the problem
only to the shoulder of the arm. Suppose we have obtained
the biological data of the motion range of the shoulder, then
these data in three dimensional space are transformed into

320

ThetaPhiBoundaryO

This plane may have at most two intersection points with
the motion range curve C. Find these two points which have
the same value of phi. Create a matrix for storing the data
and make the row of the matrix representing the value of
theta and column the value of phi. If a point on the surface
of the sphere S is within the motion range, then we mark
the corresponding item of the matrix as 1, otherwise, the
corresponding item should be marked as 0.As for the arbitrary plane P, the data are stored in one row of the matrix.
Mark both of the corresponding item of the two intersection
points A and B as 1 and mark all the items in between with
the same column as 1. Hence, the data of the joint limit on
this plane is store as one row in the matrix.
The advantage of this method is that when the database
of constraints is set up, it is very simple and easy to check
whether joint limit is violated, since the result can be obtained directly. While the drawback is the great effort to
create such a huge database and that it will cost a large storage space. However, within some parts of the joint rotation
region of the shoulder, the available elbow positions form a
regular motion range, which will greatly reduce our efforts
and costs. The same method can also be applied to that of
the hip joint, wrist joint and so on.

2.2 ThetaPhi Validation Test

t

INPUT Table; I* the look-up table we have generated *I
INPUT thetal, phil; I* an invalid position data to be corrected *I
INPUT theta0, phi@ /* a valid position data previous to datal *I
OUTPUT theta, phi; I* value on the boundary*/

Do
t = 0;
DO WHILE(t < 1)
theta = thetal * (I-t) + theta0 * t;
phi=phil *(I-t)+phiO*t;
IF(theta & phi are valid in Table)
thetal =theta;
phil =phi;
ELSE
t = t + tinyvalue;
END IF
END DO
END W

1
Figure 6. Procedure to determine ThetaPhi on
the Boundary

2.4 Animation Algorithm using STAB
This section describes the oveall procedure for animation
that uses the STAB. Here we limit our discussion to Arm
animation(see Fig. 7), but the same scheme will work for
any joint of the human body. The only exception however
will be to have a separate stab for each joint of the human
body.
ThetaPhiArmAnimation()

t

For a proposed position of the elbow to be checked, what
we should only do is to search in the look-up table for this
position data. If this position can be found, the elbow position is valid. Otherwise, the upper arm has violated joint
limits and should be corrected as shown in Fig. 5.

I* elbow Rexion-extension axis *I

INPUT axisE,
I* wrist and elbow position *I
INPUT posW, posE
I* target position of the wrist *I
INPUT tarW,

Do
calculate the elbow flexion angle thetaE
Impose a wrist trajectory pathW.
calculate shoulder and elbow motion angle thetas and thetaE
update the wrist and elbow positions posW, posE
IF~hetaPhiValidationTestO= Invalid)
ThetaF'hiBoundaryO;
END IF

ThetaPhiValidationTest()

t

INPUT Table; I' the look-up table we have generated *I
INPUT thetal, phil; I* a position data to be checked *I

Do
Find the nearest phi value in Table to phil;
/* phil -phi < tinyvalue */
Check if there exists any theta satisfying
(theta thetal < tinyvalue) under the phi value;
IF exists such a theta
return Valid;
ELSE
return Invalid
END IF

ND W

}

Figure 7. Arm Animation Algorithm using
ThetaPhi

-

END DO

3 Implementation Tips

1
Figure 5. ThetaPhi Validation Test Procedure

This approach is efficient than previous algorithms. In
comparison with a number of orientation test programs for
arm animation, it performed better, on average, than all existing approaches.
The ThetaPhiArmAnimation algorithm works by calling
ThetaPhiBoundary a number of times for each new arm psotion. Each ThetaPhiBoundary invocation returns the theta
and phi value if it is found.

2.3 Computing ThetaPhi on STAB Boundary
In case of violation of joint limits, a corrective action is
necessary. This involves moving the joint position to the
Sinuscone boundary. The algorithm is shown in Fig. 6.

321

Typically, one would call ThetaPhiBoundary in an iterative framework. The natural posture if it is outside the
boundary will be restored to the boundary as follows:
In a real program you're not only interested in the value
of the theta and phi, but also in the best move that goes with
it to move to the boundary of the sinus cone.
Although the ThetaPhi accumulation table greatly reduces the cost of doing a idout validity search, it is still a
good idea to move to the boundary without excessive computation.
Our current version of arm animation is shown in Fig. 8
and Fig. 9. The implementation of the ThetaPhi algorithm
is in progress. The resulting implementation will achieve
the same results as in the examples shown, but will help to
achieve a better performance.

4 Summary
This paper describes a method to specify joint limits of
human model in computer animation of humans. Due to the
complexity of the constraints, it is really a difficult task to
give a realistic specification of joint limits. What we do is to
create a look-up table of the constraints for each joint. For
a given position of a joint, whether it exactly matches one
set of the data stored in this look-up table or not determines
its validity. By using this method, constraints can be easily
specified and the validity of a joint is directly detected. Our
method is based on the biological understanding of human
motions so that the specification of the constraints can be
mostly accurate. And this method can also be used to define joint constraints for specific tasks which requires many
more limitations.

References
[l] A.E.Engin and S.M.Chen. Statistical data base for the biomechanical properties of the human shoulder vomplrc-i: Kinematics of the shoulder complex. Journal of Biomechanical
Engineering, (108):215-221, 1986.
[2] A.E.Engin and S.T.Tumer. 'three-dimensional kinematic
modelling of human shoulder complex-part i:physical model
and determination of joint sinus cones. Journal of Biomechanical Engineering, (1 11):107-112,1989.
[3] D.Kochanek and R.Bartels. Interpolating splines with local tension, continuity and bias control. Computer Graphics(SIGGRAPH '84 proceedings), pages 33-41, 1984.
[4] J.U.Korein. A geometric investigation of reach. MZT Press,
CAMBRIDGE, MA, 1985.
[5] W.Maurel. 3d modeling of the human upper limb including
the biomechanics of joints, muscles and soft tissues. Ph.D.

Figure 8. The animation of the arm (Example

Thesis No: 1906 - Laboratoire d'hfographie - Ecole Polytechnique Federale de Lausanne, 1998.
[6] W. Maurel and D. Thalmann. Human upper limb modeling

including scapulo-thoracic constraint and joint sinus cones.
Computers & Graphics, 24(2),2000.
[7] X. Wang and J. P.Verriest. A geometric algorithm to predict
the arm reach posture for computer-aidedergonomic evaluation. The Journal of Visualization and Computer Animation,
9:33-47, 1998.
[SI X.G.Wang, F. Mazet, N. C. Maia, J. K.Voinot, and M.Fayet.
Complete three-dimensional modelling of the motion range
of the shoulder complex. Journal of Biomechanics, 1997.

Figure 9. The animation of the arm (Exampl
2)

322

