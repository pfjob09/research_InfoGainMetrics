A Visualisation System for Web local search
M. Angelaccio, B. Buttarazzi
Dipartimento di Informatica, Sistemi e Produzione - Universita degli Studi di Roma "Tor Vergata"
Via di Tor Vergata, 110 - 00133 - R O W (Italy)
angelaccio@info.uniroma2.it buttarazzi@info.uniroma2. it
visualisation systems adopted for displaying large
hierarchies and hence are particularly suited for global
search tools. In the case of digital libraries and web
databases have been used instead more sophisticated
approaches like visual metaphors or 3D scenes (see [3]
for a review).
All these approaches are not adequate for local search
tools because they are too complex and do not take into
account visualisation of local information.
In this paper we give first a prototype description of
query model and the corresponding agent architecture for
a generic local search tool that includes a visualisation
system implemented via user interface scripts. This can be
viewed as a framework useful for many public domain
local search tools whose visualisation is often inadequate.
We give a description of the conceptual model of a
local search tool in Section 2 of the paper and proceed to
give details of the visualisation system with examples in
Section 3.
We end in Section 4 by summarising our conclusions
and future research directions.

Abstract
Web visualisation systems are widely used in browsing
or viewing search engine results. In the case of web local
search tool, however the browsing paradigm is combined
with searching paradigm, thus requiring dynamic
visualisation methods.
We describe an example of visualisation system that is
an extension o f a common JavaScript used as a website
map. It is interfaced with a Java-based local search tool
named VSEARCH.
Our system provides an easy-to-integrate mechanism
to implement information visualisation techniques like
node colouring.

1. Introduction
Conducting a web search can be time consuming and
frustrating due the enormous amount of information
available on the WWW and the proliferation of different
storage and retrieval techniques. The search process is
made all the more difficult because of the large number of
search tools, their differing information content and the
lack of industrial standards.
After a first decade of searching tools a new generation
has been produced. A classification can be found in [l].
The main approaches are:
global search tools that index the whole web graph
(Google [2] and Clever [6])
9
local search tool that include website search
programs and are used to explore (i.e. by combining
browsing and searching paradigms) a web locality or
neighbourhood of one homepage (WebGlimpse [7] )
web database query languages that are defined on a
Database view extracted from the web([8]).
In all cases visualisation systems can dramatically help
user in exploring and understanding the results. Treemaps, cone-trees and hyperbolic views are example of

2. Local search model
In the local search approach the search paradigm and
browsing paradigm are combined.
For example if we want to find documents containing a
set of keywords k instead of a "brute-force" search done
by means of querying index server, it is common in
practice to search a webspace characterised by some
starting URLs and to navigate by combining searching
and browsing paradigms. To better describe such
navigations, we adopt regular path expression used in
WebSQL query language. In the next sections we apply
the WebSQL data model introduced in [9] to have a
formal description for local search.

2.1 Query Model

'

The work described in this paper has been carried out under the financial support of the Italian Minister0 dell'universita
e della Ricerca Scientifica e Tecnologica (MURST) in the framework of " ALGORITHMS for LARGE DATA SETS:
SCIENCE and ENGINEERING" Project

474
0-7695-0743-3100
$10.00 0 2000 IEEE

For instance in the case of WebGlimpse that is a local
search tool based on Harvest index system, path
expression is (->I=>) 1 (->[=>)(->I=>) that means all paths
composed by at most two links that are local (inside the
server) or global (outside the server).
For example Figure 2 shows an example of subgraph of
the graph shown in Figure 1 composed by the documents
matching the query
Q1:
SELECT d.url
FROM Document d SUCH THAT
" www.uniroma2.it "(->I=>)
I (->/=>)(->I=>) d
WHERE d.text CONTAINS "Ingegneria, Informatica"

The WWW is a large, heterogeneous, distributed
collection of documents connected by hypertext links. At
the highest level of abstraction, it can be viewed as a
graph whose nodes are Web objects that are identified by
URLs and have some arbitrary content whose
interpretation depends on its type (HTML, video,
postscript, etc.). The "pure" graph data model is the one
adopted for global search, where the problem is to capture
link structure information. In the case of local search it
occurs a web data model that supports a query language
for navigation patterns. As a basic data model we start by
considering the well-known relational web schema
proposed in WebSQL ([9]). It is based on two (virtual)
relations that model documents and links respectively.
The Figure 1 give an example of webspace graph
composed by documents reachable starting from our
home university. Nodes displayed are the ones that are
more frequently visited by people working in the area of
Computer Science.

1 .it

.ilnirnmal .it

b.

Fig. 2 Webspace corresponding to the subgraph
matching keywords (ingegneria, informatica)

... ...

............
. .

..
.. ...
............
. ..

It is evidenced each node that matches the query. The
other nodes have the property that each one belongs to a
path that satisfies regular expression but does not contains
occurrence of the keyword.
For convenience we denote as search tree the tree
spanning on the graph composed by all nodes (matching
and not matching) that are visited during query
evaluation.

i

ni h?tU. yww.polimi.it
.

I; '
:I

. ...,
:
...........

i

i

Fig. 1 Italian Academic Organizations Webspace
Let us assume that i is the initial URL where the local
search must be started and k = kl,..,knare the keywords
used for the search.
We refer to the following prototype query for a local
search:

2.2 The prototype architecture
In this section we describe a prototype system of web
local search tools.

Start from i andfind all documents containing the
keyword k in a neighbourhood of i.

I

This query depends on how neighbourhood is defined. In
WebSQL it can be written as

Qloc:
SELECT d.url
FROM Document d SUCH THAT
" i '>path expression d

The undefined path expression denotes the path of links
corresponding to neighbourhood definition.

Fig. 3 A prototype architecture for local search

475

The next section gives details about the JavaScript
visualisation system (JS and ST).

Figure 3 shows the basic components of a local search
tool.
Three basic components are evidenced
1. Search Agent architecture that parses the user
query, automatically browses a web locality and
retums a graph data structure of results as a search
tree (rounded box)
2. A local copy of documents that are pointed by the
search results (disk icon)
3. A dynamic visualisation system composed by
HTML interface scripts (document icon)
To illustrate how this prototype architecture is
implemented Figure 4 show an example of physical
implementation used in our local search tool VSEARCH.

-

3. The JavaScript visualisation system
The visualisation system is implemented by means of a
program written in JavaScript that assumes that the
information that must be displayed is stored following an
array description of the corresponding tree data structure.
The syntax is given by the following structure.
<HTML><script>
changed =7;
vett = new Array;

......................................................

I

4

vett[i] = new Array;
vett[i][O]=<ith node level>;
vett[i][1]="<original URL>" ;
vett[i][2]="<local cached URL>";
vett[i][3]=<document score>;
vett[i][4]="<node label>";

...................................................
</script></HTML>
Figure 5 shows an example of JavaScript description
corresponding to the example shown in Figure 7.

Fig. 4 VSEARCH Agent Architecture

In this case the search engine is implemented by three
type of software agents:
The Query parser (QP) extracts keywords and search
tree parameters (width and depth) and communicates
with Search Manager.
0
The Search manager (SM) schedules browser agents,
performs search and builds tree search definition.
The Micro browser (MB) downloads html
documents.
The two Java-based agents SearchManager (SM) and
MicroBrowser (MB) implement the Search Agent
Architecture of Fig.3. Moreover to obtain a dynamic html
interface, a third agent named Queryparser (QP) has been
added. The others components of Fig. 4 are the
VSEARCH dynamic visualisation system and standard
software components that interface with VSEARCH. In
particular, WS is the web server that receives query from
the browser client C via the html CGI program called by
the query form QF, and the two html documents JS and
ST are the dynamic JavaScript visualisation program and
search tree definition program respectively. It has been
evidenced the score computation function (sc) called by
the SM agent and applied to each page fetched by the
MBs.

vett [ill [l]=''http://www.polimi.it/facolta/in
g/leonardo/didattica/diplomi";
vett [111 [21 =''http://localhost/VShtml/cache/w
ww-polimi-it/facolta/ing/leonardo/didattica/
diplomi"; vett [111 [3]=24 . O ;
vett [111 [4]="Diplomi Universitari
(Ingegneria)'I; vett [121 = new Array;
vett [121 LO1 =2;
vett [I21 [I]=''http://www.polimi.it/facolta/in
g/leonardo/didattica/diplomi/info.shtml";
vett [12] [21 =''http://localhost/VShtml/cache/w
wwgolimi-it/facolta/ing/leonardo/didattica/
diplomi/inf 0 . shtml" ; vett E121 [3I =lo. 0 ;
vett [121 [41 ="Diplomi Universitari
(Ingegneria)" ; vett [13] = new Array;
vett [I31 [ 0 1 = 2 ;
vett [I31 [l]="http://www.polimi.it/facolta/in
g/leonardo/didattica/diplomi/informing.shtml
9,

.

vett [13] [21 =''http://localhost/VShtml/cache/w
wwgolimi-it/facolta/ing/leonardo/didattica/
diplomi/informing.shtml"; vett [13] [3]=8.0;
vett [131 [41 ="Facolta' di Architettura:
Diplomi Universitari"; vett[l4] = new Array;

Fig. 5 JavaScript description of the search tree
shown in the examples.
It has been defined a JavaScript array where each
element contains the attributes of each search tree node
The array indexing follows a pre-order visit. Each node

476

has the following attributes: tree-level, the corresponding
URL from which the document has been loaded, a
secondary URL. denoting its local copy, a score value and
a node label. This array will be accessed from the main
JavaScript program (JS).

The following table describes the node colouring
schema:
colour

Green

3.1 Visualisation examples
As example of visualisation results, Figures 6 and 7
show two maps that are displayed at different times. The
first map, given in fig.6, is displayed after that search
engine has returned a search tree of depth 2 and width 2.
This strongly depends on the browser time refresh
intervals. The second map shown in fig.7 gives the
completion of the search. Each document is displayed
with a node of different colour that depends on its
document score value returned from the search engine
architecture.

Fig. 8 Node Colouring schema
This is derived from the standard HSV colour models
( [ 5 ] ) . To evidence the impact of colouring scale for the
user, the next table gives the colour scale translated into
grey-levels. Note that in this way thanks to the adopted
increasing brightness bad answers are displayed with light
colours and good answers with dark colours,

3 ROOT
Diploma lngegneria lnformatica 94

L

&W

h e l p 1

@

Mosaic Help

&

Hypertext and W information 0

m

Progetti per I'area gasometri

o

Facolta' di lngegi

Fig. 6 Search tree visualisation at first time
ROOT

Diploma lngegneria lnformatica 94
W h e l p 1
Mosaic Help 2
'
HTMLHelp 4
Hypertext and W information 0
@ Hypertext and "4information 0
Sede di Wa Eudossiana 58
lnformazioni generali 48
Figure pmfessionali 26

@

:a

'a

a

sm

ModalitP didalliche 34
Articolazione formativa 28

93

@

A chi nvolgeni per informazioni 23
70
1Sede di Via di Selva Polledrara 58
Polltecnico di Milano universltd. architettura. ingegneria. Iaurea. diploma univeri
@ NontP del silo 6
' @ Progeni per larea gasometn o
@ Politecnico di Milano Facoiia' di lngegneria 17
-@ Polltecnico di Milano Facolta' di lngsgnena 11
Politecnico di Milano Facoha' di lngegnena 11

1 Sede di Via Salaria

p

I

I

4. Related and future Works

Novita del sit0 6

@ Politecnico di Milano
@ Lombardia 0

&

I

lnformazioni generali 48

m 93 di Milano universith, architettura,
-a Polilecnico
1@

I

Fig. 9 Node Colouring schema

2

Sede di Via Eudossiana 58

a

I

'a

In this paper we have described an example of dynamic
visualisation system for web local search. Other works
that deal with dynamic visualisation for web search
results are the following ones:
0
The Fetuccino system ([IO]) that displays search
results computed by the Clever search engine and
adopts a two-phase model of query.
0
The context+focus view approach that tends to
displays a web locality by showing different icons for
node having different level of relevance (see [3] for
some examples).
The JavaScript visualisation of VSEARCH, that has been
described here, has the advantage to be easily interfaced
with other server side search engines via the search tree
definition file. This makes more easy end flexible the
mapping of document relevance into graph visualisation
via techniques like node colouring or node icons.
Since more advanced technique of large graph
visualisation like hyperbolic visualisation have been
introduced for browsing, it might be interesting to also
apply such techniques to search results in order to
increase the degree of visualisation of maps like the
search tree shown in this paper or the ones shown in
Fetuccino system. Search maps must have additional
requirements like capability to display also document
relevance in an efficient way.
We have also planned to enhance the abstraction level of
search results by considering the potential of wrapping
database views from a web locality. In this case a new

Fig. 7 Search tree visualisation at a second time

477

research direction is the integration of the visual databases
languages paradigm and web search tools ([8] and [4]).

5. References
[l] M. Angelaccio, B. Buttarazzi. “A Query Model for
Web local search and its implementation”, TR99
University of Rome Tor Vergata

[2] S. Brin and L. Page. The anatomy of a large-scale
hypertextual web search engine. http:/ihuron.stanford.edu/
backrub/google.html, 1998
[3] C. Chen “Information Visualitation and Virtual
Environments” Springer Ed.
[4] P. Demetriades and A. Poulovassilis,
“An
Architecture for Web Visualisation Systems” presented
at the Worshop on Reuse of Web Information, hold in
conjunction with the WWW7 conference, 14 April 1998,
Brisbane, Australia
URL:
http://www-rocq.inria.fi/-vercoust/REUSE/pos3/index.htm
[5] Foley J. D.,van Dam A., Feiner S. K. and Hughes J.
F., “Computer Graphics: Principles and Practice.“
Addison- Wesley, Reading, 1990.
[6] J. M. Kleinberg. “Authoritative Sources in a
ACM-SIAM
Hyperlinked Environment”, Proc. of
Symposium on Discrete Algorithms, 1998
[7] U. Manber, M. Smith, B. Gopal,. “WebGlimpseCombining Browsing and Searching”. Proc. Of the
Sixteenth ACM Symposium on Principles of Database
Systems, Tucson, Arizona, May 1997.
[8] A. Mendelzon, T. Milo. “Formal Model of web
queries”. Proc. Of the Sixteenth ACM Symposium on
Principles of Database Systems, Tucson, Arizona, May
1997.
[9] A. 0.Mendelzon, G. A. Mihaila, and T. Milo.
“Querying the world wide web”. Journal of Digital
Libraries, 1 1997 (l), 54-67.
[lo] I. Ben-Shaul, M. Herscovici and others, “Adding
support for Dynamic and Focused Search with
Fetuccino”, URL:http://www8.org/w8-papers/5a-searchquery/adding/adding.html

478

