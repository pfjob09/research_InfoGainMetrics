A Stiudy on the Real-time Toon Rendering
for 3D Geometry Model
Daeuk Kang, Donghwan Kim, Kyunghyun Yoon
Dept. of Image Engineering,
Graduate School of Advanced Imaging Science, Multimedia, and Film,
gigadeth@cglab.cse.cau.ac.kr
I

Most of the existing toon rendering methods have
been unable to process a high quality cel-animation
image in a short period of time. Therefore, to apply
toon-style rendering in the area of interactive
entertainment, a method to execute real-time toon
rendering is required. In this paper toon rendering is
implemented using properties of 3D geometric model,
and result images are created. Shadows of objects are
added to the result images using Shadow-Zbuffer to
efficiently represent scene. After extracting outlines in
real-time from polygon mesh models, toon shading is
processed for each polygon. Consequently real-time
toon rendering containing shadows is implemented.

Abstract
Non-Photorealistic rendering techniques, such as
toon rendering, can greatly enhance the quality of
hand-drawn cel animatioin images with less effort. For
this reason, toon rendering is one of the popular
techniques used in the eel animation image production
field. The existing toon rmdering techniques, however,
have not been effective enough for the real-time image
processing. Because the techniques have not been
adequate for some processes that needs immediate
responses such as virtual-realities, or video games. This
paper will suggest the real-time toon rendering to
overcome this limitation through real-time outline
detection and phong shading. In addition, an effective
result-image can be produced by adding a shadow
using fast shadow generaling algorithm while real-time
execution remains possiblz.

2. Related Works

Keywords: NPR? 'Toon Rendering, Outline
Extraction, Animation, F.ealtime Rendering, Shadow
Z-Buffer

1. Introduction
A rendering method called NPR has become a.major
area of interest in computer graphics. It is a method
used to produce an image as hand-drawn which appears.
Toon rendering is a method used to make an image,
which has been created by the computer that appears
similar to a traditional cartoon image [I]. This method
can be applied to human created cel animation. The
image created through the process of toon rendering
would appear more natural than an image created
through the existing cel-animation method by changing
its style to make it appear as a cartoon image. It would
also make the expression of a complex image appear
more natural.

0-7695-1195-3/01$10.00 0 2001 IEI?E

391

For a static 3D rendering image, the,toon rendering
method suggested by Lebaredian uses a Depth Buffer
and a Normal Buffer to get the outline of the object and
then adds a shadow to it using the Shadow Buffer [2].
However, this algorithm is not suitable for real-time
processing due to its process time. Markosian uses the
Appel's hidden line algorithm to get the outline of the
object and then applies a number of different line styles
[3]. However, it is different from toon rendering in that
only the process of search and display of the outline is
done in real-time. An algorithm to add a shadow to the
object has been introduced by Petrovic [4]. This work
produces a more realistic image with a shadow, but not
suitable for real-time processing of an image.
A real-time toon-rendering program is applicable on
a 3D geometry model called "Loony" which has been
introduced in the "Game Developer Magazine" [ 5 ] .
Loony uses OpenGL for extracting the outline and toon
shading. The drawbacks of this method are that there is
no shadow and the final image is not of high quality
because of its inability to extract the outline. In this

paper, real-time toon rendering has been implemented
by extracting the outline using the geometry
information of a 3D model such as Loony and then
performing real-time toon shading. Furthermore, a
real-time shadow has been added for reality.

Silhouettes

I

Boundaries

I Discontinuities

3. Real-time Toon Rendering
Figure 2. Outlines of 3D Geometry Model

Figure 1 shows the block diagram of the toon
rendering method applied in this paper. Overall process
is classified into three steps which are “outline
extraction”, “toon shading” and “shadow generation”.
To extract the outline, we use the view vector and
normal vector of the polygon. Then the color values are
calculated by using the traditional shading method and
then adjusted to its intensity level with lookup table.
The final image can be then produced by adding a
shadow to the object using the Shadow Z-buffer
algorithm.

Silhouette is an edge where a back face and a fiont
face meet. If the angle between the normal vector and
the view vector is smaller than or equal to 90 degrees,
it is called the front face of the polygon and vice versa.
Boundary is the edge that does not contain an adjacent
face of the polygon. In the figure 2, the dotted line is
boundary of the polygon, but it doesn’t calculate to
Boundaries because it is wrapped by the model.
Discontinuity is an edge determined by the degree of
normal vector of two adjacent polygons. In defining
discontinuity, the threshold of the angle between the
front faces depends on models [6].

(a)
(b)
(C)
Figure 3. Loony’s outline detection Method

In the Loony method, only the extraction of the
silhouette is made possible by rendering the back face
of the model to extract the outline, as is shown in figure
3-(a). Then shading is applied to the front face of the
model and then added to the polygon model as is
shown in figure 3-(b). However? this method is only
able to express the silhouette of the model on the
screen, as is shown in figure 3-(c).
All three types of outline are extractable using the
following equations.

Figure 1 . Toon Rendering System Flow

3.1 Outline Extraction
There are several known methods used for extracting
the outline such as the edge detection, depth map
method and the normal map method [2]. However,
these methods are not suitable for implementing
real-time rendering. In the 3D model, the outline is
composed of the edges of the object and is detected by
using the information such as the normal vector of
faces and the eye vector [6]. In the 3D model, the
outline edge can be classified into silhouettes,
boundaries, and discontinuities, as is shown in figure 2.

Eql. Boundaries

:A, E

F, ,f2, =

4

Eq2. Discontinuities : nl,- n2,2(Threshold)
Eq3. Silhouette : (nl,*V)(nz,*V) I 0

392

If the view vector is (defined as V, the edge of the
model as E[, and the face as Fl, then the two faces
adjacent to El are A,, and f i l respectively, the normal
vectors are nll and nL The outlines are then defined as
Eql, Eq2, and Eq3. For Eq1, an edge is defined as the
boundary of the model if it only has a single adjacent
face within the list of edges. The discontinuity of Eq2
is defined by two adjacent faces and the difference
between the two normal values of the two faces. If the
difference between the two normal values is larger than
the pre-defined threshold, it is defined as a
discontinuity. The silhouette of Eq3 is defined as two
adjacent faces that are adjacent in its front face and
back face. In pre-proccssing time, we extract the
boundaries and discontinuities. In run-time, we extract
only silhouettes for outline extraction of the model.
The silhouette and the boundary are different types
of outline, but are similar in that they both become an
edge that are only drawn once if a polygon is produced
after the hidden surface process. Therefore, in this
study, the silhouette and the boundary, which were
detected individually, as is shown in figure 4 will be
treated as a single edge tcl be checked only once during
the process. Speed up of the process can also be
achieved because the out1ine extraction of the polygon
is implemented after thc invisible surface has been
discarded. After extractin,: the outline, an invisible line
to be discarded still remains within the circle expressed
as a dotted line, as is sh3wn in figure 5. This line is
discarded using the Z-buffer algorithm in the shading
process and therefore need not be considered in the
process of outline extraction. Figure 6 shows the final
image produced through the process of outline
extraction and toon shading.

(a) Silhouettes

(b) Boundaries

Figure 5. Hidden Line

Figure 6. Connect outline with toon shading

3.2 Toon Shading
The coloring method is another important factor in
creating a natural image. Simple coloring method are
used to create images by human whereas more realistic
coloring methods are used to create images by
computer. The existing toon rendering methods have
used rendering techniques such as ray tracing for the
rendering process [2][7]. However, such methods are
not adequate for real-time processing. A toon shading
method that combines the existing Phong and Gouraud
shading methods has been implemented in this study to
achieve more natural real-time rendering. Shading has
been implemented on the remaining front faces after
the hidden surface process as well as the depth buffer
rendering algorithm. The resulting image would have
smooth surface. Two other methods for expressing it as
a toon image are applied after this process.
Loony implements the toon shading using the ID
texture of OpenGL. The intensity value is then
calculated for each of the three vertices of the triangle
of the model. The ID texture has a non-continuous
intensity value that has been pre-defined. Then each
intensity value is transformed into a matching
coordinate of the vertex to get the final image of the
toon shading.

(c) Identical Outlines

Figure 4. Characteristics of Outlines

393

n

method.
Rendering at the eye point is applied before
converting it into a texture source and transform the
coordinates into the camera point of view. By mapping
the texture, created through the above process, onto the
floor or the surface, we can create an effect of
projecting object through the light (Figure 9). The
shadow z-buffer algorithm creates a natural shadow of
an image and can be simply applied on an object.

I-r-

I

I

Figure 7 . Translate Smooth shading to Toon Shading

The suggested method uses a mapping table to
implement the toon shading, as is shown in figure 7.
As a result, it would have an intensity value of 256
levels. However, toon image should only have an
intensity value of 3 or 4 different levels. Therefore, the
256 levels of intensity value are reduced to 3 levels to
make it appear as a toon image. A mapping table is
used to implement the process of reducing the level of
intensity value. The intensity value of the pixel on a
polygon, which consists of a single triangle. is
determined by the phong-shading method. It is then
converted using the mapping table, to get the new
intensity value of the pixel. The difference between the
intensity of the object becomes clear. due to the
non-continuous brightness of the object according to
the table. Figure 8421) is the resulting image of the
Phong-shading and 8-(b) is the result of the Toon
shading.

(a) Phong shading result

j

Jtv

a,,,.

-~ .
..\,,
-...
\\%

--.

Figure 9. Shadow Z-buffer generation

5. Implernentatio n ResuIts
In this paper. a real-time toon rendering has been
implemented on a Pentium III-~OOMHZ,256M RAM,
Windows 2000 environment using Visual C++ 6.0.
Table 1 is the model used for the test and Table 2. 3.
and 4 are the result of the process time.

(b) Toon shading result

Figure 8. Result image by different shading method

4. Shadow Generation
To add reality to a computer-created image, a
shadow can be added according to the position of the
light within the image. Such effect can enhance
vividness of the description of the image. A shadow is
further classified as a hard umbra. single hard shadow,
and a soft shadow [6]. Only the hard shadow is
considered in this paper. To create a more realistic
image. the shadow of an object should have an effect
on other objects during the creation of the shadow.
However, such method is hard to implement on a
moving object, it has been limited to be applied in such
a way that would only effect a single face of the object
in this paper. The Shadow Z-Buffer algorithm has been
utilized to implement the real-time shadow creation

394

Model

Number of faces

Number of vertices

Donut

450

225

Chess

480

242

Teapot

1024

530

Sphere

264

134

Model

Frame per second

Loony

Donut

81

64

Chess

80

65

Teapot

74

Sphere

84

66

Table 3. FPS by oiJtline and toon shading

Frame per second

Teapot

60

Sphere

69

Figure 11. Toon Shading with Shadow
Table 4. FPS by toon rendering with shadow

Frame per second

6. Result and Future Works
Teapot

45

Sphere

50

Throughout this paper, a real-time toon rendering
with shadow technique has been presented. The
real-time toon rendering is an area that has just started
to be studied and a preexisting program like "loony"
simply processes outline detection and toon shading
about a single object. The image created by our
program has higher quality by adding shadow effect in
real time. Though our result is considered to be fast
enough to be processed interactively with users, it was
implemented with single object. By improving the
procedure with a higher speed, a much more complex
scene must be able to be processed in real-time, too.
Though we are using slw renderer developed by us now,
it is possible to enhance the rendering speed by using
h/w accelerator later.
In the future, we expect our work to be widely
applied to the virtual reality or video games. And
real-time toon rendering needs to be developed more
on various outline styles techniques, shading methods
and the shadow effect that has been generated between
the objects.

Table 2 shows the res.ult of the rendering process
after only extracting the outline. It is evident that the
process time of only extracting the outline is faster than
that of the Loony method. Table 3 shows the difference
between the results eliminating a shadow. It is similar
to Loony in its process time but produces a higher
quality image as is shown in figure IO. By adding a
shadow to the scene, as i:; shown in figure 11, we can
create a more realistic image. According to the table,
the display size of the polygon affects more influence
on the process time than the number of polygons.
Figure 12 shows the various resulting images of the
model.

Acknowledgements
This work is partially supported by Korea Science
and
Engineering
Foundation
Grant
No.
2000-1 -30300-002-3

(a) loony

(b) our result

Figure I O . Result

395

Reference
[SI Danvin3D software creation, Carioon rendering,

[ I ] Rev Lebaredian. Traditional Cel Animation Look with 3 0
Renderers. SIGGRAPH 96 Visual Proceedings, ACM

http //w
danvin3d com/gdm2000 htm, Februrary-March,

SIGGRAPH, ACM Press,l996

2000
[6] Non-Photorealistic rendering, SIGGRAPH 99 course 17 ,

[2] Philippe Decaudin. Carioon-Looking Rendering of

August 1999

3D-Scenes. Technical Report 2919,1NRIA,June 1996

[3] Lee Markosian et al. Real-Time Nonphotorealisiic Rendering.

[7] Michael Arias, SOFTIUAGE Special Projecis, ACM

In Turner Whitted, editor, SIGGRAPH 97 Conference

SIGGRAPH computer graphics volume 33 Number 1

Proceedings,pages 41 5 - 4 19

February 1999 Front cover

[4] Lena Petrovic et al. Shadowsfor Cel Animation, SIGGRAPH
2000 Conference Proceedings, p5 11-516

(c) Head

(a) Sphere

(b) Teapot

(d) Donut

Figure 12.

Result Images

-396

