Solving Geometric Constraints
by a Hybrid Method
Samy Ait-Aoudia, Hakim Badis, Messaoud Kara
INI - Institut National de formation en lnformatique
BP 68M - Oued Smar 16270 Algiers Algeria
Tel: +213 21 51 61 04
Fax : +213 21 51 61 56 Telex :64531
E-mail :s-ciit-uoudiu @ ini.dz

Abstract
In computer aided design, geometric modelling by
constraints enables users to describe geometric objects by
geometric constraints. Many resolution methods have
been proposed for solving systems of geometric
constraints. Geometric methods can be very efficient but
are only applicable to particular kinds of problems
(typically ruler and c0mpas.r constructive problems).
Numerical methods can deal with all types of constraints
but are time consuming. We present a hybrid method to
solve the geometric constrainls by combining geometric
solving with numerical meth0d.y. We "benefit" then of ihe
.advantages of the two methods.
Key Words: Computer aided design, constraints solving,
geometric constraints, graph-based solver, bipartite
graphs, matching.

elimination with resultants) are typically exponential in
time and space (see [7]). Numerical methods (NewtonRaphson's iteration, homotopy, gaussian elimination and
so on) can deal with all types of constraints but they are
O(n3) or worse (see [8,9,10,1I]).
In this paper, we describe our constraint-based
modeller that uses a hybrid method to solve the geometric
constraints. First we apply an extended pass of our
geometric solver (see [ 1I) and then if there is a deadlock
(the resolution process can't continue) we construct the
bipartite graph underlying the unsolved geometric
constraints. We solve them numerically and return to the
geometric solving. This process is repeated until there is
no unsolved constraint left.
This paper is organised as follows. The graph
representation of the constraint problem is explained in
section 2. In section 3, we describe the geometric solver.
We present in section 4, the method used for solving
numerically the constraints. Section 5 gives conclusions.

1. Introduction

2. Constraints and graphs

In computer aided design, geometric modelling by
constraints enables users to describe geometric objects
such as points, lines, circles, conics, B-spline curves, . ..
in 2D by specifying a sketch and adding to it geometric
constraints. Examples of geoimetric constraints are :
distances or angles between elements, incidence or
tangency relations, ... The solver derives then
automatically the geometric elements that are to be found.
Many programming styles or languages have been
investigated: imperative, objecc oriented, rules driven.
Many resolution methods have been proposed for solving
systems of geometric constraints. We classify the
resolution methods in three broid categories: geometric,
symbolic, and numerical.
Geometric methods can be very efficient but are only
applicable to particular kinds of problems: see
[I ,2,3,4,5,6]. Symbolic methods (Grobner bases,

Geometric modelling by constraints enables users to
describe geometric elements such as points, lines, circles,
line segments and circular arcs by a set of required
relationships of distance, angle, incidence, tangency,
parallelism ...
With some pre-processing, the geometric elements are
reduced to points and lines, and the constraints to those of
distance and angle (see [ 3 ] ) .
We use an undirected graph G=(V,E) where IVI=n and
IEl=m to represent the constraint problem. The geometric
elements are represented by the graph nodes and the
constraints are the graph edges. The edges are labelled
with the values of the distance and angle dimensions.

Example I :
A dimensioning scheme defining a constraint problem
is shown in figure 1. The corresponding constraint graph

AlEorithm :
The nodes Vs of the skeleton are the nodes of the
constraint graph that belong to several basic
clusters (these nodes are marked with at least two
basic clusters names).

is shown in figure 2. The unlabeled edges correspond to a
null point-line distance.

dl

The edges Es of the skeleton are obtained as
follows :
Es=0;
For each basic cluster Ci
Do pick the nodes {NI,N2,...,Nj} of Ci that
belong to Vs;
triangulate the set {Nl,N2,...,Nj} by doing:
Add edge (Nl,N2) to Es;
For k=3 to j
Do Add edges (Nk,Nk-1) and
(Nk,Nk-2) to Es;

C
Figure 1. A simple design.

If an added edge (s,t) to Es is not a member of the
initial set of constraints then we insert a "virtual"
constraint whose value is easily determined because the
nodes s and t belong to a rigid structure (a basic cluster).

3.3. Recursion
We form the basic clusters of the skeleton graph and
we do a "skeletization" of the skeleton itself. This
process is repeated until the final skeleton is formed by
one basic cluster. This final skeleton is placed in the
plane. All the basic clusters are placed relatively to the
related skeletons in the reverse order of the recursive
"skeletization". The following procedures abstract the
resolution process :

Figure 2. The corresponding constraint graph.

3. Geometric constraints solving
3.1. Basic clusters formation

Solve (G)
{ Find the basic clusters of G ;
Skel(G); }

The first step of the algorithm is to construct the basic
clusters. A cluster is a rigid geometric structure whose
elements are known relatively to each other. A basic
cluster is obtained as follows : pick an unmarked edge of
the constraint graph (the nodes and the edges are initially
unmarked) and place it in a new cluster ; add to the cluster
being constructed any geometric element related to it by a
number of constraints equal to its degree of freedom ;
repeat this operation until no geometric element can be
added to the cluster.

Skel (G) /* Skeleton of G */
{ Construct the skeleton of G ; Let G' be this graph ;
Find the basic clusters of G' ;
if G' is of more than one basic cluster
then Skel (G') ;
Place the basic clusters of G relatively to the
skeleton G' ; }
Once a skeleton G' is positioned in the plane, each
basic cluster of the graph G is positioned by computing
the rotational and translational parameters. Note that each
basic cluster share with its related skeleton at least two
nodes. The solution is obtained when the basic clusters of
the initial graph are positioned. The algorithm runs in
quadratic time. In most cases only one "skeletization" is
needed.

3.2. The skeleton of the constraint graph
The second phase of the algorithm is to construct
recursively the skeletons of the constraint graph and place
in reverse order the geometric elements. The skeleton is'a
graph Gs=(Vs,Es) which is obtained by the algorithm
given below.

750

Figure 3. A constraint graph.
Example 2 :
Consider the constraint graph G of figure 3 (all the
nodes are points and the edges represent distances
constraints). Its skeleton graph SQ1 is shown in figure 4.
SQI is formed by three basic clusters. It's skeleton SQ2 is
given in figure 5. SQ2 is the final skeleton (one basic
cluster). The construction phase places at first SQ2 then
SQI and at last G.

Figure 5. Second skeleton

4. Numerical solving
When there is a deadlock (the geometric solving
process can't continue) we construct the bipartite graph G
under 1yi ng the unsolved geometric con strain t s. We
consider the natural bipartite graph associated with
systems of equations (see [ 121). This bipartite graph has
one vertex per equation, one vertex per unknown, and an
edge between an unknown x and an equation y ifand only
if x appears in equation y. By convention, equation

Figure 4. First skeleton.

75 1

vertices are elements of Y, unknowns are elements of X ,
and in all figures, equation vertices are drawn above
unknown vertices.
The following algorithm gives the unique
decomposition of G into its irreducible components and
an order of resolution between them.

the constraint i (for example eq2 is the distance equation
between points C and E). The resolution order of these
irreducible parts (the strongly connected components)
given by step 4 is the following :
G I , G2, G3, G4 and G5
We first compute the co-ordinates of the point C using
the two equations eql and eq5, then the co-ordinates of
points D, E, F and G in this order.

Algorithm :

I . Find a perfect matching M of G.
2. Build the directed graph G’ from G by replacing
each edge xy in M by two arcs xy and yx, and by
orienting all other edges from Y to X.
3. Compute the strongly connected components of
G’. Each of these strongly connected components is
irreducible.
4. To compute the dependencies between these
irreducible subgraphs, build the reduced graph R
from G’ by contracting each strongly connected
component in a vertex. Each arc of R, say from si to
s2, means : solve subsystem s2 before s i . A
compatible total order between subsystems can be
obtained by any topological sorting of R.

_xc

I

xD yD
G2

xE YE xF
G3

G4

(3.5

I

Figure 7. perfect matching and decomposition
We have used the bisection method to solve systems of
equations (see [13,14]). This method enables users to
reliably find all solutions to a system of non-linear
equations within a region defined by bounds on each
individual co-ordinate of the geometric objects.

Steps 2, 3 and 4 can be computed in O(n+m) where
n=IVI and m=IEl. The whole algorithm runs in O(m n1’2).
Running time of the whole algorithm including step 1 is
bounded by the cost of the search of a perfect matching.
The decomposition is independent of the perfect matching
M.
We present here an illustrative example of a system of
constraints and give the corresponding decomposition. A
“dimensioning scheme” is shown in figure 6.

5. Conclusion
We have described a hybrid method to solve the
geometric constraints by combining geometric sol vi ng
with numerical methods. The method is general and can
deal efficiently with any type of geometric constraints.
Non geometric constraints can also be handled. The
numerical solving is speeded by the proposed algorithm.
Our current interest is to explore the 3D constraint
field where no interesting work has been done. We will
focus on solving the constraints by a geometric method.

G

A

G’

rc

B

6. References

Figure 6. A well constrained scheme.

S. Ait-Aoudia, H. Brahim, A. Moussaoui , T. Saadi. Solving
Geometric Constraints by a Graph-Constricctive Approach.
IEEE International Conf. on Information Visualization ,
(London, England), pp. 250-255, July 99.

The points A and B are initially fixed. The labelled
edges correspond to the distance constraints (quadratic
equations). O! and p are the arguments of the angle
constraints.
The system of equations corresponding to this scheme
is well constrained. The perfect matching ( e q l x c , eqgyc,

Bouma,W., FudosJ., Hoffman,C.M., Cai,J., Paige,R. A
geometric constraint solver. Coniputer Aided Design, Vol.
27, No.6, June, 487-501, 1995.

eq@Dp eqlOYD> eq2xE9 eq4YEj eq7xFl eq9YFj e93xG
e98)’G) and the decomposition of G into irreducible
components are shown in figure 7. The eqi corresponds to

[3] I. Fudos. Constraint solving for cornputer aided design.

Ph.D. Thesis, Dept. of Computer Science, Purdue
University, Aug. 1995.

752

[4] C . Jermann, G. Trombettoni, B. Neveu,
Constraint Programming Approach for
Geometric Systems. International Conf. on
Practice of Constraint Programming,
Singapore, Sep. 2000.

M. Rueher. A
Solving Rigid
Principles and
pp. 233-248,

[9] E.L. Allgower and K. Georg. Continuation and path
following. Acta Numerica, pages 1-64, 1993.
[IO] A. Perez and D. Serrano. Constraint base analysis toolsfor
design. Second Symposium on Solid Modeling Foundations
and CAD/CAM Applications, Montreal Canada. May 93.
pp. 281-290.

[5] J.Y. Lee and K. Kim. A 2 0 - geometric constraint solver
using DOF-based graph reduci'ion. Computer Puded Design,
30 (1 l), pp. 883-896, 1998.

[ l l ] H. Lamure and D. Michelucci. Solving constraints by
homotopy. Symposium on Solid Modeling Foundations and
CAD/CAM Applications. May 95. pp. 263-269.

[6] Owen, J.C. Algebraic Solution for Geometry from
Dimensional Constraints, Symp. on Solid Modeling
Foundations and CAD/CAM Applications, 397-407, 1991.

[12] S. Ait-Aoudia, R. Jegou and D. Michelucci. Reduction of

constraint system. In Proceedings of ACM Compugraphics,
(Alvor, Portugal), pp. 83-92, 1993.

[7] X. Gao, S. Chou. Solving geometric constraint systems :A
symbolic approach and decision of Rc-constructibility.
Computer Aided Design, Vol. 30, No. 2, pp. 115-122, 1998.

[I31 S. kt-Aoudia, A. Moussaoui. COGEMO : a Constrointbased Geometric Modeller. Swiss Conference on
CAD/CAM Systems, (Neuchgtel, Swiss), Feb, 1999.

[8] D. Serrano. Automatic Diinensioning in Design for
Manufacturing. Symposium on Solid Modeling Foundations
and CAD/CAM Applications, 1991, pp. 379-386.

[14] Snyder,J.M. Interval Analysis For Computer Graphics.
Computer Graphics, Vol. 26, No. 2, 12 1-1 30, 1992.

753

