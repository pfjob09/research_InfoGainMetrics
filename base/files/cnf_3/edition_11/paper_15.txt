Robustness in CAD Geometric Constructions
P. Schreck
Laboratoire des Sciences, de 1’Image de 1’Informatique
et de la TClCdCtection (LSIIT, UPRES-A CNRS 7005)
UniversitC Louis Pasteur de Strasbourg,
I3oulevard SCbastien Brant, 67400 Illkirch, France
schreck@dpt-inf0.u-strasbg.fr

Abst ratt

ches present well known drawbacks: the iterative numerical approaches are either unstable, as the Newton-Raphson
method or slow as the homotopy method [IO]) and optimization methods [6]. On the other hand, the combinatorial methods are usually limited. For instance, in the Sunde
method [ 131, only points are used, and the methods studied
by Owen [ 1 I] or by Fudos et al. [ 11 do not consider circles
with unknown radius. Another example is given in Fig. 1:
the constraint p q = 60 on the dimensioned sketch cannot be expressed nor solved by these methods although it
is constructible with straight-edge and compass. Moreover,
since there is no memory of the construction for these approaches, it seems difficult to browse efficiently the solution
space and to handle parametric figures where the numerical
values of the dimensions can be modified [ 5 ] .
At present time, the combinatorial methods are often
chosen in CAD. They are based on graph algorithms,
and carry out a decomposition of a construction problem.
This decomposition can be top-down oriented, e.g. in
Owen’s method [ 111, or bottom up oriented, e.g. in FudosHoffman’s method [ 11. The sub-problems must be solved
either with iterative numerical methods, either with fixed
geometric methods. With the methods in the first category, we are confronted with the drawbacks of the numerical iterative method (instability, incompleteness). To our
knowledge, the methods in the second category essentially
consist in a constraint propagation using a simplified degree
of freedom analysis. We think that the correctness and the
robustness of these methods go through a in-depth study of
the geometric construction domain [ 141.
In our approach, which can be described as a naive geometric approach, such a study is an integrated part of the
method: we formalize a geometric universe which is used
to carry out the effective construction under the form of a
construction program. So, the entire solving process can
be divided into two phases: in the first phase the construction problem is compiled into a construction program and
in the second phase this program is numerically interpreted

Many authors have sof a r studied the problem of geometric construction in CADfrom a combinatorial point of view.
The derived algorithms are efJicient but not general enough.
Moreover the problem of robustness is seldom mentioned.
In this paper; we expose a logicd framework of geometric
construction which points out tht. difficulties to overcome in
order to implement a correct geometric universe. We think
thut this precise study of the pa,rticularities of geotnetty is
necessary to obtain a robust geowietric solver:

+

1. Introduction
The resolution of a geometric construction problem consists in solving a system of geometric constraints that is
called the probleni statement. In computer science, this
topic has mainly been studied in two domains, namely
computer-aided education (CAE) and computer-aided design (CAD). In the first case, the problem statement is given
in a literal form (without any numerical value) and the result is a way to construct all the figures corresponding to
the statement. In the second case, the statement is a dimensioned sketch, and the user expects a graphical figure which
respects the given dimensions, amd which “looks like” the
sketch. These differences, among others, had a strong influence on the approaches in the respective domains. Ad hoc
and efficient algorithmic method,; are used in CAD whereas
AI techniques are employed in CAE. We think that there is
no incompatibility between these domains and that the indepth study imposed by a CAE approach can bring a handsome contribution to the CAD approach.
Indeed, if geometric solvers are often employed in CAD
contexts (see for instance commercial solvers as in [8,9,3]),
they are generally either numerical iterative solvers (e.g.
[8]), or combinatorial solvers (e.g. [ 13, I], for a more precise classification of the methods see [4]). Both approa-

111
0-7695-1195-3/01 $10.00 0 2001 IEEE

metric constructions but we hope that it will be helpful even
in combinatorial methods. Moreover, we give some indications on the possible use of this framework in CAD systems.
The rest of this paper is organized as follows. Section 2 is
dedicated to a logical description of Euclidean geometry.
Section 3 shows a logical formulation of construction programs. In section 4, we, expose the implementation of our
logical framework. Finally, section 5 concludes this paper.

2. Logical modeling of Euclidean geometry
Before we define a formal framework to Euclidean geometry, it is important to keep in mind that Euclidean geometry is not$nitely axiomatizable. This limitation means
that no formal system in first order logic is semantically
complete with respect to Euclidean geometry. Note that
this limitation is not characteristic to the formal approaches:
all the computational implementations admit this limitation
whatever the chosen approach.
Another important property of a first order theory is the
correctness with respect to a semantic. In this section, we
develop a theory a model of which is the Euclidean plane.
We call such a theory a geometric universe. Reaching correctness is not as easy as it seems: we have to handle some
practical and fundamental difficulties such as the following
ones:

b)

Figure 1. Example of dimensioned sketch (a)
with two constructions (b) and (c)

to yield numerical and graphical figures. This formal point
of view has led to two prototypes. The first one, called
Proge', is specialized in the CAE domain [12]. The second one, called Yams, takes advantage of the closure by displacements of the CAD construction problems to perform
more general decompositions than those used in combinatorial methods[4].
As for all the programs, the questions of correctness (all
the results are solutions of the constraint system) and robustness (correctness, and, as a possibility, completeness, is
preserved by numerical variation of the parameters) of the
construction programs depend on the rigor of the description of the domain. For effectiveness reasons, in CAD domain, the geometric framework is often simplified making
the assumption that the parameters are algebraically independent. That is why, in Yams, the degenerate cases are not
completely treated. On the other hand, in CAE domain, one
must consider all the possible cases. In ProgC, conditional
and iterative structures are used in the notion of construction
program to handle all the cases. Thanks to the multi-agent
architecture of Yams, we think that it is possible to combine
the respective advantages of Yams and Progi.
In this paper, we expose a logical framework for geometric constructions. This framework gives a denotational semantic of construction programs and points out problematic
particularities of geometry. This is a basis of symbolic geo-

1 . existence of different natural types of objects;
2. pseudo functions, e.g. the function which yields the

perpendicular bisector of two points which degenerates when the points are confused;

3. functions with several results, called multi-functions,
e.g. the multi-function which gives the intersections of
two circles;
4. different particular cases, e.g. given four points '4, B ,
C and D such that AB = C D and lines ( A B ) and
( C D ) are parallel, then either ( A B C D ) or (ABDC)
is a parallelogram. Note that this rule can be applied in
the example given in Fig. 1 (see constructions (b) and
(c)).
The second and fourth item are linked to the robustness of
geometric solvers.
The first item is not difficult to address with multi-sorted
logic. A geometric universe is typed by a signature which
is a triple < S , F, P > where S is a set of symbols called
sorts, F is a S* x S-sorted set of jiinctional symbols and
P is a S*-sorted set of predicative symbols [15]. Here is
a simple example of a signature for a geometric universe
meeting the straight-edge and compass constructions.

112

sorts
length. point, line, circle
functional symbols
dist : point point -+ length
inter11 : line line -+ point
intercc:circlecircle -+ point
interlc : line circle + point
sline : point point -+ line
ccr : point length -+ circle
predicative symbols
Ls-onl-: point line
As-onc-: point circle
= - : length length
- = : point point
= : line line
- = : circle circle

- -

Note that this is just a declaration of the preconditions
for the functional symbol s l i n e . We will later see how
these preconditional axioms can be employed to ensure the
correct and robust use of the corresponding functions.

W dist. between two points
lo lines intersection
lo circles intersection
W linelcircle intersection
9%line defined by two points
W circ. def. by center+radius

3. Logical modeling of geometric constructions

W incidence (infix notation)
W incidence (infix notation)
W equality (infix notation)
lo equality
lo equality
lo equality

In the geometric resolution domain, several aims can be
distinguished:
given a geometric constraint system, find if there is
any (numerical) solution;

This basic signature does not fulfill the aforementioned
requirements: particularly the intersection of two circles
may contain zero, one, two or an infinity of points. Here, the
important case, called general case, is when it contains one
or two points: we say that this is a defining intersection. The
other cases are called degenerate cases. So, to deal with the
multi-function involved in the general case, we introduce as
many functions as the defined elements. For instance, in
the case of the intersection of two circles, we consider two
functions giving respectively the first and the second point
contained in the intersection:

given a geometric constraint system, find one or all
€-approximated solution(s);
given a geometric constraint system within a geometric universe, find if there is any symbolic solution;
given a geometric constraint system within a geometric
universe, find one or all the solutions that it is possible
to express in this universe.

functional symbols

The first two items are linked to the numerical resolution
methods. In this case, the question is: is the Euclidean plane
a model for the following formula ?

interccl : circle circle -+ point
intercc2 : circle circle + point

This way, the distinct entities appearing in the general
case can be considered in a symbolic level. Assuming a
i f t h e n e l s e construction, we can define, for example,
the midpoint of two points by the usual straight-edge and
compass construction:

Va' 3 2 *(a', Z )

where a' and Z are well-sorted vectors of variables, a' being
the parameters vector and Z being the unknowns vector.
The problems of constructibility and construction are
quite different from this point of view. First, they involve
a geometric universe U with a signature C in the sense given above. Secondly, they require to prove the existence of
a vector of terms of T ( C ) (resp. to find a vector of terms)
denoted here by f(2) such that the expression

mid(A, B)=
if A = B thenA
else
interll(sline(A,B),
sline(interccl(ccr(A, dist(A,I ] ) ) , ccr(B,dist(A, E ) ) ) ,
intercc2(ccr(A,dist(A, B)),ccr(B, dist(A, B)))))

At the signature level, it is harder to characterize pseudofunctions: some authors recommend using an order-sorted
approach to avoid using pseudo-functions [7] and others introduce preconditions defining I he validity domains of the
functions. We choose the second way: for each pseudofunction, we add an uxiom corresponding to the precondition. For instance, we have the axiom:

vfi*(a', f(a'))

(3)

is a theorem of U . Note that f(Z) is not only an exact solution, it is either an effective way to build numerical solutions. The narrowing techniques used in rewriting systems make the best possible use of this formulation. Actually, we have to be more precise. When solving an equation, all the solutions are expected and not only a particular
one. So we have to re-write formula (3) into the formula
(4), where m is the number of solutions, and the m terms
Fl(a'),F2(a'),. . . , F,(Z) are the solutions.

VA : p o i n t B : p o i n t L : l i n e
(A # B ) A A is-on1 1; A B is-on1 L

\

(2)

L = sline(A,B)

*(a', 2)
which specifies that points A and B have to be different in
order to construct straight line L..

( Z = F l ( a ' ) V ... 2 = &(a'))

113

)

(4)

are unsatisfiable in the Euclidean plane. Formula (5) seems
unnecessarily complicated: but with the condition above
and some syntactical sugar for implications and disjunctions, the middle part can be converted in a (quasi-)classical
imperative construction program as defined in Prog6 [ 121.
Then, the simple example above gives:

This way, we can answer the multi-function problem
mentioned above. But the problem of the pseudo-functions
remains. That is, formula (2) is generally false in usual
construction problems [2]. For instance,
Vdl Vd2 3m(m is-on1 d l A m is-on1 d2)

is not a true formula of the Euclidean geometry. So, to be
correct, a geometric construction must yield all the solutions, and for each of them it must point out its domain of
validity. From our logical point of view, we have to be more
specific with formula (4) giving:

tlcl : c i r c l e ,

c2 : c i r c l e ,

x : point.{

x is-onc c1 A x is-onc c2
3

i f &(cl, c2)
then list = [interccl(cl,C Z ) , intercc2(cl,cg)]
f o r p i n list do x = p done
e l s e i f c1 = c2 then x is-onccl
else fail}

VaTZ.

In this example, the use of a list and the iteration structure are the counterpart of the disjunctions in the logical
formulation. Iterations allow to yield all the solutions by
explicit backtracking. The conditional construction ensures
the existence of some points in the intersection before use
them. A more sophisticated program is shown next section.

4. Implementation of this logical framework
VC. {II(Z)

@

(&(a)V . . .6i(a') V A(Z) V n(G))}

This framework was partially implemented in an earlier
work in the form of a prototype called Proge' written in Prolog. In this prototype, geometric universes are considered
as usual data to be described by experts in geometry. Thus,
different specialized geometric domains can be considered.
A geometric universe is implemented with an assigned
signature in which functional and predicative symbols are
defined. Geometric axioms for construction and/or deduction are implemented as production rules. However, some
axioms, such as the possible permutations of arguments
in terms, or the preconditional axioms seen above, do not
yield production rules but are implemented as attributes of
the functional or predicative symbols. Special inference
mechanisms are employed to make the best use of these attributes.
First, a matching process implementing an extended
paramodulation is performed. In this step, the system takes
care of the equality between objects deduced from the previous inferences and it examines possible permutations of arguments in terms. As an example, a term such mid (X,
a)
can match with constant i if the database contains the facts
c = a and i=mid ( c , b ) . Then, variable X takes the symbolic value b.Moreover, the incidence relationships, for example, A is-ond D and B is-ond D, are used to construct terms, such s l i n e ( A , B ) , in order to match D with
it.
Secondly, a non-wraparound verification is made by
searching the candidate rule in the history of the applied
rules with their instantiation.

(6)

where each &(a) determines the validity domain of the
ki constructions F ~ , J ( c ? ) , F ~ , ~. .(.Z, F)i,, k : ( a ) , A(Z,.') determines the domain where there are an infinity of solu3 @'(a,).' but
tions, W(Z, ).' is such that Q(Z, ).'
T(Q'(G, Z) 2 Q(G, 2 ) )and n(G) the domain where there
is not solution. The second factor of the conjunction, II(Z)
points out that all possibilities must be examined.
For instance, the construction problem of a point x on
circle c1 and on circle c2 can be expressed by:
Vel : c i r c l e , ca : c i r c l e , x : p o i n t .
(x is-onc c1 A x is-onc c2)

where d1(c1,c2) @ Iradius(c1) - radius(c2)I
d i s t ( c e n t e r ( c l ) center(c2))
,
5 radius(c1)
r a d i u s (c2)

1
5

+

Usually, one adds the condition that the domains expressed by &(;),
A(;, )'. and a(;,)'. constitute a partition
of the Euclidean plane: formulae &(Z) A h j ( a ) with i # j,
A(Z,.') A hi(.'), R(a',Z) A &(Z) and A(;,?) A fl(Z,.')

114

Thirdly, the database is upclated. That is, the deduced
facts are added. The constructive facts, as incidence relationships, are used to produce constructive terms which, in
turn, are added to the construction program.
For instance, A is-ond D and B is-ond D can be
combined to yield the conditional definition
if A

# B then D

= sline(A,B)

which is added to the construction program. The else
branch is pending at this moment: the system keeps the
information that A = B in the else case. This way the
axiom (1) is taken into accounl to ensure the robustness of
this instruction. The complete inference mechanism is described in [ 121.
The produced construction program contains conditional structures and iterative structures to enumerate the different cases as in the example given in Table 2 which solves
a variant of the dimensioned sketch given in Fig. 1 (the
corresponding formal statement is given in Table 1). This
construction program, which is automatically produced by
Progt, is robust in the sense that, for each set of numerical
values for 0 , d i , a,b and 1,it can be interpreted in order to
yield all the solutions.
Statement

point : : o given.
dir : : di given.
point : : a given.
point : : b given.
length : : 1 given.
sline : : d searched.
point : : m mentioned.
point : : n mentioned.

Construction Program

o : = (given)
di : = (given)
a : = (given)
b : = (given)
1 : = (given)
dl : = dpdir(a, di)
d2 : = dpdir(b, di)
circle00 : = ccr(a, 1)
list00 : = [intercll(circleOO,dl), interclZ(circle00, dl)l
for point00 in list00 do
list01 : = [pll(pointOO,m,b,n),pll(point00,m.n.b)l
for case00 in list01 do
if case00 = pll(point00, m, b, n) then
len03 : = dist(point00.b)
if point00 dif b then
point01 : = mid(point00, b)
line00 : = sline(b, point00)
Ien04 : = dist(point01, 0 )
if point01 diff o then
d : = sline(point01, 0 )
m : = interll(d, dl)
n : = interll(d, d2)
end
else fail
end
end
else fail
end
end
if case00 = pll(point00, m, n, b) then
len05 : = dist(b, point00)
if b diff point00 then
line05 : = sline(b, point00)
d : = dpdir(o, dir06)
m : = interll(d, dl)
n : = interll(d, d2)
end
else
fail

end
end
else
fail
end
end

dl = dpdir(a, di).
d2 = dpdir(b. di).
m is-on1 dl.
n is-on1 d2.
m is-on1 d.
n is-on1 d.
dist(a, m) + dist(b, n) '=1=' 1
dl diff d2.

end
end
verify(m is-on1 dl)
verify(n is-on1 d2)
verify(m is-on1 d)
verify(n is-on1 d)
verify(o is-on d)
verify(dist(a,m) + dist(b, n) == 1)
verify(d1 diff d2)
end

Table 1. Statement for the program on Table 1

Table 2. A complete construction program

ProgC is a prototype designed for CAE purposes where
problems are usually small-sizcd. Unfortunately, it is not
efficient enough for large CAD problems. Especially, the
degenerate cases examination is very time consuming within ProgC. Moreover it does not perform problem decomposition and for each particular geometric domain the expert
had to use a particular instance of Progt.
The next work of our team was to study the particular
case of CAD. We found a decoinposition process based on
displacement closure which is characteristic of CAD problems. Our decomposition process is more general than the
combinatorial based ones, but it requires heavier data structures. We implemented our ideas in a new prototype called

Yams ([4]) in the form of a multi-agent system. This approach is more efficient, not only from the speed point
of view but also from the resolution power point of view.
But Yams does not take into consideration the problematic
points described in previous sections, such as the existence
of several cases and pseudo-functions. In Yams, the symbolic result of the solving process is not a construction program, but, more merely, a construction plan which do not
contains conditional nor iteration structures. But, thanks to
the modularity of Yams, the agents are independent and it

115

[9] U. S. Inc.
Unigraphics.
Technical report,
http://www.ug.eds.com, 2000.
[IO] H. Lamure and D. Michelucci. Solving constraints by homotopy. In Proceedings of the ACM-Sigraph Solid Modeling
Conference, pages 134-145. ACM Press, 1995.
[ 1 I] J. Owen. Algebraic solution for geometry from dimensional constraints. In Proceedings of the Ith ACM Symposium
of Solid Modeling and CAD/CAM Applications, pages 397407. ACM Press, 1991.
[I21 P. Schreck. Implantation d’un systkme base de connaissances pour les constructions gkomktriques. Revue
d’lntelligence ArtiJicielle, 8(3):223-247, 1994.
[I31 G. Sunde. A CAD system with declarative specification of
shape. In Proceedings of the lFlP WG 5.2 on Geometric
Modeling, Rensselaerville, 1986.
[I41 G. T. Toussaint. A new look at euclid’s second proposition. Technical Report SOCS 90-21, School of Computer
Science, Mc Gill, 1990.
[ 151 M. Wirsing. Algebraic Specification, pages 677-780. Handbook of Theoretical Computer Science. Elsevier Science,
1990.

would be possible to include some more intelligent agents
that would be able to consider different cases during the
solving process. The simple notion of construction plan of
Yams will be extended to meet the notion of construction
program of Progt. This way, we could implement a robust
solver for CAD systems.

5. Conclusion
In this paper, we exposed a rigorous framework based
on first order logic to make robust geometric constructions.
This approach is often chosen in CAE systems. But, to our
knowledge, no parametric CAD system uses such frameworks although they are essential to produce robust constructions. We suggested that our CAD approach could be
extended to implement this formal framework.
So, one of our current works is to combine the advantages of ProgC and Yams. We plan to obtain:
0

0

0

a robust software, in the sense that the built construction programs are robust
a fast software: the multi-agent architecture allows us
to consider small specialized expert systems which can
be compiled. We claim that, by this way, we can reach
a complexity comparable to combinatorial approaches.
a general and extensible software.

References
[I] W. Bouma, I. Fudos, C. Hoffmann, J . Cai, and R. Paige.
A geometric constraint solver. Computer-Aided Design,
27(6):487-501, 1995.
[2] S. Chou. Mechanical geometry theorem proving. Mathematics and its Applications. D. Reidel, Dordrecht, 1988.
[3] D. cubed Co. D-cubed. Technical report, http:l/www.dcubed.co.uk, 2000.
[4] J.-E Dufourd, P. Mathis, and P. Schreck. Geometric construction by assembling solved subfigures. Arti$cial Intelligence Journal, 99(1):73-119, 1998.
[5] C. Esser-Villard, P. Schreck, and F. Dufourd, J . Sketchbased pruning of a solution space within a formal geometric
constraint solver. Arti3cial Intelligence, 124:139-1 59, 2000.
[6] J. Ge, S. Chou, and X. Gao. Geometric constraint satisfaction using optimization methods. Computer-Aided Design,
3 1 ~867-879,1999.
[7] J. Goguen. Modular specification of some basic geometrical
constructions. Artificial Intelligence, 37 (Special Issue on
Computational Computer Geometry):123-1 53, 1987.
[8] A. Heydon and G. Nelson. The Juno-2 constraint-based
drawing editor. Technical Report SRC-13la, Digital, System Research Center, 1994.

116

