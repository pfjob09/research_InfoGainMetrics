Framework for Immersive Visualization of Building Analysis Data
Nagaraju Rangaraju' and Michal Terk'
'Department of Civil Engineering, Rice University
terk@rice.edu

electrons while at the other extreme the user can
fly between the planets of the solar system. Such
radical changes in size are not possible in real
world systems but are often needed to better
understand some phenomena.
Transduction. A VE can include interface devices
that present information to the user in the manner
that is not available to the human senses. For
example, the V E can use visuals, sound and haptic
feedback to provide an enhanced description of the
changes in the state of VE.
Reification. A VE can also provide a visualization
of abstract phenomena like mathematical
equations that have no real life form.

Absiract
A number of researchers have shown that scientific
visualization provides enhanced understanding in
domains with significant information complexiry.
Unfortunately, the task of creating engineering
visualization, especially immersive visualization, is
highly complex and lacks high level tools that would
simplify the development pro,cess. This paper describes
a framework that is designed to simplify the process of
building immersive visualizafion of structural analysis
of building structures. The paper describes the
components of the framework and describes two
applications that were created to test their
functionality.

Virtual Environments have been classified based on
a number of criteria such as the intended purpose, tools
used for rendering and size. However since the notion
of Immersion is a very important feature of VEs the
most commonly used criterion in classifying
environments is the degree of immersion the user is
provided with. Based on this criterion VEs can be
classified as Non-Immersive (Desktop), SemiImmersive (Projected) and Fully-Immersive VEs
[3,111.

1. Introduction
The rapid increase in the power and availability of
the computer has resulted in new and innovative
techniques for its use in various fields. One such recent
technique is the collection of technologies that are
usually referred to by the term Virtual Reality (VR) or
more recently Virtual Environments (VE) [ 1,2,3,4].
The purpose of V E is to provide its users with the
illusion of interacting with detailed recreations of real
environment or operating in synthetic or augments
environment. There a number of areas where this type
of interaction if highly berieficial including training
[13,14,15], especially to perform operations in
hazardous conditions, and visualization of complex
data.

Non-Immersive (Desktop) Virtual Environments
make no attempt to provide the user with a feeling of
immersion. They are usually generated and controlled
by conventional desktop PCs. As a result of the simple
hardware requirement this approach to building VE is
extremely popular and most of existing VEs belong to
this category. Their main advantages are the simple
hardware requirement, the low cost involved and the
high resolution of the images produced when compared
with some other VEs. However the lack of immersion
is an important constraint consequently these VEs are
limited in their range of applications.

Scientists and engineers have been on the forefront
of using VEs in their work and research [5,6,7,8,9,10].
Winn [12] suggests that the main benefits of VE is that
a well built Virtual Reality application can offer three
knowledge-building experiences that are not available
in the real world. They pertain to:

Semi-Immersive (Projected) Virtual Environments
provide the user is provided with a limited sense of
immersion. The sense of immersion is achieved by the
projecting of images onto one or more screens that are
arranged in a specific manner to enhance immersion in
the use. The screens are located either on tilted

Size. A VE can be build to allow for radical
changes in size. T o use Winn's example, at one
extreme the user can enter an atom and arrange the

37
0-7695-1195-3/01
$10.00 0 2001 IEEE

mechanism for visualizing results of this class of
analysis but since structural design is a group process
we have chosen to concentrate on developing a
Projected VE system, since it will allow multiple
engineering to work collaboratively to review the
analysis output.

platforms as in ImmersaDesk application, along the
walls of a room as in CAVE applications or on curved
surfaces like in the Reality Center Systems. Typically
the images are viewed in stereo to provide depth
perception. One or more users can gather before these
screens and simultaneously use the system. However at
the users are still aware of the external environment
and therefore these systems can only achieve a partial
sense of immersion can be created in the user. The
main advantages of this category is a that they provide
a greater sense of immersion than that achieved in the
Desktop VEs, support displays with high degree of
resolution and are allow multiple users to use the
system at the same time. Given the rapid advances that
have been made in the hardware technology for this
class of VEs the number of Semi-Immersive VE
applications has been increasing lately.

Our approach was to develop a software framework
that would be able to bridge the two major categories
of software that would be involved in such
visualization: the analysis software that produces the
data and the visualization software running on the VE
environment.

2. Requirements
for
Immersive
Visualization of Building Analysis Data
One of the major barriers to developing Partially
and Fully Immersive VE is the range of knowledge
required in bringing together graphical and analysis
software. The current libraries of graphical software for
building Immersive VE’s such as SGI Performer
provide very low-level operations graphical operations.
At the same time, a number of researchers have
developed various mechanisms for interactions but the
available APIs used to implement this mechanism are
either too low level or not widely available. The similar
problem exists with structural analysis software, with
each software package providing different formats for
its input and output data. As a result, the development
requirements involved in building VE that allows users
to control and visualize the output of structural analysis
software has prevented the wider use of this
visualization technique.

Fully-Immersive Virtual Environments attempt to
provide the sense of full immersion by blocking out the
external world. This is typically achieved using Head
Mounted Display (HMD) that completely isolated the
user’s senses from the external world. As a result, this
class of VEs produces the greatest sense of presence
and immersion in the user. However their success to a
great extent depends on the system’s display resolution,
field of view, update rate and image lags. The
disadvantages include motion sickness in the user due
to inappropriate update of graphical information, lower
screen resolution than in other types of systems and the
requirement that users wear heavy headgear.
Structural analysis of tall buildings (both static and
dynamic) provides a number of applications that could
benefit from the knowledge-building advantages of
VE. The review of analysis results involves both
understanding of the behavior of the entire structure as
well as behavior of individual elements. Graphical
representation of the results can provide use additional
sensory inputs such as sound and graphics to indicate
the location and occurrence of failure. Finally users can
control the analysis, slowing down the display or
stopping it at various points in the analysis. The goal of
this work was to develop a visualization of shake table
experiments and dynamic analysis of structures that
could be visualized by remote users that have access to
VE hard ware.

Our aim is to simplify the process of developing VE
for immersive visualization by developing a software
framework that would provide a high level interface
between the VR graphic libraries used in building
immersive VEs and structural analysis tools.

The resulting framework must provide the following
functionalities:
A visualization toolkit that provides high-level
abstractions common to the domain of structural
analysis. This toolkit must provide support for bidirectional communication between the user using
the VE and the analysis software.
A software wrapper that converts the analysis
software into data server capable of receiving
instructions from VE and generating a data stream
as its output.

A number of software tools provide Desktop VE that
display results of both static and dynamic analysis of
structures. Unfortunately, dynamic analyses of
structures that undergo 3-dimentional displacements
that change with time are very difficult to view and
track in a 2D visualization of the structure. Both
Projected and Fully Immersive VE provide a better

38

client contacts the simulation server with the
corresponding information. The simulation server
performs the necessary action and returns the fresh data
to the visualization client. This division of the
computational effort between a simulation server and a
visualization client is based on the widely used
clientlserver architecture and provides for the
following advantages:

A communication protocol based on standard
Internet protocols that use high-level abstractions
from the domain of structural analysis.
As part of this work we have developed a
framework that meets these requirements and used it to
develop two VE in the domain of structural analysis:
VirShake - a VE targeted to visualizing the results
of shaking table experiments and corresponding
dynamic analysis
VirLab - an educational VE targeted at visualizing
the results of Finite Element analysis of simple
structures

the designer of a VE can concentrate on the
individual modules separately thus easing the
design process.
multiple simulation servers can communicate with
a single visualization client allowing VE to display
the results of multiple analysis
existing software like a Finite Element solver can
be easily adapted to act as the simulation server
without porting it to visualization hardware
simulation server and the visualization client can
be run on different machines if that is the best
arrangement for their computational needs. For
example a computationally intensive simulation
server can run on a super computer while the
visualization client can run on computer with
special hardware for high speed graphics.

3. Framework Architecture
A general framework that we have created for
building VE applications fix structural engineering is
shown in Figure 1. The framework can be thought of as
representing a closed loop of interaction between the
simulation server, the visualization client and the user.
The simulation server and the visualization client are
implemented as different processes that can be run on
the same machine or on different machines. The
simulation server is the software wrapper that drives
the analysis software to perform the structural analysis
associated with the problem and communicates the
generated data. The data is communicated to the
visualization client that uses the calls in the
visualization toolkit to drive the display device that
will display the corresponding VE. The VE also
provides a user interface for the user to interact with
the visualization client.
Simulation Server

The rendering process communicates with the user
through the VE that is presented to the user through a
display device. The VE also provides a user interface
so that the user can communicate with the rendering
process. The rendering process interprets the signals
from the user and the corresponding action is then
performed. Some of these actions might need the
rendering process to contact the simulation server with
specific queries. The simulation process performs the
necessary calculations and returns the necessary data to
the rendering process, which updates the VE
accordingly.

Visualization Client

Simulation server

fiiF-lC1
Intermtion

Figure 1. Systlem Architecture
The user signals are interpreted by the visualization
client, which will in turn update the state of the VE. If
the operation requires fresh data, the visualization

39

The simulation server is responsible for generating
the required data and communicating them to the
visualization client for it to render the VE. The
required data might include the geometry of the
structure, the loading and boundary conditions and the
results like displacements, stress and strain. The data
can be pre-computed and stored in a database in which
case the server has to search the database and find the
requested data or they may be computed as the request
is being made. In applications that allow the user to
change the structures geometry, loading or boundary
conditions these data needs to be sent by the
visualization client to the server, which then performs
the analysis and generates the results. Thus the

libraries for the CAVELib software and is designed to
drive CAVEADesk systems [ 161. The rendering
component also interfaces with the interaction device
to obtain the user signals. It interprets these signals and
translates them into data requests to the simulation
server or update signals to the display device as is
required. Like the simulation server a communication
component is needed to handle the flow of data and
requests from and to the simulation server.

simulation server can be thought of as consisting of an
analysis component and a communication component.
Several software implementations of standard
structural analysis procedures have been developed and
these can serve as the analysis component of the
simulation server. The most commonly used structural
analysis packages are based on the Finite Element
Method (FEM) like NISA, ANSYS and ALADDIN.
These store the structure as a mesh of elements
connected at nodes. This method of representing the
geometry of the structure is particularly convenient
because it can easily be transformed into 3-D geometry
data that can be used by most graphics packages to
render the structure in the VE. The essential
requirements of the analysis component are:

The visualization client is designed using the notion
of a node as its fundamental abstraction. The geometry
of the VE is defined as a collection of nodes each with
its unique geometric representation. The designer of
the VE provides the visualization client with a file of
initialization commands that define the number of
nodes and the location of their geometry files. The
same file list the set of properties that will be defined
for each node and an indication of the graphical display
that will be used to show the changes to the values of
those properties. It also defines whether the node can
be selected and which properties of the node can be
modifies and sent to the simulation server. At this time,
the visualization toolkit provides support for both 2D
graphical representation of changes to a property and a
color map shading representation of relative magnitude
of a property across all nodes in the structure. The
information in this file will be used in creating a VE to
display this information. The VE also includes a
control panel [I71 that allows users to drive the
simulation and to select which properties should be
selected, and how they should be displayed. This
approach allows users to create VE without learning
the dctails of visualization software required for
building immersive VEs. This approach has an added
advantage that the visualization tools kit can be
extended and improved without making changes to the
simulation server.

The ability to perform fast and accurate analysis.
This is particularly important if the analysis has
to be done in real time because an unduly long
lag time can be disconcerting to the user. In order
to meet this requirement it might be necessary to
run the simulation server on a powerful computing
platform like a supercomputer.
The ability to provide the visualization client the
geometric representation of the structure as well as
the results of the analysis in a format that can be
interpreted easily so that the rendering is quick and
accurate.
The communication component receives the data
from the analysis component and sends it to the
visualization client. It also receives the data requests
that are sent by the visualization client and
communicates it to the analysis component. This can
also include any data that are required to initialize the
analysis.
Visualization client

4. Immersive Application
The visualization client is responsible for rendering
the VE based on the data obtained from the simulation
server. It also has to interpret the user signals from the
interaction device and convert them into appropriate
requests to be sent to the simulation server. Thus the
visualization client has to interface with the display
device as well as the interaction device.

To demonstrate the benefits of this framework we
developed the following the VirShake and VirLab
Immersive VE application
VirShake

The VirShake application is used to visualize the
response of structure subjected to dynamic excitation.
The simulation server can provide either output of the
analysis software or information from the experiments
conducted on the shake table in our lab. The nodes in
the model can represent floors and columns. If a
greater level of detail is needed each node can
represent portions of the columns and floors. Among

The visualization client consists of a rendering
component and communication component. The
rendering component generates the signals that drive
the display device to produce the VE based on the data
obtained from the simulation server. The current
implementation of the visualization client contains a
graphics toolkit build on top of the Iris Performer

40

navigate through the model
information in a variety of ways.

the properties that can be displayed are floor
displacement, acceleration and stresses in each of the
nodes making up the structure. The VirShake also
allows visualization of multiple structures and detects
collisions between structures. The figure below shows
the response of a two-story structure with the node
colors showing relative magnitude of the acceleration
property of the nodes. The base of the structure serves
as a control panel that allows the user to modify the
property being displayed and to choose between
various methods of display. The user can navigate the
model and to slow down, stop and restart the
simulation of the dynamic response.

I

1

D.CS

10.00

and

1.00

to view

OEC
INC

this

1

Figure 3. Input to FEA analysis using VirLab

5. Conclusions

Figure 2. Analysis of
VirShake

EI

This paper describes a new framework that
simplifies the process of creating immersive virtual
environments in the domain of structural analysis. The
architecture of this framework allows easy integration
of visualization mechanism with structural analysis
software and allows a separate but coordinated
evolution path for both the visualization toolkit and the
simulation capabilities of the VE environments created
using this framework. The capabilities of this
framework are demonstrated using two application that
target visualization of dynamic behavior of structures
and teaching of structural analysis.

two story structure in

Bibliography

VirLab

Kalawsky, S.R. The Science of Virtual Reality and
Virtual Environments. Addison-Wesley.
Stuart, R. Design of Virtual Environments. McGraw
Hill series on visual technology
Balaguer, F., Mangili, A., Virtual Environments ,
http://sgvenus.cern.ch/balaguer/vr92.html
Isdale, J., What is VR?
http://www.isx.com/-jisdale/WhatlsVR.htd.
Dede, C., Loftin, B., Salzman, M., Sciencespace:
Virtual Realities for Learning Complex and Abstract
Scientific Concepts
,http://www.vetl.uh.edu/ScienceSpace/absvir.html
Dede, C.,Loftin, B.,Salzman, M.,Hoblit,J.,and Regian,
W., The Design of Artificial Reulities to Improve
Learning Newtonian Mechanics, Proceedings of the
East-West International Conference on Multimedia,
Hypermedia and Virtual Reality.
Bradshaw, S.,Canfield,T.,Kokinis,J.,Disz, T., An

VirLab is designed to act as a tool for structural
engineering education. The visualization client reads a
collection of possible structures from the simulation
server and allows the user to select a structure to
visualize. Each node in the model of the structure
represents three-dimension,al finite elements and
contains information about its geometry and
connectivity. The initial set of parameters includes
node ids and number of degrees of freedom. The user
can use the wand to define loads to any of the nodes
and to modify the boundary conditions of the node.
The simulation server provides access to an off-theshelf finite element package capable of performing
analysis on the structure. The results of the analysis in
the form of node displacement and stresses are send
back to the visualization client that allows the user to

Interactive Virtual Environment for Finite Element

41

Analysis, Proc. High-Performance Computing '95,

Phoenix, Arizona.
[8] Taylor, E.V., Stevens, R., and Canfield, T., Performance
Models of Interactive, Immersive Visualizationfor
Scientific Applications, Proc. High Performance for

Computer Graphics and Visualization Conference.
[9] Disz, T., Papka, M., Stevens, R., Pellegrino, M. and
Taylor, V. Virtual Reality Visualization of Parallel
Molecular Dynamics Simulation, Proc. HighPerformance Computing '95, Phoenix, Arizona.
[IO] Canfield, T.R., Simulation and Visualization of
Mechanical Systems in Immersive Virtual
Environments, in Proc. Engineering Mechanics: A Force
for the 21st Century.
[ 1 I ] Kalawsky, R., Exploiting Virtual Reality Techniques in
Education and Training: Technological Issues, Report
prepared for AGOCG.
[ 121 Winn, W., A Conceptual Basisfor Educational
Applications of Virtual Reality. University of
Washington, Human Interface Technology Laboratory
of the Washington Technology Center, Seattle, WA.
Technical Publication R-93-9.
[ 131 Youngblut, C., Educational Uses of Virtual Reality
Technology, Institute of Defense Analyses Report.
[ 141 Moore, P., Learning and Teaching in Virtual Worlds:
Implications of Virtual Reality for Education, Australian
Journal of Educational Technology.
[ 151 Cronin ,P., Report on the Applications of Virtual Reality
Technology to Education.
htrp://w\~w.co~sci.ecl.ac.u~-paulus/Woe~/~r.li
tin

[I61 Euiz-Neira C., Sandin, D.J., De Fanti T., Surround-

Screen Projection-Based Virtual Reality: The Design
and Implementation of CAVE, ACM SICGRAPH,
1993, pp. 135-142
[ 171 J. Bresnahan, J. Insley, and M. E. Papka, "Interacting
witliScientijic Visualizations: User-Intetface Tools
within Spatially hnmersive Displays," Argonne National

Laboratory, Argonne ANWMCS-P789-0 100, January
2000.

42

