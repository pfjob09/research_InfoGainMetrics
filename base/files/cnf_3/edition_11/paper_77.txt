Visual Interaction with XML Metadata
Vladimir Geroimenko and Larissa Geroimenko
School o j Computing, University of Plymouth, Plymouth PLA 8AA, UK
vladg @ soc.plym.ac.uk, larissag @soc.plym.ac.uk

documents. The use of XML has many advantages, since
an XML file contains not only data (like HTML) but also
metadata - structural and semantic information about that
data. In this sense, an XML document is very similar to a
database, and the Second-Generation Web in general will
look like one big database [7].
Since XML is a platform and application independent
language, the visual and logical presentation of XML data
to the end user will generally be defined not by a browser,
but by an application distributed together with specific
XML documents. This means that the same information
can be presented in many different forms, including
visually rich ones. Thus, visualisation of Web-based data
is likely to be promoted from a technique treated as being
‘sometime useful’ to a universal means of representing
information, which is equally valid as any others. Any
content of the XML-based Web (including its semantic
and structural aspects) can be represented in a visually
rich 2D or 3D form if its creator and viewer so wish. It is
enough to remember limitations of the current HTMLbased Web (with its predefined set of tags used solely for
content formatting) in order to understand that XML
brings with it a complete shift in using visualisation on the
Internet.
Therefore, it is highly possible that visualisation of the
XML-based Web will become a new, exciting area of both
scientific research and practical applications. Due to the
novelty of this field, significant results to date are
restricted those described in a few recent publications [ I ,
2, 3, 61. At the same time, there is an enormous arsenal of
previously developed techniques and metaphors for
information visualisation [4, 5 , 81. Many of them may be
adopted creatively for an effective use on the XML-based
Web.
The novelty of the research area has determined the
specific problems that we are addressing in this paper. Are
there any visualisations that are embedded in the process
of XML document development? If so, how can they be
used for designing interfaces that enable rich visual
interaction with the data, metadata and structure of XML
documents? What technologies can be used for their

Abstract
This paper explores the possibility of developing
interactive visually-rich interfaces that enable Web users
to access and manipulate XML metadata and underlying
ontologies. Native visualisations, i.e. those that are
integral parts of the process of creating and displaying
XML documents, are analysed in order to utilise their
potential in our interface design. As a result of adapting
and merging various native visualisations, a novel and
efficient representation of the XML document ontology
has been developed - the Generalised Document Object
Model Tree (G-DOM-Tree) Interface. This interface
represents XML metadata an,d their structure in a
comprehensive, intelligible and compact way that is
suitable for the Web-based manipulation of its elements.
After reviewing the main existing technologies for
implementing the G-DOM-Tree Interface, a working
prototype of an XML Ontology Translator is presented.
This application generates dynamically ontological
models of two XML documents in the G-DOM-Tree form
and then allows Web users to map them in order to
establish XSLT-based communications between XML
dialects that are syntactically dissimilar but describe the
same domain. The paper shows that visual interaction
with XML ontologies can provide a simple but effective
way of dealing with the problem of semantic
interoperability of XML docume,ats within real-life Webbased applications.

1. Introduction
Development of the World Wide Web has reached a
revolutionary new phase - the Second-Generation Web,
also known as the Semantic or XML-based Web. This
next-generation Web will be founded on XML (Extensible
Markup Language) rather then on HTML. XML is a
metalanguage that permits a set of users to create its own
mark-up language for describing the contents of Web

539
0-7695-1195-3/01 $10.00 0 2001 IEEIE

‘I

the domain, its objects (elements), their properties
(attributes) and relationships. Therefore, this visualisation
may have a very high heuristic potential for user interfaces
that enable visual interaction with XML ontologies.

rendering and viewing? Which of them are most suitable
for implementing interactive graphical user interfaces? It
is quite obvious that we need to deal with these issues first
in order to start advancing in the area of visualisation of
the XML Web. On this conceptual basis, a working
prototype will be developed to implement interactive
dynamic interfaces as a visual aid for manipulating XML
metadata and translating one F L ontology into another.

2. Native visualisations of XML documents
The process of designing and parsing (reading) an
XML document necessarily includes several visual
representations of the document content and structure. We
will call them the native visualisations of XML
documents. Although they are being used exclusively for
design and programming purposes, our hypothesis is that
they might also be helpful within visual interfaces for
XML documents. Of course, they will probably need to be
transformed and adapted in order to do their new job
efficiently.

Figure 2: XML Schema Visualisation

Figure 2 shows the XML schema of the Art Catalogue,
presented in a visual, diagrammatic form. It looks very
similar to the above ontological model. In principle, a
UML model can be converted into an XML schema
automatically, although in the case of complex XML
documents it may be difficult to achieve without human
intellectual help. In comparison to a UML ontology, an
XML schema contains some additional technical
components that are necessary for computers but are not
so important for human understanding of the domain
structure.
Once an XML schema is constructed, it can be used as
a template for creating an unlimited number of XML
documents. The design process is finished, and the next
stage of reading and displaying the created documents lies
ahead. The first step in this stage is parsing (reading) an
XML file using a special program called the XML parser.
It can be a standalone parser or an integral part of a Web
browser. A parser reads an XML file and constructs a
hierarchical tree of nodes in the computer memory (called
the XML Document Object Model or the XML DOM).
The DOM of our Art Catalogue created by a Java-based
parser is shown in Figure 3. Any structural component of
an XML document (elements, data, etc.) is represented
within its DOM as a node. Basically, a proper XML DOM
contains nothing else but nodes. The DOM visualisation
looks quite technical from the user's point of view. Since it
contains the maximal number of structural components
(nodes) which may be extracted from an XML document,
it is very difficult for the user to traverse the node tree of a
complex XML document. Nevertheless, as it will be
shown later, it is possible to use a DOM tree as a
navigational aid within a graphical user interface.
Thus, the process of designing and parsing XML
documents involves at least three native visualisations.
They have more similarities than differences. These

Art Catalogue Ontology (UML)

Figure 1: UML-based visualisation of the Art
Catalogue ontology

To analyse and compare the main native visualisations,
we will take the process of creating a simple Art
Catalogue as an example. This process starts with
choosing a vocabulary, i.e. words and phrases that are able
to describe all the required aspects of the Art Catalogue
content and therefore can be used as tag names. The next
step is to show relationships between vocabulary entries,
or in other words, to create ontology of the Art Catalogue
domain, A common way of doing this is using UML
(Unified Markup Language), its diagrams and notations.
The UML-based ontology shown in Figure 1 is the
initial native visualisation of the content of the XML
documents to be created. These diagrams are much more
human-oriented than any other native visualisation. It is a
thorough conceptual model that captures a human view of

540

It is possible to format an XML document in order to
display it in a browser as a normal HTML page that
includes links, tables, a variety of fonts, colours, etc.
Cascading Style Sheets (CSS) are more suitable for simple
formatting, whereas the Extensible Stylesheet Language
(XSL) allows not only complex formatting but also
transformation of XML documents. Although displaying
XML as HTML or XHTML documents seems to be the
main technique of their presentation on the Web (at least,
in the foreseeable future), it does not provide the levd of
interactivity required for creating effective visual
interfaces, It lacks direct manipulation features, which are
hard to implement even using Dynamic HTML
(DHTML).

visualisations may be of use for creating visual interfaces
that enable the user's interaction with XML metadata.

Figure 3: DOM Visualisation

3. Current technologies for rendering XML
documents
3.1. HTML, CSS and XSL
Figure 4: Internet Explorer 5 Rendering

If the visualisations that .are native to the XML
development process can be useful in designing interfaces
for XML applications, what about technologies and
languages available for the implementation of visually rich
interfaces? First at all, it should be noted that an XML
document as such has no specific visual form other than
the plain text view. Indeed, an XML file (unlike a HTML
file) does not contain any formatting tags and therefore
requires specialist external files or even applications for
its visual rendering.
Figure 4 shows how the 'Catalogue.xml' file appears
in Microsoft Internet Explorer 5. The main difference
between this view and a plain text view (for example, in
Notepad) is that Internet Explorer allows collapsing and
expansion of XML elements that have child nodes.

If the HTML/XHTML rendering has a distinctly
limited potential for contributing to visually rich
interactive interfaces, what languages and techniques are
more suitable'? In principle, any programming language
may be equally relevant, as XML is language independent.
Although this is true in theory, the real-world situation is
much more complicated. For different reasons, only a few
languages will be of wide use on the XML-based Internet.
An analysis of today's situation and trends reveals the two
major players-- Java and Actionscript.

3.2. Java
It is no surprise that Java is the closest companion to
XML. Like XML itself, Java is platform independent.

54 1

to Macromedia, seven of the top ten visited sites on the
Internet deploy Macromedia Flash authored content, and
92 % of current online users are able to experience this
engaging content immediately using a pre-installed
Macromedia Flash Player [lo]. Although Flash began its
life a simple vector-graphics and animation tool, it has
evolved into a new platform for developing entire Web
sites that is presently used by over half a million Web
authors world-wide.
Thus, the Java and Actionscript languages seem to be
the two main contenders for XML development. They can
complement each other very well: Java is a choice for
complex and serious B2B applications, Flash Actionscript
is good for graphically-rich interactive Web pages, portals
and standalone e-commerce applications. Although Java
applets and Flash movies have the same mission as
interfaces for XML-based applications, Flash technology
offers a simpler and more engaging solution. The history
of the Internet (e.g. Java applets versus GIF animations)
shows that such solutions have a greater chance of
survival.

This means that a combination of XML documents and
Java applications or applets provides e-commerce
developers with a universal and portable solution.
Combining XML with any other programming languages
(such as C or C++) may result in losing its cross-platform
features. Another reason for using Java for developing
XML applications is that Java has become the de facto
number one programming language, and so it is a natural
choice for most programmers.
Sun Microsystems, Inc. [9] provides developers with
the following core Java technologies for XML: the Java
API for XML Parsing (JAXP), the Java API for XML
Messaging (JAXM) and the Java API for XML Data
Binding (JAXB). These key APIs will be included in the
next releases of the Java 2 Platform (both Standard and
Enterprise Editions). Together, these three Java
technologies provide developers with a powerful and
easy-to-use tool set. JAXP allows them to integrate any
XML parser with a Java application in order to read,
manipulate and generate XML documents. JAXM enables
B2B messaging through support of a variety of XML
messaging methods, including the ebXML standard.
JAXB offers two-way mapping between Java objects and
XML documents, including the automatic generation of
Java classes from XML schemas. With the delivery of
JAXP, JAXM and JAXB, Java increases its potential as
the main programming language for XML development by
offering even more simplified and integrated solutions.

3.3. Flash Actionscript
Whilst Java is the obvious choice for XML developers,
the Actionscript programming language is hardly known
to most of them at this moment. What is Actionscript and
why can it be cited, along with Java, as one of the most
important tools for the future of XML development?
Actionscript is a complete JavaScript-like language
that allows Macromedia Flash 5 developers to read,
transform and generate XML documents. The methods of
the Actionscript XML object can be used for
downloading XML data from a server, accessing and
manipulating XML nodes, sending XML documents to a
server and displaying them within a Flash interface.
Additionally, Actionscript provides a predefined
XMLSocket object for establishing a continuous
connection with a server.
Generally speaking, Actionscript offers the same
opportunities for XML development as any other
programming language. What makes it unique is that it
belongs to the Flash paradigm. Macromedia Flash is one
of the most popular Web technologies. Flash allows
designers to create reliable, dynamic and graphically rich
Web sites for entertainment and e-commerce. According

Figure 5: Flash Rendering

Thus, Macromedia Flash technology is at present the
best choice for creating visually rich and highly interactive
interfaces because multimedia, animation and interaction
is the true nature of this Web leading technology. By
adding an embedded XML parser and the Actionscript
language with its specialist XML objects, version 5 of
Flash has become the most powerful tool for developing
real-life Web-based applications. For example, Figure 5
shows an application we created using Flash 5 and its
Actionscript. This application can read an Art Catalogue
XML file and display it in an attractive and interactive
visual form that enables the user to browse the Catalogue.

542

From a technological point of view, this visualisation
can be easily implemented as a Flash movie or Java
applet, essentially by exploiting their techniques for
generating dynamic menus.

4. The Generalised DONI Tree Interface
There are several possibilities for designing graphical
user interfaces to XML documents based on existing or
novel visualisation techniques. We have tried to develop a
new interface that enables effective visual interaction with
XML metadata. Our research was based on the above
analysis of the native XML visualisations as well as some
further logical and experimental exploration of the
possibilities of their mutual use and integration. The result
of the investigation was embodied in a novel interface that
we call the Generalised Document Object Model Tree
Interface (or, for short, the G-DOM-Tree Interface).
This Interface is based on the XML DOM
visualisation, generalised and enhanced to make it more
suitable for effective visual interaction with metadata.
Basically, it is a part of a DOM tree where all logical and
structural components of an XML document are
represented as nodes. The main difference from a DOM
tree is that our model borrows from a standard DOM only
its recurring metadata structure. By implementing this, it
becomes very similar to an XML schema or a UML
model. But, at the same time, the G-DOM-Tree model
inherits the structural organisation of a DOM rather than
of a schema or an UML diagram.
Figure 6 shows the G-DOM-Tree representation of the
Art Catalogue. Both types of metadata (elements and
attributes) are represented as nodes that show
elemenvattribute names and their places within the XML
document structure. Each attribute has the status of a
special child element of its parent element. The letter and
colon “a:” in front of a node name is the only difference
between an attribute and an element. To make the
organisation of the node tree more apparent, each
structural level is indented and also marked with a
different colour.
The features of the G-DOM-Tree view that make it an
efficient and promising visualisation of XML metadata
include:

Figure 6: The Generalised DOM Tree Model of the Art

Catalogue
Thus, the Generalised DOM Tree is a novel technique
for visualising ontologies of XML documents, on the fly,
within Web-based user interfaces. Its practical use in a
variety of XML applications may therefore be expected.

5. The Ontology Translator: Implementing
the G-DOM-Tree interface
To implement the concept of the G-DOM-Tree-based
visualisation, a working prototype of a simple Ontology
Translator has been developed using Flash technology.
This application can read XML files and generate
dynamically their Generalised DOM Trees (Figure 7).
Any interface object can be manipulated directly. By
dragging and dropping an object (i.e. a framed element or
attribute name) on a specific target (another interface
object), the user triggers the underlying Actionscript that
can rename, add or delete appropriate nodes in the XML
documents.
The following example illustrates and explains the use
of the Ontology Translator.
Suppose there are two collections of XML documents
on the Web that describe the same domain using different

The ontology of an XML document is represented in
a comprehensive form, which, at the same time, is
much more compact than an UML model or an XML
schema;
It is easy to read and understand because of its
indentation-based form that matches the recurring
structural pattern of an XML document and also
because of the use of the document tag names;
All attributes are displayed as specialist children
elements marked with the “a:” prefix, making it easy
to transform an element into an attribute and back
simply by adding or deletiing the attribute prefix “a:”;

543

“American” Art Catalogue or, more generally, establish an
XSLT rule for translating one element into another.
Deleting or adding the “a:” changes the node status in
terms of “element - attribute” not only on the interface but
also in the XML document itself. Dragging the “Info”
element onto the “Description” results in converting the
children of the “Info” into the text value of the
“Description”.
Thus, the Ontology Translator is a prototype
application that enables visual interaction with metadata
of two XML dialects in order to establish communication
between them. This Web application implements both the
G-DOM-Tree Interface and the Flash XML technology. It
allows domain experts to work effectively in order to
solve real-life problems of interoperability of Web-based
XML documents.

XML dialects. In other words, they are employing two
dissimilar sets of tags, most or all of them synonymous to
human domain experts, but not to computers.

6. Conclusion and further works
Our research has been focussed on possibilities of
developing interactive visually-rich interfaces that enable
Web users to access and manipulate XML document
ontologies. The native XML visualisations were analysed
and, on the basis of their integration, a novel and efficient
interface for displaying XML document ontology (the
Generalised DOM Tree) has been developed. It has been
implemented in an Ontology Translator working prototype
using the Macromedia Flash XML technology. Our
research and prototype implementation has shown that
visual interaction with XML ontologies provides a simple
but effective way of dealing with the problem of semantic
interoperability of XML documents within Web-based
applications.
The next logical step in the development of G-DOMTree-based interfaces is in using them within some reallife e-commerce applications to reveal aspects that need to
be enhanced or rethought. A Java version of the interface
may be required for its integration with Java-based B2B
applications.

Figure 7: The Visual Ontology Translator

Comparison of the ontologies of the two Art
Catalogues, shown in figure 7, reveals the following main
differences and similarities:

0

The root element names (“Catalogue” - “Catalog”)
are written in British English and American English
respectively;
The metadata tag “Item” has the same meaning in the
first catalogue as the “ArtObject” in the second one;
The same synonymy exists between the following
pairs of tags: “Price” - “CatalogPrice”, “Info” “Description” and “ImageFile” - “ImageURL”;
The nodes “a: catalogue-id” - “Catalog-ID’ and “a:
item-id” - “Object-ID’ are synonyms, but they have
different status (an attribute versus an element in each
pair respectively).

Now imagine that you need to establish Web-based
real-time communication between the two XML dialects,
for example, in order to merge the “British” and
“American” catalogues. It is quite obvious that there is no
software like “intelligent agents” that could accomplish
this task for you. It is a good idea to develop XSL
translations for these documents but it requires time and
technical knowledge.
The Ontology Translator allows any person, without
XML or XSLT knowledge, expert in the domain, to map
the two ontologies easily and efficiently. For example,
dragging the “Catalogue” element and dropping it onto the
“Catalog” can rewrite the name of the root tag in the

7. References
[ 13 Berder, M., Klein, R., Disch, A. & Ebert, A. (2000) A
Functional Framework for Web-Based Information
Visualisation Systems. IEEE Transactions on Visualization and
Computer Graphics. 6( 1): 8-23.

[2] Bonfigi, M.E., Casadei, G. & Salomoni, P. (2000) Adaptive
Intelligent Hypermedia Using XML. Proceedings ofthe 2000
ACM symposium on Applied computing 2000. Vol. 2, p. 922926.

[3] Boon, P.J., Eminovi, N., Vos, A. de, Raaij, E.J. van,
Broeder, M.J. den, Hage, W. & Verbeek, F.J. (2000) A Virtual

544

.

Psychological Techniques. Proceedings of the 2000 IEEE
International Conference on Information Visualisation, London,
p. 529-532.

Lab-Notebook for multidimensiond Microscopic Images: The
Application of XML on Microscopic Image Data. Proceedings
of the 2000 IEEE International Cofiference on Information
Visualisation, London, p. 187-191.

[7] Hellman, R. (1999) A Semantic Approach Adds Meaning to
the Web. Computer, December 1999, p.13-16.

[4] Card, S., MacKinlay, J. & Shneiderman, B. (Eds) (1999)
Readings in Information Visualisation: Using Vision to Think.

Morgan Kaufmann Publishers.

[8] Ware, C. (2000) Information Visualisation: Perception f o r
Design. Morgan Kaufmann Publishers.

[SI Chen, C. (1999) Information Visualisation and Virtual
Environments. Springer Verlag.

[9] Sun’s Java Home Page. http://java.sun.com

[6] Geroimenko, V. & Geroimenko, L. (2000) Visualising
Human Consciousness Content Using Java3D/X3D and

http://www.macromedia.com/flash

[IO] Macromedia Flash Home Page.

545

