Environment pi J for Visual Programming in Java

Vladimir V. Prokhorov, Ph.D. in Math
Vadim A. Kosarev
Institute of Mathematics and Mechanics, Russian Academy of Sciences/Ural Branch

Abstract

tion, in structured representation of large modules, and in
other cases.
Furthermore, there is a trouble related with necessity
for user to have relatively high “starting level” of language knowledge to use traditional authoring tools, even
if it is needed to create a simplest program. On the other
hand, the traditional tools not allow to tune programming
language on demands of specialist in concrete partial area
of programming, to construct specialized language.

Authoring tool “J (piJ) is based on original results
in ureas of visual languages and programming technology. It is developed 2 main versions: (a) a tool to progrum in Java (as stay-alone tool, as add-on for MS
FrontPage, and as component of our MetaCulc environment), (b) add-on for MS FrontPage to develop fragments
in JavaScript. The sofntaare supports churt versions of
Java and JavaScript in Prokhorov’s structured n-chart,
flow-chart, and Nessie-Shneiderrnann structure grams. “J
includes tools to convert a plain Java text to chart and
back. The tool ~110~s user to change textual representation of any structured part of a program to graphic one
and back.. The tool realizes technology of extension/cutting of user language and technology of linking
with external languages. A version of a tool supports programming of microprocessor 28 in visual assembler. The
tool can be used in software design, education, web design, supercomputing, und another areas

2: Main features of the authoring tool “J
“J is an environment for development of professional
software in MS Windows-98 or MS Windows NT basing
on concepts of object-oriented programming. There are no
any restrictions on complexity of programs developed in
the tools.
“J can operate with two kinds of program file formats. On the one hand, the tool allows to open and save
text file with program in plain Java. On the other hand,
the tool allows to save and open program file as structured
container-storage. The file-container can include text of
the program in plain Java, additional information for
graphic formatting, compiled modules, icons, embedded
elements of a program, menus, documentation, colors,
metrics, and another settings, etc.
The tool operates together with Java Development
Kit by Sun Microsystems and uses compiler, debugger
and libraries of the JDK. However, the tool displays messages of JDK about errors in terms of graphical program.
Some characteristics of the above mentioned
authoring tools and “J are compared in the following table.
The current version 1.3 of the tool is created in Borland C++ ver. 5.0 for MS Windows--98 and MS Windows
NT and in Java.

1: Introduction
There are wide known a number of “visual” authoring tools for programming in Java, such as Symantec
CafeTM by Symantec@, Visual J++TM by Microsoft@,
Visual AgeTM for Java by IBM@. The main feature of the
tools is possibility to edit elements of graphic user interface in their natural visual representation. More, the tools
support graphic representation of program structure for
packages, classes, methods and variable-fields levels. The
tools apply the visual representation to view, edit, and
debug programs. Nevertheless, there is applied classic
textual representation of algorithm in method descriptions
in the tools. However, a graphic representation of the operator level of a program can be convenient in some areas.
Representation of algorithm by a chart is useful in educa-

O-7695-0210-5/99 $10.00 0 1999 IEEE

535

Visual Age
(IBM)
l

l
l

Java

classes level
methods and variables-fields level

representation of structure
l packages level
l classes level
ariables-fields level

ip - me
.> rreature
.
.
.
unaer construcuon.
This is a screenshot of “J:

536

Visual J++ (Microsoft)

The main elements of “J window:

-I

classes
‘x.

‘MyDIalog’
‘MyDtalog(Strmg
‘void mam(Slring
‘void run(void]

.-

1ntetfaces
.-:

Vwble’
‘void show(boole
‘void show(vold)

Program project
tree contains
information about
program entities.

. 9s Ncssie-Shneidermann’s structure gram.
The form of representation can be free changed in
any time by tabs on the left bottom part of program window. “.I allows converting programs in plain (textual) Java
to chart form, and from chart form to plain text.
The following screenshots shows these representations of the same simple program fragment.
This is a screenshot for “structured x-chart” mode:

3: Visual programming of algorithms in ?J
The main distinctive feature of the tool is possibility
to use graphical representation of algorithm in program
method’s description. The tool allows to show a program
parts as plain text in JAVA and graphically:
l
as structured n-chart [ 1, 21,
.
as structured flow-chart, and

537

Structured flow-chart:

Nessie-Shneidermann’s structure gram:

‘
, method ‘boolean h.
“; method ‘void mafn(
‘!, class ‘DrawPanel’
“t ‘on~tructor ‘DrawF
‘; method ‘void seti3
“: method ‘boolean h.
“; meti& wild petna
-:-, class ‘DrawControls’
‘;
method ‘vofd pamt(
“, method ‘boolean a

“;

COnStrUCtor rJrawC

Here is used innovative additional form of program
structure impression for flow chart and for NessieShneidermann’s structure gram (the feature is switched
off for screenshot for x-chart mode). The form uses intensity of background color of fragments to reflect different
level of hierarchy.

4: Mixing of graphical and text
representation of program
The tool allows user to select, what parts of a program should be looked as chart and what parts should be

538

looked as text. User can change graphical or text look of
any structured part of program independently, to make the
program look much convenient. Moreover, the software
allows mixing chart and textual representations of different parts of a program and change look of a fragment
from text to chart and back. That is some parts of a program can be represented as charts, but others can be represented textually. A chart may include textual fragments,
howeve r textual fragment can not include a chart yet.

‘
: mefhod ‘VOld Init()’
“: method ‘boolean IIS
‘;: method ‘“old main(’
2, class ‘DrawPanel’
‘
I c~n~tr~ct~r DrawP.
Iis method ‘void set!%
“; method ‘boolean h5
“; method ‘void palnt(l
-!; class ‘DrawC<~ntrols’
;; constructor ‘DrawC~
“; method ‘“ad pa,nt(l
“; method ‘boolean ac

User may set number of top levels of program hierarchy, which should be represented graphically, then
bottom levels will be represented as plain text.
One more command allows to represent elements
(methods, classes, variables, etc.) of textual parts as icons.
The following screenshots illustrate change of
graphical representation of program fragments (shown on
the last screenshots) to textual one:

.

5: Working area
One of innovative features realized in “J is operating
with “working area”. User can set any structured part of a
program as working area. Then the working area is
bounded by a frame.
Setting of working area allows to achieve the following features:
.
Use of remarkable frame as bookmark for visual
navigation in a program.

This is a screenshot for “lock non-working area” mode:

Use of the command “Go to working area” for quick
navigation by jump to bookmark.
.
Make part of a program outside working area be
locked for any changes.
.
Make part of a program outside working area be invisible.
Mode of non-working area representation is selected
by tabs in right bottom side of program window. Change
of modes can be protected by password.
The following screenshot corresponds to “normal”
mode of working area representation:

In the “lock non-working area” mode, program area
outside working area is locked for any change. The mode
can be protected by password, then user can’t change
elements outside non-working area without authorization

Non-working area is visualized in low-contrasted gray
scale.
This is a screenshot for “hide non-working area”
mode:

The “hide non-working area” mode can be protected
by password, then user can’t change elements outside
non-working area without authorization.
Note, that the tool remembers what mode of representation of working area was used, and old program is
opened in the same mode as when the program was saved.

ods). Note, that the tab can include references on external
libraries of classes too.
The content of the tab “favorites” of the elements
palette is saved with the program in the program file container.

7: Templates
6: Favorites
The tool allows to use any program as template to
start new project.
This is very powerful feature, because file-container
of program includes not only source of the program, but
structured list of favorites, description of working area
and mode of the working area representation, some settings of the tool, etc.
Such a way, a template can includes description of
specialized language with operators, included to
“favorites” tab of the elements palette. The following
screenshot shows the palette with turtle control elements
and a simplest program in graphical Java with the turtle
control elements:

The instrument palette of the tool includes tab
“Template Items” (or “favorites”), which includes hierarchically organized icons of some classes, methods, and
variables of developing program. The elements of the tab
can be dragged by mouse to program window to be inserted to the created program chart.
To set/remove a program unit to/from the tab it is
necessary to check/uncheck a flag in the header of the unit
description in the program. Structure of the icons in the
tab is corresponding to structure of descriptions in the
program (classes in the tab looks like folders for meth-

541

The descriptions (particularly, references to library
items) can be hide for end user, being outside of the
working area. User can operates in working area, which is
preset for the template, not seeing something outside the
working area, however the user can use elements included
in the favorites palette.
So, the tool can include a set of programs-templates,
that forms specialized environments for partial classes of
problems.
The feature allows so simplify the programming, that
common-used as simplest program printing “Hello,
world’ consists of 1 operator.
One example is a template that includes library for
Logo-like turtle control. The template allows create object-oriented programs for number of turtles in Java-based
extension by children. Web site http://vDro.convcx.ru/igor
(htt~~://i~o~ro.hv~~ctmart.nct) includes some applets developed by 10 years old kid after some hours of introduction to “J. Another example is a template that includes
main tools for designer of web-sites.

One more example is template with collection of
tools, supporting computing (such as modules for differential equation modeling or solution of convex optimization problems) using supercomputers.

Moreover, “J includes the following features related
with component n-model [3, 41:
.
support of Java applet creation as plug-in for HTML
page (it is developed for MS FrontPage);
.
support of programming in JavaScript as plug-in for
HTML page (it is developed for MS FrontPage);
.
can be applied as component of our MetaCalc tool for
visual functional programming.
A version of a tool supports programming of microprocessor 28 in visual assembly language.
The tool can be used in education, in web design, in
supercomputing.

References

8: Subsystems
“J supports multilanguage technology [3, 41 and allows user to define language “subsystems” to assign external elements to sublanguage program elements. A subsystem is defined by software which should activate for
the program element for various stages of work: creation
of such an element, editing, compiling, execution, deleting, copying, printing, etc.
An example of a subsystem is the one allowing to incorporate supercomputer resources in Java program. Note,
that multilanguage multicomputer distributed program
seems like one program in the tool. The following screenshot shows a program fragment that includes plug-ins in
C++ and Pascal, and window of “CPP” subsystem properties:

tj1

t21

[31

The author, developer and manager of the project is
V. Prokhorov, programming is fulfilled by V. Kosarev.
The paper authors would like to thank A. Yakovlev, D.
Toropov, M. Prokhorova, and L. Volkanin for participation in the project.

141

542

Prokhorov, V. Pi-charts: the language for graphical representation of algorithms and syntactical descriptions. Cybernetics and Systems Analysis, 1992, NQ p.93-107
(ISSN 1060-0396)
Prokhorov, V. On representation of syntax definitions. In:
J. G. Chen, ed. Expert Systems Applications and Artijiclai
Intelligence. Technology Transfer Series. IITT International, Gournay-Sur-Marne, 1995, ~53-58 (ISBN 2-90766931-l).
Prokhorov, V. PYTHAGORAS: multienvironment software. In: B. Blumenthal, J. Gornostaev, and C. Unger,
Eds. Human-Computer Interaction. Lecture Notes in
Computer Science 1015. Springer Verlag, Berlin, 1995,
p.135148 (ISBN 3-540-60614-9).
Prokhorov, V. On the microcontext approach to construction of knowledge representation languages and humancomputer interaction. Journal of Computer and Systems
Sciences International, 1997, Nc5, p.5-16 (ISSN 10642307).

