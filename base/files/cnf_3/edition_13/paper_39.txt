Direct Manipulation of Surfaces using NURBS-Based Free-Form Deformations
Robert A Noble1, Gordon J Clapworthy2
1

Department of Mathematics & Computing, The Robert Gordon University,
St. Andrew’s Street, Aberdeen, U.K.

2

Department of Computer & Information Sciences, De Montfort University,
Hammerwood Gate, Kents Hill, Milton Keynes, MK7 6HP, U.K.
email : rn@scms.rgu.ac.uk, gc@dmu.ac.uk
Abstract

This paper demonstrates how NURBS-based FreeForm Deformations (NFFDs) can be used to generate
and sculpt NURBS-based objects in a way that avoids
many of the limitations of ordinary FFDs. A system is
described in which the user interacts with the NFFD
through a set of direct-acting tools, removing the need to
manipulate the mesh directly. As the user applies the
tools to the object, the NFFD is updated automatically.
Objects are represented as isosurfaces of the NFFD
volume, giving a good insight into the way an NFFD
would deform a general object.
Keywords : free-form deformation, geometric modelling,
parametric surfaces, NURBS, sculpting

1. Introduction
Much work has been done in recent years on methods
which allow computer-based flexible objects to be
modelled as if they were real models made of clay. The
twisting and bending transformations of Barr [1] were a
step in this direction, shaping tools were designed by
Cobb [2] specifically for B-Spline surfaces and the freeform deformations (FFDs) of Sederberg & Parry [3]
represented an important step forward, allowing objects to
be deformed in a controlled and meaningful way.
This paper describes a technique which uses NURBSbased FFDs (NFFDs) to generate and sculpt such flexible
objects. The technique avoids many of the limitations of
ordinary FFDs, when used on NURBS-based objects.
Shaping flexible objects often has two phases, a
general transformation to obtain a rough shape, followed
by local transformations to add detail (Blanc & Guitton

[4]). In our case, the two phases are the generation of an
NFFD mesh, followed by the manipulation of the weights
of the mesh. Only weight changes are considered since
we wish to animate the object at a later stage by
controlling the position of the mesh points.
The intention of the system is to present the user with a
generic object (the general transform) which they can
then sculpt locally to their required shape (the local
transform). As such, the NFFD mesh is not designed to
include specific local detail. However, analysis of the
technique shows that the mesh can be adapted to
represent tools which supply specific detail, in a manner
similar to the Extended FFD (EFFD) of Coquillart [5].

2. Background to FFDs
A general method for deforming an object in a freeform manner is as follows. Firstly, define a volume
enclosing the object; secondly, define a method of
deforming the volume; and finally, make the object
deform as part of the volume it occupies. For this
approach to be useful there must be a simple and
meaningful way of deforming the volume. This was
provided by Sederberg & Parry [3] in their FFD technique
by using a tricubic Bézier volume. This volume can be
deformed by altering its control points, in an analogous
manner to deforming a Bézier curve.
The FFD technique proceeds as follows:
1. Define a spline volume enclosing the object using a
3D control mesh and the 3 spline parameters (v, u, t).
2. Take a set of points (xi, yi, zi) describing the embedded
object and find their corresponding parametric coordinates (vi, ui, ti).
3. Deform the volume by manipulating the control mesh.

4. Calculate the positions of the points describing the
object in the deformed volume, using their parametric
co-ordinates and the updated control-point positions.
In general, embedding the object as required in step 2
is an iterative process and hence slow, since the isoparametric surfaces, v = constant etc., are spline surfaces.
Sederberg & Parry [3] simplified step 2 by using a mesh
in which all the control points Pijk for a given i, j or k lay
on a plane – the resulting isosurfaces were then planar.
Using parallelepipeds means that the range of volumes
which can be constructed is very limited. EFFDs [5]
overcame this by using tricubic Bézier volumes, each
representing a basic FFD, but not necessarily having
parallel faces. By careful design, continuity was
maintained across adjacent volumes so that, for example,
a cylinder was built of wedge-shaped volumes. Although
more flexible as a deformation, embedding the object
inside the volume demanded an iterative solution.
The basic FFD and the EFFD were complicated by the
fact that joining two Bézier volumes imposes certain
conditions on the control points if continuity is to be
maintained. This problem is removed if the volume is
defined by B-splines or NURBS, as in the system based
on B-splines described by Hsu et al [6].
Lamousin & Waggenspack [7] describe a system of
NFFDs based on a mesh built from rectangular
parallelepipeds. Using NFFDs allows the whole object to
be enclosed by a single mesh, with as many control points
as the user requires, without continuity problems.
This system overcame the problem with FFDs that, in
general, the deformation volume does not fill the whole
mesh volume, by using multiple end knots. For a nonparallelepiped mesh however, even having multiple knots
does not force the volume to fill the whole mesh,
although the convex hull property means that it
approximates it.
One example showed a leg enclosed in a rectangular
mesh with 5×5×13 control points. The leg could be bent
by moving groups of control points and shaped locally by
changing appropriate weights. Whilst the NFFD mesh
allowed the leg to be sculpted, there were 208 weights
which could be adjusted, 99 of which were internal to the
mesh and therefore difficult to access. Furthermore, the
range of influence of some of the internal weights could
include both the front and the back of the leg, making
them unusable for deformation purposes.
®
Modelling packages such as Amapi 3D allow a user
to enclose an object in an FFD mesh and then manipulate
the mesh. However, it is often difficult for a user to know
what changes to make to the mesh to obtain the required
results, particularly when weight changes are available.
What they need is a method of defining the required

change and to have the system change the mesh
appropriately, allowing direct manipulation of the object.
Davis and Burton [8] presented an early result which
moved in this direction by building an FFD system which
allowed the user to bend, twist and taper an object.
Hsu et al. [6] took this further, allowing the user to
select and move points on the object's surface using the
mouse; the system calculated the changes required to the
control points. A bust modelled from a sphere using a
rectangular B-spline mesh had 20×20×20 control points.
With 8,000 control points, 5,832 of which are internal,
manual manipulation becomes almost impossible.
Hsu et. al. point out that the control lattice is not
usually directly related to the object. Suppose, for
example, one were trying to deform a leg which was
already bent. Simply encasing it in a global rectangular
control net would not be very helpful if the aim were to
perform local deformations.
Finally, there is the question of how to represent the
deformed object. Even if the original form is known
analytically, the final form may not be easily represented.
For example, Lasser [9] states that a rational Bézier
surface of degree (L, M) deformed by a rational Bézier
FFD of degree (l, m, n), results in rational Bézier surface
of degree (rL, rM), where r = l + m + n. For a general
surface, Coquillart [5] suggested using subdivision to
maintain resolution. This may make it difficult to use the
resulting surface in keyframe animation. For example,
when animating an object, we wish to sculpt it using an
FFD at the first key position, transform the result to the
second key position, sculpt using an FFD again, etc.
This discussion has highlighted a number of potential
difficulties of the FFD technique:
1. Maintaining object continuity is not trivial when using
multiple Bézier volumes. B-splines or NURBS are to
be preferred.
2. Embedding the object (step 2) is non-trivial for any
but uniform parallelepiped meshes.
3. Internal control points may effect large parts of an
object and hence be unsuitable for local deformations.
4. For parallelepiped meshes, the generated volume does
not fill the mesh volume unless multiple knots are
used. For non-parallelepiped meshes the volume is
not filled, even with multiple knots.
5. Large meshes have many internal points which cannot
easily be seen or used.
6. Tools are required to help the user sculpt the object,
particularly with large meshes.
7. After applying an FFD, the surface does not generally
have a known analytic description; its data description
thus becomes increasingly complex.

Having discussed the problems relating to FFDs, the
paper now proceeds as follows. In Section 3 we discuss
our approach to free-form sculpting which avoids the
above problems. Section 4 describes the direct acting
tools which remove the need for the user to know how to
manipulate the mesh. Section 5 then considers the effect
of the NFFD on the total volume, as required for
application to non-NURBS objects. Section 6 considers
the results in the light of the problems outlined above and
Section 7 outlines some future work.

From Eqn. (2), each N-point is on the straight line
joining its corresponding C-points (2 double points). The
initial mesh points are therefore placed as required to
generate the rough shape of the object, there being no
specific restriction on their positions. This allows the
initial rough object to be produced by defining a suitable
mesh and isosurface. Detail can then be added using the
NFFD weights. The object is thereby automatically
embedded in a suitable NFFD mesh for sculpting.

4. Direct acting sculpting tools
3. The free-form sculpting system
The usual way to use FFDs is to start with an object,
embed it in a mesh and then deform it. In our system, the
NFFD mesh is defined first, creating the rough shape of
the object as described below. The NFFD weights are
then used to add local detail. This avoids many of the
problems outlined in Section 2; it allows the mesh to be
deformed in a structured manner and the process to be
repeated to generate a series of key positions which can
be used for coherent animation – Noble & Clapworthy
[10].
As a first step, suppose we define an NFFD mesh, with
no particular constraints on the positions of the control
points, or the size of their weights. The volume defined
by the mesh is given by Equation 1 and depends upon the
three parameters v, u and t.
N v −1N u −1N t −1

∑ ∑ ∑C

vut .
v=0 u=0 t =0
N v −1N u −1N t −1

Q(v,u, t) =

∑ ∑ ∑w
v=0 u=0 t =0

w vut .B kt t (t).Bku u (u).Bkv v (v)

vut

(1)

.Bkt t (t).Bku u (u).Bkv v (v)

The technique of Section 3 overcomes the continuity
and embedding problems described in Section 2. It also
greatly reduces the number of internal control points and
the range of their effect. The mesh is well suited to the
object and, although the entire volume generated by the
mesh is not entirely obvious, it can be made more so by
using multiple knots in the t direction. The resulting
sculpted object is known in analytical form from Eqn. (1),
provided that there is a suitable way of performing the
sculpting, which is the subject of this section.
Consider first a simplified situation in which the NFFD
mesh is a simple rectangular array of points, with a planar
isosurface, as shown in Fig. 1. Only every third set of
control points is shown. The cubes represent the sizes of
the adjustable weights at the control points shown.
Increasing a weight at a point moves all affected points
within the volume towards that point, Piegl & Tiller [11].
In Fig. 1, an upper weight has been increased, thus
pulling the surface up. A lower weight has been
decreased, also pushing up the surface.

Setting t = tc = constant generates the isosurface which
we use as our object. It is a NURBS surface in
parameters u and v, defined by the control points and
weights:
k t -1

N vu =

w'

vu

∑w

=

vut

. B kt t (t c ). C vut

t=0

(2)

w 'vu

Figure 1 Sculpting by changing one NFFD weight

k t -1

∑

t=0

kt
t

w v u t . B (t c )

(3)

For simplicity, we refer to the control points of the
NFFD mesh, Cvut, as "C-points" and those of the NURBS
surface, Nvu, as "N-points".
We use cubic NURBS with 4 C-points across the mesh
(kt = 4), arranged in two pairs. Only the inner two
weights, w1 and w2, are varied, giving two active weights,
one on each side of the surface.

4.1 The three basic tools
This method introduces local detail, but both changes
above produce upward bumps, one sharper, one rounder.
This makes it difficult to sculpt the object by
manipulating individual weights. Instead, three tools are
supplied which change the weights in a controlled way to
produce meaningful changes in shape, Noble &
Clapworthy [10].

The Hammer tool changes the height of a peak
without changing its shape – for positive mesh weights,
the peak will always remain inside the mesh. The Crimp
tool changes the shape of a peak, without altering its
height (Fig. 2). Using this tool, sharpening increases the
mesh weights until the profile of the peak becomes
virtually triangular, while rounding decreases the weights
– this is limited by the fact that the weights should not be
allowed to become negative. The Reset tool resets the
shape of the object at the indicated point by returning the
weights to the values they had when the file was loaded.
Thus, when objects are saved and reloaded for further
sculpting, resetting restores the most recently-saved
shape.

The Very Small version affects one row, the Small,
Medium and Large tools each affect an added ring of
rows, centred on the point indicated by the mouse.
Fig. 3 shows the results of the Very-Small tool at the
front and the Medium tool at the back. The central peak
is from the Hammer tool alone, the left and right peaks
show the effect of then applying the Crimp tool.
An object may be sculpted by applying the tools. Fig.
4 shows the result of trying to sculpt a smooth, horizontal
ridge on the flat object. Those weights which have been
changed to raise the ridge can be seen to be larger above
the plane and smaller below the plane. Again, only every
third row of control points is shown.

Fig. 4 The NFFD control net for the ridge

The user applies the tools by pointing the cursor at the
object and clicking the mouse left/right button to increase/
decrease the effect – the system adjusts the weights
appropriately. Hence, the user does not need to see the
NFFD mesh, but can view the system as a set of tools,
connected to the mouse, which act directly on the object.

As shown in Fig. 2, each weight in the NFFD mesh
produces a bump at a specific surface location.
Constructing a ridge from such bumps produces an
aliasing effect similar to drawing a line on a VDU with
fixed pixel positions. To reduce this, the ridge in Fig. 4
was created using the Small tool, which affects both the
indicated control point and the four control points
connected to it. It is, in effect, "3 pixels wide". Detail
was then added using the Very Small tool.

4.2 Larger tools

4.3 Application of the tools to other objects

The tools described above operate on only one row of
the mesh (in the t-direction) and hence have a very
localised effect on the object's shape. Larger versions of
the tools can be defined by manipulating more than one
row of the mesh at a time.

The previous section illustrated the basic changes
which can be achieved by varying the weights of an
NFFD, using the direct-acting tools and a rectangular
mesh. The tools can also be applied to objects created
from other meshes. Their effect is similar (see Section 5),
and since there are only two active mesh weights across
the object, there are few hidden internal mesh points.
If the rectangular mesh of Fig. 1 is wrapped round an
ellipse, the isosurface becomes an elliptical cylinder. The
mesh now matches the shape of the object well. Each
mesh weight can only affect the cylinder locally, so there
is no danger that manipulations at an internal point will
alter diametrically-opposite parts of the surface.
Were the cylinder to be embedded in the more usual
rectangular NFFD mesh, sculpting would be much more

Figure 2 Changing the shape of the peak

Fig. 3 Bumps produced by the various tools

difficult to accomplish. Further, to produce local detail,
the mesh would require many control points across the
cylinder, leading to a large number of internal points,
some of which could affect diametrically-opposite parts
of the cylinder simultaneously.

Fig. 6 shows the same thing as the left side of Fig. 5,
but now the t values are uniformly spaced across the
whole range of t. The vertical lines are lines on which u
and v are constant and illustrate how these isolines are
pulled towards the increasing weight. Note that the end
points of these lines cannot move.

5. The effect on other isosurfaces
The system as described sculpts only the single
isosurface. To apply it to a general embedded object, we
need to know how it affects all the isosurfaces in the
volume. The embedding process for an object relates
points on the object to corresponding isosurfaces, the
deformation of which determines the deformation of the
object. This section considers how the tools affect all the
isosurfaces and shows that the effects are predictable.
The remaining figures each show five isosurfaces across
the volume.
If uniform knots are used in the t direction, the volume
generated by a rectangular mesh (Fig. 1) extends from
th
th
1/6 to 5/6 of the way across the mesh. Using multiple
knots forces the volume to fill the whole mesh, with a less
linear relationship between t and distance.
The relationship between the change in a weight and
the movement of points in the volume is well known
(Piegl & Tiller [11]). It is clear, both by experiment and
analysis, that the effect on the volume of changing a
weight is very similar for both uniform and multiple knots
th
th
in the 1/6 to 5/6 region. The latter will also affect the
whole of the volume, but the movement is very small
there.

Fig. 6. Isolines pulled by an increased weight

The tools, when applied, have similar effects on all
isosurfaces, with their effect moderated by the reducing
effects of the mesh weights across the volume. Fig. 7, for
example, shows the effect of the Hammer tool on a short
elliptical cylinder (uniform knots). Here, the mesh has
been wrapped around into an annular structure, with the tdirection being radial, Noble [12]..

Fig. 7. The Hammer tool acting on an elliptical
cylinder
Fig. 5. Multiple isosurfaces, multiple knots

Fig. 5 shows the result of increasing an upper weight
(left) and decreasing a lower one (right), using multiple
knots. Five isosurfaces corresponding to equally spaced
values of t, covering the 1/6 to 5/6 region, are chosen.
Note how the left side is pulled towards the increasing
weight and the right hand side pushed away from the
decreasing one.

6. Discussion
The system described here uses isosurfaces of an
NFFD volume as the initial objects, which can then be
sculpted as desired. This avoids many of the problems
associated with normal FFDs, whilst at the same time
giving a good insight into the behaviour of NFFDs under
changes in weights.

We now discuss the advantages of this type of NFFD
and then consider what can be learned for general objects.
Comparing the list of problems of Section 2 shows the
following. Firstly, since the mesh defines the object as an
isosurface, there is no continuity or embedding problem.
Secondly, the mesh shape naturally matches the object
shape. This is valuable where, for example, a cylinder is
encased in a matching mesh, not a rectangular block each
of whose weights has a different effect, according to how
close to the cylinder it happens to be. Furthermore, the
isosurface must remain within the volume, whatever the
limits of the volume.
Thirdly, it does not have large numbers of internal
weights which cannot be seen or accessed, but the tools
provided mean that the user does not have to manipulate
the mesh directly, anyway.
Fourthly, since each pair of active C-points affects
only its own local part of the surface, there is no crosscoupling across an object. One side of a cylinder, for
example, is not affected by the internal points of the mesh
on the opposite side of the cylinder, however close the
mesh points are to it. Even if the surface were a figure of
eight, each weight would still only affect its own part.
Finally, the sculpted object is known in closed form,
either by the mesh or as a NURBS surface.
Whilst NURBS can be sculpted directly, this NFFD
approach has several advantages. Firstly, it allows directacting tools to be defined in a natural way, such that the
user does not have to understand the workings of the
NFFD. Secondly, since the object is defined by the mesh,
it can be naturally incorporated into a key-frame
animation system. The mesh weights allow it to be
sculpted at given key positions; changing the mesh
position allows a new key position to be defined and then
sculpted and the continuity of the mesh between positions
guarantees the resulting animation is coherent.
Thirdly, any NURBS surface can be imported into the
system simply by creating an NFFD volume in which the
surface is an isosurfaces. This is achieved by matching
the mesh to the control points of the surface. This will be
investigated in the next part of the project (see Section 7).
Fourthly, this approach gives a good insight into how
such an NFFD would affect an embedded object which
was not a NURBS surface. Section 5 showed how the
tools have equivalent effects on different isosurfaces. A
non-NURBS object can therefore be sculpted in a similar
manner, once a suitable mesh is generated, provided that
the embedding calculations can be performed.

7. Future work
The system has been implemented, as has an extended
system which successfully addressed the aliasing problem

identified in Section 4.2, Noble [12]. However, the
greater complexity of the extended system made it a less
suitable vehicle on which to base the above discussion.
The tools included so far are relatively simple. Other
types of tool could be developed to provide greater
versatility of sculpting. User tests will be carried out to
determine the precise functions that can best be added.
At present, we generate the object from the mesh. It
is more usual to want to generate a mesh for a particular
object. So, given a NURBS object, a method is required
to generate a suitable NFFD mesh. Since the N-point lies
on the line of the C-points, this becomes a question of
finding a suitable method of generating the mesh to pass
through the N-points.
Work continues on this
investigation

References
1. A.H. Barr, “Global and Local Deformations of Solid
Primitives”, Computer Graphics, Vol 18, No 3, pp 21-30,
1984
2. E.S. Cobb, “Design of Sculptured Surfaces using the BSpline representation”, PhD Thesis, University of Utah,
1984
3. T. Sederberg and S. Parry, “Free-Form Deformation of
Solid Geometric Models”, Computer Graphics, Vol 20, No
4, pp 151-160, 1986
4. C. Blanc and P. Guitton, “Surface Deformation by
Normalized Operators”, Proc. 12th UK Eurographics Conf.,
Oxford, pp. 71-86, March 1994.
5. S. Coquillart, “Extended Free-Form Deformation: a
Sculpturing Tool for 3D Geometric Modelling, Computer
Graphics, Vol. 24, No 4, pp. 187-196, 1990
6. W.M. Hsu, J.F. Hughes and H. Kaufman, “Direct
Manipulation of Free-Form Deformations”, Computer
Graphics, Vol. 26, No 2, pp. 177-184, 1992.
7. H.J. Lamousin and W.N. Waggenspack, “NURBS-Based
Free-Form Deformations”, IEEE Computer Graphics &
Applications, pp 59-65, 1994
8. O.R. Davis and R.P. Burton, “Free-Form Deformation as an
Interactive Modelling Tool”, Journal of Imaging
Technology, Vol. 17, No 4, pp. 181-187, 1991
9. D. Lasser, “Rational Tensor-Product Bézier Volumes”,
Computers and Mathematics with Applications, Vol 28, No
8, pp 49-62, 1994
10. R.A. Noble and G.J. Clapworthy “Improving Interactivity
within a Virtual Sculpting Environment”, Information
Visualization '98, pp. 232-238, IEEE Computer Society
Press, 1998
11. L. Piegl and W. Tiller, The NURBS Book, Springer-Verlag,
1995
12. R.A. Noble, “Intuitive Sculpting of Flexible Objects for
Coherent Animation”, PhD Thesis, De Montfort University,
UK, 1998.

