Finite State Automata as Form-Generation and Visualization Tools
Buthayna Eilouti
Ph.D. Candidate
College of Architecture and Urban
Planning
The University of Michigan
(buthayna@umich.edu)

Emmanuel-George Vakalo
Ph.D., Chair
College of Architecture and Urban
Planning
The University of Michigan
(egvakalo@umich.edu)

Abstract

symbol a nondeterministic automaton can go to
more than one state. Finite automata are
represented graphically as state diagrams, where
a circle signifies a state of string processing, and
double circles signify final states, also known as
states of string acceptance. Arcs are used to show
the direction of string processing. The initial state
where the process of string recognition begins is
usually shown by a > symbol. To understand the
concept, one can think of an elevator as a finite
automaton. An elevator is initially in a static state
(no movement). It can receive an order to move
up one floor from where it is. The new floor
where it stops is a new state. Depending on what
order it receives (up or down, how many floors to
skip), it takes the next step.

Architects and other designers use diagrams
to visualize the process of product analysis and
synthesis. This paper outlines a new pictorial
representation tool that helps designers visualize
the process of composing and classifying their
final products.
Finite State Automata (FSAs) are used in the
context of formal languages as recognition
devices. In this sense, they complement the
synthetic device of linear grammars in the
definition of regular languages. Using the
paradigm of language for understanding the
design process, FSAs can be developed to
describe how basic shapes standing for elements
or subsystems can be put together into
meaningful subsystems or systems. They can
classify different options for component
grouping. Compared to flow charts, FSAs
represent graphically a class of flow charts that
share a set of predefined criteria. In addition,
FSAs allow the representation of recursive as
well as topological and spatial relations among
components.

Finite State Automata
The mechanism of a finite automaton is
based on reading an input symbol and then
entering a new state determined by the transition
function that maps a pair of current state and
current input symbol into a new state. Finite
automata
can
be
deterministic
or
nondeterministic. The operation of the former is
completely determined by their input. The
operation on some of their input in the latter is
probabilistic. In other words, on one input

Finite State Automata
Making

in

Form-

This paper will focus on form-making as a
component of design. Please note that FSAs can
be used in any design field to describe a sequence
of element grouping.
It is possible to think of architectural
compositions as families each sharing one or
more characteristics. Each family may be defined
as a formal language that shares a vocabulary of
physical elements and its members are composed
by applying a set of grammatical rules to the
vocabulary elements.
Finite state automata can be borrowed from
formal languages to be used in describing sets of
geometric compositions that are geometrically
and spatially alike. They provide tools for the
graphic
representation
of
architectural
compositions. They describe how basic forms
can be arranged. This entails what, and how

many shapes are composed, as well as in which
sequence they are aggregated. For example, the
finite state automaton (FSA) shown in Figure 1.
It describes a simple geometric composition. A
composition that satisfies this FSA has to begin
with one or more cubes or one cylinder, followed
optionally, by any number of cylinders, followed,
in turn, optionally by one cylinder or one cone.
The composition can also consist of one cube,
cylinder, or cone. It can also end with any
number of cones.
Figure 2: FSA for L= {{cube cylinder} or
{cube cylinder cube}}*
One of the compositions that satisfy the FSA
shown in Figure 2 is shown in Figure 3. This
composition starts with the {cube cylinder cube}
sub-composition, followed by another similar
subcomposition, followed, in turn, by {cube
cylinder} subcomposition. Following the
sequence of masses in this composition in the
FSA of Figure 2 leads from the start state to an
acceptance state.

Figure 1: A Finite State Automaton for a
Linear Composition

As a pictorial representation tool, FSA can
be used to formulate exercises for beginning
design students to train them in form-making.
Some examples of such exercises are given
below. However, the pedagogical is not the only
application field of FSAs. They can also be used
to classify families of compositions for the
purposes of data organization and storage. For
example, the DFSA (deterministic finite state
automaton) shown in Figure 2 describes all
compositions that begin with a cube followed
(assuming a linear composition) by a cylinder; or
a cube followed by a cylinder followed, in turn,
by another cube.

Figure 3: A Composition That Belongs to
the FSA Defined in Figure 2
In contrast, the composition shown in Figure
4 will be rejected by the same FSA. Comparing
the spatial relation of masses with the FSA in
Figure 2 shows that this composition ends in a
“nonacceptance” state.

Figure 4: A Composition That Does Not
Belong to the FSA Defined in Figure 2

Generating the FSA in Figure 4 can be
thought of as an exercise in form generation or
analysis. Another spatial composition exercise
can be formulated as follows: construct a FSA
that accepts only compositions that have exactly
one occurrence of a given subcomposition {cube
cube}. The FSA that satisfies the condition is
shown in Figure 5.

Figure 5: FSA That Accepts Only
Compositions That Have Exactly One
Occurrence of the Subcomposition
{ cube cube}
For the FSA described above one
composition that would be accepted is shown in
Figure 6. This composition has exactly one
occurrence of the subcomposition { cube cube}.

Another exercise entails using FSA to
summarize the description of a family of spatial
compositions. It can be formulated as follows:
Construct a FSA that describes a family of spatial
compositions in which each cube is immediately
preceded and immediately followed by a
cylinder. The FSA shown in Figure 8 constitutes
a solution to this problem.

Figure 8: FSA for Compositions in Which
Each Cube is Immediately Preceded and
Immediately Followed by a Cylinder

The composition shown in Figure 9
would be rejected by the FSA illustrated
in Figure 8. This composition includes a
cube that is not immediately followed by
a cylinder.

Figure 6: A Composition That Belongs to
the FSA Defined in Figure 5
And a composition that would be rejected by
the same FSA is shown in Figure 7, because it
has two occurrences of the subcomposition {cube
cube}.

Figure 7: A Composition That Does Not
Belong to the FSA Defined in Figure 5

Figure 9: A Composition That Does Not
Belong to the FSA Shown in Figure 8

Figure 10: A Composition That Belongs
to the FSA Shown in Figure 8

In contrast, the composition shown in Figure
10 would be accepted, because it satisfies the
criterion of the FSA in Figure 8.
The FSAs in the previous examples assume
linear compositions. To overcome their linearity
and the lack of topological information, it is
possible to extend the model to include
“centralized” compositions. In the extended
model, the possibility of describing multiple, as
opposed to one, directions is introduced. The new
directions include right, left, up, and down from
the central element. A square is used to represent
the start of the composition (i.e., the initial state).
Circles represent other states. A shaded circle
represents a state of acceptance or a final state.
Figure 11 shows an example of the extended
model.

times as desired. So, this FSA diagram can
describe a family of compositions that satisfy
some set of given criteria. Arguably, this FSA
version is more flexible and powerful than the
ones in the previous diagrams. This is due to the
inclusion of thus multiple directions. Thus
enabling the form-maker to derive central in
addition to linear compositions.
Now, the FSA model can be extended even
further to satisfy a broader spatial representation.
As shown in Figure 13, nodes (or circles) can be
established in all directions. The first arrow from
the start shape defines the desired direction.
According to the convention used in this paper,
other arrows have to conform to the direction of
the first.

Figure 13: A Spatial Version of FSA

Figure 11: A Topological Version of a
FSA
A composition that satisfies the FSA shown
in Figure 11, is illustrated in Figure 12. In this
composition, following each of the arrows in the
FSA leads to an acceptance state.

Figure 13 represents a compositional
language where directions are important. In the
spatial state diagram shown in this Figure, any
composition that starts with a cylinder followed
by a cube then a cylinder located to its right, and
a cylinder followed by a cube above it is
acceptable. A possible instance of this class of
compositions is shown in Figure 14.

Figure 14: A Composition That Belongs
to the FSA in Figure 13
Another instance appears in Figure 15.
Figure 12: A Composition That Belongs
to the FSA Shown in Figure 11
The subcompositions {cube, cylinder} to the
right, and {cube, cube} to the front and back of
the central cylinder may be repeated as many

[3] Arnheim, R., The Dynamics of Architectural
Form, The University of California Press,
Berkeley, 1977.
[4] Arnheim, R., Visual Thinking, The University of
California Press, Berkeley, 1960.

Figure 15: A Composition That Belongs
to the FSA in Figure 13

Because the distances between objects are
significant for their composition, numbers can be
appended to the arcs of FSAs, to show the
distance between two elements pairwise. Also, if
crucial to the composition, dimensions, or ratios
(e.g., x/y = 0.5) can be added to the image
representing each element.

Conclusion
FSAs are tools used to represent pictorially
families of strings in formal languages. This
paper showed that they can be developed to
derive and represent families of composition
consisting of geometric elements. They represent
topological relations among a set of elements or
subsystems. They also describe the process of
combining subsystems that can be used to form
other systems or subsystems. In architectural
form-making, they can be used to conduct
massing studies. In this regard, they can be
applied as a visualization tool in basic design
courses as well as a classifying tool for buildings.

[5] Barwise, J., Logical Reasoning With Diagrams,
Oxford University Press, New York , 1996.
[6] Harrison, M.A., Introduction to Formal
Language Theory, Addison-Wesley Publishing
Company, Massachusetts, 1978.
[7] Hopcroft, J. E., and J.D. Ullman, Introduction to
Automata Theory, Languages, and Computation,
Addison-Welsley Publishing Company, Reading,
Massachusetts, 1979.
[8] A. Koutamanis, “The Future of Visual Design
Representations in Architecture,” in Automation
Based Creative Design: Research and
Perspectives, Elsevier Science B.V., New York,
1994, pp. 76-98.
[9] Linz, P., .An Introduction to Formal Languages
and Automata, Jones and Bartlett Publishers,
Massachusetts, 1997.
[10] Marr, D., Vision: A Computational Investigation
Into the Human Representation and Processing of
Visual Information, W. H. Freeman, San
Francisco, 1982
[11] Revesz, G. E., Introduction to Formal
Languages, McGraw-Hill Book Company, New
York, 1983.

References:

[12] Salomaa, A., Formal Languages, Academic
Press, New York, 1973.

[1] Aho, A.V., and J.D. Ullman, The Theory of
Parsing, Translation, and Compiling, PrenticeHall, Inc., Englewood Cliffs, New Jersey, 1972.

[13] Schiffer, S. and S. Steele, Cognition and
Representation, Westview Press, Boulder, 1988.

[2] Aho, A.V., R. Sethi, and J.D. Ullman, Compilers,
Principles, Techniques, and Tools, AddisonWesley
Publishing
Company,
Reading,
Massachusetts, 1986.

[14] Sheppard, S., Visual Simulation: A User’s Guide
for Architects, Engineers, and Planners, Van
Nostrand Reinhold, New York, 1989.

