OCEAN: 2 1/2D Interactive Visual Data Mining of Text Documents
Christian Jacquemin
LIMSI-CNRS & University Paris 11
BP 133
91403 Orsay, France

Helka Folch
LIMSI-CNRS
BP 133
91403 Orsay, France

Abstract
OCEAN is a tool for a posteriori visual data mining that
uses the output of a text miner to help users better explore a
document space. Clustered documents are transformed into
a hierarchical 3D representation analog to Reconfigurable
Disk Trees. An intermediary document representation allows for interface customization and offers a generic approach to 3D structuring of text miner outputs. An interactive exploration is offered that avoids tree manipulation and
provides local 2 1/2D view of the disks. A user evaluation
is reported that outlines the benefit of controlled document
hierarchy traversal and 2 1/2D document layout.

1 A Posteriori Visual Data Mining
According to [1], visualization can occur before, during
or after text mining algorithms. In this work, visualization
takes place after the run of the text miner (TEMIS [12]).
It is used to help marketing people and decision-makers at
EDF Group1 to discover the main concepts and trends in a
professional area. The text miner produces a hierarchical
clustering of the documents that groups similar documents
into classes and subclasses. The text miner also ouptuts a
dissimilarity matrix that is used by a correspondence analysis to produce a representation of these documents in a 3dimensional space.
In order to help users better explore the conceptual space
produced by the classifier and extract knowledge for their
professional needs, we have designed an interactive visualizer with constrained navigation and assistance for knowledge discovery. The approach is illustrated on two data sets:
Dw 4606 web pages grouped into 897 classes (depth=3),
and Dc 1621 corporate documents grouped into 262 classes
(depth=5). Despite the high number of documents, the interface offers a clear view of the data set and enables users
easily discover the document space. A qualitative evalu1 EDF

Group is a European energy leader.

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

Sylvaine Nugier
EDF R&D
1 Av. du Gal de Gaulle
92141 Clamart, France

ation has been conducted in order to collect remarks and
suggestions for the current version of the tool. Users adapt
very quickly to the interface and feel comfortable in exploring the documents.

2 Layout: Multilayer Disc Tree Structure
In OCEAN, hierarchical document cluster layout is similar to Reconfigurable Disk Trees (RDTs) [6] (see figures 1a
& 1b). Parent nodes are classes and child nodes are subclasses. Each class corresponds to a cluster of TEMIS, a set
of documents. As for RDTs, disks and polylines connecting
parent and children nodes of the currently inspected class
are drawn. Instead of being located on the outer circumference of the disc, subclasses are positioned inside the disc
located under the parent class. The distances between subclasses are proportional to distance values between classes
produced by the correspondence analysis. The parameters used for positioning classes in a 3D RDT at depth n
are the reference height of the local tree h n , its radius rn ,
and sn the size of the quad that represent the class (here
hn = r2n = 2sn ).
The recursive data clustering relies on the hypothesis that
a superclass should contain all its subclasses. Since direct
subclasses represent the most salient information associated
with a given class, the geometrical structure has been designed in order to ensure a good visibility of the direct subclasses and an inaccurate overview of the second or higher
1
is used at
order subclasses. A constant scaling factor of 10
hn
each level of the hierarchy, h n+1 = 10 , but the ratio between the three dimensions h n = r2n = 2sn given remains
unchanged whatever the depth.
Figure 1c illustrates the hierarchy dominated by class C 1 .
The scaling factor between two levels is closer to 1.0 in this
figure than in the real interface for legibility purposes. At
each level, the camera is located at the height of the superclass (here C1 ) and offers an upper view of the direct
subclasses (here C1,1 , C1,2 , and C1,3 ).
In the debate opposing 2D to 3D layouts, users evaluations show that 2 12 D is a good tradeoff between user effi-

Head node: superclass

Subclasses
C1
C1,1,1

s1

Parent node

C1,1

h1
Parent class
sn

Apex
Edges

hn

r1

C1,2
rn

C1,2,3
C1,2,1

C1,3
C1,3,2

C1,2,2
Disk of child nodes

C1,1,2

C1,3,1
C1,3,3

Camera

Disk of subclasses

(a) 3D RDT

(b) Disk Tree in OCEAN

(c) Recursive Disk Tree Structure in OCEAN

Figure 1. 3D RDTs [6], Single and Recursive Disc Trees in OCEAN.
ciency and attractiveness [4]. Since all the subclasses are
located on the same plane, this view can be qualified as
a local 2 12 D view as in Data Mountain [11]. In OCEAN,
the points of view vary according to user’s interaction, but
documents are always facing toward the viewer through a
view-dependent rotation, a technique similar to sprite orientation in 3D games. In addition, easy zoom out overview
and structure-from-motion by rotating around a class help
users easily acquire the 3D structure of the interface [14].
The left screenshot in figure 2 shows the view of a set of
4 subclasses: final subclasses are uniformly colored, and intermediary subclasses (subclasses that have subclasses) are
textured with color stripes. Colors are randomly chosen in
order to help the users take visual landmarks in the data set
by offering a large variety of visual aspects.
Second order subclasses (subclasses of subclasses) appear very small on the display and will only be visible if the
corresponding subclass is selected. The rainbow surrounding the direct subclass on the disk border indicates that this
subclass has been selected by the user and that the camera
is going to travel there in order to inspect its subclasses. If
needed, the user can also access an overview of the whole
scene by selecting the appropriate icon in the navigation
menu (see left part of figure 2).

3 Interaction: Hierarchy Traversal
In addition to its geometrical structure, a virtual scene
in OCEAN is made of behavior scripts attached to scene
nodes (class and return nodes). These scripts are triggered
by user’s selections and result in actions that depend on the
browsing mode: inspection or skimming for full or partial
content visualization, and navigation for traversing the hierarchy. In the skimming mode, an abstract of each class
is directly shown on the screen through a “mouse over” selection; in the inspection mode, the full content of the class
is displayed in an auxiliary text window. In the navigation
mode, the recursive traversal consists in descending the hi-

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

erarchy downwards by selecting subclasses and upwards by
selecting return nodes.
After selecting a subclass, the camera is transported to
the horizontal plane that contains this class and its displacements are restricted to a circular motion around the disc
center. We define the canonical position of a camera with
respect to a class C as the location in which the camera is
in the same horizontal plane as the class, facing the class
and looking North, at a distance d n of C. For instance, in
figure 3a, (1) and (4) are the canonical positions of the camera with respect to the class C1 and its subclass C1,3 . The
distance dn is proportional to the radius r n (dn = 23 rn ).
When located in a canonical position such as (1), the
camera can rotate around the center class, but constantly
looks at the center of the disc (e.g. rotation of α from (1)
to (2)). When a subclass is selected (e.g. C 1,3 ), the camera is translated to the disc that contains this subclass, and
faces the subclass with the same angle of rotation α as in
the initial plane (e.g. translation from (2) to (3)). During
the translation, the quad that represents the selected class
vanishes progressively and is replaced by the return node.
On the contrary, return node selection for traveling back to a
parent class combines rotation and translation and replaces
the camera in the canonical position of the upper class (e.g.
combination of rotation and translation from (3) to (1)). The
reverse interpolations are activated: replacement of the selected return node by the associated subclass.

Principles for Scene Behavior Design
User disorientation is considered as a major issue in the
design of 3D interfaces [7]. In order to help users take visual landmarks and track them during their navigation, the
following principles are respected:
Fluidity. All camera transformations are continuous
whatever the actions of the user. Camera motions are completely controlled by the system and minimize focus shift.
Subclass selection results in a translation that places the
class at the center of the display with a constant apparent

Return node
Selected subclass

Disc of subclasses

Disk of the currently inspected class
Height
Radius

Possible camera motions

Full class display
Access
Three document
or display restricted Motion
to children nodes
around a class to overview inspection modes

Current camera location

Figure 2. Perspective and Overview in OCEAN.
C1,3 selection in displacement mode:
Deactivate level 1 classes: C1,?
Memorize current coordinates
Halo around C1,3
Launch forward translation
Progressively hide C1,3
Activate C1,3 child classes: C1,3,?
Display Return2

Camera

(2)

Superclass

Camera
displacements

C1,2

C1

α

Return2

r1

d1

(1)

C 1,3,2

North

C1,1

(3) C
1,3,1
(4)

C 1,3

α

d2

C1,3,2

C1,3

Root node

r2

(a) Camera motion from Class C1 to Subclass C1,3

Selection
Return2

C1
Return1

C1,3,3

Subclass

C 1,3

Selection

Return2 selection:
Launch backward translation & rotation
Hide Return2
Deactivate C1,3 child classes: C1,3,?
Progressively display C1,3
Activate C1 child classes: C1.?
Display Return1

(b) Message events associated with camera motion to and from Subclass C1,3

Figure 3. Navigation Towards a Subclass and Associated Events.
size whatever the depth of the class in the hierarchy. Rotation around a class constantly looks at the return node in
the center of the disc. During the rotation, the classes constantly face the camera and therefore always keeps the same
relative size and the same location on the screen. Last, return node selection is a backward motion that replaces the
user in a secure canonical position, canceling the possible
rotations made during hierarchy descent.
Visual cues. Footpath memorization is facilitated by
a change of visual aspect of visited classes that are displayed by a triangle instead of a quad (figure 2). Visual feedback of class selection by an evanescent rainbow
help users track the target of a selection-triggered translation. Subclass structure is obtained through circular motion around a class and materialization of subclass disks and
class/subclass links.
Natural distortion. Distortion for focus enhancement
does not rely on artificial means such as fisheye effect or

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

zooming that correspond in real life to optics modification.
Instead, the view volume of the camera remains unchanged
and distortion results from camera motion and perspective
distortion due to the change of viewpoint. The scaling factor
associated with hierarchy levels reinforces the contrast of
dimension between classes and deeper subclasses.

4 Data Processing for 3D Scene Generation
The virtual scene used for the navigation in the document space is generated in three steps from the output of
a text mining tool: two transductions and a browser for
3D virtual scenes that relies on an XML scene description.
The decomposition of the application parallels the analytical model of Chi [3]. The first transducer converts the
output of the text miner into an intermediary XML representation called analytical abstraction. The second trans-

ducer takes as input this format and transforms it into a
visual abstraction, a 3D scene made of geometrical nodes
and attached behavior scripts. Last, 3D scene browsing in
Virtual Choreographer (VirChor) [13] implements an interactive visualization controlled by user’s inputs (class selection, mode shifts, and rotation around classes).
The XML intermediary representation called analytical
abstraction ensures that OCEAN can accommodate the results of other text mining tools as well as the results of
clustering analysis tools aimed at non-textual data such as
load curves. This XML pivot representation is modeled
by an XML base schema which defines a core tagset relevant to the results of all text mining clustering tools. This
set includes elements for describing the hierarchical class
structure, geometric coordinates, typical observations of the
class (the documents) and the metadata header. For instance, the Class element is a recursive structure comprising
the class coordinates along three axes, its typical observations, a unique ID, as well as the Class elements it dominates in the hierarchical structure.
The conversion of the analytical abstraction into a visual abstraction is made by a transducer that relies on XSL
stylesheets. It transforms the class hierarchy into a scene
graph and computes subclass distances from correspondence analysis. The vertical location of a class depends
h0
The dison its depth n in the hierarchy (h n = 10
n ).
tance between two subclasses is proportional to the conceptual distance d given by the correspondence analysis
and is also scaled by an exponential function of the depth
r0
(rn = d. 10
n ). Angular values are chosen so that classes are
evenly distributed on the disc in order to minimize interclass
occlusion. XSL transformation also associates geometrical
nodes with scripts that describe the behavior of the classes
in response to user selections. Last, a camera and predefined
behavior are added to the root node in order to implement
hierarchy traversal described in section 3.
In addition to its genericity—its capability of receiving
the output of several text miners—the intermediary format
also serves the purpose of separating data representations
from their visualizations. Depending on the stylesheets
used to transform the analytical abstraction into 3D scenes,
various layouts and behaviors can be generated from a single data analysis output. This makes the customization of
the scene in relation to different user profiles easier.

5 Scene Browsing for Class Visualization
The XML data produced for scene browsing are formatted into VirChor scene structure which is close to X3D [16]
for the description of geometrical and non-geometrical elements (cameras, viewpoints, sensors...). The VirChor XML
syntax differs from X3D for the behavioral part of the scene.
Scripting syntax in VirChor resembles Behavior3D [5], an

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

attempt to extend X3D to virtual scene behaviors. However, contrary to Behavior3D, scripting in VirChor is not
defined in a separate behavior graph, but is integrated in the
scene graph as scripts attached to scene nodes. Figure 3b
illustrates the major script actions associated with hierarchy
descent through child node selection, and inverse displacement by return node selection.
A single camera node travels through the hierarchy and
implements class traversal and inspection. When a subclass
is selected, the local coordinates of the current disc center and depth are memorized together with the target disc
center and depth. These details are used to calculate the target location of the camera, and also serve to travel back to
the current canonical position when returning from hierarchy descent. In figure 3b, the camera is located at the top
level class C1 when subclass C1,3 is selected. The topmost
list represents the sequence of actions that lead the camera
to face the subclass C1,3 which is in between replaced by a
depth 2 return node Return 2 . The lowest actions correspond
to the inverse motion triggered by Return 2 selection. (Details about angular rotation around a class are not reported.)
In order to monitor the way volunteers use the interface
presented in the next section, VirChor scripting is designed
so as to record all the events launched by the volunteer’s
actions in a log file. The log file contains the time that each
event takes place, its value, and its target. A replayer is able
to replay an entire session in presence of the volunteer or
not for a post-analysis of the interaction.

6 Qualitative User Evaluation
A qualitative study of OCEAN was conducted without
preliminary definition of the expected evaluators’ use of the
interface. Six volunteers participated in the evaluation: 2
women and 4 men, 3 specialists in data analysis, one analyst of load curves, and two decision-makers. Even though
all these evaluators belong to the same company, they were
in such a hierachical position that they were committed to
make an objective evaluation of the interface with respect to
R&D policies.
Prior to evaluating OCEAN, the volunteers are given the
objectives of the evaluation session: collect remarks on design and ergonomics of the application, not on its performances. Nothing is said about the exact purpose of the tool
in order to leave all the interpretations open.
Three variants of the interface are tested (figure 4):
Masking is the possibility of displaying only the descendant of the current class, Overview corresponds to an additional window with an overview of the whole scene, and
Orientation is the addition of visual cardinal points. The
two versions of the application (with or without overview)
are launched one after the other, in a random order, with an
approximate use time of 30 minutes for each. The observer

provides the user with minimal instructions about the navigation commands. The use of the interface is then entirely
under the control of the volunteer.
As soon as the first application is launched, one of the
observers asks the volunteer about her/his first impressions
on the graphic view. During each session (about one hour
long) the volunteers are always accompanied by two observers who take notes about their remarks and suggestions. At the end of the session, each volunteer is interviewed about her/his use of the software. The interview is
semi-directive and relies on predefined questions organized
around three topics: appropriation and satisfaction, functionalities, and professional interests.
Appropriation and Satisfaction. The six volunteers
have appreciated the aesthetics of the interface, and have
enjoyed using it. Five of them consider that learning is
easy, pleasant, and even playful. One of them has however encountered difficulties in understanding hierarchical
data organization and has found that the visual language is
complex. All the volunteers find necessary and relevant the
use of visual marks (triangles instead of quads) for signaling the visited classes. Three volunteers out of six think that
the orientation variant is useless, two consider that it helps
to localize conceptual areas, one has no opinion. Three of
the users find the visual aspect of this variant too aggressive
while one finds it pleasant. Dual display (with overview) is
not considered as an interesting facility by three of the volunteers because they find difficult to connect the two views.
Some comments concern the role of visual rendering:
shapes, colors, and relative sizes. A half of the evaluators
would have liked to be able to choose between two alternative renderings: a non-discriminatory one, the current one,
in which colors are randomly chosen and all classes at the
same depth have the same size, and a differentiating one, in
which the size and color of a class are defined as a function
of its content. According to these persons, the second alternative would make it possible to guess the content of a class
without accessing it in detail, and thus avoid unnecessary
manipulations. In the evaluation version of the interface, it
has been chosen to give the same visual appearance to selectable and non-selectable objects, since a masking option
was available. This feature has not been considered as an
obstacle to class inspection by users as long as each class is
visually distinguished during its selection by the user.
Functionalities. As indicated in section 3, OCEAN has
been designed in order to avoid user disorientation during
data exploration by preserving fluidity in user interaction
and making use of visual cues and natural distortion. All
the volunteers have appreciated to keep track of their orientation. However one of them, who is a frequent videogamer, would have liked to access less controlled modes
of displacement. Evaluators find useful to be able to move
smoothly from horizontal view to upper view and back to

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

local view. They have never felt disoriented contrary to frequent observations in 3D space.
Currently, interactions with classes are reduced to selections and inspections. Users expect enhanced interactions
with the classes in the future versions of OCEAN such as
selection, filtering, and annotation. Despite their interest for
richer interactions, the evaluators have explicitly stated that
they do not want any functionality that would let them directly manipulate the documents and modify their position
in the 3D space. They consider that such user manipulations
would break the principles of document space construction
by an automatic classifier and would introduce unacceptable
confusions.
Expected annotation facilities concern object grouping,
personal annotations, and data exchange with other professional applications. These developments are considered as
useful by the volunteers for their own activity or for providing collaborators with annotated data in which they can
outline important concepts and documents. A last requirement is to keep a link between the text miner and the visual
output in order to integrate visualization and interaction facilities with the run of the data mining algorithm.
Professional Interests. OCEAN has been judged as a
very profitable tool for exploring other types of complex
data sets such as multi-scale representation of load curves.
It could also be used as a teaching-aid to present complex
models at different levels of detail. Last, knowledge management could also take advantage of OCEAN through a
facilitated access to large document databases.
Evaluators believe that a wide range of professional areas at EDF Group can be concerned by the use of such a
visualization tool. All the evaluators agree that it could be
useful for an analyst or a marketing person, two of them
consider that it is not appropriate for a business manager’s
activity. One of them finds it too complicated for a commercial agent, the remaining five think that a commercial
agent could take advantage of it, provided that an analyst
has previously explored and annotated such a data set.

7 Related Work
OCEAN belongs to the family of tools used for accessing
document spaces such as Bead [2], Starlight [10], In-Spire
[15], Galaxy of News [9], or Infosky [8].
Bead, Starlight, In-Spire (Galaxy) or Galaxy of News
represent the document space as a large and homogeneous
3D cloud in which the user can zoom in, in order to focus
on documents of interest. Apart from zooming into data or
providing links between documents and related information
sources (in Starlight), these works do not address explicitly
the issue of navigation and interaction.
Unlike these tools, Infosky uses a non-linear space
to represent the information landscape. Documents are

Figure 4. Three Visual Variants of OCEAN Interface.
grouped into constellations labeled by topical keywords,
and organized into a hierarchical structure. Despite its
structure, the navigation in this document space still resembles a zoom through a telescope and not a journey in
a spaceship as proposed by OCEAN.
Data Mountain [11] uses a document spatial layout that
is closer to OCEAN because of its 2 1/2D structure. But
Data Mountain is used for document manipulation and organization, not for data mining. OCEAN does not let users
move documents, navigation is therefore necessary while it
is not an issue in Data Mountain. The number of documents
in OCEAN can be several orders of magnitude larger than
in Data Mountain, making hierarchical classification necessary. OCEAN has only been applied to collections up to
1000 classes, but could be applied to larger collections by
displaying only sister documents and descendant up to the
2nd or 3rd generation.

8 Conclusion and Perspectives
OCEAN is a three-level processor for visual data mining:
(1) data mining, (2) abstract representation, and (3) virtual
scene navigation. The intermediary analytical abstraction
can represent outputs from a wide variety of symbolic data
miners. OCEAN has been designed with genericity in mind,
and therefore relies on a general purpose language for the
design interactive virtual scenes. The use of such an environment offers a vast field of experimentation in which interaction and navigation are first class citizens. Users evaluation reported in this paper show that assisted 2 1/2D data
exploration satisfies users. Out next step is to focus on document annotation and knowledge transfer.

9 Acknowledgments
We are grateful to Stephanie Buisine for her help on
qualitative evaluation and to the six volunteers who dived
in OCEAN. We also thank Jean-Daniel Fekete and Frederic
Vernier for helpful discussions.

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

References
[1] M. Ankerst. Visual data mining with pixel-oriented visualization techniques. In Proceedings of the ACM SIGKDD
Workshop on Visual Data Mining, San Francisco, 2001.
[2] M. Chalmers and P. Chitson. Bead: explorations in information visualization. In Proc. ACM SIGIR ’92, pages 330–337,
New York, 1992.
[3] E. Chi. A taxonomy of visualization techniques using the
data state reference model. In Proc. INFOVIS ’00, pages
69–76, 2000.
[4] A. Cockburn and B. McKenzie. Evaluating the effectiveness
of spatial memory in 2D and 3D physical and virtual environments. In Proceedings of the SIGCHI conference on Human factors in computing systems, pages 203 – 210, 2002.
[5] R. Dachselt and E. Rukzio. BEHAVIOR3D: An XML-based
framework for 3D graphics behavior. In Proc. Web3D ’03,
pages 101–ff. ACM Press, 2003.
[6] C.-S. Jeong and A. Pang. Reconfigurable disc trees for visualizing large hierarchical information space. In Proc. INFOVIS ’98, pages 19–25, Washington, DC, USA, 1998.
[7] K. Kaur, A. Sutcliffe, and N. Maiden. Towards a better understanding of usability problems with virtual environments.
In Proc. INTERACT ’99, pages 527–535, Amsterdam, 1999.
[8] W. Kienreich, V. Sabol, M. Granitzer, F. Kappe, and K. Andrews. Infosky: A system for visual exploration of very
large, hierarchically structured knowledge spaces. In Proc.
FGWM ’03, Karlsruhe, 2003.
[9] E. Rennison. Galaxy of News: An approach to visualizing and understanding expansive news landscapes. In ACM
UIST’94, pages 3–12, 1994.
[10] J. S. Risch, D. B. Rex, S. T. Dowson, T. B. Walters, R. A.
May, and B. D. Moon. The starlight information visualization system. In Proc. IV ’97, page 42, Washington, 1997.
[11] G. Robertson, M. Czerwinski, K. Larson, D. Robbins,
D. Thiel, and M. van Dantzich. Data mountain: Using spatial memory for document management. In ACM UIST’98,
pages 153–162, 1998.
[12] TemisTM . http://www.temis-group.com/.
[13] Virchor. http://virchor.sf.net/.
[14] C. Ware. Designing with a 2 1/2d attitude. Information
Design Journal, 10(3):255–262, 2001.
[15] P. C. Wong, P. Whitney, and J. Thomas. Visualizing association rules for text mining. In Proc. INFOVIS ’99, page 120,
Washington, DC, 1999.
[16] X3D. http://www.web3d.org/.

