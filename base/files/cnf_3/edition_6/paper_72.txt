Efficient Multicast Algorithms for Mesh-connected Multicomputers
Hovhannes A. Harutyunyan and Shengjian Wang
Department of Computer Science and Software Engineering
Concordia University
Montreal, Quebec, H3G 1M8, Canada
{haruty@cs.concordia.ca, wang_she@cs.concordia.ca}
Abstract
Performance of multicomputers largely depends on
that of the underlying network communications such as
multicast. Two major parameters used to evaluate
multicast routing are the time it takes to deliver the
message to all destinations and the traffic which refers to
the total number of links involved. Mesh is a network
topology widely used in multicomputers. It has been
proved that, in mesh network, it is NP-hard to find the
multicast routing which is optimal on both time and
traffic. In this paper, we proposed two efficient multicast
algorithms designed for store-and-forward switched
mesh-connected multicomputers: DIAG and DDS. They
are both tree-based shortest path multicast algorithms
whose complexity is O(KN) or less. Performance
evaluations of these algorithms resulted from simulations
are given at the end.
Keywords--- Multicast, Routing, Algorithm, Mesh,
Torus, Multicomputer, Network

1. Introduction
Multicast refers to a collective communication in
which the same message is delivered from a source to an
arbitrary number of distinct destinations [1]. It has been
applied in many network-related domains such as
multicomputers and telecommunication. Multicomputers
[1], also known as MPC (Massively Parallel Computer)
[2], usually consist of thousands of processors which are
connected to each other and have their own local
memory. Due to the fact that nodes in a multicomputer
do not share physical memory, they must communicate
by passing messages through the network. Consequently,
efficient routing of messages is critical to the
performance of multicomputers [2].
Time and traffic are two key parameters in
evaluating the performance of multicast communications
[1]. Mesh-connected network is a popular network
topology for constructing multicomputers because it
scales well [2]. Efficient multicast routing algorithms
intended for mesh-connected networks, which try to

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

minimize both time and traffic, will be especially useful
in the field of parallel and distributed computing.
Multicast can be implemented through multiple
unicast (one to one communications), which is not
efficient because the message is sent from the source
node to each destination node near sequentially. A more
efficient and effective way, called tree-based multicast
[8, 11, 12, 13, 14], is to use a good strategy to
disseminate the message from the source to multiple
destinations concurrently through a tree in the host
network, which is rooted at the source node and covers
all destination nodes. Tree-based multicast overcomes
the drawbacks of unicast-based multicast.
In tree-based multicast, depending on the strategy
used, multicast problem can be defined as several
categories of graph theoretical problems: Multicast Path
(MP) problem, Steiner Tree (ST) problem, and Multicast
Tree (MT) problem [1]. The main challenge is to find the
multicast tree which is efficient on both time and traffic.
The problem is that multicast time and traffic do not
seem to be independent from one another. Instead, they
contradict each other. Experiments show that
optimization dedicated to one will usually deteriorate the
performance of the other [3]. As a matter of fact, Lin and
Ni [1] have proved that finding the optimal multicast tree
in mesh-connected networks is NP-complete. So, the
multicast problem of seeking optimal results on both
time and traffic is NP-hard. Heuristics are needed to
solve the problems. A good approach is to minimize one
parameter first, and try to reduce the cost of the other one
as much as possible. Since our goal is to develop
efficient multicast routing algorithms for time-critical
multicomputers, we choose the pro-time approach that
minimizes the time first. Our problem becomes the
Optimal Multicast Tree problem [1].
Previously, Lin and Ni [1] did a thorough study on
multicast communication in multicomputers and
achieved a series of results which we use as guidelines to
design our algorithms. Theorem 1.1 is one of their
results.
Theorem 1.1 The Optimal Multicast Tree problem for
2D mesh graph is NP-complete.

They also proposed Traffic and Time as two major
parameters to evaluate multicast communication. Let
MT=(V,E) define the multicast tree for multicast from
the source u0 to K destinations where V is the set of nodes
in the tree and E is the set of edges in the tree.
Multicast traffic refers to the total number of links
used to deliver the message from the source to the all
destinations nodes.
Multicast Traffic=|E(MT)|

(1.1)

In reality any node in the mesh could be the source
node u that sends a message to a set of arbitrary
destination nodes. In order to simplify the mathematical
model and simulations, we assume that the source node
is fixed at the origin of the mesh or torus. An arbitrary
case of multicast can be reduced to several such
multicasts in submeshes, as shown in Figure 2.1 (a)
where s is the source node and d1~d5 are the destination
nodes. Based on this model, here are some definitions
related to multicast in 2D mesh/torus

Another parameter called Additional Traffic is
widely used to evaluate the efficiency of the traffic. It is
essentially the total traffic subtracted the total number of
destinations [1, 5, 7], i.e.
Additional Traffic=|E(MT)|-K

(1.2)

Multicast time is the message transmission time
starting from when the source sends out the message till
the last destination receives it. Assume the length of the
path from the source node (root) to the destination nodes
d1, d2, ..., dk-1, dk in the multicast tree are l1, l2, ..., lk-1, lk
respectively. Since network latency in store-and-forward
networks is proportional to the distance, the time can be
counted in hops. The time from u0 to di will be l1+w1
where w1 is the total number of hops waited at all
branching nodes along the path, and
Multicast Time=max{ l1+w1, l2+w2, …, lk+wk } (1.3)
In 2003 Liu [3] proposed the VH multicasting
algorithms for mesh and torus networks. Simulations
showed that VH algorithm obtained optimal multicast
time with very low computational complexity, but it
creates a very large amount of traffic. Harutyunyan and
Liu later proposed the MIN algorithm [4], which was
designed to reduce the multicast traffic. Simulations
showed that the MIN algorithm produces the least traffic,
but its multicast time and computation complexity is
high. How to reduce the traffic as much as possible while
obtaining optimal multicast time becomes a new
challenge in this field, which leads to the development of
our new algorithms.

2. Proposed Algorithms
In this section, we will present our two new
mutlticast routing algorithms for mesh-connected
multicomputers. First, let us introduce the model we use
to solve the problem.
Following the convention, we model the mesh
network in multicomputers as a graph, i.e. every node of
the multicomputer is deemed as a vertex, and
connections between pairs of nodes are deemed as edges
(links) in the host graph. Distance between neighboring
nodes is always one, which also stands for the weight of
the edge.

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

(a)
(b)
Figure 2.1: Model of Multicast in Mesh
Definition 2.1 In a 2D mesh/torus network M(m u n),
multicast sends a message from a given source node
s(0,0) to a set of destination nodes D={ (x1, y1), (x2, y2),
..., (xi, yi) }, where 0  xi  m-1 and 0  yi  n-1. Let us
define: Xmax = max{x1, ..., xi}; Ymax = max{y1, ..., yi};
The total number of nodes in the mesh N = m u n; The
diagonal node of s in the multicast zone d = (Xmax, Ymax);
Dmax = max{D1, ..., Dk} where Di is the distance between
the source and the destination (xi, yi).
In the case of Torus graph, a multicast problem can
be reduced to several multicast problems in meshes. In
the multicast given by Definition 2.1, the 2DT graph can
be divided into four zones shown below and each
destination node (xi, yi) belongs to one of them.
zone1: { (0, 0)(ªm/2º-1, ªn/2º-1) }
zone2: { (m-1, 0)(ªm/2º, ªn/2º-1) }
zone3: { (0, n-1)(ªm/2º-1, ªn/2º) }
zone4: { (m-1, n-1)( ªm/2º, ªn/2º) }
After dividing the 2DT into four zones, the multicast
in 2DT becomes four multicasts in four submeshes. Then
the corner node sends the message to its respective set of
the destination nodes. Figure 2.1 (b) illustrates how it
works in an 8 u 8 2D mesh.
For multicasting in n-dimensional tori we transform
an n-dimensional tori into multicasts in 2n n-dimensional
submeshes by dividing the original mesh at the middle of
each dimension.

2.1 DIAG Algorithm
DIAG is designed to reduce the large amount of
multicast traffic of the previous time optimal VH
algorithm [3]. In VH algorithm, the message is routed to
each destination node strictly in dimensional order. So,

the message is transmitted from the source node first
along the lowest dimension, then turns to the next lowest
dimension and so on until it reaches the destination.
Figure 2.2 (a) shows the multicast tree constructed
through VH algorithm for a multicast from the source
node (0, 0) to destinations (2, 3), (3, 5), (4, 6) and (6, 9)
in a 2D mesh.

(a)
(b)
Figure 2.2: VH Multicast Tree in 2D Mesh
VH algorithm delivers the message to each
destination along a shortest path obtaining the optimal
multicast time Dmax+1. However VH algorithm generates
a very large amount of traffic. Studies show that, the
excessive traffic is mainly a result of the rigid
dimensional order. In the previous example, if we ignore
the dimensional order, the message can be routed along
the tree shown in Figure 2.2 (b), which also obtains
minimum multicast time with only 15 links of traffic
compared to 29 links in the VH multicast tree.
The main reason that VH enforce dimensional
ordered routing is to find the shortest path for each
destination, which results in the optimal multicast time.
For DIAG algorithm to obtain VH’s optimal time and
reduce its excessive traffic, our main strategy is to make
it a shortest path multicast algorithm and to eliminate bad
scenarios in VH that generate excessive traffic.
Assume VH routes in horizontal dimension first, the
top row becomes a major path. Thus, the worst scenario
is when most of destinations are located at the bottom
row of the mesh. The message has to be routed from top
of a column all the way to the bottom only to one or two
destinations, which is not efficient on traffic. To avoid
such bad scenarios, in DIAG, we propose that the major
path be shifted to the middle point of the multicast zone.
To balance the two dimensions, the major path need to
advance along two dimensions alternatively in steps that
are proportional to the dimensions of the multicast zone,
thus becomes the diagonal of the zone. Here are the main
principles for DIAG multicast algorithm.
a) The message be routed from the source to each
destination along a shortest path.
b) Since the major path is the diagonal of the
multicasting zone, it is likely that most of the
destinations will be around the diagonal not too
far away.
c) If we first send the message to destination nodes
closer to the source node, then they can forward

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

the message to farther destinations with just a
little extra distance
d) If we connect a destination to the existing
multicast tree through a shortest path, the newly
added traffic is likely to be small, which will
result in a small total traffic.
Based on these ideas, we designed the DIAG
multicast routing algorithm, which can be informally
described as follows.
1) Find the multicast zone and the diagonal node d
which has the maximum coordinate in every
dimension of all destination nodes.
2) Form a shortest path that approximates the
diagonal line between the source node s and the
diagonal node d.
3) Sort all the destination nodes according to their
distance to the source node and put them in a
queue.
4) Remove the first node q from the queue and
connect it to the closest node c in the multicast
tree and within the zone { sq}.
5) Repeat step (4) until the queue is empty
Next, we will give the formal description of DIAG
algorithm in 2D mesh. It is actually divided into two
parts. Part one is to find the diagonal path and called
DIAG multicast preparation algorithm. Part two is to
construct the multicast tree and called DIAG multicast
routing algorithm.
Let us denote the diagonal path from the source
node s to its diagonal node d as DP, denote the diagonal
line from s to d as sd. Vx(u) denotes the x coordinate of
node u, and Vy(u) denotes the y coordinate of node u.
D(u,l) denotes the distance from node u to line l. The
multicast tree constructed through the routing algorithm
is denoted as MT
Algorithm 2.1(DIAG preparation algorithm)
Input:
M, D, s
Output:
DP
Variable: u, u’, u” (temporary nodes)

.

(1) DP={ s }; u=s; Find the diagonal node d
(2) Vx(u’)= Vx(u)+1; Vy(u’)= Vy(u)
Vx(u”)= Vx(u); Vy(u”)= Vy(u)+1
IF ( D(u’, sd)  D(u”, sd) ) THEN u=u’
ELSE
u=u”
DP=DP+{ u }
(3) Repeat Step (2) until u=d
______________________________________________
Proposition 2.1 The time complexity of the DIAG
multicast preparation algorithm in 2D meshes is O(m+n).
Algorithm 2.2 (DIAG routing algorithm)
.
Input:
M, D, s, DP
Output:
MT
Variables: u, c (temporary nodes)
1. Sort the destination nodes in D according to
their distance to the source node s

MT=DP (Initialize the multicast tree with the
diagonal path)
3. - u=first node in D
- Find a node c in MT and in zone {su}, that
is closest to node u
- Add node u to MT through a shortest path
from c through XY routing
- D=D - {u}
4. Repeat Step (3) until D=)
5. Cut the tail part of DP which has neither
destination nodes nor replicate nodes
______________________________________________
2.

Proposition 2.2 The time complexity of the routing
algorithm of DIAG multicast in 2D meshes is O(KN)
where K is the total number of destinations and N is the
total number of nodes in the mesh.
Example 2.1 In a 2D mesh network M(8 u 8), construct
the multicast tree using DIAG algorithm for a multicast
that sends a message from the source node s(0, 0) to a set
of destination nodes D={ (0, 2), (3, 0), (4, 0), (4, 6), (6,
6), (7, 4) }.

(a)

(b)

Figure 2.4: Example of DIAG Multicast in 8u8 Mesh
Through our study, we also obtained the following
results on the DIAG multicast algorithm presented here
as propositions. The proofs of these propositions are
omitted.
Proposition 2.3 In the multicast tree constructed by
DIAG routing algorithm, the path from the source node s
to any destination node is a shortest path.
Proposition 2.4 DIAG multicast routing in mesh or torus
networks is deadlock free.
Proposition 2.5 The bound of DIAG multicast traffic in
2D meshes is Dmax d Traffic d ¦ | xi+yi |, 1 d i d K.
Proposition 2.6 The bound of DIAG multicast time in
2D meshes is Dmax d Time d Dmax+K-1.

Figure 2.3: Diagonal Path of DIAG Multicast
In this example, the multicast zone is between the
source node s(0, 0) and the diagonal node d(7, 6) as
shown in Figure 2.3. We run the preparation algorithm
and find the diagonal path between s and d as illustrated
in dark zigzag line in Figure 2.3. Next, we need to use
the diagonal path as the stem to construct the multicast
tree. First, we sort all the destination nodes according to
their distances to the source node, and get d1, d2, ..., d6 as
indicated in Figure 2.3. Then, we connect each
destination node to the tree through dimension-ordered
XY routing. At the beginning, the multicast tree consists
of only the diagonal path. According to DIAG routing
algorithm, Here are the steps of constructing the tree: s(0,
0)  d(7, 6) (along the diagonal path), s(0, 0)  d1(0, 2),
(1, 0)  d2(3, 0), d2(3, 0)  d3(4, 0), (4, 4)  d4(4, 6),
(5, 4)  d5(7, 4). The completed multicast tree is shown
in Figure 2.4 (a). The multicast traffic is 21 links, and
the multicast time is 12 hops. The same example using
VH algorithm for 2D mesh will result in 25 links and 13
hops as shown in Figure 2.4 (b).

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

In the same way we introduced at the beginning of
Section 2, we can use DIAG algorithm to solve multicast
problem in 2D Tori. Very similar to DIAG multicast
routing algorithm in 2D mesh, we also developed its
counterpart for 3D and higher dimensional meshes or
tori. The results and conclusions we got are similar too.

2.2 DDS Algorithm
DDS (Dimensional Distance Sorted) is another treebased shortest path multicast routing algorithm for mesh
networks. It is designed to obtain near optimal multicast
time and further reduce the large multicast traffic of the
previous algorithms. In order to better understand the
algorithm, we first give the definition of Dimensional
Distance as follows.
Definition 2.2 (Dimensional distance) The dimensional
distance between two nodes is the distance along one
dimension between them. For example, for any two
nodes x(x1, ..., xi, ..., xn) and y(y1, ..., yi, ..., yn), the ith
dimensional distance di=|xi - yi|. The minimum
dimensional distance between x and y denoted as
dmin=min{d1, ..., di, ..., dn}.
DDS algorithm sorts all the destinations in
dimensional distance so that those closer to the source
node in one or more dimensions can receive the message
first and hopefully forward it to destinations behind them
through a little extra distance. Thus, the path or distance

previously traveled in each dimension can be shared as
much as possible by nodes coming behind. When
constructing the multicast tree, we keep connecting the
destination nodes in sorted order to the tree through a
path which is a part of a shortest path from the source
node to the respective destination.
The following are some of the principles used to
design the DDS algorithm.
1) If all the destination nodes, which are closer to
the source node in some dimension than one
destination node, receive the message earlier,
very likely it will need to travel less distance in
each dimension to get the message from a
preceding node.
2) If the message is routed along a shortest path
between any two nodes in a multicast tree, it is
likely that the total number of links of the tree
will be low, and the transmission time between
the source node and the destination nodes will
also be minimized.
3) If a shortest path travels along different
dimensions alternatively rather than in
dimension order, then there are more routing
choices and the chances of receiving the
message from a nearby node are increased
which can save traffic.
Based on these principles, we developed the DDS
algorithm in 2D mesh. The following is the formal
description.
Algorithm 2.3 (DDS multicast algorithm in 2DM)

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

}
}
(5) IF d=m-1 or d=n-1 then it is done,
ELSE d=d+1 and repeat step (3) and (4)
______________________________________________
Let us use the same multicast group as in Example
2.1 to show how DDS algorithm in 2D meshes works. As
illustrated in Figure 2.5 (a), the algorithm starts by using
the source node s(0, 0) as an aligning point to scan the
column and then the row where it is located for
destination nodes. Then, it moves to the next aligning
point (1, 1) and do the same. Repeat the process until all
the nodes in the mesh have been scanned. At the end, the
sorted destination nodes in the queue are d1(0, 2), d2(3,
0), d3(4, 0), d4(4, 6), d5(7, 4), d6(6, 6) sequentially.

(a)
(b)
Figure 2.5: Example of DDS in 8u8 2DM

.

M, D, s
MT
x, y (x, y coordinate)
d (dimensional distance)
(1)MT={ s } ( Initialize the multicast tree and set the
root of the tree at s )
(2) d=0
( Initialize the dimensional distance)
(3) Scan the column x=d, starting from the point (d, d)
down to (d, n-1)(Here is the pseudo code for this step)
x=d;
FOR( y=d; y<n; y++)
{
IF (x, y) is a destination node
{
- Find a node c in MT and in zone {s  (x,
y)}, which is closest to node (x, y)
-Connect node (x, y) to MT through a
shortest path from c through XY routing
}
}
(4) Scan the row y=d, starting from the point (d, d) to
(m-1, d) (Here is the pseudo code for this step)
y=d;
FOR( x=d; x<m; x++)
{
IF (x, y) is a destination node
{
- Find a node c in MT and in zone {s  (x, y)}

Input:
Output:
Variables:

that is closest to node (x, y)
- Connect node (x, y) to MT through a shortest
path from c through XY routing

After the sorting, we will construct the multicast
tree by connecting destination nodes to it. At the
beginning, the multicast tree consists of only the source
node itself. Here are the exact steps of constructing the
tree: (0, 0)  (0, 2), (0, 0)  (3, 0), (3, 0)  (4, 0), (4, 0)  (4, 6), (4,
4)  (7, 4), (6, 4)  (6, 6). The completed multicast tree is
shown in the Figure 2.5 (b). The multicast traffic has 17
links and the multicast time is 13. The same example
using DIAG results in 21 links and time 12, which shows
that DDS generates less traffic than DIAG but does not
sacrifice much on multicast time.
Through our study, we also obtained the following
results on the DDS multicast algorithm which we present
without proofs.
Proposition 2.7 The time complexity of the routing
algorithm of DDS multicast in 2DM is O(KN).
Proposition 2.8 In the multicast tree constructed by DDS
algorithm in 2D meshes, the path from the source node s
to any destination node is a shortest path.
Proposition 2.9 DDS Multicast routing algorithm in
mesh or torus networks is deadlock free.
Proposition 2.10 The bound of DDS multicast time in
2D meshes is Dmax d Time d Dmax+K-1.

Proposition 2.11 The bound of DDS multicast traffic in
2D meshes is Dmax d Traffic d ¦| xi+yi |, 1 d i d K.

destination nodes. The multicast time generally increases
with the number of destinations.

Like DIAG algorithm, DDS algorithm can be
applied to solve multicast problem in 2D Tori. It can also
be easily adapted to 3D and higher dimensional meshes
and tori. The results and conclusions we got are similar
to those in 2D meshes.

3. Performance evaluation
To evaluate the performance of the proposed
multicast routing algorithms, we developed software to
simulate the multicast communications in meshconnected multicomputer networks using different
routing algorithms and compared their average
performance based on the simulation results and
statistics.
First, we will introduce our evaluation model and the
set of parameters used to evaluate the performance. Here,
we use several types of charts related to time and traffic.
They are the multicast time curve, the multicast traffic
curve and the average additional traffic (AAT) curve. To
compare the performance of several algorithms in one
chart, we will draw a curve for each algorithm, resulted
from exactly the same set of samples. Every point on the
curve is averaged over 1000 runs of multicasts with the
same number of destination nodes [1, 7]. The set of
multicast destination nodes and their distribution are
generated randomly through pseudo random number.
We also use another parameter mean to indicate the
average performance of an algorithm in a certain mesh
network regardless of the number of destinations. The
definition of mean is as follows.

(a)
(b)
Figure 3.1: Multicast Time of DIAG,DDS, MIN
Multicast time curves of DDS, DIAG and MIN show
that, on average, DIAG has the best multicast time, DDS
has a little bit larger multicast time than DIAG, MIN has
the worst multicast time. In this example, the multicast
time mean of DDS is 37.88, which is 8.5% more than
DIAG’s 34.89, but 5% less than MIN’s 39.86.
Figure 3.2 indicates that multicast traffic generally
increases with the number of destinations, but AAT first
increases with the number of destinations and reaches its
peak at about 20% percent of the total nodes, and then it
decreases and finally reaches 0. This means that when
the number of destination nodes is very small or very
large, the multicast traffic is most efficient. In between it
will generate more inefficient traffic. The figure also
indicates that both Traffic and AAT of DIAG algorithm is
much less than that of VH algorithm. In this example, the
multicast traffic mean of DIAG is 247.28 which is 25%
less than VH’s 333.69. The AAT mean of DIAG
algorithm is 52.28 which is 62% less than VH’s 138.69.

Definition 3.1 (Mean of a Parameter) Given a mesh or
torus M and a multicast algorithm A, the average value of
a parameter P from all the multicast samples in a
statistical experiment is called the mean of parameter P
for multicast algorithm A in mesh or torus M. It is
actually the average line for the curve of parameter P.
We assume the simulations are done in a store-andforward switched 20x20 2D mesh multicomputer
network with one-port node architecture. The unit of
time is hop and the unit of traffic is link. The sampling
resolution for the curves is 10 destination nodes per
sample point. We use dimension-ordered XY-routing as
the routing function between pairs of nodes, which
results in a shortest path and prevents deadlock. The
following are the results from the simulations.
In Figure 3.1 multicast time curves of DIAG and VH
are almost overlapped, which indicates that on average
the multicast time resulted from DIAG algorithm is very
close to that of VH algorithm, which obtains near optimal
multicast time. We can also notice that the multicast time
curve is pretty flat, which means it does not relate very
much to the number of destinations. This is because the
multicast time mainly depends on the distance of the
farthest destination node but not the number of the

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

Figure 3.2: Multicast traffic of DIAG and VH in 2DM

Figure 3.3: Multicast Traffic of DDS, MIN in 2DM

[9]

Figure 3.3 indicates that the multicast traffic of DDS
and MIN are very close and obviously better than DIAG.
In this example, the multicast traffic mean of DDS is
230.85 which is 1.3% more than MIN’s 227.77 but 4.3%
less than DIAG’s 241.41. The AAT mean of DDS
algorithm is 40.85 which is only 8% more than MIN’s
37.77 and 20.5% less than DIAG’s 51.41.

4. Conclusions
Multicast problems in mesh-connected networks are
NP-complete in general. Through our research, we
developed two efficient heuristics for multicast routing in
mesh-connected multicomputers: DIAG and DDS, both
of which have a small computational complexity of
O(KN). Performance evaluation shows, DIAG and DDS
generate much less traffic than VH, but can obtain nearly
the same multicast time and complexity. Multicast traffic
of DDS is close to that of pro-traffic MIN algorithm, but
better on time and complexity.
However, experiments and simulations in our
research also showed that each of these algorithms has
cons and pros. None of them achieves best performances
in all cases. Hence, applications need to pick the right
algorithm according to the requirement on multicast
time, traffic and computation complexity.

[2]

[3]

[4]

[5]

[6]

[7]

[8]

X. Lin and L. M. Ni, Multicast communication in
multicomputer networks, IEEE Trans. Parallel and
Distributed Systems, vol. 4, pp. 1105--1117, October
1993.
L. Ni and P.K. McKinley, A survey of wormhole routing
techniques in direct networks, IEEE Computer 26 (2),
pp. 62-76, 1993.
X. Liu, Multicasting algorithms for mesh and torus
networks, Call no. TK 5105.887 L58 2003, Concordia
University Library, 2003.
H. A. Harutyunyan and X. Liu, New Multicast
Algorithms in Mesh-connected networks, International
Symposium on Performance Evaluation of Computer and
Telecommunication Systems (SPECTS)’ 2003, pp. 284291, Montreal, Canada, 2003.
D. F. Robinson, P. K. McKinley, and B. H. C. Cheng,
Optimal Multicast Communication in Wormhole-Routed
Torus Networks, IEEE Transactions on Parallel and
Distributed Systems, Volume 6 , Issue 10, pp. 1029 –
1042, October 1995.
P. Mohapatra, Wormhole Routing Techniques for
Directly Connected Multicomputer Systems, ACM
Computing Surveys (CSUR), Volume 30, Issue 3, pp.
374 – 410, 1998.
X. Lin and L. M. Ni, Deadlock-free multicast wormhole
routing in multicomputer networks, In Int. Symp. on
Computer Architecture, pp. 116--125, 1991.
J.-S. Yang and C.-T. King, Efficient Tree-based
Multicast in Wormhole-Routed 2D Meshes, ISPAN, p.
494, 1997.

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

[11]

[12]

[13]

[14]

[15]

[16]

References
[1]

[10]

IEEE

[17]

[18]

[19]

[20]

[21]

[22]

[23]

J.-Y. L. Park, H.-A. Choi, N. Nupairoj, and L. M. Ni.
Construction of Optimal Multicast Trees Based on the
Parameterized Communication Model. In Proc. Int.
Conference on Parallel Processing (ICPP), Volume I, pp.
180--187, 1996.
P. K. McKinley, H. Xu, A.-H. Esfahanian, and L. M. Ni.
Unicast-based Multicast Communication in Wormholerouted Networks. IEEE Transactions on Parallel and Distributed Systems, 5 (12), pp.1252--1265, Dec. 1994.
P. Mohapatra and V. Varavithya, A Hardware Multicast
Routing Algorithm for Two-Dimensional Meshes, SPDP
(8th), p. 198, 1996.
H. Wang and D. M. Blough, Tree-Based Multicast in
Wormhole-Routed Torus Networks, Technical Report
ECE-98-03-01, University of California, Irvine, March
1998.S. Oral and A. George. Multicast Performance
Analysis for High-Speed Torus Networks, LCN (27th), p.
0619, 2002.
H. Wang and D. M. Blough, Tree-Based Fault-Tolerant
Multicast in Multicomputer Networks, Proceedings of the
1998 IEEE International Symposium on Modeling and
Analysis of Computer and Telecommunication Systems,
pp. 44-49, 1998.
D. Kumar, W. A. Najjar, and P. K. Srimani, A New
Adaptive Hardware Tree-Based Multicast Routing in Kary N-cubes, IEEE Transactions on Computers, vol. 50,
no. 7, pp. 647-659, July 2001.
P. K. McKinley, Y. Tsai, and D. F. Robinson, Collective
Communication in Wormhole Routed Massively Parallel
Computers, Computer, vol. 28, no. 12, pp. 39-50,
December 1995.
X. Lin, P.K. McKinley, and L.M. Ni, Deadlock-Free
Multicast Wormhole Routing in 2-D Mesh
Multicomputers, IEEE Transactions on Parallel and
Distributed Systems, vol. 05, no. 8, pp. 793-804, August
1994.
C. S. Yang, Y. M. Tsai, and C. Y. Liu, Performance
Evaluation of Multicast Wormhole Routing in 2D-Torus
Multicomputers, ICCI 1992, pp.173-178, 1992.
K.-P. Fan and C.-T. King, Optimal Multicast
Communication in Wormhole-Routed Torus Networks,
Proceedings of the 6th Symposium on the Frontiers of
Massively Parallel Computation, p. 50, 1996.
E. Fleury and P. Fraigniaud, Analysis of deadlock-free
path-based wormhole multicasting in meshes in case of
contentions, Frontiers (6th), p. 34, 1996.
A. Al-Dubai, M. Ould-Khaoua, and L. M. Mackenzie, An
efficient path-based multicast algorithm for mesh
networks, Proc. 17th Int. Parallel and Distributed
Processing Symposium (IPDPS) Nice, France, IEEE
Computer Society Press , pp. 283-290, 22 –26 April,
2003.
H. Xu, P. K. McKinley, and L. M. Ni, A Scalable
Multicast Service in 2D Mesh Networks, Frontiers'92:
The 4th Symposium on the Frontiers of Massively
Parallel Computation , pp.156--163, Oct. 1992.
W. Jia, L. Cheng, and G. Xu, Efficient Multicast Routing
Algorithms on Mesh Networks, Proceedings of the Fifth
International Conference on Algorithms and Architectures for Parallel Processing (ICA3PP.02), 2002.
P. V. Mieghem, G. Hooghiemstra, and R. V. Hofstad, On
the Efficiency of Multicast, IEEE/ACM Transactions on
Networking, vol. 9, no. 6, pp. 719-732, December 2001.

