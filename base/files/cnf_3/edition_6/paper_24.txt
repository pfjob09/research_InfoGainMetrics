Synchronization Strategies for Spatial Information Organization
D. Kukulenz and J. Kasper
Luebeck University
23538 Luebeck, Germany
{kukulenz, kasper}@ifis.uni-luebeck.de
Abstract
Spatial organisation of information objects on a two or
three dimensional plane or space has the advantage of revealing the connections between objects easily by spatial
proximity. A user may easily understand, remember and,
given an adequate User Interface, change the positions and
the visual relationships between information objects. If a
group of users has access to the same information plane or
space the problem arises that conflicts may occur regarding the positioning, the creation and deletion of objects. In
this article we present solution strategies for conflicts concerning collaborative spatial information organization. We
present interaction-based and automatic conflict-dissolving
procedures in order to realize a version control system for
efficient collaborative spatial information organization.

1. Introduction
Spatial organization of information is well-known to
computer users since the success of graphical desktops
of modern operating systems. Many users arrange icons
visually on the desktop that represent important programs
or files. Thereby users have immediate access to programs
and files and do not loose time by searching in complex
directory structures or by applying search functions.
Similar approaches to spatial information organization have
been applied for the development of elaborate information
workspaces [3]. The WebBook and the WebForager interface let users view and manage data objects like Web pages
in a virtual space [4]. The Data Mountain project represents
documents as thumbnail images in a 3-dimensional space
that may be moved and grouped freely [13]. The VIKI
system lets users organize items by arranging them in 2-d
spaces integrated in a hierarchical structure [11], [14]. All
of these systems have in common that items are (in the first
place) not organized in a logical structure as e.g. a directory
structure or a database but are available in a virtual space.
A main reason to consider spatial information organization

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

is the possibility to take advantage of the human spatial
cognition and spatial memory. A user may easily understand relationships between objects by spatial proximity
and may also easily find objects by recalling well-defined
positions of items in a virtual space. In contrast to a logical
organization of information in a hierarchical (directory)
structure or a database, a user doesn’t have to understand
and learn a certain schema or structure of the information as
e.g. the concept of an information hierarchy or a database
schema. The relationships, the groupings and the structure
of the information may easily be recognized by spatial
proximity.
A main disadvantage of spatial information organization is
related to the ’size’ or ’volume’ of objects in a virtual space.
The size of objects restricts the number of possible relationships between objects as expressed by spatial proximity.
The topology of the information is restricted by the topology of the 2d or 3d space. Furthermore, sorting functions
well-known from hierarchical information workspaces,
as e.g. provided by common file-managers, are difficult
to realize in a virtual space. A rearrangement of objects
due to sorting creates a new spatial layout that possibly
contradicts a user’s previously learned structure and mental
model of the information. The challenge of spatial information workspaces is to take benefit from the significant
advantages of spatial information organization and to deal
with related problems. Due to the problems related to
spatial information organization, in particular the topology
restrictions described above, this organization method is not
suitable for very large collections and takes advantage of an
integration into a logical organization structure. A system
that realizes such a combination of spatial and logical
information organization is the topicshop-system [1],[2].
It provides an exploratory workspace interface that allows
users to organize Web sites by arranging them spatially in a
2-d plane. In further stages of the exploration sites may be
organized in a hierarchical structure based on the 2-d layout.
This article deals with the problem of collaborative
spatial information organization. An example for this prob-

lem is the task to organize research papers in a scientific
workgroup. Scientific literature research and organization
is a pretentious and time-consuming task. Usually members of a scientific work group work on similar topics with
non-disjunct reference lists. Collaborative work in this
field may help members of a workgroup to save time and to
focus on relevant publications.
There are significant reasons not to organize publications in
a hierarchical structure or a database in the first place. Literature research is an incremental process. The information
schema is usually not static and known in advance but it
emerges in the course of time. If publications are organized
in a hierarchy or a database the underlying structure has to
be modified frequently. This is a difficult task since it requires familiarity with the (possibly complex) information
structure. In contrast to this a spatial organization of publications may easily be understood and modified by users.
A change of the data structure simply implies a change
of relative positions of objects. Therefore spatial information organization is especially suitable for information
workspaces that are subjected to frequent structure changes.
A significant problem concerning collaborative spatial
information organization are conflicts concerning the
spatial arrangement of information objects. These conflicts
may appear if different users have distinct opinions about
semantic relationships between objects and thereby about
the respective spatial organization. Conflicts may also
appear due to degrees of freedom concerning spatial arrangements. Even if different users have an overall similar
opinion about object relations, the degrees of freedom
concerning spatial arrangements may lead to very distinct
layouts.
Contribution The previous problem is the main object
of this article. Based on an experimental system for collaborative spatial information organization we present two
different types of resolution strategies for conflicts concerning spatial arrangements of information objects provided by
different users. The first proposed method is a manual resolution strategy similar to strategies provided by common
user interfaces for source code synchronization. The second strategy is an automatic resolution strategy. A main
focus is the preservation of organizational structures by the
merging process.
Overview In the next section we give an overview of architectures applicable for collaborative spatial information
organization. In section 3 we describe an experimental system in order to demonstrate collaborative spatial information organization and to describe related problems. Section
4 presents merging strategies and demonstrates examples.

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

Sections 5 and 6 describe further related research and conclude with a summary and further research issues.

2. Architectures for collaborative spatial information organization
The architectural issues described in this section are fundamental for the understanding of problems related to collaborative spatial information organization. In this article
we consider common client-server based architectures. We
consider a central server reachable by a number of client
computers (figure 1).

Communication techniques and synchronization We
differentiate between two types of information synchronization we denote as immediate and time-delayed information
synchronization. Immediate synchronization is well-known
from chat-architectures [9]. Changes of the information
space introduced by one participant are forwarded to the
server immediately and broadcasted to (all) other participants. Time-delayed information synchronization has to be
applied if participants are not online continuously. This is in
general the case if users work with mobile computers or via
modems. In this case a synchronization of spatial information spaces may be achieved automatically by the system if
a connection to the server is available or triggered manually
by a user.
There are significant reasons to concentrate on time-delayed
synchronization methods. Automatic broadcasting of information changes to clients may be technically demanding
depending on the applied client technology due to network
restrictions caused e.g. by firewalls [9]. Immediate synchronization may cause significant network traffic. Many
changes by users are only intermediate states that are not
valuable for different users. If different users work with
identical information objects, undesirable delays may occur
due to the locking of objects. These problems are solved by
time-delayed information synchronization.

The applied architecture The architecture of the developed experimental system is shown in figure 1. Client functionalities are realized by a Java applet operating in the
sandbox environment of a browser. The server organizes
the synchronization process and the persistent storage of
information. Due to the described restrictions of immediate synchronization in this article we focus on time-delayed
information synchronization similar to methods applied by
version control systems like CVS [12]. Users work with local copies of information workspaces and have to initiate
the synchronization process actively.

WWW
browser
applet

client

persist.
component

data
repository

synchron.
component

info space
repository

server

Figure 1. Client-Server architecture applied for collaborative spatial information organization.

3 An experimental tool for spatial organization of information objects
In this section we give an overview of functionalities of
the presented experimental system for collaborative spatial
information organization. Many functionalities in particular with respect to the client component are also provided
by previous systems. The subsequent summary of the main
properties is the basis for the description of problems related to collaborative spatial information organization and
the presentation of synchronization strategies.

3.1

The user interface

Initialization The applet is sent from the server to the
client and installed by the browser. The collaborative information workspace is requested by the applet from the server
and visualized by the graphical user interface in a browser
window (figure 2).

in figure 2, above on the right). Activating this submit button, the information workspace on the client side is encoded
into a specific XML format, which is an extension of the
Bookmark Exchange Language XBEL [16], and sent to the
server.

3.2

The server makes the current version of the collaborative information workspace available to the clients. Furthermore, the server stores information objects, in particular
local copies of remote (Web) objects in order to provide information already deleted from the Web. The server also realizes an automatic synchronization of different versions of
information workspaces if requested by a user as described
in the subsequent section.

4 Merging strategies
4.1

Information structure and usage The system visualizes
references to data objects. A data object may be an arbitrary
digital file available on the server system or on the Web.1
Information objects, represented by rectangles containing
a text string, are subsequently denoted as items (figure 2).
The respective string is provided by a user and should characterize the referred object. Objects are organized on data
planes (figure 2). A special (root) data plane shows a spatial arrangement of all links to available data planes. A user
may arrange an item by dragging it to a new location. Items
may be combined to groups and moved on a data plane or
between data planes.

The server component

Manual merging strategy

Synchronization In the presented system a user works
with a local copy of the collaborative information
workspace. From time to time a user has to synchronize
the client version with the version on the server in order
to submit his changes and in order to acquire the current
server version. For this synchronization a user has to activate a specific button above the plane area (’send’-button

In this section we differ between manual and automatic
merging strategies. Both merging strategies are initiated by
a user by pressing the submit-button of the user interface.
The request and the current information space on the client
side are encoded and sent to the server. In the manual merging strategy differences between the client and the server
version of the information space are detected.2 The respective information is sent to the client. The client tool displays
the list of data planes where changes (’conflicts’) between
the client and the server version appear (figure 3). A user
has to successively invoke the presentation of the respective
subset of data planes. After choosing a data plane where
conflicts occur, the respective plane is visualized. The arrangements of data items of both versions are displayed in
different colours. The version displayed in the foreground
may be chosen by a user. In this state a second window appears beneath the data plane window. In this window the
conflicts like inserted and deleted items and modified positions are listed (figure 3). A user may successively activate

1 After the insertion of a new reference to a Web object (item), a local
copy is stored at the server side.

2 A unique id is assigned to each object by the server at the time of the
insertion of the object into the collaborative information space.

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

Figure 2. Spatially organized references to Web pages of airlines grouped into three clusters. Buttons above on the
right are used for synchronization control.

conflicts in this window. This activation highlights the respective conflict in the main data plane window. A user may
then choose between either the client version or the server
version. In this way a new version is created that is finally
submitted to the server and constitutes the new version of
the collaborative information space.
The case may appear that the version originally sent to the
client from the server in response the ’submit’ request is no
longer the current version of the collaborative information
space. This is the case if a different user checked in a different version in the time interval between the submit request
(i.e. the time of the original synchronization request) and
the end of the ’manual merging’ process (the final submit
request). In this case for a user the process of merging two
versions manually starts anew and the client has to merge
his new version and the new version on the server.
The described method is similar to methods known from
user interfaces of source code version control systems, as
e.g. the respective component of the Eclipse project [6].
Many of these systems display client and server version to
a user who may resolve conflicts successively. It is obvious that this process may turn out to be tedious if the client
and the server version contain many differences. Furthermore, the manual merging process may not terminate (in a
reasonable period of time) if many users apply the tool and
submissions to the server are very frequent. These drawbacks are the motivation for the development of automatic
merging procedures.

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

4.2

Automatic merging strategies

In contrast to the manual merging process, automatic
merging is performed by the respective server components
on the server side (figure 4). A user has to activate the ’automatic merge’ button of the user interface. This causes
the current client version of the information space to be encoded as an XML file and to be sent to the server. As illustrated in figure 4 in a first stage the client version and the
server version (loaded from the server repository) of the information space are analysed. This structure analysis may
include a detection of groups of items and orientations of
items or groups as described in detail below. In a second
stage (’diff. finder’ in figure 4) differences between the two
versions are detected. Differences may include inserted and
deleted items, modified positions and differing groups of
items as indicated by spatial proximity. Finally, an automatic merging strategy is applied and the two versions are
combined. The resulting common version constitutes the
new version of the collaborative information space. This
version replaces the old version in the server repository and
is also sent to the client. The current version of the system allows a user to accept the proposed server version or
to start a manual merging process. For this purpose the user
interface displays the new version and marks the respective
changes (figure 6). In the following the automatic merging
strategies applied by the system are described in detail.
In this work we apply an update policy similar to most
version control systems. If a user performs an action like the
insertion or the relocation of an item the respective change

Figure 3. Manual merging strategy: The current two versions of the information space on the client and on the server
side are displayed (in different colours) on the client side. In the image a conflict concerning the locations of the items
above on the left is apparent. A user may choose the respective client or server version in the list below which displays
conflicts separately.

client version

client
component

server
version

analyser

server
repository
statist. lib

diff. finder

new
version

merge comp.

new version

server component

Figure 4. Process sequence of the automatic merging strategy.
is adapted by the new version generated by the automatic
merging process. This strategy requires the server version
as available in the repository to be the same version that was
originally sent to the client. The subsequent merging strategies therefore consider the non-trivial case that a new version has been submitted by a different user and conflicts refer to different opinions about the information space of two
different users. We assume a hierarchy of actions. Deletion
and insertion have the highest priority (i.e. estimated effort)
compared to relocation. If one user relocates an item and a
different user deletes it the deletion is applied in the automatic merging strategy. Insertions are automatically taken
over into the merged version.
The mean value merging strategy This merging strategy
is the simplest conceivable strategy in order to merge the
information of two spatial information workspaces. If the

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

locations of an item on two versions of a data plane differ,
the system positions the respective item in the merged version at the position between the two original positions. The
’analyser’-component in figure 4 has in this case no specific
task and the data is simply forwarded to the ’diff.-finder’
component.
This merging strategy has obviously severe drawbacks concerning the preservation of organizational structures of information typical for spatial information organization. If
e.g. one user arranges items in two groups and a second
user creates the same groups (visually) but at interchanged
spatial positions of the groups, a mean value merging destroys the groupings (figure 5). Since groupings of items
usually represent a statement concerning the semantical relationships between objects, this information is obviously
deleted by the automatic merging process.

(a) server version

(b) client version

Figure 5. Versions of the information space on the client and on the server side. In this example the positions of
clusters on the left and above on the right are exchanged. Mean value merging deletes the separation of items into two
groups.

Group sensitive merging The previous problem is addressed by group sensitive merging. This merging strategy
is based on the policy that in the case of spatial information
organization groupings are very important organizational
structures and should be preserved by the merging process.
For this purpose in a first step groups are detected in the
’analyser’-component in figure 4. This group detection is
performed for each version separately by the ’statistical library’ component (figure 4). The current version of the analyzer component supports different cluster procedures like
single linkage, complete linkage or the Ward’s method3[7].
Each clustering method is based on the matrix containing
the (spatial) distances between nodes as provided by the Euclidian metrics. The obtained clusters of items for each version are forwarded to the ’diff. finder’ component in figure
4.
In the second step in the ’diff.-finder’ component in figure 4 the cluster centers of detected clusters similar in the
server and the client version are compared. For this purpose clusters in the client and the server version have to
be matched. If two clusters are similar, i.e. the number
of common elements compared to the total number of elements exceeds a threshold-value, the new position of this
cluster in the merged version is determined by computing
the mean value of both cluster positions. These mean values of cluster centers are compared. If two cluster centers
are too close, a ’separation’-strategy is applied in order to
preserve both clusters (figure 6).
The advantage of the described group-sensitive merging
strategy compared to the mean-value merging strategy described above is the preservation of arrangements of items
in groups. Since this kind of arrangement is a main organization method in the case of spatial information organiza3 The respective default method (single linkage) may be exchanged by
a user applying a specific menu.

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

tion, the described method preserves more information than
the mean-value merging strategy.

5 Further related research
As described in the introduction spatial organization of
information is well-known from systems presented in [11],
[14], [4], [13] and [15]. Social organization of information,
especially Web bookmarks and reference list, known as social bookmarking [10], [8], is currently offered by many
providers, e.g. [5]. The combination, i.e. the social or collaborative organization of spatial information spaces is provided by only a few systems, as e.g. the system in [2]. The
version control problems discussed in this article are, to our
knowledge, a new research aspect that may help to improve
collaborative spatial information organization.

6 Conclusion
In the article we presented synchronization methods for
collaborative spatial information organization. We also presented an experimental system that implements the presented synchronization ideas. The first approach was to
merge different versions manually. In contrast to merging
UIs for source code as e.g. the respective Eclipse component, both versions are shown in a single window displaying differences of the two versions. By the presented UI a
user may decide at a glance which version he prefers. Second we presented strategies for automatic merging of spatial information workspaces. The basic method, simply to
compute mean points between an item at different positions
in two versions, may delete important organizational structures as e.g. arrangements of items in groups. We presented
a method to preserve groupings by automatic detection of

Figure 6. Automatic merging strategy: The arrangement in groups is preserved by detection of the respective groups
and by separation of clusters in the merged version. Shaded items represent the new (merged) version as proposed by
the system.

groups and a strategy to separate cluster centers.
There are further organizational structures that should be
preserved as far as possible, as e.g. orientations of items.
Spatial memory takes to a significant degree the orientations
of items into account, which should therefore be preserved
by automatic merging strategies. We plan to combine the
presented system with a ’logical’ organization structure in
order to take advantage of both methods to organize information. Content-based clustering methods may further improve the layout of merged information spaces.

References
[1] B. Amento, L.Terveen, W.Hill, and D.Hix. Topicshop: enhanced support for evaluating and organizing collections of
web sites. In Proc. of the 13th annual ACM symposium
on User interface software and technology, pages 201–209.
ACM Press, 2000.
[2] B. Amento, L. Terveen, W. Hill, D. Hix, and R. Schulman.
Experiments in social data mining: The topicshop system.
ACM Transactions on Computer-Human Interaction, 10(1),
2003.
[3] S. Card, G.Robertson, and J.Mackinlay. The information visualizer. In Proc. of CHI ’91: ACM conf. on Human Factors
in Computing Systems, pages 181–194, 1991.
[4] S. K. Card, G. G. Robertson, and W. York. The webbook and
the web forager: an information workspace for the worldwide web. In Proceedings of the SIGCHI conference on
Human factors in computing systems, pages 111–ff. ACM
Press, 1996.
[5] del.icio.us:
Oranization of Favorites.
URL:
http://del.icio.us, 2006.
[6] Eclipse. URL: http://www.eclipse.org/, 2006.

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

[7] B. Everitt, S.Landau, and M.Leese. Cluster Analysis. Hodder Arnold, 2001.
[8] T. Hammond, T.Hannay, B.Lund, and J.Scott. Social bookmarking tools (i): A general overview. dlib-magazine, 11(4),
2005.
[9] J. Hunter and W.Crawford. Java Servlet Programming, Second Edition, chapter 10. O’Reilly, 2001.
[10] R. Kanawati and M. Malek. A multi-agent system for collaborative bookmarking. In AAMAS ’02: Proceedings of the
first international joint conference on Autonomous agents
and multiagent systems, pages 1137–1138, New York, NY,
USA, 2002. ACM Press.
[11] C. C. Marshall, F. M. Shipman, and J. H. Coombs. Viki:
spatial hypertext supporting emergent structure. In Proceedings of the 1994 ACM European conference on Hypermedia
technology, pages 13–23. ACM Press, 1994.
[12] D. R. Price. CVS, Concurrent Version System, 2005.
http://www.nongnu.org/cvs/.
[13] G. Robertson, M. Czerwinski, K. Larson, D. C. Robbins,
D. Thiel, and M. van Dantzich. Data mountain: using spatial memory for document management. In Proceedings of
the 11th annual ACM symposium on User interface software
and technology, pages 153–162. ACM Press, 1998.
[14] F. M. Shipman, C. C. Marshall, and M. LeMere. Beyond
location: hypertext workspaces and non-linear views. In
Proceedings of the tenth ACM Conference on Hypertext and
hypermedia : returning to our diverse roots, pages 121–130.
ACM Press, 1999.
[15] S. Whittaker, Q. Jones, B. Nardi, M. Creech, L. Terveen,
E. Isaacs, and J. Hainsworth. Contactmap: Organizing communication in a social desktop. ACM Trans. Comput.-Hum.
Interact., 11(4):445–471, 2004.
[16] Xbel. URL: http://pyxml.sourceforge.net/topics/xbel/, 2006.

