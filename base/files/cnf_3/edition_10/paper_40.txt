A robust and easy approach to collaborative visualization
M.Jern, S. Palmberg, M.Ranlöf*
ITN - Campus Norrköping, Linköpings Universitet - S - 601 74, Norrköping Sweden
e-mail: mikje@itn.liu.se, stapa@itn.liu.se, magra@itn.liu.se

Abstract
A “Collaboratory” is a lightweight application component
allowing project teams to collaborate and share data and insight
while distributed over a network, using intuitive visual
navigation techniques. The innovation can be summarised as the
integration of network technology used in collaborative games
with 3D data navigation techniques and based on a low-level,
fine-grained, customisable “atomic” visualization component
infrastructure. This paper is also a blueprint to inform
researchers and software engineers about the possibility to
extend existing visualisation applications to support
collaboration, e.g. making it easier to ”collaboratize”
visualization applications based on Microsoft’s DirectX class
library.

distribution. SmartDoc uses an “atomic” (low-level) component
software architecture that supports the development of real-time
2D and 3D visual data navigation "Collaboratories”. The
component technology and network infrastructure are based on
industry standard Microsoft technology COM and DirectX’s
network abstraction and distributed object system. The
distributed architecture is based on “lightweight Application
Components and Data Sharing” providing real-time data
interactivity, reducing the load on the network and with zero
administration client deployment. We focus on “peer-to-peer”
collaboration.

Keywords: collaborative visualization, volume visualization,
visual user interface

1. INTRODUCTION
Over the last decade a number of software frameworks for
supporting collaborative computing and visualisation have
appeared. These different frameworks are usually categorized
depending on the creators’ background and the target of the
framework. Unfortunately, many of these frameworks are
realized using an architecture that makes them hard to modify,
reuse, or extend with new functionality. SmartDoc, an ECfunded research project, proposes a framework for supporting
the design and realization of collaborative visualization with a
special focus on scalability, extensibility, reusability, robustness
and availability addressing the following issues:
Dynamic collaborative visualization – 2D and 3D real-time,
multi-window, data navigation based on tight integration
between data and graphics objects.
Lightweight applications – Should be easily distributed.
Data Sharing – Users should be able to share their data.
Network and media independent – TCP/IP, IPX on modem,
LAN or serial connections.
Easy-to-implement and reusable – Communication software
must be accessible, no license and provide a generic software
API for easy collaborative extension of new and existing
visualization applications.
Ease-of-use and robust – A collaborative session must be easy
to start-up and should be able handle network partitioning
independent of any central and shared resource to function
properly.
Instructor driven – Master controls the session.
Session log – Save a collaborative session for later review.
The functionality and design of a collaborative environment
depend on many different factors, such as size and location of
application and data, available bandwidth and process

Figure 1: Layered architecture of a lightweight collaboratory
After providing a conceptual overview and related work, two
examples of Collaboraties are presented, a VolumeViewer and a
GeoVizViewer. VolumeViewer is primary meant for use in
“teleradiology” [1], a science about the electronic transmission
of radiological medical images and reports between distant
groups. Teleradiology tools allow the radiologist to discuss a
patient’s case with colleagues remotely. GeoVizViewer allows
multiple users to view and manipulate multivariate climate data
simultaneously. Collaborators can, for example, manipulate a
linked 2D and 3D depiction of precipitation and related data as
it varies with terrain.

2. RELATED WORK
SmartDoc is not the only Web-based collaborative visualization
system. There are multiple ongoing or completed projects. The
computer graphics research community has devoted many
resources to software frameworks for building collaborative
applications. Research has focused on Java, VRML and several
proprietary network software solutions (DIS protocol, ICE API
developed at San Diego Supercomputer Center [2],[6],[7],[13],
[17]. Unfortunately, many of these systems are realized using
architectures that make them hard to modify, reuse, or extend
with new functionality. We found three sources [4],[18],[19],
particularly useful as they described general architectures used
by many systems. They analyze the general visualization and
study the generic ways in which it can be made collaborative.
Web-based data visualization can be performed at server
side, client side or any combination of these, which can lead to
many different collaborative schemes. The server-side

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

application is usually invoked just once; the client-side
programs would be replicated for each user. This replicated
code can run independently, in lock step or in any collaborative
mode between these extremes. Independent client applications
accessing the same back-end data is a very common
collaboration model. The likely applications that collaborative
visualization tools can be expected to support include a range
from exploration and analysis of scientific data through decision
support to education and training.
A key problem in building collaborative systems is deciding
which properties of an application to share. A common and easy
solution is to divide the participants into one master and one ore
more slaves and transmit changes of pixel values of the master
screen to the slaves [3]. This is for example how the Microsoft
NetMeeting application works. Other solutions are based on a
shared event model, where an event is generated each time a
parameter at the master application is changed. The event can
be multicasted to other participating applications without
sending any pixel values. All parameters are then properly
defined at each user’s application unlike the master and slave
solution. The collaborative solution suggested in this paper is
based on the share event model, having the actual dataset
distributed to each client (peer).
Another important issue in building any collaborative
capability is deciding on how relative freedom to allow each
user. Too little flexibility and the users will not have a creative
environment and just a lockstep view of the “master”. Too much
flexibility and the users will get confused and there will so
much divergence between the different clients that one will
loose its collaborative nature. SmartDoc’s atomic component
approach allows us to customize collaborative user interfaces
with a minimum of effort.
Two collaborative 3D visualization systems (MICE and
NCSA Habanero [3], [15], [16]) have been explored in order to
increase our knowledge about collaborative work and describe
the advantages of our Collaboratory. MICE is written in Java
and uses VRML to represent and share molecular scenes. ICE
(Interactive Collaborative Environment) API, developed at San
Diego Supercomputer Center, handles the communication
distribution and the synchronization process of the involved
clients. A central server manages all state event communication
during a session. ICE manages user identification and
ownership and includes essential tools for message ordering.
Transmitting VRML representations (ICE) of a volumetric
dataset requires a high performance server and network to avoid
scalability problems. Significant for the Habanero framework is
the use of small state event messages, which is also the
foundation in our Collaboratories. Both frameworks use similar
collaborative rules to ensure that only one user at a time can
perform actions, although the Habanero solution is more
complex. Our focus is on ease-of-use and the many options in
Habanero can be cumbersome to specify and understand.

3. COLLABORATIVE GAME
ARCHITECTURE
An application area that heavily uses 3D graphics on networks
is the computer gaming industry. Most of the collaborative

games that work on PCs use the Microsoft DirectPlay API, a
special library within DirectX that provides classes for
networking facilities. Most of the visualization tasks that
Collaboratories handle are similar as the ones used by a
traditional computer game, i.e. setting up a session, sending
messages, player (user) management etc. SmartDoc has learned
from other research projects [14] that have been dedicated to
collaborative games and integrated the DirectPlay network
service provider architecture in several SmartDoc application
components.
The network service provider architecture in all SmartDoc
components is based on DirectPlay. The Collaboratory
integrates component-based visual data navigation tools and
visual user interface (VUI) methods with connectivity software
based on this industry-standard network protocol for
collaborative games. The Collaboratory supports most
generalized communication capabilities shielding end users
from the underlying complexities of diverse connectivity
implementations, freeing them to concentrate on the real-time
navigation scenario. The integration of a network abstraction
system, “Application Sharing” and a “Data Navigation
Protocol” provide the foundation for real-time collaborative
visualisation. The Collaboratory extends the Web collaborative
paradigm to the domain of interactive data navigation in
integrated 2D and 3D worlds and VUI technology. High
performance graphics is guaranteed through optimised coding
with DirectX classes.
With a multi-user application session, each user's VUI is
synchronized with that of the other user(s) in the session [3]. A
continual stream of messages flows to and from each user. For
example, every time a user rotates a 3D object, a message with
the viewing matrix is sent to update that user's position on the
other application clients in the session.

3.1

Overall architecture

From the system point of view, the system has a symmetric
architecture. To initiate a collaborative session, one of the sites
starts up its Collaboratory. Other participants then start up their
own Collaboratory to connect to the first participant that is
acting as a “host” or “master”. Each Collaboratory is identical
to the others so that any of the applications can run as the “host”
when the first participant decides to leave the session.
Communication among participants is done through the
Communication Object. This kind of “application component
and data sharing” will provide a general-purpose networked
environment with no bottlenecks.
The service provider architecture of the DirectPlay
Communication Object insulates the application component
from the underlying network abstract layer they are running on
making it easier for the developer to extend any visualisation
application component with collaborative activity (see figure 2).
The Communication Object provides all tools needed to support
a networked, collaborative data navigation session by providing
the services to establish connection between desktops, create
and joining sessions, manage single users or group of users,
send messages between users, and automatically propagate the
state among the computers.

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

3.2

Viewer Component

All SmartDoc application components will be sharing an
“engine” plug-in responsible for visualisation, interaction,
networking and rendering, called the Viewer. The shared
Viewer plug-in connects directly into the window layout system
of the parent application, and takes care of managing all of the
visualisation inside the view including taking full advantage of
and manage the complex interactions with high-performance
graphics layer in OpenGL. The Viewer will not only be
responsible for rendering the graphics but also for carrying out
all mouse interactions and management of the viewing
hierarchy.

service provider is selected and successfully initialised the user
can choose between joining a session or create a new session
and wait for participants to join in. If the user decides to host a
session, an instance of a DirectPlay session object, which is
really a direct communication channel between the involved
computers, must be created. The user that starts a session is
called the host or the master and is the only one that can change
session parameters. The Collaboratories allows DirectPlay host
migration. If the host decides to end the session, the other user
overtakes the hosting of the session and other users can join it.

4.1

Active and Passive members

The “active member” is the only member that can interact with
the Collaboratory and change attribute and viewing parameters.
The other user(s) become the “passive member(s)”. Although
the underlying technology is peer-to-peer, we have used clientserver philosophy when building the application. All interaction
on the host side is briefly stored and sent to the passive member.
The messages are received and the appropriate parameters are
updated and the application is invalidated. The passive member
is actually just a spectator watching the interaction by the active
member.

Figure 2: SmartDoc collaborative architecture in “Peer-to-Peer”
sessions with the central shared Viewer plug-in component,
Communications Object and the application component
“Collaboratory”.

The architecture allows lightweight applications components
to be deployed across the Web. Downloading the shared
Viewer Plug-in (6Mb) to the client machine enables this and
guarantees that application components, such as the
VolumeViewer, has a small footprint (200Kb). The Viewer is
distributed as “freeware” to allow free distribution of SmartDoc
applications on the network.

4. COLLABORATIVE METHODS
The Collaboratories implements the DirectX classes to create a
DirectX object that can start a DirectPlay peer-to-peer session
with predefined parameters. The application must create a
DirectPlay “player” (the API is originally meant for game play)
to be able to send and receive messages. All communication
messages take place between different DirectPlay players and
not between different computers. We call the players
“members”, who are identified by a unique ID-number assigned
when the user connects.
When connecting, the members first have to select through
which service they want to connect. The Collaboratory
enumerates the systems available service providers: IPX or TCP
/ IP on modem, LAN or serial connections. When the choice is
made, the selected service provider is initialised. When the

The host, which is the active member of the session as
default, has the ability to decide which one of the members that
will work as the session’s active member. When the host
approves a passive member to become active, the host becomes
a passive member but, unlike other passive members, has the
ability to retake the active membership. The reason why the
application has been implemented like this is to make sure that
only one user can modify the graphics. The purpose of the
application would be lost if multiple users affected the graphics
at the same time. Too much flexibility and the users will get
confused and there will so much divergence between the
different clients that one will loose its collaborative nature.
A simple chat has been implemented so that communication
between the users is possible. In further work, an
implementation of for example DirectPlay Voice would be
suitable for the application.

4.2

Messages

Message packages are sent to all participating members in a
session and stored in a message receive queue. The application
extracts the messages from the queue by an identifier that
determines the type of message (Figure 3). Examples of some
messages used by our Collaboratories:
-

-

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

Matrix: Translation, rotation, zooming or panning.
Isosurface: Isovalue, opacity, colour and visibility.
Orthoplane: Plane, opacity and visibility.
File: File name and size information of the host’s dataset.
The dimensions and the filename are compared before
another member can participate
FileOK message: Sent by the member joining application
when the comparison between the datasets is done. If the
host dimension and name do not match, the joining member
will automatically be disconnected.
2D and 3D annotation: Textual and polyline .

There are other types of messages including background
colour, viewport location and chat messages. The messages are
built the same, but contain different data.

Figure 3: Example of a buffer in the message architecture
A message consists of a buffer that holds parameters stored as
data or strings. The buffer starts with a “message type” that is
checked when the message is received to ensure that the right
action will be performed by the application. An offset variable
is inserted after each data as a separator between the different
message types (Figure 3). The system architecture provides full
flexibility for the developer to remove or add new types of
messages to the Collaboratory.

5.1

The VolumeViewer

The VolumeViewer is a Web-enabled application component
for visualization and collaborative examination of 3D MRI or
CT volume data. This approach to system architecture could, for
the first time provide the infrastructure for affordable
widespread medical image interpretation facilities available to
any member of a clinical management team whilst allowing
close collaboration between clinicians to optimise image
interpretation and treatment planning.
The 3D viewport (figure 5) shows volume data represented as
an isosurface and three movable orthoplanes that control the
contents of two 2D viewports that display selected projected
orthoslices. The user controls parameters such as isovalue,
colour, opacity, visibility etc. The volume can be scaled, rotated
or translated by simple mouse moves and key presses.
Annotation is important in teleradiology and has been integrated
to provide the ability to mark regions of interest in both the 3D
isosurface and 2D orthoslice.

Figure 5: VolumeViewer – a “Collaboratory” for interacting
and visualizing medical volume data and the 3D annotation tool
in a teleradiology session

Figure 4: Illustration of the message flow between the active
member and the passive member

4.3

Disconnection

When a passive member disconnects, the application stops
receiving messages and looses references to the peer- and
DirectX objects. If the user hosts a session, the DirectPlay host
migration function checks if there is another user participating.
If there is this user becomes the new host of the session and
other users can now join the session. Any user can save and
restore the contents of the Collaboratory at any time allowing
all members to have a collaborative session where the
invocation parameters are shared, saved, and modified on each
client.

3D annotation is a challenging issue, since it is hard for the
user to specify a position in three dimensions with only a simple
mouse as a tool. VolumeViewer introduces a new 3D annotation
method based on moving a 3D box in the scene where the
movements are restricted to the normal direction of its faces.

5.1.1 DICOM data interface
Digital Imaging and Communications in Medicine (DICOM) is
a standard method for transferring images and associated
information between different medical devices manufactured by
various vendors [1]. Instead of developing a DICOM reader and
interface, the project has demonstrated the scalability and
extendibility of our component architecture and integrated a
commercial DICOM component. This means that the
VolumeViewer can directly view and access patient data
archives including the binary image data and attributes such as
modality, patient ID and study date. The DICOM component is
also responsible for the network security.
.

5. IMPLEMENTED COLLABORATORIES
Two Collaboratories have been implemented, the
VolumeViewer and the GeoVizViewer. Both are true
Collaboratories that can be used in collaborative sessions. This
section describes some of their characteristics.

5.1.2 Information Protection
During a session, the annotations made by the master and
passive members are given a unique identity to avoid name
conflicts and to make sure that only the user that created the
annotation can remove or modify it. All annotations are
displayed and updated. The integrated external DICOM

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

component provides professional network security for medical
data allowing VolumeViewer to focus on the visualization and
collaboration features of the system.

what types of networks that are used, including service
providers such as TCP/IP, IPX on modem or LAN
Performance: 3D games must be interactive and high
performance was guaranteed through our optimised coding with
DirectX classes for both 3D rendering and network
collaboration.
The clinicians that have evaluated the VolumeViewer agree that
volume rendering should not be included. This technique is not
yet fully developed or trusted to be used in the diagnosis
process. Security was implemented through an external DICOM
medical image access component [11] that was integrated with
the VolumeViewer and thus shielding the security problems
from the visualisation components.

Figure 6: GeoVizViewer is a collaborative climate
geovisualization application component

5.2

The GeoVizViewer

Dramatic advances in 'mapping' have occurred during the
past decade. Among the most fundamental are the change from
maps that communicate a single message, statically, to maps
that support exploration of multiple perspectives, dynamically.
The GeoVizViewer application component is designed to
support non-expert needs that can be met through highly
interactive and dynamic geoinformation exploration as well as
the web-delivery of such tools. Dynamic interaction between a
statistical distribution presentation (histogram) and a
cartographic representation (2D and 3D terrain) allow users to
explore graphics datasets in greater depth. GeoVizViewer
provides the foundation for customization of a collaborative
climate geovisualization application.

7. ACKNOWLEDGEMENTS
The SMARTDOC project is a collaboration between Linköping
University, AVS, Unilever, AETmed, Intecs and Central
Manchester Healthcare Trust. The project was partly funded by
the EC Commission IST-2001-28137. The SMARTDOC web
site can be found at: http://servus.itn.liu.se/smartdoc/.

8. REFERENCES

6. CONCLUSION
The SMARTDOC framework places a special focus on
scalability, extensibility, reusability and most important
robustness. The advantages and experiences from our
implementation can be summarised:
Ease-of-use and robustness: A SMARTDOC Collaboratory
application provides a layer shielding end users from the
underlying
complexities
of
diverse
connectivity
implementations, freeing them to concentrate on image
interpretation and treatment planning. Microsoft’s DirectPlay
provides license free, robust and easy-to-use visualisation
collaboration. Clinicians can participate in an unconstrained
process of group discovery with a minimum of previous
network experience.
Easy-to-implement and reusability: The architecture of the
Communication Object insulates the application components
layer from the underlying DirectPlay network abstract layer
they are running on. Any visualisation application component
can be extended with these collaborative tools with a minimum
of programming effort (a couple of days).
Component
architecture
provides
scalability:
All
components in VolumeViewer can be reused, refined or
replaced.
Network and media independent: DirectPlay is media
independent, which mean that sessions can be held no matter

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

[1] Beolchi L., “European Telemedicine Glossary, DG
XIII-B1: Applications relating to Health”, ISBN 92828-7147-9,1999
[2] Carlson W, Spencer S et al. Visualization of results
from a distributed, coupled, supercomputer-based
mesoscale atmosperic and lake models using the NASA
ACTS
[3] A Chabert, E Grossman, Jackson L, Pietrovicz S. NCSA
Habanero – Synchronous collaborative framework and
environment
[4] Denbo D. Interactive Graphics Toolkit for Java
Applications and web applets, University of
Washington, Seattle.
[5] Fox G and Jin J. Overview of Collaborative Computing
and Some NPAC Experience. Syracuse University.
[6] Goldman Kenneth J., Hoffert Joe, McCartney Paul T.,
Plun Jerome, Rodgers Todd, Building Interactive
Distributed Applications in C++ with The Programmers'
Playground;
[7] Hindmarsh, J., Fraser, M., Heath, C., Benford, S. and
Greenhalgh, C., 2000. Object-focused interaction in
collaborative virtual environments. ACM Transactions
on Computer-Human Interaction, 3(4): 477-509.
[8] Jern M (2000). Collaborative Visual Data Navigation
on the Web. Invited Keynote Lecture to INFVIZ 2000,
IEEE International Conference on Information
Visualisation, London, IEEE Computer Science Press
[9] Jern M (2001) Visual Data Navigators “Collaboratories
- True Interactive Visualization for the Web. Invited

Speaker, Mobile and Virtual Media International
Conference 2001
[10] Richardson T, Stafford-Fraser Q, Wood K, Hopper A,
Virtual Network Computing, ,IEEE Internet Computing,
Vol.2 No.1, Jan/Feb 1998 pp33-38.
[11] Revet B, DICOM Cook Book, for Implementations in
Modalities, , PHILIPS Medical Systems, 1997
[12] Watson, V.R., 2001. Supporting Scientific Analysis
within Collaborative Problem Solving Environments,
HICSS-34, Maui, Hawaii, Jan 3-6.
[13] Wood, J., Wright, H. and Brodlie, K., 1997.
Collaborative Visualization, Proc., IEEE information
Visualization '97. IEEEComputer Society, Pheoniz, Oct.
19-24, 1997, pp. 253-259.
[14] Bradford Di Benedetto, DirectPlay 8 Overview,
Microsoft Corporation, May 2001 msdn.Microsoft.com
[15] Habanero
Home
Page
at
http://havefun.ncsa.uiuc.edu/habanero/

NCSA

-

[16] MICE project (Molecular Interactive Collaborative
Environment) http://mice.sdsc.edu/site/
[17] Pang Alex Collaborative 3D Visualization with CSpray;
www.computer.muni.cz/cga/cg1997/g2032abs.htm
[18] Roussev, A Reference Architecture for Distributed
Collaborative
Applications;
http://www.cs.unc.edu/~munson/DARPA/
[19] Wood Jason, Collaborative Visualization, Leeds
University
PhD
Thesis,
February
1998
www.scs.leeds.ac.uk/kwb/publications95.htm#Love:98
[20] SMARTDOC web site servus.itn.liu.se/smartdoc/

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

