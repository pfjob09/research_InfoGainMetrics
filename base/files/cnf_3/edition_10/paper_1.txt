Visualizing Electronic Mail
Sandra Sudarsky Rune Hjelsvold
Siemens Corporate Research, Inc.
{sudarsky, runehj}@scr.siemens.com
Abstract
As the number of electronic messages continues to
grow,
information
visualization
tools
become
increasingly important to support users in the complexity
of managing the large amount of information they
receive. This paper presents a visualization approach to
support email browsing as well as querying. A new
clustering mechanism is presented which, based on the
hierarchical nature of domain names, provides an
automatic classification of electronic messages. This
representation is combined with a temporal visualization
that supports browsing, Boolean searching and threading
operations.

1. Introduction
Electronic mail has become one of the most widely
used computer applications. In the last decade, email
usage has grown at incredible rates and this trend is likely
to continue. It is estimated that by the end of the year
2000, three-fourths of the U.S. workers and 45 percent of
all households in the U.S. were using email [1]. The use
of email in the U.S. grew from 40 percent of the
population in 1999 to 58 percent at the end of the year
2000, which represents about 155 million Americans. In
the last few years, the email market outside the U.S. has
also shown a significant growth and for the first time in
history, the number of electronic mailboxes outside the
U.S. is larger than that of the U.S [1].
The use of email is expected to continue growing, not
only by an increase on the number of users, but more
significantly, by a broadening of the number of uses for
email [1]. Although electronic mail was originally
designed as a communication tool, it is currently being
used for a number of additional functions including
personal archiving and task management [7]. These new
uses of electronic mail largely contribute to the substantial
increase in the number of messages being transmitted. As
the volume of electronic messages continues to grow, new
tools become indispensable to help users manage the large
amount of information they receive.
Semantic hierarchies are commonly used to maintain
large amounts of information well organized. However,
several studies [3, 7] suggest that users have difficulties
filing electronic messages into folders so that they can

later be retrieved. There are a number of reasons why this
is the case. First, some users find it difficult to generate
appropriate folder labels and indicate that often a single
message fits multiple folder criteria. Second, a previously
stored message can be difficult to retrieve directly because
as time passes, it becomes difficult to reconstruct the label
used for archiving. The same argument explains why
automatic filing based on filters does not work well in
practice either. Third, previously filed messages may
need to be moved to a new folder as the classification may
change over time as new messages are received. The
difficulty users face filing messages, in addition to the fact
that often messages are kept in the inbox folder as
remainders of unfinished tasks, contribute to users having
large mailboxes with no apparent structure [7].
In this paper we propose mechanisms to reduce the
complexity of dealing with large email data sets.
Currently, users face a number of difficulties when
searching for a particular message. First, as the number of
messages increases, the efficiency of a search function
deteriorates. Second, a simple query often returns too
many undesirable hits and the context under which those
messages appear is completely lost. Third, queries based
on incomplete information are difficult to construct.
More precisely, the search criterion usually available is
limited to the sender field, the subject line or the body of
the message. However, there are a number of scenarios
where messages can be better associated with a particular
organization and must be retrieved without any prior
knowledge of the sender’s name.
Some possible
examples include reply messages related to a submitted
bug report, a request for product information or an
application for employment.
We propose a new visualization approach to address
some of the issues discussed above. We take advantage of
the hierarchical nature of the domain names present in
every email address to provide an automatic clustering of
electronic messages.
The resulting representation
provides a hierarchical view that facilitates browsing, can
be used to reduce the search space, and eliminates the
difficult task of filing messages into folders. Combined
with a full text search and a temporal visualization, this
representation provides a useful framework for querying
and exploring the contents of an electronic mail folder.
The rest of this paper is organized as follows. Section
2 discusses related work. Section 3 describes our

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

approach and presents in detail our current prototype.
Section 4 summarizes the contributions of this paper and
suggests topics for future work. A brief and informal user
study is presented in the Appendix.

nodes of the tree are spread along a timeline and the
relationships between the sender of a message and the
recipient are highlighted. Similar techniques [6] have
been investigated to visualize the structure of
conversation threads like those found within newsgroups.

2. Previous Work
3. Approach
There have been a number of studies [3, 7] aimed at
exploring the current uses of email and identifying the
problems commonly encountered by users dealing with
large number of messages. A recent study [3] suggests
that email is seriously overloaded; it is being used for
tasks it was not designed to support. Based on a number
of interviews, the benefits of several features standard in
many email applications were evaluated. In particular, the
study indicates that the search feature, present in popular
email clients such as Microsoft Outlook, is seldom being
used. Instead, a large percentage of email users rely on
the sort feature as it can be used more quickly to specify
the search criteria. Similarly, few users report much use
of filters because they find filters too difficult to use or
because they cannot specify useful filters. The study also
indicates that users seldom file messages into folders to be
retrieved later. When users do create folders, they tend to
organize them manually by one or more of the following
categories: by sender, by organization, by project or by
personal interest (professional vs. private).
Another study [7] identifies task management, personal
archiving and asynchronous communication as the three
main uses of electronic mail and discusses possible
techniques to better support each of these functions. The
ability to mark inbox items requiring further action and
the addition of program reminders are considered key
features required to support task management. Clustering,
full time search and the ability to display semantically
related messages together are identified as the essential
operations to support personal archiving. Threading and
the ability to track the status of a conversation are listed as
key requirements for asynchronous communication.
In addition to the user studies described above, a
small number of visualization and information
management techniques [2, 4, 5, 8] have been proposed to
support email usage. The TimeStore project [2, 5, 8]
addresses the complexity involved in managing large
volumes of electronic mail. As a result of some studies on
human memory, the authors of [8] identify time as the
primary method for email organization and propose a
visualization technique that organizes messages on a twodimensional grid by time and sender. Rohall et. al. [4]
propose a visualization of electronic messages based on
reduced-resolution overviews to help users find
documents faster. In addition, message threads consisting
of an originating message and a series of replies are
visualized as trees, rooted at the originating message. The

Folder hierarchies are commonly used to organize large
amounts of information. However, as suggested in [3, 7],
the difficulties of filing email messages lead to large and
unstructured electronic mailboxes.
As the size of the mailbox increases, it becomes
difficult to browse through this large space in search for a
particular message. Users usually resort to sorting the
messages by a particular field and scrolling down the list.
Alternatively, some users take advantage of the full text
search feature offered by many systems.
In this project we propose mechanisms to alleviate
some of the difficulties arising from users having very
large mailboxes. To eliminate the tedious task of filing
messages into folders we provide an automatic clustering
of the messages based on the sender’s email addresses.
Using this classification, we organize the messages into a
hierarchical view for easy surfing and a temporal view that
presents the messages in a graphical form. As described
below, this approach offers a number of advantages that
facilitate browsing as well as querying. Based on these
ideas, we built a prototype consisting of three main
components: a hierarchical view, a temporal view and a
query interface. The rest of the paper describes each of
these components in detail.

3.1 Hierarchical View
The hierarchical representation of the messages is
based on the sender’s email addresses. Each email
address consists of two main parts separated by the axon
sign (@). The first part corresponds to the user name and
the second one corresponds to the domain name. The
domain name is composed of a number of sub-strings
separated by dots ("."). The end of the domain name
consists of two or three letters indicating the top-level
domain. It describes the type of organization or the
country where the host server is located. Currently there
are six1 top-level domain types including ".edu", ".com",
".mil", ".gov", ".org" and ".net", in addition to the two
letter country codes used for email addresses outside the
U.S. Similarly, the name preceding the top-level domain,
or sub-domain, usually represents the name of a company

1
Seven additional top-level domains may be added later this year,
including “.aero”, “.biz”, “.coop”, “.info”, “.museum”, “.name”, and
“.pro”

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

or institution. Continuing this way, the next sub-string, if
available, often describes a department or division within
the institution.
Using this inherently hierarchical representation, we
automatically group the messages, creating a Windows
Explorer-like interface. Figure 1 shows the initial view of
an inbox folder classified by top-level domain, providing a
high level view of the folder contents. From this view, it
is clear that 65 messages relate to U.S. universities, 730
messages were sent from commercial enterprises, 20
messages were received from Germany, and so on.

After studying this view we realized that although
useful, this classification presents a potential problem.
For the most part, we are interested in grouping all the
messages coming from a particular company or institution
under the same node. However, a company having sites in
the U.S. as well as abroad usually has different top-level
domain names. For example, a user with a Siemens
Corporate Research U.S. email address will appear as
user@scr.siemens.com, while a user working at Siemens
Building Technologies in Germany will have an email
address such as "user@sbt.siemens.de". Our solution is
to offer alternative views that the user can choose from.
Besides the top-level domain view presented in Figure
1 and 2, we provide two additional views. A company/
institution view, where we ignore the top level domain
name and group the messages according to the subdomain (Figure 3.a) and a sender view where we group
the messages by the first letter of the sender’s name
(Figure 3.b).

Figure 1. Messages classified by top-level Domain.
Initially, only the top-level domain nodes are
displayed. Like in the explorer interface, a click on a
folder icon results on a dynamic expansion of the
corresponding sub-tree. Figure 2 illustrates the result of
expanding the ".edu" node and some of its children.

Figure 3. (a) Messages classified by sub-domain. (b)
Messages classified by sender’s last name.

Figure 2. Expansions of the “.edu” node.

This hierarchical representation, which to the authors’
best knowledge is novel, has several advantages. First, it
presents a high level view of the mailbox. Second, it

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

provides an automatic clustering, which may facilitate the
search for a particular message without having to type any
query. Third, it reduces the need to scroll down to find a
message by grouping related messages together and
displaying only those under the selected sub-tree. The
reduction of the number of visible items may be especially
important with mobile devices.
Fourth, this
representation can be used to reduce the search space by
allowing the user to specify which sub-tree is relevant for
a particular query as described in the following section.

3.2 Temporal View
The hierarchical view presented in the last section
lacks temporal information, which is extremely important
for this application [4, 7]. We describe next the temporal
view of our prototype, which is designed to complement
the hierarchical view. In the temporal view messages are
displayed in a two-dimensional grid with time displayed
along the horizontal axis and senders along the vertical
axis. Three main functions are provided: display, search
and threading.
3.2.1. The display function. In order to display
messages in the temporal view, the user selects any node
on the hierarchical view and clicks on the display button.
As shown in Figure 4, all the messages that appear as
leaves under the selected sub-tree are displayed as small
squares in the temporal window. The number shown in
black at the top-right hand side of the message icons
indicates the number of messages received from the same
user during that particular time period. The time axis can
be refined to represent years, months, days or hours. This
zooming capability along the time axis provides great user
control. Nodes outlined in green indicate that the current
user browsing his/her email is the unique recipient of that
message.
3.2.2. The search function. Users can take advantage
of the full-text search capability provided to specify a
query. By selecting a node in the hierarchy, the user
narrows the search space to those messages that appear
under that sub-tree. Among those messages, the ones that
match the query are displayed in the temporal view.
Narrowing the search space in this way may prove useful
when the user has partial knowledge about the message
he/she is trying to retrieve. The user may not remember
the name of the person who sent him/her the message, but
may have a good idea where that person works.

Figure 4. Display function.
We provide a full-text search feature to allow users to
retrieve messages by subject, keyword, sender name and
time. In addition, Boolean queries are permitted to
narrow or broaden the search space. An interesting query
consists of a number of keywords separated by the “OR”
Boolean operator. In this case the messages satisfying the
query are ranked according to their relevance to the query.
We define the rank of message i with respect to query q as

rank (i, q ) =
where

mi
,
n

mi represents the number of keyword matches

in message i and n is the total number of keywords in
query q. Once the ranks are computed, the messages are
displayed color-coded in the temporal window using the
color map shown in Figure 5.

gggn
Lowest rank

Highest rank

Figure 5. Ranking color map.
Figure 6 illustrates the result of querying for messages
with one or more of the following words: “Re:”, “3D” or
“models”, in the subject field. The color of the nodes
indicates if the messages match one, two or all three
keywords.

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

axis and represent the messages as small squares with
coordinates given by the time the message was received
and the sender field. Conversely, as shown in Figure 8,
when the number of senders to be displayed is relatively
small, we display each message as a rectangular node
filled with a sub-string of the subject field wrapped over
multiple lines. The same color schema described before
is used here, however, a vertical line next to the message
icon is used to indicate whether the user is the unique
recipient of the message and a horizontal line on top of
the message indicates the message ranking. As we have
more vertical space, we display the senders using
thumbnail images if available.

Figure 6. Search function with Boolean query.
Similarly, as shown in Figure 7, when the display
function is invoked and keywords appear in the query
interface, the nodes are displayed color-coded to indicate
their ranking. In this case, all the nodes in the sub-tree
are shown, but those nodes that do not match any of the
keywords are colored light gray.
This visualization
shows not only the subset of messages that match the
query, but also the context in which they appear in
relation to other messages. This view may be especially
useful when searching for messages based on incomplete
information.
Figure 8. Messages displayed at a high level of detail.
The two-dimensional grid representation has the
potential problem that messages can hide one another as
they share the same coordinates. When this occurs, the
user can click on the message icon and a menu with the
corresponding list of messages is displayed.

Figure 7. Display function with Boolean query.
Since the number of messages to be displayed varies
significantly from query to query, we provide two
different levels of detail under the temporal view. As we
have shown, when a query generates a large number of
senders, we display the sender name along the vertical

3.2.3. The thread function. Grouping messages by
thread of a conversation is an important function when
following a discussion that may have taken place over a
period of time. We define the thread of an e-mail
conversation as a series of messages sharing the same
subject line, where prefixes such as “Re:” and “Fw:” are
ignored. Figure 9 shows the results of invoking the thread
function on a leaf node. All those messages belonging to
that thread are displayed in the temporal window. In this
view the time axis has been refined represent days instead
of months. Straight blue lines are used here to highlight
the flow of the e-mail “conversation”. A link between
two messages indicates that the message occurring later in
time is a reply to the one appearing earlier.
Applying
this thread function can result on a forest of trees, mainly
because of the definition of thread we employed. We

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

emphasize here the aspect that helps to illustrate the
structure of the thread, as better tools already exist to
identify messages belonging to a specific thread [4, 6].

Figure 9. Thread function with a refined time axis.

under which they are found and (3) a thread function that
groups messages sharing a common subject line and
highlights the flow of an email conversation.
The prototype was implemented using the Mail Java
API, providing a common interface running under several
platforms. The results of our preliminary usability study
are very encouraging.
A more extensive study is
necessary to further evaluate the benefits of our prototype.
There are a number of remaining issues for further
research. It would be worthwhile to consider augmenting
the keyword search interface to incorporate speech,
eliminating the need to type keywords to specify a query.
This, as well as the clustering mechanism offered by the
hierarchical view, may become especially useful with
mobile devices. Second, it would also be useful to allow
users to customize the interface to fit their needs. By
specifying certain rules and colors, the system could
automatically highlight those messages that fit the given
criteria. Third, there is a need to enhance the thread
recognition process to group together only those messages
that are directly or indirectly replies to each other.

4. Conclusions

5. Acknowledgement

As the volume of electronic messages continues to
grow, new tools are required to reduce the complexity of
managing the large amount of information users receive.
In this paper we propose several mechanisms aimed at
visualizing the content of a mail folder containing a large
number of messages. Our prototype consists of a
hierarchical view, a temporal view and a querying
interface.
The hierarchical view automatically clusters related
messages together based on the domain name of the
sender’s email addresses. This representation offers a
number of advantages for querying and browsing email
messages. First, it presents a high level view of the
mailbox. Second, it provides an automatic clustering of
messages, introducing a browsing structure and
eliminating the tedious task of filing messages into
folders. Third, it groups related messages together using a
Windows Explorer-like interface that reduces the need to
scroll down to find a particular message. Fourth, the
hierarchical representation can be used to reduce the
search space to only those messages residing under the
selected sub-tree, not only improving the efficiency of the
search, but also eliminating a number of undesirable hits.
The temporal view organizes messages by time and
sender in a two-dimensional grid. This view together with
the query interface supports three types of functions: (1)
A full-text search function enhanced by a color-coded
schema that highlights the most relevant messages under a
Boolean query, (2) a display function that presents the
messages located under a selected node and the context

We would like to thank Arturo Pizano, Stuart Goose
and Kem-Laurin Lubin for many fruitful discussions.
Special thanks to James Abello for his review and
comments. We are thankful to the participants of the
usability study for their time and valuable suggestions.

6. References
[1] E. Arnum, B. Chew and J. Carvajal, "Year-End 2000 Mailbox
Report", Messaging Online, February 21-23, 2001,
http://a2.tc/www.messagingonline.com/feature2000.html
[2] R. Baecker, K. Booth, S. Jovicic, J. McGrenere, and G.
Moore, "Reducing the Gap Between What Users Know and What
They Need to Know", Proceedings on the conference on
universal usability, 2000, 17-23.
[3] N. Ducheneaut and V. Bellotti, "Email as Habitat",
Interactions, 8(5) Sept.-Oct 2001, ACM, pp. 30-38.
[4] S. L. Rohall, D. Gruen, P. Moody and S. Kellerman, "Email
Visualizations to Aid Communications", Late-Breaking Topics,
Proceedings of the IEEE Symposium on Information
Visualization, October 22-23, 2001, San Diego, CA., pp. 12-15.
[5] N. Silver, Time-based visualization of electronic mail. M.S.
Thesis, Dept. of Computer Science, University of Toronto.
[6] M. Smith and A. Fiore, “Visualization Components for
Persistent Conversations”, CHI 2001, 3(1), 2001, pp. 136-143.
[7] S. Whittaker, C. L. Sidner, ”Email Overload: Exploring
Personal Information Management of Email”, Conference
proceedings on Human factors in computing systems, CHI’96:
276-283, 1996, Vancouver, British Columbia, Canada.
[8] K. Yiu, R.M. Baecker, N. Silver and B. Long, "A Time-based
Interface for Electronic Mail and task Management", In Design of
Computing Systems: Proceedings of HCI International, vol. 2, Elsevier,
1997, pp. 19-22.

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

7. Appendix
A brief, informal user study was conducted to assess
the usefulness of our prototype. The experiment was
designed to measure user performance and satisfaction. A
group of eight subjects, most of them long time users of
Microsoft Outlook, volunteer to participate in the study.
Each subject completed the same seven tasks. For each
task the subjects were presented with a scenario in which
one or more messages were sought. The same email
account with an inbox folder unfamiliar to the
participants, containing over 600 messages was used
during the experiments. The subjects were asked to try to
find the requested messages using both Outlook and our
prototype. Half of the users started the experiments using
our prototype, the other half with Outlook. This ensured
that the users were not influenced by information learned
from the first application they tested. The time elapsed
during the completion of each task was recorded and the
mean and standard deviations computed. The average
times for the seven tasks are displayed in Table 1.
Table 1. Time measurements

100
80
60
40
20

T2

T1

T3

MS Outlook

T4

T5

T6

time (seconds)

120

0

T7

Our Prototype

The information provided to the participants for each
task is summarized below:
•
•
•
•
•
•
•

T1: Institution + keyword
T2: Institution + date + keyword
T3: Set of keywords, not all required.
T4: Sender name
T5: Institution + date
T6: Keyword + date + only recipient
T7: Sender name + date

The data shows a significance difference in the time
measurements related to tasks T1, T2 and T3. One
explanation for these results is that users had a difficult
time specifying institution names and Boolean queries
using the advance search feature of Outlook. For instance,
the fact that a particular message was sent by a professor
of the Georgia Institute of Technology provides no useful
information unless the participant knows “gatech” to be
the corresponding acronym domain name. On the other
hand, selecting “gatech” from the list of universities
appearing as children of the “.edu” node in the
hierarchical view is straight forward, even if, as before, the
participant is not familiar with the acronym. However,
although an institution name (“Lucent Technologies”)
was also specified in task T5, the time spent to find that
message was similar using both applications.
We
observed that in this case the participants had no problem
reconstructing the domain name (“lucent.com”) to be used
as a keyword in the query. Task T3 involved a Boolean
query, which was easily specified using our prototype.
However, when Outlook was used, every participant
resolved to specify a query for each keyword separately,
resulting in a higher average time to complete the task.
The remaining tasks did not result in a significant time
difference between both applications.
After completing the experiments, the participants
were asked to subjectively compare both tools in several
categories, including quality and operability of various
functions, ease of use and overall flexibility. Most users
indicated a preference of the visual effect of our prototype
and the fact that the entire GUI is displayed within a
single frame: no additional windows need to be open to
specify a query. On the other hand, many participants
reported that the entire subject field displayed in Outlook
is an important feature when browsing. Every user found
the hierarchical representation very useful, especially
when searching for an item based on a keyword that
results in a large number of hits. Being able to narrow the
search was described to be very convenient.
This study was a preliminary experiment designed to
measure user satisfaction and performance. The results
are very promising. A more complete and elaborate user
study should be conducted with a larger number of
participants and a wider range of tasks.

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

