On Nearly Symmetric Drawings of Graphs
Ming-Che Chuang
Computing Centre
Academia Sinica
Taipei, Taiwan, ROC
mingche@cobra.ee.ntu.edu.tw

Abstract
We propose a force-directed approach for drawing
graphs in a nearly symmetric fashion. Our algorithm is
built upon recent theoretical results on maximum symmetric subgraphs. Knowing the sequence of edge contractions
sufficient for turning an asymmetric graph into a symmetric subgraph, our approach in symmetric drawing begins
by drawing a graph’s maximum symmetric subgraph using
a force-directed method first; then the contracted edges are
re-inserted back into the drawing. Considering symmetry as
the underlying aesthetic criterion, our algorithm provides
better drawings than the conventional spring algorithms, as
our experimental results indicate.

1. Introduction
Graphs are known to be useful for modeling various
scientific/engineering problems in the real world. Because
of the popularity of graphs, graph drawing has emerged
as a research topic of great importance. In many cases, a
‘pretty drawing’ often offers more insights into the nature
of a graph. Among various aesthetic criteria, symmetry, has
received increasing attention in the graph drawing community [3,4,9,10,11]. In reality, however, we often have
to lower our expectations by allowing imperfection while
considering the so-called ‘nearly symmetric’ drawings of
graphs. To draw a graph in a nearly symmetric fashion, a
good starting point might be to draw its symmetric subgraph as large as possible first, and then add the remaining
nodes and edges to the drawing. Like many of the graph
drawing problems, determining whether a graph has an
axial or rotational symmetry is computationally intractable
[11].
To formulate the notion of near symmetry, a recent article
[3] (see also [4]) suggests that the degree of symmetry be
measured in turns of the number of basic ‘graph operations’
through which an asymmetric graph is turned into a sym-

Hsu-Chun Yen
Dept. of Electrical Engineering
National Taiwan University
Taipei, Taiwan, ROC
yen@cc.ee.ntu.edu.tw

metric one. The so-called contraction is among such basic
graph operations. For any edge ´Ù Ú µ of a G, contracting
´Ù Ú µ is the operation of deleting the edge incident to u and
v, and then merging u and v into a single node. Note that
if G has m parallel edges incident to u and v, then all but
one of those m parallel edges become self-loops incident to
the merged node in the resulting graph. Various complexity
results concerning nearly symmetric graph drawing have
been established in [3]. For instance, finding the maximum symmetric subgraph with respect to contraction is
NP-complete in general; however, if we restrict ourselves
to rooted trees, then the problem is solvable in polynomial
time.
The aim of this article is to continue the research on
near symmetry, with an emphasis on doing the drawings,
as opposed to the work of [3] which leans towards a
theoretical treatment of the problem. Among various
drawing algorithms reported in the literature, we focus on
the so-called force-directed approach, which has received
much attention in the graph drawing community recently
[2]. (This type of drawing is also known as a spring
algorithm.)
The spring-based approach for graph drawing has its
origin in [5], in which Eades introduced a new method
(evolved from a VLSI technique) called ’force-directed
placement’ for drawing graphs. A graph is modeled as a
physical system of rings and springs, and a repulsive force
is calculated between each pair of vertices while an attractive force is calculated only between neighbors. Attractive
forces will enclose vertices to each other, and repulsive
forces will repulse vertices to the opposite direction. A
vertex will move to its new location based on the sum of
those attractive and repulsive forces applied to the vertex.
By letting the system ”run”, the steady state of the physical
system gives rise to the final drawing of the graph.
As reported in the literature, spring algorithms enjoy the

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

merits of being efficient, easy to implement, and extendable
to 3D graph layouts, aside from the fact that they can
easily be tailored to supporting special-purpose drawings
for clustered trees, workflow, among others. An equally
important feature of spring algorithms is that they often
produce graphs with a high degree of symmetry, as proven
theoretically in [6]. In view of the above, it is natural
to adopt spring algorithms as our underlying drawing
methods for achieving nearly symmetric drawing. Our aim
is to see how to tailor the conventional spring algorithms,
taking advantage of our theoretical work on near symmetry
(built upon contraction) [3], to the development of a
new drawing algorithm which exhibits a high degree of
symmetry, thus offering a framework for nearly symmetric
drawings of graphs. Our experimental results have indeed
suggested that our modified spring algorithm outperforms
the conventional ones in turns of the degree of symmetry.
The remainder of this paper is structured as follows. Section 2 gives the preliminaries, which include graph drawing,
the notion of symmetry, the edge contraction operation,
and the theory behind spring algorithms. Our spring-based
drawing algorithm is presented in Section 3. Experimental
results are shown in Section 4. Section 5 gives a conclusion.

2. Preliminaries
Let be a graph. Let
denote the number of nodes in
. A drawing of on the plane is a mapping from the
nodes of to Ê¾ , where Ê is the set of real numbers. That
is, each node Ú is placed at point ´Ú µ on the plane, and
each edge ´Ù Ú µ is displayed as a line segment connecting
´Ùµ and
´Ú µ. A graph G has an axial symmetry if
under which the image of
is
there exists a drawing
symmetric with respect to a straight line on the plane.
has a k-rotational symmetry if there exists a drawing such
that is unchanged if the plane is rotated at some point by
¿ ¼
degrees. Axial symmetry and rotational symmetry
are two special kinds of geometric automorphisms defined
by Hong, Eades, and Lee [9]. The reader is referred to [11]
more about symmetry in graph drawing.
In [4], the concept of the so-called near symmetry
was introduced, which, in a sense, measures the degree
of symmetry in a quantitative fashion for an arbitrary
graph. The symmetry degree is measured in turns of the
number of basic graph operations needed to perform on
a graph to turn it into a symmetric one (either axially or
rotationally). Among those operations considered in [3],
refers to the
edge contraction on an edge ´Ù Ú µ of a
action of deleting the edge incident to Ù and Ú , and then
merging Ù and Ú into a single node. Note that if has m

parallel edges incident to Ù and Ú , then all but one of those
m parallel edges become self-loops incident to the merged
node in the resulting graph. See Figure 1 for a symmetric
graph (i.e., (right)) obtained by contracting edges from an
asymmetric one (i.e., (left)).

(a)

(b)

Figure 1. (left) An asymmetric graph G; (right)
An axially symmetric graph obtained from G
by contracting edges.

Now we explain the basic theory behind force-directed
algorithms. The interested reader is refers to [6] for more
details. In such a framework, for a given graph, a repulsive
force is calculated between each pair of vertices while an
attractive force is calculated only between neighbors (with
connecting edges modeled as springs). Attractive forces
will enclose vertices to each other, and repulsive forces
will repulse vertices to the opposite direction. When a
spring is longer than its natural length the incident vertices
will move closer; otherwise they will move to the opposite
direction. See Figure 2. A vertex will move to its new
location based on the sum of those attractive and repulsive
forces applied to the vertex. By letting the system ’run’,
the steady state of the physical system gives rise to the final
drawing of the graph. Evidence has suggested that spring
algorithms have the tendency to produce graphs with a high
degree of symmetry, as Figure 3 illustrates.

Attractive Force

Repellent Force

Figure 2. Forces between vertices.
In recent years, a number of modified spring algorithms
have been proposed to cope with a variety of drawing
requirements. In what follows, we briefly summarize the
idea behind a spring-based algorithm proposed by Thomas

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

effort spring algorithms become capable of producing
consistent and high quality graph layouts.

3. Nearly Symmetric Drawings of Graphs
Figure 3. Layout generated by a spring algorithm[6].

and Edward [7].

2.1. Thomas and Edward’s spring algorithm
First, vertices are placed on the frame randomly. Second,
the attractive forces and repulsive forces for each vertex are
computed , and vertices are moved to their new locations
based on the force-equilibrium criterion. The above procedure repeats until the graph layout reaches a steady state.
The model of forces is the following. Only neighboring
vertices attract to each other; yet all vertices repel to each
other.

´

¾

´ µ

Ö´

 

µ

¾

for attractive force
for repulsive force

The drawing of a graph is enclosed in a frame and the
ideal distance (i.e., ) is set as

×

Ö
Æ ÙÑ

Ñ
Ö Ó

Ö
Î

ÖØ

×

where is a constant obtained by experiments. This formula assumes the graph layout to be uniformly distributed
over the frame. In the original algorithm, the calculation
of repulsive forces need Ç´ Î ¾ µ time complexity. To improve the efficiency, an approximation method[1] has subsequently been given to reduce the computational complexity. More precisely, the repulsive forces are now calculated
by

Ö´

¾

µ

Ù´¾

 

µ

where Ù´Üµ

½
¼

if Ü ¼
otherwise

and k is the spring length in ideal situation. This
modification is known as the ’Fast Multipole Method’,
reported in an article by Greengard and Rokhlin in [8],
whose running time is bounded by Ç´ Î µ. Evidence has
suggests that the errors introduced by such a simplification
are, in most cases, acceptable. With The idea of a Cooling
System has been proposed to limit the vertices maxima
movement distances, which decrease over time. With this

As mentioned earlier, the aim of this work is to design
an algorithm to facilitate the drawings of graphs such that
the outputs exhibit as much symmetry as possible. Our approach is based upon the theoretical study of the notion
of near symmetry in [3] and the principle of spring algorithms, which have the tendency to produce graph layouts
with a high degree of symmetry as previous research suggests. (The interested reader is also referred to the work
by Eades and Lin [6], which demonstrates theoretically the
connection between of spring algorithms and symmetry.)
The intuition behind our design is that if we know the sequence of contractions capable of turning an initially asymmetric graph ( ) into a symmetric one ( ¼ ), an ‘intuitively
good’ way to draw is perhaps by drawing ¼ first (using
a spring algorithm), followed by re-inserting the contracted
edges back into the drawing of ¼ . The remainder of this
section shows how Thomas and Edward’s method can be
tailored to accommodate the above idea of drawing graphs
in a nearly symmetric fashion. Our problem formulation is
the following.

3.1. Problem Formulation
Given an undirected graph
´Î
µ and its symmetric sub-graph (in the sense of [3]) ×Ù
´Î×Ù
×Ù µ
(where Î×Ù
Î
) obtained by contracting
×Ù
edges in . ÓÒØÖ Ø
  ×Ù , design an algorithm to
draw as symmetrically as possible, taking advantage of
the availability of ×Ù and ÓÒØÖ Ø .
The basic idea in our method is to use a spring algorithm
to generate a graph layout ×Ù of ×Ù , and then recover
(i.e., expand) the contracted edges
ÓÒØÖ Ø in the
drawing ×Ù . During the course of this recovery, the
overall drawing of ×Ù itself is fixed, and the locations of
those contracted edges are computed by a modified spring
algorithm. Recall that a contraction on an edge collapses
the two end-points of the edge to form a new vertex. We let
ÎÖ ÔÖ × ÒØ Ø ÓÒ be the set of all such newly created vertices,
each of which is associated with the contraction of an edge.
Notice that in general, a vertex in ÎÖ ÔÖ × ÒØ Ø ÓÒ could be
the representation of more than one edge. Our algorithm
is divided into three steps. First, we place the vertices of
the contracted (symmetric) graph on the frame randomly.
Second, we run the original spring algorithm to get a nearly
symmetric graph layout. Finally, vertices in ÎÖ ÔÖ × ÒØ Ø ÓÒ
are processed from which those contracted edges can be

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

recovered and drawn.

Ú ÔÓ× Ø ÓÒ

3.2. Algorithm NEAR-SYMMETRY

´ µ

Ö´

µ

Ë

Ö ÔÖ ×Ø

Î

Ö ÔÖ ×Ø

Phase 1 : Construct graph layout
original spring algorithm

×Ù of

Phase 2 : recover contracted edges from

×Ù by the

Ú ÔÓ× Ø ÓÒ
Ö Ò

 

Ù ÔÓ× Ø ÓÒ

Ú

Ö Ò

·

¢

Ö´

µ

end if
end for
for all Ù ¾ Î×Ù do
Computing repulsive force between vertices
in ÎÖ ÔÖ ×Ø and vertices in ×Ù
if Ù ÎÖ ÔÖ ×Ø then
Ú ÔÓ× Ø ÓÒ
Ú

Ö Ò

 

Ù ÔÓ× Ø ÓÒ

Ú

Ö Ò

·

¢

Ö´

µ

end if
end for
end for
for all ¾ Ö ÔÖ ×Ø do
Computing attractive force
tices Ù and Ú

Ù

Ö Ò

Ù

Ö Ò

 

¢
¢

´

µ

Ö´

µ

Ú

Ñ Ò´Ë

Ö Ò

Ú ÔÓ× Ø ÓÒ

Ú ÔÓ× Ø ÓÒ

Ú

Ö Ò

·Ú

µ

Ö Ò

end for
end for
end for

3.3. Force modeling in recovering edges
Force modeling plays a key role in spring algorithms,
and has a decisive influence on the graph layout. In the first
phase of our algorithm, we use the original spring algorithm
based upon Thomas and Edward’s model with the following
force model.
¾

´ µ

 

for attractive force
for repulsive force

¾

In the second phase of recovering contracted edges, we
change the attractive force between vertices to

for all Ù in ÎÖ ÔÖ ×Ø do
Computing repulsive force between vertices
in ÎÖ ÔÖ ×Ø
if Ù Ú then
Ú

Ö Ò

Ö´ µ

¼

Ö Ò

·

Ú

for all Ú ¾ ÎÖ ÔÖ ×Ø do
Cooling system and move vertices to new locations

´

×Ù

for all iteration do
for all ÎÖ ÔÖ ×Ø ¾ ÎÖ ÔÖ ×Ø Ø ÓÒ do
recover ÎÖ ÔÖ ×Ø
for all Ú ¾ ÎÖ ÔÖ ×Ø do
Ú

Ù ÔÓ× Ø ÓÒ

Ö Ò

end for

drawing of
drawing of ×Ù
attractive force for recovering contracted
edges, for length of edge
repulsive force for recovering contracted
edges, for length of edge
maxima vertex movement distance in each
iteration, used in cooling system
representational vertices for merged vertices, ÎÖ ÔÖ ×Ø ¾ ÎÖ ÔÖ × ÒØ Ø ÓÒ
all contracted edges needed to be recovered
from ÎÖ ÔÖ ×Ø

×Ù

 

Ú

ÙÚ

and

ÙÚ

on ver-

´ µ

´

Î

Ö ÔÖ ×Ø ¢

µ¾

Ã

where k is the ideal distance and ÎÖ ÔÖ ×Ø is the size (i.e.,
number) of the merged vertices associated with ÎÖ ÔÖ ×Ø as
the result of contractions. The purpose of this modification
is to cluster recovered vertices around representational
vertices. The bigger the ÎÖ ÔÖ × ÒØ is, the closer the
recovered vertices will become.

4. Experimental Results
To show the effectiveness of our design, our nearly
symmetric drawing algorithm has been applied to a number
of graphs, and the outcomes have been compared with
those produced by the original spring algorithm. In the
following, our experimental results are illustrated in three
columns. Given a graph , let ¼ be its symmetric
subgraph resulting from the application of a sequence
of contractions. Column one represents the layout of
produced by the original spring algorithm. Column two is
the layout of ¼ again using the original spring algorithm.
Column three illustrates the output of our algorithm (i.e., a

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

drawing of ) , in which those edges contracted in in the
process of obtaining ¼ are restored.
Due to the nature of spring algorithms, a list is always
rendered into a straight line, because such a layout of a
list resides in the most stable state. In our experiment, our
modified spring algorithm also shows this feature. In addition, evidence has shown that restoring those contracted
edges causes only a minor variation in edge length for those
edges to which contractions were applied in the first place.
We feel that this characteristic is important in that the final
drawing does not deviate too much from the drawing of
the fully symmetric subgraph. See the second and third
columns of Figure 4, for example.
Another feature of our algorithm is that all recovered edges
and vertices will be clustered around the representational
vertices. This feature can preserve the backbone layout
produced from the contracted graph, allowing us to take
advantage of getting more ’control’ in the output layout.
Figure 5 attests to this property, in which we use edge
contraction to control the graph layout to be a rectangle and
all recovered vertices are distributed inside the rectangle.
For complex graphs (with crossed edges), the conventional
spring algorithms may lead to twisted and inconsistent
edges. Such an abnormality can be alleviated to a certain
extent by using edge contractions to prune off these
undesired effects. As Figure 6 indicates, we contract the
crosses edges and use the contracted graph to produce a
symmetric layout. After recovering these contracted edges,
all crossed edges are located around the representational
vertex. Because the complex part of the graph is limited in
a specific area, the influence on the whole graph layout is
minimized. As a result, the graph layout produced by our
algorithm exhibits a better drawing.
The original spring algorithms have the tendency of preserving the property of rotational symmetry, provided that
certain critical conditions are met. Our method also has this
feature. Because of the fact that we contract asymmetric
edges before applying the spring-based algorithm, so the
resulting layout can show the rotational symmetry as well.
In Figure 7, for instance, we just contract one edge and the
experiment results in a hexagon.
Experimental results on more complicated graphs are
shown in Figure 8. The fact that our algorithm produces
nicer layouts than the original spring algorithm can easily
be seen.

5. Conclusion
We have proposed a modified spring algorithm for graph
drawing, while considering symmetry as the underlying
aesthetic criterion. Our algorithm takes advantage of recent

Figure 4. Simple examples.

Figure 5. Grid-structured graphs.

Figure 6. A graph with crossed edges.
theoretical results on maximum symmetric subgraphs, as
well as the nature of spring algorithms. To show the effectiveness of our approach, we have applied our algorithm
to a variety of graphs, and the results show improvements
(in a qualitative fashion) over those produced by the
conventional spring algorithm. In our future research, it is
intended to define a symmetry measure between graphs,
so that layouts of our algorithm can be compared with the
conventional one in a quantitative fashion.

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

[11] J. Manning. Geometric Symmetry in Graphs. PhD thesis,
Purdue University, 1990.
[12] N. Quinn and M. Breur. A force directed component placement procedure for printed circuit boards. IEEE Transactions on Circuits and Systems, CAS-26(6):377–388, 1979.

Figure 7. A hexagon.

Figure 8. Complex graphs.

References
[1] A. Apple. An efficient algorithms for many-body simulations. SIMA Journal on Scientific and Statical Computing,
6(1):85–103, 1985.
[2] G. D. Battista, P. Eades, R. Tamassia, and I. G. Tollis. Algorithms for drawing graphs: an annotated bibliography. Technical report, Brown University, June 1994.
[3] H. Chen, H. Lu, and H. Yen. On maximum symmetric subgraphs. In Graph Drawing 2000, pages 372–383, 2000.
[4] K. Chin and H. Yen. The symmetry number problem for
trees. Information Processing Letters, 79(2):73–79, 2001.
[5] P. Eades. A heuristic for graph drawing. Congressus Numerantium, 42:149–160, 1984.
[6] P. Eades and X. Lin. Spring Algorithms and Symmetry. In
COCOON’97, 1999.
[7] T. Fruchterman and E. Reingold. Graph Drawing by Forcedirected Placement. Software-Practice and Experience,
2(11):1129–1164, 1991.
[8] L. Greengard and V. Rokhlin. A fast algorithm for particle
simulations. Journal of Computational Physics, pages 325–
348, 1987.
[9] S. Hong, P. Eades, and S. Lee. Finding Planar Geometric
Automorphisms in Planar Graphs. In 9th International Symposium on Algorithms and Computation, pages 277–286,
1998.
[10] S. Hong, P. Eadess, A. Quigley, and S. Lee. Drawing Algorithms for Series-Parallel Digraphs in Three Dimensions.
In International Symposium on Graph Drawing (GD’98),
1998.

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

