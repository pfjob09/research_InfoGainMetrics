Generating Bipedal Animation Using
Dynamic Implementation

Matthew J. Hyland
Jian J. Zhang
National Centre of Computer Animation
Bournemouth University
Poole, Dorset BH12 5BB
United Kingdom
mhyland@bournemouth.ac.uk
jzhang@bournemouth.ac.uk

Abstract
This paper addresses the problem faced by
animators in creating accurate and realistic
walk cycles, as well as coherent interaction
with the immediate production environment.
Modern software packages often contain
modules for implementing dynamics, without
the need for specialist programs. In this paper,
how to best use these modules to create the
desired realistic effects is explored and
expanded upon, including driving forces for
balanced bipedal motion; friction/slippage
between the feet of the model and the surface
walked upon. A simple “wind-up” toy model is
used as an example for the demonstration of
the process. But the approaches taken could be
similarly extended into more complicated
models and applications.

1. Introduction
A well-trained animator has little problem
in achieving realistic movement of models, but
it can be costly in terms of expertise and time,
and rises linearly in terms of the number and
complexity of models required to be animated.
The animation of walk cycles is one such
example where although many animators are
able to create realistic animation, they have to
do so with enormous care. This is because the
human eye is so discerning to walking cycles
that a tiny inaccuracy can result in noticeably
unnatural movement. The impression of
weight, contact with the floor, and ‘skating’ of
the models over the surface where ground and
foot have not connected properly are just some
of the problems faced by animators in creating
the walk cycles.
All moving bodies follow the laws of
motion which govern both their kinematic and
dynamic behaviours. A recognised alternative

to manual animation (key-framing, for
example) is to use dynamics. It will not only
achieve realism and is replicable in many
circumstances, but will also greatly reduce the
animators’ laborious input.
There have been a number of methods
proposed in the literature, which are reviewed
in the next section. These theoretical methods
are either developed into software prototypes
or specialised software programs. Despite their
contribution towards the automation of walk
cycle animation, the disadvantage is the
necessity of the specialised software programs,
i.e. the animator has to learn how to use these
packages on top of other general animation
tools. This often accounts for that many
animators prefer animating by hand to
resorting to other automatic tools, such as
dynamics.
With the growing demand of visual
realism, physical theories have become
increasingly involved in computer animation.
Many general purpose physics/dynamics
software packages have been produced. A
large number of animation packages, such as
Alias|Wavefront Maya, Softimage XSI, 3D
Studio MAX have already adopted such tools
(e.g. dynamics) as their standard components.
These packages are so powerful that if they can
be understood and used well, they will help in
producing stunningly realistic animation
artefacts, save huge amounts of animators
effort and reduce lead time.
In this paper, we argue that we should
make the most use of these general-purpose
software tools and demonstrate with a bipedal
model how to use them to produce automated
walk cycles.

2. Background
This subject has been approached various
times before from purely mechanical
simulation
viewpoint.
[1]
describes

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

architecture for a simulator that specifies
movements in a goal-directed manner and
amongst others, details processing contacts,
moving the centre of gravity and maintaining
balance. [2] illustrates modelling techniques
for animating legged figures in the PODA
animation system, and more importantly the
integration of a simple model of leggedlocomotion dynamics. [3] and [4] both
demonstrate efficient schemes for outputting
fully generated motion using forward
dynamics.
An integrated set of methods for the
construction and animation of solid systems
that satisfy specified constraints is detailed in
[5]. [6] and [7] describe a method for
generating balanced walking models by adding
closed-loop feedback to the motions, a topic
not entered into here, but further research into
more complex biped would undoubtedly
broach.
Despite of all the above research into
generating bipedal motion, the majority of
animated walk cycles are done traditionally,
with the use of key-frames, due to the
availability and ease of use of the tools
available. This approach, however, introduces
several problems:
•

Lack of physical accuracy as discussed
above.

•

Lack of procedural or any high level
control over character movement (e.g.
specifying beginning and ending positions
and paths taken).

•

Labour intensive. Animators often find
themselves spending hours, even days of
effort to tweak the details in order to
realistically animate a walking model.

Our approach is to tackle the problem of
walk cycle implementation with the tools
currently available as industry standard, and
extending their usefulness through applied and
lateral thought to the problems that this
produces.

3. The Biped Model
Two issues are concerned with the
modelling of the walking cycles of a bipedal
model: forward movement and balancing.
However both are related and one cannot be
completed without the other, and as we all
know both are governed by the physical laws

of motion and the equilibrium of the forces that
are the external, inertial and frictional
(resistant) forces.
The complexity of a walk cycle depends
on the complexity of the moving model. But
the process is similar among all models in that
their forces and constraints need to be properly
assigned. Once a problem is understood, the
modelling and structuring can be readily
completed.
In this paper we discuss the dynamics and
their application to the generation of the
walking cycles of a simplistic ‘walking’
model, which is a pair of wind-up toy feet.
Despite the simplicity of the movement, they
still maintain the feature of being able to
interact with and traverse terrain.
This model is constructed of three
components: the two feet and an
interconnecting bar that provides the necessary
gait arc.
Simplifying the model means that there is
no need for our work to address the problem of
autonomous balance control explicitly. We will
concentrate primarily on the analysis and
specification of applied forces and constraints.
By positioning the feet in an overlap on the Xaxis, a permanent stable state is achieved. This
means that on the XZ plane of the model, the
centre of gravity of the entire structure is
always within its own footprint space (Figure
1), and hence perpetual balance is obtained:

Figure 1. Plan view of the biped model

4. Dynamics in animation
Modern animation packages more
commonly contain a dynamics package within
them, such as Alias|Wavefront’s Maya
Dynamics, Side Effect’s Rigid Body Dynamics
in Houdini, and the Particle, Soft Body and
Cloth
Dynamics
simulators
in
SOFTIMAGE|XSI.
Using Alias|Wavefront’s Maya Dynamics
as an example but recurrent in some respect in
other packages, are the types of dynamic
problems that can be solved [8]:

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

•

Particle Systems: A set of points in global
space, with individual attributes and IDs.
These are born at object creation time or
by a particle emitter, and die according to
some attribute change (time, distance from
origin, intensity, number of collisions,
etc). The key ability is for these particles
to be affected by the dynamic solver and
to hence introduce a variety of stand-alone
/object/volume fields, goal attractions and
collision detection, etc.

•

Rigid Bodies: The requirement for a set of
objects of fixed topology and points to be
realistically affected by collisions and
other external effects, under a number of
constraints on the degrees of freedom
(DOF), position, etc.

•

Soft Bodies: Creation of a corresponding
particle object from the original, with
particles at each of its Control Vertices
(CVs) or vertices depending on the type of
the representation (NURBS/polygons).
Collisions, fields or expressions can then
affect this object, in the same way as
above. The original object changes shape
analogously.
Resilience
can
be
implemented by attaching springs between
particles.

Figure 2. Model path

Of the three sections, bipedal locomotion
is primarily concerned with the second,
utilising both simple hinge and universal joint
constraints and the inverse kinematics
calculated to govern the resulting systems. A
key to all of this is the dynamic Ordinary
Differential Equation (ODE) solver, including
the choice of the step sizes and tolerances of
the final solutions. This is discussed further in
the following sections.

5. Dynamics of a Walk Cycle
The aim of a walk cycle is to provide
forward motion of the model. Since the pair of
feet follow a generalised circular motion in the
XY plane, a simple uniform circular motion is
assigned to both feet (Figure 2).

If no gravity field were present, the model
would follow the prescribed path shown above.
Figure 3 demonstrates how the motion of the
force-free object is altered by the introduction
of the Newton field and a ground object. The
path of each foot is pushed into the boundary
of a distorted semi-circle (paths over-lap, but
each foot starts at opposing sides of the semicircle.)

Figure 3. Model path (with gravity)
Forward locomotion is achieved by
introducing frictional constraints between the
feet and the ground. It is also interesting to
note that different under-foot conditions, such
as from walking on dry tarmac to slippery
snow/loose sand, can be represented by
different amounts of foot slippage, which is
further dictated by the amounts of friction.
Therefore a friction parameter is provided to
the animator to simulate the effects of different
types of grounds. Figure 4 shows a path of
high friction and Figure 5 for low friction.

Figure 4. Model path (with high friction)

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

the inter-penetration of the connected rigidbodies, and thus prevent the dynamics from
breaking down.

5.2. The ODE Solver

Figure 5. Model path (with low friction)

5.1. Model building
In modern animation packages, models
can be built in polygons, NURBS or
Subdivision
Surfaces.
However,
since
detecting collisions between planes and edges
is a lot easier than between multiple splines,
for accurate collision detection and hence
inter-penetration avoidance issues, these are
converted to polygons before the dynamics in
the scene are applied. Usually this is done
automatically in the background. Control
parameters, such as levels of detail (LOD) can
be easily specified with state-of-the-art
animation packages. Shown in Figure 6 is a the
subdivision surface foot model (right) and
polygon models of two levels (1(middle) and
2(left)) of extracted vertices.

From the theory of dynamics, we know
that the displacement of a moving object
subjected to forces is produced by the
resolution of the differential equations of
motion. These equations, however, are unlikely
to possess a closed form analytical solution. A
numerical ODE solver is usually employed.
One way to improve the chances of the
dynamics holding together is to tweak the
ODE solver. A variety of explicit solution
techniques can be used. Two such solver
methods are midpoint (2nd order RK) and 4th
order Runge-Kutta. The midpoint method is
fast to converge but not considered accurate
enough for our purposes. The Runge-Kutta
method enables us to get convergence of 5th or
6th order. It works for mathematical functions
that are easy to calculate, i.e. discrete physical
problems.
A problem arises when the velocity
vectors change direction by too much in a
single step. To rectify this, a test to check the
magnitude of change is built into the
algorithm. If the change is too great, we
decrease the step size and try again. A
tolerance is specified on how much change in
the angle of the velocity vector is allowed in a
single step. In this way the algorithm is
adapted to the problem. An adapted RungeKutta is considered accurate enough without
prohibitive computational time in most cases.
Decreasing default step-size and collision
tolerance can vastly improve reliability, but of
course, at a cost to calculation time.

5.3. Forces
Figure 6. Foot models
A simple polygon plane was introduced to
the scene to represent the ground and then
made into a passive rigid-body (i.e. other
forces/rigid bodies/soft bodies could be
affected by its presence, but its position would
remain unaltered). The “feet” were then
separately changed to active rigid-bodies, as
was the connecting-arm between them.
Looking at the simple biped model again,
the only degree of freedom relative to each
other appears to the spindle rotation around the
x-axis. So a single DOF hinge constraint can
be attached at each end of the connecting arm
to the respective “ankles” of the feet. Hinge
constraint placement is very critical to avoid

As explained before that the main driving
force is a turning torque on the connecting
arm. This is achieved by a “motor”, i.e. a spin
component, mounted in the x-axis. A gravity
field is also added to the scene.
Very often the exact influence attribute is
available. By combining the effects of multiple
attributes, the desired outcome can be
achieved. For instance, in the simple bipedal
model, to rotate the connecting arm we have
two choices available (for more information,
see [9]):
•

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

Initial Spin, which applies a preliminary
momentary force.

•

Spin Impulse, which applies a set force at
every frame of animation.

outside (below) the models to reduce the
turning effect (Figure 8).

Initial Spin’s effects obviously diminish very
quickly. Spin Impulse‘s additive effect results
in the model accelerating rapidly, and
eventually the force is great enough to
overcome the gravitational fields imposed.
However, by making use of the Damping
Attribute, we can balance out the torque of
Spin Impulse to create a cycle of constant
velocity.
Gravity or any other Newton field may easily
be implemented in the scene, though careful
balancing between the motion/damping forces
and the strength of any fields present must be
maintained to ensure consistent cycles for any
length of time.

5.4. Problems Arisen
Expectedly enough this produces an
aesthetically pleasing motion whereby the feet
rise slower than they return to the ground. This
problem is though that the spin appears to
affect the feet also, likely to be instigated by
the friction with the connecting-arm-rigidbody, even though both the Static and
Dynamic attributes of this arm are set to 0.
Such twisted feet are shown in Figure 7.

Figure 7. Result of applying
inappropriate dynamics
Since the dynamic modules in the generalpurpose animation packages are designed to be
as general as possible to cater for the variety of
demands animators might make, unlike rigid,
specialised tools, small problems like this may
arise. This is where the paths of dynamical
implementation for animations and simulations
often diverge. Due to the generality of the
packages, such situations can often be easily
resolved with lateral thinking. In this instance
the problem can easily be countered by
increasing the relative masses of the feet and
placing their centres of gravity a long way

Figure 8. Correction of model dynamics

6. Results
The scene the biped model was tested
upon consisted of 3 active rigid bodies (the two
feet and the connecting bar). Each foot had a
dynamic stand-in that consisted of around 1700
polygons. Two constraints were placed at the
points where the connecting bar met each of
the feet, restricting them to 1 degree of
freedom each (along the X-axis). A simple flat
plane was passed in as a passive (non-reacting)
rigid body for the model to collide with. A
gravitational force was applied along vector (0,
-1, 0), magnitude 9.82. A variety of values for
both the model and the ground dynamic and
static frictional attributes were used to test the
applicability and visual accuracy of this
approach,
with
aesthetically
pleasing
results(Figure 9).
The testing and video sequences produced
demonstrated realistic motion of the specified
biped, certainly accurate enough for most
animation purposes. Using an 800Mhz PC and
Alias/Wavefront’s Maya 4.0, real-time display
of the motion was available in the modelling
windows, the display set to wire-frame. This
allows for quick rectification and changing of
the necessary variables (gravity, friction
forces, etc) to suit the animator’s needs.

7. Conclusion
The primary goal of this paper was to
present and compare an alternative approach to
specialist software generate bipedal animation
using dynamics, in the form of adapting the
modules already present in industry standard
software. Although Alias/Wavefront’s Maya
was the predominantly used package in this
case, the ideas presented should be general
enough to be applied in other software.
The techniques involved allow for
physically accurate movement given the

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

certain parameters. Whilst the generality of the
software hinders actual simulation of the
models produced, as opposed to specifically
designed tools, they do provide results suitable
for most visual purposes at a vastly reduced
resource (time, expertise, hardware, etc) cost.
This approach also has the advantage that
should the motion not comply with other,
aesthetic factors of the animation (composition
within the frame, overall timing), baking the
motion down into individual key frames and
tweaking these is another option open to the
animator not usually available in specialist
software.
Further research could analyse more
complex models and the problems that
introducing more degrees of freedom, multiple
joints and implementing autonomous balance
control.

[9] Maya 4.0 Online Library. Alias/Wavfront,
2001.

Simulation Results

Acknowledgments
We would like to gratefully acknowledge the
financial support of the A.H.R.B. (grant no.
B/RG/AN5263/ABPN12727 )

References
[1] Badler N. I., 0’Rourke J., Kaufman B. Special
Problems in Human Movement Simulation.
ACM SIGGRAPH 1980.
[2] Girard M., Maciejewski A. A. Computational
Modeling for the Computer Animation of Legged
Figures. ACM SIGGRAPH 1985, Volume 19,
Number 3.
[3] McKenna M., Zeltzer D. Dynamic Simulation of
Autonomous Legged Locomotion. ACM
SIGGRAPH 1990, Volume 24, Number 4.
[4] Kokkevis E., Metaxas D., Badler N. Usercontrolled physics-based animation for
articulated figures. Proceedings of Computer

Animation '96, 1996.
[5] Gascuel J. D., Gascuel M. P. Displacement
constraints for interactive modeling and
animation of articulated structures. The Visual
Computer, 1994, Springer-Verlag.
[6] Lazlo J. Controlling bipedal locomotion for
computer animation. Masters Thesis, University
of Toronto.
[7] Lazlo J., van de Panne M., Fiurne F. Limit Cycle
Control And Its Application To The Animation
Of Balancing And Walking. ACM SIGGRAPH
1996.

[8] Monheit G. Dynamics in Maya. ACM
SIGGRAPH Course Note ’97, 1997.

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

Figure 9.

