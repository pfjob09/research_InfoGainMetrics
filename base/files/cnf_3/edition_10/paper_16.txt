A NOVEL ALGORITHM ON COMPUTING INTERSECTIONS OF TWO
SURFACES OF REVOLUTION BASED ON SPHERICAL DECOMPOSITION

Jinyuan JIA
Department of Computer Science
The Hong Kong University of Science &
Technology
Clear Water Bay, Kowloon, Hong Kong
csjyjia@cs.ust.hk

Abstract
A novel algorithm for computing RSIC
intersection curves of two surfaces of revolution
is presented, it subdivide a surface of revolution
into a collection of coaxial spherical strips, by
subdividing its generatrix into a collection of C0
and C1 coaxial circular arcs correspondingly. So
intersection problem of two surfaces of
revolution is reduced to intersection problem of
two spherical stripes, and RSIC is approximated
as a piecewise C0 and C1 circular, which is quite
convenient for some CAD applications.
Cylindrical bounding shell is used for computing
valid intersection interval VII to avoid the
unnecessary intersection computation efficiently.
Finally we give a simple algorithm of tracing
RSIC for classification and a unified rational
Bézier representation to RSIC.

1. Introduction
Surface intersection continues to be one of
fundamental techniques in computer graphics
and computational geometry. It is also essential
to Boolean operations necessary in the creation
of Boundary Representation in solid modeling.
Many algorithms have been suggested for the
intersections of two surfaces. However, it is still
an extremely challenge to develop efficient
intersection algorithm for two general surfaces
accurately, robustly, efficiently and without
requiring user intervention, even quadratic
surfaces. Here, we will focus on intersection
problem of two surfaces of revolution.

1.1 Previous works

George BACIU and Ki-Wan KWOK
Department of Computing
The Hong Kong Polytechnic University
Hung Hom, Kowloon, Hong Kong
{csgeorge,wan}@comp.polyu.edu.hk

There are two methodologies used basically
and frequently for surface intersections,
subdivision method and algebraic method. Using
traditional subdivision method, surfaces of
revolution can be decomposed into m×n
quadrilateral meshes or 2×m×n triangular meshes
in [Goldman84]. However, the subdivision has to
be done rather densely for good approximation
quality, and its robustness is difficult to
guarantee. So traditional quadrilaterial or
triangular
subdivision
method
becomes
inefficient when it is applied directly to surfaces
of revolution.
Using algebraic method, as a special case of
ringed surfaces, [Kim’00] reformulated the zeroset of bi-variate function λ(u,v)=0, for
intersection of two surfaces of revolution, into
||f(u)+g(v)||2 = |R1(v)|2 in the parameter space,
where f(u) and g(v) are space curve of degrees
2×max(d1,1) and 2×max(d2,1), and d1 and d2 are
degrees of generatrix function R1(u) and R2(v) of
two surfaces of revolution respectively. The
zero-set equation λ(u,v)=0 is solved by
subdividing the u-domain into m intervals and vdomain into n intervals respectively, then to
determine if there are solutions by checking if
there is an overlap between the spherical
bounding volumes of two functions ||f(u)+g(v)||2
and |R1(v)|2 in the subdomain ui×vj (i =1, 2, …, m
and j = 1, 2, …, n). Therefore, the overall
procedure takes computation cost proportional to
m×n.
Actually, Kim's method also belongs to
subdivision method, different from traditional
subdivision taken in 3D space, it does
subdivision in a 2D parameter space from
searching for λ(u,v)=0. Because the degree of
bivariate function of zero-set λ(u,v)=0 depends

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

on the degrees of two generatrices R1(u) and
R2(v), when the degrees of R1(u) and R2(v)
become high, the subdivision must be done quite
densely to search for zero-set λ(u,v)=0 exactly
and thereby its computation cost should be rather
high. Furthermore, it is just for rendering RSIC,
no parameterization and classification is
provided for RSIC.

1.2 Main idea and our contributions
We propose a new idea of computing RSIC of
two surfaces of revolution by decomposing a
surface of revolution into a collection of coaxial
spherical strips based on the following
considerations:
It can reduce the problem on computing RSIC
to the problem of computing intersection curve
of two spherical strips {SSIC for short). RSIC
can be always represented with a collection of
circular arcs and can be computed geometrically,
easily, accurately and robustly. Compared with
two-dimensional subdivision schemes, either
quadrilateral/triangular subdivision in 3D, and
Kim’s uv-subdivision in 2D projective plane,
spherical subdivision along its generatrix is a
one-dimensional subdivision, which has much
less and bigger subdivision components.
Our other contributions mainly consist of (a)
spherical decomposition for least square fitting a
surface of revolution locally by rolling ball step
by step with gold ratio along its generatrix, (b)
cylindrical bounding shell tree BCBST to detect
valid intersection interval for avoiding those
unnecessary intersection computation, (c) unified
rational Bézier representation of intersection
curves RSIC, (d) tracing RSIC arc by arc and
organizing them loop (branch) by loop (branch).

2. Preprocessing

appropriately for rolling ball in each step. For the
first question, we choose circular least square
fitting LSF as locally optimal approximation. For
the second question, we propose a Golden Ratio
Marching.
2.1.1 Least Square Circular Arc Fitting. A
general circle can be represented by x2 + y2 + Dx
+ Ey + F = 0, a circle, symmetric about x-axis,
can be simplified to x2 + y2 + Dx + F = 0.
Assuming that a collection of fitting circular arcs
Ci (for step Ti) (i = 1, 2, ..., m) is defined in the
interval [xi, xi+1] and its equation is gi: x2 + y2 +
Dix + Fi = 0. Within the interval [xi, xi+1], k+1
sampling points xij (0 j k, xi0 = xi, xik = xi+1) is
done for circular LSF, the goal is to solve best Di
and Fi for Ci from those sampling points. By
minimizing the sum of the difference of square
distance on all k+1 sampling points between
original generatrix segment Gi and its fitting
circular arc Ci, then, by adding two interpolating
constraints on two endpoints xi and xi+1, C0
circular LSF f is derived as follows, from which,
we can give a linear equation system about
coefficients D and F. Similarly, we can derive
function of C1 circular LSF to generatrix by
adding two tangential constraints at the two
endpoints of gi further.
k

f = ∑ ( xij2 + yij2 + Di xij + Fi ) 2 +
j =0

λ1 ( xi20 + yi20 + Di xi 0 + Fi ) +
λ2 ( xik2 + yik2 + Di xik + Fi )
differentiate f with respect toDi , Fi , λi , λ2
k −1
j =1

j −1

k −1

Fi ∑ 2xij + λ1 xi 0 + λ2 xik = 0,
j −1

k −1

k −1

f F/i = ∑ 2( xij2 + y ij2 ) + Di ∑ 2xij +
j =1

2.1 Spherical Decomposition
Spherical decomposition of a surface of
revolution is done as by rolling an elastic ball
step by step along its axis, in each step, its center
and radius changes adaptively to fit shape of a
surface of revolution as long as possible under
specified error bound. Correspondingly, in 2D
profile, we can roll an elastic circle along the
axis to fit its symmetric generatrix pair as long as
possible step by step. Thus, to solve a collection
of coaxial fitting circular arcs leads to two
questions: (1) which fitting method should be
used for best local approximation to generatrix;
(2) how much size should be chosen

k −1

f D/ i = ∑ 2( xij3 + xij yij2 ) + Di ∑ 2xij2 +

j −1

k −1

Fi ∑ 2 + λ1 + λ 2 = 0,
j −1

f λ/i = xi20 + yi20 + Di xi 0 + Fi = 0,
f λ/2 = xik2 + yik2 + Di xik + Fi = 0,
We can obtain linear equationsystem about Di and Fi :
∑ 2xij2

∑ 2 xij
 xi 0

 xik

∑ 2x
∑2

ij

xi 0

1

1
0

1

0

xik  Di  − ∑ 2( xij3 + xij yij2 )
  

1   Fi   − ∑ 2( xij2 + yij2 ) 
=
0   λ1   − ( xi20 + yi20 ) 
  

0  λ2   − ( xik2 + yik2 ) 

2.1.2 Gold ratio marching

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

two cylinders geometrically by comparing
distance d of two axes and the r1+r2 sum of two
radii. If d>r1+r2 then there is no intersection
between two cylinders; otherwise, they must
intersect each other, if d<r1 or d<r1, then, one
cylinder traverse the other.

d
x

t’

t’

t

t

3. Intersection detection

d’

0.618?x

d’

1.618?x

Fig. 1 Gold ratio marching
The basic idea is to approximate the generatrix
with the C0 or C1 circular LSF to initial interval
∆x in the first step, then let us compare the
specified error threshold e and d distance
difference between the original and fitting
curves, if d=e, goto next step for fitting next arc;
if d<e, increase the step size of fitting arc ∆x to
1.618∆x with inversely gold ratio; otherwise, if
d>e, decrease the step size of fitting arc ∆x to
0.618∆x with gold ratio. Let us keep doing this
procedure recursively and try to stretch the
fitting circular arcs as long as possible at each
step, from one endpoint to the other. Globally,
this method is not an optimal fitting method,
because such circular LSF only can ensure
optimal fitting in each step locally.

Fig. 3 Valid intersection interval
Assume that two surfaces of revolution are
decomposed into m and n spherical strips
respectively. Totally there are m×n possible
intersection pairs of spherical strips for two
surfaces of revolution. In fact, only a part of
them intersect each other within intervals D1 and
D2, called valid intersection interval VII as
follows shown in Fig. 4, apparently, those
spherical stripes beyond VII are impossible to
intersect and unnecessary to deal with.

2.2 Cylindrical Bounding Shell

θ2

C1

C2

…

C3

…

C m -1

Cm

…

[0, n/2-1]

[n/2,n]
[0, n]

Fig. 2 Binary cylindrical bounding shell tree BCBST
Considering the characteristics of surfaces of
revolution, we propose the cylindrical bounding
Shell, which encloses surfaces of revolution, by
using two cylinders (external and internal), much
more closely than the traditional bounding box
and bounding sphere. Binary cylindrical
bounding shell tree BCBST is organized as
follows in Fig. 2 by bisection recursively. It is
easy to do intersection determination between

θ1

Fig. 4 Computing VII of two intersecting cylinders
For two given surfaces of revolution, if their
exterior bounding volume do not intersect each
other, then they have no intersections; if their
interior bounding volumes intersect each other,
then two surfaces of revolution intersect each
other definitely; otherwise, it needs further
determining VII along BCBST from root to
bottom recursively. Assume that S1k and S2k
contain m1 and n1 spherical stripes respectively,
which depend on the relative orientation and
position between two surfaces of revolution and
their shape characteristics, then the intersection
complexity is reduced from O(m×n) to O(m1×n1).

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

Such recursive determining VII of two surfaces
of revolution involves quite frequently, here we
employs Piegl’s geometric method in [Piegl’89]
to compute VII of two cylinders.

4. Computing RSIC
4.1 Computing SSIC
Computing intersection of two surfaces of
revolution is reduced to computing intersections
of two spherical stripes. Intersection of two
spheres is always a circle, a pair of parallel
bounding planes trim a sphere into a spherical
strip, and generally trim the intersecting circle
into a pair of circular arcs and two spherical
stripes will trim the intersecting circle into two
pairs of circular arcs, according to their
overlapping situation, there are totally five cases
in Fig. 6 as follows: (1) no intersection (there is
no overlapping between two trimmed circular
arcs; (2) one circular arc, (3) two circular arcs,
(4) complete circle and (5) isolated point,
singularity, a plane tangent to the intersecting
circle in this case.

endpoint in (2) and (3); two-branch SSIC
(doubly) touches the other two-branch SSIC at
their two common endpoints in (4); one-branch
SSIC tangents to the other one-branch SSIC at a
single point in (5), singularity occurs in this case;
one-branch SSIC touches two-branch SSIC at
their two common endpoints in case (6); onebranch SSIC (doubly) touches one-branch SSIC
at their two common endpoints in (7), that forms
a closed loop. In relative to above seven
conjunction cases, we give the following tracing
RSIC algorithm in this section:

(a)

(b)

(c)

(1 ) n o in ters ectio n

(2 ) two -to u ch -o n e

(4 ) two -Dto u ch -two

(3 ) o n e-to u ch -two

(5 ) o n e-tan g ent-o n e

Fig. 6 Conjunction types of SSIC
(1)

(3)

(2)

(4)

(5)

Fig. 5 Five cases of SSIC

4.2 Tracing RSIC
Recognizing loops and singularity of the
intersection curve is important for geometric
modeling and CAD. Because our subdivision
scheme is one-dimensional subdivision based,
tracing RSIC becomes much easier than tracing
two-dimensional subdivision, we just need to
trace RSIC arc by arc sequentially along the axis
of a surface of revolution.
We can generate the final RSIC by
concatenating SSICs one by one sequentially, the
concatenation cases of two adjacent SSICs can
be classified as following Fig. 7, each SSIC has
two possible cases (two branches or one branch),
there is no contact between the two adjacent
SSICs at their endpoints, so no concatenation
needs to be done in (1); two-branches SSIC
touches one-branch SSIC at one common

Algorithm2. TracingRSIC(R1, R2)
Input: Two Surfaces of revolution R1 and R2;
Output: Loops (branch) List of RSIC;
1. Compute D1 (VII of R1) and D2 (VII of R2);
2. branch=0; k=0;
// branch --- the number of branch or loop;
// k --- the number of SSIC
3. Initialize active branch list ABL into empty;
4. for each spherical stripe SSi of R1 in D1
5. for each spherical stripe SSj of R2 in D2
6. if SSi ∩ SSj = φ, then continue;
7. k=k+1;
8. Compute SSICk;
9. Match SSICk with all the current SSICm in
10. ABL by checking coincidence of their
current open endpoints in Fig. 7;
11. Switch (conjunction type of SSICk) {
case 1: no conjunction, branch++;
insert new branch which begins
with SSICk into ABL;
case 2: one-tangent-one, report singular
point; merge it to corresponding
branch;
refresh its active endpoints for
next matching;
case 3: one-touch-one, one-touch-two or

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

two-touch-two, merge it to
corresponding branch;
refresh its active endpoints for
next matching;
case 4: one-double-touch-two, merge it to
corresponding branch; refresh its
active endpoints for next matching;
case 5: two-double-touch-one, merge it to
corresponding branch;
delete this closed branch from
ABL and store it into ILL;
case 6: one-double-touch-one, merge it to
corresponding branch;
delete this closed branch from
ABL and store it into ILL;
}
11. if ABL is not empty, then store all branches
one by one into ILL;
{end of algorithm2}.

5. Experimental results
We have implemented above ideas and
algorithms of computing RSIC of two surfaces
of revolution with C++ and OpenGL under the
Linux platform in dual Celeron computer of
412MHz. Three experimental examples are
given here, the first one is a one-loop RSIC
generated by two surfaces of revolution with
perpendicular orientation shown in Fig. 8. The
second one is a two-loop RSIC generated by the
same two surfaces of revolution with a slight
angle shown in Fig. 9. The last one is a fourbranch RSIC generated by two bowl-shape
surfaces of revolution with different orientation
shown in Fig. 10.
RSIC degenerates to a list of parallel circles or
common spherical stripes if two surfaces of
revolution become coaxial as shown in Fig. 11.

4.3 Representing RSIC
Quadratic rational Bézier representation is very
useful in CAD/CAM applications. For each
SSIC arc, it is necessary to give the rational
Bézier representation of RSIC. The circular arc
has the following rational Bézier representation:

(1 − t ) 2 p 0 + 2t (1 − t ) wp 1 + t 2 p 2
(1 − t ) 2 + 2t (1 − t ) w + t 2

r (t ) =

where controlling points p0, p1 and p2 form
isocele triangle, w = c/d is the weight onto p1.
We skip the detailed derivations due to limitation
of space, which can be found in [9]. For each
SSIC arc, it is easy to compute its controlling
isocele triangle and weight w inversely from two
endpoints and the center of circle. To merge two
circular arcs in the following figures, the
condition of merging two circular arcs in G0 is
the coincidence of two endpoints (C = D), and
the merging condition of G1 is, besides the
coincidence of two endpoints (C = D), B, D and
E should be on same straight line, especially, if
|BC| = |DE|, the merging is C1.
P0

E

d
P1

B

c
c

P2

F

A

D
B

C
D

E

C

A
F
0

1

Fig. 7 C and C Piecewise Circular Arcs

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

Fig. 8 Two examples with different relative
configurations

capability of processing circular arcs; (2)
geometric computation of circular arcs are quite
easy to do. Therefore, it is much more efficient
than other existing methods.
But, spherical decomposition must be done
very densely for high precision if generatrix is
concave, since all coaxial spherical stripes are
convex to its axis. In this paper, we just gave a
simple and pseudo-optimal solution for spherical
stripe decomposition. Therefore, our future work
will focus on seeking for optimal decomposition
scheme for surfaces of revolution.

7. References
[1] Baciu G., Jia J., and Lam G., “Ray Tracing
Surface of Revolution: An Old Problem with A
New Perspective”, Proceedings of CGI’01, pp.
129-135, Hong Kong, July 2001.
[2] Kim M. S., “The Intersection of Two Simple
Sweep Surfaces”, Proceedings of the Riken
Symposium on Geometric Processing for
Innovative Applications, pp. 1-17, Tokyo, July
21, 2000.

Fig. 9 Three examples with three different
viewing angles

[3] Kim K. J., Kim M. S. and Martin R.,
“Intersecting a Translationally or Rotationally
Swept Surface with A Plane and A Sphere”,
Korea-Israel Conference Geometrical Modeling
and Computer Graphics in the WWW Era, pp.
165-193, Seoul, Korea, September, 1999.
[4] Kim K.J., Kim M.S. and Oh K., “Torus and
sphere intersection based on a configuration
space approach”, Graphical Models and Image
Processing, 60(1), pp. 77-92, 1998.

Fig. 10 Degenerated RSIC

6. Conclusion
Spherical stripe subdivision scheme achieves
bigger in size, much less in number and better
visual effect than TC subdivision scheme. Kim's
algebraic method must need numerical method to
solve high degree equations, our method just
involves simple quadratic equations, BCBST
further improves efficiency of intersection, by
computing VII to avoid unnecessary calculation,
classification and piecewise circular arcs form is
quite helpful and convenient for practical CAD
applications: (1) many industrial devices have

[5] Kim M. S. Elber G., “Problem Reduction to
Parameter Space”, The Mathematics of Surfaces
IX, pp. 82-98, Cambridge, UK, September 2000.
[6] Connor M. A., “Natural Quadrics: Projection
and Intersection”, IBM journal of research and
development, 33(4), pp. 417-446, 1989.
[7] Piegl L., “Geometric Method of Intersecting
Natural Quadrics Represented in Trimmed
Surface Form”, CAD, 21(4), pp. 201-212, 1989.
[8] Piegl L and Tiller W., The NURBS Book,
Springer, 1997.

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

