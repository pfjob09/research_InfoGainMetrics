2010 14th International
Information
Conference
Visualisation
Information Visualisation

Using Web Services as Functional-Level Plug Ins for
Interactive 3D Medical Visualisation

Tao Wang, Youbing Zhao, Enjie Liu, Gordon J. Clapworthy, Xia Zhao, Hui Wei, Feng Dong
Dept. of Computer Science and Technology
University of Bedfordshire
Luton, United Kingdom
e-mail: { tao.wang, youbing.zhao, enjie.liu, gordon.clapworthy, xia.zhao, hui.wei, feng.dong }@beds.ac.uk

resource sharing and to extend the possibilities for
collaboration.
However, web services are not designed for dataintensive interactive applications, which are commonly
characterised by frequent user interaction and data
transmission. Conventionally, web service applications have
been oriented to non-interactive data processing; interactive
applications, which are critical to medical study and practice,
have seldom been adapted to a web service based platform
because of the difficulties mentioned.
The work presented in this paper has been carried out
within the EC-funded ContraCancrum project [1] and
developed from principles established in a previous project,
LHDL [2,3]. ContraCancrum and LHDL are both VPHrelated projects; ContraCancrum will model and simulate
cancer tumour development and treatment. Data visualisation
in ContraCancrum will provide an interactive means for
remote users to interactively view the 2D and 3D medical
data before and after simulation.
In this paper, a functional-level plug-in architecture for
web-based interactive medical data visualisation is proposed.
Web
service based interactive visualisation in
ContraCancrum is introduced and our current work on datapreview services, in particular, is presented as an example.
Major challenges include: the data size is too large for fast
network transmission and client rendering; interactive
rendering demands sophisticated client visualisation modules
rather than simple static images; web service adaption to
existing software components.
The remainder of the paper is organised as follows. In
Section 2, we introduce the general background of the
project and related work on web service related visualisation.
Section 3 describes in detail the architecture and
implementation of our work on web service based interactive
previews of medical data. An evaluation of our work follows
in Section 4. Finally, we summarise the conclusions and
discuss future work in Section 5.

Abstract—Web services provide remote access to distributed
resources and processes through uniform interfaces. However,
the latency associated with data transmission has meant that
they are generally applied to non-interactive data processing.
Interactive applications, in which many more user interactions
and data transmissions are involved, are difficult to adapt to
web service based frameworks, particularly if the interactive
investigation involves large datasets. In medical imaging and
visualisation, user interactions are generally a prerequisite for
the detailed study and manipulation of data. As a result of
major scientific initiatives, such as the Virtual Physiological
Human, in which large data repositories are being set up at a
variety of sites, it is becoming increasingly common for the
data being investigated to be stored on a remote server.
Consequently, it is now highly desirable to develop a means by
which web service based interactive visualisation can be
applied to distributed medical data access and clinical
collaboration. This paper presents a functional-level plug-in
based architecture for interactive data visualisation via web
services which is being implemented within the EC-funded
ContraCancrum project.
Keywords- web service; interactive visualisation; functionallevel plug in; data-preview service; mesh simplification; Virtual
Physiological Human

I.

INTRODUCTION

In the domains of medical imaging and visualisation,
there is an increasing demand for high performance
computing for simulation and visualisation, efficient access
to and sharing of large-scale medical data and close
cooperation among experts from different disciplines and
based at different locations.
The Virtual Physiological Human (VPH) initiative of the
European Commission is placing a heavy emphasis on
multiscale modelling, and the implication of this is that many
projects will be using large datasets and this data will be
distributed across a number of sites. Web services provide an
effective way for geographically dispersed user groups to
access distributed resources and processes because of their
use of uniform interfaces. As a result, there is a trend in
medical imaging and visualisation research towards
employing web service oriented architectures to assist with

1550-6037/10 $26.00 © 2010 IEEE
DOI 10.1109/IV.2010.89

II.

BACKGROUND

A. The ContraCancrum Project
ContraCancrum [1] is an EC-funded project for better
understanding of the natural phenomenon of cancer at
607
617

different levels of biocomplexity and simulating the response
to various therapeutic regimens. It will develop a composite
multilevel platform for simulating malignant tumour
development and tumour and normal tissue response to
therapeutic modalities and treatment schedules. The project
is focused initially on brain and lung cancer.
The ContraCancrum data environment (CCDE) provides
the project members (clinicians and researchers) with a
platform that:
• serves as a central repository to upload, edit, view
and share data of interest to the project and
• allows researchers and clinicians to conduct virtual
experiments using this multiscale data.
To foster data sharing collaboration among clinicians and
scientists, ContraCancrum places emphasis on web services
as tools for remote access to and evaluation of medical data,
such as DICOM images, stored in the database.
A typical workflow in ContraCancrum is shown in Fig.
1. Clinical users load a DICOM image in a DICOM
database, select tools for segmentation and registration,
interactively preview/evaluate the segmented model and
send it to a simulation. Finally, users evaluate the simulation
results by interactively visualising the 3D time-varying data,
then choose to save it to the database or just simply discard
it. In the workflow, data preview and visualisation of the
simulation results are two important stages in which web
based interactive visualisation is involved. The current work
being introduced in this paper is the data-preview service
provided to the end users to enable them to evaluate the data
online prior to download and thus avoid downloading
irrelevant data. Without this service, the user would have to
download all the data sets to be evaluated.

contents were not widely used on the web in the following
years because of their data size and the resources demands
associated with rendering. Three aspects of popular
technologies for deploying 3D content on the web are
relevant: content development, the skills required for content
development, and if plug ins are required. Ortiz [5]
compared six technologies including VRML, X3D,
JavaScript & HTML 5.0, WebGL, O3D and Adobe Flash.
As its name suggests, VRML, the first 3D technology on
the web, was closely associated with Virtual Reality but it
did not gain widespread popularity as it only allowed the
developer to write in a 3D content. X3D, an XML-based file
format for representing 3D graphics including VRML
extensions appeared in 1997. But the use of neither of these
spread much beyond their original context.
JavaScript & HTML 5.0 appears to be the emerging
standard for the next generation of web browsers. It will
enable developers to combine video, audio, 3D and 2D into
one seamless application. Browsers can natively and
dynamically render bitmap images via their Javascript
engines which makes it easier to display 3D without plug ins.
However, as it will only be supported in the future, it is not
available for our current project.
WebGL [6] brings hardware-accelerated 3D graphics to
any web browser that supports OpenGL or OpenGL ES
specification [7]. OpenGL defines an API and specification
for drawing 3D scenes from low-level primitives. These
capabilities can be implemented only in a browser with plug
ins, which is resisted by many users [5].
O3D [8], developed by Google, is an open source
JavaScript API for developing interactive 3D graphics
applications. It lets a JavaScript application talk to the O3D
core software to tap directly into a computer’s graphic
hardware. Unlike OpenGL, O3D does not redraw the entire
scene for every frame. This provides better performance but
results in less developer control. O3D is designed as a plug
in for the IE, Firefox, Safari and Chrome.
Adobe introduced 3D capabilities with the release of
Flash Player 10 in 2008, but it does not provide many of the
capabilities normally associated with medical visualisation.
Java applets can work with any operating system in
which Java Runtime Environment (JRE) has been installed.
It can be seen as a default plug in as JRE is supported by
most popular browsers. Moreover, the Java API is mature
and well documented.
Since the first appearance of web services, there has been
a steady trend in research of incorporating web and
visualisation. Existing work can be generally categorised into
either client side or server side. Related work including our
previous work on web-based visualisation will be described
in brief in the following paragraphs.
For client side applications, the ManyEye [9] system
predefines a list of applets and allows registered users to load
data and select from a number of pre-defined applets. Eick et
al. [10] have demonstrated how thin client visualisation can
be developed by using Ajax and other technologies.
Among the server side applications, the VisTrial project
[11] allows users to build non-interactive visualisation
pipelines from modules constructed using the VTK library.

B. Related work
In this section, we consider two aspects of web-based 3D
visualisation: industry web 3D technology and research on
web-based visualisation.
Web Portal
Evaluation
Reality
Data format transformation
Notification
Data-preview
Simulation result visualisation

Image Analysis

Virtuality
Numerical View
(quantitative evaluation)
Scoring/Refinement

Modelling
Results
DICOM
Images

Simulation
GRID

XML Meta
Data
Segmented
Images

Web service

Registration
Segmentation
Contour Visualisation
& algorithm
evaluation/scoring
platform

3D Fusion

Web service

Web Service Plug-ins

portal for input parameters

Figure 1. Typical workflow in ContraCancrum

3D on the web began when the Virtual Reality Markup
Language (VRML) [4] was released in 1993. However, 3D

618
608

Wood et al. [12] also suggested a web service middleware
layer on the server side for non-interactive visualisation.
Qiu et al. [13] set up a grid-enabled environment for
interactive parallel visualisation of large scale volume data
sets. The client is a Java-OpenGL based interactive
application which can support the composition of rendered
images from a PC cluster.
In 2008, Zhao et al. [2] produced a model for bio-medical
applications based on web services. In this model, web
services were deployed on a remote server and a rich
interface client was used to consume the service. This
experience indicated that exceptions would increase, and
service availability and performance would degrade,
proportionately to the size of the data. The issue was also
described in Zhao et al. [14]. Unfortunately, common data
sizes in ContraCancrum are expected to be around 20MB.
There are several key concerns in our work of web
service based interactive visualisation in ContraCancrum.
One of them is the network transmission rate and the data
size. Data must be transferred to the client over the Internet
to present the user with preview of the data. However,
transfer times of much of the original medical data are very
large in relation to acceptable network latency. Moreover,
large data also burdens the client viewer with unnecessary
complexity during visualisation and user interaction. To meet
the challenges, pre-transmission model simplification is
designed as an indispensable step for fast transmission and
visualisation. Furthermore, within ContraCancrum there are
a variety of components, including segmentation, simulation
or visualisation. It is unnecessary to convert the whole
system into web services as remote access is needed for only
a portion of them. Due to this, for interactive 3D
visualisation we deploy web services as functional-level plug
ins which can be dynamically loaded when requested.
III.

the calculation results of the predicted tumour
growth or treatment response. To show the interior
structure of the data, interactive gizmos such as
cutting planes or 3D brushing tools may be desired;
these will form the next stages of our work.
The two most popular Web Service development and
deployment platforms are Microsoft .net [15] and Sun’s Java
Enterprise Edition (Java EE) [16]. As the major components
of ContraCancrum are implemented in C++, which can be
seamlessly integrated into the .NET platform, .NET was
adopted to implement the functional-level plug ins for web
service components and to achieve better code reuse and
module integration.
B. Data-preview Service Architecture
As shown in Fig. 2, the data-preview service is composed
of the server side data-processing component and the client
side data-visualisation component. The server side
component is responsible for mesh model generation from
the segmented images, based on VTK [17] and ITK [18].
Mesh simplification is used to reduce the model size to
lessen the transmission time and to achieve better rendering
performance. The client component is a thin client viewer
responsible for the interactive 3D mesh visualisation, which
is based on JavaView [19].
C. Data-preview Service Implementation
In this section, the key processes of both the server side
and the client side components of the data-preview service
will be described in detail.
1) Server side components
a) Mesh model generation
Images acquired from medical scanners (such as CT,
MRI, PET) cannot provide boundary information of organs
or tumours to clinicians directly. Semi-automatic
segmentation is needed to differentiate target organs or
tumours from the neighbouring tissues and surrounding
space. Semi-automatic segmentation tools such as DoctorEye
[20] can be used to obtain these boundaries.
As medical images are composed of a stack of slices, the
boundaries provided by segmented images are on 2D slices.
It is not intuitive to preview and study the shape of the organ
or tumour in 3D space from such data, so 3D reconstruction
from contours (such as contour stitching) is usually adopted
to generate 3D surface models, which are most commonly
represented as triangular meshes.

DESIGN AND IMPLEMENTATION

A. Web Services in ContraCancrum
As shown in Fig. 1, web services in ContraCancrum fall
into four main categories:
• Data format transformation service: this is a web
service based text-to-XML translator that allows
biomechanical models to be transformed between
text format and XML format;
• Notification service: this provides email notification
to users during the medical image processing flows;
• Data-preview service: this provides clinicians with a
convenient web-based tool to interactively preview
models generated from segmented medical images;
it is a key component of the web-based visualisation
services in ContraCancrum; the data-preview service
is our current focus and will be introduced in detail
in the following subsections;
• Simulation result visualisation service: this service
provides clinicians a web-based interactive and
intuitive tool to visualise the simulation result which
is usually a complex time-varying dataset composed
of multiple data types, such as volume data, surface
data, labelled data, etc. The simulation data shows

Web Portal
2D preview
3D preview

JavaView
Mesh Decimation

Data
Storage

Result data

Data-Preview
(Mesh Service)

Mesh Algorithm
VTK

Source file

Figure 2. Data-preview service architecture

619
609

ITK

ITK and VTK are open source programming libraries
provided by Kitware and used for mesh model generation.
ITK provides a variety of image processing procedures
needed in segmentation, while VTK provides 2D/3D surface
and image (volume) processing and visualisation pipelines
and procedures.
b) Model simplification
The reconstructed mesh model generally contains more
triangles than is strictly necessary for presenting the general
shape of the model for preview purposes. If this model is
transmitted directly to the client in its entirety, the
transmission time can be significant, and the client will be
idle while waiting for the complete download of the model
from the server side. Further, having to render a large model
may result in further delays at a level which is unacceptable
in an interactive medical application.
A compromise must be made in order to remove
redundancy from the model so as to strike an acceptable
balance between image quality and transmission/ rendering
speed. A model simplification component is therefore
included to reduce the number of primitives the model
contains, while still preserving its general shape and
character, before transmission from the server to the client.
The mesh simplification technique being used in this
project is quadric error based mesh decimation [21]. Each
vertex in the mesh is associated with a quadric error defined
by certain geometric heuristics, such as the sum of squared
distances to its neighbouring planes. Each time, a vertex pair
(edge) with the largest error is contracted. The position of the
contracted vertex can be optimised by finding the minimum
of the quadratic error function. Compared with other
approaches, this method has the benefit that either the
triangle count in the simplified model or the maximum error
threshold can be designated, which implies that the size of
the simplified model and the transmission time can be well
controlled.
The
implementation
is
based
on
the
vtkQuadricDecimation class from VTK library [22] as a
functional-level plug in and is a separate Windows platform
dynamic link library (.dll) file to be called by the
ContraCancrum web service component on request. The
benefit of this functional-level plug-in design is that one can
separate different functions to different dynamic libraries and
only load them when the web service is invoked. Table 1
shows the sizes of the sphere and brain models before and
after simplification, while the corresponding renderings of
the brain model are shown in Fig. 3.
TABLE I.

Figure 3. Comparison of the original (left) and the simplified brain model
(right)

Figure 4. An example of the HTML user interface

2) Client side components
The user client is split into two parts: web pages for
browsing and selecting the datasets and an interactive viewer
for previewing the dataset.
a) Data browsing and selection
An HTML-based user interface has been designed to list
the datasets in the database. The user can select the data to be
visualised. This is illustrated in Fig. 4.
If the user launches the preview operation, an Ajax [23]
based asynchronous request will be send to the service
provider, also, the selected data will be transmitted to the
mesh service’s server for simplification. The simplified
model is then transmitted back to the client for preview.
b) Interactive visualisation
The core of the client side components is an embedded
JavaView viewer for the user to interactively visualise the
simplified model. JavaView [19] is a lightweight Java-based
3D rendering and mathematical visualisation library which
can be run as applets in a java-supported web browser. It is a
self-contained library based on the Java Abstract Window
Toolkit (AWT) instead of the Java Swing library for better
performance in 3D rendering. No extra libraries such as
Java3D or Java-VTK are required for JavaView.
An example preview of the brain model from the
JavaView applet is shown in Fig. 5.

COMPARISON OF MESH MODEL SIZE BEFORE AND AFTER
SIMPLIFICATION

Before simplification

After simplification

Sphere

Model name

3406KB

429KB

Brain

7612KB

955KB

620
610

rendering plug in in a web browser. For the data-preview
service, model simplification is used to achieve this goal.
Furthermore, due to frequent user interaction, frequent data
transmission should be carefully handled.
For the client viewer, an efficient renderer, which can
support the rendering task, preferably lightweight, is desired.
For simple tasks, existing web browser based 3D plug ins
can readily satisfy the requirements, as in the case of the
data-preview service in which only surface rendering and
simple user interactions are required. The benefit of a plug in
is that it is closely integrated with the web browser interface
and has usually been installed at default. However, browser
based plug ins also have many constraints, such as restricted
memory and local resource access, poor user interface, etc.
As a result, they are possibly not very suitable for more
advanced interactive visualisation tasks for which standalone
applications may be more preferable.
Consequently, our work in this paper investigates the
main challenges in web service based interactive
visualisation and presents an effective solution for adding
lightweight web service based visualisation supports to an
existing system.

Figure 5. An example rendering from the JavaView applet

D. Database
The database backend used in the ContraCancrum web
service system is based on the popular open source database
solution PostgreSQL [24] and on DCM4CHE [25], which is
a collection of Java-based open source applications and
utilities for healthcare data management and provides
services and interfaces that are required for storage, retrieval
and workflow to a healthcare environment.
PostgreSQL, is used for the storage and management of
general information, while DCM4CHE is responsible for the
storage and retrieval of medical images in DICOM, which is
the widely adopted standard for medical imaging.
IV.

V.

CONCLUSION AND FUTURE WORK

As applications increasingly become web service
enabled, so interactivity will become a key issue in research
and development, especially for interactive applications that
deal with large datasets.
Interactive medical imaging and visualisation, which has
traditionally taken place on high-end computers has begun to
embrace the era of web services.
Our initial work in this paper has provided an effective
way of performing web-based interactive visualisation of
medical models for the purpose of data preview and
evaluation. Services based on plug ins can be easily added to
existing applications and loaded as a result of functional
demands at run-time. Model simplification is used to reduce
the transmission time and to improve the rendering
performance. A lightweight web browser plug-in based
client viewer is used to perform interactive rendering of
mesh models transmitted from the server.
In the next stage of our work, more elaborate interactions
and visualisation of more complex datasets will be
incorporated into web-based applications. Interactive cutting
and viewing of medical volume and surface data with
simulated time-varying tumour prediction data will be
investigated. As JavaView will no longer satisfy these
requirements, a more sophisticated viewer such as one based
on Java-VTK may be desired, which may be a standalone
application launched at the client instead of a plug in for the
web browser. Our future research work on web-based
visualisation will include:
• compression and transmission of large scale medical
volume and surface data.
• multi-scale [26] and adaptive data fetching and
visualisation based on the viewing parameters, such
as distance.

EVALUATION AND DISCUSSION

The interactive data-preview service described above has
been implemented as a key module of the web service based
interactive visualisation in ContraCancrum. The user can
selectively choose the model to be viewed and then
interactively preview the model in a web browser.
In fact, most of the applications can, in theory, be
deployed as web services, but the feasibility in terms of
needs and performance may result in different decisions. A
design based on functional-level plug ins is a loosely coupled
web service architecture that does not increase the
complexity of the system architecture. It acts as an add-on
function in a system and can easily be used or removed. The
functional-level design simplifies the general system
architecture and makes the system more extensible. The
architecture of the base system is influenced very little by the
extension of web service support.
As for web service based 3D interactive visualisation,
two critical issues are investigated: data transmission and the
rendering client.
For data transmission, effective schemes, such as ondemand loading, level-of-details, compression, must be used
to reduce the volume of data to be transmitted as sufficiently
high-speed Internet transmission is still not available today.
Moreover, large data will also significantly reduce the
rendering performance of the client, especially for a

621
611

•
•

interactive visualisation of time-varying brain
tumour simulation data.
selective visualisation of region of interest, which
provides interactive tools such as cutting plane, 3D
selective brush to the end user.

[10] S. G. Eick, M. A. Eick, J. Fugitt, B. Horst, M. Khailo, R. A.
Lankenau, “Thin Client Visualization,” Proc. IEEE Symp. Visual
Analytics Science and Technology (VAST 07), pp 51-58, 2007
[11] C. T. Silva, J. Freire, S. T. Callahan, “Provenance for Visualizations,”
IEEE Computing in Science and Engineering, vol. 9(5), pp. 82-89,
2007
[12] J. Wood, K. W. Brodlie, J. Seo, D. J. Duke, J. Walton, “A Web
Services Architecture for Visualization,” Proc. 4th IEEE International
Conference on eScience, pp 1-7, Indianapolis, Dec 2008
[13] Y. Qiu, Y. Zhao, J. Shi, “Grid-based Visualization and its Medical
Applications,” Chapter 2, User Centered Design for Medical
Visualization, F. Dong, G. Ghinea , S. Y. Chen, Eds. IGI Global,
2008
[14] X. Zhao, T. Wang, E. Liu, G. J. Clapworthy, “Web Services in
Distributed Information Systems: Availability, Performance and
Composition,” International Journal of Distributed Systems and
Technologies, vol. 1(1), pp. 1-16, 2010
[15] .NET Framework , http://www.microsoft.com/NET/
[16] Java Enterprise Edition (Java EE), http://java.sun.com/javaee/
[17] VTK, http://www.vtk.org/
[18] ITK, http://www.itk.org/
[19] JavaView, http://www.javaview.de/
[20] DoctorEye, http://biomodeling.ics.forth.gr/
[21] M. Garland, P. Heckbert, “Surface Simplification Using Quadric
Error Metrics,” Proc. the 24th annual conference on Computer
graphics and interactive techniques (SIGGRAPH 97), pp. 209 - 216
[22] M.
Knapp,
“Mesh
Decimation
Using
VTK,”
http://www.cg.tuwien.ac.at/courses/Seminar/SS2002/Knapp_paper.pd
f
[23] Ajax, http://www.ajax.org/
[24] PostgreSQL, http://www.postgresql.org/
[25] DCM4CHE, http://www.dcm4che.org/
[26] N. J. B. McFarlane, G. J. Clapworthy, A. Agrawal, M. Viceconti, F.
Taddei, E. Schileo, F. Baruffaldi, “3D Multiscale Visualisation for
Medical Datasets,” Proc. 5th International Conference on Biomedical
Visualisation (MediVis 08), London, pp 47-52, July 2008

ACKNOWLEDGMENT
This work is supported by the Information Society
Technology programme of the European Commission within
the ContraCancrum project (FP7-ICT-2-223979). The
authors would like to thank project partners for many
beneficial discussions.
REFERENCES
[1]
[2]

[3]

[4]
[5]
[6]
[7]
[8]
[9]

ContraCancrum, http://www.contracancrum.eu/
X. Zhao, E. Liu, G. J. Clapworthy, P. Quadrani, D. Testi, M.
Viceconti, “Using Web Services for Distributed Medical
Visualisation,” Proc 5th International Conference on Biomedical
Visualisation (MediVis08), London, pp 57-62, July 2008
E. Liu, X. Zhao, G. J. Clapworthy, “Building Service-Oriented Grid
Applications,” in Grid Technology for Maximizing Collaborative
Decision Management and Support: Advancing Effective Virtual
Organizations, N Bessis, Eds. IGI Global, 2009
VRML, http://www.w3.org/MarkUp/VRML/
S. Ortiz Jr, “Is 3D Finally Ready for the Web?,” IEEE Computer, pp.
14-16, Jan 2010
WebGL, http://www.khronos.org/webgl/
OpenGL, http://www.opengl.org/
O3D, http://code.google.com/apis/o3d/
F. B. Viegas, M. Wattenberg, F. Van. Ham, J. Kriss, M. McKeon,
“Many Eyes : a Site for Visualisation at Internet Scale,” IEEE
Transactions on Visualization and Computer Graphics, 13(6): 11211128, 2007

622
612

