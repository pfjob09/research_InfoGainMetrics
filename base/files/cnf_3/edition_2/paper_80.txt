2010 14th International
Information
Conference
Visualisation
Information Visualisation

A visualisation technique for the identification of
security threats in networked systems
Carsten Maple, Valentina Viduto
University of Bedfordshire
Institute for Research in Applicable Computing, (IRAC)
Luton, United Kingdom
carsten.maple@beds.ac.uk
valentina.viduto@beds.ac.uk

The decision making process becomes crucial for keeping
networked systems up and running.
It is a three step process until the data turns into the knowledge, which in sense help decision makers to apply an effective
security solution. The first step is called a data gathering stage
in which the different kind of data is gathered from diverse
sources. Afterwards, this data is analysed and processed into
the information that later can be turned into the knowledge.
Visualisation techniques help to transfer the knowledge into
the form of graph, tree or other graph-based representations
and allows users to understand a large quantity of data in a
short time.
With the high increase in the use of automated systems and
tools, humans have gained an ability to visualise, model and
design the architectures of networked systems, their security
states and other problems, that are effectively too heavy cognitive burden under information management. Network security
visualisation techniques can figure out overall awareness of
network security, realise image communication between man
and data, to discover novel patterns among security data
and provide the defence measures against potential threats.
Furthermore, some visualisation techniques can be used in
the combination with quantitative metrics and produce cost
effective security solutions that are demanding.
The importance of appropriate security and risk management
in modern society is well understood. However, there are a
number of methods available to security practitioners to assist
them in their decision making. In this paper we presend a
visualisation technique for the identification of security threats
by using layered onion skin model. The model is built using
attack graph concept, where an illustration of attack paths is
considered.
Attack graph is an utility used to effectively represent a
prior knowledge about vulnerabilities, their dependencies and
network connectivity [2]. A concept of attack graphs is used
to answer questions like ”To what attacks is my system
vulnerable to?”, ”How many different ways an attacker can
take to reach his goal?”, ”Which set of measures should an
administrator deploy to ensure the attacker cannot achieve his
goal?”. According to [3], [4] attack graphs can serve as an
accompanying tool in the areas of fine tuning and IDS alert
correlation, what-if analysis, forensic analysis and security

Abstract—This paper is primarily focused on the increased
IT complexity problem and the identification of security threats
in networked systems. Modern networking systems, applications
and services are found to be more complex in terms of integration
and distribution, therefore, harder to be managed and protected.
CIOs have to put their effort on threat’s identification, risk
management and security evaluation processes. Objective
decision making requires measuring, identifying and evaluating
all enterprise events, either positive (opportunities) or negative
(risks) and keeping them in perspective with the business
objectives. Our approach is based on a visualisation technique
that helps in decision making process, focusing on the threat
identification using attack scenarios. For constructing attack
scenarios we use the notion of attack graphs, as well as layered
security approach. The proposed onion skin model combines
attack graphs and security layers to illustrate possible threats
and shortest paths to the attacker’s goal. By providing few
examples we justify the advantage of the threat identification
technique in decision making process.
Index Terms—Attack graph; Attack tree; Visualisation techniques; Onion skin model;

I. I NTRODUCTION
The current ubiquity of information coupled with the reliance on such data by businesses, has led to a great deal of
resources being deployed to ensure the security of this information. According to [1] we are in an era where information
is the key for businesses to thrive and never before has information been so important. However, with digitisation of so
much information, so comes ease of data transmission, theft,
loss and leakage. From the same data source [1] 84% of UK
organisations surveyed suffered at least one data breach in a
12 month period between 2007 and 2008. Despite regulations,
laws and awareness of the need to protect information assets,
data breaches continue to grow and evolve. Thus, decision
making process becomes more critical and harder to obtain.
Today’s IT infrastructures, systems and applications are more
integrated, more dynamic and more distributed. This led to
the increased complexity to manage the security of networked
systems. In the past, applications and architectures remained
relatively stable. Stability meant better managed work loads,
stable configurations and better controlled access and operating environments. Today CIOs have to deal with the
dynamically changing architectures, distributed applications.
1550-6037/10 $26.00 © 2010 IEEE
DOI 10.1109/IV.2010.81

541
551

TABLE I
C LASSIFICATION OF TECHNICAL VISUALISATION TECHNIQUES

policy considerations.
Another visualisation technique is an attack tree, used to
visualise a networked system containing possible risks and
attack paths. A concept of visualising the risks in the way of a
tree is widely applied to risk management, in particular to risk
assessment process [5]. A tree based graph helps qualitatively
and quantitatively assess the managing costs as well as security
of the system state.
In this paper we extend previous approaches to building
attack scenarios by proposing a generic onion skin model
which represent a layered security model and predicts possible
risks either from outside or inside the network. In other
words, the attack graph adds the necessary context to the
security analysis. The concepts of an onion is used to define
different levels of security and the distance between the levels.
Furthermore, the hurdles between security levels is treated as
existence of security controls that should stop an attacker from
his target. The model tells the state of a play and can assist in
decision making process. We also propose few examples where
an onion skin model with the context of the attack graph can
be used.
The remainder of the paper is organised as follows. In Section
II we review some of the visualisation techniques, make a
classification based on data structures and discuss the areas
where those techniques can be applied. A notion of attack
trees and attack graphs is explained in Section III. In Section
IV we present a visualisation technique for the identification
of security threats in networked systems followed by some
examples how this technique can be used. Finally, conclusion
is drawn in Section V.

Data structure
Linear data structures

Hierarchies
(tree structures )

Graphs

Hashes

Visualisation type
Data tables
Arrays
Linked lists
Binary trees
Application specific trees
B-trees
Heaps
Tries
Adjacency list
Adjacency matrix
Binary decision diagram
Propositional directed acyclic graph
Hash table
Hash list
Hash tree
Distributed hash table

efficiently map certain identifiers to associated values.
Visualisation can help in cases where the data is very large
and complex, for example, IDS logs. Selectively picking up
only essential information to people, the graph will be easily
captured by human cognitive system. Historically, visualisation has been applied to network monitoring, health and performance analysis [7]. The network animator tool (NAM) was
developed to provide packet-level animation, protocol graphs
and traditional time-event plots of protocol actions. The tool
can visualise the data directly taken from real network traces.
Initial visualisation techniques for developed for IDS focused
on colour representation to indicate the level or state of threat.
However, with the need for better analysis of security and
IDS data , more advanced visualisation techniques have been
developed over the last years [8], [9], [10]. Those techniques
allow to see malicious activities, such as DoS attacks, IDS
alert correlation or network flows [11].
Wood [12] explains how pie charts and bar graphs can be
applied to analyse the network data available to all system
administrators. At the fundamental level, he describes how visualisation techniques can be applied and the results analysed.
Other visualisation techniques that are widely used to analyse
the network security level, predict attacks, risks and possible
threats are attack graphs and attack trees. In particular, attack
graphs represent a visual representation of all potential vulnerabilities and attack path in a network. Furthermore, they act
as a tool in finding the critical paths in large networks. First
representation of such graphs was complex and visually not
clear due to number of attack paths. Later, by enhancing the
visualisation of the graph and proposing monotonicity concept,
attack graphs became more scalable. The layout of the attack
graph can be adjusted to represent the real enterprise network.
The tools such as MulVal, NetSpa, NuSMV have automated
the generation of the graph and reduced the graph complexity
[13], [14], [15].
Attack trees are also applied to visualise attack paths, however
with the different concept. In an attack tree , attack is represented as a node without specifying conditions that should be

II. V ISUALISATION TECHNIQUES
The abstract data that is gathered from various sources
should be converted into more coherent structure. Visualisation
techniques make that convert and as a result, display large
amounts of information into a compact but useful way. The
semantic analysis of information gathered from abstract data
should provide a knowledge that will help decision makers
in finding a solution. The security aspects represented in a
graph are easier to understand for human. In fact, a picture is
worth a thousand words.
According [6] visualisation techniques can be classified
to technical and interactive ones. In Table I we list only
technical techniques based used data structures.
Linear data structures consist from elements that form a
sequence or a linear list with the linear relationship between
the elements. Primitive examples of the techniques that
are used to visualise linear data are data tables and arrays.
Another data structure is based on data hierarchies or trees.
In this type of data structure, elements or nodes build a tree,
where one element can be linked to few other elements,
emulating a hierarchical tree. A graph data structure can be
represented in practice by adjacency list and matrix, where
the graph consists of a finite number of edges and arcs.
Hash data structures are based on hash function which allows

552
542

(a) Attack graph
Fig. 1.

(b) Attack tree

Illustration of attack scenarios by using an attack graph and an attack tree.

constructing a two-layer attack graphs, which in sense have
reduced computation cost and simplified the graph itself. The
monotonicity assumption is also applied to generate the graph.
Commonly an attack graph can be represented with exploits
and conditions [19]. An exploit is a predicate v(hs , hm , hd ),
where hs is a source host from which a vulnerability v was
initiated, hd is a destination host, hm an intermediate host.
However, two hosts can be used as v(hs , hd ), in case of
no intermediate hosts exist on the path. A condition is a
predicate c(hs , hd ), where a security condition c is satisfied on
source host hs and destination host hd (when no intermediate
hosts are used). A condition can be treated as an existence
of the vulnerability or the connectivity between source and
destination hosts. Although, there two types of directed edges
that link exploits and conditions. First, an edge that can point
from a condition to an exploit denotes the require relation. The
require relation is always conjunctive and means the exploit
cannot be executed unless the condition is satisfied. Second,
the edge pointing from an exploit to a condition denotes the
imply relation, which is always disjunctive. The imply relation
means executing the exploit will satisfy the condition [19].
One important aspect of attack graphs is that an exploit cannot
be realised until all conditions have been satisfied. However,
some exceptions do exist. In case when an exploit with
multiple variations may require different sets of conditions.
This case can be handled by having a separate vertex for each
variation of the exploit. Another case is when a collection of
exploits may jointly imply a single condition. This case is
handled by the insertion of dummy conditions to capture the
conjunctive relationship [19].
Figure 1(a) shows an access to host B from the source A
and the conditions that should be satisfied before exploiting
vulnerabilities. The graph also shows the number of hosts
in the network and the attacker’s access privilege transition
between hosts. A directed edge represents the access relationship between two hosts. In case an attacker can obtain a root
privilege on target host hd the directed edge will be placed
between corresponding nodes.
In overall, an attack graph represents all possible attack

satisfied. Nevertheless, this concepts of visualisation is widely
applied in risk management, in particular, risk assessment. Due
to conditions in risk management is not as important as a
specific threat or risk, the tree can provide with the essential
information. Furthermore, attack trees are less complex and
can be manually generated. Estimating the value for predefined
attacks an economic evaluation can be undertaken. Attack
trees help decision makers quantitatively measure the risks
and possible damages.
The notion of attack trees and attack graphs is explained in
detail in Section III.
III. N OTION OF ATTACK GRAPHS AND ATTACK TREES
A. Attack graphs
The concept of attack graphs is widely applied in the areas
of computer security, in particular, for vulnerability assessment
and network hardening strategies. Such strategies help to
effectively analyse vulnerability dependencies, attack paths,
shortest distances to the goal and predict the possible damage
that may occur.
Each path in an attack graph is a series of exploits, which
lead to an undesirable state. The state is an event that has an
undesirable impact on the system. Furthermore, such a concept
of attack graphs is used to answer questions like ”To what
attacks is my system vulnerable to?”, ”How many different
ways an attacker can take to reach his goal?”, ”Which set of
measures should an administrator deploy to ensure the attacker
cannot achieve his goal?”.
There are three different representations for an attack graph.
First, an attack graph can accurately enumerate all possible
vulnerability sequences (attack paths) an attacker can follow
[16]. Nevertheless, due to explosion of attack paths this graph
faced scalability problem. Second, a monotonicity assumption
has partially overcome a scalability problem by making an
assumption stating that an attacker never relinquishes an
obtained capability. This assumption helped to derive a graph
containing all required information about dependency relationships among vulnerabilities [17]. A third graph representation
type, proposed in [18] has overcome a scalability problem by

553
543

sequences that an attacker may use to break into a network. An
attack sequence is described as a single path in the graph and
the dependencies between the paths are the relations between
the vulnerabilities. As a result, attack graphs can provide
meaningful and quantitative conclusions in analysing network
security [18].
B. Attack trees
Similarly to attack graphs, attack trees are used to visualise
a networked system containing possible risks and attack paths.
However, the structure of an attack tree is more convenient
due to simplified categorisation of ways a system can be
attacked. The term first was introduced by Schneier [20].
In an attack tree, the nodes represent attacks. Those attacks
can be either OR or AND nodes, which means, that in an
attack can be alternatives ways or combined attacks. In case
of AND node, an attacker cannot achieve the final goal until
both subgoals are satisfied. The root node in the tree is a
destination of the attacker, in other words, is the goal of an
attacker. Children of a node are refinements of this goal and
leafs represent attacks that can no longer be refined [21].
The concept of a tree can be used to analyse and assess the
attributes of a security system, for example, a probability
of an attack success, assess the risks and quantify the costs
of possible damage and defence controls. Furthermore, a
lowest cost security measure can be defined by estimating
the costs for each security guard that is implemented and
by defining quantitative metrics. How does this work? First,
the value should be assigned for each node, in fact, nodes
will have different values corresponding to many different
variables. Second, prioritise the nodes according to the value
determined. This will give information on what nodes are
more critical and require more attention.
Figure 1(b) illustrates possible attack paths to system log in
from an attacker that is not authorised to do so. From the
shown attack tree a decision maker can conclude that this
kind of attack is very possible from insiders. Additionally to
this attack tree, a defence tree can be built, where each node
will correspond to a security control with the estimated cost.
Quantitative risk assessment can be undertaken and minimum
cost defence measure can be calculated.
In general, attack trees is an accompanying visualisation
technique in risk management and assessment processes. The
main drawback of an attack tree is that the tree is not time
based and the risk assessment performed yesterday might
have very different results if performed tomorrow.

Fig. 2.

A combination of onion skin model and an attack graph

outside or inside the network. The attacker may have access
to the network through stealth attack or from privileged
insider who abused his granted privileges. Similarly, the goal
is not limited in aspect, it can be a root privilege or any other
adverse condition. We also specify a distance between the
exploits, or other events, that corresponds to the minimum
path connecting them. The distance might be infinite, if there
is no connection between the exploit path.
In Figure 2, suppose that each level of the onion skin model
represents some kind of security level. The barrier between
two layers is a security measure, that is implemented to stop
or prevent an attack. We assume, that a condition connecting
two events creates a distance between them, in other words
those events becomes correlated and fall on a connected path.
From Figure 2, if an attacker was able to get into L1, then
the whole layer is available to him for searching another
hole that leads to the L2. In shown generic model, A and
B are correlated events with the distance of 1. If B can be
exploited then an attacker gets access to L2, where he might
get through the hurdle by finding a hole in layer L3. In other
words, every new event that can be reached by exploiting a
vulnerability can trigger additional independent event, that
will be added to the path.
There are numerous approaches for classifying the threat of a
security vulnerability. One approach is by using information
security risk, threat matrices. Such matrices typically classify
security as low, medium and high. These quantitative
methods are a useful approach to security risk analysis and
management, though are sometimes criticised due to the
potentially arbitrary and objective classifications. We propose
that more formal methods could be employed to define the
classification of a vulnerability (that is which layer of the
onion skin model a vulnerability will lie). Fuzzy logic was
developed from fuzzy set theory originally proposed by Lotfi
Zadeh [22]. It is a multi-value logic that utilises truth value
within the range [0,1] rather than simply the two values of

IV. V ISUALISATION TECHNIQUE FOR THE IDENTIFICATION
OF SECURITY THREATS

For the purpose of security analysis and attack scenario
we build an onion skin model, which by the concept is
a good way of representing a state of a play on different
security levels. For constructing attack scenario we do not
limit the attack graph on a fixed attacker/goal scenario.
The assumption is that attacks can come from any machine

554
544

Fig. 3.

Another example can be enhanced not just on a physical
layer but into logical and technical layouts. For this purpose
we use an example shown in Figure 3. An initial event starts
from Exploit 1 which is based on L1 of the onion skin
model. Every exploit corresponds to the machine that has a
vulnerability that can be exploited. L1 is a physical security
level, where access from one machine to another machine
can be gained by using a stolen password, social engineering
or other attacks that can provide with the log in credentials.
For example, one machine on L1 might have more privileges
than another machine that resides on the same level. By using
a stolen password an attacker can get authorisation to use
data which is on L2. The L2 can be treated as technical level,
where technical knowledge should be used to overcome the
barrier. By exploiting vulnerability existing on the machine
3 and by privilege escalation on machine 4 an attacker gets
access to L3. This level is a logical level, where logical
security controls resides. By exploiting the vulnerability an
attacker becomes privileged to use the desired assets at L4.
The path from Exploit 1 to the goal on L4 consists from 5
steps: Exploit 1 - Exploit 2 - Exploit 3 - Exploit 4 - Exploit
5. However, this path has triggered other connection links
to open. In other words, if Exploit 3 or machine 3, was
accessed through Exploit 1 - Exploit 2 -Exploit 3, then there
is a direct link that can connect Exploit 1 - Exploit 3. It is a
dashed link shown in Figure 3. Similarly, Exploit 3 - Exploit
5 and Exploit 1 - goal on L4. Other links also exist in the
model, however our purpose was to provide with the model
that illustrates a layered attack approach and possible attack
paths that are created due to existing vulnerabilities on each
onion skin security level.

Layered security onion skin model

the extrema that are used in binary logic; this multi-valued
approach allows reasoning and classification using degrees of
a variable.
Other techniques such as Bayesian methods can be used to
determine the layer of an onion skin that each vulnerability
should lie. Such probabilistic methods vary from fuzzy logic
in the way they express uncertainty. Probability theory uses
the concept of subjective probability whereas fuzzy set theory
uses the concept of fuzzy set membership.
A. Examples
In order to indicate the advantage of onion skin model,
we provide the following examples. For the first example,
lets consider as a basis an onion skin model shown in Figure
2 and lets analyse a physical attack from an attacker that is
not authorised to be in the building premises. Assume that
level L1 is a main building entrance, L2 is a corridor that
might have access to L3, which is the main office. Between
main building entrance L1 and a corridor L2 is a reception,
where an attacker (outsider) should get an authorisation to
stay in the building. The reception desk in this case is a
security level existing on L1 and a possible connection link
to L2. If an authorisation is successful, an attacker can move
forward and get access to the corridor, where he might or
might not find access to the main office L3. If an existing
security control on L2 is not exploitable, an attacker might
find another way how to get into the office L3. This can be a
hole in the wall or a tunnel that link a corridor to the main
office. An attack path is a destination from the source to the
target goal achieved in number of steps, called exploits. In
Figure 2 an attacker can reach the goal by exploiting A, B
and C. However, this is the longest path in the attack tree. If
events A, B, C were successful then we say, that the goal can
be achieved within Distance of 4. In other words, an attacker
can find a direct link that connects an attacker from outside
to the main office.

V. C ONCLUSION
The importance of appropriate security and risk
management in modern society is well understood. Large
body of work has been undertaken in risk management,
network hardening, threat identification and visualisation in
order to assist in decision making process. In this paper we
have made a short classification of visualisation techniques
based on data structures. However, the purpose of our work
was to present a visualisation technique for the identification
of security threats in networked systems. The technique can
be treated as hierarchical according to the characteristics and
component connections. The proposed visualisation technique
compose a layered onion skin security model and a concept of
attack graphs. Attack scenario is associated with the ability to
act on each security level and exploit existing vulnerabilities
to be able to pass the barriers. The distance between the
attackers goal and an initial event is a minimum path that
connects two events. If there is no connection between the
barriers, the distance is treated as infinite.
A key consideration for using the onion skin approach
to modelling and visualising security risks lies in the
classification of the vulnerabilities. There are numerous
approaches for classifying the threat of a security vulnerability

555
545

including security risk matrices, fuzzy logic, Bayesian
methods, or probability theory. Either method is equally valid
in the opinion of the authors and the decision of which to use
is at the discretion and preference of the security assessor.

[19] L. Wang, S. Noel, and S. Jajodia, “Minimum-cost network hardening
using attack graphs,” Comput. Commun., vol. 29, no. 18, pp. 3812–3824,
2006.
[20] B. Schneier, “Attack trees: Modeling security threats,” Dr. Dobb’s
Journal, vol. 24, no. 12, pp. 21–29, 1999.
[21] S. Mauw and M. Oostdijk, “Foundations of attack trees,” in International
Conference on Information Security and Cryptology ICISC 2005. LNCS
3935. Springer, 2005, pp. 186–198.
[22] L. Zadeh, “Fuzzy algorithms,” Information and Control, vol. 12, no. 2,
pp. 94–102, 1968.

R EFERENCES
[1] C. Maple and A. Phillips, “Uk security breach investigations report,”
7Safe, United Kingdom, 2010.
[2] F. Chen, L. Wang, and J. Su, “An efficient approach to minimum-cost
network hardening using attack graphs,” in IAS ’08: Proceedings of the
2008 The Fourth International Conference on Information Assurance
and Security. Washington, DC, USA: IEEE Computer Society, 2008,
pp. 209–212.
[3] O. M. Sheyner, Ph.D. dissertation, chair-Wing, Jeannette.
[4] S. Noel, M. Jacobs, P. Kalapa, and S. Jajodia, “Multiple coordinated
views for network attack graphs,” Visualization for Computer Security,
IEEE Workshops on, vol. 0, p. 12, 2005.
[5] S. Bistarelli, F. Fioravanti, and P. Peretti, “Defense trees for economic
evaluation of security investments,” Availability, Reliability and Security,
International Conference on, vol. 0, pp. 416–423, 2006.
[6] H. Ltifi, M. B. Ayed, A. M. Alimi, and S. Lepreux, “Survey of information visualization techniques for exploitation in kdd,” Computer Systems
and Applications, ACS/IEEE International Conference on, vol. 0, pp.
218–225, 2009.
[7] D. Estrin, M. Handley, J. Heidemann, S. McCanne, Y. Xu, and H. Yu,
“Network visualization with nam, the vint network animator,” Computer,
vol. 33, no. 11, pp. 63–68, 2000.
[8] J. McPherson, K.-L. Ma, P. Krystosk, T. Bartoletti, and M. Christensen, “Portvis: a tool for port-based detection of security events,”
in VizSEC/DMSEC ’04: Proceedings of the 2004 ACM workshop on
Visualization and data mining for computer security. New York, NY,
USA: ACM, 2004, pp. 73–81.
[9] A. D’Amico and M. Larkin, “Methods of visualizing temporal patterns
in and mission impact of computer security breaches,” DARPA Information Survivability Conference and Exposition,, vol. 1, p. 0343, 2001.
[10] X. Yin, W. Yurcik, M. Treaster, Y. Li, and K. Lakkaraju, “Visflowconnect: netflow visualizations of link relationships for security situational
awareness,” in VizSEC/DMSEC ’04: Proceedings of the 2004 ACM
workshop on Visualization and data mining for computer security. New
York, NY, USA: ACM, 2004, pp. 26–34.
[11] Y. Livnat, J. Agutter, S. Moon, R. F. Erbacher, and S. Foresti, “A visual
paradigm for network intrusion detection,” in In Proceedings of the 2005
IEEE Workshop on Information Assurance And Security. IEEE, 2005,
pp. 92–99.
[12] A. Wood, “Intrusion detection: Visualizing attacks in ids data,”
February 2003. [Online]. Available: www.advizorsolutions.com/
Intrusion%20Detection.pdf
[13] J. Homer, A. Varikuti, X. Ou, and M. A. Mcqueen, “Improving attack
graph visualization through data reduction and attack grouping,” in
VizSec ’08: Proceedings of the 5th international workshop on Visualization for Computer Security. Berlin, Heidelberg: Springer-Verlag, 2008,
pp. 68–79.
[14] R. Lippmann, K. Ingols, C. Scott, K. Piwowarski, K. Kratkiewicz,
M. Artz, and R. Cunningham, “Validating and restoring defense in depth
using attack graphs,” MILCOM, vol. 0, pp. 1–10, 2006.
[15] O. Sheyner, J. Haines, S. Jha, R. Lippmann, and J. M. Wing, “Automated
generation and analysis of attack graphs,” in SP ’02: Proceedings of the
2002 IEEE Symposium on Security and Privacy. Washington, DC,
USA: IEEE Computer Society, 2002, p. 273.
[16] S. Jha, O. Sheyner, and J. Wing, “Two formal analys s of attack graphs,”
in CSFW ’02: Proceedings of the 15th IEEE workshop on Computer
Security Foundations. Washington, DC, USA: IEEE Computer Society,
2002, p. 49.
[17] P. Ammann, D. Wijesekera, and S. Kaushik, “Scalable, graph-based
network vulnerability analysis,” in CCS ’02: Proceedings of the 9th ACM
conference on Computer and communications security. New York, NY,
USA: ACM, 2002, pp. 217–224.
[18] A. Xie, Z. Cai, C. Tang, J. Hu, and Z. Chen, “Evaluating network
security with two-layer attack graphs,” Computer Security Applications
Conference, Annual, vol. 0, pp. 127–136, 2009.

556
546

