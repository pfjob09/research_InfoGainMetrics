Basic Training for Digital Artists in the Texas A&M Visualization Program
Vinod Srinivasan, Donald House, Mary Saslow, Carol LaFayette
Department of Architecture, Texas A&M University
{vinod,house,saslow,lurleen}@viz.tamu.edu
Abstract

We provide an overview of the Master of Science
in Visualization Sciences program offered at Texas
A&M University. Central to this program is the
intermixing of concepts, students, and faculty from art,
computer science, architecture, and engineering. We
explain the structure of the curriculum, and then focus
on a detailed analysis of foundation courses that have
been designed to make it possible for students from
such diverse backgrounds to share the same advanced
coursework. Illustrations are drawn from a number of
examples of student project work in these foundation
courses. We present practical guidelines for those
seeking to implement similar courses in their
programs.

1. Introduction

Figure 1: Marine sculpture by Hymee Choi
The Master of Science program at Texas A&M
University is noted for sending artists and designers
through the same curriculum as computer scientists and
engineers. The faculty is as diverse as the students,
holding terminal degrees in fine arts, computer science,
architecture, and engineering. This eclectic mix is
potent in its potential, catalyzing creative output

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

ranging from the decidedly technical, through the
skillful blending of crafts, to the wholly artistic.
Students have published technical papers at computer
graphics conferences [10], as well as had their work
juried into animation and computer art venues [17, 19].
Figure 1 shows an example of student work in which
both the artwork and the modeling software came out
of our program.
Students from the program are in high demand,
especially in the special effects, computer animation,
and electronic games industries, where they are
typically hired as “technical directors” or “technical
artists”. In this role, they do tasks that require an
artistic sensibility as well as technical prowess, such as
modeling, lighting, secondary animation, character
rigging, texturing, compositing, effects programming,
and matte painting. It is a rare film containing special
effects or computer animation that does not have Texas
A&M graduates in the credits. A recent informal poll
indicated that there are more Texas A&M graduates
working at Pixar as Technical Directors than from any
other school. Besides working as technical directors,
our graduates also include digital and fine artists,
software developers, architectural visualizers and
educators. We like to think of them as strong visual
problem solvers.
Our curriculum includes a core, which requires all
students to complete a 3D modeling and animation
course, a technical course in either the science of
digital images or image synthesis, and an artistic
course in either multimedia or videography. Electives
provide for the deeper study of modeling, animation,
rendering, compositing, time-based media, physically
based modeling, game design, web design, GPU
programming, and color photography. Thesis work is
often the fusion of these and other areas. A small
sample of the over 100 thesis titles includes such
diverse topic areas as fluid simulation [3], character
animation [14], video-linked sound synthesis [22],
planetarium show production [8], texture synthesis
[15], archeological reconstruction [17], geometric
modeling [16], cinematic lighting [12], game AI [4],
and fine art [13].

programming. Third, we provide parallel, two-semester
course sequences that provide additional prerequisite
training before a student takes core courses outside of
their undergraduate major. Art students, who need
technical training, take Computing for Visualization I
& II to prepare them for technical core courses.
Computer Science students, who need artistic training,
take Concepts of Visual Communication I & II.
The main body of this paper outlines these
prerequisite courses, explaining how we have learned
to cross-fertilize and nurture the budding talents of our
students.

3. Teaching programming to artists
Figure 2: Autumn Bamboo by Clara Chan

2. Philosophy
The philosophical cornerstone of our program is
the belief that artists and scientists belong together,
reinforcing each other by complementary strengths. It
is a commonly held prejudice that artists are math
phobic, and computer scientists are visually lame. One
hears statements like: “To teach an artist advanced
computer graphics concepts and programming is not
possible,” or: “To attempt to teach a computer scientist
to make art is a waste of time. They don’t have the
talent.” We refute this prejudice with 17 years of
experience producing outstanding counterexamples.
Each of our graduates has mastered a core curriculum
that challenges them to learn the foundation science of
computer graphics and to develop their visual skills to
a high level. Each produces a Masters thesis describing
a research project, and each produces a body of visual
work collected in their “reel.” It is a not an infrequent
occurrence for a student to enter our program with an
art or design background but to end up doing a thesis
that is strongly science based [19], and many of our
technically trained students end up blossoming as
artists [5]. Figure 2 shows an artistic rendering done as
part of a thesis by a student from a technical
background, who also designed and wrote the software.
There are three structural foundations of our
program that allow this mixing of backgrounds to
work. First, we see our role as helping students to
develop broad foundation knowledge across the
visualization field, from which they can specialize in a
focus area. In other words, we do not expect each
student to become an expert in all aspects of the field,
but we do expect them to develop a solid grasp of
fundamental concepts and their application. Later, each
becomes an expert in a direction of their choice.
Second, during admissions, we select students who
have, by their interests and training, demonstrated
ability both on the artistic and technical sides, with
highly developed skills in one of these areas. All
applicants, regardless of background, submit a visual
portfolio, and must also present a transcript showing
college level training in calculus, linear algebra and

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

The Digital Image and Image Synthesis courses
that make up the core technical curriculum in our
program are designed with the needs of today’s digital
artist in mind. From our own experience and feedback
from professionals, it is clear to us that, in addition to
good artistic skills, a successful digital artist needs to
have a solid technical foundation. An artist who
understands the underlying theory and structure of a
piece of software is able to more quickly master it.
Since such skills must be broadly applicable, we focus
on problem solving skills that are not tied to any
particular software or language.
Computing for Visualization I covers C
programming, system utilities, shell scripting and
introductory OpenGL. Computing for Visualization II
covers data structures, C++ programming, vector and
matrix algebra, mathematics of spline curves and
intermediate OpenGL. Taken together, the two courses
provide a strong foundation in programming,
mathematics, data structures and basic algorithms.
They also prepare our students to work with scripting
languages or APIs provided by most software. Being
able to understand, debug and create custom scripts
and plug-ins enables our students to adapt to a variety
of production pipelines.

3.1. Curriculum
The key features of the technical foundation
curriculum are:
1. We begin with an introduction to the basic design
of a computer, its hardware components and how they
interact with one another and the user. Programming is
then presented as a tool to manipulate these
components and control these interactions to
accomplish the required tasks.
2. The programming content focuses on topics
typically needed for a digital artist. We cover basic
concepts in programming but do not get into more
advanced topics such as systems programming or
advanced object-oriented programming.
3. To tie into the students’ artistic backgrounds, all
programming projects have a visual component.
Students write interactive graphics programs right from

the start, beginning by drawing colored shapes,
through building their own video game.
4. The courses also cover system utilities, file
management and shell scripting, topics which are
typically not covered in traditional programming
courses. Much of the industry relies on these utilities
and tools to manage their production pipelines.
5. Assessments in the courses are weighted towards
programming projects, but written exams also form a
significant component of the courses. There is a
gradual progression of assignments and projects, each
of which builds on preceding ones, culminating in a
comprehensive final project.

3.2. Best practices
We present below some of the practical aspects of
these courses that we believe have contributed
significantly to their success.
1. Assignments allow for creative expression
Artists and designers are used to being encouraged
to explore their creative sides. This needs to be
recognized in course design. For example, in
Computing for Visualization I, the final project
requires students to come up with their own idea for an
interactive 2-d game. This has proven to be invaluable
in motivating and encouraging students. The project
allows students to express their creativity within the
context of the course objectives. It also motivates them
to explore advanced programming techniques that have
not been covered in class. Figure 3 is a screenshot from
one student’s solution to the final game project. The
game required the player to feed 12 hungry children
within a given time frame, while making sure that the
eggs do not get burnt. It was an innovative idea and
fairly complex to program for a beginner.
2. Avoid over-specifying assignments and projects
As a corollary to the previous point, it is important
to not specify assignments and projects too rigidly.
Giving a long list of requirements for an assignment or
project can be problematic for artists who are used to
more free-form thinking and expression. Most often
they tend to perform poorly in these situations.
3. Avoid PowerPoint presentations
Although canned presentations have the potential

Figure 3: A game by Giancarlo Perossa

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

to save time, they are not suited for all classes. Most
often students cannot keep up with the pace of a
presentation on programming, particularly when they
are not used to thinking like programmers. It is
invaluable for the students to see the process of
program development worked out in class, and with
their participation. Using the board also forces students
to take notes, reinforcing the concepts and topics
presented in the class. Perhaps most importantly, using
the board gives the instructor more flexibility in terms
of adapting the presentation to the learning styles and
abilities of the students, something that is critical to the
kind of diverse student audience that these courses
typically encounter.
4. Make liberal use of visual aids
Artists, who are usually visual learners [1], are able to
grasp programming concepts much more easily when
they are presented visually rather than as lines of code.
It is much easier to explain how a data structure works
using a diagram than using a program. Real-world
metaphors can also help: a train to explain linked lists
or mailboxes to explain pointers.
5. Avoid programs with invisible black boxes
When using a program to illustrate a concept or
problem, it is important to strive for simplicity. Very
often, instructors use a fairly complex program to
illustrate something very simple. Topics which have
not been covered in class are usually put into an
“invisible black box” and saved for later explanation.
This confuses students as it gives them an incomplete
picture and they are not readily able to make the
connection between a highlighted program segment
and results on the screen.
6. Cover pointers and memory management early
Dealing with pointers early on may seem counterintuitive, but it is a great help in avoiding some of the
situations described in the previous paragraph. For
example, most instructors do not cover pointers and
memory management until after they have talked about
functions that implicitly make use of pointers, such as
scanf(). Once students become comfortable with
pointers, it becomes easier to cover more advanced
topics such as call-by-reference and linked lists.
7. Emphasize concepts instead of performance
The task at hand is to help artists to understand
programming conceptually and to develop a working
knowledge. Emphasis on optimizations and program
performance, particularly in the early stages, leads to
unnecessary complexity and can be quite confusing.
8. Assignments should be relevant to the students
Programming assignments often tend to be
focused on a specific programming concept, without
any relevance to the larger context of the course. While
this may be unavoidable in early stages, assignments
that relate to real-world situations usually work much
better in terms of keeping students engaged and
motivated. In Computing for Visualization II,
assignments and projects cover topics such as spline
curves (Figure 4a), quad-trees (Figure 4b), and 2-d

a) Spline curve editor

b) Quad-tree program

Figure 4: Example homework projects
drawing programs, all of which can be directly related
to graphics applications.
9. Be patient!
Being patient is perhaps one of the most important
issues when it comes to teaching programming to
artists. Often instructors find themselves having to
explain the same topic over and over again. While this
can be frustrating, it is usually because artists have a
very different style of learning than programmers, and
not because artists are not able to understand the
material.
The success of our foundation technical
curriculum is evidenced by the fact that several of our
students who entered our program as artists or
architects and went through these courses eventually
completed highly technical theses. Students in the
course have consistently given us feedback that,
whereas before they disliked programming, they now
consider it fun.

4. Teaching art to programmers
The Multimedia and Videography courses that
make up the core artistic curriculum in our program are
designed to address the needs of the technical person
working on a visual storytelling team. On such a team,
the technical person must be able to understand the
needs of the artist, and must also be able to make their
own aesthetic judgments. Consequently, cultivating an
artistic sensibility in our technical students is our
paramount goal. We are convinced that our dedication
to this aim contributes greatly to their later success.
When presenting art to technical students, our
teaching philosophy is that there are fundamental
principles in art that is essential for visual creation, and
these can be taught. They include perception,
creativity, and emotional expressiveness; contour,
gesture, and analytical line; shape, pattern, and
composition; form, perspective, and depth; light, value,
and color; space, time, and motion; seeing with
attention to the lens and camera; as well as the
proportion and expressive qualities of the face and
figure. These can be learned through 1) lectures on
theory, 2) the study of examples from art history, and
3) hands-on experiments.
The Concepts of Visual Communication course
sequence is divided into two segments. The first

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

Figure 5: Figure study in the studio
focuses on traditional and computer media, while the
second is camera and time based. Since these segments
have widely different content, we present them
separately.

4.1. Concepts of Visual Communication I
The first foundation course in art focuses on
cultivating the studio culture of art and architecture
among the students (Figure 5). The socializing of a
new cohort of students is important and often plays a
significant role in a student’s success in our program.
To accomplish this, the class meets for two 3-hour
studio sessions a week so students spend a good deal of
time learning from each other. An overview of the
concepts covered in the course is given below.
1. Drawing and perception: Through a series of
design and drawing assignments, students learn to see
clearly the world around them, so that they can express
the world that exists only in their mind’s eye, and can
communicate through storyboard and key frame.
2. Color theory: Munsell color theory [21] is
emphasized in experiments to enhance the emotional
content of images. Traditional media are used, but we
relate to the student’s technical interests by also using
Photoshop with Wacom tablets for some projects.
(Figure 6)
3. Face and figure: Proportion and expression are
studied, both with drawing and clay. (Figure 7)
4. Creativity: Students use metaphor and personal
vision to create their own solutions.

Figure 6: Color study

Figure 7: Modeling with drawing and clay
5. Process: By witnessing multiple solutions to
assignments and learning brainstorming using
“plussing” in the Disney/Pixar manner, they learn to
enjoy the messy process of creation.
6. Art history: Students often have no experience
with art beyond what they have seen in the popular
media. We help to expand their vision by lectures in
Art History and visits to museums.
7. Exhibition: The requirement to exhibit work is a
source of motivation, and encouragement to the
students. Besides informal in-class exhibits, we hold a
major campus exhibit at the end of the school year in a
weeklong
display
that
includes
artwork,
demonstrations, and screening of animations and
videos. Work from the prerequisite courses is shown
alongside work from the advanced courses.

using rules of perspective. We compare images created
with and without the use of optical devices [11].
3. Composition in time: We study how fragmentation
of time is made sensible to the viewer through the
repetition and cessation of patterns. Compositing has
become fundamental to cinema, offering impossible
angles, locations, and sequences (Figure). Attention to
the grammar of continuity editing allows us to develop
imaginative ways to juxtapose diverse fragments into a
seamless montage [6].
4. Linear / nonlinear methods: Cinematic structure
conveys meaning to an audience. We study traditional
storytelling forms and contrast them with other
structures, such as that of a database, a simulation, or a
mapping sequence. We also explore accident and
chance, and reliance on the viewer to complete a work.
Traditional
filmmaking
methods
emphasize
preproduction with storyboards. Alternative methods
incorporate collage and montage to allow the image to
speak to the artist in a way that sparks an unexpected
solution [7].
A student’s transition from media consumer to
producer involves understanding the interrelationships
among form, content and method. Concepts learned
here can be applied to 2-d and 3-d visualization,
preproduction or other design processes.

4.3. Best practices
1. Environment: It is important to create an
environment of exploration for students who may not

4.2. Concepts of Visual Communication II
The camera and the screen are common to a
myriad of concentration areas within visualization: the
screen is the dominant form of delivery, while cinema
provides a general background for exploration of
moving imagery. In terms of the camera we study
composition, framing, perspective, point of view,
motion, and depth of field. In terms of the screen we
study serialization and sequencing, axes of motion, and
cinematic structure.
To continue the development of a shared art
historical background, examples of historical and
contemporary theory and practice are incorporated into
lectures and assignments to expand the context and to
provide examples of techniques, skills, and ideas [11].
The first half of the course takes students through
“studies,” from which a final, finished project is later
developed. These studies are outlined below.
1. Digital color: Color studies are created with paper
and compared to digital results. These exercises
reinforce the relativity of color. We discuss color
palettes and systems in an artwork’s development, and
examine ways to control color [2].
2. Perception: We examine the effect of the lens
upon learned ways of seeing. We study optical
illusions to contrast the shifting viewpoint of binary
vision with the fixed viewpoint of an image created

Betsy Nitsch (2006)

Alex Timchenko (2006)

Figure 8: Examples of impossible camera shots

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

have experienced working with an open-ended medium
before. The class should also not be perceived as being
overly competitive as students come from diverse
backgrounds with varying levels of artistic ability.
Along these lines, favoritism or even the perception of
favoritism can be very detrimental to the whole class.
2. Collaboration: Students who are technically
trained have often been primarily exposed to a
competitive, isolating environment. To help them to
open up, we model giving and accepting criticism
gracefully, and we work together on a final
collaborative project.
3. Assignments: Students in these courses are usually
comfortable with very structured assignments with
explicitly stated requirements. To make them
comfortable it helps to break down art into its separate
components, and give assignments with clear
expectations.
4. Encouragement: Most students in these courses
perceive themselves to be non-artistic and will
therefore need a lot of encouragement to open
themselves up to creative expression. However,
lowering our expectations of them can often be
counter-productive. Hard work and excellence should
be encouraged, but grading should not. Conversely, an
emphasis on talent rather than work should be avoided.
5. Choice of medium: Individuals in these classes
have diverse goals and means and this calls for some
flexibility in terms of the requirements for
assignments. In Concepts of Visual Communication II
we provide demos and tutorials on unfamiliar systems.
However we embrace any medium that fulfills the
assignment in the required time frame. This also
encourages peer interaction in testing and refining
solutions. The results show the students that there are
many different ways to solve a single problem.
6. Focus on process: Experimentation with a
medium, an image in one’s mind, or a fascination with
a certain genre may all be starting points for creative
expression.
Fundamental to
visual
art
is
acknowledging that process is very important.
Instructors should avoid focusing on the end result
from the beginning.

Conclusions
We have described the philosophy behind an
innovative and highly successful Master of Science
program that brings artists, architects, computer
scientists and engineers together. This program is
notable for integrating art and science into a unified
curriculum. There are many ways in which this can be
done; we have chosen to take the position that by
strong training in fundamentals, both art and science
students can share a common curriculum and be judged
by the same standards. This requires the commitment
of faculty to patient preparation in foundation skills,
and commitment of students to developing these skills
within themselves. We have explained our framework

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

for undertaking this training, and hope that it will be of
use to others who wish to follow a similar path.

References
[1]
[2]
[3]
[4]
[5]
[6]
[7]
[8]
[9]
[10]

[11]
[12]
[13]
[14]
[15]
[16]
[17]
[18]
[19]
[20]
[21]
[22]

Overview of Learning Styles.
URL:
http://www.learning-styles-online.com/overview/.
Albers, J., Interaction of Color. New Haven, CT: Yale
University Press. 1975.
Barran, B.A., “View dependent fluid dynamics”. M.S.
Thesis, Texas A&M University. 2006.
Calderon, M., “Avoiding character collisions in
games”. M.S. Thesis, Texas A&M University. 1999.
Chan, C., “Two computational approaches for creating
Chinese painting”. M.S. Thesis, Texas A&M
University. 2000.
Cubitt, S., The cinema effect. Cambridge, MA: MIT
Press. 2004.
Foss, B., Filmmaking: narrative & structural
techniques. Los Angeles, CA: Silman-James Press.
1992.
Fowler, S.M., “Enlightening lightning! Producing and
directing a multimedia planetarium show”. M.S.
Thesis, Texas A&M University. 2005.
Gombrich, E.H., Art and illusion; a study in the
psychology of pictorial representation. New York,
NY: Pantheon Books. 1960.
Greenwood, S.T. and D.H. House, “Better with
bubbles: Enhancing the visual realism of simulated
fluid”. In Proceedings of the 2004 ACM/
SIGGRAPH/Eurographics symposium on Computer
Animation. pp. 287-296. 2004.
Hockney, D., Secret knowledge: rediscovering the lost
techniques of the Old Masters. New York, NY: Viking
Studio. 2001.
Hong, C.C., “Lighting studies: interpreting lighting
styles from traditional media in computer-generated
imagery”. M.S. Thesis, Texas A&M University. 2002.
House, F., “War women: a motivating legacy
enhanced”. M.S. Thesis, Texas A&M University.
2006.
Kalache, J.-C., “Speedo: a study of the modeling
process of a three-dimensional character”. M.S.
Thesis, Texas A&M University. 1997.
Kaur, A., “Texture mapping using tiled textures”. M.S.
Thesis, Texas A&M University. 2003.
Mandal, E., “Wire and column modeling”. M.S.
Thesis, Texas A&M University. 2004.
Otstott, A., “Today’s science tomorrow’s art”.
SIGGRAPH Electronic Theater. 2000.
Saul, M.D., “The Lelystad Karveel reconstruction of a
seventeenth-century Dutch passenger ferry”. M.S.
Thesis, Texas A&M University. 1994.
Scott, J., “Attack of the note sheep”. SIGGRAPH
Electronic Theater. 2004.
Sharma, C., “A time-based interpretation of Rassouli's
Fusionart”. M.S. Thesis, Texas A&M University.
2004.
Stone, M., A field guide to digital color. Natick, MA:
A.K. Peters. 2003.
Tucker, A.R., “Chromidio: an interface for color
tracking with key frames in Max and Nato”. M.S.
Thesis, Texas A&M University. 2002.

