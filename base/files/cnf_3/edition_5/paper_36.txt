Graph Use to Visualize Web Search Results: MyWish 3.0
M. Angelaccio, B. Buttarazzi, M. Patrignanelli
Dipartimento di Informatica, Sistemi e Produzione - Università degli Studi di Roma "Tor Vergata"
Via del Politecnico, 1 - 00133 - ROMA (Italy)
{angelaccio@info.uniroma2.it, buttarazzi@info.uniroma2.it}
Abstract

This work suggests a search tool, MyWISH 3.0, as a
solution for common web search results visualization
limits. This tool unifies performance standards of a
stable tool with the advanced visualization ability of a
Java-based, highly configurable component. The data
flow of these two modules ends up in an XML interface.
Moreover, because of its accurate caching techniques
and its set-limited activities tracking, the tool aims to be
used by communities sharing the same research
objectives, making them manage various contents in a
easier way.
The paper starts with an overview about literature
concerning visualization tools, trying to highlight present
features and to suggest the deployment of some aspects.
Then, it presents a test-case verified and validated
implementation within a web search limited background,
like a scientific community looking for information
concerning European funding.

1. Overview
In an historical period characterized by
technological acceleration, the accessibility of
information becomes a crucial issue, considering its
exponential growth and its heterogeneity.
Research communities, in particular Hirokawa and
Ikeda [1], has suggested some compelling answers to this
problem, focusing on the importance of graphs-based
visualization structures to solve this issue.
The main purpose of this paper is the description of
a tool, MyWISH 3.0, that uses graphs within web search
results visualization techniques. The hypothetical user
for this tool is a community interested in homogenous
contents searches, working on a stable document corpus
indexed in advance by a web search spider.
The tool is a local search engine, aiming to optimize
the search performance organizing information in well
designed data structure, following the studies made by
this university [2] [3]. The whole structure is completed
with a graph-based interface for visualization, in which

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

the query is represented as root and the relevant
documents as leaves.
Moreover, a registration mechanism for previously
consulted resources is presupposed, made by other users
of the community.

1.1. Search results visualization
In the last fifteen years, many solutions have been
introduced to visualize structured information in
different levels [4]. New technologies like DHTML and
JAVASCRIPT offer new ways to study and implement
complex and structured visualization models.
The most known and used graph-based
methodologies are:
• Cone trees
• Hyperbolic trees
• Fish eye trees

1.2. Search results visualization using graphs
Since the Internet coming, a distributed and
branched documents structure has been used, merging
the host resolution based on IP address with the real
organization of single host’s file systems. In this context,
the whole Internet can be seen as a tree graphs set, in
which it is hard to find the really interesting documents:
moreover, the navigation tools cannot give a real general
vision of the results sets. The current search engines
typically offer a hypertextual links list, in answer to the
user request. This way of visualization is unable to
highlight the relationship between them and cannot give
hierarchical information about documents position in the
network, despite these could be useful informations to
the final user browsing. It represents a great limit for the
current search engine, like well highlighted by Wiza,
Walczack and Cellary in [5].
The modern literature, in particular Hearst [6],
suggested to improve the use of visualization tools by
modern techniques like the pattern recognition. The
previously analyzed models are the most successful in
this matter of study.

1.3. Touchgraph: a graph visualization tool
The features required to the software this paper
intends to develop are:
• graph drawing performing techniques, able to
give output in a little time
• openness
towards
external
systems,
independently from the implementation
technology
• possibility to execute in several web
backgrounds
For these reasons, it is useful to overview a java
open source graph drawing tool: TouchGraph. It permits
its own execution as applet in HTML pages, creating in
real time a planar graph, structured following data
included in an XML document. Every node is displayed
like a labeled polygon with customizable text, color and
font size, as shown in figure 1. TouchGraph was created
by Alexander Shapiro and it is freely distributed in
different versions.

1.5. Paper topic: application to the web search
tool MyWish
The tool examined in this paper has to be designed
to use the TouchGraph visualization potentialities in a
web search system. Now a search tool must be chosen, to
embed TouchGraph feature in and to implement a new
visualization solution. MyWish 2.0 has been chosen. It is
a local search software operating within a static corpus of
documents. Its search functions manage information
collected in a local database, populated by a web-spider
in advance (pre-indexing).
The output of the visualization has to be a graph. It
has to give information about the search result, like
• relevance of the given documents
• their structure concerning organization
• short text for every relevant resource
• URL to access to the resources
• elements to track previous search activities, in
order to use the user feedback, precious in
context of pattern interactions, as suggested by
Stelmaszewska and Blandford [7]

1.6. MyWish 2.0

Figure 1. Graph visualization in TouchGraph
managing interface

1.4. TouchGraph integration in other projects
The openness-oriented design of TouchGraph makes
its integration in other projects very easy. In this case, a
XML document creation tool must be created in order to
provide data to TouchGraph. This module has to:
• organize every interesting data for visualization
• structure data to make easy the writing of the
final XML code
• create automatically and dynamically the XML
document
For this reasons, it is interesting to analyze
TouchGraph using features as stand-alone tool and as
part of an existing really implemented case: TG Google
Browsing.

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

MyWISH 2.0 is a local web search engine,
developed at the “Dipartimento di Informatica, Sistemi e
Produzione” of Università degli Studi di Tor Vergata, by
the research group of prof. Michele Angelaccio.
The development is linked to the features of WISH
[2] (another software made by the same team) and to the
code of PHPDig. PHPDig is a web spider and a search
engine, developed in PHP, using MySQL database.
The PHP development makes the script totally
executable on the server, increasing the performance
values: it also eliminates the needing for the user to
install plug-ins to make it works.
MyWish 2.0 inherits its architecture from PHPDig,
merging PHPDig search module with the javascript
based visualizing system of VSearch, another tool
developed by the same MyWish development team.
Like PHPDig, MyWISH 2.0 considers indexing and
searching like two distinct features. The first one is
managed by the Administrator (from the frontend
showed in figure 2) and consists in running a web-spider
over a corpus of documents, in order to populate a local
database with information extracted from document
parsing. The second one is an open resource for public
users, consisting in extracting from database URLs of
documents matching user queries. The search has the
maximum extension limited to the previously indexed
resources, and does not require further web access. It is
implemented by an access procedure using caching
techniques, in order to reuse searches previously made
by other users.
The Administrator accesses the system by a devoted
Frontend, activating the Spidering/Crawling module to
make it work on WWW and to register data into the
database. This frontend is shown in figure 2.

1.9. Redesigning of the visualization system

Figure 2. MyWISH 2.0 Administrator Frontend
The public user accesses the system by an interface
with its own frontend and receives the answer by a
visualization module. Next, the architecture and the
functioning of MyWISH is more deeply analyzed. The
MySQL database becomes the only common aspect for
the two blocks MyWISH is divided into.

1.7. Organization of the search results
MyWISH implements the search procedure by an
appropriate search function called phpdigsearch.
After the string parsing is done, the function looks
for saved data in previously made searches, searching in
the database tables for already memorized results.
If the query finds them, the search function simply
returns the results produced in the search previously
done. Otherwise, the function activates a new session,
analyzing the inverse index tables and the tables
contenting information got from sites and documents. In
both cases, the function creates a results array, organized
in a multidimensional way. In one dimension there is the
results directory and in the other dimension there are the
attributes of the single result, which are
• identifier of the site having the document
• indexing level of the site
• absolute URL of the document
• a text string with the first words in the
document
• document relevance
• domain of the result

Tree structure can be presupposed, having the
following features:
• the root is the user query submitted to the
system
• the first level children nodes are indexed
domains contenting (in deeper levels) interesting
documents
• the nodes in the sub-levels are sub-folders of the
domains
• the leaves are documents, each placed in is own
directory
In this context, it is possible to express the relevance
by chromatic variations of nodes, or by the explicit
expression of a numeric value in the node. It is also
possible to highlight leaves already clicked in previous
searches managing the nodes. As said, TouchGraph
offers the possibility to give the nodes a label and to
make them clickable as hypertextual links.

1.10. XML-based integration: DTD for
Touchgraph
As said, Touchgraph display graphs according to
parameters expressed in a XML document. XML parsing
module in Touchgraph is structured to analyze DTD well
formed XML documents. The DTD structure is shown in
figure 3.

1.8. Requirements for integration with
TouchGraph
In order to use a new, alternative visualization
module, based on TouchGraph, it is useful to use as
common point the results array. The current visualization
module has to be replaced with a new procedure that:
• organizes the results in a data structure
optimized for final objectives
• pre-arranges the XML referring documents
• loads the Java visualization engine
Next paragraph presents a deeper description about
output requirements, already seen in the previous
paragraphs.

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

Figure 3. Touchgraph DTD graphic
representation
A well formed XML documents following
TouchGraph DTD has to present a base element
TOUCHGRAPH_LB (with a single non optional
attribute expressing document version).
Into it, three elements divide the code in three
distinct sections:
• NODESET
• EDGESET
• PARAMETERS
Into the first section, there have to be one or more
NODE, representing the graph single nodes, everyone

with its nodeID [unique identifier]; into the NODE there
can be collocated:
• NODE_LOCATION with attributes
o visible [setting the initial visibility],
o x [horizontal cartesian coordinate],
o y [vertical cartesian coordinate];
• NODE_LABEL with attributes
o label [a text label],
o shape [rectangle, rounded rectangle, ellix],
o backColor [background colour],
o textColor [text colour],
o fontSize [font size];
• NODE_URL with attributes
o url [resource URL],
o urlIsLocal [set to 1 if the resource is local],
o urlIsXML [set to 1 if the resource is an XML
document];
• NODE_HINT for the visualization of a popup
window, with the following attributes
o hint [popup window content],
o height [height in pixel of the popup
windows],
o width [width in pixel of the popup window],
o isHTML [set to 1 if the popup window
content is a HTML page].

The resource indexing is a task made by the
Administrator, using an apposite form. Then, the
spidering/crawling module starts the indexing from the
URI selected (tipically identifying a domain or a
subdomain over the Internet).
The indexing, after finding the resource on the
WWW, executes a resource parsing procedure, using text
isolation tools and redundant information removing
techniques. Then, a document hypertextual links list is
generated: it will become the spider’s to do list in next
step of finding and scanning procedure.
In the indexing phase, the resources are used to fill
the table concerning indexed sites, single parsed
documents, documents keywords and the inverse index.
The depth value is used to stop the search extension
mechanism to the reached resources after a referring
number bigger than the set value. In the indexing, the
neighbour sites are not included.
The Administrator has also other tasks, like the table
cleaning, the re-indexing of the already indexed
resources, the stop-words set emptying, etc… Every
indexing procedure makes an on screen report.
Opposite to the Administrator, the public user can
use only search and results visualization features by the
devoted search form shown in figure 5.

2. MyWish 3.0 Description
In this chapter the product of the experimental
section of the paper is described, in particular analyzing
the functioning of the separated software modules.
Initially, MyWISH structure is analyzed in a deeper
detail, in particular the functions of the 2.0 version used
also in the 3.0. Next, the implementative aspects
regarding the software programming, focusing on the
elaboration of the search data results and on the
visualization with TouchGraph.

2.1. MyWISH 3.0 architecture and engine
modules
MyWISH 3.0 keeps the same indexing and
searching features available also in the 2.0 version.
In the figure 4 the guide macro modules are shown
to understand how these procedures work: the figures
explains the visualization modules and the XML
interface document, analyzed in next paragraphs.

Figure 4. MyWISH 3.0 functional architecture

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

Figure 5. MyWISH 3.0 search form
Search can be done basing on the initial part of the
word, on the whole word, or on any part of the word.
Every search query result is cached. Every search
contributes to the filling of
• an already done search table (associates table, in
which there are registered queries and search
modalities)
• an already done search results table (search
results table, in which there are archived
information about relevant documents for every
search)
After setting the parameters for the search module,
the procedures to create the relevant documents
array are enabled, using the phpdigsearch function.
The search function goes through these steps:
• activation of several timers, to have a full
performing frame
• query generation using parsing and character
replacement operations, in order to uniform the
text to a standard referring encoding standard
• setting the search id equal to an identical cached
search, or, if not found, equal to the maximum
id increased by one
• searching in cache for a same identical query

if there is no cache referring to the query
search, a search without using cache is
activated
o if there is cache, a search using cache is
activated
• data fetching into the results array, featuring
several fields to identify and manage the results
o

2.2. Modifications implementations
For the next steps, the search function works
following the procedures implemented in this paper.
The use of TouchGraph as visualization module
forces the filling of data into an XML document. This
document is the meeting point for the search engine and
the graph elaboration. Next sections analyze
organization-related aspects, with writing and
visualization of data.

2.3. The new search function: results
organization
After the creation of the results array, the search
engine goes on using the new procedure introduced in
MyWISH 3.0:
• invocation of the XML document creation
function
• getting as result two text strings contenting
XML code for nodes and edges of the output
graph, and a integer valued by the number of
found results
• preparation of the whole text string to be written
in the XML document
• activation of a file streaming session, to write
on disk the XML document (results.xml)
• generation of the output messages, including the
number of found results
• registration of logs in a table
• generation of HTML code to be sent to the
browser
The new version has a new graphic for the interface.
This has a table based layout, and contents are divided in
blocks.

2.4. XML based visualization system
The XML document creation function, written in a
stand-alone php library, is designed for a recursive use,
using the divide et impera way of thinking.
After its invocation, it requests following variables:
• an integer ($xml_id) used as processed nodes
counter. In order to localize every node using an
unique number, this variable is passed by
reference
• a string expressing the analyzed node type
($type), an important factor bound to the
visualization aspect. Possible values can be
“root” and “node”
• a string with the label to put on the node
($label). The root has label equal to the query,

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

the first level nodes equal to the referring
domains and the inferior level nodes equal to the
first identical to the sub-folder represented name
• a string for the node name ($name), valued for
the root by a query, for the nodes linking the
sub-folder represented by the node to the
superior level node name, liked to the same
node
• a numeric variable, equal to the edges number
separating the node from the root ($distance)
• the limit span angle available for the exiting
node edges ($deg_from and $deg_to). The last
three values are used for the initial placement of
every node, next analyzed in the paper
• a bidimensional array structured like the array
results ($subres)
The procedural behavior of the XML document
creation function is composed by two phases:
• a data initialization phase
• an XML code generation phase, linked to the
recursive calling of the same function
The data initialization phase is dividable further on
in blocks:
• array scanning
• classification based on the path presence: the
nodes not presenting path are directly linked to
the analyzed node, so they are inserted in a
leaves array, the nodes presenting path are
inserted in an sub-nodes array, grouped on the
path-field
• numeric variables counters creation, referring to
the generated sub-array cardinality
Generated sub-arrays, representing sub-folders, are
passed into the recursive callings of the XML document
creation function.
After the first phase, there is the XML code
generation, dividable in blocks:
• scanning of sub-nodes array
• values assignment for the variables related to
every node
• XML code generation for every sub-nodes,
related to the edge linking to it
• recursive invocation of XML document creation
function for the node elaboration
• leaves array scanning
• values assignment for the variables related to
every leaf
• XML code generation related to the edge linked
to it
• XML code generation related to the leaf
After two main phases, the XML document creation
function creates the XML code for the analyzed node,
and merges this data with the recursive callings returned
data. Then, the data returning phase is made.
The return-type of the XML document creation
function is an array (xml_string[]), composed by two
strings and an integer. The first string is for the XML
code created by the nodes, the second string is for the

XML code created by the edges. The integer is valued by
the documents number found by the system.
The code generated by the XML code creation
function invocation is composed by:
• a NODE element for the scanned node
• a NODE element for every leaf
• an EDGE element for every recursive
invocation and for every leaf, in order to bind
the analyzed NODE with the leaves NODES or
the NODES generated by recursive callings
The position of the single nodes in the graph is
accurately determined by an appropriate algorithm. It
calculates the angle and the distance from the centre
basing on the edges number exiting from the node and on
the depth level of the node.
The color of the nodes is set using a function having
as input the document relevance and as output an
hexadecimal string. The zero-relevance documents use
black color, the less than 10 relevance documents use
yellow, the less than 20 relevance documents are in red,
and the equal or more than 30 relevance documents are
in blue.

2.5. TouchGraph results visualization
integration in MyWISH 3.0
This paragraph overviews the TouchGraph based
visualization interface. In order to have a fully
comprehensive overview of the previously faced topics,
a search using keys and parameters already in cache is
made.
In the figure 6 a typical TouchGraph screenshot:
• in the page centre is the form inferred query
• bound to it, is the answers domain
• linked to the domain node, there are the second
level nodes, branching off using equal size
ranges, with the sub-folders and so on
• the biggest relevance leaves are highlighted
using colours, making unnecessary the
relevance check
• the three most popular nodes are represented in
a different font size, catching immediately the
user’s attention
• the graphical context shows the manipulation
tools analyzed in the previous paragraphs

3. Conclusion
MyWISH 3.0 fully answers to the prefixed
requirements, also if it can be improved and enhanced in
several aspects.
The graph use for visualization results fully answers
to the presupposed needs: the new tool, if correctly
managed and used, can be a good service for the
destination users.

3.1. Future developments
In the test made, MyWISH 3.0 presented a satisfying
level of stability and reliable hardware and software
requirements for working: however, it is possible to
enhance under several aspects, also linked to the
visualization, already redesigned in the 3.0 version.
The development of the tool leads to the realization
of similar tools for other backgrounds than the web
search, such as an hypothetic tool using MyWISH
interface applying the search to different data structures,
like XML documents or organized documents in
Resource Description Framework, like suggested the
new Semantic Web standards.
One of the aspects that could be enhanced is the
design and the implementation of the retrieval techniques
of the relevant documents, increasing for example the
relevant documents threshold. Moreover, it could be
interesting to improve the sharing of the tool in
distributed and public access backgrounds. A good
solution could be reached giving the user a runtime
control panel to tune the minimum threshold for the
documents returning.

References
[1]

[2]
[3]
[4]
[5]

[6]
[7]

Figure 6. Search results in MyWISH 3.0

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

Sachio Hirokawa, Daisuke Ikeda, “Visualization and
Analysis of Web Graph”, from “Progress in Discovery
Science: Final Report of the Japanese Discovery Science
Project”, S. Arikawa, A. Schinohara Eds., 2003
M. Angelaccio, B. Buttarazzi, “A Visualisation System
for Web local search”, Proceeding of IEEE Conference
IV2000, London, July 2000
M. Angelaccio, B. Buttarazzi, “A GraphXML
Description of QueryMaps”, Proceeding of IEEE
Conference IV2002, London, July 2002
S.K. Card, J.D. Mackinlay, and B. Shneiderman,
“Readings in Information Visualization”, eds. Morgan
Kaufmann, 1999
Wojciech Wiza, Krzystof Walczak, Woiciech Cellary,
“Adaptive 3D Interfaces for Search Results
Visualization”, proceedings of IADIA International
Conference e-Society, 2003
Marti A. Hearst. “Interfaces for Searching the Web”,
Special Report Article in Scientific American, #3 1997
Hanna Stelmaszewska, Ann Blandford, “Pattern of
interactions: user behaviour in response to serch results”,
proceedings JCDL Workshop to Usability, 2002

