Real-time Interactive Visualization of Information Hierarchies
Adrian Rusu
Department of Computer Science
Rowan University, Glassboro, NJ, USA
rusu@rowan.edu

Confesor Santiago
Department of Electrical and Computer Engineering
Rowan University, Glassboro, NJ, USA
santia09@students.rowan.edu

Radu Jianu
Department of Computer Science
Brown University, Providence, RI, USA
jr@cs.brown.edu

Abstract
An information hierarchy is a collection of relational information that is arranged in a ranking organization where
each entity is subject to a single other entity, except for the
top (root) element. The usefulness of a visualization of an
information hierarchy depends on its capability of conveying the information quickly and clearly. The interaction
with the information hierarchy allows a user to further analyze its underlying structures and relationships, which is
essential for the effectiveness of the visualization. In this
paper we present a novel method to interactively visualize
information hierarchies in real-time. We use the World Wide
Web as an application example of our techniques. The result is a novel Web browsing and visualization method with
an innovative combination of features: (i) Web data is retrieved and displayed in real-time (i.e. Web data is not prerecorded), (ii) browsing and visualization are synchronized
together in the same interface, (iii) tree-based visualization
engine, and (iv) space-efficient display of visualization. Our
study shows that users are able to orient themselves better
in cyberspace and locate Web pages of interest faster.

1 Introduction
Information hierarchies are commonly used in a variety
of areas such as file systems, hierarchies of object-oriented
programs, social networks, bibliographies, and structures of
the World Wide Web (WWW). Since each node in an information hierarchy has a certain level of detail, it is important
for the user to interact with the information and be able to
investigate further inside the hierarchy, while at the same
time be guaranteed that the information is up to date. In
some cases a node may have too much information to dis-

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

play within the visualization of the hierarchy, thus a separate detail browsing window to display information may be
required. The Web is an example of this case, and it is the
data source with which we choose to experiment our visualization system.
Extensive effort has been put in developing methods to
visually represent information hierarchies. Treemaps [7],
Cone Trees [11], Hyperbolic Tree [8], 3D Hyperbolic
Space [9], SpaceTree [10], and Zoomology [6] are some
of the methods specifically designed to represent information hierarchies. Pad++ [1], Disk Trees [2], and VISVIP [3]
are some methods that have been applied to Web data, in
an effort to improve navigation and browsing through the
WWW.

2 Our System
The interface of our system is presented in Figure 1.
This interface is composed by two separate windows: detail browsing window, located in the left part, and visualization window, located in the right part. Each circle in the
visualization window represents one node of the information hierarchy, which in our example denotes a particular
Web page in the WWW. A node’s children are located inside of itself. In the detail browsing window the information
contained in the root node of the hierarchy is presented in
detail. The user can interact with information either from
the detail browsing window or from the visualization window, as described in Section 2.5.
¾º½

Ê Ò ×¹

×

Ö Û Ò

Ð ÓÖ Ø Ñ

Radial graph visualizations locate the focus node at the
center of the layout and nodes connected to the focus node
radiate outward on uniformly separated rings [4]. We

Figure 1. Screen-shot of entire system: (a) Detail browsing window, (b) Visualization window.
adapted the radial layout rings-based tree drawing algorithm
of [12] to use as the engine of our system. In the original
algorithm a tree is drawn as a circle with the root placed in
the center, hence we call it Rings. The subtrees rooted at the
children of the root are drawn recursively as circles placed
in concentric rings around the center of the circle to ensure
efficient use of space.
In the original Rings algorithm, the children of the root
are divided into N categories according to their size. One
ring is assigned to each category, so the outer rings consists
of the “largest” trees while the inner circles consists of the
“smallest” ones. This way a tree containing more information is allocated more space. Because of this ordering the
algorithm needs to know the entire tree before it can start
generating the drawing (bottom-up). A similar placement
strategy is used by Grokker [5], which is a web-based tool
used to visualize Web data based on the content relationships of user queries.
In order to increase the speed of displaying the information and hence to meet the constraints of a real-time system,
we modified Rings by not organizing the subtrees based on
their sizes, thus allowing the algorithm to start drawing the
tree much sooner (top-down). The tradeoff is that our visualization is slightly less efficient than original version of
Rings in terms of use of space, but allows for a much faster
generation of the drawing. We call our adaptation of the
original Rings algorithm, FastRings. Another modification
to the original Rings was in the arrangement of nodes in-

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

side the tree. Since the size of a tree is not considered, all
the nodes of the tree are considered to be equivalent. In
our visualization, the best method of arranging the nodes is
to draw them as close to the same size as possible for every depth in the tree, hence making the nodes appear visually equal. Our layout is different than 2-D Cone trees [11],
since, in our case, child nodes are completely contained by
their parent node, and in 2-D Cone trees they are arranged
outside, thus requiring more space. A new arrangement algorithm was developed to capture the requirements of FastRings.

Figure 2. Ringed circular layout of nodes.
As mentioned above, Rings places circles corresponding
to children in concentric rings around the center of the par-

ent node [12], as shown in Figure 2. Connecting the centers
of n equal circles placed in a ring makes an n-sided regular
polygon. In Figure 2, = / n, where n is the number of
circles in a ring, and is in radians. A simple relationship
can be derived between the number of children circles in the
outermost ring and the percentage of area taken up by the
ring. Next, f(n), the fraction of the area left after n circles
have been placed in the ring is given by [12]:
¾
´½   × Ò ´ µµ¾ ´½   × Ò ´ Ò µµ¾
´Òµ ´´ÊÊ¾ µµ¾ ´½
· × Ò ´ µµ¾ ´½ · × Ò ´ Ò µµ¾
½

(1)

Using the relationship in Equation 1, the number of children to be placed in each concentric ring can be determined.
The new arrangement algorithm starts by calculating Æ , the
total number of circles to be placed in the entire circle (all
ring levels). Next, the algorithm finds the value k, the number of nodes to be placed in the outermost ring. We find
the value k by calculating which value of f( ), where is
an integer between
Æ , has the smallest fractional
difference to percentage of children used. For example, we
want the percentage of space used in the ring to be as close
as possible to the percentage of the total number of children
used in that space (i.e. Æ
f( )). Therefore, circles
are placed in the outermost ring. The rest of the children are
placed in the same way in the inner rings.
Only one level in advance is needed to produce a first
drawing of a tree. This drawing can be refined later by filling up the circles drawn in the previous step once new information becomes available. This new information allows the
user to ”browse into the future” because these detail pages,
which appear deeper in the hierarchy, can be evaluated without having to load them in the detail browsing window. FastRings constructs a straight-line grid drawing, using a small
amount of space with optimal aspect ratio. In addition, there
are no edge crossings inside child nodes, the only crossings
are with the edges that connect a parent to its children.
Our experiments show that FastRings increases the speed
of constructing entire drawings by 51%, and is
times
faster in producing first drawings in comparison to Rings.

½¾

Figure 3. Procedures of the navigation strategy.

¯
¯

¯

¯

½¾

¾º¾

Æ Ú

Ø ÓÒ ËØÖ Ø

Ý

We provide the user with the ability to navigate the information hierarchy through the visualization. We developed a novel navigation strategy to transition the focus of
the visualization. Initially, the focus is the tree with the root
placed in the center of the main circle since that tree has
the largest drawing area allocated. Some illustrative screen
shots of how this animation is implemented in our system
are presented in Figure 3. The procedures of our navigation
strategy are:

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

¯

Step 1 - Node Selection: The user selects a node for
focus change. The selected node is shaded gray (see
Figure 3(a)).
Step 2 - Move Selected Node to Outermost Ring: The
closest positioned (in terms of distance) node in the
next outer ring (next radial layout layer, Figure 3 shows
three rings) is found and its position is swapped with
the selected node. This is repeated until the selected
node is on the outermost ring.
Step 3 - Scale Up, Scale Down: The selected node is
extracted from the parent node and magnified (scaled
up) to the size of the parent. At the same time, the
size of the parent is reduced (scaled down) to the size
that will appropriately fit inside the selected node as a
child. In addition, the link between the two nodes is
thickened to display the history trail (see Figure 3(b)).
Step 4 - Make Space for Parent: After the selected node
and its parent are scaled to their suitable sizes (see Figure 3(c)), space is made available in the selected node
to place the parent node. If space is available inside
the selected node, the parent is moved to that location.
If space does not exist, the nodes inside the innermost
ring are scaled to a specific smaller size and bunched
together in a fashion that allows space for one more
node inside the ring. After space is made available inside the ring, the closest node inside the next outer ring
is moved to the newly created space. This is repeated
until space for the parent node is made available inside
the outermost ring (see Figure 3(d)).
Step 5 - Place Parent in Newly Allocated Space: Now
that space is available for the parent node, we calculate the position of the free space. Next, we move the
parent node to the free space (see Figure 3(e)).

Figure 4. Example of different label slots for
a node.

¯

Step 6 - Move Selected Node To Center: The transition within the visualization is complete. Finally, the
selected node is moved to the center of the visualization window, and it becomes the new focus. The data
retrieval starts at the new child nodes that are in focus
and the user can continue browsing and navigating.

In support of the navigational functionality, we colorcode the parent node during the animation, in order to avoid
the user loosing familiarity with the visualization during the
navigation process. We have also employed a two-group
gray-shading method to distinguish chronological browsing order. The most recent visits appear as black thickened edges, and older visits appear as gray thickened edges.
Hence, darker shades denote more recent visits and lighter
shades represent older visits. Also, vectored edges are used
to reveal the direction in which the user has browsed from
one node to another.
¾º¿

Ä

Ð Ò

Å Ø Ó

A labeling technique is used to identify each children of
the root node. Each child node in the visualization has a
certain identifying string (i.e. Web address of Web page
or name of file), which can be found in the detail browsing window. A fixed height and width font is used to easily
calculate the pixel dimension of the labels. The width of
each label is restricted to a maximum width, in our case we
choose three times the radius of the children. If the label is
too lengthy, then it is shortened, and an etcetera is appended
to the end, denoting that the label was shortened. Once the
dimensions for each label are calculated, by default the labels are placed in the center ”slot” of the upper half of each
node. An example of a node’s label slots is shown in Figure 4.
Sometimes labels overlap in the default locations; therefore an algorithm was developed to avoid overlaps. The
algorithm loops through every child of the root and checks
for label overlapping with all the other children that appear
within a specific distance apart. This distance is set up using
the label maximum width. In our case, only children that

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

are within four times the radius of the node are compared.
If overlap exists, we iterate through the available labels slots
for that node and choose the first slot that does not overlap.
With the combination of the fixed height and width font,
capped label length, and different label slots, the above algorithm can align and place the labels in a manner that is
legible; labels are not occluded.
In addition, when the user hovers over a node, the node
becomes gray-shaded and shows only one label in its entirety. Also, sometimes space within the visualization is
limited, when labels are shortened to less than
of their
length, they are temporarily removed.
Another way we advertise information about a certain
node is through the labels in a text area located at the top
of the visualization window (see Figure 1). When the user
hovers over a node, detailed information (i.e. Web address,
Web link name, description, and keywords) about the node
appears in this text area.

¾±

¾º

Ê

Ð¹Ì Ñ

With FastRings, only one level of the tree is needed in order to generate a first representation, which is continuously
refined while the user is reading the information in the detail browsing window. Our system uses a small amount of
graphics, therefore rendering the information to the screen
does not slow down our real-time system.
¾º

ËÝÒ ÖÓÒ Þ Ø ÓÒ

In order to decrease the user’s cognitive load, we integrate the browsing and visualization together synchronized
in the same interface. When a link in the detail browsing
window is hovered over, the location of the link in the visualization window is advertised to the user. Detail pages are
also loaded in the detail browsing window when selected
from the visualization window.
The user can also interact with the information in the visualization window by selecting links in the detail browsing
window. This way, a node selected via its corresponding
link in the detail browsing window is transitioned to focus
as described in Section 2.2. After the refocusing is complete, the detail page that the new focus node represents is
loaded by our detail browsing window. This creates a complete two-way synchronization between the detail browsing
window and the visualization window, which is unique to
our system.

3 Application
The problem of users’ disorientation in the WWW which
emerges from the high complexity of the WWW environment is often referred to as the “lost in cyberspace” prob-

lem. A regular Web browser’s back and forward functionality is a not a sufficient solution to this problem.
¿º½

Ï

Î ×Ù Ð Þ Ø ÓÒ

A wide-range of approaches have been developed to
visually represent Web data. We have reviewed technical aspects and established drawbacks of other approaches.
Drawbacks included inefficient usage of space, use of prerecorded data, information occlusion, slow bottom-up algorithms, and navigation disorientation. Very few of the other
methods have been adopted and are currently being used as
viable solutions to the ”lost in cyberspace” problem.
The structure of the World Wide Web can be modeled as
a graph: the nodes are HTML pages, and a hyperlink from
one page to another is represented as a directed edge. However, trees have much simpler structures than graphs, which
makes it faster to generate aesthetically pleasing displays of
trees.
In our application, the Web page that appears in the
browser is represented by the root node of the tree in the
visualization. A node’s children are Web pages that can be
accessed via links in the Web page for which that node represents. We introduce the Web application of our techniques
as a viable solution to the ”lost in cyberspace” problem. The
combination of our system’s features (real-time, synchronization, tree-based engine, space-efficient) addresses the
established shortcomings of previous systems.
¿º¾

ÁÑÔÐ Ñ ÒØ Ø ÓÒ

Ø

Ð×

We implemented the Web application of our techniques
in Java 5.0 on the Windows platform, in an object-oriented
fashion. The Web browser and visualization are both individual objects in the design of our system. The user interface of the Web browser is created using the built-in Java
Swing Toolkit. The displaying of Web pages is handled by
the HTMLDocument class, and the interaction within the
links in the Web page is controlled by the HTMLFrameHyperlinkEvent class. Back and forward functionality is
controlled by a queuing structure that maintains a record
of browsing history. The user interface of the visualization
is also created using Java Swing. We use Java2D for the
graphics generated within the visualization. In addition, we
use the Java AWT Event Toolkit to handle the user interaction with the visualization.
The Web browser and visualization object each have access to certain functionality within each other. In order to
maintain synchronization, when a node in the visualization
is selected, our system makes a call to the method that loads
a new page in the Web browser with the selected Web page’s
address as a parameter. Furthermore, when a link is selected
in the Web browser, our system makes a call to its associat-

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

ing method that changes the focus of the visualization with
the link’s address as a parameter. The HTMLFrameHyperlinkEvent allows the system to realize when a link in the
Web browser is hovered, and one property of the event is
the address of the link. Hence, we have designed our system, that whenever this event occurs, to find the Web page
in the visualization, and advertise its location to the user.
Lastly, we use Java’s multi-threading capabilities to control
the process of retrieving information, rendering information, displaying Web pages, and animating the navigational
technique.

4 User Study
Twenty subjects voluntarily participated in our study to
evaluate the effectiveness of our system in exchange for a
chance at a monetary prize drawing. We wanted to capture
results from two technical levels, therefore we recruited ten
non-technical subjects and ten technical subjects. We consider a non-technical subject as a person who has no prior
background in software development and technical as those
who had background in software development. Both types
of subjects were experienced in browsing the WWW. The
majority of subjects were undergraduate students, but a few
graduate students and non-student subjects existed.
º½

ÈÖÓ

ÙÖ

Each subject participated in our study on a one-on-one
basis with the user study proctor. The user study proctor
was one of the authors of this paper. First, the subject was
given a half page description of what he/she will do in our
study. After reading the description, if the subject had questions then they were discussed, otherwise the proctor explained the ”lost in cyberspace” problem, how to use the
system, and how we propose our system to be a solution.
This explanation lasted approximately 15 minutes. After
the explanation and background, the subject took part in
two training assignments. Each training assignment lasted
approximately 15 minutes. During the first training assignment, the subject was asked to find specific Web pages in the
visualization, select them, and later asked to return to some
previously visited location, therefore simulating procedures
performed while casually browsing. The second training
assignment was focused on revealing how the Web browser
affected the Web visualization. In the second training task
the subject was asked to hover over links in a specific Web
page within the Web browser to demonstrate how the node
that represents the page is advertised in the visualization.
In addition, the subject was asked to click specific links,
which exposed the subject to the focus change procedure of
the visualization, when a link is selected, as well as provide
a visual representation of where the subject ”moved”.

User Type
Technical
Non-technical
Technical
Non-technical
Technical
Non-technical
Technical
Non-technical

Scenario
1
1
2
2
3
3
4
4

Our solution
Time (secs) Completion %
118
100%
200
100%
290
80%
221
100%
105
100%
65
100%
305
100%
235
100%

Web browser
Time (secs) Completion %
199
60%
372
40%
146
100%
290
80%
83
100%
114
100%
34
100%
24
100%

Improvement %
67%
86%
None
31%
None
75%
None
None

Table 1. Time results and scenario completion rate for all subjects using both our solution and a
regular Web browser on all four scenarios.

Two different methods of browsing were used in our
study: a regular Web browser and our system. While using our solution, subjects could use the associated Web
browser to obtain more detail, but selections were only allowed through the visualization. The scenarios were selected to cover different real-world situations. In Scenario
1, the user navigates through unfamiliar Web pages with unfamiliar structures, containing a moderate amount of information to search. In Scenario 2, the user navigates through
unfamiliar Web pages with familiar structures, for some,
containing a large amount of information to search. In Scenario 3, the user navigates through familiar Web pages with
familiar structures, containing a large amount of information to search. In Scenario 4, the user navigates through unfamiliar Web pages with unfamiliar structures, containing a
small amount of information to search. Each scenario was
timed, and each subject had a maximum time of 10 minutes to complete each scenario. Each subject used a regular Web browser for two scenarios and our solution for the
other two. Scenario 1 started from the International World
Wide Web Conference’s Call for Papers Web page, and had
the subjects find the (ACM) Web page where women are
the main topic. Scenario 2 started from the University of
Calgary home-page, and had the subjects find the Web page
about on-campus student employment opportunities. Scenario 3 started from the Rowan University home-page, and
had the subjects find the Web page that contains information about Class Schedules/Registration Schedule. Scenario
4 started from the Transportation Security Administration
(TSA) home-page, and had the subjects find the Web page
that contains information about bringing baby formula onto
aircraft during flight.
º¾

Ì Ñ

Ê ×ÙÐØ×

Since this paper presents our proposed solution to the
”lost in cyberspace” problem, it was essential we prove this

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

conjecture. The time results and scenario completion rate
for all subjects performing each scenario using our solution
and a regular Web browser are presented in Table 1.
Our solution was most effective when subjects were
browsing through a moderate amount of unfamiliar information and structures. In fact, 60% of non-technical subjects and 40% of technical subjects could not complete the
task in such a case, when using a regular Web browser. On
the other hand, all subjects were able to complete the task
using our system. As expected, our solution was least effective when subjects were asked to locate readily available information. We also found, when browsing familiar structures, technical subjects’ performance is similar for
both our solution and regular Web browser. The user study
shows that non-technical users locate information faster using our system, when browsing through non-trivial information spaces.
An overall Analysis of Variance (ANOVA) comparing
which browsing method was used, which scenario was performed, and which type of subject performed the tasks was
implemented on the time results. The case when nontechnical subjects used the regular Web browser on Scenario 1 was omitted from the overall ANOVA, because three
subjects could not complete the task, therefore only two
data points remained for this case. The overall ANOVA
proved to reject the null hypothesis that no difference between the means exist;
ÖÖÓÖ
,
,
È
.

¿

¼¼

º¿

ËÙ

Ø Ú

Ê Ø Ò ×

After completing all four scenarios, the subjects were
asked to fill out an evaluation. The ratings for each question
were on a 7-point scale; 1=lowest, 7=highest. Due to lack
of space, some results were excluded. The average rating
for the effectiveness of the interactive animation within visualization to provide the subject with a better understand-

ing of ”where they are going” was 5.7. The average rating
for the effectiveness of the browsing history advertisement
to provide the subject with a method of seeing ”where they
came from” and ”how did they get there” was 6.15. The
average rating for the effectiveness of the integration and
synchronization of the Web browser and visualization was
6.25. Subjects agreed with an average rating of 5.85 that
the tree-based structure of representing Web data was easy
to follow. Subjects agreed with an average rating of 5.8 that
the use of labeling nodes helped them understand what each
node represented. The average rating of the overall effectiveness of our solution in solving the ”lost in cyberspace”
problem was 5.4.
Overall, the feedback from the subjects affirms that our
solution was helpful in solving the ”lost in cyberspace”
problem. The feedback also reveals that the system was effective with minimal training, therefore the transition from
understanding what our solution provides to actually using
it is short.

[2] E. H. Chi, J. Pitkow, J. Mackinlay, P. Pirolli, and
R. Gossweiler. Visualizing the evolution of Web
ecologies. In Proceedings of the Human Factors in
Computing Systems, CHI ’98, pages 400–407, 1998.

5 Conclusion

[7] B. Johnson and B. Shneiderman. Tree-maps: A spacefilling approach to the visualization. In Proc. IEEE
Visualization, pages 284–291, 1991.

In this paper we presented a novel method to interactively visualize information hierarchies in real-time. Our
method introduces an innovative combination of features
such as real-time synchronization between browsing and
visualization, which offers the user the ability to analyze
the detail thoroughly while preserving her mental map by
keeping the visualization in sight. The visualization is not
only represented in an aesthetically pleasing manner, but
also makes efficient use of space, thus presenting relevant
information in a more condensed form. The visualizing aspect of our system is fueled by our FastRings drawing algorithm, which can handle processing and generation of the
visualization in real-time. We applied our techniques on
Web data as a viable solution to the ”lost in cyberspace”
problem. The user study proved that our solution helped
both technical and non-technical subjects find information
faster and more efficiently, as well as have a much higher
success rate in finding information. We discovered that our
solution helped non-technical subjects more than technical
subjects. Our system could also be used as a complement
to Google searches. A Google search guides searchers to
an unfamiliar Website, which the searcher might need to
explore further. Our system is sustainable on broadband
connections, as well as on dial-up connections, because of
limited resources used.

References
[1] B. Bederson. A zooming Web browser. In 9th Annual ACM Symposium on User-Interface Software and
Technology, 1996.

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

[3] J. Cugini and J. Scholtz. VISVIP: 3D visualization of
paths through Web sites. In Proceedings of the International Workshop on Web-Based Information Visualization, pages 259–263, Florence, Italy, 1999.
[4] P. Eades. Drawing free trees. In Bulletin for the Institute for Combinatorics and its Applications 5, pages
10–36, 1992.
[5] http://www.grokker.com.
[6] J. Y. Hong, J. D’Andries, M. Richman, and
M.Westfall. Zoomology: comparing two large hierarchical trees. In Poster Compendium of the IEEE Symposium of Information Visualization (InfoVis 2003),
pages 120–121, 2003.

[8] J. Lamping, R. Rao, and P. Pirolli. A focus+context
technique based on hyperbolic geometry for visualizing large hierarchies. In Proceedings of the Conference on Human Factors in Computing Systems, pages
401–408, 1995.
[9] T. Munzner and P. Burchard. Visualizing the structure
of the World Wide Web in 3D hyperbolic space. In
Proc. 1st Symp. The VRML Modeling Language: Special issue of Computer Graphics, pages 33–38. ACM
Press, 14–15 1995.
[10] Catherine Plaisant, Jesse Grosjean, and Benjamin B.
Bederson. Spacetree: Supporting exploration in large
node link tree, design evolution and empirical evaluation. In Proceedings of the IEEE Symposium on Information Visualization, INFOVIS 2002, pages 57–64,
2002.
[11] G. Robertson, J. Mackinlay, and S. Card. Cone trees:
animated 3D visualizations of hierarchical information. In Proceedings of CHI ’91 Conference on Human Factors in Computing Systems, pages 189–194,
1991.
[12] S. T. Teoh and K. L. Ma. RINGS: A technique for
visualizing large hierarchies. In Proceedings 10th International Symposium on Graph Drawing, volume
2528, pages 268–275, 2002.

