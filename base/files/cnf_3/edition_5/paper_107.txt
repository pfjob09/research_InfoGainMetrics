A Practical Algorithm for Planar Straight-line Grid Drawings of General
Trees with Linear Area and Arbitrary Aspect Ratio
Adrian Rusu
Department of Computer Science
Rowan University
Glassboro, NJ 08028, USA
rusu@rowan.edu

Confesor Santiago
Department of Electrical and Computer Engineering
Rowan University
Glassboro, NJ 08028, USA
santia09@students.rowan.edu
a tree Ì has the subtree separation property if, for any
two node-disjoint subtrees Ì Ù℄ and Ì Ú ℄ of Ì , the enclosing rectangles of the drawings of Ì Ù℄ and Ì Ú ℄ do
not overlap with each other [1].
While the algorithm of [2] was significant from a
theoretical point of view, it suffered from the following
drawbacks, that made it unsuitable for practical use:

Abstract
Trees are usually drawn using planar straight-line
drawings. [2] presented an algorithm for constructing
a planar straight-line grid drawing of a degree- (general) tree with area Ç´Òµ and any pre-specified aspect
ratio in the range Ò « Ò« ℄, where ¼
« ½ is any
constant, in Ç´Ò ÐÓ Òµ time. Unfortunately, the algorithm of [2] is not suitable for practical use. The main
problem is that the constant hidden in the ”Oh” notation
for area is quite large (for binary trees was 3900).
In this paper, we have made several improvements
to the algorithm, which make it suitable for practical
use. We have also conducted an experiment on this
newer version of the algorithm for randomly-generated
general trees with up to 50,000 nodes. Our experiment
shows that it constructs area-efficient drawings in practice, with area at most 19 times the number of nodes.

¯

¯
1 Introduction
We investigate the problem of constructing planar
straight-line grid drawings of general trees with small
area. Any planar grid drawing of a tree with Ò nodes
requires ª´Òµ area. A long-standing fundamental question, therefore, has been that whether this is a tight
bound also, i.e., given a tree Ì with Ò nodes, can we
construct a planar straight-line grid drawing of Ì with
area Ç´Òµ?
This question was answered in affirmative in [2],
which presented an algorithm for constructing a planar
straight-line grid drawing of an n-node degree- tree Ì ,
where
Ç´ÒÆ µ is a positive integer and ¼ Æ ½ ¾
is a constant, with area Ç´Òµ and with any pre-specified
aspect ratio in the range Ò « Ò« ℄, where ¼ « 1
is any constant, in Ç´Ò ÐÓ Òµ time. The algorithm also
achieves the subtree separation property. A drawing of

Also, it uses another algorithm, called Ð ÓÖ Ø Ñ
  Ö Û, as a subroutine. This increases
the complexity of implementing the algorithm.

Ù£   ÀÎ

In this paper, we have made several improvements
to the algorithm of [2], which make it more suitable for
practical use (note that the properties of the drawing constructed by this newer version of the algorithm are preserved: linear area, planarity, straight-line, subtree separation property):

¯

¯
1

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

The constant , where  is the ratio between area
of drawing and number of nodes, hidden in the
”Oh” notation for area can be quite large (for binary trees was 3900). One might argue that  is really the worst-case bound, and the algorithm might
perform better in practice. However, the problem is
that given a tree Ì with Ò nodes, the algorithm will
always pre-allocate a rectangle Ê with size exactly
equal to Ò, and draw Ì within Ê. Thus, the area of
Ê is always equal to the worst-case area, and correspondingly, the drawing also has a large area. This
is the major drawback of the algorithm.

We have developed a newer version of the algorithm of [2] that does not require the preassignment of a rectangle with the worst-case area
to draw a tree. Instead, it only pre-assigns an aspect ratio to the tree, which is used to draw the tree
recursively in a bottom-up fashion. This makes it
possible for the algorithm to construct a more areaefficient drawing in practice.
This newer version does not require

Ð ÓÖ Ø Ñ

Ù£   ÀÎ

¯

¯

  Ö Û as a subroutine, which makes it
easier to implement.
The proof for the area being Ç´Òµ given in [2] is
based on a theorem by Valiant (Theorem 6 of [4]).
Unfortunately, the most natural way of using the
theorem seemed to be requiring the pre-assignment
of a rectangle (with a large area). Hence, developing an algorithm that does not pre-assign a rectangle required developing a new proof. Correspondingly, we have developed a new proof that does not
use the theorem. Instead, it simply uses induction.
We have also implemented this newer version,
and experimentally evaluated its performance for
randomly-generated general trees with up to 50,000
nodes. Our experiments show that it constructs
area-efficient drawings in practice, with area at
most 19 times the number of nodes, which represents an area more than 200 times less than the one
generated by the algorithm of [2].

Our algorithm is a generalization of the algorithm
of [3], which draws binary trees.

Let   be a drawing of Ì . Let Ì be a degree- tree, with
one distinguished node Ú , which has at most   ½ children. Ú is called the link node of Ì . Let Ò be the number
of nodes in Ì . Ì is an ordered tree if the children of each
node are assigned a left-to-right order. The first child of
Ì is allowed to be empty, and can be followed by 0 to
  ¾ children. A partial tree of Ì is a connected subgraph of Ì . If Ì is an ordered tree, then the leftmost path
Ô of Ì is the maximal path consisting of nodes that are
leftmost children, except the first one, which is the root
of Ì . The last node of Ô is called the leftmost node of Ì .
Two nodes of Ì are siblings if they have the same parent
in Ì . Ì is an empty tree, i.e., Ì
, if it has zero nodes
in it.
Let Ê be a rectangle, such that   is entirely contained
within Ê. Ê has a good aspect ratio, if its aspect ratio is
in the range Ò « Ò« ℄, where ¼ « ½ is a constant.
Let Ö be the root of Ì . Let Ù£ be the link node of Ì .
  is a feasible drawing of Ì , if it has the following three
properties:

¯
¯

Property 1: The root Ö is placed at the top-left corner of  .

Ù£

zontal channels occupied by Ö.
Theorem 1 (Separator Theorem [2]) In any degreetree Ì , there is a node Ù, such that removing Ù and its
incident edges splits Ì into at most trees, where each
tree has at most Ò ¾ nodes in it, and Ò ¾ is the number
of nodes in Ì . Node Ù is called a separator node of Ì .
Moreover, Ù can be found in Ç´Òµ time.

3 Practical General Tree Drawing
Algorithm

2 Preliminaries

¯

Figure 1: Drawing of a randomly-generated general
tree with 60 nodes constructed by Algorithm DrawGeneralTree, with
½ and ¯ ¼ ¾.

Ö, then Ù£

Property 2: If
is placed at the
bottom boundary of  . Moreover, we can move Ù£
downwards in its vertical channel by any distance
without causing any edge-crossings in  .
Property 3: If Ù£ Ö, then no other node or edge
of Ì is placed on, or crosses the vertical and hori-

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

Let Ì be a degree- tree with a link node Ù£ , where
Ç´ÒÆ µ is a positive integer, ¼ Æ ½ ¾ is a constant,
and Ò is the number of nodes in Ì . Let and ¯ be two
numbers such that Æ ´½   Æ µ
¯ ½, and is in the
range Ò ¯ Ò¯ ℄.
is called the desirable aspect ratio
for Ì .
Our tree drawing algorithm, called DrawGeneralTree, takes ¯, , and Ì as input, and uses a simple
divide-and-conquer strategy to recursively construct a
feasible drawing   of Ì .
Figure 1 shows a drawing of a randomly-generated
general tree with 60 nodes constructed by Algorithm
DrawGeneralTree, with
½ and ¯ ¼ ¾.
We now give the details of each action performed by
Algorithm DrawGeneralTree:

3.1 Split Tree
The splitting of tree
follows:

¯
¯
¯

Ì

into partial trees is done as

Order the children of each node such that
becomes the leftmost node of Ì .

Ù£

Using Theorem 1, find a separator node Ù of Ì .
Based on whether, or not, Ù is in the
leftmost path of Ì , we get two cases:

– Case 1: The separator node Ù is not in the
leftmost path of Ì . In the general case, Ì has
the form as shown in Figure 2(a). In this figure:

£ Ö is the root of Ì ,
£
 are the children of Ù, ¼
  ½,
£Ì
Ì are the trees rooted at

 respectively, ¼
  ½,
£ Ì« is the subtree rooted at Ù,
£ Û is the parent of Ù,
£ is the last common node of the path
½

½

½

Ú and the leftmost path of Ì ,
is the child of that is contained in the
path Ö
Ú,
£ Ì¬ is the maximal tree rooted at that
contains Û but not Ù,
£ Ì is the tree consisting of the trees Ì«
and Ì¬ , and the edge ´Û Ùµ,
£ is the parent of ,
£ is the leftmost child of ,
£ Ì is the maximal tree rooted at Ö that
contains but not ,
£ Ì is the tree rooted at ,
£ ½
are the siblings of and ,
£ Ì½¼ Ì ¼ are the trees rooted at
respectively, ¼
  ¿,
½
and
£ Ù£ .
In addition to the general case, we get six special cases (not covered here due to lack of
space): (b) Ì
,Ì
,¼
  ¿,
(c) Ì
,Ì
,
Ù£ , ¼
  ¿,
(d) Ì
,Ì
,Ö
,¼
  ¿,
(e) Ì
,Ì
,Ö
,¼
  ¿, (f)
Ì
,Ì
,
Ù£ , ¼
  ¿, and
(g) Ì
,Ì
,
Ù£ , ¼
  ¿.
(The reason we get these seven subcases is as
follows: Ì« has at least Ò ¾ nodes in it because of Theorem 1. Hence Ì«
, and so,
Ì
. Based on whether Ì
or not,

£

(a)

Ö

(b)

(c)

Figure 2: General structure of tree Ì in (a) for Case
1 (separator node Ù is not in the leftmost path of Ì ).
Drawing for Ì , when
½ in (b), and when
1 in
(c).

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

or not,
Ù£ or not, and Ö
or not, we get totally sixteen cases. From
these sixteen cases, we obtain the above seven
subcases, by grouping some of these cases
together. For example, the cases Ì
,
Ì
,
Ù£ , Ö Ù£ , and Ì
,
Ì
,
Ù£ , Ö Ù£ are grouped together to give Case (a), i.e., Ì
,Ì
,
Ù£ . So, Case (a) corresponds to 2 cases.
Similarly, Cases (c), (d), (e), (f), and (g) correspond to 2 cases each, and Case (b) corresponds to 4 cases.) In each case, we remove
nodes and Ù, and their incident edges, to
split Ì into at most ¾   ½ partial trees Ì ,
Ì , Ì¬ , Ì½¼
Ì ¼, ¼
  ¿, and
Ì½
Ì ,¼
  ½. We also designate
as the link node of Ì , Û as the link node
of Ì¬ , and Ù£ as the link node of Ì . We arbitrarily select a leaf of Ì ¼ , ¼
  ¿,
and a leaf of Ì , ¼
  ½, and designate them as the link nodes of Ì ¼ and Ì ,
respectively.
– Case 2: The separator node Ù is in the leftmost path of Ì . In the general case, Ì has the
form as shown in Figure 3(a). In this figure,
£ Ö is the root of Ì ,
£ Ú is the leftmost child of Ù,
£ ½  are the siblings of Ú, ½
  ¾,
£ Ì½ Ì are the trees rooted at
½
 respectively, ½
  ¾,
£ is the parent of Ù,
£ Ì is the maximal tree rooted at Ö that
contains but not Ù,
£ Ì is the subtree of Ì rooted at Ú,
£
is the forest composed by trees
Ì½
Ì ,½
  ¾, and
£ Ú Ù£.
In addition to the general case, we get the following ten special cases (not covered here due

Ì

(a)

(b)

(c)

Figure 3: General structure of tree Ì in (a) for Case 2
(separator node Ù is in the leftmost path of Ì ). Drawing
for Ì , when
½ in (b), and when
1 in (c).

Ì

, Ì , or Ì½
Ì,
number of nodes in Ì .

¼

  ¾.

Let

Ò

be

Ì is a large partial tree of Ì if:
½ and Ò ´Ò µ½ ´½·¯µ , or
½ and Ò ´ Òµ½ ´½·¯µ ,
and is a small partial tree of Ì otherwise.

Definition:
(a)

(b)

(c)

Figure 4: Drawing Ì« . Here, we first show the structure
of Ì« in (a), then its drawing when
½ in (b), and
then its drawing when
½ in (c).
to lack of space): (b) Ì
,
¼, Ú Ù£
, (c) Ì
, ½
  ¾, Ú Ù£,
£
(d) Ì
,
¼, Ú Ù , (e) Ì
,
½
  ¾, Ú Ù£, (f) Ì
,
¼,
Ú Ù£ , (g) Ì
,½
  ¾, Ú Ù£,
£
(h) Ì
,
¼, Ú Ù , (k) Ì
,
Ì
,Ì
,Ö
Ù Ù£ ,
¼, (l)
Ì
,Ì
,Ì
,Ö
,Ù
Ù£ ,
and (m) Ì
,Ì
,Ì
,Ö
,
Ù Ù£ ,
¼. (The reason we get these
eleven subcases is as follows: Ì has at least
Ò ¾ nodes in it because of Theorem 1. Hence,
Ì
. Based on whether Ì
or not,
or not, Ú Ù£ or not, and Ù Ù£ or
not we get the eleven subcases given above.)
In each case, we remove node Ù, and its incident edges, to split Ì into at most partial
trees Ì , Ì , and Ì½
Ì ,¼
  ¾.
We also designate as the link node of Ì ,
and Ù£ as the link node of Ì . We randomly
select a leaf
of Ì and designate it as the
link node of Ì , ¼
  ¾.

3.2 Assign Aspect Ratios
Let Ì be a partial tree of Ì , where for Case 1, Ì
is either Ì , Ì , Ì¬ , Ì½¼
Ì ¼, ¼
  ¿, or
Ì½
Ì ,¼
  ½, and for Case 2, Ì is either

(a)

(b)

Figure 5: Drawing Ì when: (a) Ì¬
, and (b) Ì¬
. For each case, we first show the structure of Ì for
that case, then its drawing when
½, and then its
drawing when
½. In Case (a), for simplicity, Û is
shown to be in the interior of  ¬ , but actually, it is either
same as , or if
½(
½), then is placed on the
bottom (right) boundary of  ¬ .

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

¯
¯

In Step Assign Aspect Ratios, we assign a desirable
aspect ratio
to each nonempty Ì as follows: Let
Ü Ò Ò.

¯
¯

½: If Ì is a large partial tree of Ì , then
Ü , otherwise (i.e., if Ì is a small partial
tree of Ì )
Ò  ¯ .
If
½: If Ì is a large partial tree of Ì , then
Ü , otherwise (i.e., if Ì is a small partial
tree of Ì )
Ò¯ .
If

Intuitively, this assignment strategy ensures that each
partial tree gets a desirable aspect ratio, and therefore,
the drawing of each partial tree constructed recursively
by Algorithm DrawGeneralTree will fit inside a rectangle with linear area and good aspect ratio.

3.3 Draw Partial Trees
First, we change the desirable aspect ratios assigned
to Ì and Ì¬ in some cases as follows: Suppose Ì and
Ì¬ get assigned desirable aspect ratios equal to Ñ and
Ô, respectively, where Ñ and Ô are some positive numbers. In Subcase (d) of Case 1, and if
½, then in
Subcases (a) and (c) of Case 1, and Subcases (a), (d),
(e), and (h) of Case 2, we change the value of the desirable aspect ratio of Ì to ½ Ñ. In Case 1, if
½,
we change the value of the desirable aspect ratio of Ì¬
to ½ Ô. We make these changes because, as explained
later in Section 3.4, in these cases, we need to rotate
the drawings of Ì and Ì¬ by ¼Æ during the Compose
Drawings step. Drawing Ì and Ì¬ with desirable aspect ratios ½ Ñ and ½ Ô, respectively, compensates for
this rotation, and ensures that the drawings of Ì and Ì¬
used to draw Ì have the desirable aspect ratios, Ñ and
Ô, respectively.
Next we draw recursively each nonempty partial tree
Ì with as its desirable aspect ratio, where the value
of
is the one computed in the previous step. The base
case for the recursion happens when Ì contains exactly
one node, in which case, the drawing of Ì is simply the
one consisting of exactly one node.

3.4 Compose Drawings
Let   denote the drawing of a partial tree Ì constructed in Step Draw Partial Trees. We now describe
the construction of a feasible drawing   of Ì from the
drawings of its partial trees in both Cases 1 and 2.
In Case 1, we first construct a feasible drawing  « of

the partial tree Ì« by composing  ½
 ,¼
  ½, as shown in Figure 4, then construct a feasible
drawing   of Ì by composing  « and  ¬ as shown in
Figure 5, and finally construct   by composing   ,   ,
  ,  ¼½
  ¿, as shown in Figure 2.
 ¼ , ¼
 « is constructed as follows (see Figure 4): If
½,
place  
  ¾  ½ , ½
  ½, one above the
other, in this order, separated by unit vertical distance,
such that the left boundaries of  
 ¾ are aligned,
and one unit to the right of the left boundary of  ½ . Place
Ù in the same vertical channel as ½ and in the same horizontal channel as  . If
½, place  ½  ¾
 ,
½
  ½ in a left-to-right order, separated by
unit horizontal distance, such that the top boundaries of
 ½   ¾
   ½ are aligned, and one unit below the top
boundary of   . Place Ù in the same vertical channel as
½ and in the same horizontal channel as  .
  is constructed as follows (see Figure 5):

¯

¯

if Ì¬
(see Figure 5(a)) then, if
½,
then place  ¬ one unit above  « such that the left
boundaries of  ¬ and  « are aligned; otherwise
(i.e., if
½), first rotate  ¬ by ¼Æ and then
flip it vertically, then place  ¬ one unit to the left
of  « such that the top boundaries of  ¬ and  «
are aligned. Draw edge ´Û Ý µ.
Otherwise (i.e., if Ì¬
Figure 5(b)).

),   is same as  « (see

  is constructed from   ,   ,   ,  ¼½
 ¼ , ¼
  ¿, as follows (see Figure 2): Let Ü be the root of
Ì . Note that Ü
if Ì¬
, and Ü Ù otherwise.

¯

¯

In Subcase (a), as shown in Figure 2(a), if
stack   ,  ¼
 ¼½ ,   ,   one above the
other, in this order, such that they are separated by
unit vertical distance from each other, and the left
boundaries of  ¼
 ¼½   are aligned with each
other and are placed at unit horizontal distance to
the right of the left boundaries of   and   . Place
node in the same vertical channel as Ö and and
in the same horizontal channel as . If
½,
then first rotate   by ¼Æ , and then flip it vertically. Then, place   ,   ,  ¼½
 ¼ ,   from
left-to-right in this order, separated by unit horizontal distances, such that the top boundaries of
  ,  ¼½
 ¼ , are aligned, and are at unit vertical distance below the top boundaries of   and
  . Then, move   down until Ù£ becomes the
lowest node of  . Place node in the same vertical channel as and in the same horizontal channel as Ö and Ü. Draw edges ´ µ, ´ Üµ, ´ µ,
´ ½µ
´ µ.
Due to lack of space, the arrangements of the other
subcases for Case 1 are not included.

½,

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

 ½

In Case 2, we construct
  ,   (see Figure 3).

¯

¯

 

by composing

 

,

In Subcase (a), as shown in Figure 4(a), if
½,
stack   , Ù  
 ½ ,   one above the other, in
this order, such that they are separated by unit vertical distance from each other, and the left boundaries of  
 ½ are aligned with each other and
are placed at unit horizontal distance to the right
of the left boundaries of   . Place node Ù in the
same vertical channel as Ö. If
½, then first
rotate   by ¼Æ , and then flip it vertically. Then,
place   ,   ,  ½
  from left-to-right in this
order, separated by unit horizontal distances, such
that the top boundaries of   ,  ½
   ½ , are
aligned, and are at unit vertical distance below the
top boundaries of   . Then, move   down until Ù£ becomes the lowest node of  . Place node Ù
in the same vertical channel as Ú and in the same
horizontal channel as Ö and  . Draw edges ´ Ùµ,
´Ù Úµ, ´Ù ½µ
´Ù  µ.
Due to lack of space, the arrangements of the other
subcases for Case 2 are not included.

3.5 Proof of Correctness

Lemma 1 (Planarity) Given an Ò-node degree- tree
Ç´ÒÆ µ is a positive integer and ¼ Æ ½,
with a link node Ù£ , Algorithm DrawGeneralTree will
construct a feasible drawing   of Ì .

Ì , where

¾

Proof: Omitted due to lack of space.

Lemma 2 (Time) Given an Ò-node degree- tree Ì ,
where
Ç´ÒÆ µ is a positive integer and ¼ Æ ½,
with a link node Ù£ , Algorithm DrawGeneralTree will
construct a drawing   of Ì in Ç´Ò ÐÓ Òµ time.

Proof: Omitted due to lack of space.
¾
In Lemma 4 given below, we prove that the algorithm
will draw a degree- tree, where
Ç´ÒÆ µ is a positive
integer and ¼ Æ ½, in Ç´Òµ area.

Lemma 3 Let Ê be a rectangle with area and aspect
ratio . Let Ï and À be
Ôthe width and height, respectively, of Ê. Then, Ï
and À
.

Ô

Proof: Omitted due to lack of space.

¾

Lemma 4 (Area) Let Ì be an Ò-node degree- tree,
where
Ç´ÒÆ µ is a positive integer and ¼ Æ ½,
with a link node Ù£ . Let ¯ and be two numbers such
that Æ ´½   Æ µ ¯ ½, and is in the range Ò ¯ Ò¯ ℄.
Given Ì , ¯, and as input, Algorithm DrawGeneralTree will construct a drawing   of Ì that can fit inside
a rectangle Ê with Ç´Òµ area and aspect ratio .
Proof: Let ´Òµ be the area of Ê. We will prove, using
induction over Ò, that ´Òµ Ç´Òµ. More specifically,
we will prove that ´Òµ ½ Ò   ¾ Ò¬ for all Ò Ò¼ ,

where Ò¼

½ ¾ ¬ are some positive constants and ¬

½.

½ (the
We now give the proof for the case when
proof for the case
½ is symmetrical). Algorithm
DrawGeneralTree will split Ì into at most ¾   ½ partial
trees. Let Ì be a non-empty partial tree of Ì , where
Ì is one of Ì Ì Ì¬ Ì½¼
Ì ¼, ¼
  ¿,
Ì½
Ì,¼
  ½, in Case 1, and is one of
Ì Ì Ì½
Ì,¼
  ¾, in Case 2. Let Ò
be the number of nodes in Ì , and let Ü
Ò Ò. Let
È
½ Ò   ¾ Ò¬ Ü½ ¬ . From Theorem 1, it follows
that Ò
Ò ¾, and hence, Ü
½ ¾. Hence, È
½ Ò   ¾ Ò¬ ´½ ¾µ½ ¬ ½ Ò   ¾ Ò¬ ¾½ ¬ . Let È ¼
½ Ò   ¾ Ò¬ ¾½ ¬ . Thus, È È ¼ .
From the inductive hypothesis, Algorithm DrawGeneralTree will construct a drawing   of Ì that can fit inside a rectangle Ê with aspect ratio
and area ´Ò µ,
where
is as defined in Section 3.2, and ´Ò µ
Ò Ò, ´Ò µ ½ Ò  
½ Ò   ¾ Ò¬ . Since Ü
¬
¬
 Ò  Ü Ò    ´Ü Òµ Ü ´ Ò    Ò¬ Ü½ ¬ µ
¾

½

¾

½

Ô
Ô
Ô
Ô
Õ
Ô
Ô

Õ
Ô

Ô

Ô

Ô

Ô

Ô
Ô

Ô

Ô

In Step Compose Drawings, we use at most two additional horizontal channels and at most one additional
vertical channels while combining the drawings of the
partial trees to construct a drawing   of Ì . Hence,   can
fit inside a rectangle Ê¼ with width Ï ¼ and height À ¼ ,
respectively, where,

À¼

Ñ Ü

Ì × Ô ÖØ Ð ØÖ Ó Ì

Ï¼

À ·¾

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

ÔÈ ¼

·¾

Ì × Ð Ö

·

Ô ÖØ Ð ØÖ

·

Ô

Ï
Ï ·½

Ì × ×Ñ ÐÐ Ô ÖØ Ð ØÖ

Ì × Ð Ö

Ô ÖØ Ð ØÖ

Ü

Ô

Õ

Õ

Ì × ×Ñ ÐÐ Ô ÖØ Ð ØÖ

  ½µ È ¼ Ò ¯

È ¼ · ´¾

È

¾

È¼
È ¼ Ò¾ ¯
¯

´½· µ

¯

´½· µ

·½

·½

(because Ì × Ð Ö Ô ÖØ Ð ØÖ Ü
½, and Ì is
split into at most ¾   ½ partial trees)
Ê¼ does not have aspect ratio equal to , but it is
contained within a rectangle Ê with aspect ratio , area
´Òµ, width Ï , and height À , where

¾

Ü È Ü È ¼.
Let Ï and À be the width and height, respectively,
of Ê . We now compute the values of Ï and À in
terms of , È ¼ , Ü , Ò, and ¯. We have two cases:
¯ Ì is a small partial tree of Ì : Then,
Ò
´Ò µ½ ´½·¯µ , and also, as explained
in Section 3.2,
½ Ò¯ . From Lemma 3,
Ï
´Ò µ
´½ Ò¯ µ´Ü È ¼ µ
´½ Ò¯ µ´Ò ÒµÈ ¼
Ò½ ¯È ¼ Ò. Since Ò
´Ò µ´½ ¯µ ´½·¯µ È ¼ Ò
´Ò µ½ ´½·¯µ , Ï
´½
 
¯
µ
´½·
¯
µ
¼
´½
µÈ Ò¾¯ ´½·¯µ
¼
¾
¯
´½·
¯
µ
È Ò
since
½.
´Ò µ
From Lemma 3, À
¯
¼
Ü È ´½ Ò µ
´Ò ÒµÈ ¼ Ò¯
Ò½·¯ È ¼ Ò. Since Ò
´Ò µ½ ´½·¯µ , À
´Ò µ´½·¯µ ´½·¯µ È ¼ Ò
´Ò µ È ¼ Ò
È¼ .
¯ Ì is a large partial tree of Ì : Then, as explained
in Section 3.2, Ô
Ü . From Ô
Lemma 3, Ï
´Ò µ
Ü Ü È¼ Ü
È ¼.
From Lemma 3, À
´Ò µ
¼
¼
Ü È ´Ü µ
È .

Ô

and

Ô

Ï
and

À

ÔÈ ¼

Õ

  ½µ È ¼ Ò ¯

È ¼ · ´¾

·¾·´´¾

  ½µ

¯

¾

·½·¾

´½· µ

Õ

µ È ¼ Ò ¾¯

¯

´½· µ

·½

Ô
ÏÀ
´ È¼ ·
¾ ´½·¯µ · ½ · ¾ µ´
È¼
·
´¾  
¼
¾
¯
´½·
¯
µ
¾ · ´´¾   ½µ Ôµ È Ò
Ô· ½¼ µ
Ò¾¯ ´½·¯µ ·
È · ´¾  
È ¼ · ¾´¾   ½µÈ ¼
½µ¾ È ¼ ´ Ò¾¯ ´½·¯µµ · ´¾   ½µ È ¼ Ò¾¯ ´½·¯µ ·
· ·½ ·¾ È ¼ ·¾´¾   ½µ È ¼ Ò¾¯ ´½·¯µ .

Ô ´Òµ
½µ È ¼ Ò ¯

Hence,

Ô

Ô

Ô
Ô

Ô

Ò¯, we have that

Since, ½

Ô

È ¼ · ¿ È ¼ Ò¾¯ ´½·¯µ
Ô
· Ò¯È ¼ ·  ¾ È ¼ Ò¾¯ ´½·¯µ
È ¼ Ò ¾¯
· È ¼ Ò¾¯ ´½·¯µ · 

´Òµ

Õ

Ô

¯

´½· µ

· Ò¯ ·  · ½¼ È ¼
where ¿
Since È ¼

´Òµ



½¼ are some constants.
½ Ò,

Ô

È ¼ · ¿ ½ Ò Ò¾¯ ´½·¯µ
Ô
·  Ò ¯  ½ Ò ·  ¾ ½ Ò Ò ¾ ¯

Õ

¯

´½· µ

½ Ò Ò¾¯ ´½·¯µ
· ½ Ò Ò¾¯ ´½·¯µ · 
Ô
· Ò¯ ·  · ½¼ ½ Ò½ ¾
Ô
È ¼ · ¿ ½ Ò½ ´½·¯µ ·  ½ Ò´½·¯µ ¾
· ¾ ½ Ò´½ ¯µ ´½·¯µ ·  ½ Ò´½ ¯µ ´½·¯µ

Ô
· ½ Ò´½ ¯µ ´¾´½·¯µµ ·  Ò¯
Ô
· · ½¼ ½ Ò½ ¾
È ¼ · ½½ Ò´½·¯µ ¾ · ½¾ Ò½ ´½·¯µ
·½¿ ¾ Ò´½ ¯µ ´½·¯µ

À , Ï ¼ , À ¼ , Ï , and À as in the case
sically reflects the fact that the cases
are symmetrical to each other.)

where ½½ , ½¾ , and ½¿ are large enough constants
(because, since ¼ Æ ´½   Æ µ ¯ ½, ´½   ¯µ ´¾´½ ·
¯µµ ´½   ¯µ ´½ · ¯µ ½ ´½ · ¯µ, ¯ ´½ · ¯µ ¾, and
½ ¾ ´½ · ¯µ ¾).
Ç´ÒÆ µ, for a large enough constant
Because
Ò¼ , there exist constants ½ and ½ such that for all
Ò Ò¼ , ´Òµ È ¼ · ½½ Ò´½·¯µ ¾ · ½ ÒÆ·½ ´½·¯µ ·
½ Ò¾Æ·´½ ¯µ ´½·¯µ .
È ¼ ½ Ò   ¾Ò¬ ¾½ ¬ ½ Ò   ¾Ò¬ ´½· ½ µ, where
½ is a constant such that ½ · ½ ¾½ ¬ .
´Òµ
½ Ò   ¾ Ò¬ ´½ · ½ µ ·
Hence,
´½·¯µ ¾
Æ
·½ ´½·¯µ
½½ Ò
· ½ Ò
· ½ Ò¾Æ·´½ ¯µ ´½·¯µ
¬
¬
´½·¯µ ¾
½ Ò   ¾ Ò   ´½ Ò   ½½ Ò
  ½ ÒÆ·½ ´½·¯µ  
¾Æ ·´½ ¯µ ´½·¯µ
 Ò
µ. Thus, for a large enough constant
½

Ò¼ , and large enough ¬ , where ½ ¬ Ñ Ü ´½ ·
¯µ ¾ Æ · ½ ´½ · ¯µ ¾Æ · ´½   ¯µ ´½ · ¯µ , for all
Ò
Ò¼ , ½ Ò¬   ½½ Ò´½·¯µ ¾   ½ ÒÆ·½ ´½·¯µ  
¾Æ ·´½ ¯µ ´½·¯µ
½ Ò
¼, and hence ´Òµ ½ Ò   ¾Ò¬ .
Note that because ¯
Æ ´½   Æµ, Æ · ½ ´½ · ¯µ ½
and ¾Æ · ´½   ¯µ ´½ · ¯µ
½, and because ¯ ½,
´½ · ¯µ ¾ ½.
½ uses the same reasoning
The proof for the case
as for the case
½. With Ì , Ê , Ï , À , Ê¼ , Ï ¼ ,
À ¼ , Ê, Ï , and À defined as above, and as defined
in Section 3.2, we get the following values for Ï , À ,
Ï ¼ , À ¼ , Ï , À , and ´Òµ:
Ï
À
Ï¼
À¼
Ï
À
´Òµ

Ô

Õ È¼ ¼ ¯
È Ò
Ô
Ü È¼
¾

Ô

ÔÈÈ¼

¯

Ì × ×Ñ ÐÐ Ô ÖØ Ð ØÖ
Ì × Ð Ö Ô ÖØ Ð ØÖ

´½· µ

¼·¾

Õ

  ½µ È ¼ Ò ¯ ¯
Õ
Ô ¼
È · ¾ · ´¾   ½µ È ¼ Ò ¯
ÔÈ ¼ · ´¾   ½µÕÈ ¼ Ò ¯ ¯
· ´¾

¾

´½· µ
¾

¾

·½ · ¾
È ¼ · ½½ Ò´½·¯µ ¾ · ½ ÒÆ·½
·½ Ò¾Æ·´½ ¯µ ´½·¯µ

·½
¯

´½· µ

·

´½· µ

¯

´½· µ

where ½½ , ½ , and ½ are the same constants as in the
case
½. Therefore, ´Òµ ½ Ò   ¾ Ò¬ for
½
too. (Notice that in the values that we get above for
Ï , À , Ï ¼ , À ¼ , Ï , and À , if we replace by ½ ,
exchange Ï with À , exchange Ï ¼ with À ¼ , and exchange Ï with À , we will get the same values for Ï ,

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

½. This ba½ and
½

¾

Theorem 2 (Main Theorem) Let Ì be an Ò-node
degree- tree, where
Ç´ÒÆ µ is a positive integer
and ¼
Æ ½ ¾ is a constant. Given any number
, where Ò «
Ò« , for some constant «, where
¼ « ½, we can construct in Ç´Ò ÐÓ Òµ time, a planar straight-line grid drawing of Ì with Ç´Òµ area, and
aspect ratio .
Ò¯
Proof: Let ¯ be a constant such that Ò ¯

and Æ ´½   Æ µ ¯ ½. Designate any leaf of Ì as its
link node. Construct a drawing   of Ì in Ê by calling
Algorithm DrawGeneralTree with Ì , and ¯ as input.
From Lemmas 1, 2, and 4,   will be a planar straight-line
grid drawing of Ì contained entirely within a rectangle
with Ç´Òµ area, and aspect ratio .
¾
Corollary 1 Let Ì be an Ò-node degree- tree, where
Ç´ÒÆ µ is a positive integer and ¼ Æ ½ ¾ is a
constant. We can construct in Ç´Ò ÐÓ Òµ time, a planar
straight-line grid drawing of Ì with optimal (equal to
Ç´Òµ) area, and optimal aspect ratio (equal to 1).
Proof: Immediate from Theorem 2, with

½.

¾

4 Experimental Results
We implemented the algorithm in C++. The implementation consists of about 5,000 lines of code. We
have also experimentally evaluated the algorithm on
randomly-generated general trees, consisting of up to
50,000 nodes.
Each randomly-generated general tree ÌÒ with
Ò nodes was generated by generating a sequence
Ì¼ ,Ì½,...,ÌÒ of general trees, where Ì¼ is the empty tree,
and Ì was generated from Ì  ½ by inserting a new leaf
Ú into it. To prevent a subtree from having a greater
degree than Ò½ ¾ , each Ì has a maximum degree Ñ Ü ,
where Ñ Ü is any integer value between ½ Ò½ ¾ ℄. The
position where Ú is inserted in Ì   ½ is determined by
traversing a path Ô = Ù¼ Ù½ ...ÙÑ of Ì  ½ , where Ù¼ is
the root of Ì  ½ , and ÙÑ has at most Ñ Ü   ½ children. More precisely, we start at the root Ù¼ , and in the
general step, assuming that we have already traversed
the subpath Ù¼ Ù½ ...Ù  ½ , we randomly select a number Ö
such that ¼ Ö
Ö ´Ù  ½ µ. If a child  existed at
position Ö in Ù  ½ , then we set Ù = , and move to Ù ,
otherwise we make Ú the ÖØ child of Ù  ½ , set the Ñ Ü
of Ú to a randomly-generated integer between ½ Ò½ ¾ ℄,
and stop.
Recall that the algorithm takes three values as input:
a general tree Ì with Ò nodes, a number ¯, where ¼
¯ ½, and a number in the range Ò ¯ Ò¯ ℄.

c = area/n
11
c = area/n
12
11
10
9
8
7
6
5
4
3
2
1
0100

10
9
8
7
6
5
4
3
2
16000
12000

500010000

8000
20000
n

30000

1
0 100 5000 10000

20000

30000

40000

50000

n

A

4000
40000

0
50000

(a)

(b)

Figure 6: Performance of the algorithm, as given by the value of , for drawing a randomly-generated general tree Ì
with different values of and ¯, where 
Ö Ó Ö Û Ò ÒÙÑ Ö Ó ÒÓ × Ò Ò Ì : (a) ¯ ¼ . Figure (b)
contains the projections on the
-plane of the plot shown in (a), and shows for each ¯, the ranges of the values of 
for different values of for each Ò. Due to lack of space, the charts for ¯
¼ ¼ ¼ ¾ ¼ ½ are not shown.
The performance criteria we have used to evaluate the
algorithm is the ratio  of the area of the drawing constructed of a tree Ì , and the number of nodes in Ì .

To evaluate the algorithm, we varied Ò up to 50,000.
For each Ò, we used five different values for ¯, namely,
0.1, 0.25, 0.5, 0.75, and 0.9. For each (Ò,¯) pair, we
used 20 different values of A uniformly distributed in
the range ½ Ò¯ ℄. The performance of the algorithm is
symmetrical for
½ and
½. Hence, we varied
only from 1 through Ò¯ , not from Ò ¯ through
Ò¯ (the only difference between
½ and
½ is
that for
½ the algorithm constructs drawings with
longer height than width, whereas for
½, it constructs drawing with longer width than height). Hence,
in the rest of this section, we will assume that
½.
For each tree, and for each triplet (Ò, , ¯), we generated five trees. We constructed a drawing of each tree
using the algorithm, and computed the value of . Next,
we averaged the values of  obtained for the five trees to
get a single value for each triplet (Ò, , ¯) for each tree.
Our experiments show that the value of  is generally
small, and is at the most 19, but generally is between 7
and 10. Figure 6 shows how  varies with Ò, , and ¯
= 0.9. Due to lack of space, the results for all Ò, , and
¯ = 0.75,0.5,0.25,0.1 are not included. We discovered
that  is constant for all Ò when ¯ is 0.1 and for Ò equal
to 30,000 or 40,000 when ¯ is 0.1. We also discovered
that  is very close to constant for all Ò and ¯ = 0.25, 
increases with for all Ò and ¯ = 0.5,  starts at a low
point for the first distribution of , then increases to a
high point for the second distribution, then levels off for
the rest of the distribution for all Ò and ¯ = 0.75, and 
decreases for the first values of , then levels off for a
given Ò when ¯ = 0.9.

Consequently, for a given Ò and ¯ equal to 0.9, 0.75,
0.5, or 0.25, the range for  over all the values of A is
small. For example, for Ò = 10,000 and ¯ = 0.9, the range
for  is [6.1, 8.8]. Also, for every Ò and ¯ equal to 0.1,

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

the values of  are constant.
Finally, we would like to comment that the aspect ratio of the drawing constructed is, in general, different
from the input aspect ratio . We computed the ratio
Ö of the aspect ratio of the drawing constructed by the
algorithm and input aspect ratio . We discovered that
Ö is close to 1 for A=1, and generally decreases as we
increase . However, we also discovered that for a large
range of values for , Ö is far from 1. Even in applications that require the drawing to have exactly the same
aspect ratio as , we can obtain a drawing with small
area and aspect ratio exactly equal to by adding ”white
space” to the drawing constructed by our drawing algorithm.

References
[1] T. Chan, M. Goodrich, S. Rao Kosaraju, and
R. Tamassia. Optimizing area and aspect ratio in
straight-line orthogonal tree drawings. Comput.
Geom. Theory Appl., 23:153–162, 2002.
[2] A. Garg and A. Rusu. Straight-line drawings of
general trees with linear area and arbitrary aspect
ratio. In Proceedings 2003 International Conference on Computational Science And Its Applications (ICCSA 2003), volume 2669, pages 876–885.
Springer, 2003.
[3] A. Garg and A. Rusu. Straight-line drawings of binary trees with linear area and arbitrary aspect ratio. Journal of Graph Algorithms and Applications
(JGAA), 8(2):135–160, 2004.
[4] L. Valiant. Universality considerations in VLSI
circuits. IEEE Trans. Comput., C-30(2):135–140,
1981.

