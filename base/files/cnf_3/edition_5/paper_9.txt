Spreadsheet-based Framework
for Interactive 3D Visualization of Web Resources
Masahiko ITOH1 , Jun FUJIMA1 , Makoto OHIGASHI2 and Yuzuru TANAKA1
1

Meme Media Laboratory
Hokkaido University, Japan
{imash,fujima,tanaka}@meme.hokudai.ac.jp
2

Interfaculty Initiative in Information Studies
University of Tokyo, Japan
ohigashi@iii.u-tokyo.ac.jp

Abstract
We propose a spreadsheet-based visualization framework for end-users to generate and modify multiple 3D visualizations of data-sets from various Web resources. In
this paper, first, we provide a 3D component-based access
mechanism to Web resources. It allows users to access various Web resources using only 3D visual components interactively. Second, we provide an interactive 3D visualization
mechanism. It enables users to construct multiple 3D visualizations of data-sets from various Web resources just by
combining 3D visual components. Third, we provide 2D
components for communicating between a spreadsheet and
3D components. Users can export necessary functions of
3D components and define synchronization between these
components and cells on a spreadsheet. A spreadsheet environment allows us to define relationships among cells, and
copy these relationships through a copy and paste manipulation. By using these mechanisms, users can create multiple visualizations in parallel in order to compare different
visualization results simultaneously for different visualization parameters just through a user’s direct manipulation.

1

Introduction

There are lots of data resources such as HTML documents, Web applications, and Web services on the Web. For
accessing Web services and constructing a new application
using Web services, users must write a script program in
a programming language such as Perl or JavaScript to perform the required processing. However, it is difficult for

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

non-programmers to use such script languages. There are
some systems for end-users to access Web services through
a GUI without programming in a 2D (two dimensional) environment [1, 16].
In some fields of data from Web resources, a visualization in a 3D (three dimensional) virtual environment is
more helpful for users than a visualization in a 2D environment. One example is a data visualization that includes 3D
structures such as the 3D representation of a protein or geographic data. It is difficult for users to understand the raw
data, which is normally a plain text specifying the position
of each atom or the height of each location. Visualizing
such data in a 3D environment allows us to understand how
the data should be interpreted. Another example is a data
visualization that has a lot of attributes such as product information from Amazon Web Service. A 3D visualization
can use the depth of a 3D space to arrange data sets in order
to differentiate them using multiple aspects, and to represent
the data more expressively than could be done in a 2D visualization. Therefore, it is desirable to provide 3D interactive
systems through which users can create 3D applications that
access arbitrary Web services.
The purpose of visualization is to extract insight from
data through interaction with the data’s features [11]. It
requires comparison in each process of visualization. The
process model for visualization consists of cycles of the following elements: data transformation, visual mapping and
view transformation [3]. Users can generate different visualizations by changing parameters in each step. Multiple visualizations can be obtained through changing the data being filtered and selected at each data transformation step; by
changing the applied visual representation and the arrangement rules at each visual mapping step; or by changing the

display projection at each view transformation step.
The spreadsheet paradigm has three characteristics [8].
First one is the tabular layout that lets users view collections of visualization simultaneously. Second one is the
set of operators that allow users to generate or to modify
cell contents. Third one is to keep the dependency between
cells and to automatically update cells. These characteristics have benefits for generating multiple visualizations and
for comparing them visually. There are many systems using the spreadsheet paradigm [7, 10, 13]. They provide their
special spreadsheet environments. Therefore, it is difficult
for users to add a new function freely and/or to customize
its functions.
In this paper, we propose a spreadsheet-based visualization framework for end-users to generate and to modify
multiple 3D visualizations of data-sets from various Web resources. Our approach enables users to use Web resources
simply by connecting interactive components in order to
construct 3D visualization. It also enables users to define
visual representations and arrangement rules for simultaneously constructing multiple 3D visualizations with various
representations. Our approach enables users to embed 3D
visualizations into spreadsheet cells. It allows users to export only necessary functions from 3D visualization mechanisms in order to input and to output various parameter values to and from spreadsheet cells. Users can arrange multiple visualizations on the spreadsheet, and connect multiple Web services to them by defining dependencies among
cells.

2

Related Work

Many researchers have studied visualization using the
spreadsheet paradigm. Excel Visualizer [2] provides a 3D
view of a cell range, in which numerical data can be displayed using techniques such as 3D-bars. The developers
claim that such visualizations help users to understand the
relationships among data values. However, the system does
not allow users to modify the visualization schema, and
does not provide a unified access method for Web resources.
Levoy [13] shows that a spreadsheet can be used for an
image processing pipeline. This system shows application
possibilities of the spreadsheet paradigm to other domains.
Chi [7, 8], Hasler [6] and Jankun-Kelly [10] utilize tabular displays, cell operators, and management of cell dependencies of the spreadsheet to show multiple visualization
results using various parameter values. They use special
spreadsheet environments for their purpose. Users have difficulty in modifying and/or adding new functions such as
a function for accessing Web services. They do not have
an interactive function for connecting other components or
tools in order to customize their systems dynamically.
A1 [12] is a spreadsheet-based programming environ-

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

ment for system administrators. A1 permits cells to contain
arbitrary Java objects and allows users to call methods using
the formula language. Although A1 is a powerful environment, it seems difficult for non-programmers that have no
knowledge of the Java programming paradigm and the class
library.

3 Approach
Our goal is to provide a framework for constructing multiple 3D visualizations by combining multiple Web resouces
through a user’s direct manipulation in order to compare
and/or to explore various data. For realizing this framework, first, we require a unified method for accessing Web
resources without programming. Second, we need an interactive 3D visualization mechanism for users to define a visualization schema. Third, we need an environment to support the input of various parameters, to generate multiple
visualizations and to compare visualizations, all just using
direct manipulation. In this section, we introduce our approach for utilizing these constituents and integrating them.

3.1 Web resources
In this paper, we treat REST-style Web services and
SOAP-style Web services as Web resources. A SOAP-style
Web service is a standardized way of integrating Web-based
applications using XML, SOAP and WSDL over an Internet
protocol backbone. A REST-style Web service has a simple
interface that uses XML over HTTP without an additional
messaging layer such as SOAP. Their architecture is based
on the REST (Representational State Transfer) architectural
style [5]. It is a Resource-oriented service. Every resource
is uniquely addressable using a URI. To get data from the
resources, the user inputs a request URI and gets an XML
result. The request URI is created by combination of the
base URI and request parameters.
In this paper, we use a visual data access mechanism. It
allows us to access and to combine various data resources
through the direct manipulation of 3D visual components
without programming. This mechanism is an extension of
our preceding research [9]. Our approach provides a 3D
proxy component for accessing various Web resources using only a URI. Users only have to use the 3D proxy component for REST-style Web services to access both REST-style
and SOAP-style Web services and local databases.
For this purpose, we provide four functions. First, to
access REST-style Web services through the direct manipulation of 3D visual components, we provide a 3D proxy
component for REST-style Web services. The proxy component hides the communication protocol detail from users.
Second, to access SOAP-style Web services, we provide a
REST-style wrapping service for SOAP-style Web services.

By using this service, we can access SOAP-style Web services using only a URI. We do not need to think about the
SOAP protocol. Third, to access local databases, we provide a REST-style wrapping service for local databases. By
using this service, we can access databases using only a
URI. The combination of these functions provides a unified
access method for various data resources. Fourth, to use a
mixture of data resources, we provide REST-style services
for operations, such as join, of data obtained from various
data resources. We also provide REST-style services for
composition of two data resources. By using these services,
we can define connected resources just by connecting 3D
proxy components for REST-style Web services.
One kind of connection enabled by our approach is between simulation tools and resources representing their inputs and results. Thus a user could supply data from a visualization as a simulation input, or use simulation results to
access and to visualize related data.

3.2 3D Visualization
We use Virtual Reification [14] to represent a large set
of records with fully interactive and reusable objects. Recently, many papers have been published in information visualization [3, 4]. Most of them can deal with specific data
domains and provide some visualization schemes depending on those domains. They also provide only predefined interactions with the visualized data to acquire more detailed
or related information, or to navigate to other views. Our
approach provides a visualization scheme as a customizable
structure of a set of interactive components. Each record is
provided as visual interactive objects which can be directly
manipulated and reused in different application tools or environments. It enables us to design various visualizations
that reflect changes in record values, user’s viewpoint, system time and so on. We can also reuse the visualized records
in different applications or environments, or use direct manipulation to introduce suitably wrapped tools that work on
individual records or the visualization environment.

3.3 Spreadsheet
The spreadsheet is one of the most popular applications
for office workers. Spreadsheets provide an attractive environment for statistical analyzing data and for end-user
programming. Spreadsheets have multiple fields located
in grid-like fashion, called cells. Users can input not only
string or numerical values but also formulas to define data
linkages among cells. Because cells are labeled using letters and numbers, users can refer the values of cells using
cell references, such as A1 or B5:C8, to reuse the values
of reference cells from other cells. In addition, users can
utilize many kinds of mathematical functions such as SUM

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

or LOOKUP in the formulas.
Because cells are arranged regularly on the sheet, user
can easily create a tabular layout of data. The tabular structure supports users in navigating to related data values along
a row or column, or to compare them. Moreover, users can
easily duplicate values of cells as well as input-output relationships among cells using copy-and-paste manipulations.
In this paper, we use a spreadsheet as an environment for
visualizing data obtained from the Web. To use a 3D visualization on a spreadsheet, we provide a mechanism for using
the visualization environment as a 2D component. This allows users to embed visualization results, which consist of
3D visual components, in a cell. In addition, we provide a
mechanism for synchronizing data on the cells with the visualization parameter values of the 3D visual components.
By providing these mechanisms, users can compare multiple visualization results along a row or column in a sheet.

4

Architecture

Figure 1 shows the architecture of the proposed framework. To realize our approach described in Section 3, the
following functions are needed. The first (i) is a function for
constructing a 3D visualization of data-set obtained from
REST-style web services. It consists of two elements: (a) a
proxy function for accessing Web services and (b) 3D visualization of records. The second (ii) is a function for embedding a 3D visualization environment in a spreadsheet cell.
The third (iii) is a function for synchronizing parameters of
visualization components with values of cells.
Our framework utilizes the 2D and 3D meme media
system, IntelligentPad and IntelligentBox [17, 18, 15] as
its platform. In IntelligentPad, information and processing components are represented as 2D visual objects called
pads. Each pad holds its state data in named slots1 , which
also form its interface for functional connection to other
pads. By pasting pads on another pad and specifying a connection between slots, users may easily define both a compound document layout and functional linkage among these
pads. The IntelligentBox system represents objects as interactive 3D visual components, called boxes. Each box also
has slots. We can define compound boxes by specifying
parent-child relationships and connecting slots of boxes. In
the IntelligentPad/Box environment, each compound object
has a tree structure because each pad or box has only one
parent.
We provide the following 2D/3D component of IntelligentPad/Box for implementing each function described
in Figure 1: RESTProxyBox, VisualizerBox, BoxPad and
CellSyncPad.
Moreover, we utilize Microsoft Excel as our spreadsheet
platform. Excel is a legacy spreadsheet environment, so
1 let

us denote a slot name as #slot name.

Figure 1. Architecture overview: (i) 3D visualization of retrieved results from RESTstyle web services, (ii) embedding a 3D visualization environment in a spreadsheet cell,
(iii) synchronizing parameters of visualization
components with values of cells

there are lots of Excel users who can write formulas and
create Excel documents. By using Excel as the spreadsheet
environment, users can create Excel documents with embedded visualizations using Web services, and share such
documents with other Excel users.

4.1 3D Visualization of Web resources
4.1.1

Figure 2. An architecture and screen shot of
RESTProxyBox

connect suitable boxes that support input of request parameters. From the value of the #BaseURI slot and the parameter
slots, a request URI is created in the #URI slot.
When a user accesses the #Invoke slot, RESTProxyBox
sends the request URI and receives an XML. The slot #ExtractionPath holds an XPath format description to extract
result records. RESTProxyBox treats the set of child elements of a node specified in the #ExtractionPath slot as
one record. RESTProxyBox treats each name of the elements and the attributes as a record attribute. The extracted
records are placed in the #Result slot.

Proxy Function for Accessing Web services

All functions for accessing REST-style Web services are
provided by RESTProxyBox (see Figure 1 (i-a)). Users
have only to manipulate 3D interactive components and create composite objects in order to create mechanisms for accessing Web services. Figure 2 shows the architecture of
RESTProxyBox based on the 3D componentware architecture of IntelligentBox.
RESTProxyBox provides the following slots: #Service,
#BaseURI, #URI, #ExtractionPath, #Invoke, and #Result,
and also provides slots for request parameters. The slot
#Service holds the name of a REST-style Web service. The
request URI consists of a base URI and request parameters.
Request parameters can be treated as parameter slots. We
need to add the necessary number of slots for the request
parameters depending on the specification of the service.
In Figure 2, we add two slots: #city and #day. We can then

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

Figure 3. Wrapper services for SOAP-style
Web services and local databases

To access SOAP-style Web services through manipulating RESTProxyBoxes, we provide a REST-style Web service for wrapping SOAP-style Web services (Figure 3 (a)).

The wrapping service for SOAP-style Web services requires
a URI of a WSDL file, a selected operation name and parameters for the selected operation. We also provide a
REST-style Web service for wrapping databases (Figure 3
(b)). This service enables users to access local databases
by using a URI. The service requires SQL and optional request parameters. Moreover, we provide REST-style Web
services for the following operations: join, union, intersection, set-difference, cross-product, projection, renaming
and selection. Furthermore, we provide REST-style Web
services for resource composition, that uses the values of
result records from one data resource for the parameters of
another resource. The resource connection is defined by
connecting a RESTProxyBox for each resource. The definition of connected resources is also defined by a URI that
includes the URIs of the operand resources.

attribute slots to hold attribute values; these slots are created automatically by the RecordBox when a record is put
into its #Record slot. Each added slot name is the same as
the attribute name. We use the XPath format description to
describe the attribute names of each extracted record such
as #Tracks@count and #Tracks/Track[2]. We can connect
arbitrary boxes to these #attribute slots and create record
representation templates.
GeometricalManagementBox geometrically arranges a
set of records in a 3D virtual space by associating values
in record attributes with x, y, z coordinates. To assign one
attribute to one axis, we use a CoordinateAxisBox for each
axis. CoordinateAxisBox has an #attribute slot. We can
specify which attribute is assigned to each axis by inputting
the attribute name.

4.2 Embedding a 3D Environment into a Cell
4.1.2

3D Visualization of the Retrieved Results

For visualizing retrieved results, we extend the Database
Record Reification Framework [14]. VisualizerBox is a
composite box for reifying retrieved results (see Figure 1
(i-b)). Each record is provided as a composition of visual
interactive objects which can be directly manipulated and
reused in different application tools.

Figure 4. The framework architecture for the
virtual reification of retrieved records.

DataSetManagementBox (DSMBox) virtually reifies a
set of data as interactive components. DSMBox stores a set
of template box(es) to visualize the set of data. A template
for a record representation consists of a RecordBox and a
set of components for representing attribute values (Figure
4(b)). Users can register multiple templates created or modified by them or other users. Each registered template has
an ID, and can be specified by ID in the #Template id slot.
RecordBox has a #Record slot and the necessary number of

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

Our framework also provides a mechanism to represent
multiple different 3D visualizations on a spreadsheet. The
BoxPad component works as a 2D media component that
displays a 3D visualization environment on its surface (see
Figure 1 (ii)). BoxPad provides two types of lists of slots: (i)
environmental parameter slots and (ii) functional parameter
slots.
The environmental parameter slots include #EyePosition, #EyeCenter, #LightPosition and #BackgroundColor.
They also include #Rotate x, #Rotate y, #Translate x,
#Translate y, and #Translate z, which enable users to
change their viewing angle and position. They enable us to
control the view rendering of a visualization environment
through the manipulation of connected pads.
The functional parameter slots delegate functions of
boxes withing the 3D environment. BoxPad allows us to
export just the desired slots of arbitrary boxes. The exported slots can be used in IntelligentPad environments.
To avoid name conflicts among exported slots, we adopt a
path expression defined by the name of the specified slot
and the object’s position in the tree structure of compound
components. For example, the path expression /RESTProxyBox[1]/TextBox[2]/@Text specifies the #Text slot of
TextBox, which is the second child TextBox of the RESTProxyBox.
Since all slots of BoxPad work as interfaces for communicating with other Pads, we can define functional linkages
between arbitrary components in the different 2D/3D environments.
As a result, we can generate different visualizations
through changing parameter values of environmental parameter slots and/or functional parameter slots of BoxPad
from the external environment. At the data transformation step, the parameter slots of RESTProxyBox, which
are functional parameter slots, enable us to select various

data-sets from Web resources. At the visual mapping step,
#Template id slot of DSMBox and #Attribute slot of CoordinateAxisBox for each axis, which is also functional parameter slot, enable us to change a visual representation for
a 3D visualization. At the view transformation step, environmental parameter slots enable us to control the view
projection.

4.3 Synchronizing Parameters of Components
with Cells
CellSyncPad is a component that synchronizes slot values of its child pad with a cell’s values on a spreadsheet
(see Figure 1 (iii)). Users can define a data linkage between
a slot value and a cell’s value by setting up pairs of a slot
name and a cell reference. Users can define multiple data
linkages for one pad.
When users define a data linkage between a cell and a
slot on CellSyncPad, they need to generate a synchronization rule represented as the following description:
#slot name

→
←
↔

cell ref erence

The synchronization rule consists of a slot name, direction of data transfer, and cell reference. The direction of
data transfer can take one of three setting types. The right
arrow (→) represents data transfer from a slot to a cell. CellSyncPad monitors all the values of reference cells and state
changes of its child pad. When a slot value of the child pad
is changed by a user’s interactions to the pad, CellSyncPad captures the change and transfers the slot value of the
child pad to the corresponding cells. On the other hand, the
left arrow (←) represents data transfer from a cell to a slot.
When the value of a reference cell is updated by inputting a
new value or recalculating the formula, CellSyncPad transfers the new value to the corresponding slots of its child pad.
Users can also set up two-way data transfer to completely
synchronize a slot and a cell.
Users can also define data linkages between a slot and a
range that contains multiple cells. In that case, CellSyncPad
converts the range to a suitable data format and writes it
to the corresponding slot, and vice versa. Slot data types
include array and table; an array corresponds to a column
range, and a table corresponds to a two-dimensional range.
Users can use two types of cell reference: absolute and
relative. Absolute cell reference fixes to a cell or a range. If
a CellSyncPad has a rule that includes an absolute cell reference, and if a user copies and pastes the CellSyncPad in another cell, the cell reference is fixed to the original reference
cell. On the other hand, a relative cell reference changes its
reference according to the position of the CellSyncPad.

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

5

Applications

5.1 Amazon Product Search
In this section, we show a 3D product-exploring system using Amazon Web service (AWS) 2 . The AWS provides various REST-style Web services. In this example,
we use the KeywordSearch service and the SimilaritySearch
service. We can search for product information about input
keywords from the KeywordSearch service. The SimilaritySearch service allows us to retrieve product information that
is similar to one or several products. It uses ASIN (Amazon
Standard Identification Number) as its argument.
Figure 5 shows an example of creating visualization of
product information from the KeywordSearch service about
multiple keywords. In this example, first, we construct a 3D
visualization for the KeywordSearch service. It consists of
a RESTProxyBox and a VisualizerBox. If other users who
have profound knowledge about AWS and/or IntelligentBox
have already constructed composite boxes for visualization
of the KeywordSearch service, we may reuse and modify
these components.
In Figure 5 (a), we paste a composite pad of a CellSyncPad and a BoxPad on cell A3, and load the RESTProxyBox
and VisualizerBox into the BoxPad. The RESTProxyBox
for the KeywordSearch service has the #KeywordSearch slot
for an inputting keyword. We export this slot for supplying
the keyword to the RESTProxyBox. The exported slot is
named #RESTProxyBox[1]/@KeywordSearch. In this paper, we abbreviate exported slot names such as #KeywordSearch. In the same way, we export the #Invoke slot of the
RESTProxyBox. Next, we define linkages between cells
and slots into the CellSyncPad. In this example, first, we
define #KeywordSearch ← A2. Thus, we can create a request for the KeywordSearch service through inputting the
keyword in the cell A2. We may also define the following linkages: {#EyePosition ↔ $A$4, #EyeCenter ↔ $A$5,
#Invoke ↔ $A$6}. “$” means an absolute cell reference.
In Figure 5 (b), we copy the range A2:A3 into the next
cells. The definition of linkages between slots and cells
changes to the corresponding relationship. In this case, the
CellSyncPad on the cell B3 has the definition: #KeywordSearch ← B2, and the CellSyncPad on the cell C3 has the
definition: #KeywordSearch ← C2. Each CellSyncPad has
the same definition about the #EyePosition, #EyeCenter and
#Invoke slot because of absolute cell references. As a result,
a users’ direct manipulation for changing viewpoint and for
pushing button to start searching can be synchronized with
each other. In Figure 5 (c), we modify the keyword in the
cell B2 and C2, then, start to search. This example shows
that users can create multiple visualizations about multiple
2 http://www.amazon.co.jp/webservices/

Figure 5. Creating multiple visualizations about product information from the Amazon KeywordSearch
service about multiple keywords through a copy-and-paste manipulation.

keywords for comparing the results just by copying cells
and inputting different parameters in the tabular layout.
In Figure 6 (a), we select some visualized products and
search for their related products from the SimilaritySearch
service. SelectionBox allows us to select RecordBoxes it
encloses. It holds the selected records in the #Sel Record
slot. In Figure 6, we export this slot and define a linkage to
the cell A7, then, values of selected records are ranged in
the Excel sheet. In Figure 6 (b), we prepare another visualization environment for the SimilaritySearch service, and
export the #SimilaritySearch slot to input ASIN, and define the linkage #SimilaritySearch ← A8:A10. As a result,
related product information about selected products is visualized. Figure 6 shows that users can range the visualized
data into the table, and can confirm and/or modify the visualized results using a tabular form. Moreover, they can use
such table as input values for another visualization.

Figure 6. Extracting a table of selected product information from visualization results and
connecting to the Amazon SimilaritySearch
service.

5.2 Comparison of 3D Protein/DNA Structures
Figure 7 shows an example of visualizing 3D structures
of protein or DNA using multiple data-sets, visual representations and angles. In this example, we use two SOAP-style
Web services for using PDB (Protein Data Bank) information: the GetEntry service 3 and SRS service 4 . From the
GetEntry service, we can search for a PDB ID list about an
3 http://xml.nig.ac.jp/wsdl/GetEntry.wsdl
4 http://xml.nig.ac.jp/wsdl/SRS.wsdl

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

input keyword. In Figure 7 (a), we set 3D compound boxes
for accessing the GetEntry service and visualizing the retrieved result on the cell B3. In this case, the service returns just a list of IDs, therefore, visualizing the result in
a 2D table is more understandable for users. In this example, we export the #Keyword slot and the #Result slot of
RESTProxyBox, and define the following linkages to cells:
{#Keyword ← A3, #Result → C3}. As a result, the column

C shows the PDB ID list about the input keyword on cell
A3.
We can get the 3D structure data-sets for protein and
DNA from the SRS service. This Web service requires a
PDB ID as its input argument accession and returns PDB
data strings. The PDB data has various kinds of data including the data for coordinates of each atom making up
the retrieved protein/DNA. In this example, first, we prepare a RESTProxyBox for accessing the SRS service and a
VisualizerBox into the cell D3. Second, we export the #accession slot of the RESTProxyBox and the #Template id
slot of VisualizerBox, then define the following linkages:
{#accession ← $C3, #Template id ← D$1, #Rotate y ←
D$2 }. Next, we copy the cell D3 and paste it into the range
E3:G3. In this case, the references about the #Template id
slot and the #Rotate y slot of each copied cell are changed
automatically to the corresponding cells. Next, we copy the
range D3:G3 and paste it to D4:G4 and D5:G5, then the
references about the #accession slot are changed automatically to the corresponding cells. Visualizations of each row
can have the different data-sets: the range D4:G4 has the
data-set about PDB ID 102D and the range D5:G5 has the
data-set about PDB ID 103D. We can change the 3D representation of protein structure just by inputting a template ID
into the range D1:G1. In Figure 7 (b), we use the SpaceFill
representation model in the column D and F, which uses a
SphereBox as its template, and the Ball and Stick representation model in the column E and G, which uses a SphereBox and a LineBox as its template. We can also change the
angle of view rendering with inputting angles into the range
D2:G2. In this example, we change the angle of visualizations in the column F and G. Thus, we can compare the same
3D structures of protein or DNA from different viewpoints.

6

Conclusion

In this paper, we have proposed a novel framework and
a novel architecture for users to construct multiple 3D visualizations using various Web resources on a spreadsheet.
Characteristics of the spreadsheet paradigm have significant advantage for generating multiple visualizations and
for comparing them visually. Our approach utilizes Microsoft Excel as the spreadsheet platform, and provides the
interactive component-based mechanism to access Web services and to construct 3D visualization. It also provides the
mechanism for connecting 2D/3D components with Excel
cells to make them interoperable. It enables users to generate multiple different visualizations for multiple parameter
values at each visualization step, namely, data transformation, visual mapping, and view transformation. There are a
large number of Excel users in the world. Our framework
enables them to easily construct Excel documents with embedded 3D visualizations, and to share and/or to reuse visu-

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

alization documents among them.

References
[1] Infopath. http://www.microsoft.com/office/infopath/
prodinfo/.
[2] Richard Brath and Michael Peters. Excel Visualizer:
One Click WYSIWYG Spreadsheet Visualization. In
Tenth International Conference on Information Visualisation (IV’06), pages 68–73, 2006.
[3] S. K. Card, J. D. Mackinlay, and B. Shneiderman.
Readings in Information Visualization: Using Vision
to Think. Morgan Kaufmann, 1999.
[4] Chaomei Chen. Information Visualization: Beyond
the Horizon. Springer, London, second edition, 2006.
[5] Roy T. Fielding and Richard N. Taylor. Principled design of the modern Web architecture. In Proceedings
of the 22nd international conference on Software engineering, pages 407–416, 2000.
[6] A. F. Hasler, K. Palaniappan, M. Manyin, and
J. Dodge. A high performance interactive image
spreadsheet (iiss). Comput. Phys., 8(3):325–342,
1994.
[7] Ed Huai hsin Chi, Joseph A. Konstan, Phillip Barry,
and John Riedl. A Spreadsheet Approach to Information Visualization. In ACM Symposium on User Interface Software and Technology, pages 79–80, 1997.
[8] Ed Huai hsin Chi, John Riedl, Phillip Barry, and
Joseph Konstan. Principles for Information Visualization Spreadsheets. IEEE Computer Graphics and
Applications, 18(4):30–38, 1998.
[9] Masahiko Itoh and Yuzuru Tanaka. 3D ComponentBased Visualization Framework for Generating Simple 3D Applications Using Web Services. In 2006 International Conference on Web Intelligence (WI2006),
pages 823–830, 2006.
[10] T. J. Jankun-Kelly and Kwan-Liu Ma. Visualization
Exploration and Encapsulation via a Spreadsheet-Like
Interface. IEEE Transactions on Visualization and
Computer Graphics, 7(3):275–287, 2001.
[11] T. J. Jankun-Kelly, Kwan-Liu Ma, and Michael Gertz.
A model for the visualization exploration process. In
VIS ’02: Proceedings of the conference on Visualization ’02, Washington, DC, USA, 2002. IEEE Computer Society.

Figure 7. Multiple visualizations of 3D structure of protein and/or DNA.

[12] Eser Kandogan, Eben Haber, Rob Barrett, Allen
Cypher, Paul Maglio, and Haixia Zhao. A1: enduser programming for web-based system administration. In UIST ’05: Proceedings of the 18th annual
ACM symposium on User interfacesoftware and technology, pages 211–220, 2005.
[13] Marc Levoy. Spreadsheets for images. Computer
Graphics, 28(Annual Conference Series):139–146,
1994.
[14] M. Ohigashi and Y. Tanaka. A framework for the virtual reification of database records. In IPSJ, 42(SIG
1(TOD8)), pages 80–91, 2001.
[15] Yoshihiro Okada and Yuzuru Tanaka. IntelligentBox:
A Constructive Visual Software Development System for Interactive 3D Graphic Applications. In Proceedings of Computer Animation ’95, pages 114–125,
1994.
[16] Hideaki Shinomi and Samuel S. Adams. Adieu.
http://www-128.ibm.com/developerworks/web/
library/ws-adieu/index.html.
[17] Yuzuru Tanaka. Meme Media and Meme Market Architectures: Knowledge Media for Editing, Distributing, and Managing Intellectual Resources. IEEE Press
& Wiley-Interscience, 2003.

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

[18] Yuzuru Tanaka and Takamoto Imataki. IntelligentPad:A Hypermedia System allowing Functional Composition of Active Media Objects through Direct Manipulations, 1989.

