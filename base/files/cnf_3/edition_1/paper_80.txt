2011 15th International Conference on Information Visualisation

Growing B-spline Model for Efficient Approximation of Complex Curves

Asif Masood

Sundas Bukhari

Military College of Signals
National University of Sciences and Technology
Islamabad, Pakistan
amasood@mcs.edu.pk

Military College of Signals
National University of Sciences and Technology
Islamabad, Pakistan
s_bukhari@mcs.edu.pk
computational complexity, performance loss and increase in
processing time. These problems make them unfavorable in
approximating lengthy complex curves.
Proposed curve approximation technique addresses most
of these issues. Growing B-spline model and use of error
vector for repositioning of control points is something
different that is proposed in this paper. The paper is
structured as follows. Section 2 presents curve
approximation method using error vector. Section 3 gives the
growing B-spline model for approximation. Results are
presented in Section 4 and section 5 concludes the paper.

Abstract— Growing B-spline model of curve approximation
exploits local control of B-spline which leads to efficient
approximation of complex curves, even with higher order Bsplines. Approximation is carried out progressively (growing) in
this model which is another factor for efficient approximation.
Control points are adjusted / re-positioned in each iteration of
approximation based on error between two curves. Proposed
method can avoid any need of parameterization and complex
computations. Proposed growing model can be applied with any
degree of B-spline curve.
Keywords-B-spline; Curve Approximation; Control points

I.

II. CURVE APPROXIMATION WITH B-SPLINE
B-spline is the most widely used model in curve
approximation due to local control and efficient computation.
Computation of B-spline curve ܲሺ‫ݑ‬ሻ is given as:

INTRODUCTION

Curve approximation is one of the basic areas of graphic
designs and modeling. Researchers are investigating for
better and better algorithms in curve approximation for last
few decades. Use of B-spline in curve approximation is an
attractive approach due to local control and simplicity of
computations. Some latest techniques of curve
approximation using B-spline can be seen in [1-13]. When
modeling any shape with B-spline curve, there are various
factors need to be addressed during approximation. These
factors may include degree of approximating curve, number
of control points to be used, position of these control points
and location knots. Computational efficiency and accuracy
are few other concerns. Researchers tried to address one
more of these issues in their work.
In literature, many iterative processes were used to
determine the location control points for approximating
curve [2-7]. Inclusion, deletion and adjustment of knots also
help in computing the accurate approximation. Paper in
[9,10,13,14] propose this approach. In another technique
[15], dominant points are used to compute the knot vector for
error bounded curve approximation. Approximation based on
least square minimization and parameterization can be seen
in [14]. In [7], a B-spline curve is fit to a point cloud data
using curvature based squared distance minimization. The
techniques discussed above are mostly performing iterative
processes for data points detection, thus involve
1550-6037/11 $26.00 © 2011 IEEE
DOI 10.1109/IV.2011.86

௡

ܲሺ‫ݑ‬ሻ ൌ ෍ ‫݌‬௞ ‫ܤ‬௞ǡௗ ሺ‫ݑ‬ሻǡ
௞ୀ଴

‫ݑ‬௠௜௡ ൑ ‫ ݑ‬൑ ‫ݑ‬௠௔௫ ǡ
ʹ൑݀ ൑݊൅ͳ

(1)

Where ‫݌‬௞ represent the set of ݊ ൅ ͳ control points and
‫ܤ‬௞ǡௗ represent B-spline blending function which is a
polynomial of degree ݀ െ ͳ . Range of parameter ‫ ݑ‬is
divided into ݊ ൅ ݀ subintervals with knot values labeled as
{‫ݑ‬଴ ǡ ‫ݑ‬ଵ ǡ ǥ ǡ ‫ݑ‬௡ାௗ }. The blending function for B-spline curves
are defined using Cox-deBoor recursion formula given as:
‫ܤ‬௞ǡଵ ሺ‫ݑ‬ሻ ൌ ቄ
‫ܤ‬௞ǡௗ ሺ‫ݑ‬ሻ ൌ
൅

507

ͳǡ ݂݅‫ݑ‬௞ ൑ ‫ ݑ‬൑ ‫ݑ‬௞ାଵ
Ͳǡ ‫݁ݏ݅ݓݎ݄݁ݐ݋‬
௨ି௨ೖ

௨ೖశ೏శభ ି௨ೖ

‫ܤ‬௞ǡௗିଵ ሺ‫ݑ‬ሻ

‫ݑ‬௞ାௗ െ ‫ݑ‬
ሺ‫ݑ‬ሻ
‫ܤ‬
‫ݑ‬௞ାௗାଵ െ ‫ݑ‬௞ାଵ ௞ାଵǡௗିଵ

(2)

Where ܱ௫ and ‫ܥ‬௫ represent the ‫ ݔ‬- coordinates of
original and computed curve respectively. Similarly ܱ௬ and
‫ܥ‬௬ represent the ‫ ݕ‬- coordinates of original and computed
curve. ‫ܧ‬௫ and ‫ܧ‬௬ represents the array errors in ‫ ݔ‬and ‫ݕ‬
direction. Note that the number of points of both original and
computed curves is same.

Figure 1. Quadratic B-spline curve with 4 control points

Fig. 1 shows the Quadratic B-spline curve with four
control points. The curve consists of 300 points. In proposed
model of curve approximation, position of control points are
determined from the error between given and computed
curve. Let’s take a piece of this curve, first 150 points of
curve shown in Fig. 1 and see how the proposed model will
approximate this curve. Selected piece of curve is shown in
Fig. 2. Let’s approximate this curve with Quadratic B-spline
using three control points ( ‫݌‬଴ ǡ ‫݌‬ଵ ,‫݌‬ଶ ). Let’s take position of
control point ‫݌‬ଵ at some random position and see how it
moves to its correct position. Position of control points ‫݌‬଴
and ‫݌‬ଶ is given as:
‫݌‬଴ ൌ ʹܲ௦௧௔௥௧ െ ‫݌‬ଵ

Figure 3. Selected piece of curve with random control point

In proposed method control point ‫݌‬ଵ will be
repositioned/displaced using the error ‫ܧ‬௫ and ‫ܧ‬௬ .
Displacement of control point ‫݌‬ଵ in ‫ ݔ‬and ‫ ݕ‬direction can be
represented by vectors ሬሬሬሬሬԦ
‫ܦ‬௫ and ሬሬሬሬሬሬԦ
‫ܦ‬௬ respectively. These
vectors can be computed as:
௠

ሬሬሬሬԦ௫ ൌ ෍൫‫ܧ‬௫ ሺ݅ሻ ൈ ‫ܤ‬෠ଵǡଷ ሺ݅ሻ൯
‫ܦ‬

(5)

௜ୀଵ

(3)

௠

෠
ሬሬሬሬԦ
‫ܦ‬
௬ ൌ ෍൫‫ܧ‬௬ ሺ݅ሻ ൈ ‫ܤ‬ଵǡଷ ሺ݅ሻ൯

‫݌‬ଶ ൌ ʹܲ௘௡ௗ െ ‫݌‬ଵ

௜ୀଵ

Where ܲ௦௧௔௥௧ and ܲ௘௡ௗ represent the first and last point
of (original) curve, to be approximated. Curve computed
with initial position of control points (having ‫݌‬ଵ at random
position) is shown in Fig. 3. Control point ‫݌‬଴ and ‫݌‬௡ାଵ are
not shown in these figures for clarity.

Where ‫ܤ‬෠ଵǡଷ is the normalized blending function of
quadratic curve for control point ‫݌‬ଵ . Symbol ݉ represents
the number of array points, which must be equal for both (i.e.
‫ ܧ‬and ෢
‫) ܤ‬. Normalized blending function is computed as:
‫ܤ‬෠௞ǡௗ ሺ‫ݑ‬ሻ ൌ

ߙ‫ܤ‬௞ǡௗ ሺ‫ݑ‬ሻ
௨ೖశ೏
σ௨ୀ௨ೖ ‫ܤ‬௞ǡௗ ሺ‫ݑ‬ሻ

(6)

‫ݑ‬௞ ൑ ‫ ݑ‬൑ ‫ݑ‬௞ାௗ
B-spline curve is defined only in the interval from knot
‫ݑ‬ௗିଵ up to knot value ‫ݑ‬௡ାଵ . Therefore, part of normalized
blending function spanning out of this range must be
truncated. Symbol ߙ is an approximation constant. The
value of ߙ ൌ ͵ in current approximation. Impact of ߙ in
curve approximation will be explained in the end of this
section. New position of control point is determined as:
(7)
ሬሬሬሬԦ௫
‫݌‬ଵ௫ ൌ ‫݌‬ଵ௫ ൅ ‫ܦ‬

Figure 2. Selected piece of curve

Error between original (O) and computed (C) curve is
computed as:
‫ܧ‬௫ ൌ ܱ௫ െ ‫ܥ‬௫
(4)
‫ܧ‬௬ ൌ ܱ௬ െ ‫ܥ‬௬

ሬሬሬሬԦ
‫݌‬ଵ௬ ൌ ‫݌‬ଵ௬ ൅ ‫ܦ‬
௬

508

span from knot ‫ݑ‬ଷ to ‫ݑ‬ହ and ‫ܤ‬෠ଶǡସ will span from knot ‫ݑ‬ସ
to ‫ ଺ݑ‬. Fig. 6a shows the curve selected for approximation.
Initial position of control points is also shown. Fig 6b and 6c
show results after first iteration of approximation with cubic
B-spline having ߙ ൌ ͵ and ߙ ൌ ͸ respectively.

Where ‫݌‬ଵ௫ represents x-coordinate value of current
position of control point and ‫݌‬ଵ௬ represents y-coordinate
value respectively.

Figure 4. Computed curve after repositioning of control point

New position of control points ‫݌‬଴ and ‫݌‬ଶ will also be
recalculated using eq. 3. Fig. 4 shows the curve after
repositioning of control points ‫݌‬ଵ . Demonstrated
approximation achieves acceptable level of approximation in
single iteration. However this approximation may take many
iterations especially incase of higher degree curves. Another
set of results are shown in Fig. 5. Fig. 5a is the curve with
some randomly selected position of control point and Fig. 5b
shows its approximation after single iteration. Similarly, Fig.
5c is the curve by selecting control point at the midpoint of
original curve and Fig. 5d shows its approximation after
single iteration. The value of constant ߙ ൌ ͵ in these
examples.

Figure 6. One iteration of Cubic B-spline approximation. (a) Input curve,
(b) Approximation with Ƚ ൌ ͵, (c) Approximation with Ƚ ൌ ͸

In most cases control point(s) will not be able to reach
their destination in one run. Therefore approximation
procedure should be repeated iterative till required level of
approximation has been obtained. Some threshold value can
be defined to determine the level of approximation achieved.
We have used threshold ߬ in our approximation. The
approximation error is computed as:
(8)
ߝ ൌ ට‫ܧ‬௫ଶ ൅ ‫ܧ‬௬ଶ

Figure 5. Approximation with Quadratic B-spline. (a) Randomly selected
control point position, (b) After reposition control point, (c) Control point
at curve centre, (d) After reposition control point

Cubic B-spline can also be used to approximate the
curves in similar method. Incase of cubic B-spline with four
control points, control point ‫݌‬ଵ and ‫݌‬ଶ will be repositioned
using above method. Obviously there will be two normalized
blending function ( ෡‫ܤ‬ଵǡସ ܽ݊݀ ‫ܤ‬෠ଶǡସ ) in this case. ‫ܤ‬෠ଵǡସ will

509

Results proposed in this paper are based on threshold
߬ ൌ ͲǤͷǤ Approximation constant ߙ plays an important role
in speeding up the approximation process. Higher value ߙ
(more than 1) leads to bigger jumps and quick approximation
but may overshoot the target. In worst case it may start
oscillating around the target and never reach to its optimal
position. On the other hand small value of ߙ (less than 1)
will probably fine tune to optimal position but it may take
many iterations in this process. Ideally, value of ߙ should
be high if away from its target position and ߙ value should
be small when control point has reached closer to its
destination. Our investigations in this regard are under way.
III.

GROWING B-SPLINE MODEL FOR CURVE
APPROXIMATION

Approximation method presented in section 2 was
confined to approximation of single curve section. In case of
complex / lengthy curves (as shown in Fig 7a), it becomes
difficult to decide the number of control points to be used for
approximation. Further such an approach can be
computationally very heavy. Keeping in view these
problems, approximation with growing B-spline is the most
suitable solution. Local control of B-spline does not impose
excessive computation burden in growing B-spline model.
Basic idea of approximation using growing B-spline is to
take initial chunk of given curve and approximate it using
method described in section 2. Then, include more points of
given curve in the initial chunk and reposition the control
points, using the method described in section 2. Add a
control point if error ሺ ߝ ሻ does not come below specified
threshold limit ሺ ߬ ሻ. This process will continue till whole
curve was approximated. In B-spline reposition of any
control point affects the shape of curve at most ݀ curve
sections. Therefore, previous sections of approximated curve
ௗ
(at the distance of െ ͳ sections) remain unaffected during
ଶ
readjustments of current sections.
Fig. 7b shows the initial chunk of curve (of Fig. 7a) taken
for approximation. This chunk is approximated using
Quadratic B-spline (explained in section 2) and is shown in
Fig. 7c. Now more points are added in this chunk and control
point ‫݌‬ଵ is re-adjusted again. Fig. 7d shows approximation
at this stage. Approximation error will go beyond threshold
limit ሺ߬ ൌ ͲǤͷሻ if this approximation is grown any further.
Therefore we add one more control point and readjust its
position. Fig. 7e shows approximation at this stage. This
process will continue till whole curve was approximated.
Fig. 7f shows approximation of complete curve using
growing B-spline model.
Complete procedure of approximation with growing Bspline model is given in Fig. 8. The growing B-spline
approximation is also experimented using Cubic B-splines
for approximation and the approximation results are shown
in Fig. 9. Fig. 9a is the given curve. Fig. 9b is the
approximation of first chunk, Fig. 9c shows approximation at
an intermediate stage and Fig. 9d show the final result of
approximation. For all approximation shown in this section
ߙ ൌ ͳ.

Figure 7. Approximation with growing B-spline. (a) Original curve, (b)
Initial piece of curve, (c) Approximation of initial piece, (d) Approximation
after growing initial piece, (e) Approximation after growing and adding one
control point, (f) Final result of growing B-spline approximation

Figure 8. System Flow Diagram

510

iterative approach of locating the data points for curve
approximation, the proposed model is approaching towards
the optimal position of control point for a particular chunk of
curve and ultimately locates the best position.
Another factor that makes the proposed technique unique
and useful is the progressive growing of curve chunk till end
of the curve. This helps in reducing the processing overhead,
thus improves the approximation efficiency. Another
advantage is that the progressive growing of curve helped in
restriction or controlling the number of control points needed
to approximate the curve. The computed control points
represent the possible minimum set of points to perform
curve approximation. The opted technique for repositioning
of control point is also simple and does not require complex
calculations unlike the curve approximation techniques
presented in [4-5].
Proposed curve approximation method can be applied to
model the shape outlines with equal ease and efficiency.
Such a result is shown in Fig. 11. Before applying curve
approximation, corner points were detected. The shape was
segmented from the detected corner points. Fig 11a is the
shape of bottle and Fig 11b shows its outline with marked
corner points. Few segments were approximated with
straight line and few required curve approximation.
Approximation for the shape of bottle is shown in Fig. 11c.
Computed shape is drawn over original to demonstrate the
accuracy of results. Similarly, another result for the shape of
music symbol can be seen in Fig. 11d, 11e and 11f.

Figure 9. Approximation with growing Cubic B-spline. (a) Original
curve, (b) approximation with two control points, (c) Growing curve at an
intermediate level, (d) Final approximation results.

IV.

RESULT DEMONSTRATION AND ANALYSIS

This section represents the curve approximation results
achieved using the proposed technique. The experiments
using the proposed model are carried out on curves and 2D
objects. Approximation procedure of curves is explained in
section 2 and 3 and it is not repeated here. Approximation
with growing B-spline of two curves is given in Fig. 10. Fig.
10a shows the approximation with growing quadratic Bspline. Fig 10b shows the computed curve over original.
Similarly, Fig 10c shows another approximation with
growing cubic B-spline. Fig. 10d shows approximated curve
over original. The approximation constant ߙ is assigned a
value 1 for both approximations.

(a)

(b)

(c)

(d)

(e)

(f)

Figure 11. Approximation object outlines. (a) Object ‘Bottle’, (b) Outline
of bottle shape with marked corner points, (c) Approximation of bottle
shape, (a) Object ‘Music Symbol’, (b) Outline of music symbol shape with
marked corner points, (c) Approximation of music symbol shape

Figure 10. Growing B-spline Approximation. (a) Quadratic B-spline
Approximation, (b) Computed Curve over Original, (c) Cubic B-spline
Approximation, (d) Computed Curve over Original

V.
The curve approximation results achieved using proposed
technique involves minimal computational complexity.
Comparing the techniques given in [2-7], the presented curve
model effectively performs approximation of curves in terms
of processing time and complexity. Unlike the conventional

CONCLUSION

A growing B-spline model for curve approximation is
presented in this paper. The proposed technique is basically
for the approximation of complex / lengthy curves and does
not involve complex computations for the repositioning of
control points. The technique is initiated by approximating
the selected chunk of curve and progressively adds curve

511

points and performs approximation. The presented technique
is effectively overcoming the drawbacks of discussed
approaches and provides a simple solution.

[9]

[10]

REFERENCES
[1]
[2]
[3]

[4]
[5]

[6]

[7]

[8]

A. Razdan, “A knot placement for B-spline curve approximation”,
PRISM Publications, 1999.
J. Hoscheck, D. Lasser, “Fundamentals of computer aided geometric
design”, London : AK Peters, 1993.
H. Park, “An error bounded approximate method for representing
planar curves in B-splines,” Computer Aided Geometric Design, May
2004, pp. 479–497, doi:10.1016/j.cagd.2004.03.003.
L. Piegl, W. Tiller, “The NURBS Book”, Second Ed., NewYork:
Springer-Verlag, 1997.
D.F. Rogers, N. Fog, “Constrained B-spline curve and surface
fitting,” Computer Aided Design, Dec. 1989, pp. 641-648,
doi:10.1016/0010-4485(89)90162-0..
B. Sarkar, C. Menq, “Parameter optimization in approximating curves
and surfaces to measurement data,” Computer Aided Design, Oct.
1991, pp. 267-290, doi:10.1016/0167-8396(91)90016-5.
W. Wang, H. Pottmann, Y. Liu, “Fitting B-spline curves to point
clouds by curvature based squared distance minimization”, ACM
Transaction
on
Graphics,
April
2006,
pp.
214-238,
doi:10.1145/1138450.1138453.
X.D. Chen, W. Ma, J.C. Paul, “Cubic B-spline curve approximation
by curve unclamping”, Computer Aided Design, June 2010, pp. 523534, doi:10.1016/j.cad.2010.01.008.

[11]

[12]

[13]

[14]

[15]

[16]

512

W. Li et al, “Adaptive knot placement in B-spline curve
approximation”, Computer Aided Design, Elsevier Science, July
2005, pp. 791-797, doi:10.1016/j.cad.2004.09.008.
A. Masood, M. Sarfraz, S.A. Haq, “Curve approximation with
Quadratic B-splines,” Proc. IEEE Symp. 9th International Conference
on Information Visualization (IV’05), July 2005, pp. 419-424,
doi:10.1109/IV.2005.39.
W.Y. Ma, J.P. Kurth, “Parameterization of randomly measured
points for least squares fitting of B-spline curves and surfaces,”
Computer Aided Design, Sept. 1995, pp. 663-665, doi:10.1016/00104485(94)00018-9.
H. Pattmann, S. Leopoldseder, M. Hofer, “Approximation with active
B-spline curves and surfaces,” Proc. 10th Pacific Conference on
Computer Graphics and Applications (PG’02), IEEE Computer
Society Press, pp. 8-25, ISBN: 0-7695-1784-6.
H. Binder, W. Sauerbrei, “Increasing the usefulness of additive spline
models by knot removal,” Computational Statistics and Data
Analysis, Aug. 2008, pp. 5305-5318, doi:10.1016/j.csda.2008.05.009.
H. Park, J.H. Lee, “B-spline curve fitting based on adaptive curve
refinement using dominant points”, Computer Aided Design, June
2007, pp. 439-451, doi:10.1016/j.cad.2006.12.006..
H. Park, J.H. Lee, “Error bounded B-spline curve approximation
based on dominant point selection,” Proc. Computer Graphics,
Imaging and Vision: New Trends (CGIV’05), 2005, pp. 437-446,
doi:10.1109/CGIV.2005.36.
M. Eck, J. Hadenfeld, “Knot removal for B-spline curve,” Computer
Aided Geometric Design, May 1995, pp. 259-282, doi:10.1016/01678396(94)00012-H.

