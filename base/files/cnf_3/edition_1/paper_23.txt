2011 15th International Conference on Information Visualisation

xLDD: Extended Linguistic Dependency Diagrams

Chris Culy, Verena Lyding, Henrik Dittmann
Institute for Specialised Communication and Multilingualism
European Academy Bolzano/Bozen
Bolzano/Bozen, Italy
{christopher.culy, verena.lyding, henrik.dittmann}@eurac.edu
of”, etc. “Basic” dependency diagrams are a visualization of
basic dependency structures in which the words are
presented in their normal reading order, with directed arcs
(usually labeled with the corresponding relations) connecting
the words. In Fig. 1 is an example, using xLDD, which
follows the Expert Advisory Group on Language
Engineering Standards (EAGLES) recommendation for
(basic) dependency diagrams [7]. (English examples are
from the Wall Street Journal, as analyzed in the PARC 700
collection of dependency structures [8] and reinterpreted in
the Kalashnikov 691 [9].)
Dependency diagrams have a clear family resemblance to
Arc Diagrams and their descendants [10], though
dependency diagrams predate Arc Diagrams, having been
used at least since 1984 in Word Grammar [11], and perhaps
earlier.
As with other graphs, it is important to remember that the
dependency structures are the data structures and the
dependency diagrams are one way of visualizing those data
structures. In fact, linguists also use other visualizations of
dependency structures, e.g. the ANNIS2 [12] project uses
two other (node-link pseudo-tree) visualizations of
dependency structure (see also DgAnnotator [13] and TrED
[14]). While linguists do not consistently make this
distinction between the data structure and the
visualization(s), we will continue to refer to the
visualizations here as dependency diagrams as opposed to
dependency structures.
Dependency structures have become increasingly
popular in the linguistics communities, with databases of
dependency structures for real sentences now available for
various languages. Visualizations of dependency structures
are therefore more and more important. Dependency
diagrams are a convenient way of visualizing the relations
among words in a sentence while maintaining the original
order of the words. This allows the user to see the
connections between the relations and the order of the words.
However, it is more difficult to see the hierarchical
organization of the relations. Other visualizations of
dependency structures as attribute-value matrices [8]
facilitate the exploration of this hierarchical relational
structure, at the cost of losing the information about word
order. Each visualization is (more) appropriate for certain
use cases and less for others.

Abstract—Extended Linguistic Dependency Diagrams are an
innovative visualization of a data structure that is increasingly
important in linguistics and language studies. It uses standard
InfoVis techniques in ways new to linguistic diagrams to
encode more information than is possible with previous
visualizations. The goal is to make the diagrams easier to use,
by allowing easier identification of the parts of the diagram of
interest to the user. In addition, we aim to construct reusable
tools to aid in language analysis and study. Preliminary
evaluation supports the validity of the approach and suggests
further improvements.
Keywords- dependency diagrams, linguistics

I.

INTRODUCTION

Visualization of language-based information (LInfoVis)
is becoming increasingly important, from cloud tags and
Wordle [1], to more advanced visualizations (cf. e.g. [2] for
an overview, and [3], [4] for detailed examples). Despite
this, tools for language professionals, and others interested in
language structures, still do not make much systematic use of
visualization techniques (but cf. [5] for an overview and [6]
for some LInfoVis tools).
Our general goal is to address this gap in InfoVis by
developing a series of general tools for language
visualization that can be easily adapted and incorporated into
specific applications. Taking advantage of lower level
toolkits, these tools also address the special nature of
language data (it is not only nominal, but it is not mappable
to other more compact representations), as well as the
specialized data structures used in language analysis.
Extended Linguistic Dependency Diagrams (xLDD) are an
instance of this type of tool, designed for a data structure that
is important, if not particular, to one aspect of linguistics.
While many InfoVis visualizations of language information
are centered around words or meaning (see the references
cited above), xLDDs are diagrams of language structure.
II.

DEPENDENCY STRUCTURES AND DIAGRAMS

A. Basic Dependency Structures and Diagrams
A dependency structure is a directed (usually acyclic)
graph representation of relations between parts of a sentence.
“Basic” dependency structures represent binary relations
between words in a sentence, such as “subject of”, “modifier
1550-6037/11 $26.00 © 2011 IEEE
DOI 10.1109/IV.2011.42

164

The first step is to process the original dependency
structure representation. Unfortunately, there is no consensus
as to what information should be included in a dependency
structure, and hence no standard representation. For the
purposes of xLDD, we have created a simple JSON format
for dependency structures (JSDS), which requires the
information necessary for basic dependency structures, while
still allowing extended information. We have written
converters for a few dependency structure formats, most
notably for the format used in CoNLL-X (the conference of
the Association of Computational Linguistics’ Special
Interest Group on Natural Language Learning) Shared Task
on Multi-lingual Dependency Parsing [16], as well as for the
format used in the Kalashnikov 691, based on the PARC
700. The PARC 700 dependency structures cannot be used
directly, since they do not include word order information, a
point we will return to below.
The JSDS format is then converted to a Protovis Network
object which is the input to the xLDD layout module. As is
standardly done, the layout calculates the position of the
nodes, as well as some supplementary information about the
dependency graph structure.
Once the positions of the nodes have been calculated, the
Visual Encoding and Interaction (VEI) component constructs
the visual presentation of the diagram, including colors,
shapes, etc. as well as interactions. The xLDD VEI
component incorporates a useful set of default visual
encodings and interactions. These default encodings and
interactions are customizable, making the VEI component a
flexible wrapper around the xLDD layout. However, the
xLDD layout can always be used separately, without the
xLDD VEI component.
The final step is to incorporate xLDD into an application.
Of course, the details of that incorporation, including which
kinds of visual encoding and interactions to expose to the
end user, depend on the goals and uses of the particular
application.

Figure 1. Basic Dependency Diagram

B. Extended Dependency Structures and Iissues
Basic dependency structures provide the basic
information only, and in fact almost all dependency
structures have information beyond words and the relations
between them. Typically this extended information is about
the words rather than the relations, and often includes the
lemma (“dictionary form”) of the word as well as its part of
speech (“noun”, “verb”, etc.). Some dependency structures
have even more detailed grammatical and/or semantic
information, e.g. “it” is third person singular and inanimate.
This extended information presents both challenges and
opportunities for visualization. On the one hand, there is the
question of how to integrate the extended information into
the diagram in a clear way. On the other hand, having this
extended information gives us many more opportunities for
visualization and the types of this additional information
(typically nominal) allow us to use standard InfoVis visual
encoding techniques, e.g. color to indicate the parts of
speech.
There is an additional issue for all dependency diagrams,
and that is that many real-life sentences are quite long, (the
average sentence length in the PARC 700 collection is 19.8
words). Unlike in text, we cannot wrap the sentence in a
dependency diagram onto successive lines, so compressing
the representation horizontally is one of the challenges
xLDD addresses. Vertical compression is another challenge
addressed by xLDD, since the circular arcs typically used (at
least in automatically drawn dependency diagrams, as well
as in Arc Diagrams) take a lot of vertical space.
III.

B. Addressing Space Issues
Fig. 3 shows an example of an xLDD which illustrates
the ways in which we have addressed the challenges of space
constraints. In this example, the words are presented on
different levels, descending from left to right until the
quotation mark, and then restarting at the initial level. In
addition, words are indented to the left (“staggered”) under
the higher word on the previous level.
To address the issue of circular arcs taking large amounts
of space, we use elliptical arcs instead. The only
informational difference is that the height of an arc is no
longer equal to the distance between its endpoints, but rather
proportional to that distance. There is no significant
information loss in using elliptical arcs instead of circular
ones, since only the relative distance between endpoints is
relevant, not the absolute distance. In fact, this can even be
an advantage as it mitigates the tendency of circular arcs to
give more visual weight to longer arcs, due to the quadratic
increase of the space/area below circular arcs.

XLDDS: EXTENDED DEPENDENCY DIAGRAMS

A. Architecture
Extended Linguistic Dependency Diagrams (xLDD) are
implemented in JavaScript using the Protovis [15]
framework. The architecture is shown in Fig. 2.

Figure 2. xLDD Architecture

165

Figure 3. xLDD Diagram for a longer English Sentence; using elliptical Arcs all above and Levels + Staggering

To address the issue of sentences taking up large amounts
of horizontal space, we use a combination of two techniques,
namely levels and staggering. Varying the vertical position
of the words (the level) allows us to offset words
horizontally (stagger) so that they overlap a bit vertically
(though not graphically). However, since staggering can be
distracting, the default implementation uses staggering only
when the sentence would extend beyond the visible area. (Cf.
[17] for another visualization of dependency diagrams which
uses levels but not staggering.)
Of course, sentences, and their relation arcs, can still be
too large for the available visual area, so the default
implementation of the xLDD VEI component provides for
panning and zooming. However, the use of elliptical arcs,
levels and (intelligent) staggering does increase the range of
sentences that can be displayed in a given space.

visualizations of dependency structures, we can position the
arcs above or below the text (cf. [18] for a similar approach,
but for non-interactive diagrams). An example is in Fig. 4,
where arcs showing dependents of verbs are above the text,
and others below. In addition, arcs involving punctuation are
thinner than other arcs. In terms of the use of color, the main
dependencies of verbs are blue, relations between
prepositions and their objects are green, and conjunction
relations are yellow. Fig. 4 also shows the results of panning
the diagram. In terms of showing the non-basic information
textually, the default implementation in the xLDD VEI
provides a dendrogram view of the information (shown for
“allenatore” in Fig. 4), similar to the attribute-value matrix
representation that is familiar to linguists, and this view is
shown by double-clicking the node. Of course, other possible
interactions and visualizations of this information are
possible as well; the default implementation provides just
one.
In addition to double-clicking the node, other standard
types of interaction are available, such as mouse hover,
clicking, selecting nodes by dragging, etc. As mentioned
above, the default implementation of the xLDD VEI also
provides panning and zooming.

C. Visual Encoding and Interaction
As mentioned above, extended dependency structures
have extra information beyond just the words and their
relations. Any of this information can be visually encoded
and/or made available through interaction. In particular, we
use color and size for the words, the nodes above them, and
the arcs. We can also use the vertical level of the words to
encode information. Finally, in contrast to most other

166

Figure 4. xLDD Diagram for an Italian Sentence from Corpus PAISÀ [19]; mixed Levels, Colors, also shows Info on Word.

IV.

linguistic training. All but one have a good understanding of
syntactic structures, but are more familiar with tree
representations than with dependency diagrams. Two
subjects are of Italian mother tongue, the other two subjects
have basic knowledge of Italian with good reading
comprehension skills

EVALUATION

A. Procedure
Based on an annotated sample of the PAISÀ corpus [19]
we created nine different displays:
1. Basic dependency diagram
2. Arcs above and below the text according to their
dependency type
3. Arcs of one dependency type above the text and all
other arcs below
4. Arcs colored according to their dependency type
5. Arcs of one dependency type colored red and all
other arcs colored gray
6. Descending text, with steps at every noun
7. Descending text, with steps at every word
8. Descending text, with steps at every word, and
words staggered horizontally
9. Text descending for the first half of the sentence
and ascending for the second half of the sentence
After a short introduction to dependency diagrams, to
interactions in xLDD and to the annotations, the users were
asked to find occurrences of a specified dependency type. In
test 1 in addition to records of the results, we collected thinkaloud protocols of the users’ impressions and reasoning
during completion of the tasks. In test 2, besides the results,
the time to completion was recorded for each xLDD display.
Following the two tests users were asked to give evaluative
feedback on xLDD.
All subjects have a language-related background, ranging
from language didactics to different degrees of formal

B. Results
Overall the testing showed that users were able to
understand and use xLDD autonomously after a short
introduction. In general, they preferred visual cues over textbased indications (e.g. details in the pop-up window for each
lemma) for solving the given tasks. It even turned out that
the visualizations highlighting the requested dependency
type enabled the testers to complete the tasks without having
to read and understand the sentences.
Of the innovative xLDD features, color coding and the
systematic placement of arcs above and below the text were
most appreciated, while descending text by levels and
staggering of words lead to initial confusion. Highlighting
dependencies that are relevant for the given task by means of
color or placement of the arcs on one side of the text as
opposed to the other dependency types was considered very
useful, as it supported the understanding of what is important
and helped to reduce visual clutter. Leveled and staggered
displays were perceived as less readable and confusing or not
useful. The evaluative feedback made clear that users
expected positional placement of words to have a meaning,
which they were not able to deduce, and that in fact if levels
and staggering would be applied systematically they might
have potential to be useful for some tasks. Overall, people
asked for control over which dependencies to show and how

167

to show them, as well as the integration of xLDD with a
specific application (e.g. a corpus query engine).
Regarding the interaction with the xLDD interface the
testers criticized the overlap of arcs/arrows and words,
especially when zoomed out, that make the visualization
difficult to read (e.g. determine the directionality of an arc)
and hamper the smooth interaction with units of interest (e.g.
tooltip on hover, details on double-click). Furthermore, the
shape of the cursor was considered unintuitive and we
noticed some difficulties with panning involving the
draggable areas. One user suggested to use varying line
widths of arcs for highlighting, another user suggested to
provide different curvatures of arcs – these are both features
that are already implemented in xLDD but were not applied
in the testing displays.
Test 1 and test 2 yielded similar results, however the time
recording confirmed that besides the visual features of
xLDD, sentence length also has a considerable impact on the
readability of the dependency diagram. To deduce more
differentiated significant results from time recording a larger
scale user study would be needed. In particular it would be
interesting to test how leveled and staggered displays impact
efficiency in solving tasks – besides being perceived as more
or less helpful (our preliminary testing did not control for all
the variables). In fact, the users’ behavior showed that they
were aiming to get a view of the full sentence, which was
achieved by zooming out (with its disadvantages), but is also
attained by leveling and staggering.
Asked for possible application contexts, there was a
consensus among all users that xLDD would be most useful
in the language learning and teaching, assuming that the user
could take control over what dependency types and
additional information to display, and how to display it.
V.

semi-automatically reconstructed from the PARC 700, but
until we can come up with an automatic reconstruction of the
PARC 700, we will have to wait on seeing how extra items
are best visualized.
The original motivation for this work was to provide a
visualization of the dependency structures available in the
PAISÀ corpus of Italian [19]. We have a proof of concept
application allowing search results from PAISÀ to be
displayed dynamically, from which Fig. 4 was taken, but we
intend to make a more flexible, comprehensive application.
This application will also let us explore concretely what
kinds of information (if any) could usefully be encoded using
levels.
Finally, we intend to release xLDD under an Open
Source license.
VI.

CONCLUSIONS

xLDD is a new way of visualizing dependency structures,
which incorporates standard InfoVis techniques. It uses
features, such as coloring and placement of arcs above and
below the text and using the technique of levels plus
staggering to reduce the amount of horizontal space needed
for the visualization. The preliminary results are promising,
and give indications about what needs to be focused on and
improved for integration into specialized applications. The
application in a language teaching and learning context
seems particularly promising considering the user feedback,
and we hope that xLDD will in addition be adopted and
adapted by other linguistic projects.
As noted above, many InfoVis visualizations of language
information are concerned with words or meaning, but
xLDDs are diagrams of language structure. They are thus an
example for how the many other specialized linguistic
diagrams in a range of subfields from phonetics to discourse
analysis could also benefit from a modern InfoVis treatment.

FUTURE DIRECTIONS

There are a few refinements that we would like to make
to xLDD. In response to the user feedback, we would like to
further experiment with different shapes of arcs and arrows,
changing them dynamically when zooming. Refining the
panning and choosing appropriate arc curve shapes are also
on the list of things to do. Another improvement would be to
allow different textures (e.g. dashes) for the arcs, though this
would be a bit challenging since Protovis does not currently
support line textures. Other technical challenges lie on the
linguistic side. As mentioned above, not all dependency
structures include the connections with the actual words in
the original sentence, so they cannot be used directly with
xLDD (though they can be used in other visualizations). One
goal is to reconstruct those connections with the words for
certain major dependency structure formats, where possible,
as in e.g. [9], though without changing or omitting
information as done in those efforts.
An additional linguistic issue is the presence in some
dependency structures (like the PARC 700) of items that do
not appear in the original sentence, but which are analytical
constructs (such as “understood” subjects, e.g. in I want to
go “I” is understood as the subject of “go” in addition to
“want”, although “I” only occurs in the sentence once). We
have done some preliminary tests with dependency structures

ACKNOWLEDGMENT
Dick Hudson kindly provided us with background on the
origin and nature of dependency structures. We also thank
our colleagues for the cheerful participation in the usability
testing.
REFERENCES
Wordle url: http://www.wordle.net/
Christian Rohrdantz et al., “Visuelle Textanalyse,” Informatik
Spektrum, vol. 33(6), Dec. 2010, pp. 601-611, doi:
10.1007/s00287-010-0483-x.
[3] Martin Wattenberg and Fernanda B. Viégas, “The word tree,
an interactive visual concordance,” IEEE Transactions on
Visualization and Computer Graphics, vol. 14(6), Nov.-Dec.
2008, pp. 1221-1228, doi: 10.1109/TVCG.2008.172.
[4] Frank van Ham, Martin Wattenberg, and Fernanda B. Viégas,
“Mapping text with phrase nets,” IEEE Transactions on
Visualization and Computer Graphics, vol. 15(6), Nov.-Dec.
2009, pp. 1169-1176, doi: 10.1109/TVCG.2009.165.
[5] Chris Collins, Gerald Penn, and Sheelagh Carpendale,
“Interactive visualization for computational linguistics,”
ACL-08:
HLT
Tutorials,
2008,
http://www.cs.utoronto.ca/~ccollins/acl2008-vis.pdf
[1]
[2]

168

[6]

[7]
[8]

[9]

[10]

Chris Culy and Verena Lyding, “Visualizations for
exploratory corpus and text analysis,” Proc. of the 2nd
International Conference on Corpus Linguistics (CILC-10),
May 13-15, 2010, pp. 257-268.
EAGLES
url:
http://www.ilc.cnr.it/EAGLES96/segsasg1/node44.html
Tracy H. King, Richard Crouch, Stefan Riezler, Mary
Dalrymple, and Ronald M. Kaplan, “The PARC 700
Dependency Bank,” Proc. of the 4th International Workshop
on Linguistically Interpreted Corpora, held at the 10th
Conference of the European Chapter of the Association for
Computational Linguistics (EACL'03), 2003.
Tomas By, “The Kalashnikov 691 Dependency Bank,” Proc.
of the Sixth International Language Resources and Evaluation
(LREC'08). May 28-30, 2008, Nicoletta Calzolari
(Conference Chair), Khalid Choukri, Bente Maegaard, Joseph
Mariani, Jan Odjik, Stelios Piperidis, Daniel Tapias.
Martin Wattenberg, “Arc Diagrams: visualizing structure in
strings,” Proc. IEEE Symposium on Information Visualization

[11]
[12]
[13]
[14]
[15]

[16]
[17]
[18]
[19]

169

(InfoVis'02), IEEE Computer Society, pp. 110-116. doi:
10.1109/INFVIS.2002.1173155.
Richard Hudson, English Word Grammar. London:
Blackwell, 1984.
ANNIS2
url:
http://www.sfb632.unipotsdam.de/d1/annis/visualizations.html
Pisa
DgAnnotator
url:
http://medialab.di.unipi.it/Project/QA/Parser/DgAnnotator/
TrED url: http://ufal.mff.cuni.cz/~pajas/tred/
Mike Bostock and Jeffrey Heer, “Protovis: a graphical toolkit
for visualization,” IEEE Transactions on Visualization and
Computer Graphics, vol. 15(6), Nov./Dec. 2009, pp. 11211128, doi: 10.1109/TVCG.2009.174.
CoNLL-X url: http://nextens.uvt.nl/~conll/
TDS url: http://staff.science.uva.nl/~fsangati/TDS/
Calligramme
Dep2pict
url:
http://wikilligramme.loria.fr/doku.php?id=dep2pict:index
Corpus PAISÀ url: http://www.corpusitaliano.it

