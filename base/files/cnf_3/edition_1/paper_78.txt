2011 15th International Conference on Information Visualisation

G1 Continuity Conics for Curve Fitting using Particle Swarm Optimization
Zainor Ridzuan Yahya ∗, Abd Rahni Mt Piah † and Ahmad Abd Majid ‡
School of Mathematical Sciences,
Universiti Sains Malaysia, 11800 USM, Pulau Pinang, Malaysia
Email: ∗ zainor.usm@gmail.com, † arahni@cs.usm.my, ‡ majid@cs.usm.my
II. C ONICS CURVE
A standard form of conics is given by [4] and [5]:

Abstract—We solve curve fitting problems using Particle
Swarm Optimization (PSO). PSO is used to optimize control
points and weights of two conic curves to a set of data points.
PSO is used to find the best middle control point and weight
for both conic curves to provide piecewise conics that preserve
tangent continuity. We present the numerical result and an
application using our proposed curve fitting technique.

r(t) =

I. I NTRODUCTION
1

Curve fitting is the process of constructing a curve, or
mathematical function, that has the best fit to a series of
data points, possibly subject to constraints. Curve fitting can
involve either interpolation, where an exact fit to the data
is required, or smoothing, in which a ’smooth’ function is
constructed that approximately fits the data. A related topic
is regression analysis, which focuses more on questions of
statistical inference such as how much uncertainty is present
in a curve that is fitted to data observed with random errors.
Fitted curves can be used as an aid for data visualization, to
infer values of a function where no data are available, or to
summarize the relationships among two or more variables.
Extrapolation refers to the use of a fitted curve beyond
the range of the observed data, and is subject to a greater
degree of uncertainty since it may reflect the method used
to construct the curve as much as it reflects the observed
data.
Particle Swarm Optimization(PSO) is an optimization
technique proposed by Kennedy and Eberhart by means of
particle swarm [1]. PSO incorporates swarming behaviours
observed in flocks of birds, school of fish, swarm of bees
and even social behaviour, from where the idea emerged.
PSO is a population-based optimization tool, which could be
implemented and applied easily to solve various function optimization problems, or problems that can be transformed to
function optimization problems. As an algorithm, the main
strength of PSO is its fast convergence, which compares
favourably with many global optimization algorithms like
Genetic Algorithm (GA) [2], Simulated Annealing (SimA)
[3] and other global optimization algorithms. To apply PSO
succesfully, one of the key issues is finding how to map the
problem solution into the PSO article, which directly affects
its feasibility and performance.

1550-6037/11 $26.00 © 2011 IEEE
DOI 10.1109/IV.2011.27

(1)

where bi (i = 0, 1, 2) are the control points of the Bezier
curve and w is the middle weight. Here we list some useful
properties of conics:
1) for w < 1, we obtain an ellipse; for w = 1, a parabola;
and for w > 1, a hyperbola.
2) the straight line segments [b 0 , b1 ] and [b1 , b2 ] are
tangents to r at r(0) = b0 and r(1) = b2 , respectively.
3) for w ≥ 0, the curve segment (1) lies in the convex
hull of the control polygon.
4) the point s = r(1/2) of a conic segment in its standard
form is called the shoulder point. It can be computed
from
1
1
s = q0 + q1 ,
2
2
where
b0 + wb1
wb1 + b2
q0 =
, q1 =
,
1+w
1+w
the characteristic points. The shoulder tangent is
spanned by q 0 and q1 . Note that the shoulder tangent
is parallel to [b0 , b2 ]; see Fig. 1(a). As a consequence,

Keywords-curve fitting; particle swarm optimization;

1 http://en.wikipedia.org/wiki/Curve

B02 (t)b0 + wB12 (t)b1 + B22 (t)b2
B02 (t) + wB12 (t) + B22 (t)

w=

s−m
b1 − s

where m is the midpoint of b 0 and b2 .
5) The curvature κ of r at the endpoints is given by:
τ
τ
κ(0) = 2 2 , κ(1) = 2 2
(2)
w ρ
w λ
where τ denotes the area of the triangle formed by the
control polygon; i. e. τ = 12 det(b1 − b0 , b2 − b1 ), ρ =
b1 − b0 and λ = b2 − b1 . Note that κ denotes the
signed curvature, since τ may be positive or negative.
Suppose we have two conic curves P (t) with control points
p0 , p1 and p2 and Q(t) with control points q 0 , q1 and q2
(refer Fig. 1(b)). From [5], to achieve G 2 continuity , the
two curves P (t) and Q(t) must share the same curvature at
p2 = q0 with
τP
τQ
= 2 2
(3)
2
2
wP λP
wQ ρQ

fitting

497

b

1

1

q

1

0.9

ρ

Q

0.8

p =q
2

0.8

0

0.7

q

τQ

λ

1

P

0.6

p

1

0.6

s

0.5

0

τ

0.4

b2

q

0.4

P

0.3

q

2

0.2

m

0.2

0.1

0

b0

0

p

0

0

0.2

0.4

0.6

0.8

1

1.2

1.4

1.6

1.8

−0.1

2

(a) Shoulder point: A rational quadratic with shoulder point s and shoulder
tangent through q0 and q1
Figure 1.

0

0.5

1

1.5

2

2.5

3

(b) Curvature continuity: Two adjacent conic segments

The properties of conic curves

where τ , λ and ρ are as described in equation (2).

takes into account the motion of all the particles in the
preceding program iterations, naturally its definition ’as
swarm confidence’ is apparent. After having calculated the
velocities and position for the next time step t + 1, the
first iteration of the algorithm is completed. Typically, this
process is iterated for a certain number of time steps, or
until some acceptable solution has been found or until an
upper limit of CPU usage has been reached. The algorithm
can be summarized in the following pseudo code:

III. PARTICLE S WARM O PTIMIZATION
PSO starts by having a population of particles initialized
with random positions marked by vector x i and random
velocities vi [6]. The population of such particles is called
a ’swarm’ S. Each particle P has two state variables viz.,
its current position x(t) and its current velocity v(t). It is
also equipped with a small memory comprising its previous
best position p(t), i.e., the personal best experience and the
best p(t) of all P , g(t), i.e., the best position found so far
in the neighbourhood of the particle. The PSO scheme has
the following algorithmic parameters:
• Vmax or maximum velocity which restricts Vi (t) within
the interval [−Vmax , Vmax ];
• an inertia weight factor ω;
• two uniformly distributed random numbers, 0 ≤
ϕ1 , ϕ2 ≤ 1 on the velocity update formula.
• two constant multiplier terms C 1 and C2 known as
’self-confidence’ and ’swarm confidence’, respectively.
Initially, p(t) and g(t) are set as p(0) = g(0) = x(0)
for all particles. Once the particles are all initialized, an
iterative optimization process begins, where the positions
and velocities of all the particles are altered by the following
recursive equations (4) and (5). The equations are presented
for the dth dimension of the position and velocity of the ith
particle.
Vid (t + 1) = ω.vid (t) + C1 .ϕ1 .(pid (t) − xid (t))
+C2 .ϕ2 .(gid (t) − xid (t))

(4)

xid (t + 1) = xid (t) + vid (t + 1)

(5)

The PSO Algorithm
Input: Randomly initialized position and velocity of the
particles: Xi (0) and Vi (0)
Output: Position of the approximate global optima X ∗
Begin
While terminating condition is not reached
Begin
for i=1 to number of particles
Evaluate the fitness:=f (Xi );
Update pi and gi ;
Adapt velocity of the particle
using equation 4 and 5;
Update the position of the particle;
increase i;
end while
end
IV. B I -C ONIC G1 C URVE F ITTING
Most of the techniques used in conic curve fitting choose
weight = 1 as the initial value and using the least square
technique to estimate the control points. Once we get the
data points, we find the midpoint of the data point which
is the endpoints for both left and right curves. Then, we
approximate the intermediate control point of the left curve
using least square. After that, we choose the size of the
search area to find the best value for point control. Different
from the original PSO, we have the search space size = 1,
where control points are searched in the search space (see

The first term in the velocity updating formula represents the
inertial velocity of the particle. Since the coefficient C 1 has
a contribution towards the self-exploration (or experience)
of a particle, we regard it as the particle’s self-confidence.
On the other hand, the coefficient C 2 has a contribution
towards motion of the particles in global direction, which

498

1.4

Data points
Middle point
Particle Swarm

Search space

0.9

Particle sample solution
1.2

0.8
1
0.7

0.6

0.8

0.5
0.6

Sum square
error as
objective
function

0.4

0.4

0.3

0.2
0.2
0.1
0
0

−0.1

0

0.5

1

1.5

2

2.5

3

3.5

−0.2

4

0

0.5

1

(a) Search space with PSO initialization
Figure 2.

1.5

2

2.5

3

3.5

4

(b) Sample solution
The process to obtain sample solution

Table I
PSO ITERATIONS FOR FITTED CURVES

Fig. 2(a)). For each particle from the initialization, we find
the location for the intermediate point of the right curve to
achieve G1 continuity (see Fig. 2(b)). Evaluation will be
done for each particle solution using sum square error [7].
To find the weight, the initial value of the weight will be
chosen at random in the range of [0,1]. Our proposed PSO
algorithm starts with having an initial swarm position of
swarm size= 25. PSO is used to find the best control point
and weight to provide the best fitted curve the given data. For
the PSO scheme, we set inertia ω = 1.0 and C 1 = C2 = 2.0.
For our stop criterion, the iterations will stop if the same
error is repeated 20 times. The pseudo code of our proposed
technique is given below. Fig. 3(a) and 3(b) explained our
research findings.

#
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20

Our Proposed PSO Curve Fitting Algorithm
For each segment until last segment
Get data points;
Find middle point from chord length
parameterization;
Use Least Square to approximate the
intermediate point for left curve;
Determine search space for finding intermediate
control points;
Initialization
Initialize intermediate control point for each particle;
Initialize weight (random choose from [0,1])
for each particle;
For i = 1 until last iteration
For j = 1 until number of particle
Update the left control point of the particle;
Calculate the right control point to achieve G 1 ;
Update the left conic weight;
Calculate the right conic weight;
Evaluate solution (newSolution);
If newSolution better than bestSolution
bestSolution=newSolution;
bestControlPoint=newControlPoint;

# iter.
225
182
167
224
255
212
208
293
307
347
397
162
226
239
223
216
210
204
349
162

Best error
0.01676684
0.015141434
0.019376049
0.014112258
0.020400675
0.012698477
0.015141952
0.012909775
0.01270423
0.01180574
0.012711394
0.024681615
0.015162703
0.012309645
0.014611253
0.015168622
0.017129725
0.022841566
0.014626932
0.016766049

Average error
0.017172396
0.015233733
0.019597467
0.014575132
0.020483788
0.012934463
0.015270387
0.012998558
0.012880085
0.01194918
0.012805794
0.025241859
0.015243114
0.012562997
0.014725769
0.015281159
0.017432969
0.023161461
0.014918098
0.016946505

CPU time(sec)
3.0108193
2.4648158
2.2308143
2.9952192
3.4632222
2.8392182
2.808018
3.9156251
4.0716261
4.6488298
5.2728338
2.1684139
2.9952192
3.2136206
2.9796191
2.9172187
2.7768178
2.7456176
4.7268303
2.1528138

bestWeight=newWeight;
end If
Update velocity for control point and weight;
increase j;
end For
increase i;
end For;
end
V. N UMERICAL R ESULTS AND A PPLICATION
We look at the efficiency of using PSO to optimize biconic
G1 . Iterations will be done 20 times and we compare the
efficiency of the algorithm based on their CPU time, number
of iterations and best error. Table I explains our findings. It
is shown that best error occurs at the 10 th iteration. The
fastest iteration is at the 20th iteration. Therefore the result
is acceptable. We use font design to show an application of
soft computing for curve fitting. We match our conic curves

499

1.8

2

1.6

1.5

1.4

1.2
1
1

0.8
0.5
0.6

0.4
0

0.2

0

0

0.5

1

1.5

2

2.5

3

3.5

−0.5

4

(a) After 175th iteration
Figure 3.

0

0.5

1

1.5

2

2.5

3

3.5

4

(b) The final iteration

G1 continuity conics for curve fitting using Particle Swarm Optimization

to an arabic font ’Li’. In the pre-processing, we need to
perform some image processing techniques on the image.
At first, we find the boundaries of the image (Fig. 4(a)) .
Then, we use the SAM06 technique [8] to identify the edges
of the image (Fig. 4(b)). Finally, curve fitting is performed
to obtain the best conic curve(Fig. 4(c)).

[6] S. Das, A. Abraham, and A. Konar, “Particle swarm optimization and differential evolution algorithms: Technical analysis,
applications and hybridization perspectives,” Advances of Computational Intelligence in Industrial Systems, pp. 1–38, 2008.
[7] F. Yahya, J. M. Ali, A. A. Majid, and A. Ibrahim, “An
automatic generation of G1 curve fitting of arabic characters.”
Los Alamitos, CA, USA: IEEE Computer Society, 2006, pp.
542–547.

VI. C ONCLUSION
Instead of using a direct technique, we use an indirect
technique to perform curve fitting. To find the best solution,
we need to map the curve fitting problem to the best PSO
scheme. In future, we will try to use similar algorithm
to solve surface fitting problem. The effects of changed
parameters found in PSO scheme will also be studied. It
can be shown that PSO does not give a very good solution,
but the error is within acceptable region.

[8] M. Sarfraz, Interactive Curve Modeling With Applications to
Computer Graphics, Vision and Image Processing. Springer,
2008.

ACKNOWLEDGEMENTS
The authors would like to thank Universiti Sains
Malaysia for supporting this research under its RU grant
1001/PMATHS/817049.
R EFERENCES
[1] T. Weise, Global Optimization Algorithms Theory and Application , T. Weise, Ed. http://www.it-weise.de/, 2009.
[2] A. Eiben and J. Smith, Introduction to Evolutionary Computing, Springer, Ed. Springer, 2007.
[3] S. Kirkpatrick, J. Gelatt, C. D., and M. P. Vecchi,
“Optimization by simulated annealing,” Science, vol.
220, no. 4598, pp. 671–680, 1983. [Online]. Available:
http://www.sciencemag.org/cgi/content/abstract/220/4598/671
[4] X. Yang, “Curve fitting and fairing using conic splines,”
Department of Mathematics, Zhejiang University , Hangzhou
310027, China, Tech. Rep., 2003.
[5] G. Farin, “Curvature continuity and offsets for piecewise
conics,” ACM Trans. Graph., vol. 8, no. 2, pp. 89–99, 1989.

500

(a) Boundary extraction

(b) Corner detection: corner detected with red circle

(c) Curve fitting: fitted curve in blue colour
Figure 4.

From boundary extractions to curve fitting

501

