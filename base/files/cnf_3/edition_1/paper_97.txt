2011 15th International Conference on Information Visualisation

CCVis: A Software Plugin for Unified Visualisation in ContraCancrum based on
VTK Extensions
Youbing Zhao1, Gordon J. Clapworthy1, Yubo Tao1,2, Feng Dong1, Hui Wei1, Tao Wang1
1

Centre for Computer Graphics & Visualisation, University of Bedfordshire, UK
2
State Key Lab. of CAD&CG, Zhejiang University, China

{youbing.zhao, gordon.clapworthy, yubo.tao, feng.dong, hui.wei, tao.wang@beds.ac.uk}
analysis of complex shaped tumours and time-varying
data series.
Visualisation is a powerful tool for presenting
information in a more integrative and intuitive form. It
can convert a huge amount of high dimensional data,
which may be difficult for the human brain to process,
into visual signals which can be more easily and quickly
understood. Medical visualisation provides direct surface
or volume rendering of tissues and organs in 3D space,
which makes it easier to locate, highlight and analyse
targets of user interest.
The aim of CCVis is to provide ContraCancrum
researchers and doctors with a tailored tool to
interactively view and analyse the progress of the tumour
as to simulate the predicted outcomes of the proposed
treatment, It provides functions that cannot be fully
satisfied by existing software and enables the users to
investigate tumour development and treatment
interactively and to gain a more intuitive and
comprehensive understanding of the tumour size, shape,
position and composition at different time points.
For visualisation of the patient data in CCVis, slice
views with highlighted tumour segmentation are useful
to position tumours in 3D space. 3D surface and volume
rendering of the segmented tumour is needed in order to
display the shape of tumours and their relation to body
tissues. For visualisation of simulation data, dynamic 3D
rendering of the simulated tumour volume is required
and the statistics of the tumour simulation have to be
plotted as 2D graphs. Time-varying animation is needed
for both the patient data and the simulation data to show
tumour changes and to evaluate the effects of the
treatment.
To achieve the above, the following facilities are
provided:
• axis-aligned slice view
• arbitrary slice view
• isosurface rendering
• volume rendering
• time-varying visualisation
• 2D graph plotting of simulation statistics.
This paper presents the detailed design and
implementation of CCVis for unified visualisation of
patient images and tumour simulation data as a plugin of
the DrEye [2] platform used by ContraCancrum. Major
extensions of the Visualization Toolkit (VTK) [3] have

Abstract
Medical visualisation is an indispensable means for
doctors and researchers to better explore and analyse
medical images. The EC-funded ContraCancrum project,
which aims at more predictable tumour simulation and
treatment, uses visualisation as an important tool to
interactively display tumour development and tumour
simulation. This paper presents CCVis – the
visualisation tool in ContraCancrum – which is a Qtbased plugin of the DrEye platform. CCVis uses a
unified architecture for visualisation of the patient image
data and tumour simulation data. It provides axisaligned and arbitrary slice views, isosurface rendering
and volume ray casting as well as time-varying
visualisation of patient image series and simulation data.
Statistics in tumour simulation are plotted as 2D graphs.
Major extensions of the Visualization Toolkit (VTK) are
made to meet the demands for label highlighting and
multi-dimensional transfer function.
Keywords: ContraCancrum, DrEye plugin, VTK
extensions, slice views, multi-layered isosurface,
multi-dimensional transfer function, time-varying

1. Introduction
ContraCancrum is an EC-funded project [1] which
aims to boost the translation of clinically validated multilevel cancer models into clinical practice. To this end,
the project has designed and developed a composite
multi-level platform for simulating malignant tumour
growth, as well as tumour response to therapeutic
modalities and treatment schedules. In this process,
accurate tumour identification in patient study images
and reliable tumour simulation are key to the success.
Medical imaging technology continues to advance
rapidly and the use of medical images from, for example,
MRI or CT, have become indispensable for the diagnosis
of a variety of diseases. Tumour simulation and
evaluation in ContraCancrum is based on the accurate
segmentation of tumours in patient study images. The
traditional practice of radiologists was to study image
slides by eye and analyse information in their heads.
However, this method relies heavily on personal
experience and is far from intuitive, especially for the
1550-6037/11 $26.00 © 2011 IEEE
DOI 10.1109/IV.2011.80

610

been made to meet the special visualisation demands of
ContraCancrum

which may be used by or adapted into CCVis, such as
isosurface rendering, orthographic slice view, simple
volume rendering. CCVis uses VTK 5.6 as the base for
its visualisation module. However, major extensions to
VTK 5.6 have to be made as it lacks some important
functions needed by ContraCancrum, such as arbitrary
slicing with label highlighting, multi-dimensional
transfer function based volume rendering, etc.
Qt is an open source, cross-platform application and
UI framework with a large commercial and academic
user community. The licence of Qt changed to LGPL
from 2009, so increasing numbers of users have been
joining the Qt community. For example, 3D Slicer [7]
will shortly move from KWWidgets to the Qt platform.
There are also many visualisation-related Qt-based opensource projects available, such as MITK [8]. In CCVis,
Qt is used for implementation of the user interface. The
Qt-based plotting library QWT [9] is used for the 2D
graph plotting.
As mentioned earlier, CCVis has to provide slice
views and volume rendering of both the patient data and
simulation data. As patient image series and simulation
data are both expressed as volume data, to avoid
redundancy and improve reusability, these functions can
be shared between the two data types. In the CCVis
architecture, the patient data visualisation module and
the simulation data visualisation module share a common
visualisation core, but have their own data import
interfaces, as shown in Figure 1. The benefit of this
unified design is that the visualisation module can be
separated and reused, thus reducing the complexity of the
system as a whole.

2. Architecture
DrEye [2] is used as the main platform for medical
imaging processing in ContraCancrum. DrEye is .NET
based software developed by the Foundation for
Research and Technology – Hellas, Greece (FORTH)
with the support of the Philips Research Centre and the
University of Bern and is available freely to the scientific
community [4]. It supports semi-automatic and manual
segmentation of medical images in DICOM format. In
ContraCancrum, DrEye is used for tumour segmentation
and annotation – various layers of tumours are identified
and annotated with different labels.
DrEye provides an architecture for customised
plugins
to
accommodate
additional
imaging
functionalities. Thus, interpolation and registration have
been developed as DrEye plugins and integrated into
DrEye. DrEye also provides basic isosurface
visualisation of segmentation. However, the lack of
advanced visualisation capabilities such as volume
rendering and slice-based views made it too limited for
the visualisation requirements of ContraCancrum.
Consequently, a dedicated visualisation software tool
was proposed by the participants of ContraCancrum and
implemented as a DrEye plugin.
Figure 1 shows the architecture of CCVis which is
based on VTK [3], Qt [5], GDCM [6] and is wrapped as
a DrEye plugin.
As the most popular visualisation toolkit, VTK
provides a variety of visualisation functions and widgets

Simulation Data Visualisation

Patient Data Visualisation
Image Voume
Generation

Label
Volume Generation

Axis-aligned
Slice
Plugin

DICOM
Reader

DrEye Annotation
Parser

GDCM

Arbitary
Slice

Volume
Rendering

Label Highlight

2D TF

Time
Varying Vis

UI

VTK Extensions

VTK

DrEye

2D Graph

Isosurface
Vis

QWT

Qt

Simulation
Statistics
Reader

Simulation
Volume
Data
Reader

Figure 1. CCVis architecture

3. Patient image data visualisation

series. Segmentations of the tumour are generated semiautomatically in DrEye and stored as DrEye annotations.
DICOM images with DrEye annotations form the patient
data inputs for CCVis.
3.1.1 DICOM image reading
As CCVis is Qt-based while DrEye is .NET-based,
CCVis cannot use the APIs from DrEye to read the
DICOM images or parse the corresponding annotations.
Moreover, our experience with the .NET based DICOM
reading in DrEye was that it is slow compared to other
C++ implementations, especially when reading large
data sets.

3.1. Data interface
In ContraCancrum, the patient data are DICOM [10]
images from MRI or CT studies; tumour segmentation is
subsequently generated by DrEye. In the DICOM model,
a study comprises several image series, with each series
generally equating to a position of the patient on the
acquisition device or to a specific type of data. A series
is usually composed of multiple sequentially scanned
images which constitute a 3D volume. Each patient may
have multiple studies taken at different times during the
treatment, which can be visualised as a time-varying

611

To solve the problem, CCVis uses a popular
DICOM image reader Grassroots DiCoM (GDCM) [6] to
read the DICOM images, and designed our own C++
based DrEye annotation parser. GDCM is a C++ library
which implements the DICOM base standard part 5 that
concentrates on image file format. The Insight Toolkit
(ITK) [11] also uses GDCM to read/write DICOM
images.
3.1.2 DrEye annotation structure
Annotations generated by DrEye are labelled pixels
on the corresponding images. In ContraCancrum, they
represent segmentations of different layers of tumours. A
DrEye annotation contains doctor name, time stamp,
label name, colour and point list which are organised in
an XML format as shown in Figure 2. Annotations can
be stored as separate XML files or embedded in the
corresponding DICOM images as TextValue Tags
(0x0040, 0xa160). In an image series, annotations are
essentially labelled 3D voxels; thus, a label volume can
be generated after parsing all the annotations attached to
a given image series. In ContraCancrum, a byte label
volume is enough to represent all label values. Tumour
volume size can also be estimated by calculating the
number of labelled voxels in the annotations.

Figure 3. Axis-aligned slice view
3.2.2 Arbitrary slice view
Axis-aligned slices provide orthographic slice views
of volume data, but the constraint on slice directions
limits the freedom of interactive viewing and exploration.
As the shapes of tumours are usually irregular, a cutting
plane with arbitrary directions may further help the user
to obtain information of the shape and interior of
tumours from arbitrary angles, as shown in Figure 4.

<Annotations>
<Annotation>
<Doctor>ADMINISTRATOR</Doctor>
<Timestamp>2010/04/03/20:32:41</Timestamp>
<Label>Tumor</Label>
<Color>255 255 0 0</Color>
<Points>339 224 340 224 339 225 340 225 338 226 </Points>
</Annotation>
</Annotations>

Figure 2. A DrEye annotation example

3.2. Slice views
To better locate the tumour position and understand
the shape of the tumours, the users need multiple slice
views of the same data in the visualisation environment.
Interactive slice views are provided for visualising both
the patient images and the tumour simulations. There are
two types of slice views: axis-aligned and arbitrary. Both
allow the user to move the slices interactively.
vtkImagePlaneWidget supports both axis-aligned and the
arbitrary slicing of volume data but it does not satisfy the
requirements of ContraCancrum. To meet this challenge,
major extensions were made to vtkImagePlaneWidget;
these will be described in detail in Section 3.2.3.
3.2.1 Axis-aligned slice view
Orthographic slice views are a familiar way of
presenting medical image data to doctors and biomedical
researchers. CCVis provides the usual three axis-aligned
slice views parallel to the coordinate planes. Axisaligned views show sagittal, coronal and transversal
images in one or multiple views. Hence, the user can
view the shape of the tumour from multiple directions at
the same time, thus facilitating the understanding of the
tumour shape and position, as shown in Figure 3.

Figure 4. Arbitrary slice view
3.2.3 Unified implementation of axis-aligned slice and
arbitrary slice
CCVis provides a unified implementation of both
the axis-aligned slice and arbitrary slice based on
extended vtkImagePlaneWidget to support overlay of a
label
volume.
An
auxiliary
widget
vtkImplicitPlaneWidget is used for user interaction to
make the slice outline conform to the volume and
remove black pixels outside the volume. Axis-aligned
slicing is achieved by constraining the plane orientation
to the coordinate axes.
• External region removal
While vtkImagePlaneWidget supports arbitrary
slicing, its image slice (generated internally by
vtkImageReslice) is always rectangular and does not
follow the shape of the volume data. Regions outside the
612

volume will be set to black. It is not possible to remove
the external regions by use of a colour lookup table as
there are also black voxels in the volume. This limitation
makes it difficult to understand and estimate the true
position of the tumour inside the volume.
To show the external regions as transparent,
extensions to vtkImagePlaneWidget were made. A mask
image is calculated based on the cutting plane.
vtkImageMask is then used to unmask all the pixels
outside the volume on the image slice.
• Slice outline
As vtkImagePlaneWidget uses rectangular slices, the
widget outline is also rectangular and does not follow the
shape of the volume data.
To show the widget outline as a polygon shape that
conforms to the volume data, an auxiliary plane widget
vtkImplicitPlaneWidget is used for user interaction and
display of the outline. Synchronisation of plane position
and orientation between vtkImplicitPlaneWidget and
vtkImagePlaneWidget is made whenever there is user
interaction.

Figure 5. Isosurface rendering with an
axis-aligned slice

3.4. Multi-dimensional transfer function based
volume rendering
Volume rendering is helpful for visualising the
contents of volume data. In ContraCancrum, it helps the
doctors to understand the composition, position and
shape of the tumour and the space relationship between
the tumour and related tissues. Hybrid rendering of the
isosurface and volume rendering is desirable to show
layered tumours in relation to the structures of normal
body tissue in 3D space.
Volume rendering based on multi-dimensional
transfer functions [13] can improve detail presentation
and discrimination compared to rendering based on 1D
transfer functions. It is critical to discriminate tumours
and their surrounding tissues in ContraCancrum.
However, the intensity of the tumours encountered often
differs very little from that of the surrounding tissue, thus
a 1D transfer function can not distinguish sufficiently to
produce a clear result. Consequently, multi-dimensional
transfer function based volume rendering is preferred to
accommodate this feature of the data.
VTK 5.6 provides several volume rendering classes
(referred to as data mappers in VTK); however, none of
them supports a multi-dimensional transfer function.
Consequently, we extended VTK with our own class of
GPU-based ray casting to provide a unified interface to
volume rendering based on both 1D transfer functions or
multi-dimensional transfer functions.
3.4.1 GPU-based ray casting and VTK
GPU-based ray casting was first proposed by Krüger
and Westermann [14] and is widely accepted now as the
leading technique for rendering volume data at
interactive frame rates. For each pixel of the image plane,
a ray is cast through the volume from the viewpoint; it
samples the scalar values inside the volume along the ray.
A transfer function is applied to each scalar value to
obtain the colour and opacity of the sample, and these
values are combined based on the volume rendering
integral to generate the final colour of the associated
pixel. Due to the programmability and flexibility of
modern GPUs, this single-pass ray casting can be

• Tumour highlighting
vtkImagePlaneWidget does not support highlighting
of additional label volumes, which is indispensable in
ContraCancrum. To meet this challenge, major
extensions of vtkImagePlaneWidget were made. An
extended image slicing widget is derived from
vtkImagePlaneWidget. An additional label volume is
added and slicing is performed for both the data volume
and label volume. The label values in the label slice are
firstly converted into colours via the user-specified
colour lookup table and then blended with the data slice
by use of vtkImageBlend. As the transparency of the
label slice can be adjusted through vtkImageBlend, the
user can interactively change the transparency of the
label overlay.

3.3. Multi-layer isosurface rendering
As tumours are generally composed of different
layers, such as necrotic, cyst, oedema, proliferate, etc,
isosurface rendering is useful to show the shape and
composition of tumours.
The most popular algorithm for generating
isosurfaces is the marching cube algorithm [12]. VTK
provides two types of marching cube algorithm:
vtkMarchingCubes and vtkDiscreteMarchingCubes. The
former is for isosurface generation of continuous data
types, while the latter is specially designed for discrete
data types. As our volume has discrete scalars,
vtkDiscreteMarchingCubes is used to generate the
isosurfaces.
After isosurfaces of all scalar values are extracted,
vtkThreshold is used to select the isosurfaces with the
specified label value. These isosurfaces are stored in a
list for future rendering. Layer isosurfaces with different
label values can be selectively turned on and off.
Isosurface rendering along with an axis-aligned slice is
shown in Figure 5.

613

transfer the composed GLSL fragment code to the GPU
for rendering. The tumour can be rendered using either
form of transfer function at interactive frame rates.
Although we have implemented only 1D and 2D
transfer functions [13] in our framework, other
dimensional transfer functions could easily be integrated
in a similar way. Figure 6 is an example of a 2D transfer
function based volume ray casting with isosurface
rendering.

implemented in the fragment shader of the GPU, and the
rendering efficiency is greatly improved.
VTK 5.6 already provides OpenGL-based GPU ray
casting in vtkOpenGLGPUVolumeRayCastMapper, and
its fragment shaders are written in the OpenGL shading
language (GLSL) [15]. The GLSL code of the singlepass ray casting is decomposed into several files, such as
the ray construction (HeaderFS), the ray cast loop
(CompositeFS and CompositeMaskFS), and the
composite
mode
(OneComponentFS
and
FourComponentFS). Thus, a new shading algorithm can
be quickly implemented by providing only the different
part of the code.
The entire volume is stored in a single 3D texture in
VTK, and the fragment shader is invoked to cast the ray
into the volume. The window coordinates of the ray are
transformed to texture coordinates to obtain the starting
position of the 3D texture. The colour and opacity of
each sample is interpolated from the transfer function at
the sampled scalar value. Currently, VTK 5.6 supports
only a 1D transfer function (vtkOpacityTable and
vtkRGBTable).

3.5. Time-varying visualisation
The visualisation of time-dependent patient image
series and simulation data requires time-varying
animation of the change of tumour shape and position.
Patient studies are sorted in time order before they are
visualised sequentially. This is achieved by userspecified ordering or by retrieving the StudyTime
(0008,0030) tag in DICOM images.
Time-varying visualisation of patient data also
demands the registration of patient data at different time
points as they may have different positions, dimensions
or even spacing. The registration of volume data and the
transformation of their corresponding label volumes is
performed by the University of Bern as a DrEye plugin
using ITK registration. The registered patient image data
and label volumes are then provided as inputs to CCVis.

3.4.2 Implementation
vtkOpenGLGPUVolumeRayCastMapperMD is a
new class that was implemented to support both 1D and
2D transfer functions within the VTK framework. It is
inherited from vtkGPUVolumeRayCastMapper, so it can
be used without a need to change the source code of
original VTK application.
The new class has the same features as
vtkOpenGLGPUVolumeRayCastMapper, and it further
supports the widely used 2D transfer functions [13]
which take the scalar value and gradient magnitude as
lookup table entries. Two auxiliary classes,
vtkOpacityTable2D and vtkRGBTable2D are provided to
support 2D transfer functions. These are used to store the
2D opacity table and the 2D RGB table, respectively, in
the CPU memory. As 2D transfer functions require
gradient magnitude values, a new 3D texture is added to
store
the
gradient
magnitude
volume
in
vtkKWScalarField. The gradient magnitude volume is
evaluated and transferred to the GPU before volume
rendering.
As discussed above, the GLSL code of the fragment
shader comprises several code files. The framework can
be reused and only new code dedicated to the 2D transfer
function based volume rendering needs to be written.
Three
new
GLSL
files
(CompositeFS2D,
CompositeMaskFS2D and OneComponentFS2D) are
added in our implementation. CompositeFS2D and
CompositeMaskFS2D sample the opacity from the 2D
opacity texture, while OneComponentFS2D samples the
colour from the 2D RGB texture. These new files
together with the original GLSL files can be dynamically
composed into a run-time shading code to support
various rendering algorithms.
The user can switch the classification between a 1D
and a 2D transfer function at run time. The framework
can automatically update corresponding textures and

Figure 6. Hybrid 2D transfer function based
volume rendering with isosurface rendering

4. Simulation data visualisation
Tumour simulation in ContraCancrum is undertaken
by ICCS, Greece [16]. The generated simulation data are
composed of simulation volume data series and related
statistics. A special data import module is designed for
reading simulation volume data and simulation statistics.

4.1 Simulation volume data visualisation
The simulation volume data are essentially label
volumes with labels representing different tumour cell
types, such as normal, necrotic, proliferate, etc. Each
voxel in the label volume represents a certain number of

614

Another direction could be the integration of CCVis
with a web service based data retrieval system we have
implemented [17] for ContraCancrum. It would facilitate
data acquisition and visualisation if data could be fetched
directly from the online database.

cells in the tissue and the number of cells in the
simulation is usually several orders of magnitude larger
than the number of voxels. With the unified visualisation
core, the visualisation of the simulation volume data is
very similar to that of the patient volume data. Axisaligned slice, arbitrary slice, multi-layer isosurface
rendering and multi-dimensional volume ray casting are
all available for simulation volume visualisation. The
difference is that the simulation volume data themselves
are label volumes and the size of simulation volume data
is usually much smaller.

Acknowledgements
We would like to thank the following partners in the
project for their kind help and useful suggestions
throughout the development of the work reported: Prof.
Norbert Graf of Universitat des Saarlandes, Stefan Bauer
of Universitat Bern, Prof. Georgios Stamatakos of the
Institute of Communication and Computer Systems, Dr.
Konstantinos Marias of FORTH and Dr Jörg Sabczynksi
of Philips Research. Yubo Tao is partially supported by
NFS of China (No. 60903133) and Feng Dong is
partially supported by the Open Project Programme of
the State Key Lab of CAD&CG (Grant No. A1012),
Zhejiang University.

4.2 Simulation statistics visualisation
Simulation statistics are tumour related timedependent quantities, such as the number of cells of each
type and their percentage during tumour simulation.
2D plotting of polylines or fitted curves are used for
visualising time-varying tumour simulation statistics.
The implementation uses the Qt-based open source
plotting library QWT [9]. As the numbers of different
cell types can differ greatly from each other, an option of
logarithmic drawing is provided to show each curve
more clearly.
Visualisation of an examplar simulation data is
shown in Figure 7.

References
[1]
[2]

[3]
[4]
[5]
[6]
[7]
[8]
[9]
[10]
[11]
[12]

[13]

Figure 7. Visualisation of simulation volume
data and statistics

Conclusions

[14]

The plugin is available to the ContraCancrum
community freely. Responses from the end users show
that CCVis is an effective visualisation tool for
interactive viewing and analysis of tumour development,
treatment and simulation.
Further work may include slice interpolation from
multiple image series (saggital, coronal, transversal). As
the inter-slice distance of medical images is usually
much larger than the pixel distance in one image series, it
is common that two of the three orthographic slices are
in low resolution. If multiple image series are available,
interpolation from more than one data set will enhance
the resolution of slice views.

[15]
[16]

[17]

615

ContraCancrum, http://www.contracancrum.eu/
E Skounakis, C Farmaki, V Sakkalis, A Roniotis, K
Banitsas, N Graf, K Marias, DoctorEye: A clinically
driven multifunctional platform, for accurate processing
of tumors in medical images, Open Med Inf J, 4:105-115,
2010
The Visualization Toolkit (VTK), http://www.vtk.org
DrEye, http://biomodeling.ics.forth.gr/?page_id=8
Qt, http://qt.nokia.com/products/
Grassroots DICOM (GDCM),
http://sourceforge.net/projects/gdcm/
3D Slicer, http://www.slicer.org
MITK, http://www.mitk.org/
QWT - Qt Widgets for Technical Applications,
http://qwt.sourceforge.net/
DICOM, http://medical.nema.org/
Insight Toolkit (ITK), http://www.itk.org
W E Lorensen, H E Cline, Marching Cubes: A high
resolution 3D surface construction algorithm. Computer
Graphics, 21(4):163-169, 1987
J Kniss, G Kindlmann, C Hansen, Interactive volume
rendering using multi-dimensional transfer functions and
direct manipulation widgets. IEEE Visualization 2001,
pp. 255-262, 2001
J Krüger, R Westermann, Acceleration techniques for
GPU-based volume rendering. IEEE Visualization 2003,
pp. 287-292, 2003
OpenGL
Shading
Language,
http://www.opengl.org/documentation/glsl/
G S Stamatakos, V P Antipas, N K Uzunoglu, A
spatiotemporal, patient individualized simulation model
of solid tumor response to chemotherapy in vivo: the
paradigm of glioblastoma multiforme treated by
temozolomide. IEEE Trans Biomed Eng. 53(8):1467-77,
2006
T Wang, Y Zhao, E Liu, G J Clapworthy, X Zhao, H Wei,
F Dong, Using web services as functional-level plug ins
for interactive 3D medical visualisation, Proc
Information Visualisation 2010 (IV 2010), pp. 617-622,
2010

