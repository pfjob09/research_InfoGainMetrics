Multidimensional Visualization of Transition Systems
A. Johannes Pretorius, Jarke J. van Wijk
Technische Universiteit Eindhoven
a.j.pretorius@tue.nl, vanwijk@win.tue.nl

Abstract
Transition systems are graphs and it is natural to consider their visual representation as a graph visualization
problem. They also pose an interesting multidimensional
visualization challenge since every state may be considered
as a point in n-space. We discuss a number of approaches
toward projecting transition systems to the 2D plane by considering the dimensionality of the states. To asses these
techniques, we consider their ability to assist us in answering questions that are difﬁcult to address with conventional
methods.

may be formulated and checked (using modal logic, for instance). If it is not possible to deﬁne such questions precisely, the transition system cannot be adequately analyzed.
Interactive visualization adds a third technique. Results
by Van Ham et al. [10] show that when a transition system
is visualized and the users are enabled to interrogate this
representation, their knowledge of the system is substantially enhanced. Their method performs pre-processing on
the structure of a transition system to generate a tree that
serves as a backbone onto which all states and transitions
are projected. Ranking and clustering results in layers and
branches from which different phases in system behavior
are clearly discernable.

1. Introduction

2. Challenge

A state transition system consists of a set of states and a
set of transitions and describes a system whose states evolve
over time. Transitions are source-action-target triples where
the source and target are states and the execution of an action triggers a change of state. Speciﬁc actions can only be
executed from certain states and under certain conditions.
Transition systems may be generated from process algebraic descriptions of system behavior written in languages
such as µCRL [4]. In µCRL the behavior of parallel
processes with data can be characterized. Such a description is transformed to a transition system where transitions
are labeled and states consist of a valuation of data variables. These variables correspond to the union of all data
parameters in the speciﬁcation, extended with parameters
introduced by the translation program. Consequently, the
dimension n of every state is equal and there is a strong relationship between the values that the variables assume and
the original speciﬁcation.
Due to the complexity of such transition systems, insight
into their structure is often limited. There are two main
approaches for their analysis. The ﬁrst is to derive an abstracted, much smaller variant of the system (typically less
than 100 states) that is visualized as a graph by drawing
all states and transitions explicitly. Alternatively, speciﬁc
questions, such as whether the system is free of deadlock,

Whereas Van Ham et al. [10] consider the visualization
of transition systems as a pure graph visualization problem,
it is also a multidimensional visualization challenge. For the
transition systems that we consider every state consists of a
vector of instantiated state variables. Therefore, we consider a state s = [s1 , ..., sn ] as a vector in n-space, where
si is a valuation of the ith state variable. The cardinality Ci
of the ith variable is usually in the range of 2–20. Also, the
dimensionality n is typically in the order of 10–40.
The high dimensionality of such transition systems reﬂects their complexity. They are ﬁnite state machines and
the sequence of values that state variables assume represent
their behavior. Still, using conventional methods it is often hard to gain insight into the behavior reﬂected by the
variables. A number of questions are difﬁcult to answer:
1. Are there particular subsets of state variables that exhibit
interesting behavior? Also, which variables are uninteresting and may be disregarded?
2. For a speciﬁc subset of state variables, what does the
behavior of the system look like?
3. Are there interesting correlations between subsets of
state variables? For instance, are certain variables dependent on others? In particular, it is often difﬁcult to
detect correlations between more than two variables.
4. Are there close correlations between actions and state

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

variables? For instance, are the values that particular
variables assume dependent on speciﬁc actions?
5. For a subset of state variables, are there states that assume a particular combination of values? Also, do transitions exist from one such state to another?
The ability to answer these questions allows the user to
verify functional requirements that have been stipulated for
a system. They are also useful for verifying that algebraic
speciﬁcations are correct. Finally, these questions allow the
user to gain insight into systems about which little is known.
Although it is often possible to come up with answers using
algebraic proof techniques, this requires signiﬁcant effort
and is error prone. Motivated by these challenges and inspired by Van Ham et al.’s [10] results, in the remainder of
this paper we consider a number of approaches for visualizing transition systems from a multidimensional perspective.

3. Analyzing dimensions
A common approach for multidimensional data visualization is to use low-dimensional projections into 2D or 3D.
Due to a number of issues that arise when rendering 3D
scenes on a 2D monitor, 2D visualizations are almost always more appropriate and are widely used [9, 13]. Several
researchers have proposed that the user be directly involved
in choosing an adequate 2D projection by considering different dimensions individually and with respect to others.
Examples include the rank-by-feature framework [8] and
hierarchical dimension reduction [14]. It is argued that the
user has a better understanding of results than with automated techniques such as grand tours [1].
In order to reduce the complexity of a multidimensional
data set, another common approach is to select a subset of
the original dimensions and to visualize the data with respect to these [8, 14]. In our case the user is likely to be
interested in different subsets of state variables at different
times. For instance, users may want to consider speciﬁc
variables that allow them to verify whether certain functional requirements are satisﬁed.
To explore different dimensions, the user must be provided with a good overview that makes it easy to compare
dimensions [9, 8, 14]. Our point of departure is to consider the m states of dimension n as n arrays of dimension
m. These n arrays correspond to the state variables and are
visualized as n parallel histograms (see Figure 1). States
are distributed along the x-axis (typically according to a
breadth-ﬁrst traversal of the corresponding graph). In order
to identify overall patterns, the histograms are normalized,
making them scaling invariant.
Interesting state variables are identiﬁed by visually discovering patterns, correlations, gaps and outliers in the data
set. Histograms are also labeled, enabling the user to identify speciﬁc variables. Individual histograms may be se-

Figure 1. Parallel histograms.

lected, deselected, dragged to and dropped in new vertical
positions. As will be seen in following sections, the vertical ordering of dimensions has a direct inﬂuence on the
positions to which states are rendered in eventual 2D projections. Deselected dimensions have no such inﬂuence.
In this way, the parallel histograms serve as a ﬁltering and
zooming device and facilitate interactive dimension reduction. The use of parallel histograms combined with an approach to view the resulting low-dimensional data sets also
adheres closely to Shneiderman’s mantra [9]: “overview
ﬁrst, zoom and ﬁlter, then details on demand”.
Parallel histograms resemble the approach taken with table lens [7]. However, we have extended it with a feature
that makes it particularly easy to visually compare different
dimensions. When a speciﬁc dimension is selected it may
be dragged over another, resulting in an overlay of the two
(consider the lower part of Figure 1). Whereas most automated techniques perform similarity analysis, such a visual
comparison also makes it intuitively clear how dimensions
differ from each other and enables the user to detect interesting behavior such as alternating patterns.
The states may also be sorted based on a selected state
variable; states are reordered along the x-axis according to
an ascending or descending sorting of the values that this
variable assumes in the different states. All histograms are
updated to reﬂect this ordering. This further enables the
user to detect interesting correlations or differences in a
fashion analogous to permutation matrices [3]. When sub-

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

sequent dimensions are selected and sorted, existing partitions are maintained; states are reordered only in intervals
where the values of previously sorted variables are equal.
This allows for the detection of patterns within patterns as
illustrated in Figure 1 (consider the upper three histograms).
The transition system corresponding to Figure 1 was
generated from a description of the Alternating Bit Protocol (ABP), a communication protocol for data transmission
over an unreliable channel. The transition system has 191
states. The upper three histograms correspond to the operational modes of the sender, of the forward transmission
channel and the value of the alternating bit for this channel.
Initially we were bafﬂed by the fact that the alternating
bit assumes a value of 1 for a relatively few number of states
(third histogram from the top). However, after careful visual
analysis we were able to deduce that the states where the top
variable assumes the values of 2 and 5 correspond to an alternating bit value of true and false at the sender. We were
then able to infer that only in such states is the transmission channel able to assume a value other than its default
(0). This explains the two step-like shapes in the second
histogram for states where the top histogram assumes the
value 2 or 5. We were also able to deduce that the value of
the alternating bit is only stored by the transmission channel
during two of its modes of operation (corresponding to the
values of 1 and 2 in the second histogram). Since no distinction is made between a default value and an alternating bit
with a negative value (both are represented by the value 0),
this explains the fact that the alternating bit is positive for
so few states: most of the time it simply assumes its default
value.
The above example shows that it is relatively easy to
identify correlations that span more than two dimensions
with parallel histograms. The ease of interpreting parallel histograms may be attributed to the fact that every histogram is pre-attentively perceived as a single shape or symbol [12]. Due to the fact that position and shape are separable visual cues, it may be argued that is easy to visually
compare different histograms.

4. Projecting to 2D
The analysis and consequent deselection of dimensions
with the parallel histogram mechanism leads to a lowerdimensional transition system that must be mapped to 2D.
Suppose that there are p dimensions to consider (where typically p < n). We now view the transition system as a
graph, but approach the positioning of states from a multidimensional perspective by considering this reduced set.
We consider any state s = [s1 , ..., sp ] as a linear combination
p

si · ei

s=
i=1

where ei is the ith basis vector and si is the valuation of the
ith state variable. To ﬁnd the projection s of s on the 2D
plane it may be deﬁned as
p

s =

si · ei
i=1

where ei is some projection of ei in 2D. Hence, the challenge is to ﬁnd suitable ei for i = 1, ..., p such that the
questions identiﬁed in section 2 may be answered. Finding
adequate ei turns out to be quite challenging and a number
of strategies for choosing them are discussed below.

4.1. Uniform distribution
When projecting multidimensional data into 2D the ei
may be selected such that they are distributed uniformly in
the plane. This is similar to the approach taken with star coordinates [6]. Uniform distribution allows the user to determine the overall “spread” of the values that state variables
assume. In particular, if the distribution occurs in the order
that the corresponding histograms are arranged, this offers
an interesting way to analyze the inﬂuence of different dimensions by reordering and deselection.
Figure 2 illustrates the results of a uniform distribution
of nine dimensions of the ABP example. Transitions are
rendered as curved line segments. Direction is encoded in
the orientation of these arcs which should be interpreted in
a clockwise fashion. Kandogan [6] argues that uniform distribution leads to the discovery of clusters of objects that
share characteristics . However, since there is no guarantee
that distinct p-dimensional points map to distinct positions
in 2D, it is quite difﬁcult to interpret results. Moreover, due
to the fact that p dimensions are forced into 2D, it is not
possible to attach precise semantics to a particular position.

4.2. Manual distribution
One line of attack that addresses the interpretation of the
mapping to 2D is to enable users to manually alter the ei .
In this way a clearer understanding of the inﬂuence of particular state variables may be deduced by considering the
changes in the mapping as the ei are being adjusted. This
does not prevent several states from being mapped to the
same position, however.
An interesting observation is that users often resort to
comparing two dimensions at a time by arranging the ei orthogonally in a fashion that resembles a 2D scatterplot. For
instance, through manual interaction, ﬁgure 2 was reduced
to ﬁgure 3 (by deselecting all but two state variables and
positioning the ei orthogonally). In this ﬁgure we were able
to identify a number of duplicate states that are mapped to
the center-most node. By considering the transitions entering and leaving this node, we were able to determine that it

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

Figure 4. Orthogonal hypergrid.
Figure 2. Uniform distribution.

Figure 3. Manual distribution.
completely mimics the behavior of the initial state (on the
far left). The reason for this is that the program that extracts the transition system from the original speciﬁcation
duplicates certain states.

4.3. Hypergrids
A hypergrid generalizes the notion of a 2D scatterplot to
n dimensions. Scatterplot matrices also do this, but it is
difﬁcult to detect relationships that span more than two dimensions [2]. In essence, a hypergrid consists of recursively
nested 2D grids. At every coordinate of a higher level grid
a lower level grid is nested and so forth.
To see how a hypergrid is constructed, ﬁrst consider the
case where the projection vectors ei are restricted to being
parallel to the x- or y-axis. Now, ei = (xi , yi ) with

if i > p/2
 0
δx
if i = p/2
xi =

Ci+1 · xi+1 if i < p/2
and


 0
δy
yi =

Ci−1 · yi−1

if i < p/2 + 1
if i = p/2 + 1
if i > p/2 + 1.

where δx and δy are the minimum permissible horizontal
and vertical intervals and Ci is the cardinality of dimension
i.
With this method the coordinate system generated by e1
and ep takes into account the areas needed for nesting the
coordinate system that e2 and ep−1 generate at each of its
coordinates, and so forth. This is achieved by considering
the cardinalities, C2 and Cp−1 , of d2 and dp−1 as well as the
area needed for any deeper nested grids (by considering the
cardinalities of their generating dimensions). Also, it ensures a minimum distance in the x- and y-axis between any
two successive coordinates. Figure 4 illustrates an orthogonal hypergrid generated from four variables of the ABP
example.
Hypergrids constructed in the above fashion are similar
to the notion of dimensional stacking [11]: dimensions all
contribute to displacing data items in directions parallel to
the x- and y-axis. We have reﬁned the idea further to more
explicitly represent the inﬂuence of different dimensions by
rotating successive grids slightly from the previous. It is
argued that the (dis-)similarity in terms of orientation and
the fact that position and orientation are separable visual
cues make different dimensions easier to perceive [12]. To
achieve this, let ei = (xi , yi ) with

if i = p
 0
s(i) · δx
if i = p − 1
xi =

s(i) · Ci+1 · xi+1 if i < p − 1
and


 0
δy
yi =

Ci−1 · yi−1

where

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

s(i) =

if i = 1
if i = 2
if i > 2

1
if i ≤ p/2
−1 if i > p/2.

Figure 6. Principal component analysis.
Figure 5. Rotated hypergrid.
The function s() ensures that alternating pairs of projection
vectors are “more orthogonal” in the sense that the ei with
end points above the line x = y are reﬂected about the yaxis.
In Figure 5 the larger grid plots two variables reﬂecting
the modes of the two transmission channels in ABP. For the
nested grids, the axes correspond to the value of the alternating bit for these channels. From this ﬁgure we were able
to conﬁrm that due to the sequential nature of ABP the two
channels operate completely independently. For instance, it
is easy to verify that no state exists in which both channels
simultaneously assume a mode other than the default (0).
Figures 4 and 5 also show that the nested nature of hypergrids utilizes the well-known principle of containment [12],
enabling the user to attach precise meaning to a particular
position.
Due to the fact that state variables in the transition systems that we are considering generally have a small cardinality, the hypergrid approach may be applied here. In general, though, hypergrids do not scale that well as the cardinality or number of dimensions to consider increases. A
further drawback is that hypergrids are quite expensive with
regard to screen real estate; the area needed to ensure no
overlap increases dramatically with every dimension that is
included. However, when coupled with parallel histograms,
where the order is reﬂected in the nesting of grids, hypergrids do offer an interesting way for analyzing relationships
that span more than two dimensions.

4.4. Principal component analysis
Principal component analysis (PCA) is one of the oldest
and most prominent techniques for multivariate data analysis [5]. PCA reduces the dimensionality of a data set while

retaining as much variation as possible. In light of the current discussion, the aim is to map p dimensions to 2D by
identifying the ﬁrst two principal components. This entails ﬁnding the two largest eigenvalues of the covariance
matrix of the dimensions and considering the two corresponding eigenvectors. More concretely, ei = (xi , yi ) with
xi = c1,i and yi = c2,i where c1 = [c1,1 , ..., c1,p ] and
c2 = [c2,1 , ..., c2,p ] are the eigenvectors mentioned earlier.
Figure 6 illustrates the result of performing PCA on eight
dimensions from the ABP transition system and calculating
the ei as outlined above. PCA offers a way to identify those
dimensions that have the most dominant inﬂuence on the
variation of the data set. The cardinalities of state variables
inﬂuence the amount of variation, however. This may be
addressed by normalizing every dimension before performing PCA. It may be argued that a state variable with a large
degree of variation is not necessarily interesting. Also, as
with uniform and manual distribution, no meaning can be
attached to a position when p > 2. Nonetheless, from Figure 6 the two-phased behavior of ABP is clearly discernable.

5. Conclusion
We have introduced a number of methods to visualize
transition systems by considering them as n-dimensional
graphs. Table 1 summarizes how these techniques assist us
in answering the questions identiﬁed in section 2.
Although simple, parallel histograms prove to be a useful aid for addressing many of our questions. Out of all
techniques considered it provides us with the most sufﬁcient overview of state variables. For instance, interesting
variables can be detected by comparing the values that they
assume. Besides providing insight into system behavior for
subsets of state variables, we also ﬁnd this mechanism to be
an intuitive steering device for 2D projections. Often this

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

Table 1. How the different visualization approaches meet the challenges set out in section 2.
Question 1
Question 2
Question 3
Question 4
Question 5
∗ The

Histograms
Yes
Yes
Yes
No
Yes

movement of ei may be useful to some extent.

Uniform
No
No∗∗∗
No∗∗∗
No
No∗∗∗
∗∗ Unless

Manual
No∗
No∗∗∗
No∗
No
No∗∗∗

Hypergrids
No
Yes
Yes
No
Yes

PCA
No∗∗
No
No
No
No

variation is considered interesting, also for identifying phases of behavior.

compensates for the fact that, when considered in isolation,
some projection methods do not scale that well beyond two
dimensions. Moreover, the ability to quickly select, deselect and order dimensions allows us to identify correlations
spanning multiple dimensions.
It is often important to determine whether states containing speciﬁc valuations of a subset of state variables exist.
This can be veriﬁed with parallel histograms, but we also
ﬁnd hypergrids useful. Due to the nested nature of the axes,
we are able to locate positions where such states are or
would have been projected to. This is because hypergrids
represent a high-dimensional space such that coordinates in
it are still geometrically interpretable in 2D. It is also this
characteristic of hypergrids that allows us to analyze multiple dimensions in a single 2D projection and to accurately
associate meaning with particular positions.
As for the other projection techniques, on occasion we
ﬁnd manual interaction with the projection vectors useful
for gaining insight into system behavior in terms of selected
variables. Although 2D projections based on PCA do not
provide us with precise answers to our questions, they do
often give us a better idea of different phases in system behavior. We also note that the use of curved arcs seems to
work well for encoding the direction of transitions.
Unfortunately none of the methods considered allow us
to identify interesting correlations between state variables
and speciﬁc actions (or transition labels). It is certainly true
that signiﬁcant behavioral characteristics of a transition system are captured in its transitions and actions. Therefore,
we feel that this aspect requires closer attention and identify it as a candidate for future work.

6. Acknowledgements
This work was supported by the Dutch Foundation for
Scientiﬁc Research (NWO) under grant 612.065.410. We
also wish to thank Jan Friso Groote, Aad Mathijssen and
Muck van Weerdenburg for their input and suggestions.

References

∗∗∗ If

p > 2.

vol.6, no. 1, 1985, pp. 128-143.
[2] R.A. Becker, W.S. Cleveland and A.R. Wilks, “Dynamic
Graphics for Data Analysis,” Statistical Science, vol. 2, no.
4, 1987, pp. 355-395.
[3] J. Bertin, Graphics and Graphic Information-Processing,
De Gruyter, 1981.
[4] S.C.C. Blom, W.J. Fokkink, J.F. Groote, I. van Langevelde,
B. Lisser and J.C. van de Pol, “µCRL: a toolset for analysing
algebraic speciﬁcations,” LNCS 2102, 2001, pp. 250-254.
[5] I.T. Jolliffe, Principal Component Analysis, SpringerVerlag, 1986.
[6] E. Kandogan. “Visualizing multi-dimensional clusters,
trends, and outliers using star coordinates,” Proc. 7th ACM
SIGKDD Int’l Conf. Knowledge Discovery and Data Mining, San Francisco, CA, 2001, pp. 107-116.
[7] R. Rao and S.K. Card, “The table lens: merging graphical
and symbolic representations in an interactive focus+context
visualization for tabular information,” Proc. 1994 ACM
Conf. Human Factors in Computing Systems (CHI ’94), New
York, NY, 1994, pp. 318-322, 481-482.
[8] J. Seo and B. Shneiderman, ”A rank-by-feature framework
for unsupervised multidimensional data exploration using
low dimensional projections,” Proc. 2004 IEEE Symp. Information Visualization (InfoVis 2004), Austin, TX, 2004,
pp. 65-72.
[9] B. Shneiderman, “The eyes have it: a task by data type
taxonomy for information visualizations,” Proc. 1996 IEEE
Conf. Visual Languages, Boulder, CO, 1996, pp. 336-343.
[10] F. van Ham, H. van de Wetering and J.J. van Wijk, “Interactive visualization of state transition systems,” IEEE Trans.
Visualization and Computer Graphics, vol. 8, no. 3, 2002,
pp. 319-329.
[11] M.O. Ward, “XmdvTool: integrating multiple methods for
visualizing multivariate data,” Proc. 1994 IEEE Conf. Visualization (Visualization ’94), Washington, DC, 1994, pp.
326-333.
[12] C. Ware, Information Visualization: Perception for Design,
Morgan Kaufmann, 2000.
[13] C. Ware, “Designing with a 2 12 D attitude,” Information Design J., vol. 10, no. 3, 2001, pp. 255-262.
[14] J. Yang, M.O. Ward, E.A. Rundensteiner and S. Huang, “Visual hierarchical dimension reduction for exploration of high
dimensional datasets” Proc. 2003 Symp. Data Visualization,
Grenoble, 2003, pp. 19-28.

[1] D. Asimov, “The grand tour: a tool for viewing multidimensional data,” SAIM J. Scientiﬁc and Statistical Computing,

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

