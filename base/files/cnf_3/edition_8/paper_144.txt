Piecewise Polygonal Approximation of Digital Curves
M. Sarfraz
Department of Information and Computer
Science, King Fahd University of Petroleum
and Minerals, KFUPM # 1510,
Dhahran 31261, Saudi Arabia
sarfraz@kfupm.edu.sa

M.R. Asim and A. Masood
Department of Computer Science and
Information Technology,
University of Engineering and Technology,
Lahore, Pakistan
{drmrasim , asif_phd}@hotmail.com

Abstract

dominant
points
by
curvature
evaluation
[9,11,17,18,19] and second by fitting longest straight
line segments [5,7,10,15,16,20]. Extraction of
dominant points depends upon the accuracy of
curvature evaluation and correct determination of the
region of support at each contour point. It is
computationally more expensive and the results are
far from optimal. Polygonal approximation of curves
by fitting straight lines is more logical and efficient
approach. Our paper belongs to second category.
We extract break points as a preprocessing step
towards polygonal approximation. These break points
are the candidates to be selected as the end points of
approximating straight lines. While approximating the
curve with straight lines, it is important to select the
best end points of lines such that the number of line
segments and approximation error is minimized. For
this purpose we carry out polygonal approximation in
clockwise as well as anti-clockwise directions around
the given curve and look for an optimal solution
between the two.
Preprocessing stage is discussed in section 2.
Polygonal approximation algorithm is discussed in
section 3. Experimental results are evaluated in
section 4. Finally, in section 5 we conclude our
presentation.

In this paper, we present a recursive algorithm for
piecewise polygonal approximation of a digital
curves. The idea behind is to look for an optimal
solution while approximating the given curve
segment with a set of longest and minimum line
segments such that the maximum squared error is
less than the given threshold. The given curve is
divided into pieces and parallel processing can be
applied to each piece of curve thus making it
computationally more efficient. Experimental results
show that the proposed method has promising
results.

1. Introduction
Most appealing representation of information to
human is in its visual form. Effective computer
representation of these visual shapes is an important
task. Boundary representation of shapes and their
approximation economizes memory storage and
processing time for subsequent procedures.
Attneave [1] proposed that information along a
contour is concentrated in the regions of high
magnitude of curvature. He joined these high
curvature points with the straight lines, suggesting
that not much loss of information had occurred.
Following Attneave’s observation, there are many
approaches developed for detecting these dominant
points and to seek best linear polygonal
approximation of the digital curves. In this paper we
develop a recursive algorithm for piecewise
polygonal approximation of digital curves.
Algorithms
developed
for
polygonal
approximation and dominant point detection can be
classified in two categories. The first is to extract

2. Preprocessing stage
Break points (BP) and initial dominant points
(IDP) are extracted in this preprocessing stage. The
extracted BP are the only candidate points to be taken
as the end points of approximating straight lines and
IDP are the start points for this algorithm. This
preprocessing will considerably reduce the
subsequent computation of polygonal approximation.
BP are the non-linear points along the curve. To
find BP, we assign Freeman’s chain code [6], Ck

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

varying from 1 to 7, to each contour point Pi,
according to the direction of next point Pi+1. From the
chain coded contour points if abs(Ck- Ck+1) = 0, then
it is a linear point otherwise it is Break Point.

The point(s) with angle of 135o are marked as
IDP. It can be calculated from chain coded contour
points. If abs(Ck- Ck+1) = (3 or 5) then angle is 135o.
If no point is found with 135o angle then the point(s)
with angle of 90o are selected as IDP. If abs(Ck- Ck+1)
= (2 or 6) then angle is 90o. In worst case, if the
points with 90o angle are not available then the first
BP is selected as IDP. Fig 1 shows the extracted
linear points, BP and IDP.

Figure 1. Single line, double line and shaded circles
are the linear points, BP and IDP respectively.

Function DP = PolyAppx(Segment)
DP = [ ]
DPC = SegAppxC(Segment)
DPA = SegAppxA(Segment)
If
DPC  DPA = φ
DP = segment end points
Return DP
End If
If
DPC  DPA ≠ φ
Divide segment into sub-segments at
( DPC  DPA )
For (each Sub-segment)
DP = DP + PolyAppx(sub-segment)
End For
Return DP
ElseIf
Length(DPC) ≠ Length(DPA)
If Length(DPC) < Length(DPA)
DP = DPC
Else
DP = DPA
End IF
Else
DP2 = Sort ( DPC  DPA )
Make pair(s) of DP2 (two consecutive points
make one pair)
Select one point from each pair(s) so that it
minimizes integral square error.
End IF

COMMENTS STARTS
EP
End points i;e., EP-1 and EP-2
Maximum perpendicular squared distance
Dmax
among all the points between end points to
respective line joining end points.
List of dominant points in clockwise
DPC
direction.
ε
Threshold, default value is 0.7
DPC-new New list of detected dominant points in
clockwise direction.
MaxError( ) Function Maximum Error – Finds the
Maximum perpendicular squared
distance between two segments
COMMENTS ENDS
Function DPC = SegAppxC(Segment)
DPC = [ ]
Do
EP-1 = first point of segment
EP-2 = next BP in sequence
DPC-new = [ ]
Do
Do
Calculate Dmax
If Dmax < ε
P = EP-2
End If
EP2 = next BP
While ((Dmax < 2* ε ) OR (End of
Segment))
EP-1 = P
Add P in the list DPC-new
While (End of Segment)
If isempty(DPC)
DPC = DPC-new
End If
ε = MaxError ( )
While Length(DPnew) = = Length(DPC)

Figure 3. Pseudo-code for a function PolyAppx( )

3. The polygon approximation algorithm
The curve is split into segment(s) at each IDP and
an independent polygonal approximation is
performed for each segment. The algorithm is divided
in two steps. First step is to perform segment
approximation to find farthest end points of
approximating straight lines such that the maximum

Figure 2. Pseudo-code for a function SegAppxC( )

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

(a)

(e)

(b)

(c)

(f)

(d)

(g)

(h)

Figure 4. Polygon approximation of the chromosome shape (a) Our algorithm at default threshold, (b) Ansari-Huang
[2] algorithm, (c) Teh-Chin [17] algorithm, (d) Cornic [4] algorithm (e) Marji-Siy [9] algorithm, (f) Ray-Ray [11]
algorithm, (g) Sarkar [14] algorithm, (h) Wu [19] algorithm.
perpendicular squared distance from all the points
between two end points to the line joining end points
is less than the given threshold value ( ε ). Segment
approximation is performed in clockwise (from first
point to the last point of segment) and in
anticlockwise direction (from last point to the first
point of segment). Pseudo-code for segment
approximation in clockwise direction is given in Fig 2
and algorithm for anticlockwise direction will also be
on similar lines. Second step is to find an optimum
solution between the two segment approximations.
The pseudo-code for the complete algorithm is
given in Fig. 3, as a recursive function “PolyAppx()”.
In this function, end points of the approximating
straight lines are determined first, from the two
segment
approximations
(clockwise
and
anticlockwise). Segments are divided into subsegments at the common end points and processed
again recursively. Results of this approximation can
be seen in Fig 4 & 5.

4. Experimental Results
The quality of polygonal approximation can be
measured by the amount of data reduction and
approximation error. Sakar [14] combined the two
measures using figure of merit (FOM). We compare
our algorithm with others on the basis of following
evaluation criteria as done by marji and Siy [9] and
also used by Wu [19].
• Number of dominant points (Dom Pts): The
extracted end points of the approximating straight
lines.
• Compression Ratio (CR): One of the objectives of
polygon approximation is data reduction. Larger
compression ratio means high data reduction.
CR =

TotalPts
DomPts

• Maximum Error (Max Error): Maximum Error is
the maximum deviation of approximating polygon
from the original curve.
n

MaxError = max{ei }
i =1

(a)

(b)

where ei is error in ith point (squared distance).
• Integral Square Error (ISE): This shows the
distortion caused by approximation polygon. It is
the total error caused by approximation. Higher
value of ISE does not always means more
distortion since the distortion is proportional to the
size of object. Normalized ISE looks a more
suitable measure of error.

Figure 5. Polygon approximation for the shape of leaf
and semicircle at default thresholds.

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

n

ISE =

¦e

i

i =1

Table 1. Comparative results of the chromosome, leaf and semicircle shapes.
Shape

Method

Dom Pts

CR

Max Error ISE

FOM

Chromosome

Our Method
Ansari[1]
Chin[8]
Cornic[3]
Marji[5]
Ray[6]
Sarkar[7]
Wu [9]

12
16
15
17
11
18
19
17

5
3.75
4.00
3.53
5.45
3.33
3.16
3.53

.79
2
.74
.63
.90
.71
.55
.64

5.82
20.3
7.2
3.18
9.96
5.57
3.86
5.01

.86
.19
.57
1.11
.55
.60
.82
.70

Leaf

Our Method
Ansari[1]
Chin[8]
Cornic[3]
Marji[5]
Ray[6]
Sarkar[7]
Wu [9]

21
30
29
28
21
32
23
23

5.71
4.00
4.14
4.29
5.71
3.75
5.22
5.22

.78
2.13
.99
.74
.78
1
.784
1

13.6
25.6
14.96
7.30
14.1
14.7
13.1
20.34

.42
.16
.28
.59
.40
.26
.40
.23

Semicircle

Our Method
Ansari[1]
Chin[8]
Cornic[3]
Marji[5]
Ray[6]
Sarkar[7]
Wu [9]

19
28
22
30
18
29
19
27

5.37
3.64
4.64
3.40
5.67
3.52
5.37
3.78

.74
1.26
1
.485
1
.833
1.474
.83

12.9
17.8
20.6
2.91
24.2
11.8
17.4
9.01

.42
.20
.23
1.17
.23
.30
.31
.42

Visual comparison of the results of our algorithm
with
some
commonly
referred
algorithms
[2,4,9,11,14,17,19], for the shape of chromosome are
shown in Fig. 4. Polygonal approximation of two
other popular shapes, leaf and semicircle, are shown
in Fig. 5. Their visual comparison with other
algorithms are not shown due to lack of space,
however these can be seen in [9] and compared with
our results in Fig. 5.
The quantitative comparisons of our algorithm
with [2,4,9,11,14,17,19], for the shape of
chromosome, leaf and semicircle are shown in table
1. The table shows the results of our algorithm at
default threshold. It can be seen that number of
dominant points extracted are almost the lowest with
improved ISE and FOM.
As compared to the straighter arcs, circular arcs
result in higher ISE even with more number of
dominant points. Thus Sakar’s FOM [14] is suitable
measure to compare approximation results only with
the same number of dominant points in same shape.

However, if an algorithm produces better ISE with
lesser number of dominant points for the same shape,
the algorithm proves itself better. For a meaningful
evaluation of results, approximation results of our
algorithm at different thresholds are shown in table 2.
For the shape of chromosome, the results of our
algorithm proves better as compared to
Ansari_Huang [2], Teh-Chin [17], Marji-Siy [9] and
Sarkar [14] at the threshold of .3, .4, .9 and .25
respectively. It can be seen that our algorithm at
threshold of .3 gives ISE = 3.84 with 16 dominant
points which is better that Wu [19] with 18 dominant
points and Ray-Ray [11] with 17 dominant points.
Thus the results are better than Wu and Ray-Ray also.
It is difficult to compare with Cornic [4] but looking
at our results at threshold of .3 and .25 gives some
idea of the results of our algorithm as compared to
Cornic.

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

Table 2. Results of our method at different thresholds.
Shape

Our Method

Dom Pts

CR Max Error ISE

FOM

Chromosome

ε
ε
ε
ε
ε
ε
ε
ε
ε

=1
= .9
= .8
= .7 (default)
= .6
= .5
= .4
= .3
= .25

11
11
12
12
13
14
15
16
19

5.45
5.45
5
5
4.62
4.29
4
3.75
3.16

.89
.89
.79
.79
.75
.69
.63
.51
.45

7.78
7.78
5.82
5.82
4.81
4.82
4.14
3.84
2.68

.70
.70
.86
.86
.96
.89
.97
.98
1.18

Leaf

ε
ε
ε
ε
ε
ε
ε
ε
ε

=1
= .9
= .8
= .7 (default)
= .6
= .5
= .43
= .4
= .31

19
20
21
21
22
25
29
30
32

6.32
6
5.71
5.71
5.45
4.8
4.14
4
3.75

.99
.89
.78
.78
.74
.69
.63
.59
.55

16.63
15.73
13.57
13.57
11.47
9.67
6.63
6.13
5.14

.38
.38
.42
.42
.48
.50
.62
.65
.73

ε
ε
ε
ε
ε
ε
ε
ε
ε
ε

=1
= .9
= .8
= .7 (default)
= .6
= .55
= .5
= .43
= .4
= .3

17
17
17
19
19
21
24
26
29
30

6
6
6
5.37
5.37
4.86
4.25
3.92
3.52
3.4

.85
.85
.85
.74
.74
.72
.66
.63
.63
.49

15.01
15.01
15.01
12.93
12.93
9.82
6.18
4.91
3.41
2.91

.40
.40
.40
.42
.42
.49
.69
.80
1.03
1.17

Semicircle

For the shape of leaf, the results of our algorithm
proves better as compared to Ansari-Huang [2], TehChin [17], Marji-Siy [9] and Ray-Ray [11] at the
threshold of .4, .43, .7 and .55 respectively. At
threshold of .6 the ISE = 11.47 with 22 dominant
points, the ISE is better than Sarkar [14] and Wu [19]
even with 23 dominant points. Thus the results are
better than Sarkar and Wu also. Again the results with
28 dominant points were not available with our
algorithm at any threshold to compare with Cornic
[4].
For the shape of semicircle, the results of our
algorithm proves better as compared to Ray-Ray [11]
and Sarkar [14] at the threshold of .4 and .6
respectively. The results also prove better with even
lesser number of dominant points than Ansari-Huang

[2], Teh-Chin [17], Marji-Siy [9] and Wu at threshold
of .3, .55, .8 and .43. The results of our algorithm at
threshold of .3 and Cornic [4] are the same. The
algorithm by cornic [4] looks to perform better in all
three shapes but it can be seen that the number of
dominant points detected by Cornic are always the
larger.
Other additional advantages with our algorithm
are its computational efficiency. Break points are
selected in the start and only these points are
considered during the further processing of polygonal
approximation algorithm, as candidate end points of
approximating straight lines. As the given curve is
divided into pieces and processing of each piece of
curve is independent from other pieces, therefore
parallel processing can be applied.

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

5. Conclusion

[8] D.G. Lowe. “Three-dimensional object recognition
from single two dimentional images”. AI, 31:355-395,
1987.

A recursive method of piecewise polygonal
approximation is presented in this paper. Algorithms
with similar concepts were proposed before also. The
difference in this algorithm is that it does not simply
looks for a longest straight line segments that can be
fitted to the given curve, rather it looks for better
approximation without increasing the number of line
segments. From the experimental results it can be
seen that this method out performs with almost the
minimum number of dominant points (at default
threshold) as compared to other algorithms.

[10] U. Ramer. “An iterative procedure for the polygonal
approximation of plane curves”. Comput. Graphics Image
Process 1:244-256, 1972.

Acknowledgment

[12] P.L. Rosin. “Assessing the behavior of polygonal
approximation algorithms”. Nineth British Machine Vision
Conference, Southampton, UK, 1998.

Dr. Muhammad Rafiq Asim and Mr. Asif Masood
acknowledge the Higher Education Commission of
Pakistan for providing funds to carry out this research
work.

[13] P.L. Rosin. “Techniques for assessing polygonal
approximations of curves”. IEEE Trans. PAMI
19(6):659:666, 1997.

References

[14] D. Sarkar. “A simple algorithm for detection of
significant vertices for polygonal approximation of chaincoded curves”. Pattern Recognition Lett. 14:959-964,
1993.

[1] F. Attneave. “Some information aspects of visual
perception”. Psychol. Rev 61:183-193, 1954.

[9] M. Marji, P. Siy. “A new algorithm for dominant points
detection and polygonization of digital curves”. Pattern
Recognition 36:2239-2251, 2003.

[11] B.K. Ray, K.S. Ray. “Detection of significant points
and polygonal approximation of digital curves”. Pattern
Recognition Lett. 13:443-452, 1992.

[2] N. Ansari, K. W. Huang. “Non-parametric dominant
points detection”. Pattern Recognition 24:849-862, 1991.

[15] Y. Sato. “Piecewise linear approximation of plane
curves by perimeter optimization”. Pattern Recognition
25:1535-1543, 1992.

[3] C. Arcelli, G. Ramella. “Finding contour-based
abstractions of planner patterns”. Pattern Recognition
26(10):1563-1577, 1993.

[16] J. Slansky, V. Gonzlez. “Fast polygonal
approximation of digitized curves”. Pattern Recognition
12:327-331, 1980.

[4] T.M. Cronin. “A boundary concavity code to support
dominant points detection”. Pattern Recognition Lett.
20:617-634, 1999.

[17] C. Teh and R. Chin. “On the detection of dominant
points on digital curves”. IEEE Trans. PAMI 8:859-873,
1990.

[5] J.G. Dunham. “Optimum uniform piecewise linear
approximati0on of planner curves”. IEEE Trans. Anal.
Mach. Intell. 8:67-75, 1986.

[18] M.J. Wang, W.Y. Wu, L.K. Huang, D.M. Wang.
“Corner detection using bending value”. Pattern
Recognition Lett. 16:575-583, 1995.

[6] H. Freeman. “On the encoding of arbitrary geometric
configurations”. IRE Trans. Elec. Comp. 10:260-268,
1961.

[19] W.Y. Wu. “An adaptive method for detecting
dominant points”. Pattern Recognition 36:2231-2237,
2003.

[7] Y. Kurozumi, W.A. Davis. “Polygonal approximation
by minimax method. Comput”. Graphics Image Process
19:248-264, 1982.

[20] P.Y. Yin. “Ant colony search algorithms for optimal
polygonal approximation of plane curves”. Pattern
Recognition 36:1783-1797, 2003.

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

