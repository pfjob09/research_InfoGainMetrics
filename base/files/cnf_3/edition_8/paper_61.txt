Fast Simulation of Deformable Objects
A. Duysak Jian J. Zhang
National Center for Computer Animation
Bournemouth University
United Kingdom
{aduysak | jzhang@bournemouth.ac.uk}
Abstract
This paper presents a new deformation algorithm
for computer graphics and animation applications. The
algorithm is motivated by the mass-spring systems and
the ChainMail technique and possesses advantages of
both methods. It uses a one-step approach to find the
deformation, and therefore is very fast. Simulation
parameters can easily be chosen in order to represent
deformation characteristics. The algorithm is applicable
to various simulation applications and produces very
promising results.
Keywords: deformation algorithms, mass-spring
systems, ChainMail.

1 Introduction
There are a number of algorithms developed for soft
object modeling and simulations for various computer
graphics applications. Depending on the requirements of
the applications, researchers may use different
techniques. The finite element method is a common
choice if accuracy is the main concern while the mass
spring systems may be preferred if speed is important.
But even with the mass-spring systems, real-time
performance, which is essential in many surgical
simulation applications, is difficult to achieve. Therefore,
whilst much research effort has been spent on improving
such techniques in the area of physical accuracy and
performance, other methods, such as the ChainMail
algorithm [1,2], have been proposed aiming at interactive
frame rates.
Unlike the finite element modeling and mass-spring
systems that use reduced resolution but complex
formulations to calculate deformation, the ChainMail
operates on a full or very high resolution and uses very
simple calculations. In addition, the ChainMail is not an
iterative approach that takes many steps to reach the final
state. It only needs one or two simple steps; hence it is
very fast. The ChainMail algorithm, however, is not a
physically based method and has several disadvantages.
The ChainMail method is not suitable for most
applications because it works only on voxel-type
structures. It uses a very simple deformation formula that
is difficult to justify. It is also difficult to determine the

constraints representing physical characteristics of the
material.
Finding deformation in one or two simple and fast
steps with improved accuracy has motivated us to study
closely both the mass-spring systems and the ChainMail
algorithm. Our new deformation algorithm is developed
by combining the strengths of both the mass-spring
systems and the ChainMail algorithm. This algorithm
therefore inherits the desirable properties from both
techniques
x It operates on triangular meshes;
x It only requires one step, therefore it is very fast and
suitable for interactive applications;
x It uses more sophisticated deformation rules, which
can represent material properties;
x It is open for future developments, as new rules can
be integrated easily to offer better results, including
the representation of physical properties by means of
identifying system parameters.

2 Related work
Two main approaches are widely used in the
modelling of complex non-linearly deformable objects:
Finite Element Modelling (FEM) and Mass Spring
Systems (MSS). The FEM is a standard simulation and
analysis method extensively used in various engineering
applications. It has also gained popularity in the
simulation of soft tissue deformation [3,4]. The
advantage of the FEM models is their unsurpassed
computational accuracy compared with other simulation
methods. This is due to the fact that accuracy usually
represents one of the paramount concerns of many
engineering projects. The downside of this method,
however, is its substantial computational cost. Although
this is not really a problem for engineering practice, it
does represent a difficulty in interactive graphics
applications.
The MSS is a simplified simulation model. In this
model any deformable objects can be represented as a set
of mass points connected with springs [5]. Although this
configuration does not accurately represent the physical
structures of the objects to be simulated, it is usually able
to achieve perceptually realistic effects as long as the
parameters of the MSS, such as spring stiffness and

Proceedings of the Eighth International Conference on Information Visualisation (IVâ€™04)
1093-9547/04 $ 20.00 IEEE

viscosity, are properly specified. Because of its
simplicity and generality, it has become an indispensable
tool in many simulation applications, such as cloth
animation [6], facial animation [7] and surgical
simulations [8].
In order to achieve physical accuracy and real-time
performance great effort has been spent on improving
existing simulation methods as well as developing new
ones. In [9] adaptive finite elements are used to increase
realism and mesh refinement scheme is employed to
increase speed. Debunne et al. [10] used adaptive
sampling for mesh resolution for performance reasons.
Accuracy of MSS is also a subject of many research
applications. Optimization [11], spring elongation
correction [12] and parameter identification methods [13,
14] are discussed. The speed of MSS is significantly
improved by the use of the implicit methods [15,16],
although real-time performance still is very difficult to
achieve for many applications. This is true especially
when a large number of springs are needed, for example
in surgical simulations. Furthermore real-time
simulations with haptic interactions, which requires
1kHz update rate remains a big challenge.

3 The mass-spring chain algorithm
In this Section, we present a new technique, called
the Mass-spring-chain algorithm. It models a deformable
object in a similar manner to the mass-spring systems
and consists of a number of mass-points connected by
â€˜springsâ€™.

3.1 Overview
A simple model is shown in Figure 1 (initial mesh is
the first figure) where definitions of points and springs
are given according to their role in the deformation
process. Deformation starts from the moved mass-points
(known as the active points) and propagates through the
entire 3D mesh by springs. Springs connected to the
active points (known as the active springs) are deformed
first. The other ends of the active springs are defined as
the semi-active points, which are inter-connected by the
semi-active springs to be deformed next. Arrows in the
figure show the direction of deformation. Active and
semi-active springs are deformed and turned off ending
first cycle of deformation propagation, as shown by
second figure in Figure 1. The next cycle starts from the
previous semi-active points, which are now active points
themselves, shown by the third figure. Deformation is
ended if all springs and points in the mesh are processed
or alternatively another termination criterion can be set
to end the process.
As in mass-spring systems, springs perform
deformation by stretching or compression. The
movements and deformations of the springs are
constrained by the pre-set conditions. Spring movement
is limited between two extremes, rigid movement and

elastic movement. Spring length is also constrained
between allowed compression and stretching limits. To
simulate this effect, our deformation algorithm is
responsible in finding the necessary movements and the
amount of deformations of the springs within the set
limits

Point
Spring
Active Point
Active Spring
Semi-active Point
Semi-active Spring

Figure 1 Definitions and deformation propagation of the
mass-spring chain algorithm (before deformation starts).

3.2 Limits for spring movement and deformation
Both mass-spring systems and ChainMail methods
suggest that the neighboring points (connected by links
in ChainMail and connected by springs in mass-spring
systems) have to satisfy some conditions relative to each
other. In the mass-spring systems these conditions are
embedded into the system by some parameters, such as
spring stiffness and damping. If spring stiffness is high,
for example, it will be harder to move and deform the
spring. The ChainMail algorithm defines the conditions
geometrically by assigning a bounding box to determine
the limits of the movement. The resultant deformation is
restricted within this box. We assume that there are two
extreme cases relating the spring movements. One is
defined as rigid movement without any rotation. When a
point is moved, the connected spring moves accordingly.
The initial spring and the moved spring are now parallel
to each other. A vector, called the rigid movement vector,
ur defines this new position for the spring and sets the
rigid limit (Figure 2(b)). In other words, it sets the upper
limit beyond which there will be no movement. The
opposite situation is called the super elastic movement
and deformation. It is assumed that the spring puts no
resistance to its movement, i.e. while one end is moving,
the other end stays still. A vector, represented by ue ,
from the moving end to the non-moving end sets this
limit (Figure 2(b)).

Proceedings of the Eighth International Conference on Information Visualisation (IVâ€™04)
1093-9547/04 $ 20.00 IEEE

It is therefore reasonable to assume that the spring
will move between the rigid and elastic limit vectors.
While determining the movement limits, springs are
moved individually as if there is no connection to any
other springs. Figure 2(a) shows initial triangle whose
n
one vertex P0 will be moved to a new location P0 .
Figure 2(b) represents the rigid and elastic limits and
their vectors. The new location of the semi-active point
P1 is given as P1r for rigid movement and P1e for
elastic movement.

which can be different for each spring. Current spring
length r varies between the maximum compression

rmc (= r0  d max ) and the maximum stretch
length rms (= r0 + d max ) , where d max is defined as
length

maximum stretch or compression. In addition to the
movement limits, we set another type of limits, called the
deformation limits (represented by rmc and rms ), which
represents deformation characteristics of the springs. A
closed region called the deformation region is formed as
shown in Figure 2(c) for the given triangle. The
boundaries of this region therefore can be given by the
elastic limit vector u e , rigid limit vector u r , minimum
length constraint

rmc and maximum length criteria rms .

3.3 Obtaining new spring locations

(a)

Spring movement will be between both limit vectors
and its deformation will be on the deformation region.
The new location of the spring is given by a vector, the
orientation vector, whose equation is defined as follows,
u o Du e  (1  D )u r
1
where D represents the material characteristics of
the object under consideration.

(b)

(a)

(c)
Figure 2 Deformation limits and region of the algorithm.

Springs are allowed to stretch or compress for
certain percentage of their original lengths given by r0 ,

Proceedings of the Eighth International Conference on Information Visualisation (IVâ€™04)
1093-9547/04 $ 20.00 IEEE

(b)
Figure 3 Determining new spring orientation.

The orientation vector shown in Figure 3(a) spans the
entire deformation region and based on equation 1 its
location is determined as shown in Figure 3(b). The new
o
location for semi-active point P1 is given as P1 (new
orientation point). This point shows the new location due
to spring movement and does not include deformation.
The spring defined between points P0 and P1 now
moves to a new location and the new spring is defined
o
n
between P0 and P1 . A new vector defined between
o
points P1 and P1 as Vm (movement vector) is used to
move the semi-active point to its new location.
In mass-spring systems there are usually several
active springs connected to a single semi-active point. In
another word, point P1 may be forced to move to several
new locations by the connected springs. This situation is
shown in Figure 4(a). The algorithm considers each case
individually and finds the movement vectors for each
active spring as shown in Figure 4(b). A center point of
all movement vectors is defined using equation 2

Vmc

rmi u Vmi
.
rmi

Â¦
Â¦

2

i
where rm gives the vector magnitude of each
movement vectors. Finally the point is moved to the
center point as shown in Figure 4(c).

(a)

(b)

at its one end, which corresponds to the semi-active end.
The amount of deformation is added to the semi-active
end in the orientation direction. The strategy is different
for the semi-active springs, because unlike the active
springs, their both ends are moving at the same time.
The semi-active springs are allowed to move and deform
freely when the active springs are being deformed. The
deformation algorithm then checks if the semi-active
springs violate the spring length criterion. The amount of
deformation is then distributed between its both ends.
The direction of the deformation is chosen as the springâ€™s
direction.
In the case of multiple connection where several
springs move a point P0 in different directions at
different amounts, a formula similar to equation 2 is
employed to determine a center point. The location of
point P0 is then updated to this center point. This
operation is performed after finding the new orientation.

3.5 Shape alteration (cell conversion)
One disadvantage of the mass-spring systems is that
the deformation law does not consider any shape
violation because it is not able to detect shape alteration.
Therefore shape conversion (cell conversion) is likely to
happen in some situations where a very large force is
applied or the shape of the object is altered by external
movements [17]. Shape alteration can also occur by
moving the vertices. A new shape emerges when one of
the vertices of the triangle passes through a plane formed
by the other two vertices of the same triangle as shown in
Figure 5 (a).

(c)

Figure 4 Multiple orientation.

(a)

3.4 Spring deformation
As in the mass-spring systems, the current spring
lengths are found and compared with their initial lengths.
The spring is deformed, stretched or compressed, due to
the length difference. Here we use the following formula
to compute spring deformation
C

dr

def = d max (1 e r0 )
3
where dr is the difference between current and the
rest length and slope parameter E represents the
deformation rate.
Each spring will follow different rules in the
deformation process. An active spring is only deformed

Proceedings of the Eighth International Conference on Information Visualisation (IVâ€™04)
1093-9547/04 $ 20.00 IEEE

(b)

Figure 6 2D application.

(c)
Figure 5 Shape alteration (cell conversion).

The new shape after the vertex movement is given by
n
triangle P0 P2 P1 . If deformation takes place based on
this newly generated triangle it will result in unrealistic
simulations, Figure 5 (b). In order to overcome this
problem our algorithm moves the original triangle below
the active point, i.e. below the surface (S), as shown in
Figure 5(c). The limit vectors are then determined based
on this movement. The rigid vector is found using the
moved triangle. The elastic vector is chosen to be on the
n
same line (surface S) as the active point, P0 thus
preventing shape alteration.

The second application in Figure 7 ((a) initial shape)
deforms a simple model [18] by moving its one vertex.
The model has 285 vertices and 566 triangles. The
typical simulation time for this application is about 0.001
seconds. This application also demonstrates the effect of
simulation parameter D given in equation 1.
The third application is the simulation of soft tissue
deformations resulting from vertex displacements. A
stomach model [18] consisting of 1340 vertices, 4272
triangles and 4808 springs is used. The original model of
the stomach is given in Figure 8(a). Interaction with a
simple tool starts deformation. Figure 8 (b) demonstrates
the simulation with the mass spring systems and Figure
(c) represents the simulation with the new method. The
simulation time for all these experiments is less than 0.03
second for the new method and 3.95 seconds for the
mass-spring systems on an 800 MHz PC (Pentium 3). As
can be seen from Figures 6 and 8, the new method and
mass-spring systems are quite similar and both produce
plausible results.

4 Results
Figure 6 shows a simple 2D structure and its
simulation results by the presented algorithm. All points
are movable except for the most left points that are
constrained. From thinner to ticker, the lines represent
the original model, the mass-spring model and the
deformation achieved with the mass-spring chain
algorithm. It can be seen from the figure, both the massspring systems and the presented algorithm are very
close to each other in terms of the deformation. However,
the mass-spring systems fail when shape alteration
occurs as seen from the figures, while our algorithm
successfully produces plausible results.

(a)

(b)

(c)

(d)

Figure 7 Simulation of soft tissue deformations; vertex
movement with (b)
=0.3, (c) =0.5 and (d)
=0.8.

D

D

(a)

Proceedings of the Eighth International Conference on Information Visualisation (IVâ€™04)
1093-9547/04 $ 20.00 IEEE

D

[2]

[3]

[4]

[5]

(b)

[6]

[7]

[8]

[9]

(c)
Figure 8 Simulation of soft tissue deformation, (a) original
shape, (b) with the mass spring systems, (c) with the new
method.

5 Conclusions and future work
A new method for soft object simulation is presented,
which is effective for various simulation applications,
including computer animation and medical simulation.
This technique achieves similar results to the massspring systems but without suffering from some of the
drawbacks. One distinct advantage is that it is very fast,
much faster than the mass-spring systems. This is
because it does not need an iterative approach. Although
it is still being developed, the initial results show that our
method produces plausible results and allows real-time
performance. Experiments show that it is very easy to
choose simulation parameters (e.g. D , d max and E )
with the presented method while one has to consider the
stability issue for the mass-spring systems.
We are working to improve the method in several
areas. Locating spring positions in the deformation
regions more precisely and improving the position
updating mechanism are both under investigation. Future
work will also include the determination of the system
parameters from real data.

References
[1]

[10]

[11]

[12]

[13]

[14]

[15]

[16]
[17]

[18]

S. GIBSON. 3D ChainMail: A Fast Algorithm for
Deforming Volumetric Objects. Proc. Symp. Interactive
3D Graphics, pp. 149-154, 1997.

Proceedings of the Eighth International Conference on Information Visualisation (IVâ€™04)
1093-9547/04 $ 20.00 IEEE

S. GIBSON. Using Linked Volumes to Model Object
Collisions, Deformation, Cutting, Carving, and Joining.
IEEE Transactions on Visualization and Computer
Graphics, Volume 5, No 4, 1999.
M. BRO-NEILSEN. Finite Element Modeling in Surgery
Simulation. Proceedings of the IEEE, Volume 86, No. 3,
pp. 490-503, 1998.
R. M. KOCH, S.H.M. ROTH, M.H. GRASS, A. P.
ZIMMERMANN, H. F. SOILER. A framework for
facial surgery simulation. ETH Zurich, CS Technical
Report #326, Institute of Scientific Computing, June 18,
1999.
D. BARAFF, A. WITKIN. Physically based modeling
course notes, Course 36, SIGGRAPHâ€™99, 1999.
M. DESBRUN, P. SCHRODER, A. BARR. Interactive
animation of structured deformable objects. Graphics
Interface, pp.1-8, 1999.
Y. LEE, D. TERZOPOULOS, K. WATERS. Realistic
modeling for facial animation. ACM Computer Graphics,
Vol. 29, pp. 55-62, Aug. 6-11, 1995.
U. KUHNOPFEL, H.K.CAKMAK, H. MOAB.
Endoscapic surgery training using virtual reality and
deformable tissue simulation. Computers&Graphics 24
(2000) pp.621-632, 2000.
C XUNLEI, W.U. MICHEAL, S. DOWNES, T.
GOKTEKIN, F. TENDICK. Adaptive nonlinear finite
elements for deformable body simulation using dynamic
progressive meshes. EUROGRAPHICS 2001, Volume 20.
Number 3, 2001.
G. DEBUNNE, M. DESBRUN, M.P. CANI, A. BARR.
Dynamic real-time deformations using space and time
adaptive sampling. Computer Graphics proceedings Aug
2001, proceeding of SIGGRAPHâ€™01.
M. TESCHNER, S. GIROD, B. GIROD. Optimization
approaches for soft-tissue prediction in craniofocial
surgery simulation.
Second Int. Conf. On Medical
Image Computing and Computer-Assisted Intervention
MICCAIâ€™99, 1999.
D. BOURGUIGRON, M.P CANI. Controlling
Anisotropy in mass-spring systems. Computer animation
and simulationâ€™00, pp.113-123, Aug. 2000.
A. NURNBERGER, A. RADETZKY, R. KRUSE, Using
recurrent neuro-fuzzy techniques for the identification
and simulation of dynamic systems. Neurocomputing 36,
pp. 123-147, 2001.
A. DUYSAK, J.J. ZHANG. Identification of simulation
parameters using neural networks. 6th International
conference on Computer Graphics and Artificial
Intelligence, pp. 189-199, 2003.
Y. KANG, J. CHOI, H. CHO. Fast and stable animation
of cloth with an approximated implicit method.
Proceedings of the Computer Graphics International
(CGIâ€™00), pp.247-255, 2000.
D. BARAFF, A. WITKIN. Large Steps in Cloth
Simulation. SIGGRAPH, pp. 43-54, 1998.
F. GANOVELLI, P. CIGNONI, R.SCOPIGNO.
Introducing multiresolution representation in deformable
object modeling. SCCGâ€™99 Conference Proceedings pp.
149-158, 1999.
http://www.3dcafe.com/asp/freestuff.asp

