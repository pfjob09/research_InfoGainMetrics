Multiple Web Search Visualization using Dynamic Fields1
M. Angelaccio, B. Buttarazzi
Dipartimento di Informatica, Sistemi e Produzione - Università degli Studi di Roma "Tor Vergata"
Via di Tor Vergata, 110 - 00133 - ROMA (Italy)
angelaccio@info.uniroma2.it
Abstract
Web search process can be time consuming and
frustrating due to the enormous amount of information
available on the web. Recently, web spiders with
Information Extraction Techniques that analyze retrieved
documents have been proposed. This leads to an extended
search process in which hypertext structure is enriched
with semantic annotations. As consequence graph
visualization techniques must be up-to-date for a better
understanding of modified results. In particular
additional semantic information must be taken into
account without forcing the user browsing through
unnecessary documents. As a first attempt towards graph
visualization for semantic crawling, in this work we
describe an example of XML-based visualisation system
that provides a semantic visualization by means of
dynamic fields that are associated to each node.
Keywords web spider, information extraction, XML
graph definition, visualization systems

1. Introduction
The increasing information demand on the web is
leading to more sophisticated searching tools. The aim is
to overcome problems due to web hypertext structure
among which the huge dimension and the lack ness of a
semantic structure. The former has been addressed by
recent works in the area of parallel crawlers whereas the
latter has been recently received attention by natural
language research community ([3],[5]). Basically
information extraction tools are integrated in the crawling
process as a post–processing activity in order to return
semantic information in addition to the crawled results.
We refer to this class of crawlers as semantic crawlers
([5]). In this case it is necessary to visualize not only
graph structure but also the document citation items
extracted by the semantic crawler. In this paper we

propose the idea to extend a basic graph visualization
system with dynamic fields that are properly inserted at
each node. This idea is based on a previous work ([1] and
[2]) where we have introduced an XML description for
the visualization of search engine results (Query Maps).
The purpose is to extend a query map with semantic
annotations retrieved during the information extracting
process. The adopted solution is a first attempt towards a
complete dynamic visualization, by means of an easy
integration in the query map of extracted information
without the need of other interfaces.
The rest of the paper is organized in the following
way. Section 2 gives an overview of semantic crawling
components together an application example. In Section
3 we overview the XML description of Web Data (graph
structure and semantic annotations) used in our tool
example. The visualization technique of dynamic fields
is explained in section 4. We end in Section 5 with our
conclusions.

2. Semantic Crawling
Recently, web spiders that perform linguistic analysis
of the results have been introduced in order to enhance the
search process ([3]). One of the main reasons is that one
to filter unnecessary documents without other complex
query refinements strategies. However, to accomplish this
task it occurs to provide a more expressive visualization
system.
As example, we consider the following test-case of
web personal searching process.
Journalistic Search Test-Case: Let consider a user
searching for news about a personage related to a certain
argument (Politics, Economics, etc.). The aim is to
visualize in a dynamic way the graph structure of
documents resulting by the crawling process augmented
with all information that could be extracted in order to
improve the access gain from the user. In this way, while
browsing through the possible documents related to the

1

The work described in this paper has been carried out under the financial support of the Italian Ministero dell'Università
e della Ricerca Scientifica e Tecnologica (MURST) in the framework of “ALINWEB: Algorithmics for Internet and the
Web” Project

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

same person, the user is immediately prompted about
what category each document belongs.
Figure 1 shows the main software components of the
proposed architecture for semantic crawling.

All Data Applications are described in accord to XML
representation for the given results that are used as input
for the visualization systems. In the next section we show
some details about the XML syntax and the implications
on how the use of dynamic fields easily annotate querymap visualization.

3. Web Data XML Definition

Fig. 1 Software Architecture

The main basic software components are:
1. Web Spider that parses the user query
automatically browses a website neighbour and
returns a graph data structure of results as a search
tree. In particular, to guarantee a search focused to
Italian news it has been pointed to a list of Italian
newspaper websites.
2. Information Extraction Engine (IE Engine) that
receives spider results and performs an automatic
extraction of the information contained in each
crawled document.
3. A dynamic visualisation system composed by
HTML interface scripts.
Retrieved data are represented by using two XML
descriptions.
• From a structure point of view it has been
used a Query–Map definition following
QueryGraphXML format that has been
introduced in a previous work ([2]).
•
From the content point of view, it has been
used a pseudo-natural language syntax
obtained as output of IE engine and
specialized in the area of newspapers. It
parses retrieved HTML documents and
applies a content analysis to discover
information about a public personage in a
restricted context. The focus is on
declarations and citations about the public
personage chosen from the user. The result of
analyzing process is a XML document and an
update of the application's database.
The IE engine output can be used from the visualization
system to integrate structural view of a Web's portion
with content's information.

In a previous work we have defined a XML format
description for query maps named QueryGraphXML.
Starting from such a description and by using a XSL
transformation to extract node elements, we have
implemented a complete visualization system easy to
integrate and that works in the same way as graphical
tree-menu program. In this section we define a
QueryGraphXML description able to accommodate
semantic annotations that incomes from IE engine and
shown by means of a visualization script based on the
idea to insert an iconic button similar to the explorer
buttons.
QueryGraphXML, is based on a naming definition
that avoids the need to use edges. This is motivated by the
fact that a tree-menu layout follows a preorder strategy
for the visualization system that can be implemented in
accord to 2D naming associated to each node given by
the pair of attributes without edge definitions. In
particular it holds that
•

Level number is the depth level (from level 0 to
max level –1) of each node

•

Order number is the order number of each node
at each level.

Figure 2 shows the tree structure of the query graph by
evidencing the 2D naming associated to a preorder visit of
the tree

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

Level
0 1

2

3

that it must be unique within one graph
description, the label can contain any kind of text
and does not have to be unique. Applications can
use these to label nodes and edges, or as a title in
the window.

Order
0

Data (<data> tag): application-dependent data
represented by a node, or even the full graph.
The <data> tag can contain any kind of
information that can be described in XML.

0
0
0

Data references (<dataref> tag): application
dependent data, which, instead of being directly
incorporated into the graph files, is referred to
through external references.

1
1
0
1
1
0
0
1
1

Figure 2. Tree structure

A more detailed syntax is given by the following DTD
description.
<!ELEMENT node (%common-elements;)*>
<!ATTLIST node
level
CDATA
#REQUIRED
order
CDATA
#REQUIRED
xlink:role
CDATA
#IMPLIED
xlink:href
CDATA
#IMPLIED

>
The xlink:href is used when the node is a
metanode (i.e. the value of isMetanode is true) in
which case it should refer to the id of a graph. As with
the edit element, the xlink:role can be a useful hint to
the application, but it does not have any predefined
semantics. Application data can be added to different
levels of the query graph description through a series of
additional elements. These elements are meant to
represent the different types of data that might be
associated with a graph. QueryGraphXML uses the
following application data that are inherited from
GraphXML:

Rank value (<rank> tag): searching tool
dependent data, which corresponds to a rank
value computed during search process.
In addition a fifth tag is included to explicitly describe the
value associated to each node that is extracted by
Information Extracting engine:
Topic value (<topic> tag): IE tool dependent
data, which corresponds to a category value
extracted during search process.
Here we give a detailed syntax for the specification of
application dependent data.
<!ELEMENT
<!ATTLIST
class
<!ELEMENT
<!ATTLIST
class
>
<!ELEMENT
<!ELEMENT
<!ATTLIST
value
>
<!ELEMENT

label (#PCDATA)>
label
CDATA
data (#PCDATA)>
data
CDATA

#IMPLIED

rank (#PCDATA)>
topic (#PCDATA)>
rank
CDATA

#IMPLIED

#IMPLIED

dataref (ref*)>

The following example describes a fragment of the
QueryGraphXML definition for a query graph associated
to the Journalistic Test-case. The fragment will
correspond to a node at level 2 and order 1 with rank
value = 86 will correspond to the Italian President to
which the article is the about News You can see
evidenced all the elements and attributes that characterize
the syntax of QueryGraphXML different from
GraphXML.

Labels (<label> tag): whereas the name
attribute is used for identification, which means

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

<query-graph>
...
<node level = “2” order = “1” >
<label>
Articolo 8
</label>
<rank value = “58” /rank>
<topic value = “Politica” /topic>
<topic value = “Economia” /topic>
<dataref>
<link xlink:role="original
xlink:
"http://www.corriere.it/Primo_Piano/Politica/2004/03_Mar
zo/28/Ciampi.shtml"/>
<link xlink:role="local”
xlink:
"href="localhost/www.corriere.it/Primo_Piano/Politica/20
04/03_Marzo/28/Ciampi.shtml "/>
</dataref>
</node>
...
</query-graph>

Figure 4. A fragment of QueryGraphXML
definition
Note the use of the local value in the attribute role that
is used to interact with cached copies of the answered
documents.
The document title is “Articolo 8” and will correspond to
html title for the documents. All semantic information is
stored in the xlink tag value and gives almost all needed
from the user because the file name contains the name
string “Ciampi”. Of course, this might be not sufficient
due to the large amount of news about “Ciampi”. Hence,
Information Extraction can help to annotate documents
for improving the search.

4. Multiple Visualization using Dynamic
Fields

Fig. 5 Node Semantic Visualization with dynamic
fields
In this way the user can dynamically explore the results
by avoiding unnecessary expansions.
This can
dramatically improve the query refinement process
because user is not forced to a new interface but he/she
can use the same graph visualization window.

5. Conclusions
Multiple Visualization could reduce the effort to browse
search results when Web Spiders are enhanced with
Information Extraction (Semantic Web Crawling). We
have provided an XML Description of the
structure/content crawled data and a first implementation
based on the idea to realize multiple visualization (graph
structure/semantic annotations) in a dynamic way without
using multiple views and interfaces. This can be
considered as a first attempt towards multiple web
visualization systems that combine link structure with
content-based information. We are exploiting further
experiments and analysis with the aim of enlarging the
range of web applications.

6. References

The effectiveness of a visualization system depends
on perception, cognition, and the users’ specific tasks and
goals. In particular since we face on multiple data
representation (structure and content) it occurs to
guarantee an efficient and user-friendly multiple visual
representation of the data ([6]).
We have developed the idea to dynamically embed
citations incoming from XML description for each node
in order to give the user a small interface for expanding
the graph in accord to semantic information.
Figure 5 shows an outline of the visualization
interface with dynamic embedded fields for each node.
The leftmost button allows semantic field expansion in a
way similar to the well known tree expansion button +/-.

[1] M. Angelaccio, B. Buttarazzi, A Visualisation
System for Web local search, Proceeding of IEEE
Conference IV2000, London, July 2000.
[2] M. Angelaccio, B. Buttarazzi, A GraphXML
Description of QueryMaps Proceeding of IEEE
Conference IV2002, London, July 2002
[3] A. Arasu, J. Cho, H. Garcia-Molina, A. Paepcke,
S. Raghavan: Searching the Web. ACM
Transactions on Internet Technology, 1 (1), 2-43
(2001)
[4] A.C.M. Fong S.C. Hui and H.L. Vu Effective
techniques for automatic extraction of Web
publications Information Review Volume 26 .
Number 1 . 2002 . pp. 4-18

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

[5] M. Chau and H. Chen Personalized and Focused
Web Spiders in Ning Zhong, Jiming Liu, Yiyu
Yao (Eds), Web Intelligence, Springer-Verlag,
February 2003, pp. 197-217.
[6] H. Chen Human factors in Visualization
Research IEEE Transactions ON Visualization
and Computer Graphics, vol. 10, no. 1, January
2004
[7] S. Chakrabarti, M. Joshi, V. Tawde: Enhanced
Topic Distillation using Text, Markup,Tags, and
Hyperlinks. Proc. the 24th ACM-SIGIR
Conference on Research and Development in
Information Retrieval (New Orleans, Louisiana,
USA, Sep. 2001).

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

