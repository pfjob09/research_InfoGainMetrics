Visualization of Complex Molecular Ribbon Structures at Interactive Rates
Andreas Halm
TU Braunschweig
Computer Graphics
halm@cg.cs.tu-bs.de

Lars Offen
TU Braunschweig
Computer Graphics
offen@cg.cs.tu-bs.de

Abstract
The increasing size of protein data available in internet
databases demands new fast methods of visualization.
This paper introduces a novel visualization technique for
molecular ribbon structures. The method is based on Combined BReps – a mesh structure deﬁning a combination
of polygonal faces and Catmull/Clark surfaces. Our technique provides high frame rates when interactively moving through structures of highest complexity as well as high
quality images when the viewpoint remains static.

1. Introduction
The ‘ribbon drawing’ made popular by Richardson [15]
provides an elegant method to visualize the folding and secondary structure of proteins. There are several implementations to visualize these ribbon structures, such as the one
from Carson, which was improved over the years [4], [1],
[2] and [3], or complete molecular visualization tools like
Chimera [6], Cn3D [7], or Rasmol [14].
These implementations construct either 2D structures,
e.g. ties, or only B-spline curves, or they construct a 3D ribbon with a ﬁxed tesselation. This has the drawback that the
visualization of huge ribbon structures is either unacceptably slow and of high quality, or near-interactive and of low
quality.
Interactive speed is necessary for the user to get an immediate feedback while exploring the molecular structure.
This increases the understanding of the visual presentation.
On the other hand high quality images are needed for presentations or publications. Both – up to now conﬂicting
– requirements can only be met by the use of 3D models supporting surface representations of variable resolution: multi-resolution meshes. There are two different popular approaches to realise such multi-resolution meshes: progressive meshes on the one hand, and subdivision surfaces
on the other.
Both techniques can be used to solve the problem, but the

Dieter Fellner
TU Braunschweig
Computer Graphics
fellner@cg.cs.tu-bs.de

maximum resolution of progressive meshes is bounded by
the resolution of the input mesh. In contrast, the mesh deﬁning a subdivision surface can be reﬁned an inﬁnite amount
of times, thereby converging to the subdivision surface limit
surface – a C 2 -continous surface. Another advantage of the
subdivision surfaces is, that they calculate only the needed
data and do not, like the progressive meshes, calculate everything and then ignore most of the data.
The third more technical advantage of subdivision surfaces
is that they can switch between the resolutions instantly
without any additional costs, while progressive meshes need
extra calculations to change between them. They are therefore better qualiﬁed for this special purpose, because the
user can watch the ﬁnal result without noticable delay.
This is very useful for online presentations, where different views of one molecule can be shown to the audience at
interactive rates.
We developed a new method to visualize these ribbon
structures using a combination of simple cubic polynomial
B-spline curves and a powerful boundary representation
(BRep) called Combined BRep (CBR for short) [9, 11].
We will show how to construct such a CBRep from a
given sequence of positions, normally the positions of the
Cα atoms, to get a high quality visualization of the ribbon
structure. Therefore we will give a short overview of the
combined BReps in the ﬁrst part of the paper. In the second part we will show how to construct the B-spline curves
on which the ribbons are aligned. In part three we will construct the CBRep from the points calculated earlier in the
second part.

1.1. Molecule Basics
A molecule is an accumulation of atoms, where some of
them are joined by so called bonds. Since the ribbon structure is a visualization tool for proteins, we will restrict the
following introduction to them. A protein is composed of
possibly more than one chain of amino acids linked together
by peptide bonds. The backbone of a chain is formed by
three groups of atoms in each amino acid, namely the cen-

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

Rn

Peptide bond
H

Cα
N

H

H

N

O
H

C

Cα

O

Rn+1

Amino Acid n

C

Amino Acid n+1

Figure 1. Structure of a protein chain: a peptide bond links amino acids in a linear way

tral atom Cα , the amino group N−H and the carbonyl group
N = O. The residue R, which is also bound to the Cα atom,
charaterizes the nature of each amino acid, but is not part of
the backbone. In the organic chemistry 20 amino acids are
differentiated: Alanin (A), Arginin (R), Asparagin (N), Aspartat (D), Cystein (C), Glutamat (E), Glutamin (Q) Glycin
(G), Histidin (H), Isoleucin (I), Leucin (L), Lysin (K), Methionin (M), Phenylalanin (F), Prolin (P), Serin (S), Threonin (T), Tryptophan (W), Tyrosin (Y) and Valanin (V).
They are usually abbreviated by using their associated character, as given in brackets above.
A protein can now be described by a sequence of these characters, e.g. IVNGEEAVPG. This is known as the primary
structure of a protein. Since the peptide bond is not rigid,
the protein can rotate around this bond to fold itself to an
energetically convenient state. This state is called tertiary
structure. This structure can be revealed by Nuclear Magnetic Resonance (NMR) and X-ray crystallography and is
published for example in the RCBS Protein Databank [13].
Locally the tertiary structure is built by the secondary structure which are
• the alpha helix,

Catmull/Clark subdivision surfaces [5] by attaching a sharpness ﬂag to each edge in the BRep mesh. Thereby different
kinds of faces can be distinguished by the type of their vertices. We differentiate four different vertex types according
to the number of sharp edges incident to them. These are
smooth, dart, crease, and corner vertices, whereby a smooth
vertex has no sharp edge and a corner vertex has three or
more sharp edges. This leads to following face classiﬁcation:
• Smooth face
A face with at least one smooth edge.
• Sharp face
A planar face with only sharp edges, but the vertices
may be crease vertices
• Polygonal face
Like a sharp face but all vertices are corner vertices,
too.
According to this deﬁnition a smooth face can also have one
or more sharp edges in its boundary, called crease edges.
These edges are handled as uniform cubic B-spline curves
and may create a link between smooth and polygonal areas of the mesh. A polygonal face which has a smooth face
as neighbor is called a sharp face and they are connected by
a common crease curve.
For each face type an appropriate tesselation and render
method must be used, which can be found in detail in [9]
and [11]. These methods are optimized for multi-resolution
meshes, which means that the resolution can be changed
without any extra effort, once the tesselation for the target
resolution is calculated. Since this calculation causes additional costs, which cannot always be done in one frame, it
may be distributed over more than one frame until the target resolution is reached.
The subdivision level in which a face should be rendered is
controlled by the following parameters:

• the beta sheet

• view frustum clipping

• and some random turns.

• curvature

The secondary and tertiary structure is visualized using the
ribbon drawing, which was ﬁrst popularized by Richardson
in [15].
Molecules consist of one or more chains, which are not
connected together by atomic bonding. When drawing the
ribbon structure of a molecule that contains more than one
chain, one must not connect the ribbons of two chains.
Chains can be handled independently of each other.

2. Combined BReps
The backbone of this ribbon implementation is the Combined BRep (CBRep), introduced by Havemann [9]. The
CBRep combines a polygonal boundary representation with

• contribution to the silhouette
• projected size
• frame rate
While the frame rate control tries to hold the triangle count
below some critical value, which depends on the hardware
used, the other three parameters are view dependent and set
some target level which may be reached when the frame
rate allows it. Through this in very complex scenes the target subdivision level may not be reached until the viewpoint is ﬁxed, but it will ensure constant frame rates on computers with slower hardware, too. It may also happen, that
neighbor faces have different levels of subdivision. To avoid
cracks between those faces the tesselation of the face with

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

Figure 3. Generating a tube using CBReps

Figure 2.
CBReps

Generating

a

cylinder

d1

using

d3
x1

d0
the lower resolution is automatically adapted at its boundary to match the higher level (for details we refer to [9]).
This can be done with no extra effort. Only if the target resolution is ﬁner than the tesselation calculated for this face
some extra points must be evaluated.
Since the Combined BReps are based on a 2-manifold
boundary representation, all operator sets generating such a
mesh can be applied. In the current version a slightly modiﬁed version of the Euler-operators proposed by M. M¨antyl¨a
in [12] is used. Where each operation creating an edge
has an additional boolean sharpness parameter. Therefore
it is very simple to generate the needed base meshes from
scratch.
Figure 2 shows a simple cylinder with only six faces in the
base mesh. The black edges are sharp edges, the others are
smooth. So the top and bottom are sharp faces, while the
other four faces are smooth. Figure 3 extends the cylinder
to a tube. Here the base mesh has fourteen faces, only one
of them is a sharp face. This tube suggests how to model the
complete ribbon structure with a very simple basemesh.
For this reasons the Combined BReps are an ideal tool
to visualize the molecular ribbon structure. They can easily
be build and provide an excellent multi resolution approach,
which can switch between the different resolutions without
any additional costs.

3. Cubic Spline Interpolation
Although the display of ribbon structures is just a visualization of the functionality of the secondary structures, it
is preferable that the resulting ribbons pass through the positions of the Cα atoms. To achieve this, we generate

x2

d4

x3

d2

d−1 x0
u0
u0
u0
u0

u1

u2

x4
u3

d5

u4
u4
u4
u4

Figure 4. A B-spline curve
the control points of the B-spline curve using the common cubic spline interpolation as described in [8]. For
the sake of completeness we will recur it in this section.
First we take a closer look at the relationship between
data points and control points (see Figure 4 for a cubic Bspline curve).
The ﬁrst step is to calculate the parameter values
u0 , . . . , un . A simple way is to set ui = i but this parameters will ignore the relative distance of the data points. So a
better way is to take these distances into account. In our implementation we choose a centripetal parametrization. This
means:
u0
ui+1

= 0
= ui +

||xi+1 − xi ||

Now we must determine the control points d−1 , . . . , dn+1
so that for the curve s holds: s(ui ) = xi , so that s interpolates the data points. This means we need a linear
system, which can be solved. Therefore we must recall that every B-spline curve can be written as a piecewise B´ezier curve (Figure 5). In that form we have xi = b3i

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

di

∆i−1
∆i
b3i+1
∆i
∆i−1
∆i
b3i = xi

b3i−1
∆i−1

∆i+1
di+1
xi+1

b3(i−1)+1

∆i−2
di−1

b3(i+1)−1

xi−1

´
Figure 5. A Bezier
segment of a B-spline
curve

with i = 0, . . . , n and the inner B´ezier points are related to the xi by the ﬁrst step of the de Boor algorithm as follows:
xi =

∆i b3i−1 + ∆i−1 b3i+1
∆i−1 + ∆i

i = 1, . . . , n − 1

with ∆i = ui+1 − ui . The bi±1 are related to the control points di by:

b3i−1

=

i

=

b3i+1

=

i

=

∆i di−1 + (∆i−2 + ∆i−1 )di
,
∆i−2 + ∆i−1 + ∆i

2,...,n−1

(∆i + ∆i+1 )di + ∆i−1 di+1
,
∆i−1 + ∆i + ∆i+1

1,...,n−2

Near the ends we have some special cases:

b2

=

b3n−2

=

∆1 d0 + ∆0 d1
∆0 + ∆1
∆n−1 dn−2 + ∆n−2 dn−1
∆n−2 + ∆n−1

Now we can eliminate the bi and get:
(∆i−1 + ∆i )xi = αi di−1 + βi di + γi di+1
with ∆−1 = ∆n = 0 and:
αi

=

βi

=

γi

=

∆2i
∆i−2 + ∆i−1 + ∆i
∆i (∆i−2 + ∆i−1 )
∆i−1 (∆i + ∆i+1 )
+
∆i−2 + ∆i−1 + ∆i
∆i−1 + ∆i + ∆i+1
∆2i−1
∆i−1 + ∆i + ∆i+1

After choosing b1 and b3n−1 arbitrarily, we eventually obtain the following linear system:
 



d0
r0
1
 α1 β1 γ1
  d1   r1 

 



  ..   .. 
..
 .  =  . 

.

 



αn−1 βn−1 γn−1   dn−1   rn−1 
1
dn
rn
With r0 = b1 , ri = (∆i−1 + ∆i )xi and rn = b3n−1 .
The ﬁrst and the last polygon vertices are d−1 = x0 and
dn+1 = xn . Due to the simple band structure of the matrix this linear system can be solved by LU-decomposition.
A more detailed description can be found in [8].

4. Generating Ribbons
The Brookhaven Protein Databank format (pdb) delivers information about the secondary structure of the
molecule. This structure may consist of a number of
chains which do not interfere with each other, with respect to display ribbon structures. They can be handled separately, and the following steps can be done once
for each chain from a given molecule. The ﬁle deﬁnes a sequence of amino acids which forms either a helix, a sheet
or a turn. Each of these acids has a Cα atom through
which the resulting B-spline curve should pass. As mentioned above, not all Cα atoms are part of a secondary
structure. These atoms ﬁll the gap between two given sequences and will be handled like they belong to a turn
for each such gap. At the junction between two such sequences we must generate an additional data point, because one sequence ends at one residue and the other
starts at the next one. To close this gap the additional
point must be calculated. Two additional coordinates
are needed, one at each end of the chain. These coordinates will ensure that all Cα atoms lie inside the generated ribbons, otherwise the two Cα atoms at the ends of
the chain would lie outside of the ribbons. As the display of the ribbons is just a visual aid for understanding
a molecule’s function, it is justiﬁable to make an educated guess for these positions.
To get a 3-dimensional ribbon from the positions of the
Cα atoms we must generate some 3D vectors which span
the ribbon structure. For every amino acid Ai in the chain
of length n with its Cα positioned at pAi , the ribbon height
vector hAi is

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

h Ai =

p Ai −
p Ai −

pAi−1 +pAi+1
2
pAi−1 +pAi+1
2

.

This is always deﬁned because no three adjacent Cα positions are collinear. The ribbon width vector wAi is
wAi

v2i
ch hpi
cw wpi
di

hAi × (pAi+1 − pAi )
.
=
hAi × (pAi+1 − pAi )

To avoid twisted ribbons, the resulting vectors hAi , wAi
are compared to hAi−1 and may be corrected by rotation
and exchanging, so that the dot product hAi−1 , hAi ≥ 0
and hAi−1 , hAi ≥ hAi−1 , wAi . This problem was mentioned by Carson in [4] as carbonyl oxygen ﬂip.
For the residues at the two ends of a chain, the formulae are
slightly modiﬁed. At the beginning of a chain Ai−1 does not
exist, so
h A0 =

wA0 =

hA0 × (pA1 − pA0 )
.
hA0 × (pA1 − pA0 )

Likewise, at the end of a chain An does not exist, and
hAn−1 =

(pAn−3 − pAn−2 ) × (pAn−1 − pAn−2 )
(pAn−3 − pAn−2 ) × (pAn−1 − pAn−2 )

wAn−1 =

hAn−1 × (pAn−1 − pAn−2 )
.
hAn−1 × (pAn−1 − pAn−2 )

The vector correction based on the dot product, mentioned
above, is made for the residue An−1 , too.
The two additional points at the end of the chain can now
be calculated as:
pA−1
p An

v3i

= c (hA0 × wA0 )
= −c (hAn−1 × wAn−1 )

The constant c is chosen empirically as c = 1.7. This results in nice ends of the ribbons. Other choices of c are possible, but may result in the ﬁrst or last Cα atom lying outside of the generated ribbon structure. The list of the Cα positions pAi including the two points pA−1 and pAn , is called
the base list. The coordinate positions given by the base list
are used to produce a cubic B-spline polygon of an interpolating C 2 cubic spline curve, as described in Section 3.
The resulting cubic B-spline polygon with the parameter values u0 , . . . , un−1 is then used to insert additional data points into the base list. Therefore the B-spline
curve is evaluated at the joint of two sequences s0 =
{pAi , . . . , pAi+j } and s1 = {pAi+j+1 , . . . , pAi+j+1+k } at
the point (ui+j + ui+j+1 )/2. If s0 is a sheet, we will also
evaluate the B-spline at (ui+j−1 + ui+j )/2. This is necessary to give us the needed auxiliary points pHj for the transition between two sequences (transition point) and for
generating the arrows (arrow point). If a residue based coloring is used, additional transition points must be calculated

v0i

Figure 6. At every control point di one quad
is generated, as the cross sections of the ribbon control mesh. The scale factors ch , cw depend on the type of secondary structure. The
vectors hi and wi span the normal plane at di ,
ie. the plane that is normal to the tangent of
the Bezier curve at di .

(pA1 − pA2 ) × (pA1 − pA0 )
(pA1 − pA2 ) × (pA1 − pA0 )

and

v1i

between every amino acids in the sequence. For each auxiliary point the vectors hpHj and wpHj are calculated as
above with the proper pAi , pAi+1 as neighbors. After relabeling we get m points pi with the corresponding hpi and
wpi .
After this we restart the spline interpolation to get a
B-spline curve passing throung all the data points including the auxiliary points. The resulting control vertices
d0 , . . . , dm−1 of the B-spline curve are used to generate the basemesh of the ribbon structure.
For each di we generate a quad qi as seen in ﬁgure
6. Now the generation of the complete basemesh is very
simple. As mentioned above we can use standard Euleroperations to create the base mesh. For this purpose we
take two quads qi and qi+1 with the corners v0 , v1 , v2 , v3
and w0 , w1 , w2 , w3 . If i = 0, we generate a face with only
smooth edges with the corners of q0 , otherwise we have already generated the face associated with qi . Then we are
connecting v0 to w0 , v1 to w1 and so forth with smooth
edges. At last we are building qi+1 with smooth edges. Figure 7 illustrates this procedure. If qi+1 is not the last quad,
we start over. At the qi , which are generated by a transition
point, we can for example change the color of the basemesh
according to the secondary structure or even at residue level.

4.1. Generating arrows in the ribbon
The generation of arrows in the structure to visualize a
direction is very simple through the usage of CBReps. They
can build by just adapting the scaling factor of one normal
plane qi . By just changing one factor you will get a ﬂat arrow like in Figure 9, which can be used for the sheets, or by
changing both factors a round arrow can be achieved for the
helices.

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

a)

q1

w0

w1
v2
v1

b)

w3
q1

w2

v0

c)

v3
q0

q0
d)

q1

q1

q0

q0

Figure 7. Building one element of the tube
Figure 9. Generating an arrow using CBReps
a)

q1

q0

q3
q1

b)

q4

q2

q2

q0

q4

Figure 10. Computation of the base mesh.
The stars show the positions of the Cα atoms.
While the generated base mesh does not
need to include the Cα positions, the spline
curve that is generated at run time always
does.

q3

Figure 8. Building the tube from the qi

4.2. The resulting basemesh
The generated basemesh is very simple, compared
to the visual quality that is achieved through subdivision. Each sequence of n residues results in: (without arrows)

degree four. Each of these faces results in (2n + 1)(2n + 1)
quads each in resolution depth n, e.g. 16 · 16 quads, resulting in 324 vertices, in depth 3 for each face in this resolution. This leads to a very high quality of the images produced. Since the quality of the faces depends on the projected size, too, only faces close to the spectator can reach
the highest resolution. Therefore the resulting data is still
small enough for even older graphic boards.

• f = 4(n + 1) + 2 faces
• e = 4(2n + 3) edges
• v = 4(n + 2) vertices
From these vertices only eight are not regular, which means
they have a degree not equal to four. Since these irregularities are very regional they will not disturbe the visual impression. All faces ( except the two faces per arrow which
are sharp faces) are smooth, regular Catmull/Clark faces of

5. Results
The described algorithm is capable of generating images
with very high detail. Additionally, setting the visible detail dynamically based on the factors described in Section 2
allows us to reach signiﬁcantly better framerates on slower
computers. Table 1 shows the resulting framerates for some
molecules. The whole molecule was always visible, so no

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

a)

b)

view frustum culling took place. All the tests were made on
an Athlon 1200 with a GeForce 5200 graphics card.
The column High detail lists the framerate we got when
always running the highest detail setting possible. The column Adaptive detail lists the results we got with an adaptive method that switches the available levels of detail dependend on the current scene.

Conclusions

c)

d)

e)

f)

Figure 11. Ribbon computation for a helix
structure. a) The generated base mesh. b)
Very low detail wireframe display of the ribbon mesh. c) Medium detail wireframe display. d) High detail wireframe display. e) Very
low detail display of the ribbon mesh. f) High
detail display of the ribbon mesh. While moving the structure, the detail is automatically
adjusted to reach a framerate of 20–24 fps.
For still images, the highest detail setting is
used.

In this paper we have presented a very powerful visualization method for molecular ribbon structures. It is based
on the so called CBReps, a combination of polygonal and
subdivision surfaces. This method has been combined with
the procedure of spline interpolation to generate nice ribbons that pass through the Cα positions. Using Combined
BReps together with a sophisticated method to generate the
base mesh is very simple, and can easily be used for other
purposes.
As can be seen by the example images (Figure 12), the
rendering quality is very high for still images. The approach also allows the use of advanced level-of-detail algorithms. As shown in Figure 11b, the generated mesh can
also be very low detailed, which allows interactive work
with complex molecules on slower computers. That lowdetail mesh is sufﬁciently detailed to recognize the structure of the molecule. The quality of that approach can also
be seen by comparing the rows High detail and Adaptive detail of Table 1.
It is planned to integrate forms of hardware acceleration for the display of the ribbon mesh. OpenGL extensions
like Compiled Vertex Arrays and Vertex Buffer Objects come
into mind there. Likewise, it is possible to use Multisample
Buffers to generate antialiased images of even higher quality.
The functionality and performance of current Vertex Shaders and Pixel Shaders does not seem to be sufﬁcient to use them for generating the ribbon structure. That
might be of interest in the future though.
Currently, the ribbons are colored by their type. It is also
possible to color them differently, for example according to
their amino sequence.

6. Acknowledgement
The funding of this project by the German Research
Foundation (DFG) under grant Fe 431/6-1 is gratefully acknowledged. Further credit goes to Sven Havemann for his
Compbined Breps and to our partners in the project from
the structural biology side Dirk Heinz, Guido Dieterich, and
Joachim Reichelt.

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

Name
HIV-1 Capsid
Mutant of Carp Parvalbumin
Oxid. Dsba Crystal Form II
Hemoglobin
Ribonuclease
Antigen-Antibody Complex
Ribosomal Subunit
Ribosomal Subunit

PDB ID
1A43
1B8L
1A2J
1IDR
11BA
2HRP
1FJG
1FFK

Atoms
573
806
1449
1867
1925
6852
51770
64268

Amino Acids
72
108
188
253
248
875
3897
6484

Secondary
Structures
13
13
21
33
38
178
346
29

Chains
1
1
1
2
2
6
22
29

Frames per second
High detail Adaptive detail
29
30
21
22
12
24
9
24
9
24
3
25
1
10
1
7

Table 1. Display speed of the generated ribbons (with interactivity constraint disabled)

a)

b)

Figure 12. Result images for molecules, rendered with high detail. a) Oxidized Dsba Crystal Form II
(21 ribbons). Note the arrows generated in the sheets. b) Cholesterol Oxidase (69 ribbons)

References
[1] M. Carson.
Ribbon models of macromolecules.
J.Mol.Graphics, pages 103–106, 1987.
[2] M. Carson. Ribbons 2.0. J.Appl.Cryst., pages 958–961,
1991.
[3] M. Carson. Ribbons. Methods in Enzymology, pages 493–
505, 1997.
[4] M. Carson and C. Bugg. Algorithm for ribbon models of proteins. J.Mol.Graphics, pages 121–122, 1986.
[5] E. Catmull and J. Clark. Recursively generated b-spline surfaces on arbitrary topological meshes. Computer-Aided Design, pages 350–355, September 1978.
[6] Chimera. http://www.cgl.ucsf.edu/chimera/.
[7] Cn3D. ftp://ftp.ncbi.nih.gov/cn3d/.
[8] G. Farin. Curves and Surfaces for Computer Aided Geometric Design. Academic Press, Inc., 1990.

[9] S. Havemann. Interactive rendering of catmull/clark surfaces
with crease edges. The Visual Computer, pages 286–298,
2002.
[10] S. Havemann and D. Fellner. Generative mesh modeling.
Technical Report TUBSCG-2003-01, Institute of Computer
Graphics, TU Braunschweig, 2003.
[11] S. Havemann and D. Fellner. Progressive combined breps multi-resolution meshes for incremental real-time shape manipulation. Technical Report TUBSCG-2003-05, Institute of
Computer Graphics, TU Braunschweig, 2003.
[12] M. M¨antyl¨a. An Introduction to Solid Modeling. Computer
Science Press, Rockville, 1988.
[13] RCBS protein database. http://www.pdb.org.
[14] Rasmol. http://www.umass.edu/microbio/rasmol/.
[15] J. Richardson. The anatomy and taxonomy of protein structure. Adv. Protein Chem., pages 167–339, 1981.

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

