Analysis, Conversion and Visualization of Discrete Simulation Results
Yongmin Zhong
Bijan Shirinzadeh
Robotics & Mechatronics Research Laboratory
Department of Mechanical Engineering
Monash University, Australia
meyzhong@mail1.monash.edu.au, bijan.shirinzadeh@eng.monash.edu.au

Abstract
This paper presents a methodology to create 3D
visualization of discrete event simulation. This
methodology connects discrete event simulation directly
to 3D animation with its novel methods of analyzing and
converting discrete simulation results into animation
events to trigger 3D animation. Discrete simulation
results are analyzed and displayed in a graph structure
that reveals all possible sequences of simulation events.
In addition, a 3D animation framework is constructed for
the visualization of discrete simulation results. This
framework supports the reuse of both the existing 3D
animation objects and behavior components, and allows
the rapid development of new 3D animation objects by
users with no special knowledge in computer graphics.
This methodology has been implemented with the
software component technology. Results in an electronics
assembly factory are also provided in the paper to
demonstrate the feasibility of this approach.

1. Introduction
Three-dimensional (3D) visualization of discrete event
simulation is an important and useful technique for
engineering simulation [1]. 3D visualization is intuitively
more appropriate and understandable for the human
observer than raw data in ASCII format or moving 2D
pictures. It allows users to examine the complex
processes of production plants in real-time and from
different aspects.
Though a visualization of simulation results in 3D is
very useful and attractive, the development cost is very
large. All physical objects related to the simulation have
to be modeled first. Moving objects also have to be given
an animation behavior. The objects then have to be
positioned according to the simulation parameters.
Changes in the simulation parameters also have the
corresponding changes in the animation objects layout as
a consequence. Finally the discrete events as the

simulation output have to be connected to the animation
objects in a way that the simulation results can control the
animation behavior of these objects.
Despite its importance, 3D visualization of simulation
results is still not widely accessible and its development
cost is very large. The visualization of a stream of
simulation results needs a connection between simulation
and animation to convert simulation events into
animation-controlled events for direct stimulation of
animation behaviors, and to convert simulation
parameters and attributes into animation properties.
Changes at one end of the connection should be
automatically and immediately reflected at the other end.
Furthermore, since all physical objects related to the
simulation have to be modeled and be positioned, and
moving objects also have to be given an animation
behavior, it requires a special animation framework to
facilitate the establishment of 3D visualization from
simulation results. Such framework should allow users
with only average computer skills to easily and quickly
create new animation methods and new visualization
applications. Simulation events provide only abstract
information about state changes without providing details
about how to perform an animation. It is therefore
necessary for the animation framework to support both
pure animation methods and the modeling of object
behaviors. The practical nature of industrial applications
also requires the animation framework to be capable of
reacting to all incoming events in real time.
The cost of system development and the expandability
of visualization systems are topics under active
investigation. There have been some approaches focusing
on reducing the size and complexity of 3D visualization
systems. They use reusable geometric objects in their
animation processes. For instance, Luckas [2, 3] proposed
to use animation elements in object-oriented system
frameworks, and discussed some ideas of using objectoriented technology in 3D visualization. In the method
developed by Dorner [4] for the rapid generation of
animation elements, animation elements encompass
geometric description of their visual appearances and

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

adaptable animation behaviors. His work uses objectoriented methodology in the design of animation
elements, but the emphasis is on the reusability enabled
by overloading of behavior methods.
In his more recent work, Dorner [5] further discussed
the application of 3D components and 3D frameworks.
Software components, rather than software objects, are
used to encapsulate visual appearances and animation
behaviors. The advantage is that animation components
can be visually composed into large scenes. Similarly,
Sun [6] applied object-oriented methodology in the
environment construction of a virtual shop floor. In this
exercise, solid models, behavior models, and control
models are constructed into basic classes for easier
extension. However, it does not provide discussions on
how to construct and implement basic classes.
Although object-oriented approaches reduce the effort
on behavior modelling and animation programming, their
support is weak in either integration of simulation data
into the animation scene or the connection of simulation
results to animations. Wenzel [7] presented an approach
for mapping discrete event simulation models onto
animation models. This approach translates simulation
events into animation actions according to some
predefined translation rules. However, no substantial
results can be found to verify the feasibility of this
method. Furthermore, this method cannot be extensively
used since these rules are related to the specific
application. Quick [8, 9] presented a framework for the
visualization of simulation results, and discussed the
monitoring and control of the visualization system. His
research, however, has not produced any appropriate
results but some conceptual framework and some ideas on
visualization of simulation results. Mueller-Wittig [10]
introduced a system for the visualization of electronics
assembly. His research is at its initial stage, and only the
conceptual framework on visualizing electronics
assembly process is available.
This paper presents a methodology for 3D
visualization of discrete simulation results. This
methodology connects discrete event simulations with 3D
animations, and supports rapid development of 3D
animations from simulation results. It develops the
methods to analyze and convert discrete simulation
results into animation events for 3D animation. Discrete
simulation results are analyzed and displayed in a graph
structure that reveals all possible sequences of simulation
events. In addition, a component-based 3D animation
framework is constructed for the visualization of discrete
simulation results. This framework supports the reuse of
both existing 3D animation objects and behavior
components, and allows the rapid development of new 3D
animation objects by users with average computer skills
through a library of 3D animation objects.

2. Analysis of input data
Discrete event simulators simulate the behaviors of
entities when an event occurs at a distinct point of time.
The occurrence of events drives the simulation and the
simulation clock. Nothing should happen between events.
Therefore, time in a discrete event system does not
proceed linearly but in irregular intervals. An overview of
discrete event simulation can be found in [11].
Most of the simulation packages have a function to
automatically create a trace file as their output. This trace
file records events taking place during the time period of
each simulation run. It is a text file including millions of
records that describe the whole procedure of simulation.
For example, listed in Table 1 is a segment of the trace
file produced by the simulation tool “eM-Plant” [12] in its
procedure of simulating an electronics assembly process.
This table has four columns. The elements in the first
column are the events that trigger the actions. The
elements in the next two columns list the time when
events happen and the material ID numbers respectively.
The elements in the last column are the locations of
materials. The behaviors of a particular material can be
collected from this table. For instance, Table 2 contains a
collection of items from Table 1 that shows some
behaviors of the material P21:1.
Table 1. A small simulation trace script fragment
Event
Out
Out
Out
entranceEnd
Out
Out
Out
entranceEnd
Out
Out
entranceEnd
Out
Out
Out
entranceEnd
Out
entranceEnd
Out

Time
16:17.0000
17:03.2223
17:03.2223
17:05.2223
17:15.2223
17:21.8825
17:21.8825
17:23.8825
17:36.8825
17:56.4935
17:58.4935
18:08.4935
18:28.1026
18:28.1026
18:30.1026
18:30.7915
18:32.7915
18:42.7915

Material
P21:1
P21:2
P21:3
P21:2
P21:2
P21:1
P21:2
P21:1
P21:1
P21:3
P21:3
P21:3
P21:2
P21:3
P21:2
P21:1
P21:1
P21:1

Location
STN_FATP2SA_02.Line
STN_FATP2SA_01.stn
STN_FATP2SA_01.Line
STN_FATP2SA_02.Line
STN_FATP2SA_02.Line
STN_FATP2SA_02.stn
STN_FATP2SA_02.Line
STN_FATP2SA_03.Line
STN_FATP2SA_03.Line
STN_FATP2SA_01.stn
STN_FATP2SA_02.Line
STN_FATP2SA_02.Line
STN_FATP2SA_02.stn
STN_FATP2SA_02.Line
STN_FATP2SA_03.Line
STN_FATP2SA_03.stn
STN_FATP2SA_04.Line
STN_FATP2SA_04.Line

Table 2. The behaviors of the material “P21:1”
Event
Out
Out
entranceEnd
Out
Out
entranceEnd
Out

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

Time
16:17.0000
17:21.8825
17:23.8825
17:36.8825
18:30.7915
18:32.7915
18:42.7915

Material
P21:1
P21:1
P21:1
P21:1
P21:1
P21:1
P21:1

Location
STN_FATP2SA_02.Line
STN_FATP2SA_02.stn
STN_FATP2SA_03.Line
STN_FATP2SA_03.Line
STN_FATP2SA_03.stn
STN_FATP2SA_04.Line
STN_FATP2SA_04.Line

The trace file as demonstrated in Table 1 and Table 2
shows that the discrete simulation events generated by
simulation output provide the behavior information of the
assembly process. However, the trace file is abstract and
very large in volume. It is impossible for a non-expert
user to either establish the relationships between different
discrete events or understand the complex manufacturing
process. To display the simulation results, a visualization
system has to convert discrete events into a special type
of data that can trigger animation behaviors. One
important task is to analyze the structure of simulation
events, and to display simulation events in forms of a
graph. The analysis process first extracts all the distinct
event types and all the behavior information of every
source object, and then describes the complex
manufacturing process in a graph structure.
This graph structure reveals all possible sequences of
events. It helps users to understand the complex process,
and to create the logical link between discrete event
simulation and animation. Since the source of all the
events comes from different projects, these discrete
events often have different formats. Therefore, discrete
events need to be normalized before they can be
processed further. Furthermore, a routing mechanism also
has to be implemented to ensure that the simulation
events can be directed to the animation objects on which
they have an effect.
Table 3. An animation event
Material
Start Event
Start Time
Start Location
End Event
End Time
End Location

P21:1
Out
17:21.8825
STN_FATP2SA_02.stn
Out
18:30.7915
STN_FATP2SA_03.stn

In most cases, the simulation events cannot directly
control the animation since simulation events and
animations do not have a one to one relationship. In fact,
the relationship is a many to one mapping. For example,
in Table 2, the simulation events at the time instances of
“17:21.8825”,
“17:23.8825”,
“17:36.8825”
and
“18:30.7915” can all map to an animation event shown in
Table 3. As a result, the simulation events have to be
converted into animation events by one or more
translation modules. After the routing, the simulation
events are sent to the translation modules. The conversion
of discrete simulation events is accomplished by a set of
translation modules, which can be customized to the
requirements of a specific project. The translation
modules have links to animation objects, which receive
the created animation events during visualization. In cases
when multiple modules are used, each event should only
be sent to the modules that are responsible for its
conversion to save system resources.

In addition, simulation events often lack necessary
information when generating animation events.
Additional data has to be acquired from other sources to
decide the parameters needed before calling an animation
behavior function. In comparison to simulation events,
this data is static and needs only to be acquired once.

3. Conversion of simulation events into
animation events
The discrete event simulation produces discrete
simulation events as its output. These events signal the
change of an object position in the simulation
environment. To trigger the animation of an object and
the animation of other objects with which this object has
interactions, the simulation events are translated into
animation events, and then sent to the animation objects
whose animation behaviours are under the control of
these events.
An analyzer is developed to provide the link between
the discrete event simulator and the animation scene. It
analyzes discrete simulation events, and translates them
into animation events by transforming a sequence of two
and more successive simulation events into one animation
event. To reflect the manufacturing process described in
the simulation output and to aid users creating animation
events, a directed graph is built to show all possible
successor events of each event. Users have the choice to
edit the graph by skipping less important events.
Upon the completion of the graph structure, users can
pick out sequences from the graph and generate
corresponding animation events. Types of animation
events can also be defined in the analyzer. Each
animation event provides a set of parameters. An
animation event is generated after the occurrence of a
certain sequence of one or more simulation events. The
parameters coming from the sequence of simulation
events are later used in the calculation of the parameters
of animation events.
The analyzer framework is shown in Figure 1. The
normalizer converts the data input stream into system
events. Regardless of their source, all system events share
some common characteristics. Each event consists of a set
of data fields. In addition, events provide an event type
and a source object ID. The source object is the object to
which the system event is related. All normalizer modules
are implementations of the same interface. They are
placed in a special package. Users can choose the
normalizer type from all classes contained in the package
at run time.
It is the responsibility of the analysis and display
module to establish the relationships between different
discrete event types according to the ID of source objects
and their sequences of occurrence. Simulation events are

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

then produced from the discrete events and the
relationships between the discrete events. The
presentation of simulation events is in the format of a
graph structure, which reflects the assembly process and
helps users to convert simulation events into animation
events. Since only a subset of event types needs to be
translated, the event router module is employed to prevent
other simulation events from being sent to translation
modules. It is in charge of dispatching incoming events to
only those translation modules that request to receive
them.
Simulation
Output
System Data Stream

Normalizer

4. Event-driven Animation Framework
The animation framework is shown in Figure 2. The
discrete simulation produces discrete simulation events.
The analyzer receives the discrete simulation events from
the simulation, and translates the simulation events into
animation events. New 3D animated objects can be
created in the animation behaviour editor from the
existing 3D object models and animation methods. All 3D
animation objects are stored in a library. In the scene
layout editor, 3D animated objects from the library are
laid out in a scene. Simulation parameters that have
influence on the scene layout or its animation behaviour
are linked to the relevant objects. The connections
between animation event sources and animation methods
of the 3D animation objects can also be established. Upon
the completion of the layout, the viewer displays the
scene according to the animation events received from the
analyzer.

System Events

Analyzer

Animation
Events

Animation
Viewer

Animation
Behavior
Editor

Simulation
Parameters

Scene
Layout
Editor

3D
Animation
Object
Library

Analysis
and Display
Simulation Events

Event
Router

Discrete
Simulation
Events

Simulation Events

Translation
Module

Discrete
Event
Simulation

Figure 2. Animation framework
Animation Events

Animation
Objects

Figure 1. Analyzer framework
The translation modules convert sets of one or more
simulation events into animation events. The translation
modules work as finite automata. They receive from the
event router all the event types that appear in the input
alphabet. For each event source of simulation events that
reaches the translation module, a new state is stored. State
changes take place according to the translation rules of
the automata. If a state change happens to be an end
event, an animation event is created. Its parameters are
determined by the simulation events received by the
automata. The created animation event is finally
broadcast to all animation objects, which are event
listeners registered with the translation module for the
specific event type.

The animation framework supports the creation of 3D
animation objects through its 3D animation object library.
Stored in the repository of this library are animation
objects, each of which is ready to use in a drag-and-drop
fashion. Based upon the Java Beans component model,
this library supports rapid development of new objects. It
allows users to compose new objects from the existing
objects or from parts of the existing objects. For newly
created animation objects, users can compose new
animation methods from the existing animation methods.
Either of the compositions does not require users to have
any prior knowledge of internal implementation.
Furthermore, the communication between components
provided by the Java Beans component framework
enables this library to easily connect the animation
functions to animation event sources. These animation
events control the object animations in the scene. They
initiate animation events for them to trigger the
corresponding animation functions.

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

The authoring framework provides some authoring
tools for users to create or modify a 3D animation quickly
and efficiently according to the different applications.
These authoring tools include layout editor, behavior
editor and animation viewer.
The layout editor is to visually construct a scene model
from individual objects. With the layout editor, animation
objects are selected from the 3D animation object library,
and are positioned within the scene. All objects are
organized into a tree hierarchy, which makes it easy to
change the layout of scene subsets. Object customization
is accomplished by accessing the public methods of
objects, and object positions are defined either visually by
drag-and-drop or manually by typing in the coordinates.
The data to set the coordinate values are retrieved from the
simulation specification. Any change to the simulation
specification is immediately reflected in the positioning of
objects in animation scene, and any change to object
positions results immediate changes in simulation
specification. Moreover, animation methods of objects can
be connected to the animation events created by the
analyzer.
Animation behavior editor is to create and test new 3D
animation objects to make the creation process of 3D
animation objects faster and easier. This editor loads 3D
objects for visualization. Animation behaviors are
specified by customizing objects’ behavior components.
With this editor, new objects can be created from the
existing 3D objects in the library, and new behavior
components can be defined from combinations of the
existing behavior components. A 3D object becomes an
animation object with animation methods, and those
methods are customized from behavior components.
Furthermore, functionality of the animation objects can be
tested during the entire customization process. By calling
the animation methods with test parameters, the
visualization system is able to show the resulting
animations immediately.
The animation viewer is to display the visualization
result. To run an animation sequence for the first time,
however, the animation viewer needs to control the
generation and release of the animation events. After the
animation objects receive the animation events, they start
to generate animations by directly manipulating the
scene’s geometry and appearance in a fixed time frame. To
enable users to search for any particular process events,
the speed of animation is adjustable. Fast-forward and
jumping to certain time points are allowed.

level 3D graphics kernel. It has the advantage that a
component standard Java Beans can be applicable. The
system uses Java Beans [14] in its implementation, and
has achieved flexible configuration and reusable building
blocks, while keeping the complexity of this task low.
The deployment of component technology allows easy
integration with the existing visual building tools in both
the initial system development phase and later for
implementations in different application areas.
The implemented system for 3D visualization of
discrete event simulation has been successfully applied to
an electronics assembly factory. The discrete event
simulation result is generated by a discrete simulation tool
called “eM-Plant” [12]. These discrete events cover the
entire assembly processes. Users can visualize in a 3D
setup all the manufacturing processes, including the flow
of materials, size of buffers, and line balancing. Based on
the visualization results, refinements to the existing
processes were made, for example, on minimal process
time, reduced wait time, and reduced buffer size.

Figure 3. Analysis and conversion of discrete
simulation events

5. Implementation and results
The system implementation relied heavily on the
software component technology. A 3D visualization
system has been successfully developed with Java3D and
Java Beans. Java3D [13] is scenegraph based and high-

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

Figure 4. Shop floor layout

Figure 3 demonstrates the conversion of simulation
results generated by “eM-Plant” for the electronics
assembly process. The graph describes the structure and
relationships of the simulation events. The dialogue box
shows the interface to create animation events. The user
can select a node in the graph and set it as the start event,
end event or middle event to create an animation event.

computer graphics but some average skills of using
computers.
The presented methodology has been successfully
applied in practice for an electronics assembly factory to
visualize the discrete events of its entire assembly
processes. Current research is on the automation of layout
generation for any given scene. The refined technique is
expected to be able to either translate the simulation logic
of certain simulators directly into scene layouts or at least
to let the users define a 3D animation object
representation for frequently used simulation logic
components.

7. References

Figure 5. Virtual shop floor
Figure 4 illustrates the layout of the shop floor. Figure
5 shows the virtual shop floor. There are some types of
information that cannot be visualized as animated 3D
models. These are related to system parts, and should be
presented as a 3D model in the virtual environment.
These types of information contain valuable background
information about the system parts and dynamic
processes of the system. Such information is also
provided for monitoring purposes, although not through
animation. Figure 6 shows the virtual shop floor with
additional information.

6. Conclusions and future work
Presented in this paper is a methodology for 3D
visualization of discrete event simulation. By developing
new methods to analyze and convert discrete simulation
results into animation events for the generation of 3D
animation, this methodology creates an innovative and
efficient connection between discrete event simulations
and 3D animations. In addition, it develops a 3D
animation framework for the visualization of discrete
simulation results. This framework uses the software
component technology, and supports the reuse of
animation objects and behavior components. It allows
rapid development of animations from simulation results.
By means of a library of 3D animation objects and easyto-use graphics editors, this visualization system does not
require its users to have any special knowledge of

[1] Rohrer, Matthew W.; Seeing is believing: The importance of
visualization in manufacturing simulation, Proceedings of the
2000 Winter Simulation Conference, 2000, pp1211-1216
[2] Luckas, V. and T. Broll, CASUS: an object-oriented threedimensional animation system for event-oriented simulators,
Proceedings of Computer Animation 1997, 1997, pp144-150
[3] Luckas, V., R. Dörner, Experiences from the future - using
object-oriented concepts for 3D visualization and validation of
Industrial Scenarios, ACM Computing Surveys, No.12 , 1998
[4] Dorner, R., C. Elcacho and V. Luckas, Behavior authoring
for VRML applications in industry, Technical Notes of
Eurographics’98, Liston, 1998
[5] Dorner, R. and Grimm, P., Building 3D applications with 3D
components and 3D frameworks, Workshop Structured Design
of Virtual Environments, At Web3D, Paderborn, 2001
[6] Sun, Liansheng, Ruxin Ning, The research on constructing
of the virtual shop-floor environment, The Third International
Conference on Virtual Reality and its Application in Industry,
Hangzhou, China, April 17-21, 2002
[7] Wenzel, Sigrid and Ulrich Jessen, The integration of 3-D
visualization into the simulation-based planning process of
logistics systems, Simulation, Vol. 77, No. 3-4, 2001, pp114127
[8] Quick, Jochen Manfred, Component-based 3D visualization
of simulation results, The Advanced Simulation Technologies
Conference, San Diego, USA, April 14-18, 2002
[9] Quick, Jochen Manfred, Monitoring and control of systems
by interactive virtual environments, 10th International
Conference on Human-Computer Interaction, Crete, Greece,
June 22-27, 2003, pp.1101-1105
[10] Mueller-Wittig, Wolfgang, Reginald Jegathese and Meehae
Song, Virtual factory–highly interactive visualization for
manufacturing, Proceedings of the 2002 Winter Simulation
Conference, San Diego, California, 2002, pp1061-1064
[11] Banks, Jerry, Discrete event simulation, Proceedings of the
1999 Winter Simulation Conference, Pheonix, Arizona, 1999,
pp.7-13
[12] Tecnomatix, eM-Plant Reference Manual 4.6, Tecnomatix
Tecnologies Ltd., 2002
[13] Sowizral, Henry, Kevin Rushforth and Michael Deering,
Java 3DTM API specification, 1999
[14] Hamilton, G., The JavaBeansTM 1.01 specification, 1997,
http://java.sun.com/beans/ docs/spec.html

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

