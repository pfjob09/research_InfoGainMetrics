Using Graphically Represented Ontologies for Searching Content on the
Semantic Web
Leendert W. M. Wienhofen
CognIT a.s, Meltzersgate 4, N-0257, Oslo, Norway
Leendert.Wienhofen@cognit.no

Abstract
The idea behind the Semantic Web is to include
semantic information on each web page, so that machine
processing for retrieving relevant information is made
easier [3]. In order to be able to retrieve relevant
information, the user still needs to be able to query the
web in an efficient way to exploit the full potential of
Semantic Web technology. This paper describes an
application design for using graphically represented
ontologies for searching the (Semantic) Web. One of the
benefits of this approach is that these queries can be
translated to different query languages such as
RQL[5][12], OWL[11], XQL[16], etc.

1. Introduction
The Internet brought a great advantage to everyone
who wanted to publish something for the world to see.
The ease of publishing unfortunately lead to an overload
of information, which in turn led to difficulties in retrieval
of relevant information. When searching the current
World Wide Web (WWW), it is hard to find relevant
information, as search engines typically are keyword
based and therefore also present results that are out of
context. The Semantic Web vision came to life because
the current WWW lacks semantic information about the
presented content, which makes computer processing of
this information, and therewith the retrieval of this
content a hard task. The Semantic Web is envisioned to
solve the problem of retrieving heaps of irrelevant hits
when searching, as is the case with the current Web.
Retrieval problems started when the Internet became
available for everyone and the ease of publishing led to
huge amounts of mostly unstructured data. If we wish the
Semantic Web to be as successful, or perhaps even more
successful as the WWW, publishing needs to be as easy
as it currently is, and retrieval methods need to be as is
easy as they currently are but of course the relevance of
the retrieved contents needs to be much better.
The Semantic Web vision has been around for some
years now, and many scientists have contributed with new

ways of representing and retrieving content. Visualising
this new content can be done by means of both by text
and graphical representation. In this article an application
design for retrieving data by means of graphically
represented ontologies is presented. A benefit of this
approach is that it is query language independent. Users
have a uniform method of accessing information; a
conversion algorithm can be made for each available
query language, and be used as a plug-in.

2. Visual query languages
An experimental proof by Catarci and Santucci [7]
shows that QBD* (Query By Diagram*), a visual query
language, is easier to use and gives better results than the
text based SQL queries. The experiment defined three
groups of users, naive, medium and expert. All three
groups show that they get better results faster by using the
visual approach.
Other visual query languages, such VISUAL [2] and
GLASS [14] are available. Even though most are
designed for use with databases or XML files, the type of
use presented in this paper does not differ that much as
most Semantic Web languages are XML based and define
semantic relations. Database queries (SQL) are based on
relations, and XML file queries are done on structured
data. The available visual query languages however are
generally not focused towards the naive type of user,
which is of course the most numerous type of user. This
paper presents a search method that is aimed at the naive
user, yet serves enough possibilities so that also expert
users can draw use of it. In fact, it is built up with the goal
that naive users gradually can become medium level users
and eventually expert users.

3. Graphical Ontology Design Environment
(GODE)
The Graphical Ontology Designer Environment
(GODE) [17] is meant to give the users that use today’s
keyword-based search-engines the possibility of drawing
full advantage of the Semantic Web as well. GODE aims
to give users of all groups (naive, medium, expert) an
intuitive interface for searching the (Semantic) Web. By

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

gently introducing the concept by means of a guided
search, where users can type a natural language text of
which a graphical ontology is automatically created, naive
users get the opportunity to explore the benefits of the
Semantic Web with a low threshold. These users can
emerge to become medium level users and construct their
own graphical ontologies from scratch and run them
through an ontology-checking algorithm to make sure
each ontology is of good quality and do not contain any
contradictions or “impossible” situations. Expert users
can use the advanced options of the GODE and define
relation types between the search concepts.
By using this approach, the problem moves from the
current situation of easy (keyword based) searching which
results in many irrelevant hits, to slightly more difficult
searching (by means of constructing graphically
represented ontologies) which should result in relevant
hits only. The relevance of the hits in the result list is of
course heavily dependent on the quality of the ontology.
This is why the GODE offers a built-in training program
by means of the guided search and ontology quality
checking algorithms.
The GODE is not available as a complete solution as
of today, yet most of the technology presented is already
available. Enabling technologies are presented or referred
to where necessary.

3.1. GODE Canvas
GODE has a canvas where the visual query can be
drawn upon. It consists of three different areas, as shown
in Figure 1.

3
2
1

Figure 1: The GODE canvas
Area 1 is the main concept area, where the core
search concepts are placed. Area 2 is for background
knowledge concepts, which serve as a context identifier
and background knowledge. These concepts are to be
related to concepts in the main area. Area 3 is the canvas,
which can be used to temporarily store concepts that will
not be part of the search. It does not matter whether these
concepts have edges connected to concepts in the main of
background knowledge are, as these simply are
disregarded. The areas can be any shape, as long as these
do not overlap.

Concepts can be dragged from one area to the other,
or the area boundaries themselves can be dragged in order
to change the relevant area of the concepts. The canvas of
the GODE, with concept and edge visualization and
editing possibilities and the area representation, is
currently being developed as part of a student project.

3.2. Using background information
The creation of an ontology can be simplified when a
direct connection to a background knowledge system.
Examples of systems that can be used are Sesame [6], a
RDF [13] repository, and WordNet [18], a lexical
information database. GODE can feed the concept to the
background information system, which will return
semantic or lexical related concepts. The user can then
select these to become part of the ontology.
For disambiguation of concepts, WordNet can supply
different meanings of the concept. The user then picks the
correct meaning and adds this in the background
knowledge area of the GODE and defines an edge
between the context concept and the main concept.
WordNet can also assist in finding the correct relation
type between concepts, or carry out a search on e.g. all
meronyms of the concept “car”. Note however that
WordNet is being continuously worked on, and it is
aiming at providing lexical references for all known
words, yet it will take time before this ultimate goal is
reached.

3.3. Ontology checking
When you build your own graphical ontology without
any guidance, you may be in doubt of the quality of your
ontology. Therefore it would be very nice to get some
feedback about which part of the ontology should be
adjusted in case the result page is empty or contains
irrelevant results. The ontology checking can be based
upon either a semantic knowledge base, or based on the
results after a search. These ideas will only reflect
Semantic Web searches, and not WWW searches.
Some general advice regarding the graphical
ontology can be given before running a query or
evaluation based upon a knowledge base. This advice can
take into consideration (this is a non-exhaustive list,
partly inspired by information found in [15]):
• Too few concepts. This makes the search too
general.
• Too many concepts placed too closely to each
other. Makes it hard to focus on which concepts
should have the highest weight in the search.
• More than one numerical range. When wrongly
related to concepts this can cause trouble.
• Repeated concepts. When a concept is
mentioned once, it can always be related to other

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

concepts in some way.
Incorrectly spelled concepts. A simple spelling
checker can supply alternatives.
• Wrong collocation concepts. A combination of
words that can never form a collocation will
never be a concept.
When the ontology is checked after running a search
on The Semantic Web, information can easily be gathered
based upon the results. The result set may for example
reveal that a concept is never related to the concept that
the user chose to relate it to, meaning that one can assume
this relation does not exist.
Checking based upon a semantic knowledge base
includes a potential extra source of error in case the
knowledge base is rather small. Relations assumed by the
user which are not present in the knowledge base might
exist in large numbers on The Semantic Web, yet these
relations will be marked as a potential problem, meaning
the ontology is evaluated wrongly.
•

3.4. Simple search
The “simple search” option gives the user the
possibility to create an ontology with edges between
concepts, yet without relation types on these edges (with
the exception of numbers), hence the “simple search”.
Since the type of the relation is not known (other than the
fact there is a semantic relationship if the nodes are
connected) this technique can also be used for searching
the current WWW.
For simple search there are two possible scenarios:
The “guided search” (see paragraph 3.4.1.) can be seen as
a type of tutorial mode. It is meant to get naive users
accustomed to the concept of this visual query language.
Guided search in this case means that the user will be able
to type a query in plain natural language, and this will be
automatically transformed to a graphical ontology, which
on its turn can be edited to better suit the searcher’s needs.
The other mode of simple search lets users build a visual
query from scratch (see paragraph 3.4.2.), which of course
requires some familiarity with the concept before one can
effectively make use of the power of this type of
searching.
The “simple search”, guided or not, gives the user the
possibility to put concepts in semantic context by adding
edges between them. This is a benefit compared to the
traditional keyword-based search engines such as Google
(http://www.google.com),
AltaVista
(http://www.altavista.com), etc., where the keywords have
no other semantically relation than simply being present
in the same document or on the same web page.

queries already exist, yet they all require some form of
training in order to acquaint user to the concept. The
GODE approach includes this training.
The main idea with “guided search” is that a user
simply types a sentence or perhaps a whole paragraph or
document to base the visual query on. GODE then runs
this piece of text through a semantic analyzer such as
OntoExtract [10] and represents the main concepts as
graphical output, which is generated based on the spring
embedder algorithm [9].
Now, the user can take this graphical ontology as a
starting point and add, remove, edit and/or move the
nodes, or change the position of the areas on the canvas.
An example, based on this paper, is shown in Figure 2.
This example is meant as an impression of what the view
can look like. In this case the central concept is
“semantic_web”.
For larger representations, the view may look quite
chaotic at first glance, yet the information presented is
very understandable, even for naive users, as it is very
easy to comprehend which concepts are related to each
other and judging by the distance between the concepts,
how related these are (the closer, the more related).
Collocations, combined concepts, have higher
information value than single keywords, and therefore be
used where possible. An example of a collocation is
“graphical_ontology”. Note that the underscore is a
replacement for a space.
As of today, we can not fully rely on the output from
OntoExtract or other automated extraction tools alone,
human interference is needed in order to perform better
[8]. The user can edit or delete the undesired concepts,
such as “type”.
The edges between the concepts depict only that
there is some sort of semantic relation between these
concepts, not which kind of relation it is. Relation
strength however, can be derived since concepts that are
placed close to each other are more related than concepts
that are further away from each other. For the simple
search scenario there are two exceptions however,
negations and numbers. Edges between two concepts can
have a negation value, which simply means that these two
concepts are not related to each other. Negations serve as
a very strong ambiguity eliminator. Numbers are the
second case; edges between two numerical values can
indicate a range value. To prevent the conversion
algorithm from assuming that numbers are meant
explicitly, we must indicate that it is a range, which can
be done by creating a ‘between’ property for this
particular edge.

3.4.1. Guided search
As mentioned before, a variety of tools for visual

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

Figure 2: GODE guided search output example
3.4.2. Building your own graphical ontology
To get started, begin by making nodes for the
concepts that you normally would use in any keywordbased search-engine. Where applicable, connect these
concepts with one other by adding an edge. Then decide
where to place the concepts in relation to each other.
When creating your own visual query, always bear in
mind the spring embedder [9] approach to guide you
through the placement. Strong links mean short edges,
while weakly related concepts are placed further away
from each other. When all concepts have equal distance
between them (only possible in very small ontologies),
then each concept is equally important. That is, if there
are no weights defined on the edge. A weight indicates
the semantic strength between the concepts, and these are
bi-directional meaning that concept A can be more related
to concept B than the other way around.
A background knowledge system can also assist the
user in picking concepts faster and (perhaps) more
accurately.
3.4.3. Application area of simple graphical ontologies
Simple graphical search, with or without guidance,
can be used for searching both the WWW, as well as The
Semantic Web. Simple graphical search will, unlike
advanced graphical search, not unleash the full power of
The Semantic Web, since valuable relation information
might be missing.
When using simple graphical search for the WWW,

probably the best result will be achieved using a two-step
method. First, translate relations to advanced queries for
WWW search engines, and then run this result set through
CORPORUM technology [4], developed by CognIT a.s,
to make sure the concepts are semantically related instead
of simply being present on the same web page. When
searching the WWW, unfortunately, any number range
information will get lost.
The first of the two steps will consist of creating a
Boolean query out of the concepts that are contained in
the main concept area of the GODE canvas. Concepts in
the second area, as well as on the remainder of the canvas
are not used at all in this iteration. All concepts in the
main concept area that are connected with an edge, will
be bound by the AND parameter. Negated edges will get
the negation tag valid for the chosen search engine.
A user-defined number of results that are presented
by the search engine can then serve as a basis for further
processing by CORPORUM technology. These result
pages will be loaded into CORPORUM technology,
which extracts relevant information from this page and
compares it to the original graphical ontology. The results
will be re-arranged according to the semantic relevancy.
In case the domain is already known (for example,
one is looking for course information at some university),
the first step can be omitted and CORPORUM can
crawl through the domain directly and compare each page
directly with the graphical ontology. This will take some
more time, since the web pages are not pre-indexed.
However, results will be more relevant and reliable.
When translating to Semantic Web queries, concept
relation strength will be calculated based on the length of
the edges and the placement of concepts in relation to
each other. Relation strength will be equal from concept
A to B and B to A. This is valid for all concepts except
the ones placed on the square part of the canvas (the “on
hold” part). In case the result set is too large, the result set
itself can be used as a repository and a new query can be
made on just this sub-set of the Semantic Web, much as
described in the paper on VISUAL. This query can be
built up by merging graphical representations of the
results in the query. Further, by enhancing
CORPORUM to include explicit references to implicit
structure from a semi-structured source as a web page
with anchors, headings, etc. as mentioned in [1], in the
result set, an intermediate step toward the Semantic Web
can be made. Conversion algorithms for converting
visual queries to Semantic Web language queries are not
yet implemented.

3.5. Advanced search
It already is obvious that the simple search alternative
is meant for the naive and medium level users as it lacks
the possibility to make full use of the semantic

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

information provided on The Semantic Web. Hence, an
advanced search alternative that will unleash the full
potential of The Semantic Web is presented in this
paragraph. The main addition in advanced search is the
possibility to include bi-directional relation strengths and
typed edges (e.g. negation and range) to indicate the type
of relation between two concepts and much more. The
environment for advanced search offers many more
options than the simple search alternative. Edges can have
the following properties or types:
Bi-directional relation strength
As mentioned before, concepts are usually not
equally related to each other. For example, a king is more
related to Norway than Norway to a king; The same goes
for a whale, which is more related to an ocean than an
ocean to a whale.
Negation
An edge can indicate that a concept is not related to
another concept. This is a much stronger indicator than
simply not relating these two concepts to each other.
Range
This property can only be used for edges that connect
at least one numerical value or date. A range can be either
one of the following:
X is larger than Y:
X>Y
X is larger or equal than Y:
X >= Y
X is smaller than Y:
X<Y
X is smaller or equal to Y:
X <= Y
Between X and Y:
X .. Y
Some restrictions apply when using these properties;
please refer to the table below for an overview.
X
Numerical
value
Numerical
value
Numerical
value
Date
Date
Date
Concept
Concept
Concept

Possible
properties
“>”, “>=”,
“<”, “<=”, “..”
“>”, “>=”,
“<”, “<=”
“>”, “>=”,
“<”, “<=”
“>”, “>=”,
“<”, “<=”
“>”, “>=”,
“<”, “<=”, “..”
“>”, “>=”,
“<”, “<=”
“>”, “>=”,
“<”, “<=”
“>”, “>=”,
“<”, “<=”
Void

Y
Numerical
value
Date
Concept
Numerical
value
Date
Concept
Numerical
value
Date
Concept

Synonym
Synonyms are concepts that have the same meaning
or nearly the same meaning. One would typically use the

synonym property to indicate background knowledge. For
example, making sure that a word that can be spelled in
two ways (e.g. “aluminum” and “aluminium”) is taken
into consideration when the ontology is being matched.
Meronym
Meronyms indicate that a concept is a part or a
member of another concept. E.g. “a steering wheel is a
meronym of a car”.
X is a meronym of Y if X is a part of Y.
Holonym
A holonym indicated the whole of which the
meronym names a part. It is in other words the opposite of
meronym. E.g. “a car is the holonym of a steering wheel”
Y is a holonym of X if X is a part of Y.
Hypernym (super class)
The generic term used to designate a whole class of
specific instances. E.g. “Vehicle is a hypernym of
Mercedes_01”
Y is a hypernym of X if X is a (kind of) Y.
Hyponym (sub class)
The specific term used to designate a member of a
class, it is the opposite of hypernym. E.g. “Mercedes_01
is a hyponym of vehicle”
X is a hyponym of Y if X is a (kind of) Y.
Also with the advanced search, a type of guidance
can be built in. The guided search as mentioned in
paragraph above, can also be used to get a kick-start with
advanced search. However, only a relation between the
concepts is established, the user must define the type of
relation between these concepts.
3.5.1. Application
ontologies

area

of

advanced

graphical

It would be rather pointless to invest a lot of time
creating ontologies with advanced relations and to simply
strip all this information in order to apply it to a WWW
search. Therefore, advanced graphical search is solely
intended for use on The Semantic Web or in corporate
situations where resources are semantically annotated.
The first application method for advanced graphical
ontologies is searching on The Semantic Web. With all
advanced properties on edges it should be relatively easy
to find relevant information on a topic. Currently, no
programs for translating these visual queries to Semantic
Web queries exist, yet these are planned for in the near
future.
Large(r) advanced graphical ontologies can also be
used for knowledge management. A large corporation can
for example define an ontology for each business unit,
work process and the skills of each employee. This way,
skills management can be put in practice. The human
resource department will be able to find employees
internally to fill a vacancy, instead of sending out a job

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

description. The whole can also identify skill gaps in the
organisation, enabling effective hiring of new employees.
Furthermore, these ontologies can be very useful for
finding relevant documentation on the Semantic Web or
on the (semantically annotated) corporate intranet. The
problem with information is that it is often available, yet
not visible. By making information visible, time can be
saved and employees can work more effectively.
3.5.2 Intended audience for advanced graphical search
Advanced graphical search can be used by people
who have increased their visual querying competence by
starting either as a naive or medium level user of the
system and became expert level users, and now are ready
to exploit the full potential of possibilities the Semantic
Web.
As these graphically represented ontologies also can
be saved, knowledge engineers and medium or large
corporations with a lot of procedures and business units
are another type of candidates. A human resource
department in a company could benefit greatly from
having the possibility to query a semantic database, such
as Sesame, that contains an ontology describing each
employee. Knowledge engineers can use GODE to create
the content.

Conclusions
New technology such as the Semantic Web is
emerging on the Internet, yet no search-engines that are
user-friendly enough for beginners have been developed
for this new technology. This paper presents the
Graphical Ontology Designer Environment, an
environment which gives users of all competence levels
the ability to execute queries that would be (near)
impossible to carry out using today’s search-engine
techniques. Today, some tools that can serve as building
blocks for the GODE are already available. By putting
these tools together and creating some additional features,
it is possible to create the GODE.
By implementing the GODE as a plug-in for existing
technology such as CORPORUM Knowledge Server,
users can already get accustomed to the new way of
searching to get ready for the next step: the Semantic
Web. When the Semantic Web becomes more mature,
plug-ins for conversion of visual queries to Semantic Web
query languages can be made in order to make the
Semantic Web as available for the general audience as the
WWW is today.

References
[1]

[2]

[3]

[4]

[5]

[6]

[7]

[8]

[9]
[10]

[11]

[12]
[13]

[14]
[15]

[16]

[17]

[18]

Abiteboul, S., “Querying Semistructured Data”, In
Proceedings of the International Conference on Data Base

Proceedings of the Eighth International Conference on Information Visualisation (IV’04)
1093-9547/04 $ 20.00 IEEE

Theory, pages 1-18. Springer-Verlag LNCS 1186, 1997.
Balkir, N.H., Ozsoyoglu, G., Ozsoyoglu, Z.M., "A
Graphical Query Language: VISUAL", submitted for
journal publication, 1997.
Berners-Lee, Tim, Hendler, James and Lassila, Ora, “The
Semantic Web”,
Scientific American, May 2001
issue.
Bremdal, B. and Johansen, F., “CORPORUM technology
and applications”,
White paper, CognIT a.s, 2000
Broekstra, Jeen and Kampman, Arjohn, “Query Language
Definition Technical Report describing the query
language proposal for Sesame”, OnToKnowledge Project
Deliverable 9, EU-IST On-To-Knowledge IST-199910132, May 2001.
http://sesame.aidministrator.nl/publications/del9.pdf
Broekstra, J., Kampman, A. , and Harmelen, F. van,
”Sesame: An architecture for storing and querying RDF
data and schema information”, in Lieberman, H., Fensel,
D., Hendler, J., and Wahlster,W. editors, Semantics for
the WWW. MIT Press, 2001.
Catarci, T. and Santucci, G., “Are visual query languages
easier to use than traditional ones? An experimental
proof.” In International Conference on Human-Computer
Interaction (HCI95) (1995).
Davies, John, Fensel, Dieter, Harmelen, Frank van,
“Towards The Semantic Web,
Ontology-Driven
Knowledge Management”, Wiley, 2003
Eades, P., “A heuristic for graph drawing”, Congressus
Numerantium, 42, 149-160. 1984
Engels, R and Bremdal, B, “Ontology Extraction Tool”,
Deliverable 6 of the EU 5th framework Project
OnToKnowledge (IST-1999-10132), CognIT a.s, 2001
Heflin, Jeff, “Web Ontology Language (OWL) Use Cases
and Requirements
Ontology
definition”,
W3C,
February 2003
Karvounarakis, Greg, et. al, “RQL: A Declarative Query
Language for RDF”, November 2001.
Lassila, Ora and Swick, Ralph R., “Resource Description
Framework (RDF) : Model and Syntax Specification”
Recommendation World Wide Web Consortium,
February 1999.
Ni, W., Ling, T. W., “GLASS: A Graphical Query
Language for Semi-Structured Data”, 2003
Noy, Natalya Fridman and McGuinness, Deborah L.
“Ontology Development 101: A Guide to Creating Your
First Ontology”, Stanford Knowledge Systems Laboratory
Technical Report KSL-01-05 and Stanford Medical
Informatics Technical Report SMI-2001-0880, March
2001.
Robie, Jonathan (Texcel, Inc.), Lapp, Joe (webMethods,
Inc.), Schach, David (Microsoft Corporation), “XML
Query Language (XQL)”, September 1998
Wienhofen, Leendert W. M., “Using Graphical
Ontologies for Searching The (Semantic) Web”,
University college of Østfold, August 2003.
Miller, G. A., Beckwith, R., Fellbaum, C., Gross, D. and
Miller, K. J. “Introduction to WordNet: An On-Line
Lexical Database”. International Journal of Lexicography
(special issue), 3(4):235-312, 1990.

