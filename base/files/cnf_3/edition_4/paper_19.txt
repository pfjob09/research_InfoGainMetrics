12th International Conference Information Visualisation

Flexible Method for Producing Static Visualizations of Log Data
Harri Siirtola, Kari-Jouko R¨aih¨a, Veikko Surakka, and Toni Vanhala
HCI Unit TAUCHI, Department of Computer Sciences, University of Tampere
{harri.siirtola, kari-jouko.raiha, veikko.surakka, toni.vanhala}@cs.uta.fi
Abstract

ements. In an ideal situation we have a visualization tool
that allows developing the visualization interactively, but
sometimes we resort to creating static visualizations in lack
of time or other resources. There are some general-purpose
interactive visualization tools (such as Spotfire [12]) that
are applicable in some situations, but often a tailored static
solution is a better than a general data visualization tool,
even if we consider the power of interaction. There are
many flexible open-source visualization tools for producing the static visualizations as well (such as Graphviz [4]).
This paper describes the approach we used to visualize
the collection of log files produced by one of the experimental software systems that was piloted in the project
AtGentive [2]. The corpus of data was approximately
840,000 lines of log events collected during a five-week
pilot study.

The aim in this work was to develop a method to visualize log files produced by a pilot study of an experimental e-learning platform. The e-learning system running on
a web server generated detailed descriptions of its usage
that were analyzed. The log files were produced to allow
the project’s researchers to study offline how the system
was utilized. We used open-source software tools to create a flexible system that processed a large amount of log
data into concise visual representations. The visualizations
revealed a set of different interaction patterns during the
pilot study and showed that each teacher had a large effect on students’ interaction with the system. Thus, the results showed that the suggested visualization method can
be used to support the evaluation and training of students’
proficiency in a learning environment.

2 Related work

Keywords— Log visualization, static visualization, opensource tools

1

Log analysis is a research method with a wide variety
of applications. As a concept, a log is usually defined to
be a history of sequential events with accurate timing. A
sufficiently detailed log of events allows performing offline
analysis of system usage and to uncover patterns, anomalies, and gain overview of the logged system’s behavior.
Log analysis is used extensively and routinely in the
day-to-day maintenance of computer systems. In a typical
server, there are several subsystems that log their actions,
such as web servers (e.g., Apache) and revision control systems (e.g., CVS, Subversion), and the system itself logs its
actions (syslogd). This data is collected for purposes of
general maintenance, hardware failure monitoring, and intruder detection. For some of these log formats there are
specialized visualization tools, such as, e.g., Analog and
Webalizer for the web server logs.
Log analysis is also an important tool in the development of web sites as the logs reveal how users navigate and
utilize them [3, 10, 8]. These visualizations show how the
site is visited over time (yearly/monthly/daily/hourly number of visits) and by whom (referrers, IP numbers, user
agents, originating countries). In addition, the data and
distribution of site entry and exit pages provide valuable
guidance for site development.

Introduction

Software systems commonly record their usage into a
log file. Typical examples of such software systems are
World Wide Web servers, search engines, usability test
beds, and generally, all login-based computer services.
Moreover, when we log the system use for research purposes, the logs tend to be large, because it is difficult to
know in advance what you might need in your analysis. It
is easy to filter out some of the information in an existing
log, but it’s impossible to gather more of information once
the moment passes. However, it is possible to derive ‘new’
information from the log data through, e.g., aggregation
and computation. The computations that further abstract
the log contents are useful when we need to recognize patterns in our data.
Analyzing a collection of large log files is a demanding
task. Unless there is a dedicated visualization tool specific
to log format, the process is usually a combination of statistical analysis, data mining procedures, and application
of information visualization techniques. The visualization
challenges include creating a visual language for the problem, finding the best mapping for the data and visual el-

1550-6037/08 $25.00 © 2008 IEEE
DOI 10.1109/IV.2008.42

127

The log analysis approach has also been used in the usability research [6, 13, 7] and in the mining of usage patterns of collaborative systems [9].

3

The top-level activities are:
Introduction: Introduce yourself on the platform
Learning goal: Explain your goal to your expert

AtGentive systems

Mind map: Create a mind map about your topic

The AtGentive project (Attentive Agents for Collaborative Learners, [2]) funded by the 6th Framework Research
Program of EC focused on using artificial agents for supporting the management of attention in e-learning environments. Both embodied animated characters appearing
on computer screen and non-visual software agents were
explored in two contexts: in a classroom environment at
schools and in a distance learning setting. The former studied managing the short-term attention (i.e., span of a typical school class) and the latter about managing the longterm attention (i.e., spanning several weeks). The research
was carried out by implementing two web-based prototypes, one for each setting, and running a pilot study where
the participants were divided into two groups having either
an active or passive agent. The two systems were built on
top of existing systems and were named AtGentSchool and
AtGentNet. The fundamental idea in these systems is that
the active agent redirects learner’s attention when a potential problem is detected.
Both AtGentive pilots were scattered geographically on
a wide area. The AtGentSchool pilot was carried out in
five schools in and out of Prague, Czech Republic, and
the AtGentNet pilot participants were in several European
countries. This arrangement did not allow researchers to
observe events in situ, and they had to rely on the log data,
questionnaires, and interviews in analyzing the pilots. In
the rest of the paper we focus on the visualizations of the
AtGentSchool log data.

Discover: Work on your paper
Decide: Submit your assignment
In addition, there are activities for being on the top level
of the system (project manager), visiting the discussion forum and reading the diaries. Finally, it includes a “smiley
face” interface for giving feedback at any time with a scale
“happy–neutral–sad”. The idea was that the students could
express their opinion at any point if they were particularly
satisfied or unhappy with the system’s operation.

Figure 1: AtGentSchool user interface
The AtGentSchool system allows students to take the
activities in any order and as many times as they wish.
The system with active agent will intervene when it recognizes that a student is potentially stuck in some task, and
suggests what might be a productive next move. The concept and quality of intervention is central in the AtGentivebased systems, but we refer to the project publications for
further information [2].

3.1 AtGentSchool user interface
The AtGentSchool system was built on top of the Dutch
e-learning platform Ontdeknet [11] and follows the same
design philosophy. Students work autonomously in groups
of two in front of a computer on a given project, and the
outcome is a paper responding to an assignment. While
working on the project, the students can discuss about their
assignment with other students via the platform. In addition, the students can pose questions to a domain expert via
the platform, and read diaries written by the expert.
The pilot study consisted of five classes of 45 minutes
each during the five-week period. The assignment in the
pilot study was to explore in which country you would like
to live in if the choices were Czech Republic and New
Zealand. The idea was to gather information about the
two countries and make informed comparisons about education, health care system, tourism, etc.
Figure 1 shows the main view of AtGentSchool user
interface where the student can choose their next activity.

3.2

AtGentSchool logging

AtGentSchool is a server-based web application using
a web browser as its user interface. This setup allows detailed logging of user requests at server side.
Figure 2 shows a small excerpt from the log. The
EVENT entries record start/stop of a task or entrance to a
specific part of the system’s UI, and INTERVENTION entries indicate planning, withdrawing, and sending of interventions – moments, when the embodied agent activates.
The ending points of a task are problematic in a browser
environment. The user may shut down the browser or move

128

2007-05-22
2007-05-22
2007-05-22
2007-05-22
2007-05-22
2007-05-22
2007-05-22

11:16:52,713
11:16:53,365
11:16:53,366
11:16:53,415
11:16:57,904
11:17:27,985
11:17:28,025

2007-05-22
2007-05-22
2007-05-22
2007-05-22
2007-05-22
2007-05-22
2007-05-22
2007-05-22

11:17:28,114
11:19:35,059
11:19:35,178
11:19:35,408
11:19:35,442
11:19:37,056
11:20:30,933
11:20:30,971

2007-05-22
2007-05-22
2007-05-22
2007-05-22
2007-05-22
2007-05-22

11:20:31,107
11:21:21,720
11:21:21,838
11:21:21,954
11:21:29,376
11:22:00,732

DEBUG - New application event: EVENT:16774 BREAKPOINT screen=st_projects
DEBUG - Lowering priority: INTERVENTION:16774 TEXT_INTRODUCTION_INTRO1
DEBUG - Removed intervention: INTERVENTION:16774 TEXT_INTRODUCTION_INTRO1
DEBUG - Sending intervention: INTERVENTION:16774 TEXT_INTRODUCTION_INTRO2
DEBUG - New application event: EVENT:16774 ASKME_INIT null
DEBUG - New application event: EVENT:16774 START_TASK persinfo#16774#16774
DEBUG - New application event: EVENT:16774 BREAKPOINT screen=st_persinfo,
module=PERSINFO (edit) (edit - memberinfo)
DEBUG - Sending intervention: INTERVENTION:16774 TEXT_INTRODUCTION_EXPLANATION1
DEBUG - New application event: EVENT:16774 COMPLETE_TASK persinfo#16774#16774
DEBUG - Sending intervention: INTERVENTION:16774 TEXT_INTRODUCTION_MONITORING1
DEBUG - New application event: EVENT:16774 START_TASK projectmanager#55#16774
DEBUG - New application event: EVENT:16774 BREAKPOINT screen=st_projects
DEBUG - Sending intervention: INTERVENTION:16774 TEXT_LEARNINGGOAL_INTRO1
DEBUG - New application event: EVENT:16774 START_TASK assignmenttarget#4882#16774
DEBUG - New application event: EVENT:16774 BREAKPOINT screen=st_assignment,
module=ASSIGNMENT > TARGET (make - mainedit)
DEBUG - Sending intervention: INTERVENTION:16774 TEXT_LEARNINGGOAL_EXPLANATION1
DEBUG - New application event: EVENT:16774 FEEDBACK userstate=confused
DEBUG - IdleUser Event: EVENT:16774 IDLEUSER 20000
DEBUG - Sending intervention: INTERVENTION:16774 TEXT_LEARNINGGOAL_COGNITIVE_SUPPORT1
DEBUG - New application event: EVENT:16774 FEEDBACK userstate=sad
DEBUG - Sending intervention: INTERVENTION:16774 TEXT_ES_SAD1

Figure 2: Excerpt from the AtGentSchool log data
elsewhere while being in a middle of something. It was
necessary to recognize and make distinction between these
situations in the visualizations.

4

Some tasks could be explicitly marked as completed by
the user. For those tasks we used a hexagonal box (shape
of a “stop sign”) instead of a rectangular one.

Visual language for AtGentSchool logs

The goal in designing the visual language for AtGentSchool logs was that it should allow both micro and
macro level reading, as Tufte has suggested [14, Chapter
2: Micro/macro readings]. The visualizations should be
readable as patterns to recognize structures, and yet they
should be detailed enough to reveal information about the
system use. As a practical goal, we wanted to have a “big
picture” visualization that captures the whole pilot of a student pair on a single sheet of paper.
Eventually, we decided to implement the visualizations
as simple node/link diagrams where the nodes are tasks
and links are transitions between tasks. This representation
was understandable to all parties in this multidisciplinary
project.

4.1

Task X
60

Task X
10
Task X
25

Task X
50

3

Task X
15

Task X

Language elements

Task X

Not completed

Single task is represented as a rectangular box containing the task name and duration as a label (Figure 3). The
height of the box is relative to the task length in a logarithmic scale.
Sequence of tasks is represented as a set of boxes connected by arrows, which indicate the order of events. If the
same task is repeated a number of times in succession (as
it often was), the tasks are fused into a single box having
a self-pointing arrow. The label of the arrow indicates the
number of repetitions. This aggregation was introduced to
reduce the height of the flow visualizations.

Completed

Figure 3: Elements for tasks
Interventions are represented as circles with the intervention type and name as a label (Figure 4). The intervention is connected to the task where it occurred by an arrow,
in such way that it breaks the straight downward flow of
events. This is important for two reasons: it makes easy
to spot where the interventions occur, and it also makes a

129

clear visual difference between the representations of two
experimental conditions.

file. The AWK program transforms the log data into another programming language, DOT (part of the Graphviz
project [5]) that is designed to describe node-link diagrams. This definition was then processed with a DOT
compiler that automatically lays out the diagram and outputs an image file. The whole process can be conveniently
run as a Unix pipeline.

Task X

Intervention

Task X
Task Y

 


Task Y

Task Z

Feed
back





 




Task Z





 







 

Figure 4: Interventions and user feedback
The voluntary user feedback given via the smiley faces
interface is represented similarly as interventions, except
that the arrow points outwards from the task. The colorcoding for feedback follows the traffic lights metaphor:
happy/green, neutral/yellow, and sad/red.
The overall color-coding is the same as in the AtGentSchool user interface (Figure 1). There is a dedicated
color for each activity (i.e., task), and interventions connected to the task inherit the color. This improves the
recognition of “what was done where” when looking at the
overview (Figure 6).

4.2




 




Figure 5: Transitions between UI parts
AWK is a general-purpose programming language designed for processing of textual data. It was originally
conceived to add computational features to Unix operating system pipelines, but it is also well suited for mapping
one language into another. An AWK program is basically a
set of pattern-action rules where the actions are performed
when the pattern matches. The expressiveness of AWK
and especially its associate array data type make it ideal
for implementing a flexible mapping.
Although this approach to create visualizations for the
log files is far from having a dedicated interactive tool for
the data exploration, the difference in development effort
and time is huge. The source of AWK program that was
used to create the flow visualizations of AtGentSchool pilot fits on a single sheet of paper, and the runtime for producing single flow visualization was less than 5 seconds on
a modern laptop. This kind of turnaround time allows experimenting with the visualization design space, and looking for the most insight-generating visual language for the
problem.

Visualizations of flows and transitions

Figure 6 shows the flow visualization covering the
whole pilot for one student pair belonging to the experimental group. Time flows in the visualization from top
to bottom and from left to right. The visualization shows
all the seven sessions that this student pair had with the
AtGentSchool system (a session begins from a START element). This representation allows seeing patterns in the
system use when inspected side-by-side with visualizations
of other student pairs.
One of the interesting questions was the overall time
spent in various parts of the system and the number of transitions between them. This information is available in the
flow visualizations, but in quite awkward form. Due to this
we used a standard state transition diagram to represent this
information (Figure 5). The ellipses represent tasks and arrows depict transitions between the tasks. Label on the
arrow is the number of such transitions, and it is doublecoded in the width of the link line

5



 


6 Discussion
Visualizations constructed with the method we describe
above did provide insight into AtGentSchool log data that
was not apparent in the statistical analysis. A side by side
visual inspection of the visualizations revealed the effect
of the teacher on interactions – it was huge and they had
clearly different patterns. Some of the teachers did allow

Method for producing the visualizations

The workflow to produce the visualizations consisted
of a small program written in the AWK programming language [1] as a mapping between the log file and the image

130

the students to advance at their own pace, guided by the
system, as intended, but some of them kept the control for
themselves. These differences in teaching style make it
pointless to compare student pairs except within classes. In
retrospect, it is obvious that in this kind of a controlled experiment there should be only one teacher teaching all the
classes, ensuring that the students get exactly the same instructions. The AtGentSchool system did later go through
this kind of a study in Holland.
The state transition visualizations revealed how the students spent their time and moved between the different
parts of AtGentSchool system. This visualization uses a
node-link diagram with a circular layout in case of a fairly
connected graphs and force-directed otherwise, producing
a random shape. It could be seen from the visualizations
that twenty of the student pairs had a structurally similar,
hexagonal graph, and six student pairs had a heptagonal
one. The difference between hexagonal and heptagonal
graphs is that the student pairs with a heptagonal graph
shape returned later to edit their personal information. For
the remaining student pairs, the shape of the transition
graph was more or less random. This means that about half
of the student pairs used the system approximately in the
same style, but the other half did not have a recognizable
pattern of usage.

[3] M. C. Drott. Using web server logs to improve site
design. In SIGDOC ’98: Proceedings of the 16th
annual international conference on Computer documentation, pages 43–50, New York, NY, USA, 1998.
ACM Press.
[4] J. Ellson, E. R. Gansner, E. Koutsofios, S. C. North,
and G. Woodhull. Graphviz - open source graph
drawing tools. In Graph Drawing, pages 483–484,
2001.
[5] Graphviz. Graphviz – graph visualization software. http://www.graphviz.org/ (accessed
22 Apr 2008), 2008.
[6] M. Gray, A. Badre, and M. Guzdial. Visualizing usability log data. In INFOVIS ’96: Proceedings of the
1996 IEEE Symposium on Information Visualization
(INFOVIS ’96), pages 93–99. IEEE Computer Society, 1996.
[7] D. M. Hilbert and D. F. Redmiles. Extracting usability information from user interface events. ACM
Comput. Surv., 32(4):384–421, 2000.
[8] H. Hochheiser and B. Shneiderman. Using interactive visualizations of WWW log data to characterize
access patterns and inform site design. J. Am. Soc.
Inf. Sci. Technol., 52(4):331–343, 2001.

Conclusions
Our approach to produce static visualizations of log data
using open-source software is a viable alternative for constructing a dedicated tool for a specific log format. We do
believe that interactive exploration of data is the most effective method in generating insight, but the resources required in that approach are of different magnitude and not
always available. In the current enthusiasm for tools that
allow interactive exploration we often bypass the option of
using static visualizations without consideration.

[9] J. Kay, N. Maisonneuve, K. Yacef, and O. Za¨ıane.
Mining patterns of events in students’ teamwork data.
In C. Heiner, R. Baker, and K. Yacef, editors, Proceedings of Educational Data Mining Workshop, held
in conjunction with ITS’06, pages 45–52, 2006.
[10] H. Lam, D. Russell, D. Tang, and T. Munzner. Session Viewer: Visual exploratory analysis of web session logs. IEEE Symposium on Visual Analytics Science and Technology, 2007. VAST 2007., pages 147–
154, 2007.

Acknowledgements
The work described in this paper was sponsored by
the EC under the FP6 framework project AtGentive IST4-027529-STP. We acknowledge the contribution of all
project partners, and especially the ideas developed in cooperation with drs. Inge Molenaar of Ontdeknet.

[11] Ontdeknet. Ontdeknet e-learning platform. http:
//www.ontdeknet.nl/ (accessed 22 Apr 2008),
2008.
[12] Spotfire, Inc. Spotfire. http://www.spotfire.
com/ (accessed 22 Apr 2008), 2008.

References
[1] A. V. Aho, B. W. Kernighan, and P. J. Weinberger.
The AWK programming language. Addison-Wesley
Longman Publishing Co., Inc., Boston, MA, USA,
1987.

[13] M. P. Steves and E. Morse.
Mining usability information from log files: A multipronged approach.
Electronic publication:
http://www.mel.nist.gov/msidstaff/
steves/doc/cscw2000.pdf, 2000.

[2] AtGentive. AtGentive: Attentive agents for collaborative learners. http://www.atgentive.com/
(accessed 22 Apr 2008), 2008.

[14] E. R. Tufte. Envisioning Information. Graphics Press,
Cheshire, CT, 1990.

131

Figure 6: Visualization of one student pair over five-week pilot

132

"#!1
263<=:>4
*)?

"#!1
263<=:>4
-%'

"#!1
234567/89:9;63
J)

!"#$"
%&&'(&)(%%
+!,--#./0/

P#HHQ

!#C

"#!1
234567/89:9;63
K'

"#!1
9<<=;:86://93;6/
%&))

"#!1
9<<=;:86://93;6/
-&'

"#!1
263<=:>4
)?J

"#!1
234567/89:9;63
))

IF#$A@ALLB#I
@A"$B

@A"$BCDE"@BA
OBA@"B$@AL

@A"$BCDE"@BA
@A"$B

IF#$A@ALLB#I
FGHI#A#"@BA

@A"$BCDE"@BA
EBLA@"@MFN!DHHB$"

@A"$BCDE"@BA
FGHI#A#"@BA

"#!1
234567/89:9;63
-'

"#!1
234567/89:9;63
-%&

!"#$"
%&&'(&)(&*
+!,--#./0/

!#C

P#HHQ

"#!1
74:762/892
-?%

"#!1
234567/89:9;63
-*

IF#$A@ALLB#I
@A"$B

IF#$A@ALLB#I
EBLA@"@MFN!DHHB$"

"#!1
R=93S
-T?

$F#C@AL
FGHI#A#"@BA

VFIEBOF
W#E
%&&'(&)(%?
+!,--#./0/

P#HHQ

"#!1
234567/89:9;63
JK

O@ACO#H
@A"$B

P#HHQ

"#!1
R=93S
JJT

-

!#C

"#!1
29263

P#HHQ

!"#$"

#!1UDF!"@BA!
@A"$B
%&&'(&)(%?
+!,--#./0/

#!1UDF!"@BA!
@A"$B

"#!1
234567/89:9;63
-'

?

$F#C@AL
FGHI#A#"@BA

P#HHQ

"#!1
29263
-)&'

C@!EBMF$
FGHI#A#"@BA

O@ACO#H
OBA@"B$@AL

"#!1
234567/89:9;63
%&?%&

#!1UDF!"@BA!
@A"$B

C@!EBMF$
FGHI#A#"@BA

IF#$A@ALLB#I
OBA@"B$@AL

AFD"$#I

!#C

!"#$"

#!1UDF!"@BA!
@A"$B

%

"#!1
263<=:>4

"#!1
234567/89:9;63
J*

"#!1
R=93S
-?

"#!1
234567/89:9;63
-%

!"#$"
%&&'(&)(J&
+!,--#./0/

-

!#C

"#!1
234567/89:9;63
J-

"#!1
29263
?)%

!"#$"
%&&'(&T(&)
+!,--#./0/

"#!1
R=93S
%-%

P#HHQ

$F#C@AL
FGHI#A#"@BA

"#!1
29263

"#!1
234567/89:9;63
--T

!"#$"
%&&'(&T(&)
+!,--#./0/
-

CFE@!@BA
FGHI#A#"@BA

"#!1
XY6</=4:

C@!EBMF$
OBA@"B$@AL

C@!EBMF$
EBLA@"@MFN!DHHB$"

C@!EBMF$
FGHI#A#"@BA

#!1UDF!"@BA!
@A"$B

"#!1
29263
--K-

C@!EBMF$
OBA@"B$@AL

#!1UDF!"@BA!
@A"$B
%&&'(&T(-%
+!,--#./0/

%

AFD"$#I

"#!1
R=93S
J-%

!"#$"

VFIEBOF
W#E

?

-

P#HHQ

