12th International Conference Information Visualisation

A Graph Manipulation Visual Interface for Construction of e-Learning Systems
Mariko Sasakura, Susumu Yamasaki
Department of Computer Science, Okayama University
sasakura@momo.cs.okayama-u.ac.jp
Abstract

can generate adaptive tests according to teachers’ speciﬁcations [3].
In this paper, we propose a visual interface which assist
managing educational courses. Educational courses can be
represented as graphs. A node represents a teaching materials and an edge represents the sequence of the teaching
materials in an educational course. Therefore, essentially,
the visual interface manipulates graphs. We design the visual interface without pull down menus and buttons. All
operations can be speciﬁed by movements of a mouse. We
specify operations by drawing lines in the canvas window.
For example, we can add an edge to a graph by drawing an
arrow. We can delete nodes and edges by drawing crossing lines on them. In our system, we select the appropriate
operation from the position of the drawn line in the graph,
and the positional relationship between the drawn line and
other drawn lines.
There are studies to visualize graphs and manipulate
them directly. Herman at al. make a survey in which they
show many graph visualization and navigation techniques
in information visualization [8]. Freire and Rodriguez
developed a graph-based direct manipulation interface to
authors and maintain complex hypermedia structure with
well-known graph drawing and visualization techiniques
[6]. GUESS [1] is a system for graph exploration. The feature of GUESS is that it provides an interpreted language
with a graphical front. Its graphical user interface has useful functions to explore graphs.
In general graph manipulation, we need so many operations such as making a node or an edge, moving them,
removing them, changing size, changing colors, labelling,
grouping, and so on. Therefore, in direct-manipulation systems, we use pull down menus and/or buttons to select
which operation we will do from now. However, many
pull down menus and buttons confuse users. Then, we
would like to try to design the interaction without pull
down menus and buttons. For the purpose, we provide limited operations in our system, which are needed to manage
educational courses.
In section 2, we explain the basic model of our elearning system. We show the overview of proposed system in section 3. In section 4, we describe the details of

In this paper, we propose a visual interface which assist managing educational courses in e-Learning systems.
Educational courses in e-Learning systems can be represented as graphs. We design a simple interface which specializes in manipulation of educational courses only by
movements of mouse. The feature of the interface is that
we can manipulate graphs without pull down menus and
buttons. We specify operations by drawing lines in the canvas window. For example, we can add an edge to a graph
by drawing an arrow, and delete nodes and edges by drawing crossing lines on them. Since this is an applicationdependent small system, we carefully select the operations
and design the simple interface. We show which operations
can be used in the interface and how we detect them from
mouse movements.
Keywords— Graph manipulation interface, E-Learning
systems

1 Introduction
Nowadays, e-learning systems come into use in schools,
universities, and companies [5]. The advantage of elearning systems is that students can learn at anytime and
anywhere. Some people expect that by making use of
e-learning systems they can educate many students with
fewer teachers. Others try to construct adaptive systems
which change educational courses or teaching materials according to students’ level [2, 11].
Although e-learning systems are very useful, their educational effects may depend on their contents. If a system
has good teaching materials and good educational courses
which have effective sequences of materials, the educational effects should be expexted to become good.
Basically, it depends on teachers whether teaching materials and courses become good or not. Generally speaking, it is so hard to create good teaching materials and
courses. Therefore, many researches have done to assist teachers to make teaching materials or to make them
automatically. In AHA! version2.0, the system provides
the Java-based authoring tool [4]. Teege describes how
to reuse teaching materials in Targeteam [12]. SIETTE

1550-6037/08 $25.00 © 2008 IEEE
DOI 10.1109/IV.2008.82

644

2.2 Applying the model to an e-Learning System

interactions, that is how we manipulate graphs. We give
the conclusion in section 5.

We construct an e-Learning system for students to learn
by themselves. We develop it based on the proposed
model.
The quadruple ℑ = (O, Σ, Sem, R) is interpreted as
the following:

2 A Model of an e-Learning System
2.1 Basic Model
In this section, we formalize a model of e-Learning system using knowledge objects and situations. This model
is reﬁned from Yamasaki et. al. [14], for the purpose of
specifying in a construction of e-Learning systems.
A proposed model is a quadruple ℑ = (O, Σ, Sem, R),
where:

(i) O is a set of teaching materials. In particular, they
are texts on the web, that describe some topics which
students should learn.
(ii) Σ is a set of student’s situations. In other words,
a situation represents what topics a student learned
and what topics he/she does not learn yet.

(i) O is a set of objects.

(iii) Sem which is a semantic function, represents the
relation among an object and situations. In the eLearning system, Sem represents the result of an
examination. The result of an examination decides
the next material.

(ii) Σ is a set of situations.
(iii) Sem: O → (Σ → Σ) is a semantic function.
(iv) R ⊆ O × O∗ is a follower relation, where (A, α) ∈
R means that A is followed by α.

(iv) R is a relation between teaching materials. It speciﬁes the order of materials, such as which material
should be learned at ﬁrst. R represents educational
courses which are designed by teachers.

Note that O∗ = {x1 . . . xn |n ≥ 0, x1 , . . . , xn ∈ O}.
The empty sequence in O∗ is denoted by ε. We use an extended semantic function Sem : O∗ → (Σ → Σ) which is
deﬁned as the following:

3 System Design
3.1 System Overview

Deﬁnition 1 The semantic function Sem is extended to be
a function Sem : O∗ → (Σ → Σ) by:

The overview of a developed system is shown in Figure
1. This system consists of three parts, a database, a web
server which provides contents to students, and a contents
management system for teachers.

(1) Sem[[ε]]σ = σ.
(2) Sem[[γx]]σ = Sem[[x]](Sem[[γ]]σ)
(x ∈ O, γ ∈ O∗ ).

A database keeps teaching materials, course information
and student information.

Now, we deﬁne inference rules which make a sequence
of objects by means of the rule set R. A sequence of objects is included in a relation moveR ⊆ O∗ × Σ × Σ, such
that moveR (γ, σ1 , σ2 ). It is interpreted as “at the situation σ1 , a sequence of objects γ starts, and when the γ is
ﬁnished, the situation is changed to σ2 ”.

A server for students provides materials in sequence. It
implemented as an web server so that students can
access it by any web browser. The details of the
server are described in [10].
A contents management system for teachers allows
them to modify courses and manage students. This
system includes the graph management interface
which is the main topic of this paper.

Deﬁnition 2 Inference rules by means of the rule set R are:
(1)

moveR (ε; σ; σ)

3.2 Database Design

(x → G) ∈ R moveR (G; σ2′ ; σ2 ) Sem[[x]]σ1 = σ2′
(2)
moveR (x; σ1 ; σ2 )
(3)

We deﬁne three tables to represent the model described
in Section 2. These are Standard Courses Table, Special
Courses Table, and Content URL table.

moveR (G1 ; σ1 ; σ2 ) moveR (G2 ; σ2 ; σ3 )
moveR (G1 G2 ; σ1 ; σ3 )

Standard Courses Table shows sequences of teaching
materials when a student passes all of them at one
time. This table realizes R in the model.

645

Contents
Management
System
Teachers

Graph
Manipulate
Interface

Web
Server

Web
Browser

Students

Database

Figure 1: System Overview

Special Courses Table shows sequences of teaching materials when a student fails to pass an teaching material. There are two kinds of sequences in the table.
One speciﬁes sequences for special mistakes which
often students make. Another one speciﬁes default
sequences which performed when mistakes are not
special. This table realizes Sem and Σin the model.

To manipulate graphs, we design functions as the following.
Deleting a node. To delete a node, we draw two crossing
lines on the node. To draw a line, we click a mouse
button on a canvas window and drag it then release
the button. The deleted node is disappeared from the
canvas window. The all edges from or to the nodes
are also disappeared. In the database, the related entities are removed.

Content URL table shows the correspondence between
contents name and URL. The entity of an teaching
material is an web page. This table shows that a contents name of the system indicates which web page.
The table realizes O of the model.

Deleting an edge. To delete an edge, we draw two crossing lines on the edge. The deleted edge is disappeared from the canvas window. In the database, the
related entities are removed.

4 Interaction
In this section, we explain how we can manipulate the
tables of database through graph manipulation interface.
We represent the information in the tables by making
use of Grappa 1 which is a Java package of GraphViz [7] 2 .
We make a visual interface to manipulate graphs on it.

Moving a node. To move a node, we click on the node
and drag it. Moving a node does not change the
topology of graph. Therefore, tables of the database
are not changed.

4.1 Basic Design

Moving an edge. To move an edge, we click on the end of
the edge and drag it. It means changing the connection of nodes, When the mouse is released, the end
of the edge is connected to the nearest node. In the
database, the related entities are changed.

Basic concept of the interface is no menu and no button
interface. We put this system as one of application of [9].
Generally speaking, graphical editors have many functions, so that they have many pull down menus and buttons.
However, they make interface of the editors complex. Often user cannot ﬁnd the function he/she needs among the
pull down menus and buttons. Therefore, we would like
to develop an application which has limited functions and
simple interface. Since such application will provide “context” to users, they will not be “lost” in applications.
1 http://www.research.att.com/

Adding a node. To add a node, a teacher must prepare
new web pages which correspond to the node.
Therefore, we don’t provide the way to add a node
through the visual interface. A teacher will add new
node another way such as a dialog.

john/Grappa/

2 http://www.graphviz.org/

646

Adding an edge. To add an edge, we draw an arrow from
a node to node which we would like to connect. An
edge is created between the nearest node of the both
end of the arrow. The way to write an arrow will
be described in Subsection 4.2. In the database, the
related entities are changed.

Since crossing lines delete themselves, you may make
crossing lines if you would like to delete a line.
4.2.3 An arrow Detection
Usually, an arrow consists of a line and an arrow head.In
this system, we consider a line which is near the end of
another line as an arrow head. In other words, an arrow in
the system consists of two lines. If the two lines are crossing, we consider the lines as crossing lines. The lines as an
arrow do not cross each other.
In this system, an arrow makes a new edge. Therefore,
an arrow must connect two nodes. We consider the former
drawn line as the body of an arrow and the latter drawn line
as the head of an arrow.
The algorithm to detect an arrow is as the following.

To show graphs, when a user click a point of the canvas
window, we show scale-up ﬁgure in another window. The
center of the scale-up ﬁgure is the clicked point. The all
operations which a user can in the canvas window can be
performed in the scale-up windows.

4.2 Detection Algorithms
In this subsection, we explain the algorithms which detect a line, crossing lines and an arrow.
4.2.1 A Line Detection

1. At ﬁrst, perform crossing lines detection. If there is
a crossing line, do deletion of nodes, edges and/or
lines.

Crossing lines and arrows consist of two lines in the system. Therefore, at ﬁrst, we have to detect a line.
A line is drawn by clicking and dragging of a mouse.
However, this operation is also used in moving a node or
edge. The algorithm of a line detection is:

2. If there is no line to cross the drawn line, search a
line L whose end is near the end of drawn line. If
there are plural candidates for L, we consider the
nearest line as L.

1. If the click point is on a node, the operation is interpreted as moving a node.
2. Else if the click point is near the end of an edge, the
operation is interpreted as moving an edge.

3. If there is L,

3. Otherwise, the operation is interpreted as drawing a
line.

(a) If there are nodes at near both of the ends of L,
the drawn line and L are detected as an arrow.

A lonly drawn line itself has no meaning. A line is
drawn on the canvas window and stored in a list of lone
lines until another line will be drawn near the line.

(b) Otherwise, the drawn line and L do not make
an arrow. The new line is detected as a line.
4. Otherwise, detect the new line as a line.

4.2.2 Crossing Lines Detection
Crossing lines is detected when a line is drawn as crossing
on another line. Crossing lines is interpreted as deletion
of all nodes and edges which cross the crossing lines. In
the system, all nodes and edges which cross on the latter
drawn line of crossing are deleted.
The procedure when crossing lines are detected is as the
following.

4.3 Example
Figure 2 shows a part of a course for the programming
language ML [13]. The layout of this graph is designed by
the dot program 3 which is a layout program for directed
graphs. This graph is constructed by Standard Courses Table and Special Courses Table.
The crossing red lines in the ﬁgure are user’s inputs
which specify the deletion of the edge from the node “LocalEnvironment” to the node “LocalEnvironmentTestS”.
The user can indicate the deletion by just drawing lines.
No selection of pull down menus or buttons is needed. The
edge is removed from the graph also from the tables in the
database.

1. If there are nodes whose center point is included the
square made by the latter drawn line of crossing,
delete all of them.
2. If there are edges across the latter drawn line of
crossing, delete all of them.
3. Delete the crossing lines.
3 http://www.graphviz.org/

647

Figure 2: Delete an edge. The edge on which the red crossing lines are written, is deleted from the graph.

5 Conclusion

[3] Conejo, R., Guzman, E., Millan, E., Trella, M.,
Perez-De-La-Cruz, J. L. and Rios, A. SIETTE: a webbased tool for adaptive testing, International Journal
of Artiﬁcial Intelligence in Education, 14, pp.1–33,
2004.

In this paper, we propose a direct manipulation interaction without pull down menus or buttons for manipulating
graphs. We implement it for managing educational courses
of e-learning systems.
We can design our system without pull down menus and
buttons since it is a application-dependent system. It is difﬁcult for general graph manipulation systems to design interaction without pull down menus and buttons. However,
for application-dependent small systems, we can assign
different operations to the same mouse movement. This
system is constructed as one of the applications.
In future works, we would like to design a visual language speciﬁed by mouse movement for domain-depended
applications.

[4] De Bra, P., Aerts, A., Smits, D. and Stash, N., AHA!
version 2.0 more adaptation ﬂexibility for authors,
Proceedings of the AACE ELearn’ 2002 conference,
pp.240–246, 2002.
[5] Donovann, M. S., Bransford, J. D. and Pellegrino, J.
W. ed. How People Learn -Brain, Mind, Experience,
and School, National Academy Press, 2000.
[6] Freire, M. and Rodriguez, P. A graph-based interface to complex hypermedia structure visualization,
AVI’04, pp.161–164, 2004.

References
[1] Adar, e. GUESS: a language and interface for graph
exploration, Proceedings of the SIGCHI conference
on Human Factors in computing systems, pp.791–
800, 2006.

[7] Gansner, E. R. and North, S. C., ”An open graph visualization system and its applications to software engineering”, Soft. Prac. Exper., Vol.30, pp.1203–1233,
2000.

[2] Brusilovsky, P., Schwarz, E. and Weber, G. ELMART: an intelligent tutoring system on World Wide
Web Intelligent Tutoring Systems, Lecture Notes in
Computer Science, Vol.1086 (Proceedings of Third
International Conference on Intelligent Tutoring Systems, ITS-96), pp.261–269, 1996.

[8] Herman, I., Melanc¸on, G. and Marshall, M. S Graph
Visualization and Navigation in Information Visualization: A Survey, EEE Transactions on Visualization and Computer Graphics, Vol.6, No.1, pp.24–43,
2000.

648

[9] Sasakura,M., Iwata,K. and Yamasaki,S. Picture
Script: Visualizing Graphical User Interface Commands for Recycling, IPSI Trans. on Advanced Research, Vol.2, No.1, pp.16–21, 2006.

International Conference on Adaptive Hypermedia
and Adaptive Web-Based Systems (AH’2004), 10pp.
2004.
[12] Teege, G., Reuse of teaching materials in Targeteam, International Workshop on Interactive Computer aided Learning ICL2002, 2002.

[10] Sasakura, M. and Yamasaki, S. A framework for
adaptive e-Learning systems in higher education
with information visualization , Proceedings of 11th
International Conference on Information Visualization(IV07), pp.819–824, 2007.

[13] Ullman, J. D. “Element of ML programming”, Prentice Hall International, Inc, 1994.

[11] Sosnovsky, S., Brusilovsky, P., and Yudelson, M.,
Supporting adaptive hypermedia authors with automated content indexing, Proceedings of Second
International Workshop on Authoring of Adaptive
and Adaptable Educational Hypermedia at the Third

[14] Yamasaki, S. and Sasakura, M., A calculus effectively performing event formation with visualization,
High-Performance Computing ISHPC 2005 Revised
Selected Papers (Lecture Notes in Computer Science
4759), pp.287–294, 2008.

649

