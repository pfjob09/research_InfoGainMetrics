12th International Conference Information Visualisation

Layout Methods for Intuitive Partitioning of Visualization Space
Tijana Janjusevic, Ebroul Izquierdo
Queen Mary, University of London
Mile End Rd
London, E1 4NS, UK
{tijana.janjusevic, ebroul.izquierdo}@elec.qmul.ac.uk

In this paper we address two relevant tasks in image
visualisation research: layout methods for presenting
content and relations within image databases; and
optimal solutions for efficient use of the entire display
space. We introduce a novel approach to enable users
searching on large image archives to distinguish
heterogeneous sets of images. Thus, helping them to
navigate or browse image databases according to
relevant query directions. Two methods for mapping
similarity relations between images and cognitive
partitioning of the display space are presented.

overview of the database enabling them to get a good
idea on all content related to a given query or task
In this paper solutions to related visualization tasks
are proposed. Two layout solutions for browsing image
databases are presented. The proposed techniques
address two issues: computational complexity of image
layout algorithms and optimized presentation within
already limited display spaces.
The rest of the paper is organised as follows. Section
2 gives a more detailed problem statement and related
work overview; Section 3 describes proposed layout
methods and implementation results. Future work and
conclusions are presented in Sections 4 and 5
respectively.

1. Introduction

2. Problem statement

Research in data visualisation has made significant
inroads over the last decade providing significant tools to
technology developers. As a consequence of sustained
research in the field several visualisation solutions for
generic data can be found in the literature. Some of them
attempt to visualise multidimensional abstract data in
general, without defining the specific use case. Such
solutions are usually not entirely transparent and their
applicability in particular cases depends on the
requirements of the specific system. In other cases there
are exact problem definitions and defined data types to
be visualised as the one considered in this paper: digital
image databases.
In the case of image database visualisation, the first
obvious problem to overcome is the large number of
images and the large portion of space the single image
occupies in a constrained visualization space. This
imposes severe restrictions to visualisation technology
related to the key question of how to provide enough and
meaningful information to the user. Here, meaningful
refers to the provision of visualization means to easily
understand relations and content stored in image
databases. In order to efficiently explore large image
collections, the user should be able to have a good

Conventional computer screens have inherent
visualization constraints. They cannot be used to display
all the images from a database with an appropriate size.
In other cases, using some mapping algorithms for
embedding, the problem of unused display space arises.
Presenting several images in the limited field of view,
while showing the structure of the data is a challenging
problem [1]. Even trying to display 150 images in one
view induces inevitable image overlapping [2]. In other
cases improper usage of available space implies the
existence of empty areas that will result in inefficient and
confusing visualisation.
In the case of browsing systems, different methods
are used to present a first view from which the user
would start his query. The grid based traditional
approach is the simplest way for browsing the image
database. This type of layout is used in retrieval systems
usually for displaying the results of the specified query,
where the first image in top left corner is usually the
most similar to the query image. But this approach is not
very efficient in case of browsing systems, since it does
not provide any information about image relations.
Consequently, research is shifted towards similarity
based image browsing. This approach considers the fact
that for the efficient browsing we have to present the

Abstract

1550-6037/08 $25.00 © 2008 IEEE
DOI 10.1109/IV.2008.55

88

relations between images in the database [2]. Relations
are most often presented as similarities between images
and calculated using specific distance metric between
features describing each image [1][3][4]. As stated in [5],
there are two requirements for similarity measures: one
is the choice of an adequate representation for images
that can be used as information for image comparison.
The second is the choice of the metric for evaluating the
image relations.

3. Proposed layouts
We define the image space as a structure consisting
of a collection of images and relations between them.
Using the previous definition we can describe
visualisation as a method for mapping the image space of
the database into the presentation space of the display
device. This is performed by applying spatial
transformation to the image space defined for the
specific case, which will preserve important information
and relations from the database. Layout is the result of a
process that specifies the position for every member of
the set we want to visualise or in other words, the
process of mapping the image space into the
visualisation space. In our case the visualisation space is
defined as a two dimensional Euclidian space and the
mapping is a discrete process where each image is
represented separately. In case we aim at preserving
image positions using projection from high dimensional
space, we will have visualisation that suffers from huge
computational complexity (introduced by dimensionality
reduction algorithms) and long processing time. In this
paper we address that problem by implementing random
layout method. We also tackle the problem of optimal
usage of limited display space by performing the
partition of the visualisation space.The proposed
visualisation solutions aims at visualising the image
space by considering only images and distances between
them as input information. The process of obtaining the
distances can be considered irrelevant for this
visualisation. The structure diagram of the proposed
visualisation system is presented in Figure 1.

2.1. Related work
Representing image relations can be performed
using various techniques [6]. Dimensionality reduction
algorithms are used for mapping the high dimensional
points in the corresponding low dimensional
representation. Principal Component Analysis (PCA) is a
dimensionality reduction method which is used in data
visualisation field for projecting high dimensional data
into a lower dimension space by preserving the most
important part of data information. Multidimensional
Scaling (MDS) embeds the configuration of points from
high to lower dimensional space by optimising distance
relations between objects [7]. Kohonen’s SelfOrganising Maps (SOMs) [8] are also used for clustering
and visualisation of data in a number of visualisation
solutions. In [9] the proposed solution uses MDS
calculations for finding the configuration of points in the
low level space. Based on the obtained positions they
map the images to its closest grid cell. The problem of
an unused screen space is addressed by moving the
image positions among the adjacent cells such that no
empty cells remain. Since the MDS is applied to all
images the algorithm requires a long processing time. In
[2] ISOSNE method is employed for image embedding.
ISOSNE is the combination of ISOMAP, the complete
isometric feature mapping algorithm proposed in [10]
and Stochastic Neighbour Embedding (SNE). ISOMAP
first recalculates the distances in high dimensional space
as the length of the shortest path between points and then
employs MDS on the new distance set. SNE algorithm
then determines a low dimensional embedding that
preserves neighbor identities. In Bibliomapper [11], the
screen space is divided by presenting the image clusters
in separate rectangular areas. This system does not
display any additional information about inter cluster
relations since the cluster size and position is determined
automatically by the system. In Galaxies visualisation
[12], the dimensionality reduction method is used to
present the clusters of text documents as “starts in the
night sky”. This solution tends to display relations and
structure of the database by visualising the level of
similarity as spatial distance values. A Treemap [13] is
the method for representing database by partitioning the
screen space according to the data tree structure. The aim
is to present the entire data set using all available space
employing the tree organisation of the database content.

3.1 Optimal position layout
With the goal of introducing an intuitive
visualisation
space which
would
be easily
understandable to the user, the first solution was to apply
a cognitive and perceptual group centres placement for
the representatives of different image groups. The idea
was to distribute the image groups across the screen
using all the available space.
We implemented a new form of visual partitioning
of the display area for emphasizing distinctive groups of
images. Our realisation consists of finding optimal
placements for the centres of image groups. Instead of
dividing the display area, in Treemaps [14] for example,
we first position the centres of all groups in this view.
After placing the centres the next step would be to
populate the local area around these positions with
images according to their classification. In this way the
image space is visualised as a space of image groups
which we refer to as visual clusters. The area around the
visual cluster centres is populated using predefined,
randomly generated points (process referred to as
random layout method in this paper).
The problem of centre placement is defined as
finding the configuration of k points in the limited 2D
visualisation space that maximises the inter distances
between these points. The space in which we intend to

89

Image
Database

Input

Off line
processing

Distances

Image classification
algorithm

Random positions
generation

Centre
placement
algorithm

Layout

Figure 1: Structure diagram of the system
place the images for the purpose of this
visualisation is the discrete space. For the specified
space, the most accurate algorithm for calculating
the optimal positions would be to find the
combination which maximises the minimum
distance between the cluster centres taking into
account all possible point configurations in this
space. The number of such combinations is given
by
(m ⋅ n)! ,
 m⋅n 
 =


k



where k is the number of clusters. Elements of the
distance vector T are calculated as Euclidean
distances between elements of matrix Q (selected
positions of cluster centres).
Elements of vector t are obtained as:
( x 0 − x1 ) 2 + ( y 0 − y1 ) 2

t1 =

(x0 − x2 )2 + ( y0 − y 2 )2

,

...,
t p −1 = ( xk − 2 − x k −1 ) 2 + ( y k − 2 − y k −1 ) 2 .
The next step is to find the minimal value of
the elements of the vector T and store it as a
minimal value we will use as an output of the
algorithm. The distance values of matrix Q are
stored as matrix V in the first iteration. New
iteration step starts with generation of new random
matrix Q, with new position values and the
recalculation of vector T. The elements of T are
then used as input parameters for finding the
minimal value. After each iteration step, new
minimum value is compared with the stored
minimal value until the end of process (20000
iterations); where in case of bigger value the stored
minimum is updated. In case of updating the
minimal value the matrix V is also updated with the
correspondent distance values.

k!(m ⋅ n − k )!

where m ⋅ n is the dimension of the 2D space, or the
total number of positions and k is the number of
positions we want to find (or number of cluster
centres).
For example, for a screen dimension of
950×800 and 7 clusters, that would mean
approximately 3e+37 calculations and comparisons
between every pair of configurations. This would
result in a robust algorithm whose execution would
however take a large amount of time. For this
reason we decided to take a suboptimal but efficient
approach which does not consider every possible
combination of k positions in the 2D space. First we
generate
the
k×2
dimensional
matrix
Q= ( q i ) containing the cluster center coordinates.
The generic element of matrix Q
i = 0, k − 1
qi = ( x i , y i )
is obtained by random generation of integer
couples1. For this matrix we generate the distance
vector t whose dimension is given by:
k
k!
,
p = =
 2
 

t0 =

3.2 Centre Positioning Layout
Preserving the random layout method we
wanted to test the idea of visualising the image
space or subspace by emphasizing the similarity
between the image groups. The distribution of these
image groups is achieved by mapping the distances
between visual cluster centres into spatial distance
in the screen using a dimensionality reduction
technique. The positions of all other images are

2!(k − 2)!

1 We are using Java Random class for generating random numbers. An instance
of this class is used to generate a stream of pseudorandom numbers. The class
uses a 48-bit seed, which is modified using a linear congruent formula.

90

mapped using initial random layout, as in the
previous case.
The random position layout is kept for the
purpose of reducing the computational complexity
that would be required for the dimensionality
reduction in case we try to determine position for
all images in this way. We consider the distance
obtaining method as irrelevant for this visualisation
which implies no constraints for the space they are
defined. For this reason our choice for
dimensionality reduction method is MDS algorithm
for mapping the centres from high dimensional into
two-dimensional space.
MDS assumes that dissimilarities or distances
between images are proportional to Euclidean
distances: δ ij = cd ij where δ is matrix of

visual cluster centers which reflects the similarities
(or dissimilarities) between them.
Shepard [16] and Kruskal [17] have developed
a non metric MDS method in order to overcome the
problem posed by the metric MDS algorithm: the
definition of functional connection between the
dissimilarities and distances and the Euclidean
geometry used for obtaining the adequate
configuration. In non-metric MDS the important
input information are not numerical values of the
dissimilarities δ (distances) but their rank order.
Optimal solution in this case is the configuration of
points in the projection space that preserves the
ranking order of the dissimilarities.
If we define the ranking order of dissimilarities
as
δ i1 j1 ≤ ... ≤ δ im jm

dissimilarities between images and d is the matrix
of distances in projected Euclidean space. Since it is
usually impossible to find the exact configuration in
which δ ij = cdij we need some criterion by which

And if p ij are any m numbers that satisfy the
monotonic constraint given by
pi1 j1 ≤ ... ≤ pim jm
In general, the configuration of distances in
projection space will not satisfy this constraint and
the numbers p ij will not be distances. For

we will be able to estimate if one solution is better
than another [15]. This is done by defining the sumof-square error function which involves distances
between points in both high dimensional and low
dimensional space. The optimal point configuration
y is defined as one that minimises specified
criterion function. Since the metric MDS does not
preserve the ranking order of input dissimilarities,
for this visualisation we use a non metric form of
MDS which tries to find a nonlinear, but monotonic
transformation of input distances. Monotonocity
constraint preserves the ranking order of distances
in sense that that larger distances in the embedded
space will correspond to larger dissimilarities in the
high dimensional space. This way we aim at
preserving the ranking order of the positions of

evaluating how much the obtained distances d
satisfy the monotonic constraint we use the cost
function often referred to as STRESS1 given by

∑

(p
∑

i< j

ij

i< j

− d ij
d ij

)

2

2

A screen shot of the layout obtained this way is
shown in Figure 3.

Figure 2: Optimal position layout

91

local area with images belonging to this clusters. Since
there is definite number of available positions we
encountered the problem of some images not being
displayed. In the screen shots below such case is
presented. In Figure 4 two visualisations with single
visual cluster are presented. Since both clusters occupy
close positions in same area we have multiple candidates
for same position. Figure 5 shows both clusters
visualized in the same view.
Also, user studies will be performed in order to test
this solution for the level of assistance it provides to the
user that wishes to perform efficient browsing through
the image database content.

3.3 Testbed
The database used for testing was generated from
the Corel collection and it consists of seven concepts.
These are: buildings, clouds, cars, elephants, grass, lions
and tigers. Since we require distances to test our solution
we need to specify the metric we are going to use to
determine similarities or dissimilarities between
members of the database. Considering the large number
of similarity metrics used in retrieval systems, the
MPEG-7 colour layout descriptor [18] is chosen as
similarity metric for this visualisation testbed. Colour
layout descriptor provides good results in image retrieval
since this descriptor is designed to efficiently represent
spatial colour distribution of the image. Descriptors
employed here are 58 dimension feature vectors.
Distance matrix used for determining the inter image
relations is defined by calculating Euclidean distances
between the image feature vectors. The first proposed
layout method, referred to as optimal position layout,
places images selected as centers of visual clusters as
distant as possible from each other applying the
algorithm described in section 3.1. The rest of the images
from the database are placed using randomly generated
points in the 2D space. This visualization is presented in
Figure 2. Figure 3 displays the second, centre positioning
layout method described in section 3.2.

5. Conclusion
Different visualisation solutions try to solve the
problem of effectively displaying the images stored in a
database. Image space mapping and presentation as well
as limitations imposed by the display space, still remain
as unsolved visualisation issues. In this paper, we
proposed two related layout methods which tend to
address image space embedding and optimal use of
display
space.
Computational
complexity
of
dimensionality reduction methods for image placement is
addressed by predefining image positions as randomly
generated points in the 2D space. The second issue of
unpopulated presentation areas is dealt with by forcing
apart the representatives of image groups across the
entire display space.

4. Future work
After achieving the appropriate mapping of the
cluster centers, future work is focused on solving the
problem of having multiple image candidates for one
predefined position on the screen. In case that two or
more visual cluster centers are placed within close range
on the screen it will automatically lead to populating the

6. Acknowledgements
This research has been partially supported by EU project
FP6-045189 RUSHES.

Figure 3: Centre positioning layout using non-metric MDS

92

Figure 4: Screen shots of individual cluster visualisation

Figure 5: Visualisation of two closely positioned clusters
[10] J.B. Tenenbaum, V. de Silva, and J.C. Langford “A
Global
Geometric
Framework
for
Nonlinear
Dimensionality Reduction”, Science, Vol. 290, 22 Dec.
2000.
[11] M. Song, “Bibliomapper: A cluster-based information
visualization technique”, Proceedings of IEEE
Information Visualization 1998, pp. 130-136.
[12] J.A. Wise, J.J. Thomas, K. Pennock, D. Landtrip, M.
Potier, A. Schur, and V. Crow, “Visualizing the NonVisual: Spatial analysis and interaction with information
from text documents”, IEEE Information visualization
’95, IEEE Computer Soc. Press, 30-31 Oct 1995, pp 5158.
[13] B. Shneiderman, “Tree visualization with Tree-Maps: 2d Space-Filling approach”, ACM Trans. Comp. Graph.
11, 1, 1992, pp. 92-97
[14] B. Bederson., B. Shneiderman, and M. Wattenberg,
“Ordered and quantum treemaps: Making effective use
of 2D space to display hierarchies”, ACM Transactions
on Graphics, 21, 4, 2002, pp. 833-854.
[15] R.O. Duda, P.E. Hart, and D.G. Stork, Pattern
Classification, New York: Wiley-Intersciance, 2001.
[16] R.N. Shepard, “The analysis of proximities:
Multidimensional scaling with an unknown distance
function”, Part I. Psychometrika, 27, 1962, pp. 125-140.
[17] J.B. Kruskal, and M. Wish, Multidimensional Scaling,
Sage Publications. Beverly Hills. CA, 1977.
[18] B.S. Manjunath, P. Salembier, and T. Sikora, eds.,
Introduction to MPEG-7: Multimedia Content
Description Language, John Wiley & Sons, 2002.

References
[1]

[2]

[3]

[4]

[5]
[6]

[7]
[8]
[9]

C. Chen, G. Gagaudakis, and P. Rosin, “Similarity based
image browsing”, Proceedings of the 16th IFIP World
Computer Congress, International Conference on
Intelligent Information Processing, Beijing, China, 2000.
G. Nguyen, and M. Worring. “Similarity based
visualization of image collections”, Int'l Worksh. On
Audio-Visual Content and Information Visualization in
Digital Libraries, 2005.
D. Heesch, and S. Ruger, “Three interfaces for contentbased access to image collections”, Proc Int'l Conf
Image and Video Retrieval, LNCS 3115, Springer 2004,
pp. 491-499.
Y. Rubner, C. Thomasi, and L. Guibas, “A Metric for
Distributions with Applications to Image Databases”,
Proc. IEEE Int’l Conf. Computer Vision (ICCV ’98),
Jan. 1998, pp. 59-66.
S. Santini, and R. Jain, “Similarity measures”, IEEE
Trans. Pattern Analysis and Machine Intelligence,
21(9):871–883, 1999.
S.D. Ruszala, and G. Schaefer, “Visualisation models for
image databases: A comparison of six approaches”, Irish
Machine Vision and Image Processing Conference,
2004, pp 186–191.
T. Cox, and M. Cox, Multidimensional Scaling,
Chapman and Hall, London 1994.
T. Kohonen, Self-Organizing Maps, Berlin: SpringerVerlag, 1995.
G. Schaefer and S. Ruszala, “Image database Navigation
on a hierarchical MDS grid”, Lecture notes in computer
science, Springer, 2006.

93

