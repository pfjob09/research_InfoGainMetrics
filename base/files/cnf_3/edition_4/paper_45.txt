12th International Conference Information Visualisation

A Web Usage Mining Approach Based on LCS Algorithm in Online
Predicting Recommendation Systems
Mehrdad Jalali1, Norwati Mustapha, Md. Nasir B Sulaiman, Ali Mamat
Department of Computer science, Faculty of Computer Science and Information Technology
Putra University of Malaysia (UPM), Selangor, Malaysia
E-Mail: Mehrjalali@gmail.com,{norwati,ali,nasir}@fsktm.ump.edu.my
intelligent online applications, refining web site maps,
web based personalization system and improving
searching accuracy when seeking information.
Nevertheless, an online navigation behavior grows each
passing day, and thus extracting information
intelligently from it is a difficult issue. Web Usage
Mining (WUM) is the process of extracting knowledge
from Web user’s access data by exploiting Data Mining
technologies [4].It can be used for different purposes
such as personalization, system improvement and site
modification. Typically, the WUM prediction process
is structured according to two components performed
online and off-line with respect to the Web server
activity [1], [2], [14] and [5]. The off-line component is
aimed at building the knowledge base by analyzing
historical data, such as server access log files, that is
then used in the online component.
In this paper we advance architecture for improving
accuracy of classification in online phase of the
architecture. In this architecture we propose novel
approach for classifying user navigation patterns by
using Longest Common Subsequence (LCS) algorithm.
The LCS algorithm exploits for improving accuracy of
classification in the architecture.
The rest of this paper is organized as follows: In
section 2, we review recent research advances in web
usage mining. Section 3 describes the main phases of
the architecture and section 4 focuses on the LCS
algorithm for using in the classification part of the
architecture. Results of an experimental evaluation are
reported in section 5. Finally, section 6 summarizes
the paper and introduces future work.

Abstract
The Internet is one of the fastest growing areas of
intelligence gathering. During their navigation web
users leave many records of their activity. This huge
amount of data can be a useful source of knowledge.
Advanced mining processes are needed for this
knowledge to be extracted, understood and used. Web
Usage Mining (WUM) systems are specifically
designed to carry out this task by analyzing the data
representing usage data about a particular Web Site.
WUM can model user behavior and, therefore, to
forecast their future movements. Online prediction is
one web usage mining application. However, the
accuracy of the prediction and classification in the
current architecture of predicting users’ future
requests systems can not still satisfy users especially in
Huge Web sites. To provide online prediction
efficiently, we advance an architecture for online
predicting in Web Usage Mining system and propose a
novel approach based on LCS algorithm for classifying
user navigation patterns for predicting users’ future
requests. The Excremental results show that the
approach can improve accuracy of classification in the
architecture.

1. Introduction
With the explosive growth of knowledge available on
the World Wide Web, which lacks an integrated
structure or schema, it becomes much more difficult for
users to access relevant information efficiently.
Meanwhile, the substantial increase in the number of
websites presents a challenging task for webmasters to
organize the contents of the websites to cater to the
needs of users. Modeling and analyzing web navigation
behavior is helpful in understanding what information
of online users demand. Following that, the analyzed
results can be seen as knowledge to be used in

2. Background and related works
Recently, several WUM systems have been proposed
to predicting user’s preference and their navigation
behavior. In the following we review some of the most
significant WUM systems and architecture that can be
compared with our system.
Analog [5] is one of the first WUM systems. It is
structured according to an off-line and an online

1

PhD Student in UPM, Malaysia and Academic Member in
IAUM, Mashhad, Iran, jalali@mshdiau.ac.ir

1550-6037/08 $25.00 © 2008 Crown Copyright
DOI 10.1109/IV.2008.40

302

component. The off-line component builds session
clusters by analyzing past users activity recorded in
server log files. Then the online component builds
active user sessions which are then classified according
to the generated model. The classification allows to
identify pages related to the ones in the active session
and to return the requested page with a list of
suggestions. The geometrical approach used for
clustering is affected by several limitations, related to
scalability and to the effectiveness of the results found.
Nevertheless, the architectural solution introduced was
maintained in several other more recent projects.
In [4, 11] Mobasher et al., present WebPersonalizer
a system which provides dynamic recommendations, as
a list of hypertext links, to users. The analysis is based
on anonymous usage data combined with the structure
formed by the hyperlinks of the site. Data mining
techniques (i.e. clustering, association rules and
sequential pattern discovery) are used in the
preprocessing phase in order to obtain aggregate usage
profiles. In this phase Web server logs are converted in
clusters made up of sequences of visited pages, and
cluster made up of set of pages with common usage
characteristics. The online phase considers the active
user session in order to find matches among the user’s
activities and the discovered usage profiles. Matching
entries are then used to compute a set of
recommendations which will be inserted into the last
requested page as a list of hypertext links.
WebPersonalizer is a good example of two-tier
architecture for Personalization systems.
Liu and Keselj [3] proposed the automatic
classification of web user navigation patterns and
proposed a novel approach to classifying user
navigation patterns and predicting users’ future
requests. The approach is based on the combined
mining of Web server logs and the contents of the
retrieved web pages. They used character N-grams to
represent the contents of web pages, and combined
them with user navigation patterns by building user
navigation profiles composed of a collection of Ngrams. In this system they can incorporate their current
off-line mining system into an on-line web
recommendation system to observe and calculate the
degree of real users’ satisfaction on the generated
recommendations, which are derived from the
predicted requests, by their system.
Baraglia and Palmerini proposed a WUM system
called SUGGEST, that provide useful information to
make easier the web user navigation and to optimize
the web server performance [1, 12]. SUGGEST adopts
a two levels architecture composed by an offline
creation of historical knowledge and an online engine

that understands user’s behavior. As the requests arrive
at this system module it incrementally updates a graph
representation of the Web site based on the active user
sessions and classifies the active session using a graph
partitioning algorithm. Potential limitation of this
architecture might be: a) the memory required to store
Web server pages is quadratic in the number of pages.
This might be a severe limitation in large sites made up
of millions of pages; b) it does not permit us to manage
Web sites made up of pages dynamically generated.
All of these works attempt to find architecture and
algorithm to improve accuracy of personalized
recommendation, but the accuracy still does not meet
satisfaction. In our work we advance architecture and
propose novel classification approach in the
architecture
for
improving
accuracy
of
recommendation.

3. Architecture overview
In this system we advance an architecture for
predicting users’ next request by applying novel
approach in classification module of this architecture.
According to different functions, the architecture can
be partitioned into two main phases; offline phases and
online phases. But these two parts need strongly work
together. The architecture is shown in Fig. 1. In the
offline phase there are two main modules, data
pretreatment and navigational pattern mining and the
main module of the online phase is prediction engine.

Fig. 1 the Architecture figure of the system

3.1. Offline phase of the architecture
This phase consists of two major modules: Data
pretreatment and Navigation Patterns Mining. In this
phase we start with the primary Web-Log
Preprocessing (Data pretreatment) to extract user
navigation session from dataset and after that we apply

303

some algorithm to mining navigational patterns. The
offline phase is shown in Fig. 2.

The weight W for edge E can be computed as:

Wij =

N ij

(1)

max{N i , N j }

Where Nij is the number of sessions containing both
pages i and j, Ni and Nj are respectively the number of
sessions containing only page i or page j. Dividing by
the maximum between single occurrences of the two
pages has the effect of reducing the relative importance
of links involving index pages. Such pages are those
that, generally, do not contain useful content and are
used only as a starting point for a browsing session.
The data structure can be used to store the weights is an
adjacency matrix M where each entry Mij contains the
value Wij computed according to (1) .To limit the
number of edge in such graph ,element of Mi j whose
value is less than a threshold are to little correlated and
thus discarded.

Fig. 2 the Offline phase of the Architecture

3.1.1. Data Pretreatment .Data pretreatment in a web
usage mining model (Web-Log preprocessing) aims to
reformat the original web logs to identify all web
access sessions. The Web server usually registers all
users’ access activities of the website as Web server
logs. Due to different server setting parameters, there
are many types of web logs, but typically the log files
share the same basic information, such as: client IP
address, request time, requested URL, HTTP status
code, referrer, etc.
Generally, several pretreatment tasks need to be done
before performing web mining algorithms on the Web
server logs. For our work, these include data cleaning,
user differentiation and session identification. These
preprocessing tasks are the same for any web usage
mining problem.

3.1.2.2. Clustering Algorithm based on graph
partitioning. We apply graph partitioning algorithm to
finds groups of strongly correlated pages by
partitioning the graph according to its connected
components. Starting from a Vertex a Depth First
Search (DFS) on the graph induced by M is applied to
search for the connected component reachable from
this vertex. Once the component has been found, the
algorithm checks if there are any nodes not considered
in the visit. If so, it means that a previously connected
component has been split, and therefore, it needs to be
identified. To do this the DFS is again applied by
starting from one of the nodes not visited. In the worst
case, when all the URLs are in the same cluster, the
cost of this algorithm will be linear in the number of
edges of the complete graph G. Before the clusters put
into the navigational pattern profile, the clusters are
ranked based on values store in the matrix M .It will be
used for classification based on LCS algorithm.

3.1.2. Navigation Pattern Mining. After the data
pretreatment step, we perform navigation pattern
mining on the derived user access sessions. As an
important operation of navigation pattern mining,
clustering aims to group sessions into clusters based on
their common properties. Since access sessions are the
images of browsing activities of users, the
representative user navigation patterns can be obtained
by clustering them. These patterns will be further used
to facilitate the user profiling process of the system.
This part of the system includes two main modules.

3.2. Online phase of the architecture
During the online phase, when a new request arrives
at the server, the URL requested and the session to
which the user belongs are identified, the underlying
knowledge base is updated, and a list of suggestion is
appended to the requested page. The online phase is
shown in Fig. 3.

3.1.2.1. Navigation Pattern Modeling .To model
navigational patterns we use proposed algorithm in
[12].they proposed an algorithm for modeling the pages
accesses information as an undirected graph G= (V, E).
The set V of vertices contains the identifiers of the
different pages hosted on the Web server.

304

r

r

Theorem 1 Let α =〈α1 , α2 ,…, αn 〉 and β =〈β1, β2,…,
βm 〉 be sequences, and let

r

of

α

r

r

γ =〈ϒ1 , ϒ2,…,ϒn 〉 be any LCS

and β .

r

1. If αn = βm, then ϒl =αn = βm and
2. If αn ≠ βm, then ϒl ≠ αn implies
3. If αn ≠ βm, then ϒl ≠ βm implies

r
Where α n −1 =〈α1,α2,…, αn

r

and

Fig. 3 the Online phase of the architecture

m−1

r

-1

〉 , β m−1 =〈β1, β2,…, βm-1 〉

γ l −1 =〈ϒ1 , ϒ2,…,ϒn-1 〉.

The proof of this theorem can be found in [6].
Efficient recursive algorithms to compute the LCS exist
using this property of the LCS [7]. We shall not go into
the details of the algorithms since a lot of literature
already exists on the topic [7], [8] and [9]. We have
implemented the О(mn) algorithm presented by
Wagner and Fischer [6, 10] with an added module that
outputs the subsequence of indices of the two
sequences that match in forming the longest common
r
subsequence. For example, if α =〈A,B,C,B,D,A,B〉
r
r
and β =〈B,D,C,A,B,A〉 ,Their LCS is γ =〈B,C,B,A〉.
In the next we introduce new classification algorithm
by using the LCS.

3.2.1. Prediction Engine. The main objective of
prediction engine in this part of architecture is to
classify user navigation patterns and predicts users’
future requests. For this purpose we propose a novel
approach to classify current user activity.
We use a fixed-size sliding window over current
active session to capture the current user’s activities.
We call this sliding window, the user’s active session
window.
In order to classify user session windows, we look
for the cluster that includes the larger number of pages
in that session. For this purpose we propose a novel
approach by using Longest Common subsequences
algorithm for classify current user activates.

4.1. Classification Algorithm by Longest
Common Subsequence

4. Longest Common Subsequence algorithm
r

γ l −1 is a LCS of αrn−1 and βr .
r
r
γ is a LCS of αrn−1 and β .
r
r
r
γ is a LCS of α and βm−1 .

According to the clustering algorithm discussed in
r
offline phase there is a set of clusters np =

r

The problem of comparing two sequences α and β
to determine their similarity is one of the fundamental
problems in pattern matching. One of the basic forms
of the problem is to determine the longest common
r
r
subsequence (LCS) of α and β . The LCS string
comparison metric measures the subsequence of
maximal length common to both sequences [13].
r
Formally, given a sequence α =〈α1 , α2 ,…, αn 〉 ,
r
another sequence γ =〈ϒ1 , ϒ2,…,ϒn 〉 is a subsequence of

r

〈 npr1 , npr 2 ,…, npr n 〉 which npi = 〈P1, P2,…, Pk〉 is a set of k

web pages as a user navigational patterns for each 1≤ i
r
≤ n. Sequence ω =〈P1, P2,…,Pm〉 is a current active
session as we consider m is size of active session
window.
Before classifying an active session to construct the
prediction list, we have to sort the pages in active
session windows based on values stored in the cooccurrence matrix M that we introduced in modeling
phase. We know each cluster is ranked based on this
value.
After this step for building the prediction list this
system must find the cluster based on LCS algorithm.
After applying this algorithm, the system finds a cluster
r
with highest degree of LCS in respect to sequence ω .
Sometimes the prediction engine finds more than
one cluster based on LCS algorithm, in this case
prediction engine selects a cluster that, if the difference
between positions of last elements of longest common
subsequence founded in the cluster and the position of

r

α if there exists a strictly increasing sequence 〈j1, j2,…,
r
jn〉 of indices of α such that for all i=1,2,..,l, we have
r
r
αji =ϒi . Given two sequence α and β , we say that
r
r
r
r
γ is common subsequence of α and β if γ is a
r
r
subsequence of both α and β .We are interested in
finding the maximum-length or longest common
subsequence (LCS) given two paths or sequence of
r
r
page-visits α =〈α1 , α2 ,…, αn 〉 , β =〈β1, β2,…, βm 〉,
The LCS has a well-studied optimal sub-structure
property as given by the following:

305

first element of this sequence is minimized, the system
must choices this cluster.
In this module if the first page in the next user activity
is different with prediction list, it needs again to
classify with new user activities.

obtained. There are some basic approaches to
evaluating the accuracy of classification. One of these
approaches is K-fold cross-validation. In this
evaluation method we first split the data into K subset
of equal size. Then each subset in turn is used for
evaluation and the remainder for training.
In each of the 10 iterations, the data set divided into
training (90%) and evaluation (10%) datasets. The
training set is used to generate the models based on
classification module while the evaluation set is used to
test the generated model. Each navigational pattern np
in the evaluation set is divided into two parts. The first
n pageviews in np are used for generating predictions,
whereas, the remaining part of np is used to evaluate
the generated predictions. The active session window is
the part of the user’s navigational patterns used by the
prediction engine in order to produce a prediction set.
We call this part of the navigational pattern np the
active session with respect to np, denoted by asnp. The
prediction engine takes asnp and a recommendation
threshold τ as inputs and produces a set of pageviews
as prediction list. We denote this prediction set by
P(asnp, τ). The set of pageviews P(asnp, τ) can now be
compared with the remaining |np| − n, pageviews in
np. We denote this part of np by evalnp. Our
comparison of these sets is based on 3 different
metrics, namely, accuracy, coverage and F1 measure.
The accuracy of P(asnp, τ) is defined as:

4.2. An Example of the classification algorithm
To illustrate the process, consider the example
navigational patterns set given in table 1.
For this example we consider 3 for active session
r
windows. Sequence ω = 〈 P17, P1, P27〉 is a set of web
pages in active session window that it is ranked based
on matrix M. We consider size 3 for window. The
Sequence npr 2 = 〈 P5, P17, P32, P40, P13, P1, P27, P43 〉 is the
cluster that finds with the prediction engine based on
r
LCS algorithm. For this example it finds sequence γ =
〈 P5, P32, P40, P13, P43 〉 as a prediction list.
Table 1: Navigational patterns generated by
clustering algorithm
NP
Navigational Pattern
number
1
〈 P2, P10 ,P15 ,P20 ,P8 〉
2
〈 P5, P17 ,P32 ,P40 ,P13 ,P1 ,P27 ,P43 〉
3

〈 P6, P3 ,P11 〉

4

〈 P33, P36 ,P16 ,P12 ,P9 ,P24 ,P44 〉

5

〈 P7, P37 ,P31 ,P29 ,P18 ,P26 〉

6

〈 P50, P42 ,P13 ,P52 ,P49 ,P38 ,P14 〉

(2)
, the coverage of P(asnp, τ) is defined as :

The user chooses a page from prediction list or
maybe follows past activities. According to the new
active session window, prediction engine rebuild the
r
predictions. For example Sequence ω = 〈 P27, P37, P18〉 is
the new active session window, prediction engine looks
for more related cluster based on LCS algorithm.
Found the cluster, this maybe is different from previous
r
cluster that founded by the LCS. For example if np7 =〈

(3)
And the F1 measure F1(P(asnp,τ)) is defined as:

(4)

P7, P37 ,P31 ,P29 ,P18 ,P26 〉 as a new cluster that finds by
r
LCS algorithm then the new prediction can be γ = 〈

Accuracy measures the degree to which the
recommendation
engine
produces
accurate
recommendations while coverage measures the ability
of the recommendation engine to produce all of the
pageviews that are likely to be visited by the user.
The F1 measure attains its maximum value when
both accuracy and coverage are maximized. Finally, for
a given prediction threshold τ, the mean over all
navigational pattern in the evaluation set is computed
as the overall evaluation score for each measure. We
ran experiments for thresholds ranging from 0.1 to 1.0.
The results of these experiments are presented below.

P7, P31, P29, P26 〉. Before this predictions suggests to the

user, it ranks based on the values stored in the cooccurrence matrix M .This module of prediction engine
sorts the pages in the prediction list that more strictly
related to those in the session that determined the
classification.

5. Experimental Evaluation
Measuring the accuracy of the prediction list in such
system needs to characterize the quality of the results

306

Figure 4, 5, and 6 depict the evaluation results for the
DePaul University CTI dataset. These results illustrate,
when the threshold increase, in the best case accuracy
of classification is able to predict user’ next request up
to 73%.

that can be used to evaluate the quality of the
predictions found.
For the future, we would perfect the architecture and
let it serves for actual users to the best of its abilities.

REFERENCES

0.8
0.7

[1]

Accuracy

0.6
0.5
0.4

[2]

0.3
0.2
0.1

[3]

0
0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.8

0.9

1

Prediction Threshold

Fig. 4 Accuracy of the Prediction

[4]

0.9
0.8

[5]

0.7

Coverage

0.6
0.5
0.4

[6]

0.3
0.2

[7]

0.1
0
0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.8

0.9

1

Prediction Threshold

[8]
Fig. 5 Coverage of the Prediction
0.7

[9]

0.6
0.5

[10]

F1

0.4
0.3

[11]
0.2
0.1

[12]

0
0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.8

0.9

1

Prediction Threshold

[13]

Fig. 6 F1 measure of the Prediction

6. CONCLUSION

[14]

In this paper, we advance an architecture and
proposed a novel contribution to classify user
navigation pattern and online predicting users’ future
request by mining of web server logs. In this paper we
used LCS algorithm for improving accuracy of
recommendation. The Excremental results show that
the approach can improve accuracy of classification in
the architecture. We used some evaluation techniques

307

R. Baraglia,F. Silvestri, ”Dynamic Personalization of
Web Sites Without User Intervention”, Communication
of the ACM, 2007,pp. 63-67.
E. Frias-Martinez, V. Karamcheti,”Reduction of user
perceived latency for a dynamic and personalized site
using web-mining techniques”, WebKDD, 2003.
R. Liu, V. Keselj,” Combined mining of Web server
logs and web contents for classifying user navigation
patterns and predicting users’ future requests”, Data &
Knowledge Engineering, Elsevier, 2007, pp.304-330.
B.Mobasher,
R.Cooley,
J.Srivastava,”Automatic
personalization based on web usage mining”,
Communications of the ACM,ACM, 2000, pp. 142–151.
W.T.Yan, M.Jacobsen, H.Garcia-Molina,Umeshwar,”
From user access patterns to dynamic hypertext
linking”, Computer Networks and ISDN Systems,
Elsevier, 1996.
T. H. Cormen, C. E. Leiserson, and R. L. Rivest.
“Introduction to Algorithms”, MIT Press, 1990.
V. Dancik,” Expected Length of Longest Common
Subsequences”, PhD thesis, University of Warwick,
1994.
A. V. Aho, D. S. Hirschberg, and J. D. Ullman,”
Bounds on the complexity of the longest common
subsequence problem”, J. Assoc. Comput. Mach.,ACM,
pp. 1-12, 1976.
D. S. Hirschberg,” Algorithms for the longest common
subsequence problem”, ACM, 1977, pp. 664–675.
R. A. Wagner and M. J. Fischer,” The string-to-string
correction problem”, J. Assoc. Comput. Mach., ACM,
1974, pp. 168-173.
M.Nakagawa,B.Mobasher,
”A
hybrid
web
personalization
model
based
on
site
onnectivity”,WebKDD,2003,pp. 59-70.
R.Baraglia, F.Silvestri,” An online recommender system
for
large
Web
sites”,
Web
Intelligence,
IEEE/WIC/ACM, 2004, pp. 20–24.
A. Apostolico, “String editing and longest common
subsequences”, Handbook of Formal Languages, Vol. 2.
Linear Modeling: Background and Application,
Springer Verlag, Berlin, chapter 8, 1997, pp. 361–398.
M. Jalali, N. Mustapha, A. Mamat, Md N. Sulaiman
,”OPWUMP An architecture for online predicting in
WUM-based personalization system”, In 13th
International CSI Computer Science, Springer
Verlag,2008.

