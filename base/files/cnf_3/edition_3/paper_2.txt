2009 13th International Conference Information Visualisation

A Framework to Analyze Information Visualization
based on the Functional Data Model ∗
Tsuyoshi Sugibuchi
LRI-CNRS UMR 8623
Universit´e Paris-Sud XI
91405 Orsay Cedex France
buchi@lri.fr

Nicolas Spyratos
LRI-CNRS UMR 8623
Universit´e Paris-Sud XI
91405 Orsay Cedex France
spyratos@lri.fr
R.A: Total sales by date

Abstract

date

We propose a framework for analyzing information visualization (infovis) based on the concept of Functional Dependency (FD). Although functional dependencies express
important semantic information of data, they are rarely
taken into account by general purpose infovis tools — a fact
that may cause problems in the visualization process. The
main idea of our approach is to use the concept of FD for
modeling the invariant structures of all three components
of information visualization that is data, visual representations, and visual mappings.
Data table

Data
transformation

Visual abstraction

Visual
mapping

Views

date

?

sales

2000

4000

01/04/09

2000

4000

02/04/09

3000

3000

02/04/09

3000

3000

03/04/09

4000

03/04/09

3000

03/04/09

1000

…

3000

2000
1000

2000
1000

…

Figure 2. Probelm in drawing bar charts
R.A date → column, total sales → height of bars
R.B date → column, sales → height of bars
In this example, we can safely draw a bar chart for table
R.A. However, we cannot draw a bar chart for R.B because
we cannot put two bars into the column associated with
03/04/09. The important point here is that, although both
data tables have exactly the same structure (same number
of columns and same data type for each column), we can
draw a bar chart for one but not for the other. Moreover, we
can’t tell this problem before we draw the actual charts with
the imported data.
Now, if the source data were stored in a relational
database, then the attribute Date would have been declared
as a key for table R.A — which guarantees that there can
never be a duplicated value in column total sales; and this
entails that we can draw a bar chart for R.A. On the other
hand, the attribute Date is not a key for table R.B, therefore
we cannot draw a bar chart for R.B; and this entails that we
should consider representations other than bar chart for R.B
(e.g. a scatter plot chart). The important observation here
is that one can derive useful information about the appropriate representation of imported data by considering key
constraints before drawing charts.
An intuitive solution for this kind of problems is to make
an infovis tool consider key constraints in the source data.
In fact, some infovis tools allow us to add a “uniqueness”
flag to column definitions. However, this is just a “remedy”
that has two drawbacks. First, the relationship between key
constraints and visual representations is still not clear; and
second, the key constraint is a concept specific to the rela-

User

X coord,
Y coord,
Color, …

View
transformation

Figure 1. Infovis reference model
Figure 1 illustrates the infovis reference model proposed
by Card et al [6]. In this model, as well as in most infovis tools, the first step is data transformation that maps the
source data to their internal data structure. Most generalpurpose infovis tools use the tuple data structure as their
internal data structure. Such tools import source data in the
form of a set of tuples and work only with the imported tuples in the rest of the visualization process. However, in
doing so they sometimes lose important features of data —
a fact that may cause problems in the visualization process.
To see this consider the two data tables in figure 2. and
their bar chart representations. Data table R.A is a list of total sales by date, whereas table R.B is a list of sales events.
The bar chart representation is split into columns and each
column is occupied by exactly one bar. Suppose the following visual mappings (refer to figure 2):
1 This project is supported the CNRS/JSPS strategic international cooperative program and the DIGITEO Project VISIR (No. 2008-02D).

978-0-7695-3733-7/09 $25.00 © 2009 IEEE
DOI 10.1109/IV.2009.56

R.B: Sales events

total_sales

01/04/09

04/04/09

1 Introduction
Source data

Ekaterina Siminenko
LRI-CNRS UMR 8623
Universit´e Paris-Sud XI
91405 Orsay Cedex France
simonenk@lri.fr

18

tional model. What we really need for general-purpose infovis tools, is a higher abstract concept applicable not only
to the relational model but also to any other data model.
Our proposal is to use the concept of functional dependency
(FD) for analyzing information visualization. The concept
of functional dependency (i.e. the concept of function) lies
at the basis of data modeling and can be applied to any data
model. Moreover, we found an analogy between functional
dependencies and visually perceptible structures in visual
representations. The key idea of this study is to analyze all
three information visualization components that is data, visual representations and visual mappings by using the same
concept — that of functional dependency.
In what follows, first we review related work in section
2; then in section 3 we explain our framework through a
case study of implementing a visualization tool for OLAP
(OnLine Analytical Processing). In sections 4, 5 and 6, we
present our approach to data analysis, visual representations
and visual mappings in information visualization displays.
Finally, in section 7, we conclude this paper with some remarks about future work.

From related studies and our experience, we conclude
that it is difficult to directly associate data structures with
visual representations by using the relational model. Our
proposal is to use a higher level abstract model for analysis
before applying a model for implementation — including
the relational database model. In fact, we propose to use
the functional model as such a higher level abstract model.
The functional data model has a long history since the
early era of database research [5][19]. From the viewpoint
of information visualization, GQL [17] and Hy+ [9] are significant studies in this respect. Both are based on the functional data model and provide graph base representations
of data schemata and queries. However, these prior studies lack visual representations of data retrieved by queries
(GQL), or provide representations specialized only for the
functional data model (Hy+). The missing link between
the functional data model and general-purpose infovis tools
is the analysis of existing visual representations from the
viewpoint of the functional data model. Providing this missing link is an important part of our proposal.
There are several important studies about automated infovis tools since the early 1990’s, for instance, APT [13],
BOZ [7], and Sage [18]. One important contribution of their
studies is a methodology to use characterization of data in
infovis tools based on research about human’s perceptual
tasks [8] and semiology of graphics [3]. Their tools select appropriate visual representations in consideration of
characters of each data, including scale type, cardinality,
uniqueness and so on. At present, our framework focuses
only on relationships among multiple data attributes. To introduce characterization of individual data attributes is the
next direction of our work.
Furthermore, APT and BOZ provide formal languages
that can describe both data and visual representations.
These languages have the ability to prove whether given
data can be visualized by using a specified visual representation. Our framework also has the same ability to validate
specifications of information visualization displays. The
difference lies in the fact that our framework is based on
only one abstract concept instead of any concrete languages
or implementations. We believe that our framework is easily
applicable to many existing infovis tools in order to analyze
them and improve them.

2 Related Work
The tuple data structure is adopted as the internal
data representation by many general-purpose infovis tools.
Moreover, several works introduce the relational database
model or some other model to organize tuples in their infovis tools . DEVise [12], Tioga-2 [2], and Snap-Together visualization model [16] succeed in coordinating multiple visualization views by applying the relational database model
to their internal data tuples. VQE [14] (thread model) and
Improvise [22] (active property and coordinated query) use
their unique models for controlling interactions among tuples. Instead of hardcoded logic, these systems use sets of
operators defined in their model to flexibly coordinate data
and visual components in their visualization environments.
However, these operators interact with only internal data
structures. Most of these tools import data only as a set
of tuples. As we shall show later on, they may lose some
important information carried by the original data schema.
Several modern information visualization toolkits, for
instance infoviz toolkit [10], XML toolkit [4] and prefuse
[11] provide additional data structures including trees and
graphs. Each of them can capture additional features from
the source data structure, however, only specific features
from specific data structures. It is the typical dilemma between flexibility and expressiveness of data structures.
A very important study about an extension of the SnapTogether visualization model is reported by North et al in
[15]. The authors propose a model for representing coordination of visualization views as a relational schema. Moreover, they announce (as future work) an interesting idea of
integrating their relational visualization schema with relational data schemas.

3 Outline
First of all, our framework is NOT for providing new implementation technologies. The purpose of our framework
is to analyze the specification of an information visualization display in order to capture relationships among data
and visual representations. After analysis, captured relationships should be implemented as an infovis tool by using
existing technologies, for instance, relational databases or
visualization toolkits.
19

n Data to visualize
o
ti
a
ci Relational model
ifc Multidimensional
XML, RDF, …
e
p
S

Visual mapping

Visual representation
1.0 2.0

2.2

2.0 3.2

3.9

2.9 4.5

6.3

interface. In the following three sections we present very
succinctly the basic components of our framework, namely
the functional data schema, the functional representation
schema and the functional visualization schema. For more
details, the reader is referred to [21].

Bar chart
Pie chart
Scatter plot
Tabular layout …

Functional visualization schema
Functional dependencies
Functional
between data and visual
representation schema
representation

si Functional data schema
s
ly
a
n Functional
A
dependencies in
data to visualize

4 Functional data schema

Functional
dependencies
in a visual
representation

In this study, we follow the functional model for data
analysis proposed in [20]. In this model, the data schema,
that we call functional data schema, is an acyclic graph with
a single root, whose edges are functional dependencies, and
whose nodes are attributes — each attribute being associated with a set of values, or domain. A database over such a
schema stores a finite set of values (from that attribute’s domain) under each attribute and a total function under each
edge e : X → Y , from the values under X to the values
under Y . We use a functional data schema to represent an
invariant structure of an information visualization display.

n
o
Information visualization tool
ti
a
Data storage
User interface
t
n
Query
e based on
based on
m relational database,
Adobe Flex,
Data
e
l OLAP engine,
Java, C++,
p XML, RDF, …
Infovis libraries…
m
I

Figure 3. Outline of the framework
Figure 3 shows the three steps of our framework, namely
specification, analysis and implementation. A specification
of information visualization display consists of the following components: data to visualize, a visual representation
and a visual mapping from data to the visual representation. In the analysis step, a set of functional dependencies
are extracted from these three components. Then, extracted
dependencies are organized into a functional data schema,
a functional representation schema and a functional visualization schema. Finally, an information visualization tool
is implemented in consideration of these three functional
schemata by using existing software or toolkits.
In this section, we explain this framework through a
case study of implementing an OLAP visualization system,
called the VISIR workbench.

Specification
Analysis
Implementation

Region
g2
Year

City

f2

g1

Month

Supplier

Store

Date

f

h2
Product

g

f1

Category

h1

h
Sales_id

q

Quantity

Figure 5. Functional data schema
Figure 5 shows an example of a functional data schema
which represents sales events in a food store company.
In this example, the schema is a tree with root attribute
sales id. For each sales id we can retrieve all associated
values of other attributes by following functional dependencies represented as edges in this graph.
In the rest of this paper, we shall denote the domain
and the range of a functional dependency as dom(f ) and
range(f ). Moreover, we sometimes use the following obvious functional dependencies that exist in any data (and
that we don’t show in the functional data schema):

Data
Visual
Visual
to visualize
mapping
representation
Multidimensional
interactively
bar chart, pie,
data warehouse
defined
cross tab, etc.
through three functional schemata
Mondrian
MDX (query Adobe FlexTM
(OLAP server)
language)
(GUI toolkit)

Table 1. Architecture of VISIR workbench
As described in the “Specification” line of Table 1, the
VISIR workbench allows users to interactively visualize
data in a multidimensional data warehouse in the form of
various visual representations. Before implementing an actual system, we analyzed this specification of our system
and modeled it in the form of the three functional schemata
mentioned above. Then we implemented the VISIR workbench in consideration of this analysis result. We use Mondrian [1] as the OLAP server; the user interface is developed using the Adobe FlexTM toolkit and its visualization
components; and for retrieving data to visualize, we used
MDX (which is a query language for OLAP). The VISIR
workbench dynamically constructs a set of MDX queries
from a visual mapping definition; Mondrian evaluates MDX
queries; and the evaluation results are visualized in the user

• Identity function: idA : A → A satisfying idA (a) =
a for all a ∈ dom(A)
• Constant function: A → ⊥, ⊥ is a constant called
bottom element
In much the same way as the relational model has the
relational algebra that allows deriving new relations from
existing relations, the functional model has the functional
algebra that allows to derive new functional dependencies
from existing dependencies. The functional algebra comprises the following four primitive operations and one aggregation operation, as shown in Figure 6.
In particular, the aggregation operation (or OLAP query)
takes as input a classifier function c , a measure function m
such that dom(c) = dom(m) and an aggregation function
20

Palette area

Visualization canvas

(Schema browser &
template library)

(Users can drop data attributes
and visualization templates)

Analytic Query
OLAP query formulation

Drag-and-drop

by drag-and-drop
data attributes from
schema browser

Query
Evaluation

Result Exploitation
Result visualization

OLAP queries
Further
exploration
OLAP
engine
rollup and
drilldown by
clicking on a
pop up menu

Choice of result visualization
Results

by drag-and-drop
visual templates
from template
library

Visualization
templates

Parametric visualization
choice of visualization
parameters by drag and drop
from pop up menu

Figure 4. Screen image and outline of VISIR workbench

Composition

X f
X

Y g Z
Z
g ∘f

Pairing

X

f Y

Y×Z
g Z f ∧g

Projection

A1×

×A

n π
Ai

Ai

Restriction

E ⊆X f
E
f/E

set of levels and measures. A level is a set of values belonging to the same category. For instance, level City is a
set of city names like City = {P aris, Lyon, T okyo, . . .}.
Each level belongs to a hierarchy of levels called dimension. Measure dimension is a special dimension that has
only measure level. A value in measure level corresponds
to a set of values called measure. A measure op(A) is defined with an attribute A in a fact table and an aggregation
function op to calculate its values. Let L = {L1 , . . . , Lk }
be a set of levels and op(A) be a measure. An evaluation result of Mondrian’s OLAP query C L, op(A) is a function
L1 × . . . × Lk → op(A).
To map a Mondrian’s data warehouse schema to a functional data schema, we start from a functional schema
that has only one root attribute “O”. For each dimension, we map it to a chain of functional dependencies
in a functional schema like O → Store → City →
Region → Country. For each measure op(A), we add
attribute A and functional dependency O → A to the functional schema. After this mapping, we can map Mondrien’s OLAP queries to aggregation operations over a
functional schema. For instance, Mondrian’s OLAP query
C {M onth, Store}, sum(sales) over SM can be mapped
to an aggregation operation Q (f1 ◦ f ) ∧ g, q1 , sum in SD .

Y
Y

Aggregation

X c O m Y
o1
100
x1
o2
200
450
o3
150
x2
o4
200
300
o5
100
X Q<c, m, sum> sum(Y)

Figure 6. Operations of functional algebra
op ∈ {count, sum, avg, max, min} , and returns a functon
Q c, m, op : range(c) → op(range(m)).
Given a functional schema S, a path expression over S
is a well formed expression whose operands are functional
dependencies in S and whose operations are those of the
functional algebra. A path expression over S is also a derived functional dependency over S. In our framework, path
expressions are used for defining queries and for associating
data to visual representations.
SM: Multidimensional data warehouse schema
Sales

Year

Country

Family

Quarter

Region

Category

Measure
sum(sales)

Month
Date

City
Store

Date
Store
dimension dimension

Product

Product
dimension

SD: Functional data schema
Year

sum(unit)

Measure
dimension

f3

Country

g3

Quarter

f2

Region

g2

Month

f1

City

g1

Date

f

Family

5 Functional representation schema

h3
Category

h2

Scatter plot

Product

X

Store

g
O

q1

Bar chart

base

sales

fR2

dot

q2 unit

column

Y

fR1

base
fR4

fR4

h

fR3

fR1

color

fR2

height
fR3

bar

Figure 8. Functional representation schema

Figure 7. Example of data schema mapping

In this paper, we treat a visual representation of data
as a composition of visual items such as dots, lines and
so forth. Each visual item has a set of visually perceptible properties, called its visual attributes, such as color,
size, spatial position, and so forth. In the traditional design of infovis tools, each visual item is represented by
the tuple of its attribute values. For example, if a dot has
as visual attributes a X-coordinate, a Y-coordinate and a

To implement the VISIR workbench, we developed a
procedure for mapping a multidimensional data warehouse
schema to a functional data schema. In the following explanation, we use the multidimensional data model used in
Mondrian. Figure 7 shows an example data schema SM in
Mondrian and a corresponding functional data schema SD .
A Mondrian’s multidimensional data schema comprises a
21

Scatter plot matrix

Table layout

Color, then an individual dot is represented as a triple, say
2, 3, Red , where each value in the triple is taken from
the domain of the corresponding attribute. Notice however that the dot itself remains implicit. Therefore a set
I of visual items having attributes A1 , . . . , An , is represented as a set of tuples from dom(A1 ) × . . . × dom(An )
but the set I remains implicit. In our approach, we represent the set of visual items I by as many functions on I
as there are attributes that is by n functions of the form
f1 : I → A1 , . . . , fn : I → An . Thus in our previous
example where the visual items are dots, we will have three
functions: CoordX : dot → Real, CoordY : dot → Real
and color : dot → {red, green, black, . . .}; and a specific dot, say i, is represented by the following three values:
CoordX (i), CoordY (i) and color(i). In other words, in
our representation, each visual item i of I is again associated with n attribute values (one by each function), therefore our representation is equivalent to the one used in the
traditional design of infovis tools. The important difference
lies in the fact that our representation makes the (identifiers
of) the visual items explicit. As a consequence, we can now
state invariant properties of a representation in the form of
functional dependencies, for instance, dot → color.
Using visual attributes and their functional dependencies we define now the concept of functional representation
schema as follows:

base
base
drop

row

column
row

column

placeholder
placeholder

Scatter plot
base

base
X

Y

X

Y
dot

dot

Figure 9. Composite visualization
FlexTM toolkit. However, as Adobe does not provide functional schemata for each chart component. We had to define
functional schemata for them first.
To allow users to combine visualization templates, we
defined two special visual attributes. Figure 9 shows an
example. base attribute corresponds to a root widget of a
visualization template. placeholder attribute corresponds
to an area in which users can drop a visualization template.
Then, we implemented user’s drag-and-drop manipulations
on visualization templates respecting the following rule.
• when a user drops template TA into a placeholder in
template TB , a bi-directional functional dependency is
defined between base attribute in TA and placeholder
attribute in TB , that is base
placeholder.
Functional dependencies defined by this rule mean that
a dropped template is placed in exactly one placeholder and
the placeholder is occupied by the dropped component. By
using this rule, users can interactively construct a visual representation and its functional schema.

Definition 1 (Functional representation schema)
Let UR be a set of visual attributes and FR be a set of functional dependencies over UR . A functional representation
schema SR is a directed graph SR (UR , FR ) defined as follows:

6 Functional visualization schema
Figure 10 shows an example of functional visualization
schema. A functional visualization schema represents the
invariant structure of an information visualization display.
In our framework, the structure of an infovis display is
treated as a relationship among three factor: the data, a selected visual representation, and a visual mapping associating the data and the visual representation. A functional
visualization schema represents a visual mapping as a set of
functional dependencies between data attributes and visual
attributes.

• Each attribute set appearing in FR is a node
• Each functional dependency X → Y in FR is a edge
Note that we relaxed the definition of functional representation schema from the original definition of functional
data schema by removing the “acyclic” condition. In fact,
as shown in Figure 8, we need cycles in order to capture
some types of structure in visual representations.
The schema of bar charts in figure 8 illustrates further
examples of functional dependencies in visual representations. Thus in the bar chart each bar is placed in a column,
and we can consider this relationship as a functional dependency bar → column. Moreover, one column in this chart
is occupied by exactly one bar and no bar overlaps with others. This is another functional dependency column → bar.
To implement the VISIR workbench, we developed a
set of visualization templates including various types of
chart components and layout components including the
cross tabulation component. The VISIR workbench allows
users to combine such templates to design new visualization displays. We developed each visualization template
by using chart drawing components provided by Adobe

Visual mapping

Functional visualization schema

R.A
date

⊥

total_sales
2000

4000

3000

3000

03/04/09

4000

2000

04/04/09

3000

1000

01/04/09
02/04/09

…

fbot

ebase

base

eheight

total_sales

fR4

column

fts

ecol

date

ebar

fR1

fR2

height

fR3

bar

MF={iddate ↦ fR1, iddate ↦ fR2 , fts ↦ fR3 , fbot ↦ fR4}

Figure 10. Functional visualization schema
Before defining the concept of functional visualization
schema, we need to define a strong criterion of information
visualization displays called faithfulness criterion. Broadly
22

speaking, the faithfulness criterion consists of the following
two conditions.

With a set of encoding functions FE and a set of function
mappings MF in SV : SD → SR , we denote SV as a tuple
SV (SD , SR , FE , MF ). To draw a diagram of a functional
visualization schema, we shall use dashed line arrows for
encoding functions. For example, see figure 10.
Based on this definition of functional visualization
schema, we give a formal description of the faithfulness criterion.

(1) Values of a visual attribute are functionally determined
by values of a data attribute, and
(2) A relationship between values of two visual attributes
reflects a functional dependency existing in data
R.A
date

Faithful

Not faithful

total_sales

01/04/09

2000

4000

4000

02/04/09

3000

3000

3000

03/04/09

4000

2000

2000

1000

1000

04/04/09

3000

AD

e

fD
AD

…

Definition 3 (Faithfulness criterion)
An information visualization display V is faithful if and
only if V satisfies the following conditions:
1. V
has a functional visualization schema
SV (SD , SR , FE , MF ) and
2. For every function mapping mF : fD → fR in MF
with encoding functions e1 : dom(fD ) → dom(fR ),
e2 : range(fD ) → range(fR ) in FE , the diagram in
figure 11 commutes, i.e., fR ◦ e1 (x) = e2 ◦ fD (x) for
any x ∈ AD1 .
When we developed our VISIR workbench, this criterion
powerfully worked to improve user’s experience in OLAP
tasks in several ways. We end this section by describing one
way in which the VISIR workbench can help users, namely
the validation of visual mappings. As we demonstrated in
the introduction of this paper, users may make invalid visual mappings in infovis tasks. By applying the faithfulness criterion to a functional visualization schema created
from given a visual mapping, the VISIR workbench can tell
whether a given mapping is valid or not.
Figure 12 shows examples of invalid visual mappings
(caming from figure 2. As the table R.B has no key constraint (i.e. {sales, date} is the only key), the functional
data schema of R.B has “date, sales” as its only node and
has no functional dependency. Assume that the given visual
mapping is {date → column, sales → height of bars}. To
apply this visual mapping, we need to derive trivial dependencies by using the projection πdate , πsales .

Diagram

AR

fR
e

AR

Figure 11. Faithfulness criterion
Figure 11 illustrates a violation of this criterion. In this
figure, we can intuitively see the second bar chart is not
faithful to the data in R.A. There are two possible reasons
why the second one is not faithful.
• Violation of (1): For instance, total sales in 02/04/09
and 04/04/09 are the same amount. However, they
were mapped to different heights of bars.
• Violation of (2): Each amount of total sales was correctly mapped to height of each bar. However, the relationship between bars and columns does not reflect
the relationship between date and total sales.
To define a functional visualization schema in consideration of this criterion, we introduce a set of functional
dependencies called encoding functions and a set of function mappings. These two sets are introduced to satisfy two
conditions of this criterion. Now, we would like to define
functional visualization schema as the following.
Definition 2 (Functional visualization schema)
Let SD (UD , FD ) be a functional data schema, SR (UR , FR )
be a functional representation schema. A functional visualization schema SV : SD → SR comprises:

Invalid visual mapping (a)
⊥

date

sales

• SD and SR

01/04/09

2000

fbot

02/04/09

3000

• for each aR ∈ UR , exactly one functional dependency
e : aD → aR satisfying aD ∈ UD , called encoding
function

03/04/09

3000

03/04/09

1000

sales date
πsales
πdate

…

Invalid visual mapping (b)

ebase

R.B

date, sales

eheight
ecol

ebase
base

fbot

column height

ebar2

⊥

eheight
ecol

fR2

sales date
πsales
πdate

bar

date, sales

base

column height

fR3
ebar1

bar

Figure 12. Invalid visual mappings

• for each fR : AR1 → AR2 in FR , exactly one function
mapping mF : fD → fR such that:

At this moment, the visual attribute bar is not associated with any data attributes. Therefore, the VISIR workbench tries to associate a data attribute to it. However, it
will fail. In the invalid visual mapping (a), bar is associated with “date, sales”. In this case, we need to map a
functional dependency date → (date, sales) to fR2 . However, the data schema lacks such a dependency. Practically,
this lack of functional dependency will appear as a problem

– fD is a functional dependency (or a derived functional dependency) in SD and
– with encoding functions e1 : AD1 → AR1 and
e2 : AD2 → AR2 , dom(fD ) = AD1 and
range(fD ) = AD2 (See the diagram in figure
11).

23

of putting multiple bars into one column. In invalid visual
mapping (b), bar is associated with date. However, the data
schema lacks a functional dependency date → sales that
we should map to fR3 . If we draw a chart with this visual
mapping, we will encounter a problem of applying different
heights to one bar at the same time.
As demonstrated in this example, VISIR tries to construct a valid functional visualization schema that satisfies
the faithfulness criterion from the visual mappings specified by users. The VISIR workbench dynamically scans the
directed graph of a data schema to find valid visual mappings. If it fails, the VISIR workbench notifies users before
drawing charts.

[7] S. M. Casner. Task-analytic approach to the automated
design of graphic presentations. ACM Trans. Graph.,
10(2):111–151, 1991.
[8] W. S. Cleveland. The elements of graphing data. Wadsworth
Publ. Co., Belmont, CA, USA, 1985.
[9] M. Consens and A. Mendelzon. Hy+: a hygraph-based
query and visualization system. In SIGMOD ’93: Proceedings of the 1993 ACM SIGMOD international conference on
Management of data, pages 511–516, New York, NY, USA,
1993. ACM.
[10] J.-D. Fekete. The infovis toolkit. Information Visualization,
IEEE Symposium on, 0:167–174, 2004.
[11] J. Heer, S. K. Card, and J. A. Landay. prefuse: a toolkit for
interactive information visualization. In CHI ’05: Proceedings of the SIGCHI conference on Human factors in computing systems, pages 421–430, New York, NY, USA, 2005.
ACM.
[12] M. Livny, R. Ramakrishnan, K. Beyer, G. Chen, D. Donjerkovic, S. Lawande, J. Myllymaki, and K. Wenger. Devise:
integrated querying and visual exploration of large datasets.
SIGMOD Rec., 26(2):301–312, 1997.
[13] J. Mackinlay. Automating the design of graphical presentations of relational information. ACM Transactions on
Graphics, 5:110–141, 1986.
[14] J. K. Mark Derthick and S. F. Roth. An interactive visualization environment for data exploration. In Proceedings
of Knowledge Discovery in Databases, pages 2–9. AAAI
Press, August 1997.
[15] C. North, N. Conklin, K. Indukuri, and V. Saini. Visualization schemas and a web-based architecture for custom
multiple-view visualization of multiple-table databases. Information Visualization, 1(3/4):211–228, 2002.
[16] C. North and B. Shneiderman. Snap-together visualization:
a user interface for coordinating visualizations via relational
schemata. In AVI ’00: Proceedings of the working conference on Advanced visual interfaces, pages 128–135, New
York, NY, USA, 2000. ACM.
[17] A. Papantonakis and P. J. H. King. Gql, a declarative graphical query language based on the functional data model.
In AVI ’94: Proceedings of the workshop on Advanced visual interfaces, pages 113–122, New York, NY, USA, 1994.
ACM.
[18] S. F. Roth and J. Mattis. Automating the presentation of
information. In Proceedings of the IEEE Conference on Artificial Intelligence Applications, pages 90–97, March 1991.
[19] D. W. Shipman. The functional data model and the data
language daplex. In SIGMOD ’79: Proceedings of the 1979
ACM SIGMOD international conference on Management of
data, pages 59–59, New York, NY, USA, 1979. ACM.
[20] N. Spyratos. A functional model for data analysis. In Proc.
of Flexible Query Anwering Systems (FQAS) 2006, pages
51–64, 2006.
[21] N. Spyratos, E. Simonenko, and T. Sugibuchi. Data analysis
based on functional dependencies. Technical Report 1501,
CNRS – Universit´e de Paris Sud, October 2008.
[22] C. Weaver. Building highly-coordinated visualizations in
improvise. In INFOVIS ’04: Proceedings of the IEEE Symposium on Information Visualization, pages 159–166, Washington, DC, USA, 2004. IEEE Computer Society.

7 Conclusion and future work
In this paper, we introduced a framework for analyzing
information visualizations. The key point of our proposal
is to analyze the entire process of information visualization
by using only the concept of functional dependency. In particular, this approach allows us to clearly figure out connections between data and visual representations and to validate
them. We think that this ability of our framework has a potential for automatic visualization and for introducing user
assistance in information visualization tasks.
Our current work follows several directions. First, we
need to give a formal defintion of our framework. Second,
we would like to provide interactive visualization. In this
paper we discussed only static visualization. To apply our
framework to dynamic visualization based on user’s interaction is our next challenge. A naive approach of applying
our framework to interactive visualization is to introduce
higher-order functions. Although this is an interesting extension, we need to keep the framework as simple as possible so that to apply to various inforvis tools simultaneously.
Finally, we need to prove the benefits of our framework
through more case studies, in particular by applying our
framework to automatic or semi-automatic visualization.

References
[1] Pentaho corporation. http://mondrian.pentaho.org/.
[2] A. Aiken, J. Chen, M. Lin, M. Spalding, M. Stonebraker,
and A. Woodruff. The tioga-2 database visualization environment. In Lecture Notes in Computer Science, pages
181–207, 1995.
[3] J. Bertin. Graphics and graphic information processing.
Morgan Kaufmann Publishers Inc., San Francisco, CA,
USA, 1999.
[4] K. B¨orner. The xml toolkit project webpage, 2003.
[5] P. Buneman and R. E. Frankel. Fql: a functional query language. In SIGMOD ’79: Proceedings of the 1979 ACM
SIGMOD international conference on Management of data,
pages 52–58, New York, NY, USA, 1979. ACM.
[6] S. K. Card, J. D. Mackinlay, and B. Shneiderman. Readings
in information visualization: using vision to think. Morgan
Kaufmann Publishers Inc., San Francisco, CA, USA, 1999.

24

