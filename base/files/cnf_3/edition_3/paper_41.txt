2009 13th International Conference Information Visualisation

Visual Representation of Reifications in RDF Visualizer ∗
Jiˇr´ı Dokulil, Jakub Yaghob
Faculty of Mathematics and Physics,
Charles University, Prague, Czech Republic
(dokulil,yaghob)@ksi.mff.cuni.cz

Jana Katreniakov´a
Faculty of Mathematics, Physics and Informatics,
Comenius University, Bratislava, Slovakia
katreniakova@dcs.fmph.uniba.sk

Abstract

their RDF representation visualizes poorly, but they are out
of scope of this paper. In this paper, we primarily focus on
the last type, i.e. reifications.
A reification of a triple (statement) is its transformation to a form where further statements can
be made about the triple.
The triple <x,y,z>
is transformed into <t,rdf:type,rdf:Statement>,
<t,rdf:subject,x>, <t,rdf:predicate,y> and
<t,rdf:object,z>. Any triple with t as its predicate
is then a statement about the original triple.
The four triples that represent the original statement are
usually not directly interesting even to the software developer using the visualizer. He or she is mostly interested
only in the new statements about the reified triple. Note
that it may not always be the case, since the developer may
be hunting for malformed reifications or when the original
triple is not present in the data (this is perfectly fine in RDF
– statements about any statement can be made without actually making the reified statement).
First, we introduce the triangle layout algorithm and the
node merging technique in the section 2. The main idea
of this paper is presented in the section 3. The section 4
explores the relation of our work to other RDF visualizers
and is followed by the concluding remarks.

One family of visualization tools for the Semantic web
are those that directly display the underlying RDF data.
Most of them use the inherent graph structure of RDF data
and present the user with some drawing of the graph. While
it is usually sufficient to give the user with decent understanding of data, there are some features of RDF that could
be used to improve the visualization, for instance the presence of reifications. While they can easily be displayed just
like any other part of the RDF graph, their specific properties allow for more advanced processing.

1

Introduction

The RDF data format [2] is already well established, as
are several RDF visualizers, that allow the user to browse
the data and explore the structure of the data. While their
use for end users may be questionable [7], they can certainly
be used by software developers to great effect.
Most of the visualizers use the graph structure of RDF
data to present it to the user. Since everything in RDF is
represented by triples, this approach is able to display any
stored information. But some triples have special meaning
in RDF and RDFS [1]. They include:

2

• type information,

A few years ago, we developed a RDF visualizer that
uses several new techniques, notably triangle layout and
node merging [6, 3, 5]. It is one of the visualizers that display the “pure” RDF data. The node merging technique was
used to reduce the space needed to display the data and to
present possibilities for further navigation to the user. The
basic idea is to draw one node of the RDF graph as a rectangle that not only displays information about the node, but
also about its neighbors and edges that connect them. For
an example see the Figure 1.
The nature of the triangle layout algorithm divides edges
of the graph into two classes: tree edges and non-tree edges.
For details see [5], at the moment we just need to note some

• class and attribute hierarchy,
• collections, and
• reifications.
The type information can easily be displayed along with
the node and the basic navigation capabilities of any RDF
visualizer are sufficient to browse type hierarchies. The
collections would certainly deserve special treatment, since
∗ This research was supported in part by Grant Agency of Charles University (GAUK) and VEGA 1/0726/09

978-0-7695-3733-7/09 $25.00 © 2009 IEEE
DOI 10.1109/IV.2009.27

Triangle layout

289

Figure 2. Reification tooltip

3.1

Consider the case of a node that is incident to an edge that corresponds to a triple
<node1,predicate1,node2>
that
is
reified
as the node triple1 – i.e.
the data contains
<triple1,rdf:subject,node1> etc.
In that
case, the triple <node1,predicate1,node2> is displayed as one row of the merged node node1 (and node2
as well). We can graphically distinguish this line (with a
different text color, font or a glyph). And when the users
hovers the mouse over such record, we display the merged
node that corresponds to triple1 as a tooltip. For an
example see the Figure 2.
Note that the merged node triple1 shows triples
like <triple1,predicateN,objectN> – those are
the statements about the reified triple which is exactly the
information the user would want to know about the reified
triple.
Another way to display such a node is to create a special drawing that is designed specifically for this purpose.
This is accessible by right-clicking the row. In that case,
only nodes present in the triple are displayed along with
the merged nodes that represent nodes objectN. The node
triple1 is not displayed (only a small circle in the middle of the edge is displayed as a reminder). For the layout
see the Figure 3(a). While this displays similar information
as the tooltip mentioned earlier, it allows the user to see one
step further – the merged nodes of objectN display the
neighbors of objectN. The user can restore the normal
view with expanded path to objectN and centered on the
node. Or he can explore the neighbors of objectN in the
special view by hovering the mouse over the headline of the
rectangle that represents objectN – it brings the node to
the front because it may have been obscured by other nodes.
It may be the case that there are more reifications of
the statement, i.e. there is not only triple1 but also
triple2 etc. In that case, the lines that connect each value
to the point where they meet are assigned different colors
according to the reification they belong to. They are also
grouped together.

Figure 1. Merged node
of their properties. Tree edges connect nodes that are close
to each other making them straight and short. Non-tree
edges can connect any two nodes in the drawing and they
follow a route that avoids other nodes [4]. This usually results in longer and much more complex polylines than in
the case of tree-edges.
Because of this and the fact that there is not that much
free space between nodes (the upcoming version of the visualizer will reduce them even more) we decided not to visualize the reifications directly in the basic drawing.

3

Node incident to a reified statement

Visual representation of reifications

We have identified four different places where reifications can be displayed in some way:
1. the line that represents the edge,
2. one text line of the merged node that corresponds to
the reified statement,
3. the node that directly represents the reified statement
(node t from the reification example presented earlier), and
4. one of the nodes that represents a value of some statement about the reified statement (node n of a statement
<t,m,n>).
In the previous chapter, we have already stated that there
are only limited options regarding the first possibility. But
we can still at least draw the line in a different color to alert
the user that it represents some reified triple.
The following sections deal with the other three possibilities.

290

(a) arrived from one end of the edge

(b) arrived from the value

Figure 3. Visual representation of reifications

3.2

Node that represents the reified triple

easily done without nodes overlapping each other since they
are much smaller and of fixed height.

Since the node that represents the reified triple (the node
is denoted triple1 in the previous section) is connected
to the rest of the graph, the user can navigate to the node
in the usual way. In that case, the four triples that state
the fact that the node is in fact a reification are displayed
prominently in the merged node. Also, right-clicking the
title brings up the special view mentioned in the previous
section – the user reached it using another node that defines
the view.

3.3

5

We have proposed several ways of enhancing a node
merging RDF visualizer with support for reification. Since
reification is one of the basic RDF concepts, it could be
useful for the target audience of such visualizers – software
developers.
While most techniques rely on the node merging technique, some of them can be adapted for visualizers that display nodes without the additional information.

Value of statement about statement

For a node triple1 there can be several triples
<triple1,predicateN,objectN> which was already covered in the previous section. But consider the
node object1. It can pose as an object in several triples
<tripleM,predicateM,object1> where tripleM
represents a reified triple. In that case, you can either select the individual reifications and display them using the
view described in the previous sections or you can bring up
its modification where all of them are displayed – see the
Figure 3(b).

4

Conclusions

References
[1] D. Brickley and R. Guha. RDF Vocabulary Description Language 1.0: RDF Schema. W3C Recommendation, 2004.
[2] J. J. Carroll and G. Klyne. Resource Description Framework:
Concepts and Abstract Syntax. W3C Recommendation, 2004.
http://www.w3.org/TR/2004/REC-rdf-concepts-20040210/.
[3] J. Dokulil and J. Katreniakov´a. Visualization of large schemaless rdf data. In International Conference on Mobile Ubiquitous Computing, Systems, Services and Technologies (UBICOMM 2007), includes: SEMAPRO 2007, WSNEXT 2007,
MUTL 2007, VVSSearch 2007, pages 243–248. Los Alamitos: IEEE Computer Society, 2007.
[4] J. Dokulil and J. Katreniakova. Edge routing with fixed node
positions. In IV ’08: Proceedings of the 2008 12th International Conference Information Visualisation, pages 626–631,
Washington, DC, USA, 2008. IEEE Computer Society.
[5] J. Dokulil and J. Katreniakova. Navigation in RDF Data.
In IV ’08: Proceedings of the 2008 12th International Conference Information Visualisation, pages 26–31, Washington,
DC, USA, 2008. IEEE Computer Society.
[6] J. Dokulil and J. Katreniakov´a. Visual Exploration of RDF
Data. In SOFSEM 2008: Theory and Practice of Computer
Science, pages 672–683. Springer-Verlag Berlin Heidelberg,
2008.
[7] M. Schraefel and D. Karger. The Pathetic Fallacy of
RDF. 2006. http://swui.semanticweb.org/swui06/papers/
Karger/Pathetic Fallacy.html.

Related work

We are not aware of any other RDF visualizer that handles reifications in a special way. As we have already mentioned, any reification can be viewed as if it was simply a
normal part of the data, as it is exactly the way it is represented.
The tooltip proposed in the section 3.1 works only thanks
to the node merging technique. If node merging was incorporated into another visualizer (which is usually possible) it
would work just as well.
The “special views” used throughout the previous section can be used even without node merging – it would display less information, but would be easier as it could be

291

