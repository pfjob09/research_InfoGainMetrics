2009 13th International Conference Information Visualisation

Document Visualization Based on Semantic Graphs
Delia Rusu, Blaž Fortuna, Dunja Mladenić, Marko Grobelnik, Ruben Sipoš
Jožef Stefan Institute, Ljubljana, Slovenia
{delia.rusu, blaz.fortuna, dunja.mladenic, marko.grobelnik, ruben.sipos}@ijs.si
corresponding WordNet [3] synset. Finally, the
semantic graph is built by merging the enhanced
triplets. Moreover, this semantic representation is not
only useful for visualizing the document, but it also
plays an important part in deriving the document
summary. This is obtained by classifying sentences
from the initial text, where the features are extracted
from the document and its semantic graph.
There are several tools dedicated to document
corpus visualization, which are helpful in data analysis;
either based solely on the text of the documents in the
corpus [4], or ontology-based, taking advantage of, for
example, an ontology representing the users'
knowledge or interests [11]. While these approaches
explore and analyze a collection of documents as a
whole, providing the overall picture of the text corpus,
we perform a more in depth visual exploration and
analysis of a single document. Moreover, we detail the
main facts and connect them in a semantic structure, as
well as provide a visual description for the document
summary.
Previous work related to visualizing a single
document has focused on highlighting named entities,
facts and events in the given text, or on using the
human created structure in lexical databases for
revealing concepts within a document. Our purpose is
to further analyze the concepts in a text fragment,
determine the connections among them and visually
represent this in the form of a semantic graph, either of
the entire document or of its summary.
The Calais Document Viewer (Calais url:
http://www.opencalais.com/)
creates
semantic
metadata for user submitted text, in the form of named
entities, facts and events, which are highlighted and
navigable; the RDF output can also be viewed and
captured for analysis in other tools. DocuBurst [1]
presents the concepts within a document in a radial,
space filling tree structure, using WordNet’s IS-A
hyponymy relationship. In the case of our system,
named entities and facts or concepts represent the
starting point; they are further refined in order to
enable the construction of a semantic description of the
document in the form of a semantic directed graph.

Abstract
In this paper, we present a document visualization
technique for data analysis based on the semantic
representation of text in the form of a directed graph,
referred to as semantic graph. It is derived using
natural language processing as follows. Firstly subject
– verb – object triplets are automatically extracted
from the Penn Treebank parse tree obtained for each
sentence in the document. Secondly, the triplets are
further enhanced by linking them to their
corresponding co-referenced named entity, by
resolving pronominal anaphors as well as attaching
the associated WordNet synset. Starting from the
document's semantic graph and the list of extracted
triplets we automatically generate the document
summary, for which we also derive the semantic
representation.

1. Introduction
Providing structured and synthesized information
has become increasingly important. In addition, data
should also be visualized in a straightforward manner
that would ease and speed up its readability. When
finding a certain piece of information, in the form of a
document, the goal is to readily scan through the text,
obtain the general outlined idea, the main facts and a
document summary. Document visual exploration and
analysis allows users to get an overview of the
document, without entirely reading it.
As a response to this challenge, we present a
document visualization technique based on semantic
graphs derived from subject – verb – object triplets.
This technique can be applied for providing documents
and their associated summary with a graphical
description. The triplets are automatically extracted
from the Penn Treebank [8] parse tree which was
generated for each sentence in the document. They are
further processed by assigning their co-referenced
named entity, by solving pronominal anaphors for a
subset of pronouns and by attaching their

978-0-7695-3733-7/09 $25.00 © 2009 IEEE
DOI 10.1109/IV.2009.57

292

The nodes are the subject and object triplet elements,
and the link between them is determined by the verb.
The initial document, its associated facts and semantic
graph are then employed to automatically generate a
summary, which can also be visualized in the form of a
graph.
The paper is organized as follows. We start with
an overview of the document visualization process in
section 2, continuing with a description of semantic
graphs in part 3, the document summaries in section 4,
and an illustrative example in part 5. The paper
concludes with several remarks.

2. Document Visualization
The document visualization process (see Figure 1)
starts with the original document, which is further
processed and refined in order to obtain the set of
subject – verb – object triplets as well as its associated
semantic graph. Next, the triplets and the document
semantic representation serve as input for the
document summarizer, which automatically generates
a summary of sentences from the text. This summary
can also be visualized in the same way as the original
document, by associating it with a semantic
description.

Figure 1. The document visualization process.
•

3. Semantic Graphs

Named entity extraction, followed by named entity
co-reference resolution;
• Triplet extraction based on a Penn Treebank
parser;
• Triplet enhancement by solving pronominal
anaphors and assigning for each triplet its
WordNet synset;
• Triplet merger into a semantic graph of the
document.
In what follows, we are going to further detail the
aforementioned pipeline components as proposed in
[10].

The semantic graph corresponds to a visual
representation of a document’s semantic structure. As
proposed in [5] a document can be described by its
associated semantic graph, thus providing an overview
of its content. The graph is obtained after processing
the input document and passing it through a series of
sequential operations composing a pipeline (see Figure
2):
• Text pre-processing: splitting the original
document into sentences;

293

Figure 3. A document excerpt with two
annotated named entities (an organization and
a person).

3.2. Triplet Extraction
We envisage the “core” of a sentence as a triplet
consisting of the subject, verb and object elements and
assume that it contains enough information to express
the message of a sentence. The usefulness of triplets
resides in the fact that it is much easier to process them
instead of dealing with very complex sentences as a
whole.
Figure 2. The semantic graph generation
pipeline.

3.1. Named Entity Extraction
The term named entities refers to names of people,
locations or organizations, yielding semantic
information from the input text. For named entity
recognition we consider GATE (General Architecture
for Text Engineering, url: http://gate.ac.uk/), which
was used as a toolkit for natural language processing.
For people we also store their gender, whereas for
locations we differentiate between names of cities and
of countries, respectively. This enables co-reference
resolution, which implies identifying terms that refer to
the same entity. It is achieved through consolidating
named entities, using text analysis and matching
methods. We match entities where one surface form is
completely included in the other (for example Chief
Executive Donahoe and Chief Executive John
Donahoe), one surface form is the abbreviation of the
other (for example ISWC and International Semantic
Web Conference), or there is a combination of the two
situations described above (for example J. Donahoe
and John Donahoe).
Figure 3 represents an excerpt of a document with
two annotated named entities and their corresponding
co-reference (we eliminate stop words when resolving
co-references – for example in the case of EBay Inc,
Inc will be eliminated, as it is a stop word).
We highlight the named entities found within the
document, distinguishing between the three different
entity types: people, locations and organizations, as
described in Figure 3.

Figure 4. A triplet (EBay – pushed – PayPal
unit) extracted from the sentence “EBay
pushed its fast-growing PayPal unit into the
spotlight, saying it expects that business to
double by 2011.”.
Triplets are extracted from each sentence
independently, without taking text outside of the
sentence into account. We apply the algorithm for
obtaining triplets from a Penn Treebank parser output
described in [9], and employ the statistical Stanford
Parser
(url:
http://nlp.stanford.edu/software/lexparser.shtml). The extraction is performed based on
pure syntactic analysis of sentences. The rules are built
by hand, and use the shape of the parse tree to decide
which triplets to extract.
Figure 4 shows a triplet (EBay – pushed – payPal
unit) extracted from the sentence “EBay pushed its
fast-growing PayPal unit into the spotlight, saying it
expects that business to double by 2011.”. Aside from
the main triplet elements (subject, verb, object), the
image also depicts the object attributes (its, fastgrowing, into the spotlight) – these are the words
which are linked to the object in the parse tree.
As in the case of named entities, triplets are also
highlighted differently, according to the triplet element
type: subject, verb or object. This convention is kept in
the next phase of the pipeline, when building the
semantic graph. Therefore, the triplet elements are
much easier to identify within the graph structure.

294

compared the outcome of our system with two
baselines that considered the closest named entity as a
pronoun replacement: one baseline also took gender
information into account, whereas the other did not.
We obtained good results, particularly in the case of
the masculine pronoun he.

3.3 Triplet Enhancement and Semantic Graph
Generation
The semantic graph is utilized in order to
represent the document’s semantic structure. Our
approach is based on the research presented in [5] and
further developed in [10]. While in [5] semantic graph
generation was relying on the proprietary NLPWin
linguistic tool [2] for deep syntactic analysis and
pronominal reference resolution, we take advantage of
the co-referenced named entities as well as the triplets
extracted from the Penn Treebank parse tree and derive
rules for pronominal anaphora resolution and graph
generation.
Triplets are enhanced by first resolving anaphors
for a subset of pronouns: {I, he, she, it, they}, and their
objective, reflexive and possessive forms, as well as
the relative pronoun who. For solving this task, triplets
are linked to their corresponding co-referenced named
entity (if there exists one). In the previous example, the
subject element (EBay) would be linked to the coreferenced named entity (EBay). Furthermore, we
search throughout the document for possible
candidates to replace the pronoun. The candidates
receive scores, based on a series of antecedent
indicators (or preferences) [10]: givenness, lexical
reiteration, referential distance, indicating verbs and
collocation pattern preference.
Secondly, triplets are assigned their corresponding
WordNet synset. This is a mandatory step preceding
the semantic graph generation, as it enables us to
merge triplet elements which belong to the same
WordNet synset, and thus share a similar meaning.
Hence we augment the compactness of the graphical
representation, and enable various triplets to be linked
based on a synonymy relationship. We obtain a
directed semantic graph, the direction being from the
subject node to the object node, and the connecting
link is represented by the verb.
Figure 5 presents a semantic sub-graph of a text
excerpt. Semantic graph visualization was achieved
through adapting the Prefuse (url: http://prefuse.org/)
visualization toolkit in a Java applet embedded in the
web page. The graph layout is a dynamic forcedirected one, yielding a spring graph, scalable to
several hundred nodes.
The
semantic
graph
generation
system
components were evaluated by comparing their output
with the one of similar systems [10]. The evaluation
was performed on a subset of the Reuters RCV1 [6]
data set. For co-reference resolution, the comparison
was made with GATE’s co-reference resolver; our coreference module performed about 13% better than
GATE. In the case of anaphora resolution, we

Figure 5. A semantic sub-graph of a text
excerpt.

4. Document Summaries
The document summary is a means of retrieving a
more synthetic text by extracting sentences from the
original document. This is automatically obtained
starting from the initial document and its
corresponding semantic representation. The technique
involves training a linear support vector machine
(SVM) classifier to determine those triplets that are
useful for extracting sentences which will later
compose the summary. The features employed for
learning are represented by linguistic, document and
graph attributes associated with the triplet elements
[10]. There are 69 features distributed among the triplet
elements: 26 for the subject, 11 for the verb, 26 for the
object, and 6 sentence attributes (associated to the
sentence that generated the triplet). The summarization
process, described in Figure 6, starts with the original
document and its semantic graph. The three types of
features abovementioned are then retrieved. Further,
the sentences are classified with the linear SVM, thus
obtaining the document summary. Its sentences are
labelled with SVM scores; they are ordered
decreasingly, based on the score they received.

295

score. In order to keep the summary readable, we
maintain the same sentence ordering that appears in the
original text.
For the evaluation of the document summary, we
utilize
the
DUC
(Document
Understanding
Conferences, url: http://duc.nist.gov/) datasets from
2002 and 2007, respectively, and compare the results
with the ones obtained in the 2007 update task [10].
We used an automatic summarization evaluation
package called ROUGE (Recall-Oriented Understudy
for
Gisting
Evaluation,
url:
http://haydn.isi.edu/ROUGE/latest.html); our system
performance is comparable to other summarization
systems, for example, that generate compressed
versions of source sentences as summary candidates
and use weighted features of these candidates to
construct summaries [7], or that learn a log-linear
sentence ranking model by maximizing three metrics
of sentence goodness [12].

Figure 6. The summarization process.
The summary length can be manually adjusted by
the user, for an enhanced visual analysis. As sentences
have an associated SVM score, the summary will be
composed of those sentences that received the highest

Figure 7. The semantic graph (main connected components) obtained for a news article.
9634,00.html, 17.04.2009), describing how a
programmer called Ioan Ghip devised a high-tech cat
flap for preventing his neighbours’ cats from stealing
his kitties’ food.
We show the main connected components of the
semantic graph generated for the above article in
Figure 7, as well as a six sentence long document

5. Semantic Graph and Document
Summary Illustration
In order to illustrate the methodology that we have
presented, we chose a news article entitled
“Programmer Builds Twitter-Enabled Cat Flap” (url:
http://www.spiegel.de/international/zeitgeist/0,1518,61

296

summary for the same article (where the original
article contains 26 sentences), in Figure 8.

7. References
[1] C.
Collins,
“DocuBurst:
Document
Content
Visualization Using Language Structure”, Proceedings
of IEEE Symposium on Information Visualization,
Poster Session, Baltimore, 2006.
[2] S. H. Corston-Oliver and B. Dolan, “Less is more:
eliminating index terms from subordinate clauses”,
Proceedings of the 37th Conference on Association for
Computational Linguistics, College Park, Maryland,
1999.
[3] Ch. Fellbaum, WordNet: An Electronic Lexical
Database, MIT Press, 1998.
[4] B. Fortuna, M. Grobelnik and D. Mladenić,
“Visualization of Text Document Corpus”. Informatica
Journal 29, 2005, pp. 270-277.
[5] J. Leskovec, M. Grobelnik and N. Milic-Frayling,
“Learning Sub-structures of Document Semantic Graphs
for Document Summarization”, KDD 2004 Workshop
on Link Analysis and Group Detection (LinkKDD),
Seattle. 2004.
[6] D. D. Lewis, Y. Yang, T. G. Rose and F. Li, “RCV1: A
New Benchmark Collection for Text Categorization
Research”, Journal of Machine Learning Research,
2004, Vol. 5.
[7] N. Madnani, D. Zajic, B. Dorr, N. F. Ayan and J. Lin,
“Multiple Alternative Sentence Compressions for
Automatic Text Summarization”, Proceedings of the
Document Understanding Conference (DUC), 2007.
[8] M. P. Marcus, B. Santorini and M. A. Marcinkiewicz,
“Building a large annotated corpus of English: the Penn
Treebank”, Computational Linguistics, 1993, Vol. 19.
[9] D. Rusu, L. Dali, B. Fortuna, M. Grobelnik and D.
Mladenić, “Triplet Extraction from Sentences”,
Proceedings of the 10th International Multiconference
"Information Society - IS 2007", Ljubljana, 2007, Vol.
A, pp. 218 - 222.
[10] D. Rusu, B. Fortuna, M. Grobelnik and D. Mladenić,
“Semantic Graphs Derived From Triplets with
Application in Document Summarization”, Informatica
Journal, 2009.
[11] V. Thai, S. Handschuh, and S. Decker, “IVEA: An
information visualization tool for personalized
exploratory document collection analysis”, Proceedings
of the European Semantic Web Conference (ESWC),
2008, pp. 139-153.

As Ghip told SPIEGEL ONLINE, it all started when he
was confronted with a few small, practical problems.
So Ghip put a cat door on the people door and solved
his first problem.
The second problem arose when Ghip figured out
that the neighbors' cats were sliding in and out of the
cat door for free meals because, as he says on his
Web site, they "learned that the food my wife buys is
better than what they get from (their own) owners).“
A servo is a small mechanical devise that accepts
signals and is commonly found in radio-controlled
airplanes, puppets and robots.
The RFID reader sends a message to the laptop and
the software on the laptop then sends a message to
the servo controller, which then tells the servo
whether or not to open the door using power from
the USB connection to the computer.
"Anyone with some tools and time on their hands can
do it," Ghip told SPIEGEL ONLINE.
Figure 8. A six sentence long document
summary for a news article.

6. Conclusions
In this paper we presented a document
visualization technique based on semantic graphs. We
showed that this technique can be applied not only to
the original document, but also to its automatically
generated summary. Each of the system components
were detailed, starting with the semantic graph
generation pipeline composed of named entity
recognition, triplet extraction and enhancement and
semantic graph construction, and concluding with the
document summarization process.
Regarding future improvements, we aim at
extending the system by adding several components
such as another named entity recognizer module, and a
new triplet extraction module. To further refine the
document overview through semantic graphs and
summaries, we intend to integrate external resources
that would enhance the semantic representation, as
well as the document summary.
Based on the feedback obtained from several users
we can conclude that the presented document
visualization using semantic graphs is promising and
can be helpful for the user. However, more
experiments evaluating the usefulness of the proposed
visualization approach are needed for firm conclusions.

[12] K. Toutanova, C. Brockett, M. Gamon, J. Jagarlamudi,
H. Suzuki and L. Vanderwende, “The PYTHY
Summarization System: Microsoft Research at DUC
2007”, Proceedings of the Document Understanding
Conference (DUC), 2007.

297

