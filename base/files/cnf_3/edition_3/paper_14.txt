2009 13th International Conference Information Visualisation

A Linking Mechanism to Integrate Components of a Visualization Framework
Mustafa Sanver
New York Institute of Technology-AD
P.O.Box 5464
Abu Dhabi, UAE
msanver@nyit.edu

Abstract

hardware. Coupling and interaction of all these components
are model specific. Therefore, the frameworks differ from
each other based on which and how the components are integrated. Also, not all of them are extensible and scalable
for large data visualization. There are frameworks as readyto-use packages, reusable code and modules, plug-in environments, or hybrid of later two. One common feature is
that all of them embed different numbers of visualization
techniques.

Visual analysis and exploration of data has been extensively studied in various fields. As the amount of data increases, we need scalable and efficient visualization tools
integrated with cross-discipline elements to explore and
overcome the issues exposed by the large data sets. In this
paper, we present our dynamic linking mechanism to create a visualization framework (mVis, multi-visualizer for
multi-dimensional data) for visual exploration of large relational data sets. It is an extendable, flexible, and easy-touse environment. The linking mechanism links co-operating
components and data-connected interactive visualizers to
the framework. It constitutes object- and event-linkers
which are identified by their names so that new external
components can subscribe to any linker group easily without compiling the framework.

Most of the frameworks are data or visualization incompatible. That is, a lot of preprocessing or code modification
is required to flow a new data structure or visualization technique into the available framework. Thus, the compatibility
and standardization of interfaces for integration of the components and their presentation in analytical tools is a must.
mVis (available at http://www.cs.wmich.edu/∼mvis)
is a visualization framework that follows the dataflow
paradigm [5] as many other counterparts and its descendent
of n23Tool [21, 22]. In the design of our framework, we
prioritize the simplicity and flexibility of both the development of visualizer techniques and the integration of external
modules, libraries, algorithms, and other components. Our
intention is to reduce the time spend in programming and integration while pointing out the need for compatibility and
standardization of new components introduced to the visualization. The framework introduces a simple, event-driven
link manager to link and share objects between the components of the architecture. Thus, for example, visualizers
share their events and attributes in their drawing space with
other visualizers. We had implemented the grand tour[3]
functions and an interface for dynamic queries [2] which are
all available to dynamic linking from other elements once
they are loaded to the system. Finally, mVis constitutes an
easy-to-use customized GUI development toolbox.

1. Introduction
Visualization and its applications have become ubiquitous from scientific analysis, homeland security, to desktop
applications. Since last few decades, while the speed and
the capacity of computing hardware have been increased
steadfast, the amount of data to process and the eager to
reveal hidden information from it have also been accelerated enormously. As a consequence, interdisciplinary corporation to model large quantities and unstructured data has
become indispensable. Visual analytic and exploration to
reveal the unseen and guide the decision makers has landed
itself to a large application domain. Many visualization
techniques have been developed or existing ones have been
tailored for adapting to the changes of the Internet and information era.
There are many frameworks and taxonomies proposed
for visualization and interactive exploration of data. Generally, major components of the models are: abstract data,
visualizers, interaction operators, views, the user, and the
978-0-7695-3733-7/09 $25.00 © 2009 IEEE
DOI 10.1109/IV.2009.39

Li Yang
Western Michigan University
4601 Campus Drive
Kalamazoo, MI, 49008, USA
li.yang@wmich.edu

In the remainder of the paper, we will introduce the components of mVis (Section 3) and the details of the linking
mechanism (Section 4), after presenting the related work in
Section 2.
92

2. Related Work

mechanism maps abstract data to visualizable units while
actions manipulate data and set visual properties. In addition, event logging and animation actions are some other
embedded features.
These frameworks and others referenced in aforementioned papers present good abstractions to data and GUI interfaces with encapsulated code, and reusable programming
units. Ideally, the visualization community, can generate
and integrate analytical tools and libraries to fulfill the requirements and issues of the visualization and data analysis
tasks by harnessing existing tools, code, and libraries. So,
setting standards for compatibility is mandatory for developing effective visualization and visual analytic tools.

There are various visualization frameworks with different taxonomies used. Shneiderman [16] presents seven data
types and seven user tasks (task-by-data taxonomy) that the
designers/developers of advanced graphical user interfaces
should consider. The process of building a visualization has
been discussed in a variety of ways by the research community [14, 18, 11, 16]. Also various issues in designing
visualization architectures are discussed by Tang et al. [18].
Each visualizer framework identifies the system components and defines inter-component relations differently.
For years, research in the field have focused on user interactions, data integration and transformation, view linking, attribute mapping, and integration of tasks and algorithms (sorting, classification, filtering) to built systems.
Chi et al. [10] introduced reusable view and value operators (user interactions) to understand the interaction between data and view. They proposed a state model to identify and classify interactive and non-interactive operators.
In [12], Kreuseler et al. proposed preprocessing pipeline to
identify the structures from unstructured data using information objects which are grouped by a similarity measure
and presented by self organizing maps and dynamic hierarchy manipulations.
In re-View toolkit [23], the authors introduced two new
interactions techniques to address the “Extract and Relates
Tasks” of the task-by-data taxonomy [16]: bookmarking
and coordinated filtering. In their 3−tier architecture, a
view coordinator and a meta-data repository interchange information about the bookmarked view (dataset and view parameters). XmdvTool [19, 13] and Spotfire [1] are readyto-use, tightly linked, and interaction- and brushing-reach
software. XmdvTool provides density-based visualizers
based on cluster hierarchies, brushing and filtering.
Polaris of Stolte et al. [17], a data exploration system
for large multidimensional relational databases, is based on
Pivot Table interface and constructs visual specifications to
describe table-based graphical views and generate relational
queries. It is worth to mentioning that its design trivially
supports undo-redo operations. The InfoVis toolkit [7] is
composed of existing visualizer implementations with variety of interactions: range-sliders, control panels, fisheye
lenses, dynamic deformation techniques, dynamic labeling,
and dynamic queries. It is for structured data and supports
graphs, trees, and tables. VTK [15] is a comprehensive
toolkit for 3D graphics based on the dataflow model [5].
It contains an interpreted application layer which complies
with the Tang’s sixth issue [18]. Prefuse [9] provides set of
reusable components to design/built dynamic 2D visualizations for data with discrete structures. Its library repository
contains layout algorithms, navigation and integration techniques, and an integrated search engine. A scalable filtering

3. mVis Framework
mVis is a framework which is based on the dataflow
model and is extensible by plug-ins. We identify the following issues in development of visualization techniques and
frameworks in general:
• interface incompatibility between data, visualizers,
and other components
• redundant code segments
• irreconcilability because of the various programming
environments
• long learning curve for modification and adaptation of
code.
All of these issues are closely related to each other yet solutions to these issues are not straightforward. As a starting point, the visualization community may set meticulous
standards and abstracts for interfaces, inter-operability, and
reusability of code among different environments. We have
centered our framework around these issues particularly
simplification of integration and development of new interfaces for different data sources and visualization techniques.
Addressing the irreconcilability issue is not easy as there
exist so many different programming tools and libraries.
However, separation of environment dependent code from
visualization related code can be achieved through abstraction. Thus, incorporation of various elements from one environment to another requires less work. mVis provides a
mechanism to support multiple-view similar to the models
described in [4] and [23]. Additionally, we have focused
on reducing the time spent in integration by providing interfaces and abstract layers for data sources, visualizers, algorithms, and renderers. Figure 1 shows the building blocks
of the framework.
mVis is an object oriented software written in C++.
OpenGL and Gtk+ libraries are base libraries for rendering and GUI development, respectively. The components

93

Figure 1. Components of mVis Framework
of the framework are data manager and drivers; linker objects, loadable modules (data drivers, visualizers, clustering
drivers), visualizers, and interactions. To create reusable
and dynamic components, we applied different design patterns to build the framework (see [20] for detail and further
references). Some of the design patterns are factory method
for the library manager to load and access to dynamic libraries; singleton model for clustering and data drivers to
create a single instance of each; facade pattern for the visualizer manager to activate, refresh, and switch the visualizers; observer, which is a behavioral pattern, for the link
manager’s linker objects. There is a correspondence between our design patterns and some of patterns mentioned
by Heer at el [8] such as the Reference Model pattern, the
Renderer pattern, and the Dynamic Query Binding pattern.
During the design and implementation of mVis, we consider its scalability to visualization of large data sets. Therefore, unnecessary object allocation and deallocation is reduced. Thus, the performance of CPU-intensive visualization process is balanced with the object-oriented programming to scale the framework to large quantities of data in
comparison to some of its counterparts mentioned before.
Due to the space constraint, only the details of the linking
mechanism of mVis is presented below.

(Figure 2(a)). This component is not shown in Figure 1 because it is fully coupled with not all but most of the other
components. The mechanism to link multi-views in mVis
is simpler than the coordination model [4] which uses the
Observer and Intercom design patterns [20].
A component that shares some of its inner constructs or
uses available shares from others through the linking process is called a participant. In order to develop a participant
for mVis, the participant’s code must be derived from the
base class mvis linker and must implement registerLinkingVars() member function.
There are three main linking operations: registering a
linker, joining to a linker group, and synchronizing a linker
group. A linker or linking variable is a variable which
represents one of linking related units of a participant. A
linker can be either an object-linker or an event-linker. An
object-linker is for sharing a class member of an intrinsic
type (int, long, float, double, character/string etc.) or userdefined type. To create an object linker for a user-defined
class, the class must be a subclass of mvis linkingVariable
abstract class and must implement its only member function copy(const void* pRHS) where the pRHS is a source
variable of the same type to copy its content to the current
object (similar to assignment operator overloading). An
event-linker is a linking variable to anticipate for changes
or events of participants. Participants with event linkers must implement abstract member function onLinkingVarChange(pLinkerName). This method is triggered when
a member function executes or value of an object linker
changes. The linking operations and steps of the linking
process are explained below.

4. Linking and Link Manager
Linking in mVis is the mechanism to share and coordinate the attributes, events, objects of the components of
the architecture. It is a simple, event-driven link management as described in this section. The link manager (LM )
performs the coordination and creation of linking. It is the
controller of the inter-component communication in mVis

• Registration: A participant (such as a visualizer, an interface object, other loaded modules) defines its linkers

94

(a) Linking of mVis Components

(b) GUI for the Link Manager

Figure 2. Linking Mechanism
in its registerLinkingVars() member function. Objector event-linkers are registered to the LM when an instance of it is created. During the registration, the LM
creates internal constructs for each linker. The definition of a linker includes a unique name, type (object
or event), status (readable, writable, or both), direction
(ability to update other linkers or not), and visibility
to the user at run time for manual linking/unlinking
through the user interface (see Figure 2(b)).

As shown in Figure 2(b), the LM’s GUI displays names
of the existing groups and their current linkers. Since the
names are used to identify the linking elements, developers
can create new components with their linkers (visualizers,
algorithms etc.) and join the linker groups of the components integrated before. Thus, features and methods of any
dynamically plugged-in component of mVis through binary libraries (without available source code) will be available. The GUI also provides linker subscription and unsubscription in addition to modification of properties of linkers
in run-time.

• Group Subscription: A linker will be subscribed to one
or more linker groups by the participant. The name
of the group for subscription must be provided. Like
linkers, linker groups are identified by a unique name.
The linker groups are created and deleted automatically and managed by the LM. A new group will be
created when the first linker tries to join it. Thus, the
participant which initiates the creation of a group becomes the owner and sets the group properties. Such
as, a linker group can be set to invisible to the rest of
the world at run-time. Therefore, only the participants
by the same programmer who knows the name of the
linker group can subscribe to this group. Therefore, the
linking mechanism provides private linking groups to
the developers. When the last linker is removed from
a group, the group will be deleted by the manager.

Linking has following additional advantages. First,
its usage and implementation are straightforward with the
aforementioned base classes. Second, it virtually shares any
object and variable without consuming memory resources
for storing extra copy. Third, development and integration of extensions is effortless because linkers and linker
groups are referenced by name. Developers of new loadable modules may join their linkers to the existing linker
groups simply by using the names of the groups. Another
advantage is that through the LM, default visible linkers can
be re-grouped, un-linked, or re-linked manually in run-time
as needed. Such dynamic management capabilities are especially useful when the number of components is large.
Finally, particularly visualization techniques benefit from
unique features and methods of other visualizations without
much integration effort.

• Synchronization: For updating the value of the objectlinkers or signaling the event-linkers of a linker group,
the participant (source) triggers the LM for propagating the change to all other participants (target) after
it changes its linker. The LM updates the content
of object-linkers and executes the callback of eventlinkers based on the restrictions and properties of the
linkers and the groups under consideration. For example, if a target participant registers a read-only linker,
then the LM will not update its content. This process
is called synchronization of linkers.

As an example from mVis, two views of a data set by
scatterplot and footprint splatting are depicted in Figure 3.
These visualizations share rotation (Rx , Ry , Rz ) and translation (Tx , Ty , Tz ) in 3D through the object-linkers registered and joined the appropriate linker groups. mVis also
uses event-linkers. We integrated the grand-tour from the
implementation of Cook et al [6] into mVis. Grand tour
projections produced by projection pursuit can be rendered
with smooth transition from one to another. Visualizations
(i.e. footprint splatting) can be linked with grand-tour to

95

(a) Scatterplot

(b) Footprint splatting

Figure 3. Visualizations linked by rotation (Rx , Ry , Rz ) and translation (Tx , Ty , Tz )

References

create animated projections to display different aspects of
the data. This illusion is created by moving from a source
projection to a destination projection along a geodesic path
with interpolated transit visualizations (steps). The grand
tour manager of mVis registers an object-linker to share
the projection matrix and event-linkers to share the before-,
during-, and after-tour events of each tour steps with visualizers.

[1] C. Ahlberg. Spotfire: an information exploration environment. SIGMOD Rec., 25(4):25–29, 1996.
[2] C. Ahlberg, C. Williamson, and B. Shneiderman. Dynamic
queries for information exploration: an implementation and
evaluation. In Proc. SIGCHI Conf. Human Factors in Computing Systems (CHI’92), pages 619–626, 1992.
[3] D. Asimov. The grand tour: A tool for viewing multidimensional data. SIAM Journal of Scientific and Statistical
Computing, 6(1):128–143, Jan. 1985.
[4] N. Boukhelifa and P. J. Rodgers. A model and software system for coordinated and multiple views in exploratory visualization. Information Visualization, 2(4):258–269, 2003.
[5] E. H. Chi. Expressiveness of the data flow and data state
models in visualization systems. In Proc. Advanced Visual
Interfaces Conference, pages 375–378, 2002.
[6] D. Cook, A. Buja, and J. Cabrera. Grand tour and projection pursuit. J. Computational and Graphical Statistics,
4(3):155–172, 1995.
[7] J.-D. Fekete. The infovis toolkit. In Proc. IEEE Symposium on Information Visualization (INFOVIS’04), pages
167–174, 2004.
[8] J. Heer and M. Agrawala. Software design patterns for information visualization. IEEE Trans. Visualization and Computer Graphics (TVCG), 12(5), Sept.-Oct. 2006.
[9] J. Heer, S. K. Card, and J. A. Landay. prefuse: a toolkit for
interactive information visualization. In Proc. SIGCHI Conf.
Human Factors in Computing Systems (CHI’05), pages
421–430, 2005.
[10] E. H. hsin Chi and J. Riedl. An operator interaction framework for visualization systems. In Proc. IEEE Symposium
on Information Visualization (INFOVIS’98), pages 63–70,
1998.
[11] J. B. Kennedy, K. J. Mitchell, and P. J. Barclay. A framework
for information visualisation. SIGMOD Rec., 25(4):30–34,
1996.

A drawback of the linking system is that it is only backward compatible. Components developed and integrated to
the system cannot link to new linkers introduced later by
other components. To use the new linkers, previous components’ code needs to be updated tediously. Nevertheless,
this limitation leaves out only third party components incorporated to the system which are not open source.

5. Conclusion
In this paper, we introduced a linking mechanism which
integrates system components of the mVis visualization environment. The contribution of the framework is to provide an extendable, flexible, and easy-to-use visualization
environment. The linker objects (object- and event-linker)
accessible by unique names provides an efficient way to
achieve compatible and extendable components development (data drivers, clustering, etc.) for visualization. The
design and integrated components of the framework shorten
the time for the visualizer and GUI development through the
provided GUI toolbox and classes. We hope that our work
encourages the visualization and the visual analytic communities to produce mVis-compatible components to make
their work available to others.

96

[12] M. Kreuseler, N. Lopez, and H. Schumann. A scalable
framework for information visualization. In Proc. IEEE
Symposium Information Visualization (INFOVIS’00), pages
27–36, 2000.
[13] M. O. W. Nishant K. Mehta, Elke A. Rundensteiner. A
hierarchy navigation framework: Supporting scalable interactive exploration over large databases. In Ninth Inter. Database Engineering and Applications Symposium
(IDEAS’05), pages 425–434, July 2005.
[14] D. Pfitzner, V. Hobbs, and D. Powers. A unified taxonomic
framework for information visualization. In Proc. AsiaPacific Symposium on Information visualisation (APVis’03),
pages 57–66, 2003.
[15] W. J. Schroeder, K. M. Martin, and W. E. Lorensen. The design and implementation of an object-oriented toolkit for 3D
graphics and visualization. In Proc. 7th Conf. Visualization
(VIS’96), pages 93–100, 1996.
[16] B. Shneiderman. The eyes have it: A task by data type taxonomy for information visualizations. In IEEE Symposium
on Visual Languages, pages 336–343, 1996.
[17] C. Stolte and P. Hanrahan. Polaris: A system for query,
analysis and visualization of multi-dimensional relational
databases. In Proc. IEEE Symp. Information Visualization
(InfoViz), page 5, 2000.
[18] D. Tang, C. Stolte, and R. Bosch.
Design choices
when architecting visualizations. Information Visualization,
3(2):65–79, 2004.
[19] M. O. Ward, E. A. Rundensteiner, J. Yang, P. R. Doshi, and
G. Rosario. Interactive poster: Xmdvtool: Interactive visual
data exploration system for high-dimensional data sets. In
Proc. IEEE Symp. Information Visualization (InfoViz), pages
52–53, July 2002.
[20] WIKIPEDIA.
Design
pattern
(computer
science).
Last Accessed on Dec. 2008.
http://en.wikipedia.org/wiki/Design pattern (computer science).
[21] L. Yang. n23Tool: A tool for exploring large relational data
sets through 3D dynamic projections. In Proc. 9th Inter.
Conf. Information and Knowledge Management (CIKM’00),
pages 322–327, Washington, DC, Nov. 2000.
[22] L. Yang. Visual exploration of large relational datasets
through 3D projections and footprint splatting. IEEE Trans.
Knowledge and Data Engineering, 15(6):1460–1471, Nov.Dec. 2003.
[23] R. C. Yates and J. L. Wesson. re-View: an IV toolkit for extracting and relating dynamic views. In Proc. 2006 Conf. the
South African Institute of Computer Scientists and Information Technologists on IT Research in Developing Countries
(SAICSIT’06), pages 41–50, 2006.

97

