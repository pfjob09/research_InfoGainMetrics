2009 13th International Conference Information Visualisation

Generating Abstract Networks Using Multi-Relational Biological Data
Paul Caravelli+ , Mitch Beard+ , Brian Gopolan+ , Lisa Singh+ , Zhang-Zhi Hu∗
Department of Computer Science+ , Department of Oncology ∗
Georgetown University
Washington, DC 20057
{prc8, msb7, bg227, los4, zh9}@georgetown.edu
Abstract

ferent subsets of the original network data and composite
edges representing common properties between composite
nodes. We choose an abstract graph representation because
it is straightforward to interpret and can be used to visually
simplify complex data. Our overarching goal is to provide
an alternate view of the data that may highlight features that
are less visible when viewing the original network, a relational table, or spreadsheet of data.
A number of tools exist for visual exploration of biological networks [3, 4, 6, 5]. Our first contribution is the
flexible way we allow users to group nodes. Users are able
to highlight any property of the original network, such as
protein functions, protein interactions and regulatory pathways in the protein network, and to explore potential hidden
relations between parts of the biological system that may
provide researchers with suggestions or clues for new biological hypotheses prior to expensive laboratory testing.
Our second contribution is an implementation of our grouping approaches in an interactive visual mining tool. Even
though the tool is not domain specific, we illustrate an interactive analysis in the context of biological data.
The organization of the paper is as follows. We will begin by describing related literature in section 2. We will
then describe the structure of the networks we support in
section 3 and discuss our example data set. Our grouping
and linking approaches are presented in section 4.

This paper presents an approach for visual exploration
of groups in network data. We let users visually cluster
nodes based on common semantic and relational features.
We describe the clusters in the context of multi-relational
protein data. Finally, we illustrate the clusters as composite
nodes using a visual analytic tool and show how to create a
meaningful abstracted protein network by connecting these
composite nodes based on common membership or common
attribute features.

1

Introduction

Modern computing systems are able to generate and
store a staggering amount of information. While simple
graphs and histograms provide some insight, data with a
large number of records or features may still be difficult to
analyze and interpret. Visual mining aims to provide coherent, interactive views of large or complex data sets, allowing for user exploration and more rapid understanding
of data objects and relationships. Visual mining also allows
for a high level of interaction with data and data mining
results, enabling users to quickly move between ’what-if’
scenarios and recursively perform data mining operations
on meaningful subsets of the original data.
In this paper, we present an approach for visually exploring groups in multi-relational data. We provide users
with different ways to aggregate data based on entity attributes, relationships, and network structural properties.
Users can then recursively perform grouping operations and
’drill down’ across multiple dimensions of the data for exploration and hypothesis generation.
Multi-relational data is inherently difficult to visualize.
We choose to model the multi-relational data as a graph or
network containing multiple node types and multiple edge
types. As users group and cluster data, new abstract networks are created with composite nodes representing dif978-0-7695-3733-7/09 $25.00 © 2009 IEEE
DOI 10.1109/IV.2009.73

2

Related Literature

A number of visualization tools exist for exploring biological networks, including Pathway Studio [9] Cytoscape
[5], Osprey [3], ProViz [8], PATIKA [4], and VizAnt [6].
We refer you to Sudermann and Hallet for a detailed comparison of these tools [11]. Our work is not meant to replace
any of these tools. Instead, we are interested in presenting
approaches for more sophisticated grouping of nodes and/or
edges. While composite nodes exist in some of the mentioned tools, the aggregations are based on commonality of
a single feature. Our aggregations are based on any number
331

section begins by describing our network model. We then
motivate our approach for data aggregation using a known
biological network focused on protein related data.

3.1

We are interested in multi-relational data that forms a
’star-like’ relationship. Figure 1 shows an example for biological data. Each node on the outside of the star represents
a multi-valued protein attribute or membership. KEGG,
PID, and Reactom are three different representations of biological pathways; GOslim is a cut-down version of the Gene
Ontology (GO) terms (higher level of terms in the hierarchical structure) in three categories (molecular function, biological process and cellular component). Here, proteins
are considered the center of the star because the abstract
groupings will focus on grouping proteins based on protein
attributes and/or the relationships proteins have to other biological entities, e.g. Reactome and, KEGG pathways, protein functions, etc. We refer to this data model as a multirelational star. The M*3 network model proposed by Singh
et al [10] is a graph-based interpretation of multi-relational
data. A multi-relational star is a special case of an M*3 network where one relation is the center or hub of the star (protein) and edges link nodes in the center of the star to nodes
that are members of relations on the outside of the star (Reactome and KEGG pathways, protein function, etc.).1
More formally, we define our network as G =
(Vhub , V, E), where Vhub is the set of nodes representing
the center of the multi-relational star, V is a set of vertex sets representing the perimeter of the star, and E is a
set of edge sets linking nodes in V to nodes in Vhub . Let
V = {V1 . . . Vn }, where V1 . . . Vn are each a set of vertices
representing a different entity along the star perimeter. For
1 ≤ i ≤ n , let Vi = {v1 . . . vm }, where {v1 . . . vm } ∈ G .
Similarly, let E = {E1 . . . Ep }, where E1 . . . Ep are each a
set of edges. For 1 ≤ j ≤ p , let Ej = {e1 . . . eq }, where
{e1 . . . eq } ∈ G . Each edge set relates two vertex sets
to one another, such that: Ej = {(vx , vy )|vx ∈ Va , vy ∈
Vhub , Va ⊆ V}.
Let each vertex set Vi in V and each edge set Ej in E
contain a set of attributes {a1 . . . ax }, with every vertex in
Vi or edge in Ej containing a value for each ak , for 1 ≤ k ≤
x. Let any attribute ak have possible values {b1 . . . by }. We
refer to this set of possible values as the domain of ak and
denote it as Domain(ak ) = {b1 . . . by }. Consistent with
relational algebra notation, let a particular attribute in set
Vi or Ej be denoted as Vi .k or Ej .k, respectively. Let the
value of a particular attribute ak for a vertex vi or edge ej
be denoted as vi .k = bx or ej .k = bx , respectively, for
1 ≤ x ≤ y.

Figure 1. Multi-relational star with protein hub
and nodes representing multi-valued protein
attributes or memberships.

of semantic features or network properties and each aggregation can be continuously refined to remove or add detail.
The aggregation of vertices and edges is a well known set
of techniques in visual mining, and implementations exist in
a number of mining and visualization systems. Wattenberg
provides a useful description of existing aggregation techniques while presenting a new PivotGraph data roll-up approach [12]. PivotGraph rolls up graph data along two axes,
and then generates links between elements of those two
axes based on relationships between the rolled-up data clusters. Here multivariate graphs include a single vertex type
with several single-valued attributes or discrete categorical
dimensions. In this paper, we investigate multi-valued attributes represented as multiple associative relations.
Treemaps are another technique used for displaying large
amounts of hierarchical data at once, as introduced by Bederson and Shneiderman [2]. Treemaps lay out data in rectangles of size corresponding to a particular attribute in a
fixed space in a visually useful way. While treemaps could
be used in the context of this data set, we use a more standard node, edge visual paradigm that users in the biological
domain are familiar with.

3

Network Model Overview

Background and Motivation

Traditional networks are a succinct and powerful representation for complex biological data. Nodes can be used to
represent any entity or concept, e.g. genes, proteins, pathways, cells, disease, and edges can be used to describe relationships between nodes of the same type, e.g. proteinprotein interactions, or nodes of different types, e.g. between pathways and proteins, or diseases and genes. This

1 While we focus our discussion on a single star, a data set may contain
multiple stars with different hubs.

332

3.2

Data Reduction Using Generalized
Blockmodeling

Given that analysis of a biological network may involve
hundreds or thousands of vertices connected by even greater
numbers of edges, display of all the nodes and edges will be
difficult to analyze visually and therefore, have limited utility. Filtering data based on various attributes or network
structural constraints can be very useful, e.g. find all proteins annotated with a particular GO term or find all proteins with a minimum number of connections in the network. Sometimes, the task is more exploratory and less
targeted. In those cases, it would be useful for the visual
analytic tool to run unsupervised segmentation, grouping or
clustering algorithms.
For our analysis, we use data obtained from the Protein
Information Resource (PIR) at pir.georgetown.edu. Specifically, the biological data set is based on the comparative
organelle proteomic study [7]. This organelle data set contains 3120 human proteins from nine organelles (particular cellular compartments), each having a specific protein
profile (protein composition, or organelle proteome). In
addition to being identified from one or more organelles,
proteins of the data set also have been assigned with large
numbers of attributes that relate to each protein’s biological
properties (protein annotations). The annotations are derived from a number of biological databases such as UniProt
(protein sequence and function), KEGG (biological pathways), PIRSF (protein family), etc. As a result, the data set
has rich biological information and many relationships existing between the proteins, protein groups (family) or concepts (e.g. pathway, GO process). Our goal is to allow for
exploration of novel or promiscuous relations between various biological entities and concepts in the organelle data
set.
Figure 2 is a network with the following types of nodes:
proteins (red), GOslim (blue), KEGG pathway (green), PID
pathway (yellow), and Reactome (pink) pathways. As in
figure 1 proteins are the center of the star. Although some
general information can be gained from the graph as displayed, e.g. a number of proteins show no connections in
the network, the visual complexity is far too high for any
data analysis to be truly meaningful.
A traditional mathematical aggregate abstraction is the
blockmodel or the generalized blockmodel [1]. A blockmodel is a grid that shows the equivalence relationships between every pair of vertices in a graph. We define a generalized semantic blockmodel as a generalized blockmodel
based on graph semantics instead of graph topology. Instead
of using a structural or regular equivalence measure to find
clusters, a semantic blockmodel makes use of a measure
based on attribute values or relationships within a graph.
We believe such an approach could be useful for this pro-

Figure 2. Biological Data Example
tein data set since identifying proteins with common relationships and attributes and attempting to map or infer new
proteins to these groups is a central research goal. Unfortunately, one key problem with the use of generalized
blockmodels emerges when the user works with graph semantics based on either multiple attributes or multi-valued
attributes since creating a block in a blockmodel requires
the rows and columns of the model to be partitioned into
non-overlapping groups. For a multi-valued attribute, a particular vertex may be a member of multiple groupings, violating the stipulations of the standard blockmodel. Therefore, in the next section we describe an unsupervised grouping approach that is similar to large itemset generation in
association rule mining.

4

Semantic Grouping of Multi-relational
Star Graphs

Using attribute information associated with the different nodes and edges in the graph, individual vertices can
be grouped together if they share the same combination of
attribute values. Beginning with the simple case, we can
create groups based on a single attribute. Assume each attribute ak has domain Dk = {k1 , k2 , . . . , kp }, where p is
the number of distinct values in ak . Then each vertex in
Vhub is a member of zero or more groups in Dk .
The definition of a semantic group gk1 based on an attribute value k1 for a given attribute ak is gk1 = {vi |vi.k =
k1 , vi ∈ Vhub } . Creating all possible semantic groupings
for a particular attribute, then, may yield up to p new semantic groups.
Figure 3(a) shows an example of two sets of overlapping
333

semantic groups, one colored in red and the other colored
in blue. The red set of groups is based on vertices in Vhub
having specific values of one attribute. In the figure, there
are three attribute values for the red attribute - A, B, and C.
The nodes in each of those groups represent vertices in Vhub
with the attribute value. For example, all the nodes in group
A have the attribute value A. The blue groups are based on
a second chosen attribute. Similar to the red attribute, the
blue attribute has three distinct values - 1, 2, and 3. Vertices
from Vhub with those attribute values are shown as nodes in
groups 1, 2, and 3.

Figure 4. Composite Nodes for Proteins
Grouped By KEGG Pathway Linked Using GO
Terms to Composite Node Representing Proteins with No KEGG Pathway Information

(a) Semantic Groups

(b)
Composite
Nodes and Edges

task will include the following steps: 1) group proteins by
KEGG pathway information; 2) find semantic relationships
between groups of proteins having KEGG pathway information and proteins that do not; 3) take those proteins that
do not have KEGG pathway information and regroup them
based on semantic groups created using attributes of other
entities along the star (doing so may help identify proteins
that form a new KEGG pathway group); and 4) highlight the
local relationship between pairs of clusters in the context of
protein membership across all clusters.
Figure 4 contains a node for each KEGG pathway. The
size of the node indicates the number of proteins with the
particular KEGG pathway id (i.e. proteins participating in
a pathway). The node in the center of the figure represents
proteins with unknown pathways. We then connected the
’unknown pathway’ composite node to the other composite nodes with abstracted edges representing different GO
terms. Here, an edge between two composite nodes indicates the GO terms that proteins in each composite node
have in common. The color(s) of the edge corresponds to
the term(s) itself. If the user scrolls over the edge, each of
the GO term ids is listed along with the percentage of proteins sharing the term. While we chose to connect all the
pathway composite nodes to the unknown pathway composite node, domain specialists can do this for any targeted subset or focus on links containing certain GO terms. This is
a useful feature because currently e.g. in human, the coverage of protein annotations with GO terms (>80%) is much
higher than those with pathways (<10%); thus inherently,
most proteins with GO term groupings have unknown path-

Figure 3. Example of Semantic Groups

Visually, each group can be represented as a composite
node or a composite edge. For example, we may choose
to visually represent each red attribute value as a composite
node in an abstracted graph, and each of the blue attribute
values as a composite edge that connects composite nodes
having common vertices from Vhub with the same blue attribute value. Figure 3(b) shows an example abstracted
graph for the groups in figure 3(a). The size of each vertex
represents the number of members in the group. The size of
each edge reflects the weight of the link between two vertices. This visual representation of semantic group overlap
allows the user to quickly see group size and membership of
one semantic relationship in the context of common membership based on a second semantic relationship.
Turning to the protein data shown in figure 2, a number of proteins have relationships to some entities, but not
others. For example, a protein may be annotated with
GO terms, but have unknown KEGG pathway information.
While those in bioinformatics have attempted to use traditional data mining and classification algorithms to predict
missing relationships, the incompleteness of the data set reduces the accuracy of traditional classifiers. Therefore, an
interactive user guided approach may lead to insight prior
to expensive laboratory testing. For this study, our analysis
334

Figure 5. Example of Composite Node Linking Based on Overlapping Membership

Figure 6. Composite Nodes for Proteins
Linked Based on Overlapping Membership

Table 1. Data for Example in Figure 5
V

V.a

V.b

V.c

V.d

Groups

v1
v2
v3
v4
v5
v6
v7
v8
v9

1
4
3
3
4
3
5
1
4

4
4
3
2
3
2
1
3
3

3
3
2
2
2
2
1
1
1

1
3
5
4
3
3
2
5
3

1
2
3
3
5
4
0
2
4

posite nodes that are generated. The composite node with
the most members from Vhub (visually shown as the largest
node in the figure) contains hub nodes with a value of 3 for
attribute a and a value of 2 for attribute c.
For analysis task 4, we are interested in identifying common membership across composite nodes. There are a number of ways to accomplish this visually. We do so, by adding
an edge between composite nodes that have the same ’base’
members from Vhub . We then color the edges based on how
’concentrated’ the shared members are to the two composite nodes in question. For example, in figure 5, there are
two composite nodes on the left side. One represents nodes
having attribute values b = 4 and c = 3 (hub nodes v1 , v2 in
this case) , while the other represents nodes having attribute
values a = 4 and d = 3 (hub nodes v2 , v5 , and v9 ) .
Because these two composite nodes contain a common
member (v2 ), an edge is placed between them. The color
of the edge is based on the strength of the common membership. We calculate the strength based on the number of
composite nodes common members appear in. In this case,
the edge is a dark red color because v2 does not exist in any
other composite nodes in the figure, i.e. it has a high shared
membership weight. Lighter edges imply that the members
of the composite nodes that have shared membership, also
have shared membership in other composite nodes, i.e. they
have a lower pairwise shared membership weight. Multicolored edges indicate different weights for different shared
members. To avoid edges with a large number of colors, we
bin the weights into one of three bins based on the shared
membership weights. Due to space limitations, we do not
describe our algorithm.
Returning to our biological example, we group proteins

way groupings in a network display.
For analysis task 3, we are interested in taking the abstracted group containing proteins with missing pathway
information (’unknown pathways’) in the center of figure
4 and breaking it apart based on entities related to the hub
of the network. As an exploratory task, we do not assume
which attribute values may appear frequently, and adopt an
unsupervised algorithm that iteratively identifies proteins
with different combinations of attribute values. The user
must initially identify the attributes of interest. Then composite nodes will be created for groups of attribute values
that appear frequently together.
Suppose a user wants composite nodes based on two attribute values, containing at least two vertices from Vhub .
Table 1 shows a simple example with nine vertices and four
attribute values associated with each vertex. The final column in the table shows the number of composite groups
each vertex is a member of. Figure 5 shows the twelve com335

based on Gene Ontology term, Reactome and PID pathways. We specify groups of size three and a minimum group
membership of eleven proteins. Fifty six composite nodes
were generated. We then took the largest composite node
created based on three GO terms and linked them to the
other generated composite nodes based on shared membership. The results are presented in figure 6. We see that
there are only a handful of composite nodes with strong
shared membership for all the shared members. Because
these are highlighted, researchers can further investigate relationships among these small subsets of proteins. Other
visual layouts can be used to highlight specific nodes, including force directed and radix). While useful for some
analyzes, we found the simple circular layout to be the easiest to interpret.
We pause to mention that all the protein related figures
and grouping algorithms described in this paper are implemented in Invenio, a visual mining tool for multi-relational
data [10]. Figure 7 shows a screenshot of the tool, highlighting various features, including a graph navigator, an attribute detailer, a graph property highlighter, and a toolbox.
For a more detailed discussion of the tool itself, we refer
you to Singh et al [10].

5

Figure 7. Invenio screenshot
[4] E. D. et al. Patika: An integrated visual environment
for collaborative construction and analysis of cellular
pathways. Bioinformatics, 18(7):9961003, 2002.
[5] P. S. et al. Cytoscape: A software environment for integrated models of biomolecular interaction networks.
Genome Research, 13, 2003.
[6] Z. Hu, J. Mellor, J. Wu, and C. DeLisi. Visant: dataintegrating visual framework for biological networks
and modules. Nucleic Acids Research, 33, 2005.

Conclusions

[7] Z. Hu, J. Valencia, H. Huang, A. Chi, J. Shabanowitz,
V. Hearing, E. Appella, and C. Wu. Comparative
bioinformatics analyses and profiling of lysosomerelated organelle proteomes. International Journal of
Mass Spectrum, 259, 2007.

Exploration tasks require a large number of tools. Their
strength is evident when pieces of a complex puzzle begin
to fit together. This paper proposes an iterative grouping approach for multi-relational data that lets users create groups
and break up subgroups for detailed exploration. Groups
are created based on topological graph properties and semantic relationships in the data. Our visual simplification
of complex data gives users the ability to rapidly identify
shared membership across groups and semantic similarity
between data objects, thereby facilitating the understanding
of clusters that exist in the data.

[8] F. Iragne, M. Nikolski, B. Mathieu, D. Auber, and
D. Sherman. Proviz: protein interaction visualization
and exploration. Bioinformatics, 21(2), 2005.
[9] A. Nikitin, S. Egorov, N. Daraselia, and I. Mazo. Pathway studio - the analysis and navigation of molecular
networks. Bioinformatics, 19(16), 2003.

References

[10] L. Singh, M. Beard, L. Getoor, and M. B. Blake. Visual mining of multi-modal social networks at different abstraction levels. In Proceedings of the 11th International Conference Information Visualization, pages
672–679, 2007.

[1] V. Batagelj and A. Mrvar. Pajek – program for large
network analysis. Connections, 21:47–57, 1998.

[11] M. Sudermann and M. Hallet. Tools for visually exploring biological networks. BMC Bioinformatics,
23(20):2651–2659, 2007.

[2] B. Bederson, B. Shneiderman, and M. Wattenberg.
Ordered and quantum treemaps: Making effective use
of 2d space to display hierarchies. ACM Transactions
on Graphics, 21(4):833–854, 2002.

[12] M. Wattenberg. Visual exploration of multivariate
graphs. In Proceedings of the SIGCHI conference on
Human Factors in computing systems, pages 811–819,
2006.

[3] B. Breitkreutz, C. Stark, and M. Tyers. Osprey: a
network visualization system. Genome Biology, 4(3),
2003.
336

