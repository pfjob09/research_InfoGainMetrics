2012 16th International Conference on Information Visualisation

Lowering Visual Clutter in Large Component Diagrams
Lukas Holy, Kamil Jezek, Jaroslav Snajberk, Premek Brada
Department of Computer Science and Engineering, Faculty of Applied Sciences,
University of West Bohemia, Pilsen, Czech Republic
{lholy, kjezek, snajberk, brada}@kiv.zcu.cz
A. Structure of the Paper

Abstract—Nowadays component applications can easily consist of hundreds or thousands of components and it is thus
difﬁcult to understand their structure. Diagram visualisation
does not help much because of visual clutter caused by big
amount of elements and connections, especially in the case of
ﬂat component models. This paper describes a novel approach
of removing a large part of connections from the diagram while
preserving the information about component interconnections.
It uses a separated components area to show the components
with big amount of connections. For each component in this
area, clustered interfaces are shown instead of all interfaces,
with the ability to show details on demand. The main idea
of this technique can be used in a similar way to reduce the
clutter in node-link graphs. To show the effect of this technique
we discuss example lines reductions for several component
applications.

In the following section we describe problem of visual
clutter ﬁrst. After that we describe a related work in Section
III. Then in Section IV we present a novel technique which
helps to reduce the visual clutter in large graphs. After that
in Section VI, we describe the work in progress related to
the implementation of the proposed technique as well as
the future work. Finally, our contribution is summarized in
Section VII.
II. P ROBLEM D EFINITION
Developers face multiple challenges in large diagrams
visualization such as difﬁcult orientation, limited amount of
visible elements on the screen while showing its details, insufﬁcient details when showing overview or the visual clutter
[3]. It is possible to divide large diagram into smaller ones.
But in this case user would lose the overview of the whole
system and the information about interconnections among
system parts. Although diagrams of hierarchical component
models [4] usually does not have this problem because they
keep the information about parts in their hierarchy, there is
a lot of component models [5],[6] with ﬂat structure where
the described problem occurs.
This paper focuses on the problem with highly connected
components and the clutter caused by their connection
visualization.
Very often, only a small amount of components is connected to a large number of other components.The result
is illustrated in Figure 1, where part of Eclipse1 structure
is shown in Plugin Dependency Visualization tool2 . Such
components are often, among developers, informally called
“God Objects”. It is difﬁcult to trace the connections in
the surrounding area of these objects. Another side effect
of these components is that they ﬁll a lot of space, thus
exhausting one of the essential resources in the visualization
which can be used for easing the work with large component
diagrams.

Keywords-visual clutter; UML; component diagram; software architecture; comprehension

I. I NTRODUCTION
Software applications become more and more complex
and although there are lots of tools which help the development process, they are still limited in helping human understanding of the application structure. Software components
[1] are one of the ways to handle this complexity as they
encapsulate parts of functionality to uniﬁed components.
Even with the usage of components, applications can easily
consist of hundreds or thousands of them. It is therefore
difﬁcult to explore the structure of the application and create
a mental model of the whole system.
One of the ways how to get an insight into a component application structure can be UML component diagram.
When the diagram becomes large there are many problems
with exploring it. One is the contradictory need of providing
enough details and showing the complete diagram (application structure) at the same time. Another question is how to
reduce visual clutter caused by the large number of elements
and connections between them. This visual clutter makes
tracing of dependencies difﬁcult and hinders orientation in
the diagram. Current tools do not offer features designed
for work with such large diagrams, as we have shown in
our previous paper [2]. In this work, we propose several
techniques to reduce visual clutter in UML component
diagrams.
1550-6037/12 $26.00 © 2012 IEEE
DOI 10.1109/IV.2012.17

III. R ELATED W ORK
Visual clutter can be reduced by many techniques, such
as bundling [7], sampling [8], clustering [9] etc. The whole
1 Popular

IDE, see http://www.eclipse.org/

2 http://www.eclipse.org/pde/incubator/dependency-visualization/

36

Figure 1.

Wide Amount of Lines From One Component

Figure 2.

taxonomy of these techniques has been described by Ellis
and Dix in [10]. We provide a short description of those
techniques which are related to our work.
The clutter caused by the lines is often reduced by edge
bundling [11]. Although this approach reduces the clutter, it
can be difﬁcult to trace the dependencies between connected
nodes leading through the edge bundles.
The visual clutter can be also lowered by using node clustering, where one cluster usually represents multiple nodes.
Thus the number of nodes in the whole diagram is lowered
although the connections among components are usually
still present. Clusters can either be marked manually, in an
automated way [12],[13], [14] or by a combination of those
approaches [15]. The overview of clustering algorithms can
found in [16], [17].
Another inﬂuencing factor is the chosen layout algorithm,
which can ease orientation in both clustered graphs [18] or
a non-clustered ones [19], [20]. In the following section, we
describe our approach to how to reduce the clutter in this
problem.

Overall Layout of the Application Window

are displaced. In the manual use, a user drags-and-drops the
components from the main graph to the SeCo.
In the following paragraphs, we describe in detail the
individual parts of the whole visual design used by this
technique.
A. Separated Components Area (SeCo)
SeCo is a part of the application window. It can be placed
on left or right side of the window, because current screens
have wide aspect ratio and thus using these sides will not
deform the rest of the viewing area as much as using the top
or bottom side. The wireframe of the application window is
shown in Figure 2.
1) Items: SeCo consists of a list of items. Each item
consists of components, interfaces and a one corresponding
symbol (see Section IV-A2). Components placed in SeCo
have displayed relations with the rest of the components in
the diagram on the border between diagram area and SeCo.
We distinguish between two situations corresponding to
an item’s internal layout of components and the representing
symbol. In the ﬁrst situation, if there is only one component
in the item, interfaces are directly connected to the component and the symbol is behind the component as shown in
Figure 4. In the second situation, the item consists of more
components which form a group. In this case, the interfaces
are directly connected to the symbol and the components are
shown behind the symbol (Figure 6). The former situation
stresses the display of the interfaces-component connections
while the latter situation stresses the space saving. Groups
are described more in detail in Section IV-C.
2) Symbols and Delegates: The purpose of symbols is
to create clear and easily recognizable key which uniquely
identiﬁes one item within SeCo.
Symbol should be small enough to save space anywhere it
is used. The user should be able to choose its own symbols.
We have chosen letters for the demonstration of the idea,
but it can be any other symbol or an icon.
To keep the information about the connections in the main
area when lines are removed, we use so called delegates.
They represent the connection between a given component and the corresponding item placed in SeCo. In the
diagram, they are shown as small rectangles neighbouring

IV. P ROPOSED T ECHNIQUE
The proposed technique reduces the visual clutter by
removing the components with a large number of connections from the main diagram into a, so called, separated
components area (abbreviated to SeCo) placed on the border
of a window. This essentially marks the component as
a “familiar one”. The user may then concentrate on and
continue getting familiar with the rest of the system.
When a user moves components from the main diagram to
this area, the lines between these components and remaining
components are elided. Instead of them a representing visual
symbol is used in the diagram area. It reduces the number
of lines in the graph not reducing the information provided.
Obviously, components with a high number of connections are the most beneﬁcial to be moved, because they reduce the high number of lines from the graph. For instance, a
user may displace a component implementing a logger. Such
a component is probably used by most of components in the
system and its displacement reduces the graph complexity.
We assume both automatic and manual component selection may be used. In the automatic case, all components with
the number of connections overcoming a certain threshold

37

Figure 3.

Figure 4.

Figure 5.

Delegates in the Diagram Area

Interface Details

Item Design When Showing its Delegates

the displayed components and containing the symbol which
corresponds to the connected item (see Figure 3).
By clicking on a delegate, the connections, interfaces
and components involved in the relations are shown and/or
highlighted.
Display of the delegates in the diagram area can be toggled by clicking on the symbols in SeCo. The item indicates
the state when delegates are shown by dark background as
shown in Figure 4. The indication of the state when delegates
are shown can be also differentiated by a checkbox, or other
graphical element. We have chosen different background
color in order to save screen space.

Figure 6.

Group of Components Represented by a Group Symbol

instead. This situation is shown in Figure 5 by the rectangle
with rounded corners for Component N.
C. Component Groups
It is possible that a particular functionality of the system
is implemented by several components. In a case this functionality is used by a large number of other components in
the system, it can be represented as a group in SeCo.
All components from such a group are then replaced by
one delegate in the diagram. It saves space in the diagram
and also helps to create semantic clusters of components. It
consequently improves understanding of the whole system
where user may e.g. ﬁnd cliques of components ﬁrst. These
may be then grouped and displaced from the graph to
continue a study of the remaining graph.
The group symbols visually differ in component
symbols and colours. A group symbol is larger in the size
compared to the case of a single component, to denote
the fact the group shows a large number of components.
It is thus possible to show two additional categories of
clustered interfaces. These categories contain all provided
interfaces not used by any other component in a diagram
and analogically all required interfaces which no other
component provides. In the case of single components it
is better to show these interfaces only on demand and
thus save the space. The group is shown in Figure 6.
Showing not used interfaces can easily inform the user
about potentially missing components and thus prevent the
future deployment problems.

B. Interface Clustering
For each component shown in SeCo, interfaces are clustered into two sets: all provided interfaces (displayed as “lollipops”) and all required interfaces (displayed as “sockets”).
This is shown in Figure 4. Numbers inside the clustered
interfaces represent the number of elements clustered in the
given symbol. It helps to minimize the space which these
components ﬁll.
The clustered interfaces are by default not connected to
the rest of the diagram by any lines which reduces the
amount of lines in the diagram area. The connections (resp.
lines) appear only when interacting with one of the sides
of the connection included in clustered interfaces or the
interface itself.
There are two kinds of interaction with clustered interfaces. First is a simple showing of the connections lines and
highlighting of the components involved. This is achieved by
hover with mouse cursor on the clustered interface. Second,
a mouse click on the clusered interface expands it to show
the details of all interfaces including names, connections
and highlighting of the involved components. It is shown in
Figure 5 for Interface 4.
In the case a component from the diagram area connected
to an inspected interface would not be visible in the current
diagram area view, it does not make sense to show the
connection line and thus a proxy component is shown

When showing delegates in the diagram area for a given
group or an item, its appeareance changes. We have chosen
different the background color for demonstrating this item’s

38

Figure 7.

System

Components

Clustered

Nuxeo
CoCoME
OpenWMS
Eclipse

202
37
65
378

698
125
232
533

Table I
S EVERAL S YSTEMS WITH THE N UMBER
C ONNECTIONS

OF

Application Layout with Example Diagram

Non
Clustered
1425
188
642
1079

C OMPONENTS AND

state as shown in Figure 7 on group with symbol “V”. This
situation is equivalent to the situation of one component.

Figure 8.

V. D ISCUSSION AND E XAMPLES

Nuxeo Before the Reduction

Several experiments using the proposed technique were
performed, based on the data in the table. In one of them
only 7 Nuxeo components have been removed from the
diagram area leading to 241 and 431 lines remaining in
the graph for the clustered and non-clustered versions,
respectively. Therefore, the graphs were reduced of about
70% of lines in both cases.
These numbers show that by using the proposed technique, signiﬁcant visual clutter reduction may be achieved.
Visual effect of the results is shown in Figures 8 and 9, using
circle layout for clarity.

In a lot of situations, there are components in the system
which are connected with large number of other components.
Thus, they are suitable candidates to be removed from the
diagram area and moved to SeCo. In other cases we can
use the SeCo features to form groups of components. These
groups can serve as named categories according to which the
user can classify the rest of the components in the diagram
area and thus form a logical units of an investigated system.
Table I shows several systems with components having
large number of connections. The table lists each system
per a line with columns denoting the number of components, clustered and non-clustered connections among the
components respectively. While non-clustered connections
represent UML-like drawing separately connecting each individual provided-required interface pair, clustered connections collapse all connections between two components into
two sets: all provided interfaces and all required interfaces.

VI. I MPLEMENTATION
We are currently implementing this technique in HTML5
technology as a plug-in extension to the ComAV tool
[21]. ComAV is a versatile an extendible platform for
visualization and reverse-engineering of component-based
applications.

39

[4] T. Bures, P. Hnetynka, and F. Plasil, “SOFA
2.0: Balancing advanced features in a hierarchical
component model,” in SERA.
IEEE Computer
Society,
2006,
pp.
40–48.
[Online].
Available:
http://doi.ieeecomputersociety.org/10.1109/SERA.2006.62
[5] Sun Microsystems, “Enterprise JavaBeans(TM), version 3.0,”
Sun Microsystems, 2006, EJB Core, 2006.
[6] OSGi Alliance, “OSGi service platform v4.2,” OSGi Alliance
2009, Core Speciﬁcation, 2009.
Figure 9.

[7] D. Holten and J. J. Van Wijk, “Force-directed edge
bundling for graph visualization,” Computer Graphics Forum,
vol. 28, no. 3, pp. 983–990, 2009. [Online]. Available:
http://dx.doi.org/10.1111/j.1467-8659.2009.01450.x

Nuxeo After the Reduction

It offers the possibity to use multiple component models
(currently OSGi, EJB 3 and SOFA 2 are supported) and
different visualization styles. It uses component-model independent data format to store a reverse engineered structure
of component-based applications and as an input for any
visualization plug-in.
We plan to integrate a viewport technique [22] into
this application to enable users to form relevant clusters
comfortably.

[8] D. Raﬁei, “Effectively visualizing large networks through
sampling,” in Visualization, 2005. VIS 05. IEEE, oct. 2005,
pp. 375 – 382.
[9] K. Chen and L. Liu, “A visual framework invites human into
the clustering process,” in Scientiﬁc and Statistical Database
Management, 2003. 15th International Conference on, july
2003, pp. 97 – 106.
[10] G. Ellis and A. Dix, “A taxonomy of clutter reduction
for information visualisation,” Visualization and Computer
Graphics, IEEE Transactions on, vol. 13, no. 6, pp. 1216
–1223, nov.-dec. 2007.

VII. C ONCLUSIONS
In this paper, we have described a technique which helps
to reduce the amount of lines in UML diagram of large
applications, by removing the selected components from the
diagram area. It uses SeCo where the selected components
are shown, and symbolic delegates which represent the
connections instead of lines.
This technique is among other beneﬁts useful in the
reverse engineering process when the user is interactively
getting familiar with the whole diagram. It helps with creating the mental model of the application by easing the process
of clusters creation. Preliminary evaluation shows that the
presented ideas are helpful in large graph visualization,
where one suffers from visual clutter caused by the large
number of connection lines.

[11] D. Holten, “Hierarchical edge bundles: Visualization of
adjacency relations in hierarchical data,” IEEE Transactions
on Visualization and Computer Graphics, vol. 12,
no. 5, pp. 741–748, Sep. 2006. [Online]. Available:
http://dx.doi.org/10.1109/TVCG.2006.147
[12] Y. Chiricota, F. Jourdan, and G. Melanc¸on, “Software
components capture using graph clustering,” in Proceedings
of the 11th IEEE International Workshop on Program
Comprehension, ser. IWPC ’03. Washington, DC, USA:
IEEE Computer Society, 2003, pp. 217–. [Online]. Available:
http://dl.acm.org/citation.cfm?id=851042.857041
[13] S. Mancoridis, B. S. Mitchell, and C. Rorres, “Using automatic clustering to produce high-level system organizations
of source code,” in In Proc. 6th Intl. Workshop on Program
Comprehension, 1998, pp. 45–53.

ACKNOWLEDGEMENTS
The work was supported by the UWB grant SGS-2010028 Advanced Computer and Information Systems.

[14] R. A. Bittencourt and D. D. S. Guerrero, “Comparison
of graph clustering algorithms for recovering software
architecture module views,” in Proceedings of the 2009
European Conference on Software Maintenance and
Reengineering, ser. CSMR ’09. Washington, DC, USA:
IEEE Computer Society, 2009, pp. 251–254. [Online].
Available: http://dx.doi.org/10.1109/CSMR.2009.28

R EFERENCES
[1] C. Szyperski, Component Software: Beyond Object-Oriented
Programming, 3rd ed. Addison-Wesley / ACM Press, 2002.

[15] F. McGee and J. Dingliana, “Visualising small world graphs agglomerative clustering of small world graphs around nodes
of interest,” 2012.

[2] L. Holy, J. Snajberk, and P. Brada, “Evaluating component
architecture visualization tools - criteria and case study,”
2012.

[16] S. Schaeffer, “Graph clustering,” Computer Science Review,
vol. 1, no. 1, pp. 27–64, 2007.

[3] R. Rosenholtz, Y. Li, and L. Nakano, “Measuring visual
clutter,” Journal of Vision, vol. 7, no. 2, August 2007.

40

[17] J. Wu, A. E. Hassan, and R. C. Holt, “Comparison of
clustering algorithms in the context of software evolution,”
in Proceedings of the 21st IEEE International Conference
on Software Maintenance, ser. ICSM ’05. Washington, DC,
USA: IEEE Computer Society, 2005, pp. 525–535. [Online].
Available: http://dx.doi.org/10.1109/ICSM.2005.31
[18] Q. Feng, “Algorithms for drawing clustered graphs,” 1997.
[19] H. C. Purchase, M. McGill, L. Colpoys, and D. Carrington,
“Graph drawing aesthetics and the comprehension
of uml class diagrams: an empirical study,” in
Proceedings of the 2001 Asia-Paciﬁc symposium on
Information visualisation - Volume 9, ser. APVis ’01.
Darlinghurst, Australia, Australia: Australian Computer
Society, Inc., 2001, pp. 129–137. [Online]. Available:
http://dl.acm.org/citation.cfm?id=564040.564056
[20] S. Hachul and M. Jnger, “Large-graph layout algorithms at
work: An experimental study,” http://jgaa.info/ vol. 11, no. 2,
pp. 345369, 2007.
[21] J. Snajberk, L. Holy, and P. Brada, “COMAV - A Component
Application Visualisation Tool,” in Proceedings of International Conference on Information Visualization Theory and
Applications. SciTePress, 2012.
[22] L. Holy and P. Brada, “Viewport for component diagrams.”
in Graph Drawing, ser. Lecture Notes in Computer
Science, M. J. van Kreveld and B. Speckmann, Eds., vol.
7034. Springer, 2011, pp. 443–444. [Online]. Available:
http://dblp.uni-trier.de/db/conf/gd/gd2011.html

41

