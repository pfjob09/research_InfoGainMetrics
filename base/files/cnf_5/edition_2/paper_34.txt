2009 Sixth International Conference on Computer Graphics, Imaging and Visualization

Monomial Forms for Curves in CAGD with Their Applications
Chanon Aphirukmatakun, Natasha Dejdumrong
Department of Computer Engineering
King Mongkut’s University of Technology Thonburi
Bangkok,10140, Thailand
Email: chanon ap@hotmail.com, natasha@cpe.kmutt.ac.th

of the curve will be inﬂuenced by the predeﬁned blending
functions, namely Bernstein polynomials. The restriction of
this curve representation is that when the number of control
points is increased, the degree of the curve equation will
be higher. As a result, the computational time required will
be of quadratic complexity (O(n2 )) even though the de
Casteljau algorithm has been used for the evaluation of the
curve segments. Consequently, the utility of this curve in
real world applications is reduced, even though its elegant
formulae are one of the most suitable and simple methods.

Abstract—There are several methods used for plotting curves
in CAGD, e.g., by directly computing their basis functions
(polynomials) or using their recursive algorithms. For the
former method, evaluating a curve using their basis functions
is a tedious task because their equations need to be solved
by using complicated formulae computations. Whereas for the
latter method, implementing a program by using recursive
algorithm is simpler than the former method but it takes
more computational time. Thus, an alternative method for
constructing curves by using the monomial form is introduced. Employing monomial form approach, a curve can be
computed by using monomial matrix operations. Because the
matrix multiplications can be done in parallel programming,
the performance of generating a curve for high degree can
be increased. In the mean time, there exists the monomial
functions for any degree B´ezier curves. However, there has been
no monomial functions for any other kinds of CAGD curves.
This work proposes several monomial functions for Said-Ball,
Wang-Ball, DP, Dejdumrong and NB1 curves. Consequently,
these monomial functions will be useful and convenient for
readily computing the derivatives, degree elevations, degree
reductions and conversions among these curves.

During the late 80’s, the Said-Ball(1989)[12] and WangBall(1987)[14] polynomials were independently developed
as the two alternative forms for curve modeling. They are
generalizations of the cubic Ball polynomial scheme[1][2][3]
which was deﬁned in 1974. The effectiveness of the use of
Said-Ball and Wang-Ball curves was described in the work
by Hu et al.[13] in 1996. Particularly in 2000, they were
introduced as two fast and efﬁcient methods in evaluating
B´ezier curves by converting into Said-Ball or Wang-Ball
curves[9]. Especially when transformed into Wang-Ball
control points, the computational time for a B´ezier curve
from the Wang-Ball control points by the Wang algorithm is
linear. However, due to the difﬁculty of the conversion from
B´ezier into Wang-Ball control points, the transformation is
formulated in inappropriate forms for coding in any general
programming languages. Moreover they can cause slow and
erroneous computations because of complex conditions. In
addition, there is more than one condition in the Wang-Ball
formulae for representing Wang-Ball curve. Thus, the
formulae have not been widely used even though they are
more efﬁcient in theory.

Keywords-Power Basis, Monomial Form.

I. I NTRODUCTION
In geometric modeling and design for civil engineering
and architectural drafting, it is compulsory to make use of
curve segments in surface and solid modeling. Nowadays,
the curve modeling scheme has been based on mathematical
representations of the B´ezier-Bernstein, B-Spline and
NURB curves. In the recent years, such curves have gained
enormous popularity because they are appropriate for
modeling, and have quickly become the curves for a wide
range of graphics applications. However, these curves are
usually represented in terms of mathematical equations that
consume much computational time. This is problematic
for facilitating interactive CAD/CAM applications. In this
research, we are particularly concerned with the B´ezier
curves. Compared to others, B´ezier curves have been used
as the basic foundation of the curve representation for the
longest time.

Lately, there have been several attempts in the introduction
of B´ezier-like curve representations by proposing new
polynomial bases and new algorithms. Some examples are
Delgado-Pe˜na [6], NB1 (but NB2 of Wu) [10][15] and
Dejdumrong [5] algorithms. In this group, Delgado-Pe˜na and
Dejdumrong curves possess linear computational algorithms
while NB1 curve has quadratic computational complexity.
However, B´ezier curves are still more widely used than
these modern curves because the new representation
algorithms are not suitable for constructing curves in the

The B´ezier curve construction makes use of the
conﬁguration of given control points and polynomial
functions, the results of which are curve segments residing
within the convex hull of those control polygons. The shape
978-0-7695-3789-4/09 $25.00 © 2009 IEEE
DOI 10.1109/CGIV.2009.71

211

CAD applications due to their complex formulae.
Proposition II.1 (B´ezier Monomial Form)
A B´ezier curve of degree n, denoted by B n (t), with n+1
control points, denoted by {bi }ni=0 , can be written in terms
of the power basis form as follows:[7]

There exists another method for constructing the curves
in CAGD, that is recursive algorithm. It provides a
simpler method for programmers to implement in CAD
software. Recursive algorithm helps programmers to
write a code shortly. However, recursive algorithm
generally requires more spaces for processing and also
has duplicate computations. Moreover, the recursive
algorithm implementation for CAGD curves consumes
much computational time, O(2n ). Thus, this method is also
not suitable for CAD applications.

B n (t) =

n

n

bi · mi,j · tj ,

(1)

i=0 j=0

where
mi,j = (−1)j−i

In this paper, simple and efﬁcient method for constructing
the polynomial curves is provided in the forms of monomial
matrices because it is easier to compute matrix operations
than to solve symbolic computation. In addition, computing
matrix operations can be done in parallel programming
because the results can be computed independently. The
parallel computation can increase the performance for
generating curves at high degree. The monomial matrix
of B´ezier curves was investigated by Faux and Pratt[8],
Mortenson[4], and Chang[11]. However, there have been
no monomial functions for any other curves. In this work,
the monomial functions for the Said-Ball, Wang-Ball,
DP, Dejdumrong and NB1 curves are invented. Thus,
they are simpler and better for constructing curves and
surfaces in the CAD softwares by using only simple matrix
multiplications. Furthermore, derivatives, degree elevations,
degree reductions and the conversions among polynomial
curves can be readily obtained from their monomial
matrices.

n
j

j
.
i

(2)

Proposition II.2 (Said-Ball Monomial Form)
An nth -degree Said-Ball curve, denoted by S n (t), given by
n+1 control points, denoted by {Vi }ni=0 , can be expressed
in power basis form as follows:
S n (t) =

n

n

Vi · si,j · tj ,

(3)

i=0 j=0

where

si,j

⎧
n
i+ n
2
2 +1
⎪
(−1)j−i
,
⎪
⎪
i
j−i
⎪
⎪
n
⎪
for 0 ≤ i ≤ 2 − 1,
⎪
⎪
⎪
⎪
⎪
⎪
⎨ (−1)j−i n i ,
i j−i
=
n
for
i
=
,
⎪
2
⎪
⎪
⎪
⎪
⎪
⎪
n
⎪
n−i
j− n
2 +n−i
⎪
2 −1
,
⎪ (−1)
⎪
j− n
n−i
2 −1
⎪
⎩
n
for 2 + 1 ≤ i ≤ n.

(4)

II. M ONOMIAL F ORMS
Since the conventional polynomial equations are used
to compute a point on the curve, it is difﬁcult to write
programs to support these computations. In this paper,
monomial matrices of curves are introduced in order to make
the programming simpler and more practical. Thus, it is
necessary to deﬁne the monomial forms for each curve in
the following propositions.
Let M be an (n + 1) × (n + 1)-square monomial
matrix containing with monomial coefﬁcients, denoted by
{{mi,j }ni=0 }nj=0 . M must be satisﬁed the following properties:
1) Linear Independence, M is obtained from the basis
functions of a curve in CAGD with linear independence. Consequently, a square matrix, M , also has a
linearly independent property.
2) Invertibility, M is an invertible matrix, i.e., the determinant of M is nonzero.
n
3) Nonnegativity, for each row
i=0 mi,j ≥ 0, i =
0, 1, 2, .., n.
n
n
4) Partition of unity, i=0 j=0 mi,j = 1.

Proposition II.3 (Wang-Ball Monomial Form)
A Wang-Ball curve, denoted by An (t), provided with n+1
control points, denoted by {pi }ni=0 , can be shown as
An (t) =

n

n

pi · ai,j · tj ,

(5)

i=0 j=0

where

ai,j =

⎧
(−1)j−i 2i
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎨ (−1)j−i 2i

i+2
j−i

,

for 0 ≤ i ≤

n−i
j−i

,

for i =

n
2

,

,

for i =

n
2

,

,

for

⎪
⎪
(−1)j−i 2n−i n−i
⎪
j−i
⎪
⎪
⎪
⎪
⎪
⎩
n−i
(−1)j−n+i 2n−i j−n+i−2

n
2

n
2

− 1,

+ 1 ≤ i ≤ n.
(6)

Proposition II.4 (DP Monomial Form)
An nth -degree DP curve, denoted by C n (t), given by a set of

212

n+1 control points, denoted by {qi }ni=0 , can be formulated
in power basis form by
C n (t) =

n

n

qi · ci,j · tj ,

where
⎧
n
n
−1+i
2
⎪
(−1)j−i 2 i
⎪
⎪
j−i
⎪
⎪
⎪
⎪
⎪
⎪
(−1)j−i 2ii i+2
⎪
j−i
⎪
⎪
⎪
⎪
⎪
⎪
2i−2
j−i
⎪
(−1) 2 i−1 n−i
⎪
j−i
⎪
⎨

(7)

i=0 j=0

where

ci,j =

⎧
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎨

(−1)j nj

, for i = 0,

(−1)j−1 n−i
j−1
j−1

(−1)
−

, for 0 < i ≤

(n − 2i)

0
j−i−1

gi,j =

i+1
j−1

− (−1)j

+

i+1
j

n
2

− 1,

( 12 )n−2i ( 0j
n
2

), for i =

di,j

for i =
for i =
for

n
2

n
2

n
2

− 1,

− 1,

+ 1,

+ 1 < i ≤ n.
(10)

Proposition II.6 (NB1 Monomial Form) An NB1 curve
of degree n, N n (t), with n+1 control points, denoted by
{yi }ni=0 , can be formed by the power basis form as follows:
n

n

n

j

yi · gi,j · t ,

N (t) =

n
2

,

for i =

n
2

+ 1,

for

n
2

+ 2 ≤ i ≤ n.

be deﬁned as
⎤
m0,n
m1,n ⎥
⎥
,
.. ⎥
. ⎦
mn,n (n+1)×(n+1)
(13)
where mi,j is deﬁned in Equation 2.
2) Said-Ball Monomial Matrix can be given by
⎤
⎡
s0,0 s0,1 . . . s0,n
⎢ s1,0 s1,1 . . . s1,n ⎥
⎥
⎢
,
Sn = ⎢ .
..
.. ⎥
..
⎣ ..
.
.
. ⎦
sn,0 sn,1 . . . sn,n (n+1)×(n+1)
(14)
where si,j is deﬁned in Equation 4.
3) Wang-Ball Monomial Matrix can be shown as
⎤
⎡
a0,0 a0,1 . . . a0,n
⎢ a1,0 a1,1 . . . a1,n ⎥
⎥
⎢
,
An = ⎢ .
..
.. ⎥
..
⎣ ..
.
.
. ⎦

and n is even,

n
2

for i =

1) B´ezier Monomial Matrix can
⎡
m0,0 m0,1 . . .
⎢ m1,0 m1,1 . . .
⎢
Bn = ⎢ .
..
..
⎣ ..
.
.
mn,0 mn,1 . . .

(9)

n
2

,

In order to take the advantages from the monomial forms,
it is needed to explicitly deﬁne the monomial matrix for each
polynomial curve as follows:

where

for i =

n
2

A. Monomial Matrices

i=0 j=0

for 0 ≤ i <

for i =

There are many applications utilized of using monomial
matrices, e.g., the derivatives, the degree elevations, the
degree reductions and the conversions among these CAGD
curves.

di · di,j · tj ,

⎧
(−1)j−i 3i i+3
⎪
⎪
j−i
⎪
⎪
⎪
⎪
⎪
⎪
(−1)j−i 3i n−i
⎪
⎪
j−i
⎪
⎪
⎪
⎪
⎨
i
(−1)j−i 2(3i−1 ) j−i
=
⎪
⎪
⎪
⎪
⎪
(−1)j−i 3n−i n−i
⎪
j−i
⎪
⎪
⎪
⎪
⎪
n−i
⎪
⎪
(−1)j−n+i−1 3n−i j−n+i−3
⎪
⎩

− 1,

III. M ONOMIAL M ATRICES AND T HEIR A PPLICATIONS

Proposition II.5 (Dejdumrong Monomial Form)
A Dejdumrong curve of degree n, denoted by Dn (t), with
n+1 control points, denoted by {di }ni=0 , can be computed
by
n

n
2

−2 ,

(12)

(8)

n

n−i
⎪
(−1)j−i 2 2(n−i−1)
⎪
n−i−1
j−i
⎪
⎪
⎪
⎪
⎪
n−i
⎪
⎪
(−1)j−n+i 2(n−i)
⎪
n−i
j−n+i−2
⎪
⎪
⎪
⎪
⎪
n
n
⎪
n−i
⎪
2 −1+n−i
⎪
(−1)j− 2
⎪
j− n
n−i
⎩
2

for i =

,

1
(−1)j−n+i (n − 2i) j−n+i−1
+ ( 12 )2i−n ( 0j
⎪
⎪
⎪
⎪
⎪
⎪
⎪
0
⎪
− (−1)j n−i+1
), for i = n2 ,
− j−n+i−1
⎪
⎪
j
⎪
⎪
⎪
⎪
⎪
1
⎪
(−1)j−i j−i
, for n2 + 1 ≤ i ≤ n − 1,
⎪
⎪
⎪
⎪
⎪
⎪
⎪
0
⎪
, for i = n.
⎪
⎪
⎩ j−n

Dn (t) =

n
2

for 0 ≤ i ≤

an,0

an,1

...

an,n

(n+1)×(n+1)

(15)

(11)
where ai,j is deﬁned in Equation 6.

i=0 j=0

213

4) DP Monomial Matrix can
⎡
c0,0 c0,1 . . .
⎢ c1,0 c1,1 . . .
⎢
Cn = ⎢ .
..
..
⎣ ..
.
.
cn,0 cn,1 . . .
where ci,j is deﬁned in
5) Dejdumrong Monomial
⎡
d0,0 d0,1
⎢ d1,0 d1,1
⎢
Dn = ⎢ .
..
⎣ ..
.
dn,0

dn,1

be expressed by
⎤
c0,n
c1,n ⎥
⎥
.. ⎥
. ⎦
cn,n

the monomial matrix functions for curves in CAGD (SaidBall, Wang-Ball, DP, Dejdumrong and NB1 curves) are
investigated in order to increase the utilizations of using
the monomial matrix form. For an example, the conversion
between two curves can be easily computed by using the
matrix multiplications. Moreover, it can be directly applied
in constructing the rectangular surfaces.

, (16)

(n+1)×(n+1)

Equation 8.
Matrix can be determined as
⎤
. . . d0,n
. . . d1,n ⎥
⎥
,
.. ⎥
..
.
. ⎦
...

dn,n

ACKNOWLEDGMENT
This work was supported by the laboratory of CAGD
and Animation (CADLAB), the department of computer
engineering, KMUTT.
R EFERENCES

(n+1)×(n+1)

[1] A. A. Ball. CONSURF, Part one: Introduction to conic lifting
title. Computer-Aided Design 6. 1974.

(17)

where di,j is deﬁned in Equation 10.
6) NB1 Monomial Matrix can be speciﬁed by
⎤
⎡
g0,0 g0,1 . . . g0,n
⎢ g1,0 g1,1 . . . g1,n ⎥
⎥
⎢
Nn = ⎢ .
..
.. ⎥
..
⎣ ..
.
.
. ⎦
gn,0

gn,1

...

gn,n

[2] A. A. Ball. CONSURF, Part two: Description of the algorithms. Computer-Aided Design 7. 1975.
[3] A. A. Ball. CONSURF, Part three: How the program is used.
Computer-Aided Design 9. 1977.

,

[4] G. Chang. Matrix formulation of B´ezier technique. Computer
Aided Design, 14(6):345–350, 1982.

(n+1)×(n+1)

(18)

where gi,j is deﬁned in Equation 12.

[5] N. Dejdumrong. Efﬁcient algorithms for non-rational and
rational bezier curves. 2008.

IV. S OME A PPLICATIONS OF U SING M ONOMIAL
M ATRICES

[6] J. Delgado and J. M. Pe˜na . A Shape Preserving Representation with an Evaluation Algorithm of Linear Complexity.
Computer Aided Geometric Design, 20(1):1–20, March 2003.

There are many advantages of constructing monomial
matrices for CAGD curves. The beneﬁts of using monomial
matrices can be listed as follows:
1) Curve Constructions: Monomial matrices can be
applied to construct curves, e.g. B´ezier curve, SaidBall curve, Wang-Ball curve, DP curve, NB1 curve
and Dejdumrong Curve as shown in Figure 1.
2) Curve Conversions: Monomial matrices can be used
to convert from one curve to another curve. For
example, a DP curve can be converted into any other
curves as shown in Figure 2.
3) Degree Elevations and Degree Reductions: Monomial matrices can be used to compute the degree
elevation and the degree reduction of curves as shown
in Figure 3.
4) Derivatives of Curves: Tangent vectors of a curve can
be easily obtained by using monomial matrices.

[7] G. Farin. Curves and Surfaces for Computer Aided Geometric
Design. Academic Press Inc, London, 5 edition, 2002.
[8] I. Faux and M. Pratt. Computational Geometry for Design
and Manufacture. Ellis Horwood, 1979.
[9] H.N.Phien and N.Dejdumrong. Efﬁcient algorithms for B´ezier
curves. Computer Aided Geometric Design, 17:247–250,
2000.
[10] Wu Hongyi. Unifying representation of B´ezier curve and
genaralized ball curves. Appl. Math. J. Chinese Univ. Ser. B,
5(1):109–121, 2000.
[11] M. Mortenson. Geometric Modeling. Wiley, 1985.
[12] H. B. Said. Generalized Ball Curve and Its Recursive
Algorithm. ACM Transactions on Graphics, 8:360–371, 1989.
[13] G.Z. Wang S.M. Hu and T.G. Jin. Properties of two types of
generalized ball curves. Computer-Aided Design, 28(2):125–
133, 1996.

V. C ONCLUSION
An efﬁcient method of curve representations, called by
monomial matrix form, provides simple and efﬁcient computation for representing curves in CAGD. Computing using
monomial matrix can be done in parallel. Thus, it is more
efﬁcient to represent a curve at high degree. Moreover, the
monomial methods can be easily applied for computing the
derivatives, the degree elevations, the degree reductions and
the conversions among these CAGD curves. In this work,

[14] G. J. Wang. Ball Curve of High Degree and Its Geometric
Properties. Appl. Math.: A Journal of Chinese Universities,
2:126–140, 1987.
[15] Chen Xinmeng Yu Dan.
ball curves and surfaces.
27B(4):897907, 2007.

214

Another type of generalized
Acta Mathematica Scientia,

Figure 1.

Figure 2.

CAGD curves created by monomial forms

Conversions among CAGD curves using monomial functions

215

Figure 3.

Degree elevation of B´ezier curves implemented by monomial matrices

216

