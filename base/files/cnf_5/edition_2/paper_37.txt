2009 Sixth International Conference on Computer Graphics, Imaging and Visualization

Blending Functions Generating a Cubic Curve that Closely Approximates a
Polygon from Four Control Points

Lawrence H. T. CHANG
Department of Mathematics & Statistics
University of Saskatchewan
Saskatoon, Saskatchewan S7N 5E6, CANADA
e-mail: lhc956@mail.usask.ca, chang@math.usask.ca

different types of curves, each with its own characteristics
and properties.
Some of the properties of the blending functions that
ensure some desirable characteristics in the generated curve
are:

Abstract — We introduce a set of cubic blending functions that
generate a curve that allows closer approximation of a control
polygon defined by four control points. The curve interpolates
both endpoints and the direction of the tangent line at each
endpoint follows the direction of the respective end of the
control polygon. Our curve also interpolates the midpoint of
the two inner control points and the direction of the tangent
line at this point is in the same direction as the central segment
of the control polygon. Importantly, our blending functions
satisfy the Partition of Unity, Positivity, Local Support and
Variation Diminishing properties. All these make our scheme
suitable for the constrained piecewise interpolation of 2dimensional data points.

i.

F0 (t ) + F1 (t ) + F2 (t ) + " + Fn (t ) = 1

This property ensures that the control points and the
generated curve are invariant under affine transformations.
ii.

This property ensures that the generated curve lies
completely within the convex hull of the control polygon.
The convex hull can be defined as the area within a “rubber
band” that is put around the control points.

INTRODUCTION

Let us say we are given a polygon, may be an open
polygon or a closed polygon, with its vertices given by
points P0 , P1 , P2 , …, Pn . We use blending functions
denoted by F0 (t ) , F1 (t ) , F2 (t ) , …, Fn (t ) , usually but not
necessarily where 0 ≤ t ≤ 1 , to define a curve

iii.

Local Support:

⎧≠ 0, a particular neighbourhood of t
Fi (t ) = ⎨
other values of t
⎩ 0,

P (t ) = F0 (t )P0 + F1 (t )P1 + F2 (t )P2 + " + Fn (t )Pn

This property can be used to ensure that a change in the
position of one control point will only affect the part of the
curve within the neighbourhood of this point.

This curve should follow the orientation of the polygon
in a smooth manner or we could also say that the curve
should be a refinement of the jagged straight lines of the
polygon. It is for this reason that the polygon is often called
the control polygon and the vertices as control points since
they determine how the resulting curve should behave. Let
us not forget that one other major factor that determines how
the resulting curve behaves is the type of blending functions
we use. Different blending functions, e.g. Bézier (Bézier
[2]), B-spline (de Boor [4], Gordon and Riesenfeld [6]),
Ball (Ball [1]), Timmer (Timmer [10]), etc., will generate

978-0-7695-3789-4/09 $25.00 © 2009 IEEE
DOI 10.1109/CGIV.2009.63

Positivity:
F0 (t ) ≥ 0, F1 (t ) ≥ 0, F2 (t ) ≥ 0, F3 (t ) ≥ 0, for 0 ≤ t ≤ 1

Keywords - approximating cubic curve; cubic blending
functions; constrained piecewise interpolation

I.

Partition of Unity:

iv.

Variation Diminishing:
A control polygon and its curve are said to posses this
property if there is no straight line that has more intersections
with the curve than with its control polygon.
Some of the blending functions generate curves that
interpolate the end control points. It is this property of
endpoint interpolation that is used to create piecewise
interpolating curves. Let us say we are given a set of data
points to be interpolated. For each pair of consecutive data
228

points, we consider these two points as endpoints and we
calculate the placement of inner control points based on the
direction of the tangent and/or curvature at these points.
Then using blending functions, we generate a curve joining
this pair of data points. We do this for all the pairs of
consecutive data points and the final result is an overall
curve made up of many pieces of curves joined together at
the data points. This is known as piecewise interpolation.
Of course, how the overall interpolating curve will look
like depends very much on how we generate the curve
pieces. Let us consider an example of a particular data point
with two curves, i.e. the left curve and the right curve,
meeting at this point. If the tangent line of the left curve at
this point is in the same direction as the tangent line of the
right curve at this same point, then these two curves can be
seen to join smoothly at this data point. Also, if the
curvature of the left curve at this point is the same as the
curvature of the right curve at this same point, then these two
curves join with a continuous curvature at this data point.
The direction of the tangent lines and the curvature at the
endpoints depend on where we place the inner control points.
The popular blending functions have the property such that
the direction of the tangent line at P0 is in the direction of

scheme satisfies the Local Support property as well. Bsplines are defined over knots " ≤ t0 ≤ t1 ≤ t 2 ≤ " and
depending on where we place these knots, B-spline curves
may or may not interpolate the endpoints and they always
only approximate the inner control points.
iii.

Ball’s cubic blending functions
F0 (t ) = (1 − t ) , F1 (t ) = 2t (1 − t ) , F2 (t ) = 2t 2 (1 − t ) and
2

2

F3 (t ) = t 2 . They satisfy the Partition of Unity and Positivity
properties but not the Local Support property. Like the
Bézier curve, the Ball curve interpolates both endpoints and
the direction of the tangent line at each endpoint follows the
direction of the respective end of the control polygon.
Visually, the Ball curve appears “tighter” than the Bézier
curve. The Ball scheme has the advantage in that when the
two inner control points get closer and closer together, the
cubic Ball scheme approaches that of a quadratic scheme.
iv.

Timmer’s cubic blending functions
F0 (t ) = (1 − 2t )(1 − t )

2

,

F1 (t ) = 4t (1 − t )

2

,

F2 (t ) = 4t 2 (1 − t ) and F3 (t ) = (2t − 1)t 2 . Like the Bézier and
Ball curves, the Timmer curve also interpolates both
endpoints and the direction of the tangent line at each
endpoint follows the direction of the respective end of the
control polygon. An added property is that the Timmer
curve also interpolates the midpoint of the two inner control
points although the direction of the tangent line of the curve
at this midpoint does not necessarily follow the direction of
the central segment of the control polygon. Timmer’s
blending functions satisfy the Partition of Unity property but
do not satisfy the Positivity, Local Support nor the Variation
Diminishing properties. The Timmer curve does not always
lie within the convex hull of the control polygon and this is
perhaps the reason why the Timmer curve, although it
approximates the control polygon much better than the
Bézier and Ball curves, is not widely accepted.

P0 P1 and the direction of the tangent line at Pn is in the
direction of Pn −1 Pn .
Although the number of control points can be as many as
possible, four control points with a set of cubic blending
functions are sufficient to determine the direction of the
tangent lines and the curvatures of the generated curve at the
endpoints. Hence, it is sufficient to use cubic schemes in the
piecewise interpolation of data points to produce an
interpolant with continuous tangent and curvature.
Some well-known blending functions include:
i.

Bézier’s blending functions:
Bézier’s blending functions are an expansion of the
⎛n⎞
n −i
Bernstein polynomials, Bin (t ) = ⎜⎜ ⎟⎟t i (1 − t ) , i = 1," , n .
i
⎝ ⎠
For example, a set of cubic Bézier blending functions is an
expansion of the Bernstein polynomial when n = 3 , giving
3
2
us F0 (t ) = (1 − t ) , F1 (t ) = 3t (1 − t ) , F2 (t ) = 3t 2 (1 − t ) and

Böhm, Farin and Kahmann [3] have written a
comprehensive tutorial on the early developments on this
topic. Said [9] also developed a set of cubic functions that is
a combination of the Bézier and Ball blending functions.
This paper proposes a set of cubic blending functions that
will generate curves that incorporate the properties of the
Bézier, Ball and Timmer curves, i.e. our generated curve
interpolates both endpoints of the control polygon and the
direction of the tangent line at each endpoint follows the
direction of the respective end of the control polygon. Like
the Timmer curve, we also want our curve to interpolate the
midpoint of the central segment of the control polygon.
Further to that, we also want the direction of the tangent line
of our curve at this midpoint to follow the direction of the
central segment of the control polygon. Additionally, our
blending functions should satisfy the Partition of Unity,
Positivity, Local Support and Variation Diminishing
properties, i.e. our curve will always lie within the convex
hull of the control polygon and that a change in one endpoint
will only affect its respective half of the curve. In summary,

F3 (t ) = t 3 . These functions satisfy the Partition of Unity,
Positivity and Variation Diminishing properties but not the
Local Support property. In addition, the Bézier curve
interpolates both endpoints and the direction of the tangent
line at each endpoint follows the direction of the respective
end of the control polygon making it suitable to be used in
piecewise data point interpolation.
ii.

B-splines
B-spline curves are the generalisation of the Bézier
curves and satisfy the Partition of Unity, Positivity and
Variation Diminishing properties.
These curves are
piecewise curves meaning that they are composed of smaller
curves defined over every two or three or more control
points. As the overall curve is made up of many pieces, the

229

TABLE I.

we hope to generate a cubic curve that approximates the
control polygon closer than the Bézier, B-spline, Ball and
Timmer curves whilst retaining their combined desired
properties.
Although it may appear redundant to go back to the
basics and propose yet another set of cubic blending
functions when so many have already existed for decades,
we believe our set of blending functions will help in presentday research on constrained interpolation. This has useful
applications, for example, in robotics, geology and
economics, to name a few. The interested reader may want
to read papers on constrained interpolation by, among others,
Goodman, Ong and Unsworth [5], Meek, Ong and Walton
[7] and Ong and Unsworth [8].
II.

PROPERTIES, REQUIREMENTS AND CONDITIONS ON THE
BLENDING FUNCTIONS

Properties we want

P (0 ) = P0

The generated curve
interpolates both
endpoints.

P (1) = P3

The direction of the
tangent line of the
curve at each endpoint
is in the same
direction as its
respective end of the
control polygon.

Let us say we are given a set of four control points, i.e.
P0 , P1 , P2 and P3 . Let our proposed set of cubic
polynomial blending functions be
Fi (t ) = a i + bi t + c i t + d i t , i = 0, 1, 2, 3

P ′(0) = k1 (P1 − P0 )

F2 (0 ) = 0 and
F3 (0) = 0 .

F0 (1) = 0 , F1 (1) = 0 ,
F2 (1) = 0 and
F3 (1) = 1 .

′
F1 (0) = k1 ,
′
F2 (0) = 0 and
′
F3 (0) = 0 .
′
′
F0 (1) = 0 , F1 (1) = 0 ,

P ′(1) = k1 (P3 − P2 )

3

′
F2 (1) = − k1 and
′
F3 (1) = k1 .

⎛1⎞
F0 ⎜ ⎟ = 0 ,
⎝2⎠

that generates an approximating curve
P (t ) = F0 (t )P0 + F1 (t )P1 + F2 (t )P2 + F3 (t )P3 , where 0 ≤ t ≤ 1

The generated curve
interpolates the
midpoint of the two
inner control points

The derivative of the above curve is then

⎛ 1 ⎞ P + P2
P⎜ ⎟ = 1
2
⎝2⎠

⎛1⎞ 1
F1 ⎜ ⎟ = ,
⎝2⎠ 2
⎛1⎞ 1
and
F2 ⎜ ⎟ =
⎝2⎠ 2
⎛1⎞
F3 ⎜ ⎟ = 0 .
⎝2⎠

′
′
′
′
P ′(t ) = F0 (t )P0 + F1 (t )P1 + F2 (t )P2 + F3 (t )P3

′⎛ 1 ⎞
F0 ⎜ ⎟ = 0 ,
⎝2⎠

Table I lists the properties that we want, the
mathematical requirements and the conditions that we
impose on the blending functions in order to obtain these
properties.
Let us now collect the properties of the four blending
functions listed in Table I with which we shall generate the
functions proper.

a.

Conditions we need
to impose
F0 (0) = 1 , F1 (0) = 0 ,

′
F0 (0) = − k1 ,

OUR PROPOSED SET OF CUBIC BLENDING FUNCTIONS

2

Mathematical
requirements

At this midpoint of the
curve, the direction of
the tangent line is in
the same direction as
the central segment of
the control polygon.

⎛1⎞
P ′⎜ ⎟ = k 2 (P2 − P1 )
⎝2⎠

′⎛ 1 ⎞
F1 ⎜ ⎟ = −k 2 ,
⎝2⎠
′⎛ 1 ⎞
F2 ⎜ ⎟ = k 2 and
⎝2⎠
′⎛ 1 ⎞
F3 ⎜ ⎟ = 0 .
⎝2⎠

Blending function F0 (t )
P (t ) is continuous on
0 ≤ t ≤1.

⎛1⎞
It is obvious from F0 (0) = 1 , F0 ⎜ ⎟ = 0 and F0 (1) = 0 ,
⎝2⎠
that point P0 should have complete influence on the curve at
1
when P0
t = 0 with the influence waning until t =
2
should have no more influence on the curve at all till t = 1 .
′⎛ 1 ⎞
′
Also, we can deduce from F0 (0) = −k1 , F0 ⎜ ⎟ = 0 and
⎝2⎠
′
F0 (1) = 0 , that the graph of this blending function should

The generated curve is
smooth on the interval
0 ≤ t ≤1.

P′(t ) is continuous on
0 ≤ t ≤1.

F0 (t ) , F1 (t ) , F2 (t )

and F3 (t ) are

continuous on
0 ≤ t ≤1.
′
′
′
F0 (t ) , F1 (t ) , F2 (t )
′
and F3 (t ) are

continuous on
0 ≤ t ≤1.

Table I footnote: k1 and k 2 are constant coefficients.

1
≤ t ≤ 1 , otherwise our resulting
2
curve will not satisfy the Positivity, Local Support and
Variation Diminishing properties.

⎛1 ⎞
decrease uniformly from (0,1) to ⎜ ,0 ⎟ , from where it is
⎝2 ⎠
horizontally straight until (1,0) . We must also impose

F0 (t ) = 0 on the interval

230

Therefore, the form of this blending function should be a
1
two-piece function where the piece from t = 0 to t =
2
should be of at least a quadratic form while the piece from
1
t = to t = 1 is a straight line F0 (t ) = 0 . We also impose
2
the condition that these two pieces join with defined first1
derivative continuity at t = otherwise our curve will not
2
1
be tangentially continuous at t = . Therefore, we let this
2
blending function be the following piecewise expression:

b.

From the conditions attached to this blending function,
we notice that this blending function increases from (0,0) ,
where its tangent line has slope k1 to a local maximum with
a horizontal tangent line somewhere between t = 0 and
1
t = , where it then decreases uniformly until (1,0) where it
2
1
once again has a horizontal tangent line. At t = , its
2
tangent line has slope −k 2 . As this blending function has
two horizontal tangent lines, it must take at least a cubic
form.
Let this blending function be F1 (t ) = a1 + b1t + c1t 2 + d1t 3
′
with its derivative as F1 (t ) = b1 + 2c1t + 3d1t 2 . We can
obtain the following equations from their corresponding
conditions as listed in Table III.
Solving the equations in Table III yields a1 = 0 , b1 = 4 ,
c1 = −8 , d1 = 4 and k 2 = 1 . This gives our second blending

1
⎧
2
⎪a0 + b0 t + c0 t , 0 ≤ t ≤ 2
F0 (t ) = ⎨
1
⎪
0,
< t ≤1
2
⎩
where we have

function as F1 (t ) = 4t (1 − t ) .
2

1
⎧
⎪b0 + 2c0 t , 0 ≤ t ≤ 2
′
F0 (t ) = ⎨
1
⎪ 0,
< t ≤1
2
⎩

c.

Blending function F2 (t )

This blending function has a horizontal tangent line at
from where it increases until somewhere between
1
t=
and t = 1 where there is another horizontal tangent
2
line and then it decreases until t = 1 , where the tangent line
1
has slope −k1 . At t = , its tangent line has slope k 2 . As
2
in II(b), this blending function has two horizontal tangent
lines and therefore, it must take at least a cubic form.
Let
this
blending
function
be
F2 (t ) = a 2 + b2 t + c2 t 2 + d 2 t 3 with its derivative as
′
F2 (t ) = b2 + 2c2 t + 3d 2 t 2 . We can obtain the following
equations from their corresponding conditions as listed in
Table IV.

(0,0) ,

From the conditions attached to this blending function,
we can generate the following equations to solve for a0 , b0
and c0 as listed in Table II.
Solving the equations in Table II, we obtain a0 = 1 ,
b0 = −4 , c0 = 4 and k1 = 4 . This gives our blending
function as
1 ⎧
1
⎧
2
2
⎪(1 − 2t ) , 0 ≤ t ≤ 2 ⎪(1 − 2t ) , 0 ≤ t < 2
F0 (t ) = ⎨
=⎨
1
1
⎪ 0,
< t ≤ 1 ⎪ 0,
≤ t ≤1
2
2
⎩
⎩

⎛1⎞
′⎛ 1 ⎞
since both expressions yield F0 ⎜ ⎟ = 0 and F0 ⎜ ⎟ = 0
2
⎝ ⎠
⎝2⎠
thereby ensuring that this blending function has both
positional and tangential continuity on 0 ≤ t ≤ 1 .
TABLE II.

Blending function F1 (t )

TABLE III.

EQUATIONS TO SOLVE FOR F0 (t )

EQUATIONS TO SOLVE FOR F1 (t )

Conditions
F1 (0) = 0

Corresponding equations

⎛1⎞ 1
F1 ⎜ ⎟ =
⎝2⎠ 2

1
1
1
1
a1 + b1 + c1 + d 1 =
2
4
8
2

a1 = 0

Conditions
F0 (0) = 1

Corresponding equations
a0 = 1

⎛1⎞
F0 ⎜ ⎟ = 0
⎝ 2⎠
′
F0 (0) = − k1

F1 (1) = 0

a1 + b1 + c1 + d 1 = 0

1
1
a 0 + b0 + c 0 = 0
2
4

F1 (0 ) = k1 = 4

b1 = 4

b0 = − k1

′⎛ 1 ⎞
F1 ⎜ ⎟ = −k 2
⎝2⎠

b0 + c0 = 0

′
F1 (1) = 0

′⎛ 1 ⎞
F0 ⎜ ⎟ = 0
⎝2⎠

′

231

b1 + c1 +

3
d 1 = −k 2
4

b1 + 2c1 + 3d 1 = 0

EQUATIONS TO SOLVE FOR F2 (t )

TABLE IV.
Conditions
F2 (0 ) = 0

Corresponding equations
a2 = 0

⎛1⎞ 1
F2 ⎜ ⎟ =
⎝2⎠ 2

a2 +

F2 (1) = 0

Solving the equations in Table V, we have a3 = 1 ,
b3 = −4 and c3 = 4 . This yields the blending function as
1 ⎧
1
⎧
0≤t<
0≤t≤
⎪ 0,
⎪ 0,
2
2
F3 (t ) = ⎨
=⎨
1
1
2
2
⎪(2t − 1) ,
≤ t ≤ 1 ⎪(2t − 1) ,
< t ≤1
2
2
⎩
⎩

1
1
1
1
b2 + c 2 + d 2 =
2
4
8
2

a 2 + b2 + c 2 + d 2 = 0

′

F2 (0) = 0

b2 = 0

′⎛ 1 ⎞
F2 ⎜ ⎟ = k 2 = 1
⎝2⎠
′
F2 (1) = −k1 = −4

b2 + c 2 +

3
d2 = 1
4

⎛1⎞
′⎛ 1 ⎞
since both expressions yield F3 ⎜ ⎟ = 0 and F3 ⎜ ⎟ = 0 .
2
⎝ ⎠
⎝2⎠
This ensures also that this blending function is tangentially
continuous on 0 ≤ t ≤ 1 .

b2 + 2c 2 + 3d 2 = −4

Solving the equations in Table IV, we obtain a2 = 0 ,
b2 = 0 , c2 = 4 and d 2 = −4 . This yields the blending

As with F1 (t ) and F2 (t ) , we also notice that blending
functions F0 (t ) and F3 (t ) are symmetrical with each other
1
about t = .
2
In summary, we have generated the set of blending
functions as listed in Table VI.
Fig. 1 shows the graphs of our four blending functions.
Table VII lists more properties that our proposed set of
blending functions satisfies on the interval 0 ≤ t ≤ 1 .

function as F2 (t ) = 4t (1 − t ) . We also notice that this
blending function is symmetrical with blending function
1
2
F1 (t ) = 4t (1 − t ) about t = .
2
2

d.

Blending function F3 (t )

From the conditions attached to this blending function,
⎛1⎞
′⎛ 1 ⎞
′
F3 (0) = 0 , F3 ⎜ ⎟ = 0 , F3 (1) = 1 , F3 (0) = 0 , F3 ⎜ ⎟ = 0
⎝2⎠
⎝2⎠
′
and F3 (1) = k1 , and using the same arguments presented in
II(a), we can propose that this blending function take the
following piecewise form,

TABLE VI.
Function

1
⎧
0,
0≤t<
⎪
2
F3 (t ) = ⎨
1
2
⎪a3 + b3t + c3t ,
≤ t ≤1
2
⎩
with its piecewise derivative as

OUR BLENDING FUNCTIONS

F0 (t )

Expression
1
⎧
2
⎪(1 − 2t ) , 0 ≤ t < 2
F0 (t ) = ⎨
1
⎪ 0,
≤ t ≤1
2
⎩

F1 (t )

F1 (t ) = 4t (1 − t )

2

F2 (t )

F2 (t ) = 4t 2 (1 − t )

F3 (t )

1
⎧
0≤t ≤
⎪ 0,
2
F3 (t ) = ⎨
1
⎪(2t − 1)2 ,
< t ≤1
2
⎩

1
⎧
0≤t<
⎪ 0,
2
F3 (t ) = ⎨
1
⎪b3 + 2c3t ,
≤ t ≤1
2
⎩

′

We can now obtain the following equations based on
their corresponding conditions as listed in Table V.
TABLE V.
Conditions
⎛1⎞
F3 ⎜ ⎟ = 0
⎝2⎠

F3 (1) = 1
′⎛ 1 ⎞
F3 ⎜ ⎟ = 0
⎝2⎠
′
F3 (1) = k1 = 4

EQUATIONS TO SOLVE FOR F3 (t )
Corresponding equations
a3 +

1
1
b3 + c 3 = 0
2
4

a 3 + b3 + c3 = 1
b3 + c 3 = 0
b3 + 2c3 = 4

Figure 1. Our proposed blending functions

232

TABLE VII.

MORE PROPERTIES OF OUR BLENDING FUNCTIONS

Properties
Positivity
Partition of Unity

Characteristics of our blending
functions
F0 (t ) ≥ 0 , F1 (t ) ≥ 0 , F2 (t ) ≥ 0 and
F3 (t ) ≥ 0

F0 (t ) + F1 (t ) + F2 (t ) + F3 (t ) = 1

Piecewise characteristics of F0 (t )

and F3 (t ) .

A change in P0 will

affect
Local Support

a change in only the
1
part of the curve and a
0≤t<
2
change in P3 will affect a change in

only the

1
< t ≤ 1 part of the
2

curve.
Variation Diminishing Property

Figure 2. Curves from our blending functions compared to other curves

We would like to add that although F1 (t ) and F2 (t ) of
our proposed blending functions are similar to those of
Timmer’s blending functions, this similarity is purely
coincidental as the basis for generating our blending
functions are totally different from Timmer’s.
III.

EXAMPLES OF GENERATED CURVES

In this section, we present curves generated from our
proposed blending functions. For comparison, we also
present the Bézier and Timmer curves in some of the figures.
Fig. 2 and Fig. 3 show the curves generated by our blending
functions as compared to those generated by Bézier’s and
Timmer’s blending functions. Fig. 4 shows the Local
Support property of our scheme where the displacement of
one end-point only affects one-half of the curve. As can be
seen, our proposed blending functions generate curves that
approximate the control polygons much closer than previous
methods whilst retaining the desired Positivity, Partition of
Unity, Local Support and Variation Diminishing properties.
Finally, Fig. 5 shows the capability of our blending
functions in ensuring tangential continuity in piecewise
interpolation. This figure also shows the capability of our
scheme in its application in constrained piecewise
interpolation.

Figure 3. Curves from our blending functions compared to other curves

Figure 4. Local Support property of our scheme

233

[2]

Bézier, P.
Numerical Control, Mathematics and
Applications. Wiley, New York. 1972.
[3] Böhm, W., Farin, G. and Kahmann, J. A survey of curve
and surface methods in CAGD.
Computer Aided
Geometric Design 1, 1 – 60. 1984.
[4] de Boor, C. On calculating with B-splines. Journal of
Approximation Theory 6, 50 – 62. 1972.
[5] Goodman, T. N. T., Ong, B. H. and Unsworth, K.
Constrained interpolation using rational cubic splines, in:
Farin, G., (Ed.), NURBS for Curve and Surface Design,
SIAM, Philadelphia, pp. 59 – 74. 1991.
[6] Gordon, W. J. and Riesenfeld, R. E. B-spline curves and
surfaces, in: Barnhill, R. E., Riesenfeld, R. F., (Eds.),
Computer Aided Geometric Design, Academic Press,
New York, pp. 95 – 126. 1974.
[7] Meek, D. S., Ong, B. H. and Walton, D. J. Constrained
interpolation with rational cubics. Computer Aided
Geometric Design 20, 253 – 275. 2003.
[8] Ong, B. H. and Unsworth, K. On non-parametric
constrained interpolation, in: Lyche, T., Schumaker, L. L.,
(Eds.), Mathematical methods in computer aided
geometric design II, Academic Press, San Diego, pp. 419
– 430. 1992.
[9] Said, H. B. The Bézier-Ball type cubic curves and
surfaces. Sains Malaysiana 19, 85 – 95. 1990.
[10] Timmer, H. G. Alternative representation for parametric
cubic curves and surfaces. Computer-Aided Design 12,
25 – 28. 1980.

Figure 5. Our scheme in a constrained piecewise interpolation

IV.

CONCLUSION

This paper has proposed a set of cubic blending
functions that generate a curve that approximates the
control polygon defined by four control points in a much
closer manner compared to previous methods, whilst
satisfying the Partition of Unity, Positivity, Local Support
and Variation Diminishing properties.
REFERENCES
[1]

Ball, A. A. CONSURF, Part 1: Introduction to conic
lofting title. Computer-Aided Design 6, 243 – 249. 1974.

234

