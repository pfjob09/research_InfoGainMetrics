2009 Sixth International Conference on Computer Graphics, Imaging and Visualization

A graphical approach to approximate offset computation
LI C. L., ZHOU Gang, CHAN C. W.
Department of Manufacturing Engineering and Engineering Management,
City University of Hong Kong, Hong Kong, China
Department of Mechanic and Automotive Engineering,
Zhejiang University of Science and Technology, Hangzhou 310023, China
Department of Manufacturing Engineering and Engineering Management,
City University of Hong Kong, Hong Kong, China
{meclli@cityu.edu.hk, zghly@zju.edu.cn, ccchiwah2@student.cityu.edu.hk }
repeated generation of offsets from the boundary edges
of the machining region. A major problem in the
computation of the offset of a curve is the detection and
the subsequent removal of self-intersecting loops.

Abstract
Generation of the offset of a curve is an important
operation in many CAD/CAM applications. In the
generation of CNC toolpath for 2.5D machining, the
toolpath is the offset of the part boundary. A major
problem in the computation of the offset of a curve is the
detection and the subsequent removal of self-intersecting
loop. While many different techniques have been
reported in the literature, in general they are complex
and not efficient. In this paper, the problem is reformulated as a graphical problem and solved using the
graphics hardware. The generation of the offset, the
detection and the removal of self-intersection are
achieved through a rendering process. With the recent
advent in the processing power of the GPU, this process
is very efficient. This new technique can be used to
compute offsets of planar curves and offsets of curves on
free-form surfaces.

C o (t ) of a curve C(t) given by
C o (t ) = C (t ) + Dn(t )

Consider the offset

where D is the offset distance and n(t) is the unit normal
vector to C(t). Figures 1(a) show the application of this
equation to generate the offset of a planar curve. When
the offset distance is large, self-intersecting loop occurs.
Self-intersection occurs when the radius of curvature of
the part boundary in a concave region is less than the
offset distance. This situation is called local selfintersection. Figure 1(b) shows that a global selfintersection that occurs when there are two distinct
points on the part boundary where the distance between
them reaches a local minimum, and the minimum
distance is less than the offset distance. Similar selfintersection also occurs when offsetting a curve on a
surface. An example is given in Figure 1(c).

Keywords--- offset computation, self-intersection
loop removal.

Many different techniques have been reported in the
literature in dealing with the self-intersection problem.
As reviewed by Maekawa [4], the basic approach to
detect self-intersections in the offset of a planar curve C(t)
can be obtained by seeking pairs of parametric values
s ≠ t such that
C (t ) + Dn(t ) = C ( s ) + Dn( s ) .
If C(t) is a polynomial curve, the above equation
represent two simultaneous bivariate non-rational
functions involving polynomials and square root of
polynomials which arise from the normalization of the
normal vector. If local numerical techniques such as
Newton-type method is applied to solve the equation,
good initial approximation to all roots are needed and
thus it is difficult to guarantee that all intersections can
be found. Global methods, such as the subdivision
method [5], have been reported. However, the square

1. Introduction
Generation of the offset of a curve is an importation
operation in many CAD/CAM applications. In the
generation of CNC toolpath for 2.5D CNC machining [1,
2], the toolpath, which specifies the locus of the center of
the cutter tool, is the offset of the part boundary where
the offset distance equals the cutter radius. In contour
parallel pocketing operations, all the contour parallel
toolpaths are also offsets of the part boundary. For 3-axis
surface machining, the offset operation is also used in
toolpath generation. In a recent technique developed by
the first author [3], a boundary-conformed toolpath is
obtained by a special iterative process that requires

978-0-7695-3789-4/09 $25.00 © 2009 IEEE
DOI 10.1109/CGIV.2009.46

217

distance from P, the circle represents all the points on the
x-y plane that are at distance D from P. The distance
function can thus be represented by an infinite set of
concentric circles centered at P. If each circle with radius
D is placed on the plane parallel to and at a distance D
from the x-y plane, the infinite set of concentric circles
then forms a cone, with its apex at P and the apex angle
being 90o. As example is given in Figure 2.

root in the equation that makes the system nonpolynomial is still a problem, and to avoid the non-trivial
solution s=t makes the solution process less efficient.
For a more detail discussion on the problem, the readers
are referred to the review by Maekawa [4].

d
(a) local self-intersection
y

p

C(t)

x
Fig 2. Distance function represented by a
cone.
(b) global self-intersection

Now, the cone is rendered such that the camera is set
at a large distance along d, the front clipping plane is at a
large d value and the back clipping plane is set at
different values such as those shown in Figure 3.

(c) self-intersection on offsetting a
curve on surface

Fig 3. Rendering of the cone with different
settings of the back clipping plane.

Fig. 1 Occurrence of self-intersection
when generating an offset from a curve

The rendered image of the cone, as shown in Figure
4, is an annulus with the inner radius r equals to the
distance of the back clipping plane from the origin. The
inner boundary of the annulus also represents all the
points on the x-y plane that are at distance r from the
sample point P. Therefore, by setting different positions
of the back clipping plane, the locus of points at different

In this paper, the problem is re-formulated as a
graphical problem and solved using the graphics
hardware. This new technique is efficient and does not
involve any iterative numerical computation.

2. The graphical approach
The graphical approach reported in this paper is
inspired by the method reported by Kenneth et al.[6] in
the construction of Voronoi diagram. Given a 2D curve
C(t) to be offset, the first step is to construct a distance
function d(x,y) for each sample points P on C(t). The
distance function gives the distance between any point
(x, y) and the sample point P. Since every point that lie
on a circle with radius D and centered at P is at the same

Fig 4. Rendered images of the cone with
different settings of the back clipping plane.

218

offset distance from the sample P can be obtained from
the rendered image of the cone. Now, if a set of cones
are constructed at a sequence of sample points on the
curve C(t), and they are rendered with the back clipping
plane set at D, the result is shown in Figure 5(a).

(a) rendered image

3. Offsetting curves on surfaces
The problem of offsetting a curve that lies on a freeform surface is more complex. In the methods reported
by Patrikalakis and Bardis [7], the offset of a curve C(t)
is constructed by offsetting a sequence of points on C(t).
To offset a point P on the surface S=S(u, v), an iterative
numerical method is employed. The geodesic path
starting at P can be represented by the parametric
equations u=u(t) and v=v(t), and can be traced by
solving the following system of differential equations

du
= u′
ds
dv
= v′
ds
du ′
= − d11u′2 − 2d12u ′v′ − d 22v′2
ds
dv ′
= −e11u′2 − 2e12u′v′ − e22v′2
ds

(b) offset

Fig 5. Rendered image obtained by constructed a set
of cone on a sequence of sample points on a curve.
The inner boundary of the image can be obtained by
extracting all the pixels within the inner region such that
there is a change in color between its adjacent pixels. By
chasing these pixels, an offset of the original curve is
obtained as shown in Figure 5(b). By setting the clipping
plane to a different position, a different rendered image
is obtained and in turn an offset with a different offset
distance is generated. An example is shown in Figure 6.

where s is the arc length parameter of the geodesic
path and the dij and eij are expressions involving the
partial derivatives of S(u,v).
When this method is applied to generate offset, selfintersection, such as the one shown in Figure 1(c), can
also occur. Tam et al. [8] has proposed a method to
detect this kind of self-intersecting loop. For each offset
point Po obtained from C(t) with an offset distance D, an
offset circle CPo is construted. The offset circle CPo is
the set of points that lies on the surface and is at the same
offset distance D from Po. CPo is obtained by generating
offset points from Po along a set of sampled directions
that varies between 0 to 2 π . After CPo is constructed, it
is tested against C(t) for any intersection. If any
intersection occurs, indicating that there exists a point in
C(t) that is closer to Po, then Po must lies within a selfintersecting loop and has to be removed from the offset.
As Tam’s method makes use of the offset circle which
requires the generation of a large set of offset points
from all sample points on the curve C(t), it is very
computational intensive. In the following section, a brief
outline of a graphical approach to the problem is
presented.

Fig 6. Rendered image obtained with a different
clipping plane gives a different offset curve.
Notice that in the rendered image and the resulting
offset curve shown in Figure 5, all local self-intersections
that occur at locations where the local radii of curvature
are smaller than the offset distance are automatically
removed by the rendering process. In other words, the
tedious process for the detection of self-intersection and
the subsequent trimming of the offset to remove selfintersection loop can be handled very efficiently by the
rendering method. Figure 6 shows that global selfintersection can also be handled by the method. Notice
that as a result of the removal of the self-intersection
loop due to the global self-intersection, the rendering
method correctly splits the offset curve into two separate
portions.
Figure 7 shows the offsets generated by using a
sequence of back clipping planes. These offsets can be
linked to form an entire toolpath that carries out 2.5 D
pocket machining of the region bounded by the original
boundary curve. Notice that at large offset distances, the
graphical technique correctly split the offset curves, and
thus the toolpaths, into two separate loops.

Fig 7. Offset curves obtained by the graphical
technique.

219

4. Graphical approach to offsetting curves
on surfaces
In the technique described in Section 2, the key idea
is to represent the distance function of a point using a
simple graphical object (i.e. the cone). Once the distance
function is captured by a graphical object, a graphical
process can be used to generate the offset. In the problem
of offsetting a curve on a surface, a simple graphical
object that is able to represent the distance function does
not exist. Considered a point P on the surface. To
construct an offset circle for P, offset paths (i.e. geodesic
paths) must be generated from P at different directions
along the surface. As the surface is none planar, the
resulting offset circle is no longer a circle that lies on a
plane. Even if the offset circle is constructed in the u-v
parametric domain of the surface, it will not be a circle
and thus a simple graphical object, such as a cone, is not
able to represent the distance function.

C2o (t )
C1o (t )

C (t )

(a) offset curves on surface

d

O-surface

c2o (t )

v

c1o (t )
u

4.1. Construction of O-surface

c(t )

(b) An O-surface in the u-v-d space

In order to solve the self-intersecting problem, we
propose to approximate the offset using a new graphical
object that we called an O-surface. Let C(t) be a curve on
the surface S(u, v), and c(t) denotes the corresponding
curve on the u-v parametric domain of S. If Co(t) is the
offset of C(t) with an offset distance D, then co(t) is a
corresponding curve in u-v. Instead of constructing co(t)
in the u-v plane, co(t) is constructed in a 3D space
spanned by the u-v-d axes where the d axis corresponds
to the offset distance. Now, co(t) is placed on a plane that
is at a distance D along the d axis. If a sequences of co(t)
is constructed in the u-v-d space by using a sequences of
increasing offset values, a surface can be formed by
interpolating the offset curves co(t). This surface is the
O-surface of C(t). Figure 8 given an illustration for the
construction of an O-surface.

Fig 8. Construction of an O-surface

4.3. Removal of self-intersecting loop
The most important use of the O-surface is its ability
to remove self-intersecting loops. Figure 9 illustrates an
example where the offsets generated from a curve on a
surface have self-intersecting loops. When the
corresponding offset curves in the u-v-d space are used to
generate the O-surface, the original O-surface does
contain self-intersecting loop. However, upon rendering
with the function of hidden surface removal provided by
the graphics hardware, the self-intersecting loop on the
O-surface is removed automatically as shown in the
figure. Therefore, loop-free offset curves can be obtained
from the O-surface upon rendering. That is, by setting
the back clipping plane to the correct position that equals
the offset distance, and then render the O-surface with
hidden surface removal, a loop-free offset curve can be
obtained. Since the loop removal process is achieved
through the rendering operation, this process is very
efficient and stable when compare to the conventional
numerical approach.

4.2. Offset curve extraction from an O-surface
Given the O-surface of a curve, an offset at arbitrary
offset distance D can be obtained simply by intersecting
the O-surface with a plane parallel to and at a distance D
from the u-v plane. To obtain this intersection curve
graphically, we can render the O-surface with the back
clipping plane being set a distance D. As the rendering
process is very efficient, the offset distance can be
adjusted interactively and real-time update of the offset
curve can be achieved. However, since the O-surface is
constructed through interpolation between a finite
number of offset curves, the resulting offset curve by this
graphical technique is only an approximation to the
actual offset curve.

5. Discussion on GPU implementation
As the self-intersecting loop removal process has
now be re-formulated as a graphics problem and is
processed using the graphics hardware, the most timeconsuming task now becomes the computation of the
offset curve from the curve that lies on a surface. As

220

loops in the offset can be performed by using a more
efficient and stable graphical operation. The technique
can handle the offsetting of 2D curves and curves that lie
on 3D free-form surfaces. In the latter case, an O-surface
is constructed to capture the offset information and the
rendering process is also used to remove self-intersection
loops. This new technique can be used to speed up offset
computation so that offset distance can be adjusted
interactively and the corresponding offset being updated
in real-time. It can also be used to speed up the
computation of complex toolpath that requires repeated
computation of offset curves.

Acknowledgements
The work described in this paper was fully
supported by a Strategic Research Grant from the City
University of Hong Kong (Project No. 7002124).

References

d
v

[1]

Held M, “On the computational geometry of pocket
machining”, Berline, Germany, Sprinter-Verlag, 1991.
[2] Hansen A, Arbab f, “An algorithm for generating NC
tool paths for arbitrarily shaped pockets with islands”,
ACM Transactions on Graphics, Vol 11, No 2, pp. 152182, 1992.
[3] C.L. Li, "A geometric approach to boundary-conformed
toolpath generation", Computer-Aided Design, Vol 39
No 11, pp. 941-952, Nov 2007.
[4] Maekawa T, “An overview of offset curves and
surfaces”, Computer Aided Design, Vol 31, pp. 165-173,
1999.
[5] Maekawa T, Patrikalakis NM, “Computation of
singularities and intersections of offsets of planar
curves”, Computer Aided Geometric Design, Vol 10 No
5, pp. 407-429, 1993.
[6] Kenneth E. Hoff III, John Keyser, Ming Lin, Dinesh
Manocha and Tim Culver, “Fast computation of
generalized Voronoi diagrams using graphics hardware”,
Proceedings of SIGGRAPH, pp. 277 – 286, 1999.
[7] N. M. Patrikalakis and L Bardis, “Offsets of curves on
rational B-spline surfaces”, Engineering with Computers,
5, 1989, pp. 39–46
[8] Tam HY, Law HW, Xu H, "A geometric approach to the
offsetting of profiles on three-dimensional surfaces",
Computer-Aided Design, 36, 2004, pp.887–902
[9] Owens JD, Luebke D, Govindaraju N, Harris M, Kruger
J, Lefohn AE and Purcell TJ, "A Survey of GeneralPurpose Computation on Graphics Hardware", Compt.
Graph. Forum, Vol 26 No 1, pp. 80-113, 2007.
[10] Krishnamurthy A, Khardekar R and McMains S, “Direct
evaluation of NURBS curves and surfaces on the GPU”,
Proceedings of the 2007 ACM symposium on Solid and
physical modeling, pp 329-334.

u

Fig 9. Removal of self-intersecting loop from the Osurface.

discussed, the offset curve is obtained by offsetting a
sequence of sample points on the original curve. As this
operation is the same for all sample points, parallel
implementation of this operation using the parallel
processing capability of modern GPU can speed up this
process. The offset operation involves solving a system
of differential equations and parallel methods for solving
differential equations using the GPU have been reported
[9]. Moreover, the offsetting process involves the
evaluation of the surface properties such as the partial
derivatives and methods for the rapid evaluation of
surface properties using the GPU have been reported
[10]. Further work of this research will thus focus on the
techniques for parallel execution of the offsetting
procedure using the GPU.

Conclusions
A new graphical technique for generating the
approximate offset of a curve has been developed. The
major advantage of the technique is that the complex
problem of detecting and removing the self-intersection

221

