2009 Sixth International Conference on Computer Graphics, Imaging and Visualization

Accelerating Algebraic Reconstruction Using CUDA-Enabled GPU

1

Yuqiang Lu1 , Weiming Wang1 , Shifu Chen1
Shenzhen Institute of Advanced Integration Technology,
Chinese Academy of Sciences/
The Chinese University of Hong Kong
Shenzhen, China
{yq.lu,wm.wang,sf.chen}@siat.ac.cn

Abstract

There were many attempts for accelerating ART-based
methods with dedicated special-purpose hardware platforms
like digital signal processors (DSPs) and field programmable
gate arrays (FPGAs) [9]. However, the capability in programming of these special devices is limited, and therefore
modifications and adaptations are diﬃcult. More importantly, these devices are not commonly available in consumer
level PC, and this constraints the deployment of related
technology.
In this paper, we propose a novel implementation of SART
on CUDA-enabled Graphics Processing Unit (GPU) which is
already a standard in PCs nowadays. With the help of CUDA
development platform [10], ”non-graphics” programmer can
easily implement eﬃcient GPU code for general-purpose
computations. Two core techniques are introduced to fit the
SART into the CUDA architecture : (1) ray-driven projection along with hardware built-in trilinear interpolation and
(2) voxel-driven back-projection combining CUDA shared
memory to avoid redundant computation. Experimental results show that our CUDA-based method for cone-beam
reconstruction has significant gain in performance, without
scarifying the reconstruction quality.

In this paper, we apply the Compute Unified Device
Architecture (CUDA) to the 3D cone-beam CT reconstruction using Simultaneous Algebraic Reconstruction Technique
(SART). With the hardware acceleration, the computationally complex SART can run at speed comparable to the
commonly used Filtered Back-Projection, and provide even
better quality volume with less samples. The main contributions include two novel techniques to accelerate the
reconstruction. We introduce a ray-driven projection along
with hardware built-in trilinear interpolation, as well as a
voxel-driven back-projection that can avoid redundant computation by combining CUDA shared memory. Significant
performance boost is reported from experiments using our
techniques. A real-time reconstruction is achieved within 3
seconds for a 1283 volume from 80 1282 projections, without
compromising image quality. Our proposed method realizes
the instantaneous presentation of CT volume to the physician
once projection images are acquired.

1. Introduction

2. Related Work

Simultaneous Algebraic Reconstruction Technique
(SART) [1] and its predecessor ART [2] are well-known
iterative methods to reconstruct 3D volume data from their
projection images, which are usually acquired from X-ray,
positron emission tomography, or single photon emission
computed tomography. Comparing to the commonly used
Filtered Back-Projection (FBP) algorithm [3], SART
usually performs better especially when the set of available
projections is sparsely or non-uniformly distributed in
angles [4]. However, ART-based methods are rarely applied
in most of today’s medical CT systems due to their high
complexity and high computational costs. For example, the
SART requires a sequence of alternating volume projections
and corrective back-projections until the reconstructed
volume fits all projection images. This process is very
time consuming and diﬃcult to converge to a result
instantaneously.
978-0-7695-3789-4/09 $25.00 © 2009 IEEE
DOI 10.1109/CGIV.2009.18

Yongming Xie2 , Jing Qin2 , Wai-Man Pang2 ,
Pheng-Ann Heng1,2
2
Department of Computer Science and Engineering,
The Chinese University of Hong Kong
Hong Kong, China
{ymxie,jqin,wmpang,pheng}@cse.cuhk.edu.hk

In recent years, more researchers begin to aware of the
highly parallelized computing power of GPUs for general
purpose computations. In the context of cone-beam CT
reconstruction, the earliest attempt dates back to 1994, when
Calbral et al. [14] utilized a tailor-made texture mapping
hardware for the CT reconstruction. The standard texture
mapping feature in graphics processor commonly used to
enhance the realism of the polygonal graphics object, is also
used to accelerate the SART algorithm [7] and it takes 36
seconds to reconstruct a 1283 volume from 80 projections.
Riabkov et al. [15] used GPU-CPU hardware to accelerate
the back-projection step of the FDK cone-beam algorithm
to real time. Most of these reconstruction methods were
based on graphics-based implementation approaches using
OpenGL or shading languages [13].
480

In contrast to the above graphics-based implementation,
Scherl et al. [16] used the Compute Unified Device Architecture (CUDA) to implement the filtering and backprojection of FDK algorithm on GPU. It takes about 12
seconds to reconstruct a 5123 volume from 414 projections.
Furthermore, Okitsu et al. [18] used CUDA-enabled GPU to
accelerate the entire FDK algorithm by two techniques: oﬀchip memory access reduction and memory latency hiding.
Only 5.6 seconds are needed to reconstruct a 5123 volume
from 360 5122 projections, which is faster than the result
in [17].
There is a fundamental diﬀerence in the reconstruction
quality for various approaches. For example, the FDK algorithm commonly suﬀer from a worse reconstruction quality
than the SART method. Besides, it has been shown that two
to three iterations are suﬃcient to reconstruct a low-contrast
3-D object [5] and the required number of projections in
ART-based methods is typically smaller than that in FBP
theoretically [6]. However, most implementations of ARTbased methods require substantial processing time, which
is undesirable during time-critical surgical and minimally
invasive procedures. The necessity of a real-time SART
implementation is therefore obvious.
In the following sections, we will briefly review the
algebraic reconstruction technique in section 3. Detail implementation of our proposed method is described in section
4. Then, in section 5, we will report the experimental results
and related analysis. Finally, we conclude our work.

Figure 1. The geometry of 3D cone-beam CT.

can be traversed by many rays during single projection Pϕ .
The classical ART approach of updating the voxel for every
ray may cause ”striping” artifacts in the reconstruction, so
SART was proposed [2]. As shown in Algorithm 1, at the
orientation ϕ, a projection image Pϕ is computed. Then, each
voxel is corrected by an accumulated correction that is due
to all pixels in Pϕ . In the back-projection step, voxels are
corrected by the following equation:
(
v(k+1)
j

=

v(k)
j

+λ

i∈Pϕ

pi −pi
N

)wi j

win
n=1

wi j

(2)

i∈Pϕ

In Eq.(2), pi is the projection data, pi is line integral, λ
N

3. Algebraic Reconstruction

is a relaxation factor,

Figure 1 shows the geometry of 3D cone-beam CT. The
goal of 3D CT reconstruction is from 2D (projections)
images P to reconstruct the 3D volume V. Algebraic reconstruction, such as ART and SART, can be described as
a linear algebra problem:

4. Proposed Approach

win is the ray length.
n=1

WV = P

Each iteration in the SART algorithm can be divided into
four main steps: projection, correction, back-projection and
update. In order to make the algorithm parallel, the first two
steps are commonly combined in the implementation, since
the corrective image is computed at projection procedure.
Similarly, the last two steps are also combined due to the
fact that the image update can be applied to a voxel once
its corresponding back-projection is completed.
Instead of the classical Siddon’s method [8], a CUDAbased ray tracing method is implemented in the projection
and correction stages. This method falls into the category
of ray-driven techniques as it considers the rays as active
models, and the voxels as passive models. In our CUDA
implementation, a ray-driven technique is implemented with
each ray handled in a separate thread. We will discuss the
advantages of this technique over the Siddon’s method on
graphics hardware in section 4.1.

(1)

Here, V represents the unknown N = n voxels in the
volume, while it is flattened as a n3 × 1 vector. P is a R × 1
vector storing all pixels in the set of M projection images
Pϕ of Rm pixels each, so R = MRm . Also, Pϕ are the images
obtained at angles ϕ of the X-ray detector plane. W is a R×n3
weight matrix, in which wi j means the influence that voxel v j
contributes its value to pixel pi . It is clear that the weight wi j
plays a crucial role as it relates the unknown voxel value to
the known pixel value. In many implementations, the weight
is suggested to be the voxel intersection length.
3

To solve the equation system, Gordon et al. [2] chose an
iterative scheme which corrects the volume in a ray by ray
manner. Later, Andersen and Kak [1] noticed that a voxel

In contrast to the projection stage, a voxel-driven technique is implemented for the back-projection and image

481

1
2
3
4
5
6
7

Algorithm 1. SART algorithm
Initialize volume,V=V(0)
Until convergence
Select a projection Pϕ
Projection: Compute line integrals pi for all rays of Pϕ
Correction: Subtract the calculated line integral from projection pi in the projection image, and normalize it
Back-projection: Distribute corrections onto voxels
Update: Update the volume

and then transfer the updated volume data back to texture
memory.

4.1. Projection and Corrective Image Computation

In the projection step, two main methods are usually
used where they assume that the voxels are solid or sample
points. One is the classical Siddon’s method [8], the other
is ray tracing based method, which is primarily presented to
resolve the volume data visualization and volume rendering
problems, and then found useful for the cone-beam CT
reconstruction technologies [1].

Figure 2. Overview of the proposed method.

For Siddon’s method, the volume is considered to be
composed of discrete voxels, and the density of each voxel
is assumed to be uniform. We can simply refer this as
voxel-based model. A main drawback of this method is its
assumption on discrete sampled volume, when the sampling
is too coarse. It may cause edge eﬀects when used in
real reconstruction applications. In contrast to the Siddon’s
method, the ray tracing based method deals with a pointbased model. A ray pass through a volume will have an entry
point and an exit point. Points are then sampled between the
entry and exit. The value (density) of each point is calculated
with a cubic interpolation, and the projection value is finally
calculated with these points.

update procedure. In this technique, a voxel is considered
as an active model, and a thread will handle the update of a
single voxel. More details will be discussed in section 4.2.
To implement these two techniques, we divide Eq.(2) into
two parts:
pi − pi
εi = N
(3)
win
n=1

and
v(k+1)
j

=

v(k)
j

+λ

i∈Pϕ

[wi j εi ]
wi j

(4)

i∈Pϕ

Eq.(3) accounts for computing the corrective image, while
Eq.(4) handles the back-projection and image update.
The ray-driven and voxel-driven techniques favor the
current graphics hardware architecture, since we can avoid
global summation which usually reduces the parallelism of
GPU and introduces impact to the performance. Figure 2
shows the overview of our method, this process is iteratively
applied to obtain the final volume data V. The projection
images P is first loaded from CPU to global memory
in GPU. Then, the volume VT in the texture memory is
projected to the global memory to calculate the corrective
image C . Later, the corrective image C is back-projected
to the volume VG in global memory to update the volume.
Since texture memory is read-only, we have to use global
memory in the the back-projection step to update the volume

Since the interpolation operations are time consuming,
the Siddon’s method is more commonly used in previous
work. In our novel CUDA implementation, we chose the
ray tracing based method, as we could utilize the feature
of CUDA. The CUDA 2.0 started to support 3D texture,
together with the capacity of hardware built-in trilinear
interpolation. With this feature, the ray tracing based method
is then found twice faster than the Siddon’s method.
As implied in Eq.(3), in the CUDA parallel kernels,
a thread is launched for each ray, which first calculates
the entry point and exit point of its corresponding ray
passing the volume, then handles the sampling operations
and calculates the projection value of this ray with the
sampled points and its interpolated values.

482

Figure 3. Using MBR to find the rays which pass through
the specified voxel.

4.2. Back-Projection and Update
Figure 4. Slices across the 3D CT of CRANI (a)(b) and
SKULL (c)(d).

A voxel-driven technique is employed when implementing
back-projection and image update. The critical issue of this
technique is how to find the rays which pass through a
specified voxel.

5. Experimental Results
In order to evaluate the performance of the proposed
method, we carried out a series of experiments and a comparison with the graphics-based method. All experiments
were tested on a desktop PC equipped with an nVIDIA
8800GTX GPU with 768MB memory. Our implementation
runs on Windows with CUDA 2.0.
Table 1 shows the statistics for reconstruction of the
Shepp-Logan phantom [19]. Our method takes only 2.828
seconds to reconstruct a 1283 volume from a set of 80
projections with 1282 in size. This is equivalent to nearly
30 projections per second (pps). Comparing to the graphicsbased method [12], our method is 2 times faster. For a
larger projection with size of 2562 , the reconstruction can
be completed within 8 seconds up to 160 projections. These
reveal that our proposed method can eﬃciently accelerate
the algebraic reconstruction method.

The method introduced by Li et al. [11] is employed to
find the rays passing through. The projection of a voxel
to the detector plane is typically a hexagon, a pentagon
or a quadrangle, and the projection of a point inside the
voxel should also be a point within these polygons. As is
demonstrated in Figure 3, we first calculate the projection
of the eight vertexes of the voxel, and then form a minimum
bounding rectangle (MBR), which would contain all the
projection points of this voxel. The ray whose projection
point (P) locates inside the MBR will be tested to figure out
whether it hits the voxel or not; intersection length (P1 P2 )
of the ray who hits the voxel will be calculated and passed
to the Eq.(4) for image update calculation.

An issue of this method is that we may calculate the
projection of a vertex many times, due to the fact that a
vertex commonly belongs to 8 voxels. To avoid redundant
computation and make our computation eﬃcient, we utilized
the shared memory of GPU hardware to store the projection
of each vertex. Since the shared memory units can be shared
only by the threads in the same block, a special structure of
each block is formed. In our implementation, a 3D block
is formed with a dimension of 4 × 4 × 4. In this case, we
only have to calculate the projection of their corresponding
vertexes, which are 53 points.

Apart from the significant reduction in reconstruction
time, the reconstruction quality is also improved. We have
tested on various data sets, including simulation data and
CT data. Figure 4 shows slices across the original data and
reconstructed data. Line profiles across the slice image in
Figure 5 show further insight, from which we find that our
proposed method performs well for both low contrast (e.g.
CRANI) and high contrast (e.g. SKULL) data.
We also tested with diﬀerent number of projections in
our experiments as shown in Figure 6. Figure 6(b) shows
483

Table 1. The execution time needed for reconstruction, performance comparison with the graphics-based method
Method
graphics-based
Our method
Our method
Our method
Our method

Hardware
nVIDIA 8800GTX
nVIDIA 8800GTX
nVIDIA 8800GTX
nVIDIA 8800GTX
nVIDIA 8800GTX

Volume size
128
128
128
128
128

Projections
80
80
80
160
160

Projection size
128
128
256
128
256

Time for 3 iterations (in sec)
6.1
2.828
3.937
5.672
7.813

6. Conclusion
In summary, we have used CUDA-enabled GPU to accelerate Simultaneous Algebraic Reconstruction Technique
for 3D cone-beam CT reconstruction. Two key techniques,
ray-driven projection and voxel-driven back-projection, are
proposed. In the projection stage, We utilize the hardware built-in trilinear interpolation of 3D texture in GPU
to accelerate the time consuming interpolation operations;
while shared memory of GPU hardware is used in backprojection to avoid redundant computation. A prototyping
implementation shows that the proposed method can achieve
real-time reconstruction within seconds. In the future, we
would like to deploy the accelerated technique to clinical
applications requiring instantaneous reconstruction of CT
volumes.

Acknowledgment
We are grateful to Dr. Junguo Bian (Department of
Radiology, University of Chicago) who gave us great help.
The work described in this paper was partially supported by a grant from the Research Grants Council of
the Hong Kong Special Administrative Region (Project No.
CUHK4121/08E) and a grant from the the National Natural
Science Foundation of China (Grant No. 60703120).

References
[1] A.H. Andersen and A.C. Kak, Simultaneous algebraic reconstruction technique (SART). Ultrason. Img., vol. 6, pp. 81-94,
1984.

Figure 5. Line profiles across the slice images.

[2] R. Gordon, R. Bender and G.T. Herman, Algebraic reconstruction techniques (ART) for three-dimensional electron microscopy and X-ray photography. J. Theoretical Biology, vol.
29, pp. 471-481, 1970.
[3] L.A. Feldkamp, L.C. Davis and J.W. Kress, Practical cone
beam algorithm. J. Opt. Soc. Amer., pp. 612-619, 1984.

that even for a small number of projection images, e.g.36
projections here, our method can obtain an acceptable reconstructed volume that resembles the original one. This
capability is not available in the Filtered Back-Projection
algorithm.

[4] A.C. Kak and M. Slaney, Principles of Computerized Tomographic Imaging. IEEE Press, 1988.
[5] K. Mueller, R. Yagel and J.J. Wheller, Anti-aliased 3-D conebeam reconstruction of low-contrast objects with algebraic
methods. IEEE Trans. Med. Imag., vol. 18, pp. 519-537, June
1999.

484

Figure 6. A comparison using different number of projections.

[6] H. Guan and R. Gordon, Computed tomography using ART
with diﬀerent projection access schemes. Phys. Med. Biol., no.
41, pp. 1727-1743, 1996.

[13] M. Churchill, Hardware-accelerated cone-beam reconstruction on a mobile C-arm. In Proceedings of SPIE, J. Hsieh and
M. Flynn, Eds., vol. 6510, 2007.

[7] F. Xu and K. Mueller, Accelerating popular tomographic reconstruction algorithms on commodity PC graphics hardware.
IEEE Trans. on Nuclear Science, 52:654-663, 2005.

[14] B. Cabral, N. Cam and J. Foran, Accelerated volume rendering and tomographic reconstruction using texture mapping
hardware. Proceedings of Symp. on Volume Visualization, pp.
91-98, 1994.

[8] R.L. Siddon, Fast calculation of the exact radiological path for
a three-dimensional CT array. Med. Phys. 12 (2), pp. 252-255,
1985.

[15] D. Riabkov, X. Xue, D. Tubbs and A. Cheryauka, Accelerated cone-beam backprojection using GPU-CPU hardware.
In: Proc. 9th Int’l. Meeting Fully Three-Dimensional Image
Reconstruction in Radiology and Nuclear Medicine (Fully 3D
2007), pp. 68-71, July 2007.

[9] N. Gac, S. Mancini and M. Desvignes, Hardware/software 2D3D backprojection on a SoPC platform. In: Proc. 21st ACM
Symp. Applied Computing(SAC 2006), pp. 222-228, April
2006.
[10] Nvidia CUDA: Revolutionary GPU Computing.
http://developer.nvidia.com/object/cuda.html

[16] H. Scherl, B. Keck, M. Kowarschik and J. Hornegger, Fast
GPU-based CT reconstruction using the common unified device architecture (CUDA). In: Proc. Nuclear Science Symp.
And Medical Imaging Conf (NSS/MIC 2007), pp. 4464-4466,
October 2007.

url:

[17] F. Xu and K. Mueller, Real-time 3D computed tomographic
reconstruction using commodity graphics hardware. Physics in
Medicine and Biology 52(12), 3405-3419,2007.

[11] N. Li, H.-X. Zhao, S.-H. Cho, J.-G. Choi and M.-H. Kim, A
fast algorithm for voxel-based deterministic simulation of Xray imaging. Computer Physics Communications 178(7): 518523, 2008.
[12] SPIE Medical Imaging 2009 course notes.
http://www.cs.sunysb.edu/ mueller/research/rapidCT/
presentations.htm

[18] Y. Okitsu, F. Ino and K. Hagihara, Accelerating Cone Beam
Reconstruction Using the CUDA-Enabled GPU. HiPC 2008,
LNCS 5374, pp. 108-119, 2008.

url:

[19] 3D Shepp-Logan phantom. url: http://tomography.o-x-t.com/

485

