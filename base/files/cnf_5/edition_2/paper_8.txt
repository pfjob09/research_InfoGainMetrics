2009 Sixth International Conference on Computer Graphics, Imaging and Visualization

Implementation of Ant Colony Algorithm based on GPU

Wang Jiening

Dong Jiankang

Air Traffic Management Research Base
Civil Aviation University of China
Tianjin, China
wang_jiening@yahoo.com.cn

Air Traffic Management Research Base
Civil Aviation University of China
Tianjin, China
jkdong@cauc.edu.cn

Zhang Chunfeng
Air Traffic Management Research Base
Civil Aviation University of China
Tianjin, China
cfZhang@cauc.edu.cn
method using modern GPU resource was proposed. When
applied to the TSP, the experimental results showed it was
more efficient than only use CPU.

Abstract‚ÄîAnt colony algorithm is an efficient intelligent
algorithm to solve NP hard problem. This paper presents a
parallel computing solution based on General Purpose GPU
(GPGPU) to solve Traveling Salesman Problem (TSP) with
Max-Min Ant System (MMAS). The experimental result shows
it is more efficient than pure CPU computing.

II.

In this paper, the ACS was applied to solve the typical
combinatorial optimization problem‚ÄîTSP using modern
GPU parallel calculation features. This section will give brief
introduction about the algorithm.

Keywords-Ant colony algorithm; Max-Min Ant System
(MMAS); General Purpose GPU (GPGPU); Traveling Salesman
Problem (TSP)

I.

A. Traveling Salesman Problem (TSP)
TSP is one of the most studied NP-hard problems in
combinatorial
optimization.
Consider
a
set
V {v1 , v2 ,..., vn } of nodes, representing cities, and a set
of E of arcs fully connecting the different nodes V. Let d be
the weight value of arc (i, j ) ¬è E , usually dij or d ji is the

INTRODUCTION

Ant algorithm was an intelligent algorithm as a multiagent approach to difficult combinatorial optimization
problems like the traveling salesman problem (TSP) and the
quadratic assignment problem (QAP) [1]. This algorithm
was inspired by the observation of real ant colonies, which
can find shortest paths between food source and their nest.
According to the natural phenomena one can mimic ant‚Äôs
behavior to construct an ant colony optimization which is a
meta-heuristic colony of artificial ants cooperate in finding
good solutions to difficult discrete optimization problems.
Artificial ants have two good features, which are parallel
mechanisms based on positive feedback and distributed
calculation. It is therefore reasonable to give artificial ants
some capabilities that make them more effective and
efficient in using parallel calculation resources such as GPU.
With in-depth studies on ant colony optimization, some
improved schemes have been suggested which enriched with
extra capabilities like lookahead, local optimization,
backtracking, and so on. The Ant Colony System (ACS)
algorithm introduced by Dorigo and Cambardella [2] was
able to find good solutions within a reasonable time only for
small problems. Further more, Stutzle and Hoos proposed
Max-Min Ant System (MMAS) which was the same as ant
system but improved pheromone trail updating features [3].
This helped avoiding stagnation, which was one of the
reasons that made ant system poor performance when an
elitist strategy. In this paper, a novel MMAS implementation
978-0-7695-3789-4/09 $25.00 ¬© 2009 IEEE
DOI 10.1109/CGIV.2009.20

ALGORITHM

distance between cities i and j, with (i, j ) ¬è V . The TSP is
the problem of finding a minimal length Hamiltonian circuit
on the graph G {V , E , d } , where an Hamiltonian circuit
of G is a closed tour visiting once and only once all the
nodes of G, and its length is given by the sum of the lengths
of all the arcs of which it is composed. The TSP is a typical
NP-hard problem.
B. Ant Colony System
In ACS artificial ants make combinatorial optimization
solutions of the TSP by moving on the problem graph from
one city to another. The system can be described as follow:
Consider an ants‚Äô set : , there are m ants build a tour
executing n steps in which a probabilistic decision rule is
applied. At the beginning, these ants are located on a defined
city randomly and let them to find their way independently.
In practice, when in city the kth (k 1...m) artificial ant
chooses the city j to move to according to its bionic features
that ants deposit pheromone while building a solution or
after they have built a complete tour. That is the kth ant
50

which may occur in case some pheromone trails are close to
W max while most others are close to W min ; that is, pheromone
trails are update using a proportional mechanism. Following
rule is applied to update pheromone values:
(4)
W ij (t  n) (1  U )W ij (t )  'W ijmin

movement is determined by the amount of pheromone on the
path. Now we defined some feature values to control the ant
moving behavior, Kij is the heuristic value of move from

Kij 1 / dij where dij is the
and j), W ij represents the amount of
path(i,j) at time t, D and E are two

city i to city j (generally
distance between i

'W ijmin

pheromone trail on
parameters to control the relative weight of pheromone trail
and heuristic value. Therefore the desire moving probability
of kth ant from city i to j at time t according to the local
pheromone trail values and the local heuristic values can be
represented as follows:

III.

is a city list that the ant have already visited.
In ACS one of the important strategies is how to update
the on pheromone the path to avoid redundant pheromone
overcoming heuristic value. After all ants have completed
their tour, pheromone evaporation on all paths is triggered,
and then each kth ant deposits a quantity of pheromone on
each path it has used. Generally the pheromone updating
equations applied to all the paths are:
W ij (t  n) (1  U )W ij (t )  'W ij (t )
(2)

(5)

IMPLEMENT OF MMAS BASED ON GUP

m

¬¶ 'W

ij , k

(t )

(3)

Figure 1. Simple pipeline of computing process with GPU.

k 1

Where U ¬è [0,1) is the pheromone trail decay coefficient,

A. Ideas mapping MMAS to the GPU
The main idea of the novel implementation mapping
MMAS to GUP is to make full use of parallel process feature
and positive feedback mechanism of the MMAS algorithm.
By applying the parallel processing techniques of fragment
processor based on the SIMD, one can improve MMAS
computing efficiency with GUP‚Äôs accelerated features.
Nowadays, GPU is still deficient on branch and iterative
feedback processing, so the GPU computing implements
were mainly focus on the calculation flow (equation 1)
mentioned in section 2.2.

1-p is the residual coefficient of pheromone, 'W ij (t ) is the
increased amount of pheromone after one loop, 'W ij ,k (t ) is
the deposits of pheromone that kth ant left after one loop.
Here
'W ij ,k (t )

min( Lk ), k 1,2,..., m

The GPU has become an integral part of today‚Äôs
mainstream computing system. It is not only a powerful
graphics engine but also a highly-parallel programmable
processor featuring peak arithmetic and memory bandwidth
that substantially outpaces its CPU counterpart. A large
fraction of the GPU‚Äôs resources exist within programmable
processing cores responsible for executing shader functions.
GPUs maintain high efficiency through the use of multicore
designs that employ both hardware multithreading and SIMD
processing. The transform and lighting computation integrate
into one step in which position, color and lighting of scene
objects are determined by vertex program written in a
custom shader program. Similarly, the texturing and color
composing stages are also collapse into a single abstract
stage where the outputs are determined by shader programs
[4]. Figure 1 shows the simple pipeline of computing process
using GUP resource.

¬≠ [W ij (t )]D [Kij ]E
j ¬è allowk
D
E
¬∞¬∞
(1)
pij , k (t ) ¬Æ ¬¶ [W is (t )] [Kis ]
s¬èallowk
¬∞
0
j ¬ê allowk
¬Ø¬∞
Where allowk {V  tabu k } is the set of cities in the
neighborhood of city i that kth ant can visit at time t, tabu k

'W ij (t )

Q / L, L

if the
Q
¬≠¬∞
Lk
¬Æ
¬∞¬Ø0 otherwise

kth ant pass through the path (i,j)

Where Lk is the length of the path the kth ant toured, Q
is a defined constant.

B. Implement MMAS on GPU
According to section 2 the MMAS includes following
computing steps:
x Process for initialization, which includes initial loop
count,
W min
value,
W max
value,

C. Ant Colony System
MMAS is an improved ant system algorithm. Its
improved features are (1) the path which were used by the
best ant in the current iteration received additional
pheromone, (2) pheromone trail values are restricted to the
interval W ij (t ) ¬è [W min ,W max ] , and (3) trails are initialized to

W ij W max , 'W ij

their maximum value W max . This helps avoiding stagnation,

tabu k

51

NULL ;

0 , heuristic value K ij

and

x

x

Process for ant moving, which includes to compute
pij ,k (t ) , to move to next city according to the

to realize the ants‚Äô status transferring action. Firstly, render
D
E
the equation [W ij (t )] [K ij ] into a texture. Secondly, render

probability, to update the tabuk ;

ants‚Äô tabu list into a texture. Thirdly, compute pij ,k (t ) of

Process to update path pheromone, which includes
to get the nearest path of the current iteration, to

every ant, and update their tabu list texture. Next is to render
ants‚Äô tour path and the pheromone trail values into a texture,
and then retrieve data to CPU using FBO.
(4) Compute the shortest path with evaluation function
and update pheromone quality in CPU.
(5) Update the pheromone values and enter next iteration.

compute 'W ij

min

and W ij , to update path pheromone.

In this paper, a MMAS calculation flow based on the
GPU‚Äôs SIMD processing feature was proposed (figure 2).
Obviously, to make full use of GUP resource, three
techniques are applied which are texture construction base on
OpenGL, Frame Buffer Object (FBO) technique and Render
to Texture technique.

IV.

In this paper, we chose typical TSP example with 30
cities and 8 ants and realize MMAS to solve TSP with CPU
and GPU respectively. Our program run on HP XW9300
graphics workstation with Nvidia Quadro Fx 4500 display
card, CPU is AMD 2.79Hz, 2GB RAM. We use standard
C++ and Nvidia Cg as program language and our compiler is
C++ .NET 2003. The parameters of MMAS are listed below:
City coordinates are shown in TABLE I.

glReadPixels() using FBO

glReadPixels() using FBO

Texture
Memory

glTexImage2D

EXPERIMENT

Main
Memory

FBO

TABLE I.

Frame Buffer
GPU

CITY COORDINATES

#define MAXCITY 30
LQW
[3RV>0$;&,7<@ ^

`
LQW
\3RV>0$;&,7<@ ^

`

CPU

Depth Buffer

Figure 2. Diagram illustrate GPU computing.

As mentioned before, the computing bottle neck of
MMAS is the process for an ant to move from one city to
another. We realized the process using GPU resource. Firstly,
at the initial process besides assignment of initial parameters,
the GUP computing environment based on OpenGL was
setup which included OpenGL extension parameters, FBO
texture parameters etc. Additionally, there were some kind of
FBO textures including tabu list texture, distance between
cities texture, path pheromone trail values‚Äô texture, initial ant
location texture etc. The size of these textures were
MAXCITY*MAXANTS. The data format of these textures
was RGBA. These textures were bound to GPU processing
by Cg Fragment Program API. Next process was ants
moving, that was using Cg fragment program to perform
parallel computing of moving to next city actions.
Considering the features of GUP‚Äôs pipeline, here statement
step(a,x) was used to realize the branch computing. Thirdly,
the computing results were retrieved from GPU by FBO
texture. Then one could get the shortest path and update path
pheromone trail values through CPU processing. The loop
steps were listed bellow:
(1) Initialize GPU computing environment, including
GLUT initialization, FBO texture initialization, and Cg
running environment etc.
(2) Enter main loop, including assignment of MMAS
parameters and count of iteration.
(3) Enter iteration process. This process was entirely
running in GPU. We adopted multiple rendering techniques

Other parameters are initialized bellow:
D 1.0 , E 5.0 , U 0.5

W min

0.003 , W max

,

Q=100,

0.34

The results show that our implements can find the
optimized path length that is 423.741. In order to test the
GPU computing efficiency, we use different iteration counts
in finding the shortest path respectively, see TABLE II.
TABLE II.

COMPARISON OF TIME COSTS IN SOLVING MMAS

Count of
GPU costs
CPU costsÀÑmsÀÖ
iteration
ÀÑmsÀÖ
1000
2781
3390
2000
5218
6766
3000
7656
10141
5000
12500
16922
7000
17344
23656
10000
24531
33766
The comparison of running time cost between GPU and
CPU is shown in Figure 3.

52










CPU. Our implement is suitable to GPGPU and can be used
on solving other similar computing problem.

PV

ACKNOWLEDGMENT
This paper supported by the National Natural Science
Foundation of China under Grant No. 60832011; the Doctor
Starting Fund of Civil Aviation University of China under
Grant No. 06QD07S; the National High-Tech Research and
Development Plan of China under Grant No.
2006AA12A105.

*38
&38








REFERENCES








[1]



Figure 3. Comparison of computing cost.

V.

[2]

CONCLUSIONS
[3]

In this paper, an implement of MMAS to solve TSP
based on GPU was presented. The novel method realized fast
solution of MMAS algorithm through constructing texture
suitable to GUP processing. The experimental results show
GPGPU has good accelerated performance on large scale
computing. Because the GPU‚Äôs SIMD features are designed
for graphics pipeline, it is more difficult in realization than

[4]

53

Dorigo M., ‚ÄúTree-Maps: a space-filling approach to the visualization
of hierarchical information structures‚Äù Proceeding of IEEE
Visualization ‚Äô91, IEEE Computer Society Press, 1991, pp. 284-291.
Cambardella L. M., Dorigo M, ‚ÄúEfficient Scheduling Focusing on the
Duality of MPL Representatives,‚Äù Proc. IEEE Symp. Computational
Intelligence in Scheduling (SCIS 07), IEEE Press, Dec. 2007, pp. 5764, doi:10.1109/SCIS.2007.357670.
Stutzle T., Hoos H., ‚ÄúThe MAX-MIN Ant System and Local Search
for the Traveling Salesman Problem[C]‚Äù, Proceedings of the IEEE
International Conference on Evolutionary Computation, 1997„ßòpp.
309~314.
Oliver Deussen, David Ebert, el, ‚ÄúGPGPU: General-Purpose
Computation on Graphics Hardware‚Äù, In SIGGRAPH‚Äô2004 Course
Notes 32, 2004.

