2009 Sixth International Conference on Computer Graphics, Imaging and Visualization

Particle Importance based Fluid Simulation
Youquan Liu3,
Jian Zhu1,
Enhua Wu1, 2
Yuanzhang Chang1, Kai Bao2,
1
Dept. of Computer and Information Science, University of Macau, Macao, China
2
State Key Lab. of Computer Science, Institute of Software, Chinese Academy of Sciences, China
3
School of Information Engineering, Chang’an University, Xi’an, China
changyuanzhang@gmail.com, baokai@ios.ac.cn, youquanliu@hotmail.com,
rockeyzhu@163.com, EHWu@umac.mo
corresponding value is smaller than predefined Reynolds
number threshold and vorticity threshold, it is signed as
an unimportant one, and some calculations are
eliminated for this time step. Moreover, to improve the
popular surface tension model, an extra smoothing
procedure is presented. Experiments show that our
method greatly improves the simulation speed without
visual quality sacrifice.
This paper is organized as follows: the next section
we review the previous related work. Section 3 will
mainly introduce our method in detail and discuss its
advantage. Section 4 will show the 2D and 3D
experimental results and compare our method with
previous method. Finally, we conclude our work and
give an outlook on future work in Section 5.

Abstract
We present a novel method using particle
importance to accelerate the traditional Smoothed
Particle Hydrodynamics based fluid simulation.
Reynolds number and vorticity are exploited as the new
criteria to evaluate the importance for each particle. If a
particle is unimportant, its current acceleration and
velocity are used to update values in the next time step
with the complex state updating step removed, in this
way the computation time is saved. We also propose an
improved surface tension model. The experiments
demonstrate that this new method is not only easy to
implement, but also greatly improves the simulation
speed without visual quality sacrifice.
Keywords--- fluid simulation; Reynolds number;
Smoothed Particle Hydrodynamics; vorticity; surface
tension

2. Related Work
Physically-based fluid simulation has a long history
in CG. It is mainly comprised of Eulerian and
Lagrangian approaches. Since our method is based on
SPH, we will refer more to this approach.

1. Introduction
Over last two decades, physically-based fluid
simulations are becoming increasingly popular in
computer graphics (CG) community. Generally, for the
simulation of free surface flow, besides Eulerian method,
particle-based approaches like Smoothed Particle
Hydrodynamics (SPH) have been widely used with a lot
of realistic results achieved.
However, to accelerate the fluid simulation is still a
challenging problem, especially for some real-time
systems with crucial performance demanding, such as
computer games, virtual reality, since the computational
burden is so heavy. To lessen the performance problem,
more and more contributions come up on this topic
recently.
Compared to existing work, we make a better
tradeoff between the visual quality and simulation speed:
accelerate the algorithm to the maximum while keeping
the simulation visually plausible. In this paper we extend
the idea of adaptive sampling with defining two physical
criteria: Reynolds number and vorticity. When particle’s
978-0-7695-3789-4/09 $25.00 © 2009 IEEE
DOI 10.1109/CGIV.2009.40

2.1. Eulerian Approach
Eulerian method discretizes the spatial domain into
stationary grid. It can keep fluid incompressible easily
but difficult to guarantee mass conservation. Foster et al.
[1-2] firstly proposed solving the full 3D Navier-Stokes
equation on a regular grid in the CG community. Later,
Stam [3] introduced the semi-Lagrangian scheme and
implicit integration solver, making simulation
unconditionally stable. Foster et al. [4] developed the
level set method, with adding particles inside the liquid
for tracking the fluid interface. Then, Enright et al. [5]
added particles outside the fluid to improve that method,
which is known as ‘particle level set’. They also
extrapolated velocities across the water surface into air
region, obtaining more accurate and better visual effects.

38

2.2. Lagrangian Approach

[25] proposed a two-way coupled simulation framework
to utilize the advantages of SPH and particle level set.

SPH, as one of mostly used Lagrangian approaches,
represents the fluid body by a set of particles, which
possess individual material properties and move
according to the governing conservation equations. It
guarantees mass conservation but is weakly
compressible. Desbrun et al. [6] firstly introduced SPH
into CG to calculate interaction forces for large
deformation. Later, Müller et al. [7-8] further
popularized SPH technique, simulating free surface
fluids in interactive manner. Clavet et al. [9] presented a
new particle-based method for viscoelastic fluid
simulation. They firstly put forward double density
relaxation method for enforcing incompressibility and
particle anti-clustering. Adams et al. [10] used adaptive
sampling to improve simulation speed. Recently, more
complicated water phenomena are simulated, for
example: fluid flowing through a porous deformable
material [11], interaction between fluids and granular
materials [12-13]. A thorough and comprehensive
introduction to SPH is given in [14] and SIGGRAPH
course notes [15].
For SPH method, Nearest Neighbor Particle Search
(NNPS) occupies most of the time, in order to avoid allpair search, cell-based method [16], tree-based method
[10], and bucket algorithm [17] are widely used.
Viccione et al. [18-19] stored a ‘Verlet’ list of probable
neighboring particles for each moving particle, to
eliminate NNPS for some time steps, but the speed-up is
limited because the time of partitioning particles into
cells only occupies a small proportion of the total time.
Though Onderik et al. [20] proposed ‘Cell Indexing’ to
encode particles’ indices and coordinates into keys, and
sort them using linear time radix sort, it doesn’t reduce
simulation’s algorithm complexity but adopts timeconsuming sorting method. Kipfer et al. [21] proposed a
grid-less data structure to efficiently handle
neighborhood queries in sparse particle systems for realtime scenarios. Adaptive sampling strategy can also be
incorporated. Adams et al. [10] introduced sampling
conditions based on geometric extended local feature
size and distance to view frustum to focus computational
resources in geometrically complex regions, while
reducing the number of particles deep inside the fluid,
near thick flat surfaces or particles of low visual interest.
But computing extended local feature size condition is
time-consuming and their sampling conditions are
limited to geometry. Then, Hong et al. [22] exploited
physical property Reynolds number as an adaptive
criterion, but the other criterion depth below the surface
can not be used in complex shape or turbulent water
flow, foam or splash for instance. And nowadays GPU is
often used to accelerate the computation, such as: GPU
employed to search for neighboring particles with tens of
thousands of particles simulated in real-time [23].
There are also other methods. Premože et al. [24]
introduced the Moving Particle Semi-implicit method
(MPS) and gained incompressibility by solving the
pressure globally using Poisson equation. Losasso et al.

3. Importance-based Simulation
Acceleration
This part we will mainly focus on our contribution:
we design new particle importance criteria to speed up
the SPH computation. Firstly, basic SPH formulation and
simulation framework will be explained in section 3.1
and 3.2. Then, our new criteria will be proposed in
section 3.3 and corresponding modified framework in 3.4.

3.1. SPH Formulation
SPH is an interpolation method with each particle
carrying field quantities. The value of a particular
quantity A at any position r can be evaluated by
summing up the contributions of neighboring particles j:
mj
(1)
A(r ) = ∑ AjW (r − r j , h)

ρj

j

The gradient and Laplacian of A also evaluates to:

∇A(r ) = ∑ A j ∇W (r − r j , h)

mj

∇ 2 A(r ) = ∑ Aj ∇ 2W (r − r j , h)

mj

j

j

ρj
ρj

(2)
(3)

Where j iterates over all neighboring particles,

W (r − r j , h) is the smoothing kernel with smoothing
length h , r particle position vector,

m j the mass of

ρ j its density.

particle j and

The governing equations for incompressible flow are
the mass conservation equation (continuity equation) and
the momentum conservation equation (Navier-Stokes
equation):
Dρ
(4)
+ ρ∇ ⋅ v = 0
Dt

ρ

Dv
= −∇p + μ∇ 2 v + ρ g + f surface
Dt

=f

pressure

+f

viscosity

+ ρg + f

(5)

surface

where v , p , ρ , g , μ are velocity vector, pressure,
density, gravitational acceleration vector, and the
dynamic viscosity, respectively. Because the number of
particles doesn’t change and each particle has a constant
mass, mass conservation is guaranteed automatically.
The pressure force f

f

viscosity

and viscosity force

are computed as [7][10]:
fi pressure = −∑
j

39

pressure

m j pi + p j
ρj

2

∇W (ri − rj , h)

(6)

fi viscosity = μ ∑
j

mj
( v − v i )∇ 2W (ri − rj , h)
ρj j

forces like gravity and surface tension. In addition, the
sum of these forces apply to equation (5), we can get
particle’s acceleration. Finally, particle velocity and
position are updated employing time integration method.
Standard methods include explicit integration, Leapfrog,
predictor-corrector, and Runge-kutta etc., which have
different advantages and disadvantages.

(7)

In order to compute equations (6) and (7), we need
to calculate density as follows:
(8)
ρi = ∑ m jW (ri − rj , h)
j

The density summation formula is used, since it
conserves the mass exactly. The pressure of a particle is
derived from the ideal gas state equation [6]:
(9)
pi = k ( ρi − ρ 0 )
where k is a gas constant depending on the temperature,
and ρ 0 the rest density.
Surface tension is induced by unbalanced attractive
forces between molecules at the fluid surface, and it has
the inverse direction of the surface normal. Firstly,
surface normal is defined as:
mj
(10)
ni = ∑ ∇W (ri − r j , h)
j ρj
All of the above smoothing kernels is the same to
paper [7]. Then, surface tension is computed as:
n
(11)
fisurface =| ni | σ i = σ n i
| ni |
where σ is the tension coefficient. Then, we present a
new smoothing procedure to get a smoother surface
tension force:
∑j f jsurfaceWsmooth (ri − r j , h)
(12)
fisurface =
W
(
r
−
r
,
h
)
∑ smooth i j
j

where, Wsmooth (ri − r j , hi ) is a new smoothing kernel:
r 2
⎧
⎪1 − ( ) 0 ≤ r ≤ h
Wsmooth (r, h) = ⎨
h
⎪⎩ 0
otherwise

Figure 1: Simulation framework

(13)

3.3. Importance Criteria

By substituting equations (6) (7) (12) into equation
(5), particle’s acceleration can be easily integrated, but
the simulation time step needs to satisfy the CFL
condition for stability reason [26].

Two particle importance criteria are proposed as
follows:
3.3.1. Reynolds Number

3.2. Simulation Framework

Reynolds number Re is a dimensionless number that
gives a measure of the ratio of inertial forces to viscous
forces:
ρVL
(14)
Re =
μ
where ρ is the fluid density, V the mean fluid velocity,
which are approximated by each particle’s density and
velocity. L is the characteristic length and μ the

The black part in figure 1 depicts an ordinary SPH
simulation procedure. Firstly, several system parameters
should be initialized, including the scene geometry,
initial particles distribution and their physical attributes,
time step, and boundary (virtual or ghost) particles
generation etc. NNPS is the first step of main loop,
particles within the support domain of each concerned
particle are found. This part is very important as
experiments show that it takes about 50% of the total
time. Then, smoothing function, its gradient and
Laplacian are computed for all interaction particle pairs.
Particles’ densities are evaluated using equation (8) and
pressures using equation (9). After that, the internal
forces like pressure force and viscosity force arising
from particle interactions are calculated, so do external

dynamic viscosity, which are set to 1 and 1.0 ×10−3
respectively in our experiments. Re is used to measure
the extent of turbulence, such as laminar or turbulent
flow: the former occurs at low Re, where viscous forces
are dominant, and is characterized by smooth, constant
fluid motion; while turbulent flow occurs at high Re and
is dominated by inertial forces, which tend to produce

40

random eddies, vortices and other flow fluctuations.
Therefore, the particle is important if its Re value
exceeds some threshold.

table 1. There are 2500 particles and the Re threshold is
0.3 × 106 . It takes about 15.2991ms for one simulation
time step, comparing to original 16.8277ms, all of which
is mean value of initial 800 steps, so the simulation
speedup is 9.1%. Figure 2 is the simulation result, though
there are a few scattered particles during the process, it
has little influence on the overall performance ， the
overturning wave front can be clearly seen in (2-e).

3.3.2. Vorticity
In fluid dynamics, vorticity vector is related to the
amount of local angular rate of rotation and can be
defined as the curl of the fluid velocity：
(15)
ζ = ∇× v

Table 1 Experimental parameters and results

where ζ is vorticity vector. Vorticity magnitude reveals
how much particle changes its velocity direction. So if a
particle’s value is over the predefined threshold; then its
velocity direction varies greatly and can be set as
important one. Equation (15) is evaluated using SPH
interpolation:

ζi = ∇ × v i

=

∑
j

mj

ρj

( v j − v i ) × ∇W ( ri − rj , h )

Dam
Break
Cube Fall
Armadillo
Fall (1)

(16)

The red part in figure 1 shows our new added
simulation steps. After updating particle velocity, we can
easily compute its Reynolds number according to the
new density and velocity, meanwhile vorticity can also
be calculated using the new position and velocity.
Because vorticity calculation is time consuming and each
step’s increment is small, we just update it when the step
is a multiple of a constant ‘VoritcityStep’. Then, we
decide whether each particle is important or not, when
particle’s corresponding value is smaller than Reynolds
number threshold and vorticity threshold, it is signed as
unimportant, and just use current acceleration and
velocity to update values in the next time step (path 2),
while important one has to circle into the regular main
loop (path 1). Moreover, if unimportant particle has
chosen path 2 for more than a constant times, which is
set value 10 in the experiments, then it should be
evaluated as important one this step. Our framework
modification reduces computation cost greatly while
maintaining the calculation accurate enough, what’s
more, it is easy to implement.

Improved
Time
(ms)
/steps

speedup

6

16.8277
/800

15.2991
/800

9.1%

0. 65
averageRe

38.7725
/500

35.3633
/500

8.8%

0.7
averageRe

108.807
/1000

94.4765
/1000

13.2%

845.25
/1100

10.5%

Time
step
(s)

Re
Threshold

2500

0.0003

0.3 × 10

0.001

2457
6523

0.001

×

×

×

Armadillo
Fall (2)

52315

0.001

0. 6
averageRe

944.475
/1100

Bunny
Fall

19204

0.001

0. 5
averageRe

315.81
/1100

290.6
/1100

8.0%

averageRe

111.024
/1000

97.4955
/1000

12.2%

CGIV
2009

3.4. Modified Simulation Framework

Average
Time
(ms)
/steps

Number
of
particles

6021

0.001

×
0. 6 ×

(2-a)

(2-b)

(2-c)

(2-d)

(2-e)

(2-f)

Figure 2 Dam-break test
For the following 3D experiments, the resulting
animations extracts triangle mesh using marching cubes
algorithm [29] and rendered with an open-source raytracer POV-Ray [30].

4. Experimental Results

Cube Fall To examine efficiency of the improved
surface tension model, a cube shaped water is initially in
the air, falls and gradually transforms into a sphere
according to the surface tension and other forces. The
third row in table 1 lists its parameters. The Re threshold
is 0.65 times the average Re of all particles (averageRe).
This simulation reaches 8.8% speedup with 38.7725ms
as the original and 35.3633ms as modified, all of which
are average values of the initial 500 steps, ending with
the water dropping on the ground and splashing. From

To demonstrate the effectiveness of our method,
several experiments are simulated on a computer with
Intel Core2 Duo E8400 3.0G CPU, 3G memory and
GeForce 8800 GT GPU. The programs were written in
C++ and OpenGL. The related experimental parameters
and results are shown in table 1, and the vorticity
threshold is assigned value 0.6.
Dam Break Following [27] and [28], the classical
2D Dam-break test has been implemented, and its
parameters and results are shown in the second row of

41

Figure 3, we can see our new method achieves
satisfactory simulation effect.

(3-a)

(3-b)

(3-c)

(3-d)

with different initial particle sampling distance, while the
sixth row bunny shaped. It shows that our speedup also
applies to scenes with more particles from the fact
speedup is 13.2% with 6523 particles, 10.5% with 52315
particles and 8.0% with 19204 particles. Figure 4 shows
some keyframes of bunny shaped fluid animation
sequence. Figure 5 is a curve chart related to experiment
armadillo fall (2), which compares the time cost of every
simulation step between the previous method and our
improved one, and we can observe that each step’s time
cost is greatly decreased after around step 150.

Figure 5 Comparison of each step’s time cost

(3-e)

CGIV 2009
Finally, a simulation of cube shaped
water, which drops down to the ground with “CGIV
2009” shaped obstacle, is carried out. According to the
seventh row of table 1, the speedup is 12.2% with 6021
particles. Figure 6 shows some frames from top view and
we can see when the flow settles down in the end, the
shape of the obstacle becomes clear.

(3-f)

Figure 3 Cube fall simulation at times of 0s,
0.17s, 0.215s, 0.26s, 0.3s, and 0.4s respectively

(4-a)

(4-c)

(4-e)

(4-b)

(6-a)

(6-b)

(6-c)

(6-d)

(6-e)

(6-f)

(4-d)

(4-f)

Figure 4 Bunny fall simulation at times of 0s,
0.25s, 0.325s, 0.4s, 0.58s, and 0.99s respectively
Animal Fall
We animate several animal shaped
water dropping down from air to the ground. The fourth
and fifth row of table 1 relate to armadillo shaped water

Figure 6 CGIV 2009 simulation at times of 0s,
0.2s, 0.3s, 0.425s, 0.65s, and 2.0s respectively

42

Conclusion and Future Work

[14] Monaghan J. J. Smoothed Particle Hydrodynamics.
Reports on Progress in Physics. 68:1703-1759. 2005.
[15] Bridson R., Müller-Fischer M. and Guendelman E. Fluid
Simulation: Siggraph 2006 course notes. In SIGGRAPH’06:
ACM SIGGRAPH 2006 Courses. ACM Press, 1-87. 2006.
[16] Simpson J. C. Numerical Techniques for Threedimensional Smoothed Particle Hydrodynamics Simulations:
Applications to Accretion Disks. The Astrophysical Journal.
822-831. 1995.
[17] Liu G. R. and Tu Z. H. An Adaptive Procedure Based on
Background Cells for Meshless Methods. Computer Methods in
Applied Mechanics and Engineering.191:1923-1943. 2002.
[18] Viccione G., Bovolin V. and Carratelli E.P. A Fast
Neighbour-search Algorithm for Free Surface Flow
Simulations Using SPH. ECCOMAS Thematic Conference on
Computational Methods in Structural Mechanics and
Earthquake Engineering. Rethymno, Crete, Greece, 13-15.
June 2007.
[19] Viccione G., Bovolin V. and Carratelli E.P. Defining and
Optimizing Algorithms for Neighbouring Particle Identification
in SPH Fluid Simulations. International Journal for Numerical
Methods in Fluids. 58:625-638. 2008.
[20] Onderik J., Durikovic R. Efficient Neighbor Search for
Particle-based Fluids. Journal of Applied Mathematics,
Statistics and Informatics (JAMSI). 4:29-43. 2008.
[21] Kipfer P., Westermann R. Realistic and Interactive
Simulation of Rivers. In GI ’06: Proceedings of Graphics
Interface 2006. 41-48. 2006.
[22] Hong W.,House D. H. and Keyser J. Adaptive Particles
for Incompressible Fluid Simulation. The Visual Computer.
24:535-543. 2008.
[23] Harada T., Koshizuka S. and Kawaguchi Y. Smoothed
Particle Hydrodynamics on GPUs. In Proceeding of Computer
Graphics International 2007. 63-70. 2007.
[24] Premoze S., Tasdizen T., Bigler J., Lefohn A. and
Whitaker R.T. Particle-Based Simulation of Fluids.
Eurographics2003. 22(3):401-410. 2003.
[25] Losasso F., Talton J., Kwatra N. and Fedkiw R. Two-way
Coupled SPH and Particle Level Set Fluid Simulation. IEEE
Transactions on Visualization and Computer Graphics. 14:
797-804. 2008.
[26] Courant R., Friedrichs K. and Lewy H. On The Partial
Difference Equations of Mathematical Physics. IBM Journal,
215-234. March 1967.
[27] Monaghan J. J. Simulating Free Surface Flows with SPH.
Journal of Computational Physics. 110:399-406. 1994.
[28] Becker M. and Teschner M. Weakly Compressible SPH
for Free Surface Flows. Proceeding of Symposium on
Computer Animation 2007. 63-72. 2007.
[29] Lorensen W. E. Marching Cubes: A High Resolution 3D
Surface Construction Algorithm. Computer Graphics. 21(4):
163-169. 1987.
[30] POV-Ray url: http://www.povray.org/

We have presented new criteria Reynolds number
and vorticity to evaluate particle importance, which are
used to reduce computation cost. An improved surface
tension model is also proposed. According to the
experiments, our method is easy to implement, and
greatly improves the simulation speed without visual
quality sacrifice. As future work, we plan to further
speed up our algorithm using GPU. For large and
complex scene, we can also add new importance
criterion such as distance to the view frustum similar to
Adams et al. [10].

Acknowledgements
This work has been supported by National Natural
Science Foundation of China under Grant No. 60773030
and Grant No. 60833007, the Studentship & Research
Grant of University of Macau.

References
[1] Foster N., Metaxas D. Realistic Animation of Liquids.
Graphical Models and Image Processing. 58, 5: 471-483.
1996.
[2] Foster N., Metaxas D. Controlling Fluid Animation.
Proceedings of the 1997 Conference on Computer Graphics
International. IEEE Computer Society, 178-188. 1997.
[3] Stam J. Stable Fluids. In SIGGRAPH 1999. 121-128.1999.
[4] Foster N., Fedkiw R. Practical Animations of Liquids. In
SIGGRAPH 2001. 23-30. 2001.
[5] Enright D., Marschner S. and Fedkiw R. Animation and
Rendering of Complex Water Surfaces. In SIGGRAPH
2002.736-744. 2002.
[6] Desbrun M., Cani M.P. Smoothed Particles: A New
Paradigm for Animating Highly Deformable Bodies. In
Computer Animation and Simulation ’96. 61-76. 1996.
[7] Müller M., Charypar D. and Gross M. Particle-based Fluid
Simulation
for
Interactive
Applications.
In
SIGGRAPH/Eurographics Symposium on Computer Animation.
154-159. 2003.
[8] Müller M., Solenthaler B. and Keiser R., Gross M. Particlebased Fluid-Fluid Interaction. In SCA ’05: Proceedings of the
2005 ACM SIGGRAPH/Eurographics symposium on Computer
animation. 237-244. 2005.
[9] Clavet S., Beaudoin P. and Poulin P. Particle-based
Viscoelastic Fluid Simulation. Proceedings of the 2005 ACM
SIGGRAPH/Eurographics symposium on Computer animation.
219-228. 2005.
[10] Adams B., Pauly M., Keiser R. and Guibas L.J. Adaptively
Sampled Particle Fluids. In SIGGRAPH’07. July 2007.
[11] Lenaerts T., Adams B. and Dutré P. Porous Flow in
Particle-Based Fluid Simulations. In SIGGRAPH 08: ACM
SIGGRAPH 2008 Papers. 49:1-8. 2008.
[12] Rungjiratananon W., Szego Z., Kanamori Y. and Nishita
T. Real-time Animation of Sand-Water Interaction. In
Computer Graphics Forum (Pacific Graphics 2008). 27: 18871893. 2008.
[13] Lenaerts T., Dutré P. Mixing Fluids and Granular
Materials. Proceedings of Eurographics 2009. 2009.

43

