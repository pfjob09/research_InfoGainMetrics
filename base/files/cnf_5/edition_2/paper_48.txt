2009 Sixth International Conference on Computer Graphics, Imaging and Visualization

Image Segmentation using Adaptive Tree-structured Wavelet Transform

Chi-Man Pun and Hong-Ming Zhu
Department of Computer and Information Science
University of Macau, Macau SAR, China
E-mail: {cmpun, ma86560}@umac.mo
image. Texture segmentation is an important task in many
applications, or it can be combined with other low-level
features segmentation to improve the performance. Due to
the character that the wavelet transform can well represent
the texture information and its efficiency implemented by
the conventional tree structure, wavelet transform has been
widely used for texture analysis in a multiresolution
framework [18-21]. The experimental result will
demonstrate that our implementation greatly improve the
efficiency compared to normalized cut algorithm, while
achieves a reasonable accuracy of segmented result. The rest
of the paper is organized as follows. In Section 2, we give a
review on tree-structured wavelet transform and energy
feature extraction. In Section 3, our wavelet-based texture
segmentation algorithm will be described in detail.
Experimental results are presented in Section 4. Conclusions
are given in Section 5.
.

Abstract—In this paper we propose a novel approach for image
segmentation using adaptive tree-structured wavelet transform
for texture analysis. We first split the input image into NxN
blocks, calculate the distances between neighbor blocks by the
energy signatures of the wavelet coefficients of the adaptive
tree-structured wavelet transform of each block. Then we
merge blocks with smallest distances to form larger regions.
The process will repeat until we got desired number of regions.
Experimental results show that our proposed method
outperforms the existing image segmentation method.
Keywords- image segmentation, texture analysis, treestructured wavelet transform

I.

INTRODUCTION

Image segmentation is an extensively studied area [1-4]
since a few decades ago due to its applications in computer
vision, while it's still a complicated, unwell solved problem
in image processing and analysis according to some specific
view or requirement, such as for general images with no
prior knowledge. The target of image segmentation is to
successfully extract semantic objects correctly from the
background in a given image, this is a crucial and difficult
task, and the performance of the subsequent image
processing procedures like retrieval will strongly dependent
on the quality of the segmentation. In general, image
segmentation algorithms are either boundary-based or
region-based methods, which can vary from k-means
clustering algorithm to thresholding procedures, to heuristic
region growing processes, and to the sophisticated
hierarchical methods. Recently, algorithms based on graph
theory have a better favoring potential for fulfilling the
above requirements, these graph-based methods drawn
many attentions in recent years. Both tree-structured
segmentation [5-11] and spectral clustering [12-17]
commonly represent an image to be segmented as a graph.
The nodes correspond to the image pixels, and the edges
represent the relations between pixels with a weight
indicates the (dis)-similarity between two pixels. The best
known graph-based algorithm, normalized cut[16, 17], can
detect object boundaries precisely. However, oversegmented problem will occur if the boundaries are illdefined, and this approach is computationally expensive, it
has been proved to be NP-hard.
In our proposed approach, an adaptive tree-structured
wavelet transform is applied to extract texture feature of an
978-0-7695-3789-4/09 $25.00 © 2009 IEEE
DOI 10.1109/CGIV.2009.32

II. ADAPTIVE TREE-STRUCTURED WAVELET
TRANSFORM FOR FEATURE EXTRACTION
The development of our texture segmentation is
motivated from Chang and Kuo’s work[22], in their
research they propose a multiresolution approach based on a
tree-structured wavelet transform for texture analysis and
classification to overcome the difficulty that the traditional
pyramid-type wavelet transform cannot well represent the a
texture with significant information often appears in the
middle frequency channels. We adopt this technology in our
segmentation algorithm according to its excellent efficiency
and performance.
Figure 1 shows an example of a decomposition tree
with decomposition structure encoding, and the feature
vector size is 16. “114” means it’s the diagonal coefficient
at 3rd level, while its 1st and 2nd level parent nodes are
approximation coefficients. The decomposition structure for
each sub-image’s decomposition will be preserved for
comparison, which will be described in detail in section 3.

290

112
113 114

12

13

14

2

41

42

43

44

3

Figure 1 Decomposition structure example

The process to decompose a (sub-) image is shown
below. Each decomposition is followed by log energy
calculation for each coefficient, and the sub image with
maximal log energy will be passed to next decomposition
until we get a specified number of features.

Figure 2 NxN block splitting process

Algorithm I – Feature Extraction by Adaptive Treestructured Wavelet Transform
Input: image X, feature vector size fvsize
Step 1: initialize f=[X, logEnergy(X)]
Step 2: recursively decompose X
While size(f) < fvsize
subX= Sub image in f with max log energy
[cA,cH,cV,cD]=dwt2 decomposition of subX
p = p + [subX/2, logEnergy(cA)] //cH, cV, cD
calculate decomposition structure
Step 3: Normalize log energies by corresponding sub image
size.
Output: X’s features of size fvsize, decompose structure

III.

IMAGE SEGMENTATION

The procedure involved in the proposed segmentation
algorithm contains two main steps: block splitting and
region merging. Block splitting process shown in Figure 2 is
to split the input image into NxN blocks of small size, and
apply adaptive tree-structured wavelet transform to calculate
the features for each block which are used for distance
calculation. The procedure shown in Figure 3 is to merge
blocks to form a specified number of regions based on
texture similarity between neighbor blocks.

Figure 3 Region merging process

A. Image splitting and distance calculation
We didn't include color feature in our algorithm, so the
input image will be converted to a gray scale version in
advance of any further process in case if it's a true color

291

image. Also the input image will be resized to 2nx2n to
convenience the splitting process.
Image splitting and distance calculation algorithm split
the input image into NxN blocks, and calculate the distance
between each block and its upper/left neighbors. The
number of blocks depends on the block size which is
specified as a parameter. The algorithm is given as follows.

notation to indicate the image segment which contains
multiple blocks. The algorithm is described as follows:
Algorithm III – Region Merging
Input: NxN blocks R0 with distances D0, minimal region
size N0, number of regions Nr
Step 1: let R1=R0, if minSize(R0)<N0, then R1={ R1 |
size(R1)< N0, R1  R0} which are regions with size smaller
than N0.
Step 2: find union region R = {R2 U R3 | distance (R2, R3) =
min (D0)}
Step 3: delete distance between Ri, Rj and their neighbors.
D0 (Ri, Rj)=[], where Ri  R or Rj  R
Step 4: Region merging. Label(R) =new label L
Step 5: find blocks along common edges between R and its
neighbor region.
for each block Bi in R
classify Bi’s 4 neighbors Bj to regions Rn if
Label(Bj)~=L
Step 6: calculate average distance between R and its
neighbor regions

Algorithm II – Image Splitting and Distance Calculation
Input: image X, blocks size S0, feature vector size S1
Step 1: calculate the number of blocks N=size(X)/S0
Step 2: calculate S1 log energies and decomposition
structure for each of N xN blocks
Step 3: calculate distance between neighbor blocks
For each block Bi, and its upper/left neighbor Bj
if decomposition structures of Bi & Bj are same.
m

dist  i, j    | Ei[k ]  Ej[k ] |

(1)

k 1

else
m

dist  i, j  

 | Eij[k ]  Ej[k ] |  | Ei[k ]  Eji[k ] |
k 1

2
Output: NxN blocks with distances

(2)

dist  R, Rn  

In step 2, tree-structured wavelet transform described in
section 2 is applied to each block to calculate the block's
texture feature description as a number of normalized log
energies, as well as its decomposition structure. According
to the consideration of wavelet decomposition character and
efficiency, the parameter feature vector size depends on the
block size. If the block size tends to be small, one level
decomposition (feature size = 4) is done for each block.
Otherwise, multilevel decomposition is done instead so the
decomposition structure may be different between two
neighbor blocks. In step 3, distances will be calculated
between a block and its upper/left neighbor blocks.
Considering two blocks’ decomposition structures, if they
are the same, the distance is calculated as the sum of the
differences along two feature vectors, where Ei[k] in (1.1) is
the k-th item in block i’s log energy feature vector. In the
other case that two blocks’ decomposition structures appear
different, both blocks need to be re-decomposed, and Eij[k]
in (1.2) is the k-th item of block i’s feature vector, which is
the log energy that calculated by re-decompose block i base
on j’s decomposition structure. And so is the same as Eji[k].
As the structures are made to be same, then the distance will
be the mean of two.

1 m
 dist (i, j )
m k 1

(3)

Step 7: if size (R0)>Nr, go to step 1.
Output: segmented image.
The first two steps find two neighbor regions with
minimal distance. In our intuitive experience, objects that
we are interested are always not with small size compared to
image size, to avoid isolated blocks appear as the final
regions, we specify a parameter to indicate the minimal
region size (the number of blocks should be in a region). So
we tend to firstly merge those regions with size less than the
minimal size. After such two regions found, we update the
labels of blocks in these two regions to be the same, and
destroy the distance relationships between these two regions
and their neighbor regions which will be updated in Step 5
and step 6. We scan blocks in the new merged region to
check their neighbor blocks, and classify all such blocks to
corresponding common edges between regions based on
their labels. So the distance between the merged region and
its neighbor can be calculated by (1.3) as the mean of
distances between block pairs along the common edge. The
process above continues until we get required number of
regions.

B. Region merging

IV.

After the distances have been calculated between all
neighbor blocks, region merging procedure will follow to
form a specified number of regions. Here we use the

EXPERIMENTAL RESULTS

There are several parameters that can affect the
performance and efficiency of the algorithm. So firstly we

292

adjust the parameters to select the value that make the result
to be the best.

(a)

(a)

(b)

(c)

(e)

(f)

(c)

(d)

(d)

(b)

Figure 5 Image segmented into 5 regions, use 8x8 block size and
different minimal region size. a) 5 blocks. b) 10 blocks. c) 15 blocks. d)
25 blocks. e) 35 blocks. f) 50 blocks

(e)

Figure 4 Image segmented into 5 regions with minimal region size of 25
blocks. a)4x4 with 30.25s. b) 8x8 with 3.09s. c) 16x16 with 5.67s. d)
32x32 with 1.48s. e) 64x64 with 0.45s

Another adjustable parameter is the minimal region size
which indicates that in the region merging process, regions
consist of less than a specified number of blocks are tends to
be merged first. In most cases, an object presented in an
image that we are interest has a large size. Figure 5 gives the
corresponding results according to different region sizes.
Since the computation complexity only depends on the
block size which was discussed above, here we don’t
explore it. Comparing region boundary accuracies in (a)-(e),
we prefer the segmentation regions with minimal size of 25
blocks since it can detect the most significant boundaries
which is not too much rugged.

In image splitting and distance calculation process,
input image will be splitted into NxN blocks where N
depends on the specified block size. With large blocks, the
following merging process will be quite efficient; however
regions in the final segmented image can’t achieve smooth
boundaries. And the feature vector size is also depends on
the block size, large block will be decomposed by structured
wavelet transform for multiple times to get more features,
which cause a high possibility that decomposition structures
between two neighbor blocks are different and thus both
blocks need to be re-decomposed based on each other’s
structure so that distance between can be calculated. This is
extremely computationally expensive so we tend to split an
image into blocks with small size. Consider that region
merging with too small blocks will also cause efficiency
problem, we adjust the block size to be a reasonable value
8x8, and so there are 32x32 blocks for an image of size
256x256. Figure 4 show the segmentation results of
different block size, (a) can achieve most smooth boundaries
but it’s computationally expensive, (b) is the reasonable one
on both performance and efficiency. (c)-(e) with larger
block size and can’t detect a boundary precisely.

(a)

(b)

(c)

(d)

Figure 6 Compare with normalized cut algorithm according to
efficiency. We adopt the best parameters for our texture segmentation.
a) N-cut 5 regions with 38.13s. b) N-cut 10 regions with 37.77s. c)
Texture segmentation 5 regions with 3.36s. d) Texture segmentation 10
regions with 3.52s

293

In image retrieval applications, we typically try to
search for images contain similar objects with the sample
image, and the number of interested objects is always not
too many. Figure 6 shows the comparison between our
wavelet texture segmentation and the most well know graph
segmentation algorithm--normalized cut, images are
segmented into 5 and 10 regions respectively. Results in (a)
and (b) show that N-cut can get segmentation with more
smooth and precise boundaries. However, comparing with
(c) and (d) which are the results of texture segmentation, Ncut segments more regions on the background and also has
over segmentation problem on Lena. The texture
segmentation can separate the hat from the background
which N-cut cannot. Another attractive achievement we get
is the great efficiency improvement, our proposed algorithm
takes 11 times average less time than N-cut.

[6]
[7]

[8]
[9]

[10]

[11]

V.

CONCLUSION

We proposed a novel approach for image segmentation
using adaptive tree-structured wavelet in this paper. Three
algorithms: Feature Extraction by Adaptive Tree-structured
Wavelet Transform, Image Splitting and Distance
Calculation, and Region Merging are presented.
Experimental results show that our proposed method
outperforms the existing image segmentation method
normalized cut in terms efficiency. Our proposed algorithm
takes 11 times average less time than N-cut. Future work
may focus on integrate other features such as shape and/or
color features in the proposed image segmentation for better
performance.

[12]

[13]

[14]

[15]

ACKNOWLEDGMENTS

[16]

The authors would like to thank the referees for their
valuable comments. This work was supported in part by the
Research Committee of the University of Macau.

[17]
[18]

REFERENCES
[1]
[2]

[3]

[4]

[5]

N. R. Pal, and S. K. Pal, “A review on image
segmentation techniques,” Pattern Recognit., vol. 26, no.
9, pp. 1277-1294, 1993.
J. S. Suri, K. Liu, L. Reden et al., “A review on MR
vascular image processing algorithms: Acquisition and
prefiltering: Part I,” IEEE Trans. Inform. Technol.
Biomed., vol. 6, no. 2, pp. 324-337, 2002.
J. S. Suri, K. Liu, S. Singh et al., “Shape recovery
algorithms using level sets in 2-D/3-D medical imagery:
A state-of-the-art review,” IEEE Trans. Inf. Technol.
Biomed., vol. 6, no. 1, pp. 8-28, 2002.
H. Trichili, M. S. Bouhlel, and F. Kammoun, “A review
and evaluation of medical image segmentation using
methods of optimal filtering,” J. Test. Eval., vol. 31, no.
5, pp. 398-404, 2003.
P. Felzenszwalb, and D. Huttenlocher, “Image
segmentation using local variation,” Proc. IEEE Conf.

[19]
[20]
[21]
[22]

294

Computer Vision and Pattern Recognition, pp. 98-104,
1998.
P. Felzenszwalb, and D. Huttenlocher, “Efficient graphbased image segmentation ” Int. J. Comput. Vis., vol. 59,
no. 2, pp. 167-181, 2004.
Y. Haxhimusa, and W. Kropatsch, “Segmentation graph
hierarchies,” Proc. Structural, Syntactic, and Statistical
Pattern Recognition, vol. 3138 LNCS, pp. 343-351, Aug.
2004.
Y. Haxhimusa, A. Ion, W. Kropatsch et al., “Evaluating
minimum spanning tree based segmentation algorithms,”
Proc. CAIP, vol. 3691, LNCS, pp. 579-586, 2005.
A. Falcão, J. Stolfi, and R. Lotufo, “The image foresting
transform: Theory, algorithms, and applications,” IEEE
Trans. Pattern Anal. Mach. Intell., vol. 26, no. 1, pp. 1929, Jan. 2004.
A. Falcão, P. Felipe, and A. Paulo, “Image segmentation
by tree pruning,” Proc. 17th Brazilian
Symp. Computer Graphics and Image Processing, pp.
65-71, 2004.
J. Ding, R. Ma, S. Chen et al., “A fast directed tree based
neighborhood clustering for image segmentation,” Proc.
13th Int. Conf. Neural Information Processing, Part II,
vol. 4233, LNCS, pp. 369-378, 2006.
R. Zabih, and V. Kolmogorov, “Spatially coherent
clustering using graph cuts,” Proc. IEEE Conf. Computer
Vision and Pattern Recognition, vol. 2, pp. 437-444,
2004.
Y. Y. Boykov, and M.-P. Jolly, “Interactive graph cuts
for optimal boundary and region segmentation of objects
in N-D images,” Proc. IEEE Int. Conf. Computer Vision,
vol. 1, pp. 105-112, 2001.
Y. N. Andrew, M. Jordan, and Y.Weiss, “On spectral
clustering: Analysis and an algorithm,” Proc. Adv.
Neural Information Processing Systems, vol. 14, pp.
849-856, 2002.
Y.Weiss, “Segmentation using eigenvectors:Aunifying
view,” Proc. IEEE Int. Conf. Computer Vision, vol. 2,
pp. 975-982, 1999.
J. Shi, and J. Malik, “Normalized cuts and image
segmentation,” Proc. IEEE Conf. Computer Vision and
Pattern Recognition, pp. 731-737, 1997.
J. Shi, and J. Malik, “Normalized cuts and image
segmentation,” IEEE Trans. Pattern Anal. Mach. Intell.,
vol. 26, no. 8, pp. 888-905, Aug. 2000.
I. Daubechies, “Orthogonal bases of compactly
supported wavelets,” Comm. Pure Appl. Math., vol. 41,
pp. 909-996, 1988.
Rioul, and M. Vetterli, “Wavelets and signal
processing,” IEEE Signal Processing Mag., vol. 8, no. 4,
pp. 11-38, Oct. 1991.
S. G. Mallat, “Multiresolution approximations and
wavelet orthogonal bases of Lz(R),” Trans. Amer. Math.
Soc., vol. 315, no. 1, pp. 69-87, 1989.
“A theory of multiresolution signal decomposition: The
wavelet representation,” IEEE Trans. Putt. Anal.
Machine Intell., vol. 11, no. 7, pp. 674-693, 1989.
T. Chang, and C.-C. J. Kuo, “Texture Analysis and
Classification with Tree-Structured Wavelet Transform,”
IEEE TRANSACTIONS ON IMAGE PROCESSING, vol.
2, no. 4, pp. 429-441, 1993.

