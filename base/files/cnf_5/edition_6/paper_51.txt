Interacting with a Virtual Dolphin using a Low Cost Multi-screens Immersive
Display System
KC Hui
CAD Laboratory
Department of Automation and Computer-Aided Engineerring,
The Chinese University of Hong Kong,
Shatin, Hong Kong
kchui@acae.cuhk.edu.hk

allows multiple users to experience the same
environment. The CAVE system developed at
Electronic Visualization Laboratory (EVL) in the Iowa
State University [2] used four projection screens as the
floor and three walls of a room. Synchronized images
on the projection screens embed the users in a
computer
generated
environment.
Current
implementation of the CAVE system uses a Silicon
Graphics Onyx2 Infinite-Reality3 system to achieve
real time rendering of complex scene. High
performance RGB projectors are also used to provide
high quality images. Recently, Li W.J. et. al. [4]
proposed a PC-based distributed multiple display
system, which uses the same projection system as the
CAVE. In his system, special devices are required for
synchronizing the displays as well as the shutter
glasses. The software architecture for multi-screen VR
systems has also been discussed in [5].
In addition to the display system, simulating
deformable objects in a virtual environment is a major
concern in systems involving human, or other creatures
(e.g. animal, fish, monsters, etc.). Human and creature
are objects of which shape may change as they move
around. A popular approach is to use the layered
construction technique [6, 7] for modeling characters
while the freeform deformation technique [8] is used
for animating the characters. In order to attain high
frame rates in the display of moving creatures, a
popular approach is to use coarse polygon models of
the creatures animated with a skeleton of rigid links or
enclosing blocks (or cylinders) [9, 10, 11]. A coarse
polygon model may reduce the reality of the system
while a large number of links or enclosing blocks may
be required for animating a creature with a highly
flexible body (e.g. sea creatures such as whales,
dolphins). Tu et. al. [12] used a coarse frame structure
simulating the skeleton of a fish. In this paper, a
different approach is adopted. A curve-pair based axial

Abstract
Construction of a multi-screen immersive display
system usually requires the use of special hardware for
synchronizing the images of the different displays. This
paper discusses the construction of a low cost multiscreen stereoscopic projection system. The projection
system is built on a cluster of personal computers.
Using client-server techniques for controlling and
synchronizing the display images on the screens, the
configuration of the system can be modified to suit
different applications. An application of the system for
interacting with dolphin in a virtual underwater
environment is presented. The dolphin is modeled with
the curve-pair based axial representation technique.
Animation of the dolphin motions is achieved by
adjusting the axial curve-pair. The feeding behavior of
a dolphin is modeled. Based on a heuristic feeding
behaviour, the dolphin is simulated to swim towards
the target object trying to catch it. User may direct the
dolphin to swim towards a certain position by
adjusting the position of the target using simple
keyboard, mouse, or joystick control.

1. Introduction
Virtual reality techniques allow users to experience
an environment, which cannot be easily accessed in
real life. Popular virtual reality system usually allows
users to navigate through a virtual environment
composed of static and moving objects. This requires a
display system capable of providing an immersive
experience to the user. Two most commonly used
display methods for immersive virtual reality system
are the head mounted display [1], and the multiple
projection screens system [2, 3]. A head mounted
display allows a single user to experience the virtual
environment whereas the use of projection screens

1
Proceedings of the Computer Graphics, Imaging and Vision: New Trends (CGIV’05)
0-7695-2392-7/05 $20.00 © 2005 IEEE

representation [13] is used for modeling sea creatures.
Animation of the creature is attained by adjusting the
control points of the curve-pair. This reduces the
number of links required to produce the same effect
using conventional rigid skeleton. Since NURBS
surfaces are used for modeling the creatures, the
smoothness of the creatures is retained while being
animated.
Modeling the behavior of a computer simulated
animal or creature requires modeling the perception,
responds, and motor control of the creature [14].
Reynolds [15] introduced the first behavioral
animation using a model of the flocking behaviour of
birds. The behaviour modeling of virtual human [16,
17] have attracted considerable amount of research
interest. In the behavior modeling of fish, X. Tu and D.
Terzopoulos [12] proposed a framework for simulating
the behavior of artificial fish. A physics based fish
model is used for modeling fish locomotion. A vision
sensor and a temperature sensor are used for modeling
the perception of the artificial fish. A rule based
technique is adopted for modeling the responds of the
artificial fish. Works on the simulation of dolphin’s
behaviour is also presented in [18].

Server

Client
#0

Client
#1

Client
#2

Projector

Projector

Projector

Figure 1. System architecture

is the shape of the object at its local coordinate system,
and Mi(t) is an affine transformation specifying the
location and orientation of Si at time t. Denote Xij as
the object Xi relative to the viewing coordinate system
of the jth display screen. Then

X ij (t ) = S i (t )M i (t )K j

(1)

where Kj is the matrix for transforming the object from
the world coordinate system to the coordinate system
of the view volume of the jth display screen. For
deformable objects, Si(t) have to be updated in every
frame of the display. In general, Mi(t) can be specified
as M i (t ) = R i (t )Ti (t ) where Ri(t) is the rotation of the
object relative to its local coordinate frame, Ti(t) is the
translation specifying the location of the object in the
world coordinate system. Denoting the orientation of
an object as the tuple (α i (t ), β i (t ), γ i (t )) , where αi(t),
βi(t), γi(t) are rotation angles about the x, y and z axes
respectively, Ri(t) can be expressed as

2. System Overview
One major problem in a multiple stereoscopic
display system is the synchronization of images for
different displays. There are two levels of
synchronization. In a system using active shutter
glasses, the flipping between left and right eye images
for all displays have to be synchronized. Special
devices are usually required to achieve the
synchronization. The second level of synchronization
is the synchronization of images for the different
displays. In the proposed system, passive stereoscopic
display is used so that synchronizing the left and right
eye images for the different displays is not required.
The second level of synchronization is essential in the
proposed system in which a PC based distributed
processing approach is adopted.
In the system, a client-server system is adopted
(Figure 1). A server is responsible for controlling and
synchronizing the images on the screens. Each screen
is controlled by one client PC. A projection screen and
a client PC thus constitute a cell of the system. The
number of cells or client PCs can be adjusted without
reconfiguring the system as discussed below.

R i (t ) = R x (α i (t ))R y ( β i (t ))R z (γ i (t ))

(2)

where R x (α i (t )), R y ( β i (t )), R z (γ i (t )) are rotation
matrices about the x, y and z axes respectively.

4. Synchronizing Screen Displays
Denote each client PC with a configuration tuple (j,

φj), where j = 0,…,n is the ID of the client, and φj is
the angle of the projection screen relative to a reference
frame. After displaying a frame, the client ID of the PC
is send to the server. On receiving all n ID’s from the
clients, a message is send to all clients indicating the
new position and orientation of the objects in the next
frame. This ensures that each client PC displays a new
frame when all PCs have finished displaying the
previous one. The number n is increased whenever a
PC login to the system as a client PC, and is decreased

3. Objects in a Virtual Environment
In general, a virtual environment is composed of a
set of objects X i = S i (t )M i (t ) , i = 0,…,n, where Si(t)

2
Proceedings of the Computer Graphics, Imaging and Vision: New Trends (CGIV’05)
0-7695-2392-7/05 $20.00 © 2005 IEEE

when a PC logout of the system. This allows client PCs
to be added or removed from the system while the
system is in operation. Each projection screen is a
display of the same virtual environment so that the
angle of projection φj depicts the view volume of the
corresponding display as shown in Figure 2.

Axial
Curve-pair

y
x
z

5. The Deformable Object Model
Figure 3. An axial dolphin model

Objects in the virtual aquarium system are basically
deformable objects such as dolphins, fishes, etc. These
objects are modeled with a curve-pair based axial
representation [13] which is particularly suitable for
representing deformable free-form objects. An object
Si(t) is a function of a curve-pair, i.e.
S i (t ) = Fi (p i (t ), q i (t ))

or right turn movement, the axial curve is bended in the
x-z plane of the dolphin as shown in Figure 5. A table
of pre-computed dolphin shapes in each client is
constructed. An index to this table can then be used for
communicating the shape of an object among the
clients and the server. This reduces the overhead in
transmitting complex geometric data over the internet.

(3)

where pi(t) is the primary curve specifying the location
of a local coordinate system, qi(t) specifies the twist of
the local coordinate frame about the curve pi(t).
Intuitively, pi(t) specifies the possible bending of Si(t),
whereas qi(t) specifies the twist of Si(t) about pi(t).
As shown in Figure 3, a curve-pair constitutes the
skeleton of a dolphin. Surfaces are specified relative to
a local coordinate frame along the curve pairs. This
allows the objects to be deformed by adjusting the
curve-pair. B-spline curves are used for constructing
the curve-pairs. The shape of the dolphin is thus
completely defined by the control points of the curvepair. Animated movement of the dolphin can be
obtained by simply moving a few control points of the
curves.
Figure 4 shows the shape changes of the dolphin
model by deforming the axial curve-pair. Figure 4a is
the basic shape of the dolphin together with its axial
curve-pair. By bending the axial curve in the y-z plane,
different postures of the dolphin in a swim forward
motion as shown in Figure 4b-4c are obtained. In a left

6. Behavior Model and Motor Control
A basic behavior of an animal is to feed itself. This
includes looking for food, chasing the target, and
feeding after grasping the target. This basic behavior of
a dolphin is specified with a state variable ξ which can
take three values ξ0, ξ1, and ξ2. These state values ξ0,
ξ1, ξ2 corresponds to the states FREESWIM,
CHASETARGET, or LEAVETARGET respectively. It
is assumed that ξ can only change from ξr to ξs, where
r ∈ {0, 1, 2}, s = r + 1, and s = 0 if s > 2. Intuitively,
the dolphin starts looking for food when it is in free
motion (i.e. in FREESWIM state). If a food object
exists in the environment, the dolphin changes from
free motion to chase the target food object (i.e. the
CHASETARGET state). If the food object is caught,
the dolphin swims away from the target (i.e. the
LEAVETARGET state). When the feeding state is
completed, the dolphin will return to the free motion
state and the whole process is repeated.

View target
point for S0

(a)

(b)

S0

S1

φ1

φ2

S2
(c)

View point

Figure 4. Dolphin swim forward motion by
adjusting axial curve-pair on the y-z plane

Figure 2. The projection screens

3
Proceedings of the Computer Graphics, Imaging and Vision: New Trends (CGIV’05)
0-7695-2392-7/05 $20.00 © 2005 IEEE

Tik +1 = Tik + ∆Tik

(a)

(6)

6.2 The Chase Target Motor Control
In the target chasing state, the dolphin has to change
its direction while swimming towards the moving
target. In general, a dolphin only swims in a forward
direction. Whenever the dolphin detects the existence
of a target object, it makes a turn so that the target
object is in the forward direction of the dolphin.
Denote q = (xt, yt, zt) as the location of the target object
relative to the local coordinate system of the dolphin,
this corresponds to making a turn movement until zt ≥
0. As shown in Figure 7, the dolphin moves forward
while changing its direction trying to align itself with
the direction towards the target object.
The dolphin is assumed to have caught the target if
the distance |ri| between the dolphin mouth tip and the
target object is less than a prescribed threshold value.

(b)

Figure 5. Turn postures of dolphin by
adjusting axial curve on the x-z plane
(a) Right turn (b) Left turn

6.1 Free Swim Motor Control
Since the orientation of an object is defined by the
tuple (α i (t ), β i (t ), γ i (t )) , and as the twist of a dolphin
can be adjusted using the axial curve-pair,
then γ i (t ) = 0 and the orientation of the dolphin is

As shown in Figure 7, rik is the displacement from the
dolphin mouth tip to the target object at the kth frame.

specified with the angle pair (α i (t ), β i (t )) . Hence,
Ri(t) can be expressed as
R i (t ) = R x (α i (t ))R y ( β i (t ))

For a static or fixed target, | rik | decreases gradually,
i.e. |rik| ≥ |rik+1|. Since the position of the target can be
adjusted by the user interactively so that |rik| ≤ |rik+1|,
the dolphin may swim pass the object trying to catch
the target. This occurs when zt < 0. Since the dolphin
makes a turn of δα i , δβ i in each frame while

(4)

In general, the position and orientation of the
dolphin may change in every frame. Denoting
α ik , β ik as the rotation angles at the kth frame, then

swimming forward, and δα i , δβ i are small turn angles,
the dolphin will never catch the target if it does not
make a turn greater than 90 degree. Hence, the leave
target motor control is invoked whenever |rik| ≤ |rik+1|
so that the dolphin enters the leave target state. The
result is the dolphin swims away from the target for a
certain distance. While observing that a target object is
still in the environment, the dolphin will make a big
turn (> 900) at a distance away from the user, then goes
back to catch the target again.

α ik +1 = α ik + λ xδα i ,
β ik +1 = β ik + λ yδβ i

(5)

where δα i , δβ i are the changes in rotation angles about
the x and y axes respectively, and λx , λy = -1, 0, or 1.
In a free swimming motion, the values of λx, λy are
determined using a random number generator. The
orientation of the dolphin at the kth frame
is R ik = R x (α ik )R y ( β ik ) . Assuming the dolphin is
always swimming in the forward direction (Figure 6)
for a distance h in every time step, the direction of
movement at the kth frame is determined by the
rotation angles α ik , β ik . The displacement of the
dolphin between the kth and the k+1th frames is given

Tik

x

∆Tik

Tik +1

by the transformation ∆Tik = VR ik , where V is the
transformation matrix for translating a distance h along
the z-axis. The translation matrix of the dolphin at the
k+1th frame is computed using the expression

z

Figure 6. Translation in free motion

4
Proceedings of the Computer Graphics, Imaging and Vision: New Trends (CGIV’05)
0-7695-2392-7/05 $20.00 © 2005 IEEE

Target
object

graphics display. The dolphin was modeled with 48
textured order 4x4 NURBS surfaces. The position of
the target object is specified using simple keyboard,
mouse, or joystick control. The frame rates for
individual client PCs ranges from 15 to 50, and is
mainly determined by the graphics accelerator used.
The test was conducted on a system composed of one
server PC and three client PCs. A client PC with a PIII
processor of 1GHz and a 3Dlabs Oxygen GVX1 Pro
graphics accelerator gives a frame rate of 32 per
second. A client PC with a PIV processor of 1.4GHz,
and a GeForce2GTS graphics accelerator (APG) with
32MB memory gives a frame rate of 20 per second.
However, using a similar GeForce2GTS (32MB
memory) graphics accelerator but with PCI bus, a
frame rate of only 15 can be achieved. Tests were also
performed on a high end PC with a processor speed of
2.4GHz. Using a Nvidia Quadro4 900XGL graphics
accelerator with 128MB memory and a PCI interface, a
speed of 30 frames/sec was achieved. Using the same
configuration with an AGP interface, a speed of 50
frames/sec was obtained. The performance of the
system is determined by the slowest client PC. Figure 8
shows pictures of the system while the dolphin is in a
free swimming state. Figure 9 shows pictures of the
dolphin swimming towards the moving target. A
system with one projection unit has been installed in
the Hong Kong Science Museum. Figure 10 shows a
snapshot of the system.

q
rk

rk+1

θ
x

z

Figure 7. Chasing target

6.3 The Leave Target Motor Control
The leave target motor control is started after the
target is being caught. This is to simulate the dolphin
swimming away from its current position while
swallowing its food. As the food target is controlled by
the user, it is always located in the positive z direction.
The leave target state is simulated by having the
dolphin to make a 1800 turn about the y-axis and
swims for a certain distance. If the target object has
been successfully caught, the dolphin will hold the
target object while it moves. Otherwise, the dolphin
will simply swim away from the user. The dolphin will
then enter the free swim state and is then ready to catch
the target again.

7. Implementation and Results
8. Conclusion

The proposed system is implemented using three
VRex LCD stereoscopic projectors at a resolution of
800x600. Each projector is driven by a client PC. The
standard graphics library OpenGL is used for the

A multi-screen stereoscopic projection system was
constructed using standard client-server technology.
Each display screen is controlled by a personal

Figure 9. Dolphin swimming towards
the target

Figure 8. Dolphin in free swimming state

5
Proceedings of the Computer Graphics, Imaging and Vision: New Trends (CGIV’05)
0-7695-2392-7/05 $20.00 © 2005 IEEE

computer constituting a basic building block or cell of
the system. Cells can be added or removed without
reconfiguring the system. The system is used for
simulating an underwater environment inhibited by a
dolphin. In particular, the process of feeding a dolphin
was simulated. The curve-pair based axial
representation technique is used for modeling the
dolphin. This allows different posture of the dolphin to
be modeled simply by adjusting the shape of the curvepair. A frame rate between 15 to 50 can be attained
depending on the graphics accelerator and the PC used.
Since the passive stereoscopic technique is adopted,
the system allows a group of users to be immersed in
the environment with an illusion that the dolphin is
swimming right in front of them.

Figure 10. Screen capture of the system
installed in the Hong Kong Science Museum

9. Acknowledgement

[9] M. G. J. R. Stalpers, C. W. A. M van Overveld,
Deforming Geometric Models Based on a Polygonal
Skeleton Mesh, Journal of Graphics Tools, 2(3) (1997)
1-14.
[10]
M. Walter, A. Fournier, Growing and
Animating Polygonal Models of Animals, Computer
Graphics Forum ( Eurographics ’97), 16(3) (1997)
C151-C158.
[11] L. Wade, R. E. Parent, Automated generation of
control skeletons for use in animation, The Visual
Computer, 18 (2002) 97-110.
[12] X. Tu, D. Terzopoulos, Artificial Fishes: Physics,
Locomotion, Perception, Behavior, Proc. SIGGRAPH
94, 1994, pp.43-50.
[13] K. C. Hui, Free-form design using axial curvepairs, Computer-Aided Design, 34(8) (2002) 583-595.
[14] R.J. Millar, J.R.P. Hanna, S.M. Kealy, A review
of behavioural animation, Computers & Graphics, 23
(1999) 127-143.
[15] C.W. Reynolds, Flocks, herds, schools: a
distributed behavioural model, Proc. SIGGRAPH’87
21(4) (1987) 25-34.
[16] P. Kalra, N. Magnenat-Thalmann, L. Moccozet,
G. Sannier, Real-Time Animation of Realistic Virtual
Humans, IEEE Computer Graphics and Applications,
Sept/Oct 1998, pp.42-56.
[17] H. Noser, D. Thalmann, A Rule-Based Interactive
Behavioral Animation System for Humanoids, IEEE
Transactions on Visualization and Computer Graphics,
5(4) (1999) 281-307.
[18] Martinho C., Paiva A. Underwater Love":
Building Tristão and Isolda´s Personalities, in Artificial
Intelligence Today: Recent Trends and Developments,
Eds. Mike Wooldridge and M. Veloso, Lecture Notes in
Artificial Intelligence, LNAI 1600, Springer.

The work described in this paper was partially
supported by a grant from the Research Grant Council
of the Hong Kong Special Administrative Region
(Project no. CUHK4182/01E).

10. References
[1] T. Shibata, Head mounted display, Displays, 23
(2002) 57-64.
[2] C. Cruz-Neira, D. Sandin, T. DeFanti, R. Kenyon,
J. Hart, The CAVE – audio visual experience
automatic virtual environment, Communications of
ACM 35(6) (1992) 65-72.
[3] M. Czernuszenko, D. Pape, D. Sandin, T. Defanti,
G.L. Dawe, M.D. Brown, The ImmersaDesk and
infinity wall projection-based virtual reality displays,
ACM Computer Graphics 31(2) (1997) 46-49.
[4] W.J. Li, C.C. Chang, K.Y. Hsu, M.D. Kuo, D.L.
Way, A PC-based distributed multiple display virtual
reality system, Displays, 22 (2001) 177-181.
[5] Jacobson, J., Hwang, Z., (2002) Unreal Tournament
for Immersive Interactive Theater, in Lewis, C.,
Jacobson, J. (2002) Game Engines for Scientific
Research, Communications of the ACM, January 2002.
[6] J. E. Chadwick, D. R. Haumann, R. E. Parent,
Layered Construction for Deformable Animated
Characters, ACM Computer Graphics, 23(3) (1989)
243-252.
[7] R. Turner, E. Gobbertti, Interactive Construction
and Animation of Layered Elastically Deformable
Characters, Computer Graphics Forum, 17(2) (1998)
135-152.
[8] T.W. Sederberg, S. R. Parry, Free-form
deformation of solid geometric models, ACM
Computer Graphics, 20 (1998) 151-160.

6
Proceedings of the Computer Graphics, Imaging and Vision: New Trends (CGIV’05)
0-7695-2392-7/05 $20.00 © 2005 IEEE

