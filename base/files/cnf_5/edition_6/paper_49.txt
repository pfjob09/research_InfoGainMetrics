Real-time Dynamic Cloud Modeling and Rendering
QIN Bo
LV Tao
(Department of Computer Science, Ocean University of China, 266071)
{qinbo@mail.ouc.edu.cn sdlwlvtao@163.com}


Abstract
Cellular automaton and multiple scattering are the
more important technologies for generating cloud in
the phase of modeling and rendering. Cellular
automaton model gets a balance between physical
model and procedural model which can make high
speed and high quality clouds. Multiple scattering
simulates the cloud scattering even more truly. In this
paper, we will supply an algorithm which combines the
above two technologies together to generate the
real-time dynamic clouds. We hope using their strong
suit to generate the real-time dynamic clouds. And
through the cell’s state-changing equation we model
the cloud’s movement by wind. Impostor is used to
accelerate the rendering. All above get a better result
of cloud’s real-time movement and realization.
Key Words:
Virtual reality, Animation, Cellular
automaton, Multiple scattering

1. Introduction
The modeling and rendering of real-time clouds is
an important part, which requires not only high speed
but also high quality and smaller calculation. Usually
there are two categories to simulate the gaseous motion
like cloud, smoke, etc. One is to simulate the physical
process of fluid dynamics[2][5][9]. This method may
get the best quality, but it needs large calculation.
Another method is procedural modeling[7][10], which
is computationally inexpensive and much easier to
implement, but the user has to search parameters by
trial and error to create realistic animation. The cellular
automaton[8][11] is the synthesis of above, which
makes a balance between high speed and high quality
and get a better effect.
Also the rendering of clouds is difficult. Realistic
shading requires the integration of the effects of optical
properties along paths through the cloud volume, while
incorporating the complex light scattering within the
medium. Previous work has attempted to approximate
the physical characteristics of clouds at various levels

Proceedings of the Computer Graphics, Imaging and Vision: New Trends (CGIV’05)
0-7695-2392-7/05 $20.00 © 2005 IEEE

of accuracy and complexity, and then to use these
approximate models to render images of clouds.
Blinn[1] introduced the use of density models for
image synthesis in his essay, where he presented a low
albedo,
single
scattering
approximation
for
illumination in a uniform medium. Kajiya[2] and Von
Herzon extended this work with methods to ray trace
volume data exhibiting both single and multiple
scattering. Nishita[6] introduced approximations and
rendering techniques for global illumination of clouds
accounting for multiple anisotropic scattering and
skylight. Harris[12] put forward to the method with an
approximation to multiple forward scattering and
anisotropic first order scattering. He accelerated the
rendering of cloud by the relation between frames,
which gets high speed.
According to the paper [11] and [12], we combine
the cellular automaton and multiple scattering to model
and render clouds and at the same time simulate the
motion of the clouds by wind through the random
function. We also use impostor to render clouds.

2. Cellular automaton
Cellular automaton(CA) is a virtual matrix in N
dimensions space (for example, every cell of cellular is
square in two dimensions). Every cell has it’s own state
and the state changes with the time. The state on time
t+1 depends on not only the state on time t but also the
surrounding cells’ states on time t.
As shown in figure 1, there are three logical
variables: hum, cld and act. In the process of cloud
motion its generation, motion and disappearance are
controlled by the three variables. The state value of
each variable is either 0 or 1, so the rules can be
expressed by Boolean operation. Therefore, each
variable can be stored in one bit to save the memory
cost and the simulation process is accelerated by using
bit field manipulation function.
hum=1 means there is enough vapor to form clouds,
act=1 means the phase transition from vapor to clouds
is ready to occur, and cld=1 means there are clouds.

Figure 1. Change of logical variables with time

Therefore the state on ti+1 is given as following
equations (1)-(4)[11].

hum(i, j , k , t i +1 ) =
hum(i, j , k , t i )  ¬act (i, j , k , t i )
cld (i, j , k , t i +1 ) =
cld (i, j , k , t i ) * act (i, j , k , t i )
act (i, j , k , t i +1 ) =

cld (i, j , k , t i +1 ) =
cld (i, j , k , t i )  IS (rnd > Pextofcld (i, j , k , t i ))

(5)

(1)

hum(i, j , k , t i +1 ) =
hum(i, j , k , t i ) * IS (rnd < Pextofhum (i, j , k , t i ))

(6)

(2)

act (i, j , k , t i +1 ) =
act (i, j , k , t i ) * IS (rnd < Pextofact (i, j , k , t i ))
(3)

¬act (i, j , k , t i )  hum(i, j , k , t i )  f act (i, j , k )
Where f act (i, j , k ) is a Boolean function and its
value is calculated by the states of act around the cell.

f act (i, j , k ) =

(7)

We can get the discrete density of clouds by
controlling the variables’ change of each cell.
Calculation of continuous density: In fact the
density of clouds in the real world is continuous from 0
to 1. Therefore it is necessary to smooth the Boolean
value in each cell. As is shown in figure 2.

act (i + 1, j , k , t i ) * act (i, j + 1, k , t i ) *
act (i, j , k + 1, t i ) * act (i − 1, j , k , t i ) *
act (i, j − 1, k , t i ) * act (i, j , k − 1, t i ) *

(4)

act (i − 2, j , k , t i ) * act (i + 2, j , k , t i ) *
act (i, j − 2, k , t i ) * act (i, j + 2, k , t i ) *
act (i, j , k − 2, t i )
Here f act (i, j , k ) has several variations. But
there are no significant differences of the simulation.
So, we use the function in the original paper as (4).
One of the disadvantages of (1)-(4) method is that
cloud extinction never occurs since cld, after it has
become 1, remains 1 forever[13]. It is not true. In the
real world, cloud extinction is caused by gradual
transition of water droplets to vapor. One method
simulates the extinction as follows. Specify the cloud
extinction probability Pextofcld, and set the random
probability function rnd(0rnd1). Change the cld
from 1 to 0 when rnd<Pextofcld. Similar to extinction,
change the hum from 0 to 1 when rnd<Pextofhum and act
form 0 to 1 when rnd<Pextofact. So it forms the
(5)-(7)[11] equations as follows.

Figure 2. Smooth the discrete density

First the density

q(i, j , k , t i ) at each cell(i,j,k) is

calculated using the equation (8).

1 t0 k0
q(i, j , k , ti ) =
¦ ¦
Ω t ′ = −t 0 k ′= − k 0

j0

i0

¦ ¦

(8)

j ′ = − j 0 i ′ = − i0

w(i′, j′, k ′, t ′)cld (i + i′, j + j ′, k + k ′, ti + t ′)
In equation (8),

Ω = (2t0 + 1)(2k0 + 1)(2 j0 + 1)(2i0 + 1) and w is
the weight value of cell(i,j,k) in time t. (i0,j0,k0) is the
set of cells. We also use the Wyvill function[4] to
calculate the center density ρ ( x, t i ) of arbitrary
metaball used during rendering as follows.

ρ ( x, t ) =
i

N

¦ q(i, j, k , t ) f ( x − x
i

i , j ,k

) (9)

i , j , k ∈Ω ( x , R )

where R is the radius of the metaball, x is the center of
the metaball. Ω ( x , R ) is the set of the cells, and xi,j,k is

Proceedings of the Computer Graphics, Imaging and Vision: New Trends (CGIV’05)
0-7695-2392-7/05 $20.00 © 2005 IEEE

the center of cell(i,j,k), and N is the number of the
cell included the metaball.
Cellular automaton accelerates the calculation
because its bit operation and it can get the cloud
particle’s density expediently. So it is the base of the
multiple scattering.

3. Multiple scattering

Figure 5. Approximate calculation of the light

Scattering illumination model simulates the
emission and absorption of light by a medium as well
as scattering through the medium. Single scattering
model simulates scattering through the medium in a
single direction. Multiple scattering model is the same
as single scattering but in many continuous particles.
Figure 3 shows the difference between the single
scattering and multiple scattering.

Figure 3. Single scattering and multiple scattering

the other is the scattering lights come from other
particles[12]. In equation (10), Dp is the depth of
particle P in the cloud along the light direction, and

g ( x,ω ) = ³ r ( x, ω ,ω ' ) I ( x,ω ' )dω '

represents the lights from all directions ω ' scattered
into direction ω at the point x. Here r ( x, ω , ω ' ) is
the bi-directional scattering distribution function
(BSDF). It can expands to
r ( x, ω , ω ′) = a ( x)τ ( x) p (ω , ω ′)
(12)
where

Multiple scattering models are more physically
accurate, but must account for scattering in all
directions, so it is more complicated and more
expensive to evaluate. For the multiple scattering lights
in the direction of viewpoint composes of many lights,
as shown in figure 4.

τ (x)

is the optical depth,

N

j =1

The light at P is composed of sun light, environment
light, light comes from ground and the light comes
from other particles. Research finds that the main light
comes from in the taper which axis is PvP and from the
surrounding particles, especially the light in the
direction of PvP[6], as shown in figure 5.
So there is following equation.
Dp

I ( P, ω) = I 0e

− ³ τ ( t ) dt
0

Dp

+ ³ g (s, ω)e

Dp

− ³ τ (t ) dt
s

ds (10)

0

I(P,l) is composed of two light. One is the light that
is not absorbed by other particles in the direction of l,

τ

−

N

j

+ ¦ gj
j =1

∏e τ
N

− k

(14)

k = j +1

where I0 is the intensity of light incident on the edge of
the cloud. It’s circle style that can be easily
implemented on computer is equation (15)

2≤k ≤ N
­ g k −1 + Tk −1 ⋅ I k −1 ,
Ik = ®
 (15)
k =1
¯I 0
−τ
where Tk = e k is the transparency of particle Pk. It
simply says that starting outside the cloud, as we trace
along the light direction the light incident on any
particle Pk is equal to the intensity of light scattered to
Pk from Pk-1, plus the intensity transmitted through Pk-1.

4. Generation and rendering of dynamic
cloud
4.1 Generation of dynamic cloud

Proceedings of the Computer Graphics, Imaging and Vision: New Trends (CGIV’05)
0-7695-2392-7/05 $20.00 © 2005 IEEE

a (x) is the

albedo, and p (ω , ω ′) is the phase function[12].
Here we simplify our approximation to compute only
multiple forward scattering in the light direction, so
ω = l ˈ ω ' = −l . Thus equation (11) reduces to
g ( x, l ) = r ( x, l ,−l ) I ( x,−l ) / 4π
(13)
We split the light path from 0 to Dp into discrete
segments Sj, for j from 1 to N, where N is the number
of cloud particles along the light direction from 0 to
Dp, so get the equation (14)

I p = I0 ∏ e

Figure 4. Light sources reach to particle

(11)

4π

Cellular automaton separates the space into many
cells and accelerates the modeling by bit operation. It
is impossible to generate dynamic clouds. Multiple
scattering reflects the interaction between the light and
clouds. The clouds made by multiple scattering are
realer. The two technologies have their own merits,
through which we can get high speed and high quality
clouds. Harris used the multiple scattering during
rendering, but used particle system during modeling.
Because of the weak relationship among particles, it is
difficult to control the relation of each particle, while
cellular automaton can do. We combine the cellular
automaton and multiple scattering together and get a
better effect.
During multiple scattering, the particles need to be
rendered are added to the chain. When rendering we
need to sort twice by the distance far from the
viewpoint and the light source. If sort the particles
when they are added to the chain, the rendering speed
will improve greatly. So there is following idea.
Supposed ellipsoid equation included the cloud is

( x − α ) 2 + ( y − β ) 2 + ( z − γ ) 2 = R 2 (16)
the viewpoint is ( Ex, Ey , Ez ) , so the series of points
in the direction of vector (α − Ex, β − Ey, γ − Ez )
and inside the ellipsoid are the sorted points. From the
equation (17)
y − Ey
z − Ez
­ x − Ex
°α − Ex = β − Ey = γ − Ez = t
(17)
®
°( x − α ) 2 + ( y − β ) 2 + ( z − γ ) 2 = R 2
¯
we can get the two marginal points: p1 and p2. With the
equation
(α − Ex ) * x + (β − E y ) * y + (γ − Ez ) * z + d = 0 (18)

get the d1 and d2, then we get the plane M:
­(α − E x ) * x + ( β − E y ) * y + (γ − E z ) * z + d = 0
°
d ∈ ( d1 , d 2 ) (19)
®
°
2
2
2
2
¯( x − α ) + ( y − β ) + ( z − γ ) ≤ R
through (19) we get the random center points of the
random metaballs according to the different d and add
them to the chain. Here we can set the proper interval
of the d to reduce calculation and make the balance
between speed and quality. In the same way we sort the
particles by the distance far from the light source,
calculating the color of particles and saving another
chain for rendering.
The generation process of the dynamic cloud is as
following figure 6.

4.2 Effect by wind
Blown by winds, the clouds will move in one
direction. Supposed the direction of wind is reverse to

Proceedings of the Computer Graphics, Imaging and Vision: New Trends (CGIV’05)
0-7695-2392-7/05 $20.00 © 2005 IEEE

Cellular automaton generation and initialization

Get the discrete density through controlling the
logical variables in each cell
Smoothing the discrete density in each cell

Calculate the sorted random particles and save
to the chain
Get the density of random particle

Generate the dynamic clouds with multiple
scattering
Figure 6. Flow chart of the dynamic cloud

the x axis and it’s speed is different by the height,
therefore we can think the wind speed is a linear
function of the height and in the same height cells the
wind speed is same. Suppose the wind speed is v(zk),
and zk is coordinate of cell(i,j,k)’s center point z. When
the cloud particles meet the barrier, they will move to
another side, so set the random function rnd() which
value is 1 or –1 to decide the side. We add the
state-changing equation to get the effect by wind. The
added state-changing equation of the state variables in
each cell is as (20)-(22).
Where NoBar(i,j,k,t) returns Boolean value, which
means that there is no barrier.

4.3 Impostor
In the past, impostors were used mostly to replace
geometric models. Since these models have high
frequencies in the form of sharp edge, impostors have
usually been used only for distant objects. Here in
order to render many clouds made up of many particles
at high frame rates, we use the impostor technology. It
is a mature technology, so we ignore the detail
introduction.

5. Result
We implemented the cloud modeling and rendering
system using the OpenGL on a PC with an NVIDIA
GeForce4 graphics processor and get a high speed and
high quality. Under the cell 256ˆ20ˆ128 and the
image size is 640ˆ480, the frame rate is between 37
and 59 frames. Figure 8 shows the four continuous
pictures at interval 20ms; figure 9 is the moving clouds

effects by wind modeled by cellular automaton; figure
10 shows the difference between single scattering and

multiple scattering. Through comparing to the
Dobashi’s algorithm, our algorithm gets a better effect.

NoBar (i − v( z k ), j, k , ti )
­hum(i − v( zk ), j , k , ti )
°hum(i, j + rnd (), k , t ) ¬NoBar (i − v( z ), j , k , t )  NoBar(i, j + rnd (), k , t )
°
i
k
i
i
(20)
hum(i, j , k , ti +1 ) = ®
°hum(i, j − rnd (), k , ti ) ¬NoBar (i − v( zk ), j , k , ti )  NoBar (i, j − rnd (), k , ti )
°¯0
otherwise
NoBar (i − v ( z k ), j , k , ti )
­cld (i − v ( z k ), j , k , ti )
°cld (i, j + rnd (), k , t )
¬NoBar (i − v ( z k ), j , k , ti )  NoBar (i, j + rnd (), k , ti )
°
i
(21)
cld (i, j , k , ti+1 ) = ®
−
¬
−
−
cld
(
i
,
j
rnd
(),
k
,
t
)
NoBar
(
i
v
(
z
),
j
,
k
,
t
)
NoBar
(
i
,
j
rnd
(),
k
,
t
)

i
k
i
i
°
°¯0
otherwise

­act(i − v( zk ), j, k , ti ) NoBar(i − v( zk ), j, k , ti )
°act(i, j + rnd (), k , t ) ¬NoBar(i − v( z ), j, k , t )  NoBar(i, j + rnd (), k , t )
°
i
k
i
i
act(i, j, k , ti+1 ) = ®
(22)
°act(i, j − rnd (), k , ti ) ¬NoBar(i − v( zk ), j, k , ti )  NoBar(i, j − rnd (), k , ti )
°¯0
otherwise

Generation of dynamic cloud

Figure 8. Dynamic clouds picture on step 20m

Proceedings of the Computer Graphics, Imaging and Vision: New Trends (CGIV’05)
0-7695-2392-7/05 $20.00 © 2005 IEEE

Figure 9. Cloud’s moving by wind

Figure 10. Single scattering and multiple scattering

References

[7] D. S. Ebert, “Volumetric Modeling with Implicit
Functions: A Cloud is Born”, SIGGRAPH’97, pp 147

[1] J. Blinn, “Light Reflection Function for Simulation of

[8] Y. Dobashi, T. Nishita and T. Okita, “Animation of

Clouds and Dusty Surfaces”, SIGGRAPH’82, pp 21-29

Clouds Using Cellular Automaton”, Proc. of Computer

[2] J. T. Kajiya, B. P. V.Herzen, “Ray Tracing Volume

Graphics and Imaging’98, pp 251-256

Densities”, Computer Graphics 1984, Vol. 18, No. 3, pp

[9] J. Stam, “Stable Fluids”, SIGGRAPH’99, pp 121-128

165-174

[10] D.S. Ebert, “Simulating Nature: From Theory to

[3] J. Kajiya, B. Von Herzen, “Ray Tracing Volume

Application”, SIGGRAPH’99, pp 5.1-5.52

Densities”, SIGGRAPH’84, pp 165-174

[11] Y. Dobashi, K. Kaneda, H. Yamashita, T. Okita, and T.

[4] G. Wyvill, A. Trotman, “Ray-Tracing Soft Objects”,

Nishita, “A Simple, Efficient Method for Realistic

Proc. of CG International 1990, pp 439-475

Animation of Clouds”, SIGGRAPH 2000, pp 19-28

[5] J. Stam, E. Fiume, “Turbulent Wind Fields for Gaseous

[12] Mark J. Harris, “Real-Time Cloud Rendering for

Phenomena”, SIGGRAPH’93, pp 369-376

Games”, Game Developers Conference 2002, pp 1-1

[6] T. Nishita, Y. Dobashi, and E. Nakamae, “Display of

[13] K. Nagel, E. Raschke, “Self-organizing Criticality in

Clouds Taking into Account Multiple Anisotropic Scattering

Cloud Formation”, Physical A 1992, pp 519-531

and Sky Light”, SIGGRAPH’96, pp 379-386

Proceedings of the Computer Graphics, Imaging and Vision: New Trends (CGIV’05)
0-7695-2392-7/05 $20.00 © 2005 IEEE

