Feature-preserving Simplification of Texture-mapped Models
Xiuwen Liu, Cui Xie, Yicheng Jin
Dalian Maritime Uiniversity, China Ocean University, Dalian Maritime Uiniversity (China)
liuxw@dlmu.edu.cn , xiecuidlmu@sohu.com, jycdmu@dlmu.edu.cn

Abstract
A feature-preserving multi-resolution simplification
algorithm based on half-edge collapse operation for
texture-mapped models is proposed. A new error
metric based on the geometric importance the textureattribute importance of a half-edge is presented. It can
generate a low-polygon-count approximation model
with shape preservation and texture attributes
preservation. In addition, the half-edge based scheme
is more efficient in memory usage and convenient for
generating progressive meshes with texture attributes
for real-time transmission of various surface data on
the Web. The visual comparisons showing that the
proposed algorithm results in higher quality
approximations of original models with texture
attribute preservation even at very low levels of detail
than other algorithms in the literature.

1. Introduction
Due to the limited network bandwidth, the use of
complex graphical model in network based real-time
application is still restricted, especially for networkbased real-time 3D applications, in such systems most
models are created in advance with fixed texture
attribute. There needs to be one texture-mapped mesh
simplification algorithm that can effectively reduce the
amount of 3D data to be transmitted through the
network while preserving model’s original features or
attributes. Certainly, it is better that the simplification
operation will not introduce a new vertex and
additional memory burden for rapid calculation and
transmission. The half-edge collapse operation is a
good selection, which uses the vertex placement policy
that places a new vertex after the collapse of
directional edge e*ij by merging the start vertex vi to the
end vertex vj (Figure 1). In addition, every edge having
the vertex vi is topologically updated to have vj.
Moreover, in most cases, the original shape is well
preserved [1], although the method does not use the

optimal placement policy. Another attractive point of
half-edge collapse operation is that the progressive
transmission of the mesh data [2] can be performed
very effectively, since the set of vertices in the
simplified mesh is always a proper subset of the
original mesh.
vj
vi

half-edge
collapse

vj

vertex
split

Figure 1. Half-edge collapse and vertex split
In order to generate a simplified polygonal mesh
with fewer triangles while preserving the original
shape and attributes, there are a lot of error metrics to
decide the removal order of geometric element during
the simplification process, such as surface curvaturebased geometric error [3], distance-based metrics [4-7],
image-based [8] approach, perception-based [9-10]
method etc. The most important measure of fidelity,
that is whether or not the simplified model looks like
the original, is not geometric but visually features [11].
A few new appearance-based simplification algorithms
have incorporated surface properties into their measure
of deviation from the original model [12-16]. Such
properties include color, normal and texture coordinate.
In order to guarantee the real-time transmission of
3D graphic data in real-time 3D Web Graphics
application, which require fast interactivity and high
run-time performance. Thus, it is useful to drastic
simplify the texture-mapped model while preserving
the geometric and texture attribute of the original
model. However, Most of the existing algorithms for
simplification of triangular meshes with textures
perform poorly at very low levels of detail. We
propose a new automatic method for the decimation of
triangular meshes, which preserves the characteristic
feature and visually important parts of the mesh at low
levels of detail and thus keeps the semantic or high
level meaning of the model.

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

The proposed algorithm is driven by half-edge
collapse operation and exploits a integration measure
of geometric deviation and texture distortion
employing a form of half edge visual importance that
helps to keep visually important parts even at low
levels of detail and causes to remove other kinds of
edges, which do not profoundly influence the overall
feature of the model. In addition, the proposed method
can conveniently generate progressive texture-mapped
meshes for optimizing transmission.
The rest of the paper has been organized as
follows. Section 2 gives the essential ingredients of the
algorithm in detail, and Section 3 outlines the visual
importance (collapse cost) of a half edge and the
algorithm is presented in section 4. Section 5 discusses
the performance and quality of the algorithm with
experiment and compares it with some other methods.
Section 6 concludes the paper.

2. Notation and definition
For the sake of clarity and compactness of
expression, we introduce the following definitions.
Without lose of generality, we assume a triangular
mesh is represented as a set of vertex set, triangle set
and texture set, because any polygon can be
represented by a set of triangles.
v : a vertex of M with its geometric counterpart as
a 3D vertex v.
eij
: an edge of M connecting the pair of vertices
{vi, vj}.
*
eij
: a half edge of M represented by the ordered
pair (vi, vj). vi and vj are termed as origin and head of
e
e
edge ij . Each edge ij = {vi, vj} is equivalent to two
* *
e e
half edges ij , ji .
t : a triangular face of M is a set of oriented edges
(eij, ejk, eki) or equivalently an oriented set of vertices
(vi, vj, vk).
N v : the set of vertices in the 1-ring neighborhood

of vertex v.
Tv : the set of triangles incident on vertex v. It is
termed as star of v.
Te : the set of triangles incident on edge e.
Texture-boundary-edge: An edge is called a textureboundary-edge, if it adjacent to faces which contain
different texture properties (texture identifier or
coordinate).

3. Visual importance of a half edge

We associate with each half edge a value that
represents its visual importance (or cost) and helps to
determine the sequence of half edge collapses in such a
way that even extremely low level versions of a model
keep the semantic meaning of the model. We define the
visual importance of a half edge by two parts: its
geometric importance and texture importance. The
result of the half edge importance function based on
these two terms constitutes the collapse cost of a half
edge, determines the order of contraction of the edge.
In the simplification process, the edge with the smallest
cost would be collapsed in each step. We explain the
detailed meaning of geometric importance and texture
importance of each half edge in the following sections.

3.1. Geometric importance metric
Obviously, it makes sense to get rid of small
details first. Note also that fewer polygons are needed
to represent nearly coplanar surfaces while areas of
high curvature need more polygons. Moreover, smaller
volume changes incident to a half edge collapse will be
considered for removing with high priority in order to
preserve the shape and volume feature of original
model. Based on these heuristics, we define geometric
importance of a half edge as the volume of error
polyhedron incident to the half edge collapse
multiplied by a curvature term.
Consider a typical triangle t = (v1, v2, vi) shown in
*
figure 2, the eij collapse action may deform the triangle
t to be t’ and cause a volume change of the mesh. We
define the following quantity to account for the
Volume of Error Polyhedron caused by triangular face
1
t:Vol
( v  v )  ( v  v ) u ( v  v )....( 1)
t(v 1 , v 2 , v i )

2

6

1

j

i

1

1

The volume of error polyhedron introduced with
*
half edge eij collapse is the sum of volume changes
introduced by each of t  (Tvi  Teij ) , So
*
Error v ( e ij )
¦ Vol t .......... .......... .......... ....( 2 )
t ( Tv i  Te ij )

vk
vi
v1

t
v2

vi

vj

t’

t
vl

˄a˅

vj

v1

v2

*

t’
˄b˅

Figure 2. (a) Half-edge eij collapse operation
(b) a volume of error polyhedron associated
*
with triangle t when eij collapsed

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

The local curvature is calculated by the sum of
inner product between the plane sets T Vi and Te ,

*

ij

triangle 'v3v2 vi as example to illustrate the texture
attribute importance metric.
Suppose L1 and L2 denote the midline of triangle

edge itself respectively. The curvature term for
*
collapsing an edge eij is determined by comparing dot
products of face normal in order to find the triangle
adjacent to vi that faces furthest away from the other
*
triangles that are along eij . Equation 3 shows the
quantity in a formal notation.
*
W c ( e ij )

Where,
nt

t1  T

Vi

the

v3

nt of triangle t is

( v1  v i ) u ( v 2  v i ) / ( v1  v i ) u ( v 2  v i )

.
To sum up, the geometric importance (or cost) of a
half edge e*ij can be estimated by the local surface
curvature variation and the volume of error polyhedra.
So, the geometric importance (or cost) of a half edge
*
eij is defined as the following equation:
*
*
*
Cost g ( eij ) Error v ( eij ) * W c ( eij )......... .......... ..( 4 )

3.2. Texture importance metric
Texture is important for the appearance of a model.
However, when perform a half edge collapse operation
on the textured model surface, texture deviation will
occur mainly results from the discord variation of
corresponding texture and geometric coordinate. Paper
[17] didn’t consider for the phenomenon of texture
stretch or shrinking, which lead to the variation of the
density of the texture mapped on the simplified model
compared with the original models’. This will severely
affect the fidelity to the simplified model.
Here, we consider for above two factors causing
texture distortion (deviation or stretch) and propose a
texture importance metric. It takes the triangle’s
midline as the representation to measures the direction
and density deviation of the whole triangle in texture
and geometric space. Thus the texture distortion
associated with a half edge collapse operation will be
estimated easily, the algorithm complication is reduced
greatly and the texture distortion can be controlled and
prevented efficiently.
Figure 3(a) and 3(b) shows the coordinate changes
in geometric and texture space respectively during a
*
half edge eij collapse operation. Now take the

vj

L2

Mv23
v2

u3

t 2  T e ij

normal

Į

L1

Figure 3. (a)

max { min {( 1  n t 1  n t 2 ) / 2 }}..( 3 )

*
eij

vi

which are adjacent to start vertex vi of edge eij and the

Mu23

*
eij

Collapse in 3D geometric

l1
ȕ

uj

*
eij

ui

l2

u2

Figure 3. (b)

*
eij

Collapse in 2D texture space

'v3v2 vi before and after half edge collapse operation

respectively in 3D geometric space (here rename it the
geometric midline for short). l1 and l2 are the
counterpart in 2D texture space (texture midline). Į
represent the angle variation of the geometric midline
*
e
along with the half edge ij collapse, ȕ is the counterpart
of texture midline. The texture distortion along
*
e
with ij collapse operation will occur if either 1㧕ǩ
. The former indicates that the
Ǫ or 2 㧕 l1 / l 2
L 1 /L 2

z1

texture deviation appears, the latter means that the
texture stretch or shrinking occurs. In order to prevent
the notable texture distortion, we distribute a weight
for each half edge to indicate its degree of texture
distortion. The higher the distortion the heavier the
weight will be, and the more importance this half edge
will be. Thus we should try to prevent this half edge to
be collapsed. The following quantity expresses the
texture importance of a half edge

*
eij

:

*
*
Costm (eij ) L(eij ) * ¦| Dt  Et | *Kt , t (Tvi  Teij ).........(5)
t

*
*
Where, L(eij ) denotes the length of eij and If
l1/l2
! 1 , Kt
L1/L 2

l1 /l 2
L1 /L 2

,or else K
t

L1/L 2 In conclusion,
l1/l2

the texture distortion associated with a half edge
collapse is depicted by the angle difference㧔ȕ㧙Į㧕

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

and the scale of length variation l1/l2 , which avoid

4. Algorithm

L1/L 2

considering for different degree of texture distortion in
the triangle everywhere and thus save much
computation time.
Furthermore, As for the texture-boundary edges, to
preserve the features of the model, we first search for
the texture-boundary edges that are adjacent to faces
which contain different texture properties. Then, the
endpoints of the sharp edges are marked as unremovable vertices. By this means, the model may be
simplified by removing the non-texture-boundary
edges while preserving its features. Figure 4 shows the
signed texture-boundary with double-lines.
v6

v4

ķ

ķ
ķ

vi

ķ

*
eij

vj ķ

v3

ĸ

ĸ

ĸ

ĸ

v7

v2
v1

Figure 4. Special process for textureboundary edge

3.3. Visual importance estimation of a half edge
Equation 6 is the combination of above two
importance terms to estimate the visual importance of a
*
e

half edge ij , The proposed algorithm assigns the
collapse cost calculated from equation 6 for every edge
to determine the order of edge collapsing.

*
Cost ( e ij )
where 㧘

*
*
Cos ~
t g ( e ij )  D * Cos ~
tm ( e ij )......... ( 6 )
*
Cos ~
tg (eij )
*

and

*
Cos ~
tm (eij )

*
Cost (e )

4.1. Mesh simplification process
The first step is to search for texture-boundary
edges, sign them and keep them as base mesh. Since
the texture-boundary edges are the edges with
remarkable features, they should be reserved in the
simplified models. Then, the normal vector of each
vertex is calculated, along with the visual importance
of each edge is computed.
Select the one (optimal half-edge associated with
vi) with minimum cost, and put it in the priority queue.
Before removing the edges, it is necessary to do some
tests to check if the removing process will cause the
faces to fold over on each other or cause the topology
to change, if the edge passes all of above removable
edge testing and be legal for simplification.
Then take out of the priority queue the least
importance half-edge and collapse the edge.
After removing the current removable edges, the
importance of the edges that the connectivities have
been changed due to the simplification process should
be re-calculated.
Attempts are made again to remove the removable
edges, as described above, until there are no removable
edges.

4.2. Mesh reconstruction
is the unit

m
ij
article of Cost g (eij ) and
respectively 㧘 D is a
user specified parameter used to control the weight of
texture importance compared with geometric
importance.
You can see that this algorithm balances the
geometric and texture importance when determining
which edge to collapse. It is quite obvious that a half
edge would be removed first if its visual importance is
0 otherwise it would be kept according to its
importance value. Moreover, we can specify a proper
threshold H , and keep the edges that satisfy

*
Cost (eij )

The algorithm is driven by half-edge collapse
operation, visual importance associated with each edge
presented in Section 3; it is implemented in greedy
framework to obtain sub-optimal approximation of a
given model at a certain level of detail. The algorithm
performs the following steps to simplify a triangular
mesh and to yield a progressive mesh.

> H to preserve the characteristic features of
the model.

As the PM construction proposed by hope [13],
before doing the half edge collapse operation, it is
necessary to store the information of the removing
vertex for reconstructing the original model. The
information used for reconstructing the original model
is stored as a vertex split (vsplit) data structure as
follows:
struct Vector {
float
x, y, z;
};
struct Wedge {
char
materialindex;
float
uv[2];
Vector normal;
};

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

struct SplitStep{
int
vertTarget;
Vector position;
int
leftTriangle;
char
leftTriWedge[3];
int
rightTriangle;
char
rightTriWedge[3];
Wedge wedgeofvert;
};
M0

vsplit0

M1

vsplit1

5. Experiment result

vsplitn-1
…… vsplitn-2 Mn-1
Mn

So that the original 3D model may be
reconstructed without loss of data using the vertex split
operation, as shown in Figure 1.

Table 1 lists the statistics data about the original
models and the simplified ones of different geometric
3D models shown in Figure 5 to 7, respectively. From
the table we can see that the ratio of the base mesh size
to original model’s is about 5 percent, the data size of
the simplified model is much smaller than original
model’s (the ratio is approximate 0.8), which is highly
advantageous to 3D mesh transmission.
The following part is devoted to presenting and
analyzing the experimental results of the proposed
algorithm using some surface models. Certainly, the
performance of our geometric error metric based on
volume-curvature is low compared with QEM and
mela’s method, since we try to keep the model’s

Table 1: Statistic for data before and after model simplification process
model

fish
wolf
lion

Original model
Vertex Triang
No.
l No.

Wedg
e No.

Total
(Bytes)

4685
7068
16302

4710
7310
16743

295260
447986
1028667

9342
13992
32096

Progressive mesh
base mesh
Vertex
Triangle
No.
No.
25
46
242
472
441
830

Wedge
No.
25
458
791

Vsplit
times

Total
(Bytes)

4660
6826
15861

239175
367728
843264

ratio of
the size:
original/
PM’s
1.234
1.218
1.220

Figure 5. (a) Original fish model
˄9342 triangles˅

Figure5. (b) Simplified fish model
(254 triangles)

Figure 6. (a) Original wolf model
˄13992 triangles˅

Figure 6. (b) Simplified wolf model
˄590 triangles˅

Figure 7. (a) Original lion model
˄32096 triangles˅

Figure 7. (b) Simplified lion model
˄1282 triangles˅

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

volume by employing the volume of error polyhedra
factor.
Figure 5 -7 represent the visual comparisons of the
original models and simplified results of other textured
3D models (fish, wolf and lion) generated by our
algorithms, respectively. The fish model shown in
Figure 5 is composed of 9342 triangles, when the
simplification ratio is 97.3%, (the simplified fish model
is constructed of 254 triangles) the texture-boundary
edge is well preserved and the visual quality is enough
high for real-time 3D application on the Web. Figure 6
shows the simplified wolf model, it is apparent that our
method keeps parts of high semantic meaning like eyes,
after drastic simplification of 95.8%. Also, note Figure
7, it can be seen that high semantic importance features
like eyes and ears remain on lion model after 96%
reduction. Even for the simplified models at very low
level of detail, the shape and texture features could still
be recognized easily, because we uses texture
importance metric to decide which portions of a model
to simplify, reducing the texture distortion and better
preserving the appearance of textured models.

6. Conclusions
Based on previous work of other researcher, a
simplification algorithm for real-time Web 3D
application is proposed, which can effectively reduce
the amount of 3D data to be transmitted through the
network while preserving model’s original features or
attributes. We present a half edge importance metric
function that reflect both of the geometric
characteristics and texture attributes of the mesh to
prevent the decimation of visually important parts of
the model. The experimental results in previous section
shows that the proposed algorithm works well with
preservation of texture attributes of original mesh and
retaining the overall shape even after a drastic
simplification process. Our half edge collapse scheme
is memory efficient and especially can be effectively
applied to generate the progressive meshes for
transmission.

[4] H. Hoppe, T. DeRose, T. Duchamp, etc, Mesh
Optimization,
Computer
Graphics
(SIGGRAPH’93
Proceedings), 19-26,1993
[5] Ronfard R, Rossignac J. Full-Range approximation of
triangulated polyhedra. Computer Graphics Forum, 15(3):6776,1996
[6] J. Cohen, A. Varshney, D. Manocha, etc, Simplification
Envelopes,
Computer
Graphics
(SIGGRAPH’96
Proceedings), 119-128,1996
[7] A. Gueziec, "Locally Toleranced Surface Simplification",
IEEE Transactions on Visualization and Computer Graphics,
5(2), April-June 1999
[8] Peter Lindstrom and Greg Turk.
Image-driven
simplification. ACM Transactions on Graphics, Vol. 19, No.
3, pages 204-241,2000
[9] David P. Luebke, Benjamin Hallen: Perceptually-Driven
Simplification for Rendering Techniques: 223-234, 2001
[10] Nathaniel Williams, David P. Luebke, Jonathan D.
Cohen,Michael Kelley, Brenden Schubert: Perceptually
guided simplification of lit, textured meshes. 113-121
[11] Luebke, D.P.: A Developer's Survey of Polygonal
Simplification Algorithms. IEEE Computer Graphics
&Applications, 21(3), 24-35,2001
[12] Michael Garland and Paul S. Heckbert. Simplifying
surfaces with color and texture using quadric error metrics.
IEEE Visualization 98,1998
[13] Hugues Hoppe. Efficient implementation of progressive
meshes. Computer & Graphics, Vol. 22, No. 1, pp. 27-36,
1998
[14] ZHAO Huifang , RUAN Qiuqi, Simplified Algorithm
for Trigonometry Meshes with Attributes Based on Quadric
Error Metric, CHINA RAILWAY SCIENCE , (Chinese)
1,Vol(126 )11: 78-82,2005
[15] Cohen, Jonathan, Marc Olano, and Dinesh Manocha.
Appearance-Preserving Simplification. Proceedings of ACM
SIGGRAPH 98. pp. 115-122,1998

7. References
[1] M. DeLoura: Game Programming Gems. Charles River
Media, 2001
[2] H. Hoppe: Progressive meshes. Proc. SIGGRAPH'96, 99108,1996
[3] W. J. Schroeder, J. A. Zarge, W. E. Lorensen, Decimation
of Triangle Meshes, Computer Graphics (SIGGRAPH’92
Proceedings), 26(2), 65-70 ,1992

[16] Cignoni, Paolo, Claudio Montani, Claudio Rocchini, and
Roberto Scopigno. A General Method for Recovering
Attribute Values on Simplified Meshes. Proceedings of IEEE
Visualization '98. pp. 59-66, 518,1998
[17] Guo Lizhen Whang Wencheng Wu Enhua, A Model
Simplificatin
Algorithm
to
Prevent
texture
distortion,Computer
Engineering
and
Applications
(Chinerse)ˈ˄33˅:40-43,2004

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

