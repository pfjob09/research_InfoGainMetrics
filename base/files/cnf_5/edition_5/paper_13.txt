Debugging Trellis Decoding of Augmented RAC Array Codes Using a Visual Tool

Lami Kaya
Sharjah University
Computer Science Department
United Arab Emirates
LKaya@sharjah.ac.ae
Abstract
Two-dimensional (2D) row and column (RAC) codes
are constructed from single parity check (SPC)
component codes. Parity check positions of a RAC
code can be augmented to improve code rate, resulting
augmented RAC (ARAC) code. The augmentation
process can be conducted on only row-parity check
positions (ARAC-R), or on both row/column positions
(ARAC-RC). A visual tool for debugging the process
of Viterbi algorithm (VA) decoding of these codes has
been designed and implemented. The ARAC code
parameters can be selected through a pull-down menu
and accordingly a trellis diagram is constructed.
Based on the received data, branch-metrics, pathmetrics, and surviving path details all can be visually
viewed on the trellis diagram. The tool provides an
interface for introducing errors at specific array
positions and their effect on output sequence can be
easily determined.

Mohammad Al-Qudah
SZABIST University
Computer Science Department
United Arab Emirates
mkudah@gmail.com
between them in a simple and easy way. We can use
visual tools to visualize the operation complex
systems. Also with the help of visually available tools,
debugging can made simpler and more effective [6].
Visualization tools can be used in many theoretical and
practical fields as long as the system can be modeled.
Visualization can be used in error control systems as
well [7].
In this paper, we present the use of an interactive visual
tool to be used in step-by-step debugging decoding
process of ARAC array codes, which is an extension
of tool implemented for RAC codes [8]. The tool can
be used in teaching trellis related courses or academic
research. The rest of the paper is organized as follows;
in section 2, some background information on 2D array
code structure, their augmentation, and as well as
trellis structure. In section 3, we present the features of
the visual tool for trellis construction, The utilisation of
visual tool for VA decoder debugging is given in
section4. We give concluding remarks in section 5.

1. Introduction
An error-control code can be illustrated graphically
using a trellis diagram. The name "trellis" is another
representation of a state diagram, and when drawn on
paper closely resembles the trellis lattice used in rose
gardens. Trellis diagrams were initially employed for
convolutional codes using maximum likelihood VA [1]
decoding. Perhaps the single most important concept to
aid in understanding the VA is the trellis diagram.
With promising results obtained from these
experiments, researchers have made some attempts to
construct trellises for block codes. In the 1990s many
coding researchers proposed error control applications
using block codes, especially employing trellis
techniques for them. The research interest in the field
resulted in publication of a number of books [2-5].
Visual models can be used for analyzing objects,
processes and can help to determine the relationships

2. Background
Simple block codes can be used to construct multidimensional structures, to meet certain coding
application requirements. RAC array codes are
constructed from single parity check (SPC) sub-codes
assembled in two dimensions or directions
(straight/diagonal), namely concatenated in rows and
columns. The shape of a 2D RAC array code can be
square or rectangular. The general format of a RAC
array code, with SPC on rows/columns and in straight
directions, is given as follows:
X11
X21
...
Xk11
Pn11

X12
X22
...
Xk12
Pn12

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

...
...
...
...
...

X1k2
X2k2
...
Xk1k2
Pn1k2

P1n2
P2n2
...
Pk1n2
Pn1n2

where Xij (i = 1, 2, ..., k1, j=1, 2, ..., k2) represent
information bits in respect to their positions in the 2D
array. The Pin2 (i=1,2, ..., n1) and Pn1j (j=1,2, ..., n2)
represent row and column parity check bits,
respectively. The (n, k, dmin) parameters of such a array
code are the product of sub-code parameters, such as:
(n = n1n2, k = k1k2,

dmin = dmin1dmin2)

The generator matrix of a RAC code can be obtained
from Kronecker product of component sub-codes,
namely multiplying row and column SPC code
generator matrices. For example, the generator matrix
of row SPC, Grow, can be given as follows:

G

ª g1r º
« r »
« g2 »
«  »
«
»
« g nr1row »
¬
¼

r

ª1
«0
«
«
«
«0
«¬ 0

0

0





0
0


0
0


1
0

0

0

1

0
0

1º
1 »»
»
»
1»
1 »¼

0

The Array codes can be used to handle random and
burst errors [9]. The RAC array codes can be easily
augmented to improve their code rates. The
augmentation is a process of adding new code words to
an existing block code, while the block length remains
fixed. The aim of this operation is to improve the code
rate.
A code can be modified by extending, puncturing,
augmenting, and so on to meet certain design
characteristics. A simple RAC code can be augmented
with a number of techniques [10]. A number of
augmentation schemes are possible to improve code rate
of RAC codes [11]. Here, we consider augmentation of
parity check positions located at the last row and column
of an original RAC array code, denoted as CRAC. The
parity check positions can be superimposed with a 2D
repetition code, denoted as Cr, generated from an
additional information bit, Xr. We refer to such an
implementation as augmented RAC code with row
(ARAC-R) repetition sub-code, denote the code as
single augmented CARAC-R code. The superimposition of
the CRAC and Cr generates the following structure:
X11
X21

X12
X22





. . . X1k2
. . . X2k2





P1n2
P2n2



Xk11
Xk12
. . . Xk1k2
Pk1n2
Pn11  Xr Pn12  Xr . . . Pn1k2  Xr Pn1n2  Xr

The parameters of the CARAC-R are determined by
determining the minimum distance among the two
superimposed code parameters [11]. The parameters of
CRAC code are (n1n2, k1k2, dmin1dmin2) as given above and
the Cr row-repetition code parameters are given
(n2, 1, dmin-r). The dmin-RAC = 4, since it’s sub-codes are
SPC having dmin1 = dmin2 = 2. The dmin-r = n2, because Cr
is a repetition code and it’s distance linearly
proportional to its length. When both array dimensions,
n1 and n2, are greater than or equal to 4, then the
minimum distance of the resulting ARAC-R code will
also be 4. The code rate improvement of ARAC-R type
is 1/(n1n2) in comparison with an original RAC code.
The rate of this ARAC-R code can be improved
further, by augmenting the last column, which we call
augmented RAC with row and column (ARAC-RC)
repetition sub-codes. Note that the ARAC-RC structure
and procedure is an extension of ARAC-R.
In order to construct a ARAC-RC code, a repetition
code, denoted as (n1, 1, dminc = n1) Cc, generated from
an additional information bit, Xc is superimposed onto
the last column of an ARAC-R code to obtain double
augmented CARAC-RC code:
X11
X21

X12
X22





. . . X1k2
. . . X2k2





P1n2  Xc
P2n2  Xc



Xk11
Xk12
. . . Xk1k2
Pk1n2  Xc
Pn11  Xr Pn12  Xr . . . Pn1k2  Xr Pn1n2  Xr Xc
Such a augmented RAC scheme provides a code rate
improvement of 2/(n1n2) for an ARAC-RC code in
comparison with an original RAC code. This is 1/(n1n2)
improvement over the ARAC-R type construction. This
gain is obtained without any degradation in the dmin.
The augmented RAC codes can be represented by a
trellis diagram [11]. Once a trellis is constructed for an
ARAC code, then it can be decoded in a similar
manner of MLD of VA for RAC codes [12]. Also,
possible perform decoding for different type of
detection schemes, namely hard-decision (HD) or softdecision (SD) and unquantized detected formats.

3. Visual Tool Components
Visual representations help us to gain insight by
watching patterns when working with complex and
dynamically changing systems. A visual tool can also
be used for debugging purposes as well. In the design
and implementation of visual tools, we should focus
our visualization concepts on simple representations of
the systems key conceptual components [6].
Furthermore, we should also strive to have interactivity

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

in our implementations, since interactive interfaces
play an important role in changing and viewing
attributes. A visual representation should closely
match its abstraction in order to reduce difficulty in
translation between the visualized form and the
system’s internal representation.
We have designed and implemented a visual
debugging tool for ARAC codes employing object
oriented programming (OOP) using Microsoft Visual
Studio .NET development tools. The general interface
of the visual tool is given in Fig.1, having pull-down
menus, on form controls and various display options
for code construction and its trellis representation.
Since the Fig.1 is not big enough to see the details of
the interface, some parts of the interface will be given
below separately.

code, and in Fig.4 (b) RAC code augmented with Xr as
well as Xc to construct ARAC-RC code. The next and
back are for browsing through input sequences, while
reset is for setting input to all-zero.

(a)
(b)
Fig.4 View of encoded array based on code
type selection; a) ARAC-R, b) ARAC-RC
Also Xr and Xc can be toggled between 0 and 1 to see
their effect, as shown in Fig.5; in (a) Xr = 0 and in (b)
Xr = 1. Note that parity-bits, which are placed in a redrectangles are toggled when value of bit used for
augmentation is changed.

Fig.1 General view/shape of visual tool and
trellis diagram sample of ARAC codes.
(a)
Let’s look at the details of the interface, starting from
the pull-down menu, as shown below.

(b)

Fig.5 A non-zero input with a) Xr=0, b) Xr=1
The active path changes as the bit value selected for
augmentation is toggled, it moves from upper-level to
lower-level portion of the trellis as shown in Fig.6

The interface allows us to select various options and
parameters, such as the size of information array k1x k2
and code-type, such as RAC, ARAC-R, ARAC-RC as
shown in the following interface segment:

Based on the k1x k2 and code-type selection, an array
of all-zero is constructed, with additional controls the
input sequence can be changed, as shown in Fig.4. The
encoder gets a set of information bit sequence as its
input, based on k1 x k2. These information bits can be
obtained from an input file or they can be entered by
control buttons. The individual array bits are
represented by circles, 0s as black circles, and 1s as red
circles. In Fig.4, k1 = k2 =2 are selected, hence, RAC
code will be (3, 2) x (3, 2). In Fig.4 (a) RAC code
augmented with an additional Xr to construct ARAC-R

(a) Xr = 0

(b) Xr = 1
Fig.6 The change of active path based on Xr

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

Based on the selected k1 x k2 parameters for ARAC a
trellis showing all possible trellis paths calculated by
the following expressions based on augmentation type.

N path -ARAC-R
N path -ARAC-RC

2 k1k2 1

In the following, the data in between the parentheses is
(previous-node metric, branch metric from previous-tonext node, next-node metric). The data following
metric calculation is input/output bits.

2 k1k2 11

The trellis initially starts from the zero state/node, and
has transition to all other states at the next depth. In the
last/end part of the trellis all states arrive to zero
state/node again. In order to distinguish transition
between different states, the interface allows the
transition edges/lines between states to be drawn in
different colors. Out of Npaths-type possible paths, one of
them is the active path with the minimum accumulated
distance drawn using a thick-red line segments, as it is
shown in Fig.6

Errors can be added to the encoded data sequence in a
controlled manner as it’s shown in Fig.9. We can enter
the number of errors to be introduced and let the
simulator to generate errors in sequence, or we can
generate errors at specific array positions.

4. Using Visual Tool for Debugging VA
A trellis diagram has branch labels associated with
each line between states for the implementation of
Viterbi MLD decoding. The branches are labeled with
the input/output sequence transition between the
current and next state. This labels can be viewed on the
trellis for debugging purposes, as shown in Fig.7

Fig.7 Trellis branches with input/output labels

The program also provides an interface to analyze the
trellis diagram node-by-node. By doing so, we can
view details of processing performed at each node.

Fig.8 Single-node analysis

(a) 1 error
(b) 2 errors
Fig.9 Errors can be introduced at specific
positions in the array
The program also provides an interface for viewing
received sequence to be fed into decoder. The received
sequence is compared with the sent sequence, in order
to determine if there are any errors. The error locations
are illustrated in hollow-circle (or with an encircled
point) format for better reveling error positions, as
shown in the Fig.10 (b), which indicates that there is a
single-error in the received sequence. In Fig.10 (a)
original encoding process, as well as intentionally
introduced error at the sender side. The program also
provides an interface to display decoder output, as
shown in the lower part of Fig.10 (b)

(a) sender/encoder
(b) receiver/decoder
Fig.10 Encoding, intentional error intruding,
receiving, decoding and outputting data

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

5. Conclusions
The received signal from channel is detected using a
matched-filter detector and feed into modified Viterbi
trellis decoder of ARAC codes. The decoder is
designed to process input sequence in different
detection schemes, namely HD, SD or unquantized.
The surviving path after performing decoding through
the trellis is determined and shown with thick-red lines.

We have designed and developed a visual tool to be
used in debugging Viterbi decoding for augmented
RAC array codes. The tool can be effectively used in
step-by-step tracing decoding stages. This visually rich
interactive user interface provides a number of
functionalities for viewing construction various ARAC
code with different features and parameters. The tool
can easily be extended and integrated into a complete
communication system simulation model, which can be
used for research and/or teaching/training. The tool
constructs/calculates trellis diagram and decodes RAC
as well as ARAC codes dynamically, without storing
trellis information of individual codes in a database.

6. References
Fig.11 Surviving path after VA decoding
In the ending part of trellis for ARAC-RC we have to
options, based on Xc being 0 or 1, and this is illustrated
in the Fig.12. If Xc = 0, labeling of the last portion of
trellis will be 0/output, and when Xc = 1, labeling will
be 1/output, instead of generating a multi-level graph.

[1] Viterbi, A.J., "Convolutional Codes and Their
Performance in Communication Systems", IEEE Trans.
Comm., Vol. COM-19, No.5, pp. 751-772, Oct. 1971
[2] Biglieri, E., Divsalar, D., McLane, P.J. and Simon,
M.K., "Introduction to Trellis-Coded Modulation with
Applications", McMillan, New York, 1991
[3] Honary, B. and Markarian, G.: "Trellis Decoding of
Block Codes: A Practical Approach", Kluwer, 1997
[4] Lin, S. et al: "Trellises and Trellis-Based Decoding
Algorithms for Linear Block Codes", Kluwer, 1998
[5] Schlegel, C. and Perez, L “Trellis and Turbo Coding”,
Wiley, 2004
[6] Crossno, P. and Rogers, D. H. “Visual Debugging”,
IEEE Computer Graphics and Applications, pp. 6-10,
Nov. 2002
[7] Rha, P. S. “Simulation and Visualization of the Viterbi
Decoder Using a Spreadsheet”, IEEE Trans. On
Education, Vol. EDU-46, No.3, pp 379-386, Aug 2003

(a)

[8] L. Kaya and M. Al-Qudah “A Visual Tool for Trellis
Construction and Decoder Debugging of RAC Array
Codes”, IEEE Int. Conf. on Information and Comm.
Technologies, 27-28 August 2005, Karachi, Pakistan,
pp. 105-108
[9] Farrell, P. G: “A survey of array error control codes”,
European Trans. On Telecomm. and Related Tech,
Vol.3, No.5, pp. 17-30, 1992
[10] Goldberg, M.: “Augmentation Techniques for a Class of
Product Codes”, IEEE Trans. Inform. Theory, Vol. IT19, No.5, Sept 1973
[11] L. Kaya. "Augmented RAC Codes in Block-Coded
Phase/Frequency Modulation Schemes", IEEE Int.
Conf. on Communication Systems, Singapore, 25-28
November 2002

(b)
Fig.12 End of trellis branch labeling based on
the value of Xc used for augmentation

[12] Honary, B., Kaya, L., Markarian, G.S. and Darnell, M.
"Maximum Likelihood Decoding of Array Codes with
Trellis Structure", IEE Proc, Part-I, Vol.140, No.5, pp.
340-345, Oct. 1993.

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

