An Automatic Generation of G1 Curve Fitting of Arabic Characters
Fatimah Yahya ,Jamaludin Md Ali, Ahmad Abdul Majid, Arsmah Ibrahim
FTMSK, Universiti Teknologi Mara, Shah Alam, Malaysia,
Pengajian Sains Matematik, Universiti Sains Malaysia, P. Pinang, Malaysia,
Pengajian Sains Matematik, Universiti Sains Malaysia, P. Pinang, Malaysia,
FTMSK, Universiti Teknologi Mara, Shah Alam, Malaysia.
fatimahy2003@yahoo.co.uk, jamaluma@cs.usm.my, majid@cs.usm.my,
arsmah@tmsk.uitm.edu.my

Abstract
An Arabic font is difficult to fit as it is cursive in
character, having varying curves and cusps. Here, the
Arabic character is represented as an outline font
fitted with G1rational Bezier cubic curves.
As a method in reverse engineering, the Arabic
character is created by way of digitizing an image that
already exists and then fitting G1curves automatically
to the outline of the digitized image. The outline font
representation is done in several phases – contour
extraction of font image, corner point’s detection and
lastly contour segment fitting. Image is considered as
binary and boundary is obtained accordingly.
Eigenvalues of covariance matrix and the concept of
region of support are employed to search for the
corners of the Arabic characters which are of varying
degrees of smoothness. G1 rational Bezier cubics,
iteratively determined, are used in the last step. The
weights are adjusted automatically to get curves that
are as close as need be to the digitized data points.
This technique can be extended to visualizing
outlines of other contour-based images automatically.

1. Introduction
Font representations in the computer include
bitmaps, contours (outline), brush strokes and offset
curves. Bitmap representation requires every size font
to be tuned to excessive detail to a specific printer.
Latin uses outline fonts while non Latin with scriptlike nature have been represented as outlines, brush
strokes or offset curves. A big disadvantage of using
outline fonts is that, scaling down to smaller sizes
reduces legibility.
Arabic font present added
difficulties as it are cursive in character, having wavy
curves and cusps.

Outline font representations however, are popular
as it can be more freely manipulated i.e. resized,
translated, rotated and clipped.
There are two ways to create outline fonts. The
first is by digitizing some already designed image of
fonts and then fitting curves to the outline and second,
by designing the curves itself in the computer.
The first of the method is used here. Traditionally
it is done in several phases; contour extraction, corner
points’ detection and lastly contour segment fitting.
The contour extraction involved converting the grey
level image to bi-level image. Boundary is detected
and some curvature analysis is done to detect corner
points. Then curves are fitted between the points,
usually some form of Bezier curves. His Ming Yang
et al [15] used Bezier curves and the accuracy is
checked with a computed curve fitness cost. If it is
large, control points will be adjusted. Michael,P. and
Maureen, S. [7] iteratively obtained piecewise
parametric cubic polynomials close to data points
defined by an error measure based on least squares.
Shouqing et al [11] fits quadratic algebraic curves by
recursive curve fitting and fine tuning. Sarfraz and
Khan’s[8] algorithm involve recursively segmenting
and fitting cubic Bezier curves until a certain leastsquare tolerance is satisfied by all fitted curves.
Sarfraz and Khan [9] further improves [8] by
reparameterization before further segmenting in the
effort to reduce number of curves. Fatimah et al[2]
also recursively segmenting and fitting
Arabic
characters with cubic Bezier until all curves satisfy a
threshold. A search for a representation with least
number of segments is made which is then fitted with
G1 rational Bezier cubics.
This paper sees the automatic G1 fitting of the
Arabic letter “qaf” and “dal” ( Fig. 1.) by rational
cubic curves. The method consists of two main partssegmentation and curve fitting. Segmentation sees the
digitized outline or boundary been segmented by its

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

corner points. The second part starts with fitting a G1
parametric cubic Bezier representation to the segments.
If a curve is not close enough to the digitized data
point as desired; i.e. the curve does not satisfy the
distance or threshold tolerance; the curve is framed in
rational form. The weights that do results in a
satisfying curve are found automatically by an iterative
procedure. However this iterative procedure has a
physical limitation –there might not be a curve that
does satisfy the threshold tolerance due to the physical
arrangement of the digitized data points. When this
happens, the iteration failed to produce curves that fall
below the threshold tolerance. The curve is then split
into two pieces and the fitting procedure repeated with
the additional segment. The fitting process is done
piecewise. The threshold tolerance is one pixel.
Programming is done in Mathematica.

(a)

(b)
Fig.1. Digitized image of (a) qaf and (b) dal.

2. Boundary extraction
Digital images of the Arabic letters are obtained
by scanning its designed pictures. The boundary is then
extracted. There are many ways to get the boundary,
[1], Gonzalez [3] and other good edge detection
techniques. Some involve getting it directly from gray
level images to minimize errors in detection. However

getting the boundary from binary image is simpler and
faster. The font image here is considered a “simple”
image – i.e. without tremendous detail and is two tone
- black characters on white background, justifying the
use of binary methods.
However care is taken to lessen errors in detection.
Preprocessing is done and the resulting digital image is
then converted into binary image by thresholding. A
closed contour of one pixel thick is extracted from the
binary image.

3. Corner detection
Corner detection methods falls broadly into 2
categories – ones that act directly on gray levels and
those that are based on boundaries. Methods based on
boundaries are simpler and faster. Boundaries are
represented either by points or chain codes.
Generally chain code methods involve computing
some measure or estimate of curvature or measure of
significance at each point. The corner points are those
that are above a certain threshold and/or are a local
maximum.
Other fields of study have also been applied in
techniques to search for the corner points. Tsai [13]
uses neural networks, Lin et al[5] and Liu et al[6] use
mathematical morphology and Lee and Bien[4]
employ fuzzy logic techniques.
Teh and Chin [12], propose a method that first
determines the region of support for each point based
on its local properties, and then computes measures of
relative significance of each point. Tsai et al [14]
propose using eigenvalues of the covariance matrix of
a sequence of connected points over a region of
support to measure corners. If points form a linear or
almost linear line, the small eigenvalue will be close to
zero.
Here we use Teh and Chin’s [12] method of
utilizing region of support with Tsai et al [14] ideas of
eigenvalues of covariance matrix as a way of
measuring corners. However, instead of using the
λs
is
smaller eigenvalue, λ s as in [14], the ratio;
λs + λl
used as a measure of curvature as it is better in dealing
with differences in magnitudes of data points and sizes
of supports. λ l is the larger eigenvalue of the
covariance matrix. Corner points are the data points
whose eigenvalue ratios above are local maximums
and whose angular measures are greater than a certain
value. If p k −1 , p k , p k +1 are three consecutive data
h
b
and h is the

points, then the angular measure of pk is the ratio;
where b is the distance from pk-1 to pk+1

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

length of the perpendicular from pk to pk-1pk+1. Refer
to Fig. 2.
It is to be noted that a visually good representation
of Arabic fonts, depends much on detecting the right
set of corner points.
Pk
h
b

pk-1

pk+1

Fig. 3. Curves for fourth segment
of dal.

Fig. 2. Angular measure of point pk.
1

4. G Fitting
G1 curves are fitted between corner points. C1 is
not preferred, as loops may form in order to maintain
equal length tangent vectors at joints. In the figures,
there are cusps and very sharp corners which should
remain G0. Their positions are determined at the corner
detection stage.
Chord-length parameterization is used to
approximate the value of the parameter t i for each data
point, p i of each segment formed by the corner points.
Bezier cubic curves that best approximate the outline
of the segment formed by the corner points are fitted to
the figure. “Best approximate” means that the sum of
squared differences between fitted curve values and
data points for each segment is at minimum. These
curves are then adjusted at the joints to give G1
representation. In so doing, the curves do become
somewhat distorted and oftentimes do not anymore
satisfy the threshold tolerance.
The problem is overcome by framing the curve in
rational form with weights w 1 , w 2 , w 3 and w 4 and
then determining these weights that can pull the curve
closer towards the digitized data points without
changing the control points thus preserving G1. Fig. 3.
shows the curves for the fourth segment of dal. The
lighter curve is the original cubic Bezier, which is G1
at the joint with the curve before it and do not satisfy
the threshold tolerance. The dark curve is the rational
Bezier with weights adjusted to satisfy tolerance.
Automatic adjustments and determination of these
weights is obtained by optimizing at each iterating
reparameterization. The parameterization acts as a
design parameter – different parameter values gives
different curve. Reparameterization and optimization
is done until the desired curve is obtained.

As mentioned in Section 1, the iterative process
may not end with the desired curve i.e. within
tolerance. The limits of the iterative process is reached
when further iteration does not lower the maximum
distance of curve to digitized data points. When this
happens and tolerance has not been satisfied, the curve
is then split into two, and the fitting process repeated
for the two new segments obtained. The split is done at
the middle as this gives less segments overall. A split
at the point of largest difference between digitized
point and fitted curve, was tried and abandoned as it
causes a further problem - the point of largest distance
may sometimes be very close to the corner points or
splits, thus necessitating the addition of new data
points for a cubic to be fitted.

4.1 Best approximate curve
If Q(t) is the fitted curve and p i the data-points
then,
m

m

i =1

i =1
m

S = ¦ (Q(t i ) − p i ) 2 = ¦ (Q x (t i ) - p x i ) 2 +

¦

i =1

(1)
(Q y (t i ) - p y i ) 2

is at minimum. Let,
Q(t i ) = B0 (t i ) P0 + B1 (t i ) P1 + B2 (t i ) P2 + B3 (t i ) P3 . The

two intermediate control points, P1 and P2 are found by
minimizing S. The x-coordinates of the control points
are found by solving the linear system obtained when S
is differentiated with respect to P1x and P2x. The ycoordinates found by differentiating with respect to y
respectively.

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

4.2 G1 joints
Consider 2 consecutive Bezier cubic curve
segments H(t),Q(t) with control points H0,H1,H2,H3
,P0,P1,P2,P3 where H3 = P0. These curves need to be
made G1 at P0. The direction of end tangent of Q (t) is
also preserved. m and n are the length of beginning
and end tangent vectors respectively.

Q′( t m )

Pm

Q(t)
tm

Q( t ) = B0 ( t ) P0 +

B1 ( t ) (m( H3 − H 2 ) + H3 ) +

(2)

B2 ( t ) (n ( P2 − P3 ) + P3 ) + B3 ( t ) P3

Let R 2 =

n

¦

i =1

Q( t i ) − pi

¦ [(Q( t i )x − pi, x )
n

i =1

2

2

Fig. 4. Reparameterization

=

+ ( Q ( t i ) y − pi , y )

2

]

(3)

The value of m and n that minimize R2 is found. The
new control points are, p1 = m (H 3 − H 2 ) + H 3 and
p 2 = n (P2 − P3 ) + P3 . The system above is just a
linear system of two equations and is thus very fast to
solve.

4.3 Reparameterization
Let Q(t) be a cubic Bezier curve and pm a data
point. The curve is assumed to be regular. The shortest
distance between them is the perpendicular distance.
See Fig.4. The parameter corresponding to this shortest
distance will give rise to the optimum curve. Let the
parameter at which this occurs be tm.
Thus, ( Q( t m ) − p m ) . Q ' ( t m ) = 0 ,
is quintic in t.
(Q(t m ) x − p m , x ) Q' (t m ) x
+ (Q(t m ) y − p m , y ) Q' (t m ) y

= 0

Let z = (Q(t) x − p m, x ) Q' (t) x +
(Q(t) y − p m, y ) Q' (t) y

(4)

(5)

z - z1
t - t1
=
. At t = tm , z = 0 and so;
z 2 - z1
t 2 - t1

z 2 t 1 - z1 t 2
.
(7)
z 2 − z1
So by providing t1 and t2, the parameter value tm at
which minimum distance occurs can be found
iteratively to the degree of precision required. tm is the
tm =

4.4 Iterative procedure to achieve tolerance
The rational Bezier cubic Q (t) is;
3

¦ w i Bi ( t ) Pi

Q(t ,w1 ,w2) =

i =0
3

,

(8)

¦ w i Bi (t )

which is a quintic.
To simplify calculations, linear interpolation
method is used to approximate the solution of (4).
Approximate z to be a linear function of t, i.e.
z = a t + b for some a and b and for t close to tm.
(6)
Let z1 = a t1 + b and z2 = a t2 + b.
Thus z - z 1 = a (t - t 1 ) and z 2 - z 1 = a (t 2 - t 1 )
and

new parameter value corresponding to the data point
pm . This method works well if t1 and t2 are close to t.
Here the starting t1 is the original parameter
obtained by chord length while t2 is a step size (0.01)
away from t1. The resulting t from this first iteration
becomes t1 for the next iteration and the t2 will again
be a step size away.
The iteration stops when
consecutive results for t do not differ in the first three
decimal places.
Equation (4) above can of course be solved by
Newton Raphson, but linear interpolation method
above involves simpler calculation requiring at most
the evaluation of the first derivative of Q (t) whilst
Newton Raphson require the evaluation of z′(t ) .
However Newton-Raphson converges faster.

i =0

where wi are the weights.
Here w0 and w3 are made equal to 1 and values of
w1 and w2 varied. The values of w1 and w2 are
automatically determined by optimization at each
iterating reparameterization. Let,
n

D 2 = ¦ Q( t i , w1 , w 2 ) − p i
i =1

2

=

(9)
ª(Q( t i , w1w 2 ) x − p i, x ) 2 + º
«
»
¦
2
i =1 « (Q( t i , w1 , w 2 ) y − p i, y ) »
¬
¼
be the squared distance between fitted curve values at
parameter values t i and corresponding digitized data
points pi. Differentiate with respect to w 1 and w 2 and
equate to zero.
n

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

∂Q( t i , w1 , w 2 ) x
∂w1

½
°
i =1
°
°
∂Q(ti , w1, w 2 ) y
+ ( Q(t i , w1, w 2 ) y − pi, y )
= 0°
°
∂w1
¾
n
∂Q( t i , w1 , w 2 ) x
°
−
(
Q(t
,
w
,
w
)
p
)
¦
i
1
2 x
i, x
°
∂
w
2
i =1
°
°
∂Q(t i , w1 , w 2 ) y
=0°
+ ( Q(ti , w1, w 2 ) y − p i, y )
∂w 2
¿
n

¦ ( Q(ti , w1, w 2 ) x − pi, x )

(10)

which is a system of non-linear equations in 2
unknowns ; w 1 and w 2 . The system is solved
numerically using Newton’s Method. This iterative
method is started off with w 1 and w 2 taking the value
1. The starting w values for the next reparameterization
will use w values resulting from the previous iteration.
This makes the whole process faster.

5. Results
Fig. 5. shows the digitized outline obtained and
the corner points detected for qaf and dal. The angular
measure used in both these figures is 0.04. The results
are good as the corner points obtained are as expected
visually from Fig. 1.
Fig. 6 shows the G1 fitted curves for Qaf and dal
that satisfy a threshold of one pixel. The Qaf needs 13
segments for the main body, three for the inner head
and eight for the two dots. All segments in the inner
head and dots do not need any iteration to reach
tolerance. This means an addition of only three
segments for Qaf from the original segments formed
by the corner points. Dal needs 4 additional segments
from six.
Table 2 and Table 3 below show the number of
iterations needed by the main body of qaf and dal
respectively. Not many iterations are needed to reach
tolerance and only five need the iterations in the first
place for qaf and four for dal. Fig. 6. also shows the
digitized data points the curves are supposed to
approximate and their final segments.

Table 1. Number of segments for qaf and
dal

Qaf
Dal

Original
Segments
21
6

Final
segments
24
10

Fig. 5. Digitized outline of qaf and dal with
their corner points.

Table 2. Number of iterations for main
body of qaf.
Segment
No.of
iterations

1
0

2
12

8
82

3
12

9
0

4
0

10
0

5
0

11
0

6
24

12
0

7
0

13
8

Table 3. Number of iterations for dal
Segment
No. of
iterations

Additional
segments
3
4

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

1
0

2
83

3
0

4
7

5
6

6
0

7
0

8
0

9
107

10
0

[3] Gonzalez, R.C. and Woods, R.E. , Digital Image
Processing 2nd Edition, Prentice Hall, 2002.
[4] Lee, K.J. and Bien, Z., Grey level corner detector using
fuzzy logic, Pattern Recognition Letters. 17, 1996, 939950.
[5]

Lin, R.S., Chu, C.H. and Hsueh, Y.C., A modified
morphological corner detector, Pattern Recognition
Letters, 19, 1998, 279-286.

[6] Liu, W.Y., Li, H. and. Zhu, G.X., A fast algorithm for
corner detection using the morphologic skeleton,
Pattern Recognition Letters. 22, 2001, 891-900.
[7] Michael,P. and Maureen S., Curve fitting with
piecewise parametric cubics. Comput. Graph.17 (3)
,1983,229-239.
[8] Safraz, M. and Khan, M.A. , Automatic outline capture
of Arabic fonts, Information Sciences 140,2002, 269281.

Fig. 6. G1 representations of qaf and dal with
their digitized data points and final
segments.

6.

[9] Safraz, M. and Khan, M.A. , An Automatic algorithm
for approximating boundary of bitmap characters.,
Future Generation Computer Systems 20,2004, 13271336.
[10] Salomon, D. (1999). Computer graphics & geometric
modeling, Springer, 1999.

Conclusion
1

The G fitting is a good approximation and
representation of the data points and digitized image
respectively, without using many segments or massive
computation.

References
[1] Avrahami, G. and Pratt, V. Sub-pixel edge detection in
character digitization, Raster Imaging and Digital
Typography II, 1991, 54-64.
[2] Fatimah,Y,Jamaludin,M.A.,Ahmad,A.M.,Arsmah,I.An
automatic generation of G1 curve fitting of Arabic
characters using rational Bezier cubics with weight
adjustments, International Conference on Quantitative
Science and its Applications 2005,ICOQSIA 2005, 6-8
Dec. 2005.

[11] Shouqing, Z., Ling,L, and Hock Soon, S. , Recursive
curve fitting and rendering, Visual Comput. 1998, 6982.
[12] Teh, C.H. and Chin, R.T. , On the detection of
dominant points on digital curves, IEEE Trans. on
pattern analysis and machine intelligence, 11,1989,859872.
[13] Tsai, D.M.,Boundary based corner detection using
neural networks, Pattern Recognition, 30(1),1997,8597.
[14] Tsai, D.M. and Hou, H.T. and Su, H.J., Boundary based
corner detection using eigenvalues of covariance
matrices. Pattern Recognition Letters, 20, 1993, 31-40.
[15] Yang, H.,Lu, J. and Lee,H., A Bezier Curve-based
Approach to Shape Description for Chinese Calligraphy
Characters, IEEE ,2001,276-280.

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

