Approaching Effective Data Visualisation in a Research Setting
Mark R. Titchener
Department of CS, University of Auckland, Private Bag, Auckland, New Zealand
mark@tcode.auck1and.ac.n~

Abstract
A general purpose, easy-to-use graphical visualisation
tool has been developed to facilitate the display of experiment data. It supports simultaneous or selective rendering
of surfuces, graphs and animated traces in a virtual 3 0 environment. It can accept as many as 100,000 objectsfor animated replay, and allows for interactive control of viewing
position, lighting and other display parameters. The viewer
is thus well suited to scoping expeviment results, visually
debugging data processing algorithms, andpresenting conzplex data. Its principal application is in the visualisation of
surfaces and graphs in the entropy analysis of medical and
industrial related time-series.

1. Introduction and motivation
Computing hardware, operating systems and display
subsystems today provide a very high standard of capability
compared to what was available even tens years ago. While
the very latest of graphical techniques are widely available
in games, and many established research and design applications [ I , 2, 31, accessing native graphics capabilities outside of these software applications remains for most of us a
non trivial task. It requires a level of familiarity and experience with graphics primitives such as those offered by the
OpenGL [4, 51 and GLUT libraries. While these libraries
hugely streamline access to the interface, they also presume
a level of programming that most experimentalists are unlikely or unwilling to embrace.
This paper describes an interactive graphical interface
"Space Odyssey" (a UNIX tool s p o d ) [6], that to some
extent addresses this problem (The name is taken kom
the movie [7] which has influenced our approach to visualisation). s p o d flexibly renders surfaces, graphs and
dynamic traces, even animated sequences of graphs and
traces, within a 3D viewing frame without requiring specialist knowledge of computer graphics. s p o d incorporates in
the one environment, a mixture of features that seem not to
be available in popular numerical computing environments.

Our research involves the analysis of medical and industrial related time series. The emphasis of the work is in
the development of non-linear measures, in particular deterministic information and entropy [8] and their potential
for application in medical areas, as outlined in [9]. The development of s p o d was begun in answer to a rather simple
requirement, our need to efficiently view 3D surfaces generated from stored arrays of floating point numbers.
This work cui-rently entails offline processing of sizable
data sets, with a combination of standard analytical methods as well as proprietary information and entropy tools.
The data to be displayed is typically generated from a two
step process; i) the symbolization of time series [lo], and ii)
the computation of T-complexity/T-entropy [I I]. The emphasis on typographical rather than numerical processing in
deriving entropy essentially ruled out the use of Matlab for
all but the display of the resultant data. However, the process of then loading data into Matlab for viewing purposes
proved to be a bottleneck.
Thus s p o d has developed over time to operate as an interpreter accepting formated arrays or lists from stored files
or from standard input. The data mays, with brief prescriptive headers and display directives, are maintained as
readableleditable texts. This can considerably facilitate the
process of manipulating the data and graphical objects.
Objects are displayed in virtual 3D allowing the user to
roll and spin these, alter the lighting and shading conditions and also animate trace data and graph sequences. It
is entirely practical to review tens of thousands of graphs
sequentially in the space of minutes, and yet still be able
to instantly switch to alternative views and data sets at the
click of a mouse or key.
The following sections detail aspects of s p o d and the
data formats supported by it. Accompanying figures are
drawn from our research and illustrate some of its capabilities.

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

Figure 1. Dynamic display of EEG and EOG polygraph data. The time scale and replay rates are
interactively selectable, as are the viewing position and lighting conditions. Static graphs (as shown
in yellow) may be simultaneously displayed. Here a 'ball' cursor indicates the current sleep state for
the patient, in relation to the displayed portion of the polygraph series.

Figure 2. Surface data may be rendered in one of a number of ways: i) wireframe (top left), ii) tessellated surface wlcolour gradient (top middle), iii) smoothed surface (lower left), and as in iv) the colour
gradient, surface orientation, lighting angle, etc, are under interactive control. The surfaces shown
here arises from a swept bi-partition applied to recorded EEG. The height of the surface represents
the information content (entropy) computed from coded strings sampled within a sliding window.
Appropriate orientation of the surface, and lighting position can reveal subtle detail. The appearance of "score" lines as in the right-most surface are visible within a narrow range of conditions
only. The sensitivity of the entropy analysis methods is evident from the fact that these artifacts
correspond to minor non-linearities in the analog-to-digital interface.

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

Figure 3. Illustrating a combination of static and dynamic traces, including a ramped sine function
(in yellow), a loose spiral (green), a 'corkscrew' (magenta), a large spiral (blue), an animated ramped
cosine (red), as well as ball-markers. The text to the right illustrates the format of the data used to
produce these.

Figure 4. From top, i) the simultaneous display of 7000 waveforms, ii) an alternative viewing mode
emulating an oscilloscope, iii) a animated 3D view of consecutive waveforms with depth and 'phosphor' persistence, iv) the viewing angle and lighting under interactive control allows the user to
flexibly monitor an uninterrupted replay of the graph sequence.

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

2.2005 Space Odyssey
2.1. The viewing space
The viewer loads pre-formated data, comprising lists
and/or arrays of numbers appropriately interspersed with
header information and viewing control directives. It operates as an interactive viewing environment. There is nothing sophisticated about the way objects are created or rendered. s p o d simply provides a quick and convenient way
to create graphical depictions from lists and arrays of data.
A single instance of the viewer can support surfaces, static
and animated graphs and traces, as well as visual markers,
text objects, in fact as many as 100,000 separately defined
objects at a time.
The viewing space is nominally a fixed 3D volume
bounded by (+lo, f6, f8) units. As the lists of floating
point data are read into memory these are scaled and offset
using the parameters included in the header, to place the object within the viewing space. Objects in the viewing frame
may be spunlrotated about the centrally located origin.
The data follows an easily readable text format. Much
of our data is generated by way of elementary shell scripts.
Using a text format gives added convenience. For example,
on may use a text editor to manipulate small numbers of
objects, or document file contents This facilitates in debugging scripts but it is also often quicker to cut and paste objects together or edit display parameters than to regenerate
objects in alternative settings and combinations. It is often
convenient to store data objects in individual files and then
use shell scripts to catenate the object files as appropriate to
give specific viewing combinations. Alternatively, the object files containing the explicit arrays of data may be used
directly in subsequent data processing steps. By prepending appropriate headers to the new results one may effectively creates a visual journal of the processing stages. We
have begun to experiment with the encapsulation of shell
scripts in the graphics files so that the files may be optionally edited, processed, executed or visualised (this seems
reminiscent of Knuth's Web-Tangle-Weave).
Optional illuminated scales, like on an oscilloscope
screen, serve as a visual reference. Other visual cues can
be added specifically as graphical objects if desired. The
sx and yx illuminated scales divide the viewing space into
quadrant volumes and assist with identifying orientation.
Objects may be interactively rotated about the s and x axes.
Objects that extend beyond the nominal display space are
often made visible by rotating the features into view. Perspective conveys a sense of distance and depth. For some of
the animated display modes a simulated persistence typical
of a phosphor screen further adds to the perception of depth.
Multiple and simultaneously instances of the viewer can
be invoked, each with independent data files. This ability to

raise multiple and simultaneous viewing windows can add
considerably to a visualisation experience.

2.2. Object file format
The graphical objects currently supported by the viewer
include surjace arrays, static and dynamic curves of various
kinds, positional markers and combinations of these. As
many as 100,000 objects may be simultaneously loaded for
viewing.
An object header prescribes how data is to be interpreted
for display. The first line of the header follows the general
syntax: o b j e c t - s p e c i f i e r [ :c o l o u r ] :l a b e l
The object specifier is a single letter indicating the type
of object to be displayed, and thus the format of the data
that follows the header. Lower case specifiers are reserved
for static objects and upper case for animated or dynamic
objects.
s: surface, partially specified mesh in z
S: surface, fully specified co-ordinate lists
x: fully specified 3D static graph
k: partially specified 3D static graph

y: simple 2D static graph (parallel to yx plane)

z: simple 2D static graph (parallel to zx plane)
X: fully specified 3D static or animated graph

K: partially specified 3D trace
Y: simple 2D trace (parallel to yx plane)

Z: simple 2D trace (parallel to sx plane)
For static and dynamic graphs, a single letter colour
specifier is included; r: red, g: green, b: blue, y: yellow, c : cyan, m: magenta, w: white, < s p > : black. Each
object includes a mandatory label. The labels represent the
most basic level of documentation within a file, but also can
provide useful cues if displayed during animated graph sequences.
Animated displays are driven by two internal floating
point parameters; a counting index that runs in the interval g E [0.0,1.0], and a display range index w €
[0.00025,1.0]. Both are controllable interactively from
mouse & keyboard actions.
Within the present constraints of the viewer, and its low
level prescriptive text format, there exists considerable flexibility for the imaginative display of static and animated
data. The figures included help to illustrate some of the
options.

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

2.4. Static graphs

2.3. Surfaces
A surface may be partially of fully specified. Partially
specified surfaces are described by a regular array (mesh)
of displacement values: z = f (x, y). More complex surfaces may be described by a list of fully specified (x, y, z)
co-ordinate values. A maximum of ten surface objects may
be loaded for a given viewing session, each individually
selectable or de-selectable from default key assignments
(0,9,8,7 . . .).
The following is an example of a partially prescribed
surface:
s :my-surface

1140 200
7.0

2.0

2.0

0 0 0
0.573929

:

0.523732

0.766812

1.304675

0.656496

...

(196'1norelines. each line wirh 1140 values)

0.607111 0.486708

0.481093

0.382610

0.401976

The header for the surface begins with the specifier, s,
followed by the colon separator and label. Two further integer parameters indicate the extent of the mesh data array.
Six more parameters define the x, y, z floating-point scale
factors, and offsets used to scale and position the surface
within the default view. Finally, the data itself is listed. In
the afore given example this comprises 1140 x 200 floating point space-delimited values. The precise formating of
the array is not critical though typically follows the mesh
dimensions.
The surface display is modal (c.f. Figure 2), but defaults to the smoothed surface and a colour gradient. Keyselectable options include a display of i) the wireframe
geometry, ii) the rendered tessellated surface, with elements tinted in relation to the z-displacement, and iii) with
smoothing. The colour gradient and brightness settings may
be included as part of the input file or controlled interactively. The orientation of the object and light angle may
also be initialised as part of the input file, but are also interactively controlled. The inclusion of "qualifiers", single
line instructions in the object data file (see later) following
each object specification can help with presetting viewing
parameters.
The surfaces in Figure 2 depict the computed entropy
from a swept coarse grained bi-partition of an EEG time series (c.f. Figure 1). By rotating the object and light angle
appropriately, a number of artifacts may be revealed. For
example, the "score" lines to right of Figure 2 turn out to
come from non-linearities in the AID converter. This perhaps demonstrates the effectiveness of combining visualisation with the sensitive entropy based analysis.

Static line or point graphs may be prescribed as simple,
partial or fully specified prescriptions. For many situations
it is sufficient to obtain a graph from a single list of values.
This is the simple prescription. As with surface objects,
the size of the array is indicated in the second line of the
header. For the simple graph format, the list index implicitly
defines the x-coordinate and the graph is scaled to fit the
viewing space as determined by the x,y,z scale and offsets
respectively.
A partially specified 3D graph is possible using the k
(for kurve) specifier. Here, y and z co-ordinate values are
given with the list index again defining the x-coordinates.
The x-axis often assumes the role of the time axis in such
plots.
The number of data points in any of the graph prescriptions is arbitrary. Two graphs that need to be plotted together to fit a given interval do not need to have the same
number of points, and often don't. For example data channels may be recorded at different sampling frequencies. The
viewer handles this apparent disparity without issue.
Two further display modes exist for fully specified 3D
free-form curves, by using the specifier x or X. The lower
case specifier indicates the graph will be static. Upper case
indicates to the viewer that the graph will be part of an animated sequence of graphs.
Figure 3 provides examples of static connected-graphs
and several dynamic traces. Note the position-markers
(ball-markers) attached to the graphs respectively. These
provide visual means for linking corresponding positions
'in time' across the respective graphs. The ball-markers
trace out the respective graphs by way of the intemal counting index. Their positions are computed relative to the sizes
of the corresponding arrays. Figure 3 includes a dynamical
trace (in red), as discussed in the next section.
The viewer currently accepts up to 100,000 static freeform graphs in a given session. While it is not often that
one may wish to view all of these simultaneously, more
typically a sequence of free-form graphs may be 'played'
as an animated set to enable one to observe dynamical behaviours.

2.5. Dynamic traces and animated displays
Dynamic "oscillograph" displays, or animated displays
of time series data and graph sequences, are indicated by
using upper case object specifiers, X, Y,Z and K. The Y and
z specifiers imply a simple graph prescription that again assumes the data points will be plotted uniformly in sequence
along the x-axis. Data arrays may comfortably include upwards of a million data points for each animated trace. The
internal counting index operates as a pointer into the data ar-

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

ray, and the range index defines the visible 'window size' on
the data to be displayed. Data within the window is scaled
and offset in accordance with the header parameters.
Figure 1 illustrates the use of dynamic traces for the display of EEG and EOG data. The four traces displayed are
a small portion of the recorded time series corresponding
to a whole nights data. The static (yellow) graph and red
positional marker provide a visual indication of the patient
sleep-state for the corresponding portion of EEG and EOG
shown in the display. A more precise reference to the viewing position and range is displayed numerically at the lower
left of the graphics window.
Note that two of the channels have been sampled at 100
Hz, and have approximately twice the number of data points
than the EOC channels sampled at 50 Hz. As already mentioned, spod conveniently handles this difference implicitly by way of the default scaling processes. Traces may
be displayed statically, or dynamically at rates of more than
10,000points per second (certainly much faster than the eye
can follow). Alternatively the traces may be scrolled manually.
Quite a different animation is possible using the X specifier. These objects default to being simultaneously visible
but alternatively may be played in an animated sequence.
The internal counting index then acts as a pointer into the
sequence of graphs. The range index determines how many
consecutive graphs in the sequence will be displayed at a
given instant. Figure 4 shows a series of 7000 graphs using
several of the available display modes. For example, graphs
may be uniformly and dynamically displaced in the y or z
direction to achieve a sense of depth.

2.6. Mixing it up
A useful aspect of the viewing environment is its ability
to simultaneously handle a mix of object types. Combining
surfaces with static and animated graphs and curves may
usefully reveal hidden relationships between seemingly disparate signals.
Figure 5 shows three views of just such a mix used in
relation to sleep staging analysis. The data displayed corresponds to a complete night's worth for one patient. The entropy surface computed from the EEGlC3 channel encapsulates the events of the night. The peak values for the entropy
surface (graphed in red above the ridge), are displayed in
conjunction with the maximum entropy for the EOC/LOC
channel (green). Plotting the (red) C3 and (green) LOC
entropy data against one another results in a 3D trajectory
(colour coded by way of intersecting planes, invisible here)
that is found to be highly indicative of the patient sleep state.
This partitioned trajectory (top left) is coded; blue : awake,
red : REM sleep, green : S l (an NREM sleep state), yellow : S2, S3, S4 (further NREM sleep states). Finally the

colour codes are translated to a 'staged-sleep' graph (shown
in yellow beneath the surface object). In reality, these figures do little to convey the real power of the viewing environment. The research pertaining to the study of sleep-state
scoring is to be published elswehere.

2.7. Qualifiers, directives etc
The file formats are still evolving as new features are
added. An important aspect of the file format is the need to
cater for notes, comments and documentation to assist in the
interpretation of a file particularly if it is archived in a repository for future reference. Comment lines may be included
anywhere in a file, though not within an object prescription
itself. A comment line begins with the character #. For example:
# t h i s l i n e i s i g n o r e d by spod

Directives may also be included in the file to indicate
how the viewer is to be initialised. For example, when the
graphic objects are loaded the first of each object type defaults to being visible. All subsequent objects default to
being invisible. The default behavior may be over-ridden
by following each object with a qualifier.
v: n :make-ob j e c t - v i s i b l e

or
v: f :make-ob j e c t - i n v i s i b l e

A positional marker (a small coloured ball) may be attached to a graph object by including a directive, for example b :m: ballmarker, after the object prescription. The
second field in the directive indicates the colour of the ballmarker (as for graphs). The third field is used to label the
marker. Its role is simply to aid in file documentation.
The position of the lighting sources (currently three
lighting sources are supported) and the object orientation
for viewing may be initialised by directives. For example;
L 45 15 2 0 0 1 0 0 6 0 80

and
0 25 40

Each pair of numbers gives angles, in degrees relative to
the x and y axes respectively. In the case of the lighting the
three pairs of numbers independently position three separate sources with respect to i) surface and graph objects, ii)
the grid and screen texts, and iii) the reference ball-markers.
spod opens with a default screen size currently set to 800
by 600, but directives may be used to initialise the display
to other settings. If the display is to fill the available screen
space, the directive s :[ f 1 I [ F 1 :f u l l s c r e e n must be included in the file. Alternative window position and size values may be set, for example by including; w 40 20 900
500.

The internal counter index, window range index, and animation rate are all interactively controllable. The environment display parameters may be output (standard output)

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

Figure 5. The above figures show three views of graphical objects derived in relation to sleep staging
(see text).
Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

in a text format, text which may be included with the file
to restore the view upon initialisation. This is helpful if a
particular viewing situation needs to be returned to at some
point. While many additional qualifiers and directives are
supported there is little to be gained by enumerating these
here.

3. Future work
spod is already a capable tool. However there is much
that can be done to make this more universally useful. The
user interface could certainly be made more intuitive. Menu
options are supported by GLUT but have yet to be exploited
here. Features about to be added will support the display of
text arrays simultaneously with the current graphical forms.
The use of standard inputloutput offers an opportunity
for further functional development. Viewing parameters are
currently capable of being output in this way, and graphical
prescriptions can certainly be piped to spod for viewing. A
logical extension of this functionality would be to allow objects and display instructions to be accepted 'on-the-fly' by
way of standard input. Such features would ultimately allow spod to be used for "real-time" acquisition and display
of experiment data.
Another area ripe for development involves the full integration of shell-like scripts. Data files would then support access to the data, the display of the data, but also execution of internal scripts to the extent that step-by stepprocessing of the data and its intermediate results yielding further graphical outputs, could be fully automated in
streamlined fashion.

4. Conclusions
This paper has described a novel graphical data viewer
suitable for displaying results in a research setting. Our
viewer operates as a flexible stand-alone interface that accepts from files or standard input, data lists and arrays together with brief descriptors that prescribe surfaces, static,
dynamic and animated graphs, positional markers, and
viewing directives. A variety of useful visualisation and
animation modes are supported and when used in combination can achieve useful displays of information that help
to communicate to others the relationships and results from
one's data. The file format for the graphical objects has been
found to be conducive to organising, storing, processing and
displaying our extensive sets of research data.

References
[l] Moler, C. B. (1980). MATLAB user's guide. Technical report, University of New Mexico., Dept. of Computer Science. Describes use of Classic Matlab, the
prototype for the expanded professional Matlab from
The Mathworks.
[2] Char, B., Geddes, K., and Gonnet, G. (1983). The
Maple symbolic computation system. 17(34):31 4 2 .
[3] Ihaka, R. and Gentleman, R. (1996). R: A language for
data analysis and graphics. Journal of Computational
and Graphical Statistics, 5(3):299-3 14.
[4] M. Kilgard. OpenGL: Let there be light! The X Journal: Conzputing Technology with the X Window System, 4(3): 12, JanJFeb 1995.
[5] M. J. Kilgard. OpenGL: Free OpenGL software. The
X Journal: Computing Technology with the X Window
System, 5(5):74, May 1996.
[6] M. R. Titchener. Towards visual-bandwidth: getting
close to one's experiment data. Int. Conj on Computer
Graphics Theory and Applications, GRAPP-2006, Setubal, Portugal, Feb. 25-28 2006.
[7] A. Clarke and S. Kubrick. 2001: A Space Odyssey.
MGM, Polaris productions, 1968.
[8] Schuster, H. and Just, W. (2005). Deterministic Chaos,
an introduction. Wiley-VCH, Berlin, revised edition.
[9] Sleigh, J. W., Steyn-Ross, D. A., Steyn-Ross, M. L.,
Grant, C., and Ludbrook, G. (2004). Cortical entropy
changes with general anaesthesia: theory and experiment. Physiological Measurement, 25, pp 921-934.
[lo] Steuer, R., Ebeling, W. B., and Titchener, M. R.
(2001). Partition based entropies. In Stochastics and
Dynamics, pp 45-61. World Scientific.

[I I ] M. R. Titchener, A. Gulliver, R. Nicolescu, U. Speidel, and L. Staiger. Deterministic Information Theory. Fundaments Inforrnaticae, 64(1-4):443461, Jan
2005.

[I 21 S. Kochan and P. Wood. UNIX Shell Programming.
pub-HAYDEN, revised edition, 1990.

5. Acknowledgments
The author wishes to acknowledge the considerable support for this work provided by Fisher & Paykel Healthcare
(NZ) Ltd.

Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00 © 2006

