Extracting Contour Lines from Scanned Topographic Maps
Loh Mun San1, Safie Mat Yatim2, Noor Azam Md Sheriff3, Nik Isrozaidi bin Nik Ismail4
Department of Computer Graphics and Multimedia,
Faculty Science Computer and Information System,
Universiti Teknologi Malaysia,
81310, Johor, Malaysia.
{purpleekin81@hotmail.com1, safie@itc.utm.my2, azam@fsksm.utm.my3,
nik@fsksm.utm.my4}

Abstract
Contour lines are the main graphical element to
characterize three-dimensional terrain on two-dimensional
map sheets. The conversion of raster contour data to the
corresponding vectors is still an interesting problem in the
stage of research. In this paper, we suggest a contour
extraction or simplification method, subsequently perform a
fully automated, derivation of topographic map sheets
containing simplified contour lines and inscriptions. The
generated contour map is used to produce DEMs. The
results concern the computation cost and the accuracy of the
underlying contour lines information extracted.
Keywords: map segmentation, feature extraction, image
analysis, object recognition, contour line extraction

1. Introduction
Recent development on fully automatic feature
extraction and object recognition from scanned topographic
map is still insufficient to provide a satisfied result in
achieving accurate contour data. There are two main
difficulties in this field: automatic contour lines extraction
from topographic maps and how to recognize the contour
lines accurately. These two criteria have to carry out to
improve this research.
Topographic map is essentially consists of color line
drawings to represent geographic and topographic
information. In general, it is cluttered with non-contour data,
including the information on trails, streams, vertical
coordinate grid line and etc. This make the extraction and
recognition process become more intricate. The textured
background and land use layer information that overlaid on
the contour lines with several descriptive texts add on this

problem. Moreover, background colors tend to create
contour lines which are composed of different pixel colors.
United States Geological Survey (USGS), one of the
largest suppliers of topographic map use a range of manual
techniques and procedures to perform the conversion. Due to
high cost related to the extraction process, they are only able
to convert a small fraction of maps. USGS topographic maps
have several unique properties. They are available in high
resolution and using a limited number of known colors,
which are completely unaliased. Therefore, the contour lines
are not blurred or distorted excessively, hence, they can be
extracted easily compare to others. Although USGS
topographic maps are easier to work than alternatives, the
automated extraction which generated from non-USGS
topographic map is much more worth.
In contour line approximation or generalization, three
requirements should be fulfilled [1]: (1) The contour lines
must be simple, which mean the number of points is
reduced, (2) The contour must appear smooth, and (3) The
characteristic of the contour must be retained. The
generation of DEM from topographic map is accomplished
by multi step process. Initially, the raster contour lines and
its elevation are converted to vectors, and then tagged with
their corresponding elevation values. The tagged vector data
is then transferred to a superimposed grid to generate threedimensional surface by an interpolation or approximation
algorithm. Finally, it is written to standard ASCII DEM
format.

2. Related Work
Many present algorithms in feature extraction and
recognition perform a deterministic editing before the
vectorization process. The existing defects are removed by
intelligent noise removal before further process. Early
vectorization of line drawings introduced these essential

Proceedings of the International Conference on Computer Graphics, Imaging and Visualization (CGIV’04)
0-7695-2178-9/04 $20.00 © 2004 IEEE

procedures: (i) topographic map digitization by scanner, (ii)
thresholding, (iii) thinning of the resulting black patterns
using skeletonization procedure and (iv) raster-to-vector
conversion of the resulting thinned lines [3].
Leberl et al. used these steps for automatic vectorization
of clean contour and drainage/ridge sheets [4]; Greenlee [5]
in contour lines extraction from topographic maps; Amin et
al. [6] for lines and symbols recognition; and Musavi et al.
[7] in the land record maps processing. Furthermore, Kaneko
[8] proposed the directional distance propagations for line
structures in line drawings. Kasturi et al. [9] developed an
images interpretation of paper-base line drawings system to
locate and separate text strings and various lines. Hough
transform is applied to the centroids of the connected
components in the image to accomplish the task.
Color information is vital for recognizing the features in
topographic maps. Ansoult et al. [10] used the mean and
variance of the hue channel for discriminating soil types on a
digitized soil map. Ebi et al. [11] transformed the input RGB
color space into another color space by considering the
chromaticity. Classification/ clustering techniques are
applied to the bivariate histograms, which are constructed
from the resulting of two chromaticity channels. Arrighi et
al. [3] processed raw color topographic maps, which have no
direct access to the individual sheets (i.e., information
layers). They based on image morphological process to
extract a set of extreme points.
Majority of map analysis techniques are performed on
binary maps that have thicker features which spaced far
apart from each other. Relatively, only few have focused on
color images and thin closely spaced linear features [2].
Dupont et al. [12] use a watershed divide algorithm in RGB
space to assign a pure map color to each pixel. This
algorithm performs well for images scanned by high
resolution and quality scanners but not for the image which
contains alias and false colors. Another new approach
thinned and vectorized the binary image using delaunay
triangulation, where the delaunay edges are filtered by local
and global rules [20].
Yamada et al. [13] presented a multiangled parallelism
(MAP) operation algorithm for text and symbols extraction
from topographic maps. Their method performed a parallel
calculation on directional feature planes. The linear features
are extracted using erosion-dilation operations; and the
symbols are extracted by a reformalized and parallel version
of the generalized Hough transformation. Their algorithm is
applied more to the symbols rather than contour lines to
convey terrain elevation. On the other hand, Wu et al. [14]
used a multi-layer neural network to extract characters and
lines from color map images. Their inputs include features
that comprehend color intensities and gradients. However,
they do not figure out color aliasing and false colors inherent
in topographic maps. Therefore, it may not perform well on
topographic maps, which use thin and closely spaced feature
geometries. In that case, Hedley and Yan [15] developed a

gradient thresholding method to overcome the aliasing and
false color problems. They combined spatial and color space
information to remove pixels which containing color aliasing
and false colors. Hence, leave a set of low-gradient pixels.
However, their algorithm is ineffective since most of the
linear features on topographic maps belong to the high
gradient set are removed.
Trier et al. [16] compared the binary versus topographic
analysis on digits recognition in hydrographic maps. For
hydrographic maps, binary analysis was found to have
superior accuracy. However, for topographic maps which are
characterized by thin and closely spaced features,
topographic analysis preformed better performance.
Frischknecht et al. [17] used a hierarchical template
matching procedure to extract text from topographic maps.
The template gives emphasis on the critical areas in the text
or symbol to be matched, and de-emphasize those noncritical areas such as edge pixels between the symbol and its
background. It performed well for text and symbols
extraction and avoids the aliased and false colors inherent in
the edge pixels. Nonetheless, it is not able to handle thin and
closely spaced linear features such as contour lines.

3. Proposed Method
The main procedure of automated recognition and
contour lines extraction from topographic maps is to obtain
color raster contour maps. Topographic map is scanned
either in monochrome, gray scale or color depends on the
map quality and the capability of a scanner with different
resolution. The resolution of the scanned image influences
the subsequent steps in the image analysis and acquisition
process. In this research, the map is scanned in 300 dpi.
There are four challenges in contour lines extraction
from scanned topographic map [2]. Aliasing is the major
problem, which induced by scanner’s point spread function
[18]. Even in gray-level image, the edge between white and
black are evidence sharp. Closely spaced feature introduce
the second problem. Features are usually separated by the
background. However, when two features are closely spaced,
the background is eroded by scanner which induced aliasing,
cause the difficulty to use background to split those features.
The existence of false colors is the third challenge,
which depends on the scanning method in used. False colors
due to RGB misalignment in the scanner occur whenever the
red, green, and blue color planes are not well registered.
Khotonzad et al. used eigenvector line-fitting technique, by
approaching the color information of pixels in a 7 by 7
window to classify the color transitional pixels in order to
overcome this problem [19]. However, regions which
contain overlapping lines remain unresolved in this
approach. The fourth challenge is the intersecting and
overlapping of linear features.

Proceedings of the International Conference on Computer Graphics, Imaging and Visualization (CGIV’04)
0-7695-2178-9/04 $20.00 © 2004 IEEE

3.1. Color Image Segmentation
The background of topographic map influences the
extraction process because the color of contour lines is
changed in contrast to their background. If the background is
presented in single neutral color, the procedure become
easier compare to the multiple background colors. The
contour lines usually aliased in certain pixel color which
exist in the large numbers on the topographic maps. Color
image segmentation is a general method used to separate
those desirable features (contour lines) from undesirable
features (other information on the maps, like stream,
character etc).
There are various color space exist nowadays, such as
RGB, CIE-LAB, CIE-LUV, HSV and Munsell. HSV color
space appears to be well-mannered since it has some unique
characteristics and the transformation from RGB space is
non-linear but can invertible easily. In this work, HSV color
space is selected and visualized as a cone. The brown color
is extracted by building the hue histogram based on the
remaining pixels, which all fall in the chromatic region of
the HSV cone. The details on related procedure are defined
in Salvatore’s work [20].
Image can be segmented into two regions by simple
threshold:

­1 if f ( x, y ) > T
g ( x, y ) = ®
otherwise
¯0
The threshold is decided on any pixel where a value
above (or below) the threshold is considered to belong to the
object; and a value below (or above) the threshold is deemed
to be part of the background. The result of the operation is a
binary image. Finding a threshold T from histogram can be
done either interactively or using a simple heuristic that will
find the significant minimum automatically. Alternatively,
we can iterate towards a threshold without using image
histogram by using the following strategy:

histograms exhibited by the objects in the image. The
obvious extension to a single threshold strategy is overcome
by applying the threshold to all sub-region of the image,
taking different values from region to region. The
background scene is divided into small regions and bi-modal
histogram is looked for each region. Regions that do not
exhibit bi-modality has to be identified and assumption is
made either there are all objects or all background.
Otherwise, segmentation should be forced based on
insignificant variations such as noise. However, noise pixels
always presented in an image. These noises will cause
ambiguity in feature classification by segmented image,
since the isolated small regions will be spread out over the
interested features. An edge preserving smoothing method
[25] will be applied to discard these noise pixels.

3.2. Thinning Contour Lines
Thinning is defined as a set of successive erosions of the
outermost layers of a shape, until a connected unit-width set
of lines (skeleton) is obtained [24]. Hence, thinning
algorithms will “peel off” the border pixels iteratively in an
image. Thinning algorithms must satisfy two constraints.
Firstly, they maintain connectivity and do not remove border
pixels that may cause discontinuities. Secondly, they do not
shorten the end of thinned shape limbs. However, the image
object is hard to be thin symmetrically and may not perform
in a satisfactory way when the binary image objects are
relatively large and convex.
An elaborate thinning algorithm that requires two
successive iterative passes is described in [23, 21]. In step 1,
a logical rule P1 is applied locally in a 3 x 3 neighborhood to
flag border pixels which can be deleted. The pixels area only
flagged until the entire image is scanned. At the step 2,
another logical rule P2 is applied locally in a 3 x 3 window
to flag border pixels for deletion. When the entire image has
been scanned, the flagged pixels area deleted. This
procedure is applied iteratively, until no thinning can be
performed. Let:
8

(1)

(2)

Assume the 4 corner pixels belong to the background
set and define an initial mean for the background
intensity. For the object intensity, assume all
remaining pixels belong to the object.
Iterate using threshold until it is sufficiently small
difference between T

T i +1 =
where

µ

i
background
i

µ

i +1

i

and T :

i
background

and

+µ

i
object

2

µ

i
object

are calculated after

applying T .
The threshold approaches will produce several
misclassification errors, depends on the individual

N ( p 0 ) = ¦ pi
i =1

Denote

the

number
of
object
pixels
( pi = 0,1, i = 1,...,8) in the 3 x 3 window (excluding the
central pixel) and T ( p 0 ) denote the number of 0->1
transitions in the pixel sequence p1 p 2 p3 ... p8 p1 . The
logical rules p1 , p 2 used in the following form:-

P1 : (2 ≤ N ( p 0 ) ≤ 6) & &(T ( p 0 ) = 1) & &( p1 • p 3 • p 5 = 0)
& &( p 3 • p 5 • p 7 = 0)
P2 : (2 ≤ N ( p 0 ) ≤ 6) & &(T ( p 0 ) = 1) & &( p1 • p 3 • p 7 = 0)
& &( p1 • p 5 • p 7 = 0)

Proceedings of the International Conference on Computer Graphics, Imaging and Visualization (CGIV’04)
0-7695-2178-9/04 $20.00 © 2004 IEEE

3.3. Detect closed contour as polygon
After extracting the brown contour lines from scanned
topographic map, we should treat all the lines as a single
pixel to be connected to form close contour lines. Before any
technique of reconnection edge is applied, there remains
difficulty: how we can determine whether the pixel is
formed by which closed contour. Initially, we make
assumption that the pixel forms the closed contour, which
mean a polygonal shape. Although the pixel maybe found in
disconnected or many gaps is needed to be resolved, but we
start our search from each peak. From Fig. 1, Let region (R1)
denote as the peak’s region, so we take the middle value Si
(xi, yi) as the initial search point. The search is start from Si
using clockwise, which extended each angle to detect the
closed contour. For the first angle (1°), the straight line
search will detect the first contour it meet (C1), then the
second contour (C2), the third contour (C3) and the last
contour (C4). The search will be stop when it reaches 360°.
Each of the pixels it meets, it will be stored in an array
format as following, where i range from 0 to 360.
Ei - C1 (Xi, Yi, Zi)
- C2 (Xi, Yi, Zi)
- C3 (Xi, Yi, Zi)
Ei+1 - C1 (Xi+1, Yi+1, Zi+1)
- C2 (Xi+1, Yi+1, Zi+1)
- C3 (Xi+1, Yi+1, Zi+1)
Ei+m - C1 (Xi+m, Yi+m, Zi+m)
- C2 (Xi+m, Yi+m, Zi+m)
- C3 (Xi+m, Yi+m, Zi+m)
0°

Si (xi, yi)

C1 C2 C3 C4

270°

90°
R5 R4 R3 R2 R1

store the value due to reduce redundancies. The elevation
value, zi can be detected once start from the lowest contour
lines and it is increased depends on the contour interval and
scale which is mentioned on the topographic maps. All the
pixels value will be store in array and it will be retrieved in
the subsequent process. The array value which stored in each
contour line is defined as contour path and it is considered as
a polygonal shaped contour.

3.4. Contour line Reconnection
Linear and area features always overlap in topographic
map. If two linear features exist on top or very close to each
other, the misclassification of these points is revealed as
gaps. Hence, a process to reconnect those local minimums
and resolve gaps to form contour lines is needed. Contour
lines never intersect each other and they form closed loops.
Their special properties are utilized by the contour line
extraction algorithm to split closely spaced features and
reconnect broken contour line to form closed contour. Each
broken ends of the contour lines is either matched by another
broken end or routed to the physical edge of the image. The
breaks in these contour lines are varying in length. In
general, short breaks in contour lines are caused by
intersecting features while long breaks are caused by
overlapping features. The classical techniques usually first
skeleton the lines, and then seek for relevant extremities of
the skeleton to recover the missing parts of the lines.
However, problem occurs because skeletonization process is
very sensitive to noise and creates small branches at the edge
of the lines. Although these can remove by pruning, the lines
become shorter; therefore some relevant information will be
lost.
Arrighi et al. [3] extracted the extremities of the contour
lines before skeletonizing them by generalizing the hit-ormiss transformation. Euclidean distances between
extremities and directions are weighted and combined to
compute a new distance for connecting those broken lines.
Once all possible distances are computed, the extremities in
lower distance are connected. The procedure is repeated
until no extremities are left. In Fig. 2, the skeleton is shown
in gray and the connections are performed in black.

180°

Figure 1. Detect Closed Contour

If the value of (xi, yi) is not founded, (xi=0, yi=0), that
mean the pixel is not detected on that particular angle on that
particular contour line. Hence, the array can simply ignore to

Figure 2. Skeleton and connection of the
disconnected contour lines

Proceedings of the International Conference on Computer Graphics, Imaging and Visualization (CGIV’04)
0-7695-2178-9/04 $20.00 © 2004 IEEE

Bridging and linking the gaps between the contour lines
to form a close contour is done in following step. First, we
create a continuous edge from a point p1 at (x1, y1) to another
point p2 at (x2 , y2 ) by finding the optimum path through the
edge data. The basic principle is to form a graph from p1 to
p2 in which the nodes represent the edge pixels and the arcs
between them has an associated cost function based on
several criteria; then, grow the ends of the points to form
contour lines; finally fill the gaps between the contour lines.
The A* [1] search algorithm similar to Gamba and
Mecocci [22] to close gaps in the broken contour lines is
applied. The algorithm used the vertices and edges contained
in the adjacency graph to find the shortest path between two
vertices. The set of A* generated paths are then used to close
the contour line gaps using the following procedures:Ɣ
Ɣ
Ɣ
Ɣ

Select the path with the minimum distance from the
set of A* paths,
Merge the two contour lines connected by this path,
Remove this path from the set of A* paths,
Remove all other paths from the set of A* paths
that have connections to either end or minimum
path.

problem in automatic extraction to produce accurate and
reliable contour lines as the input for generating 3D surface.

5. Acknowledgements
We express appreciate to all reviewers for their helpful
criticisms and suggestions to our research and manuscript.

6. References
[1]

Li,Z., Sui, H., and Gong, J. (1999). A System for Automated
Generalisation of Contour Lines. In Proceedings of
International Carthographic Conference Ottawa, Canada.

[2]

Khotanzad, A. and Zink, E. (2003). Contour Line and
Geographic Feature Extraction from USGS Color
Topographical Paper Maps. IEEE Trans. On Pattern Analysis
and Machine Intelligence, Vol. 25, No.1.

[3]

Patrice Arrighi and Pierre Soilees (1999). From Scanned
Topographic Maps to Digital Elevation Models, Proceedings
of Geovision ’99, Int. Symposium on Imaging Applications
in Geology.

[4]

Leberl, F. and Olson D. (1982). Raster scanning for
operational digitizing of graphical data. Photogrammetric
Engineering and Remote Sensing, 48(4):615 -627.

[5]

Greenlee, D. (1987) Raster and Vector Processing for
Scanned linework. Photogrammetric Engineering and
Remote Sensing, 53(10):1383-1387.

[6]

Amin, T. and Kasturi, R. (1987). Map Data Processing:
Recognition of Lines and Symbols. Optical Engineering,
26(4): 54-358.

[7]

Musavi, M., Shirvaikar, M., Ramanathan, E., and Nekovei,
A. (1988). A Vision Based Method to Automate Map
Processing. Pattern Recognition, 21(4):319-326.

[8]

Kaneko,T. (1992). Line structure extraction from line
drawing images. Pattern Recognition, 25(9):963-973.

[9]

Kasturi, R. et al. (1990). A System for Interpretation of Line
Drawings. IEEE Transactions on Pattern Analysis and
Machine Intelligence, 12(10): 978-992.

3.5. Contour Line Valuation (Tagged)
The contour lines are tagged at the final stage. The
elevation values should be assigned to each contour line. For
some reasons, the vectorized contour lines may not appear as
continuous contour even though there are no visible breaks.
The contour lines are tagged once for each set of close
contour. Hence, by assuming the elevation between two
successive contour lines is constant, the elevation of all
remaining contour lines can be calculated. Once the contour
lines are being tagged, the contour map is converted and
saved as general image file format, e.g. bitmap, tiff and etc.

4. Conclusion and Future Work
Although many raster-to-vector approaches have been
developed in GIS, the automated contour lines extraction
from scanned topographic map is still remains problem. In
general, the process is semi-automated rather than fully
automated due to the intricate and time consuming image
acquisition process. Since contour lines are always
overlapped or intersected with others information on
topographic maps, it is difficult to clean-up all others
unemployed information while retaining the accurate
contour data. This research is intended to extract contour
lines from topographic map with its elevation value. The
pre-processing in extraction of contour lines is a significant
step before surface reconstruction algorithm can be applied
into the vector data. Future work is in progress to resolve the

[10] Soille, P. and Ansoult, M. (1990). Automated Basin
Delineation from Digital Elevation Models using
Mathematical Morphology. Signal Processing, 20:171-182.
[11] Ebi, N., Lauterbach, B., and Anheier, W. (1994). An Image
Analysis System for Automatic Data-acquisition from
Colored Scanned Maps. Machine Vision and Applications,
7(3):148-164.
[12] Dupont, F., Deseilligny, M. and Gondran, M. (1999). Terrain
Reconstruction from Scanned Topographic Maps. Proc.
Third Int’l Workshop Graphics Recognition, pp. 53-60.

Proceedings of the International Conference on Computer Graphics, Imaging and Visualization (CGIV’04)
0-7695-2178-9/04 $20.00 © 2004 IEEE

[13] Yamada, H., Yamamoto, K. and Hosokawa, K. (1993).
Directional Mathematical Morphology and Reformalized
Hough Transformation for the Analysis of Topographic
Maps. IEEE Trans. Pattern Analysis and Machine
Intelligence, vol. 15, pp. 380-387.
[14] Wu, J., Yan, H. and Chalmers, A. (1994). Color Image
Segmentation Using Fuzzy Clustering and Supervised
Learning, J. Electronic Imaging, vol. 3, pp. 397-405.
[15] Hedley, M. and Yan, H. (1992). Segmentation of Color
Images Using Spatial and Color Space Information. J.
Electronic Imaging, vol. 1(4), pp. 374-380.
[16] Trier, O., Taxt, T. and Jain, A. (1997). Recognition of Digits
in Hydrographic Maps: Binary versus Topographic
Analysis., IEEE Trans. Pattern Analysis and Machine
Intelligence, vol. 19, no. 4, pp. 399-404.
[17] Frischknecht, S. and Kanani, E. (1997). Automatic
Interpretation of Scanned Topographic Maps: A RasterBased Approach, Proc. Second Int’l Workshop, GREC, pp.
207-220.
[18] Wang, L. and Pavlidis, T. (1993). Direct Gray-Scale
Extraction of Features for Character Recognition, IEEE
Trans. Pattern Analysis and Machine Intelligence, vol. 15,
no. 10, pp. 1053-1067.
[19] Khotanzad, A. and Zink, E. (1996).Color Paper Map
Segmentation Using Eigenvector Line-Fitting. Proc. IEEE
Southwest Symp. Image Analysis and Interpretation, pp.
190-194.
[20] Spinello Salvatore and Pascal Guitton (2004). Contour Lines
Recognition from Scanned Topographic Maps. Journal of
WSCG 2004, Vol.12, No.1-3.
[21] Gonzalez, R.C. and Wintz, P. (1987). Digital Image
Processing, Addison-Wesley.
[22] Gamba, P. and Mecocci, A. (1999). Perceptual Grouping for
Symbol Chain Tracking in Digitized Topographic Maps,
Pattern Recognition Letters, pp. 355-365.
[23] Zhang, T.Y. and Suen, C.Y. (1984). A Fast Parallel
Algorithm for Thinning Digital Patterns, Comm. of the
ACM, vol. 27, No.3, pp. 236-239.
[24] Davies, E.R. and Plimmer, A.P.N. (1981). Thinning
Algorithms: A Critique and A New Methodology. Pattern
Recognition, vol. 14, No. 1-6, pp. 53 63.
[25] Chitwong, S., Cheevasuvit, F., Dejhan, K., Mitatha, S.,
Nokyoo, C. and Paungma, T. (2000). Segmentation on Edge
Preserving Smoothing Image based on Graph Theory,
Proceeding of IGARSS 2000, July.

Proceedings of the International Conference on Computer Graphics, Imaging and Visualization (CGIV’04)
0-7695-2178-9/04 $20.00 © 2004 IEEE

