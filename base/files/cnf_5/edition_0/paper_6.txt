2012 Ninth International Conference on Computer Graphics, Imaging and Visualization

Modeling of Bézier Curves Using a Combination of
Linear and Circular Arc Approximations
Pongrapee Kaewsaiha
Department of Computer Engineering
King Monkut’s University of Technology Thonburi
Bangkok, Thailand
Email: pk@kmutt.net

Natasha Dejdumrong
Department of Computer Engineering
King Monkut’s University of Technology Thonburi
Bangkok, Thailand
Email: natasha@cpe.kmutt.ac.th

better in representing the curvature than a straight line. But
a circular arc approximation requires more parameters to
calculate compare with the linear one, which needs a longer
computational time.
A circular arc interpolation through given set of points
was ﬁrst presented by Piegel [3] in 1986 using a geometric
property of a circle. This approximation technique was
applied to Bézier curves in 1994 by Meek and Walton
[4]. Then G1 arc spline approximation of Bézier curves
was introduced by Ahn, Kim, and Lee [7] in 1998 with
the bisection algorithm presented by Yong, Hu, and Sun
[8] later in 2000. The biarc approximation algorithm has
been improved for more efﬁciency by Li, Dai, and Zhang
[9] in 2003. And Riscus [10] provided some subdivision
strategies for circular arc approximation of a Bézier curve
in 2006. Those algorithms tended to move from a common
linear (polylines) approximation of a curve to a circular
arc approximation which uses less points of interest while
satisfy the same user-deﬁned tolerance. However, a circular
arc approximation requires more parameters that must be
calculated recursively which cause a high computational
time. In 2011 C. Thanutong [2] presented the new scan
conversion for Bézier curve using degree elevation technique
where the ﬁrst and end parts of the curve are approximated
linearly using the Bresenham’s line algorithm which can
decrease the number of pixel involved with the calculation.
But the rest of the curve still be calculated pixel by pixel
using the degree evelation technique, which is a recursive
formula.
On the other side, a Bézier curve can be considered as a
joint of arc line segments. Therefore we can use both linear
and circular arc approximation to combine advantages from
each algorithm together. With this combination method the
number of points involved with the Bézier calculation can be
decreased a lot, and the recursive algorithm is not required.

Abstract—This paper presents the new approach of the
Bézier curve rendering using linear and circular arc approximations, instead of a recursive method that calculates all points
on the curve pixel by pixel. The new developed algorithm also
works better than a pure-linear approximation which generates
rough output, and a pure-circular-arc approximation which
involves with too many parameters. The purposed algorithm
subdivides the curve into a series of lines and arcs satisfying
the user-deﬁned tolerance. This new method can reduce the
number of points involved with the calculation and also
decrease the computational time since the software built-in line
and arc functions calculate faster than the recursive method.
This algorithm is based on the monomial form approach which
can provides more efﬁciency and ﬂexibility, compare with
traditional methods that are mostly based on a polynomial
basis or the de Casteljau’s algorithm.
Keywords-Bézier Curve; approximation;

I. I NTRODUCTION
Bézier curves [1] are widely used in computer graphics
and CAD-CAM ﬁeld because they are capable for design
a complex shape where almost basic geometric shapes
cannot be used. A Bézier curve rendering in a traditional
way tends to calculate all pixels along the curve using
a recursive function based on Bernstein polynomial basis
or the de Casteljau’s algorithm, which requires a lot of
computational time. Even the alternative methods such as
the degree elevation [2] still requires a lot of computational
time because the recursive algorithm runs until the curve
becomes smooth, said there is no gap on the curve path.
In CAD-CAM ﬁeld, all non-circular curves are subdivided into small straight-line segments satisfying the userdeﬁned tolerance. Although linear approximation generates
curve faster than a recursive method, it may causes nonsmoothness on the curve because joining of line segments
always creates corners and ripples. Decreasing the tolerance
value can make a smoother curve but also increase the
number of segments and computational time anyway. Some
researches presented different approaches which approximate Bézier curves by circular arcs instead of lines [3][10]. A circular arc spans through a series of points in a
single step and provides smoother paths since the arc is
978-0-7695-4778-7/12 $26.00 © 2012 IEEE
DOI 10.1109/CGIV.2012.20

II. M ONOMIAL F ORM OF A B ÉZIER C URVE
In this paper, the achieving of Bézier formula has been
done by using a monomial form [11] which can compute
points on the Bézier curve faster than the original Bernstein
27

or de Caltlejau’s approaches. The algorithm generates the
Bézier curve B(t) corresponding to user-deﬁned control
points bi as follows:
n

n

B(t) =

bi · mi,j · tj ,



(1)

i=0 j=0

where
mi,j = (−1)j−i

n
j

j
.
i

(2)

III. L INEAR A PPROXIMATION OF A B ÉZIER S EGMENT
A linear approximation can be done if tangent values at
both endpoints of a Bézier segment are close together, where
there is no curvature change along the segment. In other
words, a linear approximation is valid if and only if the
percent error, measured from the distance between the curve
segment and the approximated line at the corresponding
time t, is less than the deﬁned tolerance. Otherwise, the
segment should be either approximated using a circular arc
approximation as mentioned in section IV or be subdivided
more to make smaller segments. Plotting of a linear segment
can be done easily using the built-in line function, mostly
based on the Bresenham’s line algorithm [2], where only
start and end points are needed.

Figure 1.

line that bisect/perpendiculat to BG, as shown in Figure 1.
The approximated arc can be plotted using the built-in arc
drawing function of the corresponding software/language,
JAVA for instance. The approximation algorithm exports the
following data to the arc function: start point, end point, start
angle, end angle, center point, and radius.
V. A LGORITHM
The algorithm that model the entire Bézier curve of any
degree n is as follows:
1) Obtain the Bézier formula of given (user-deﬁned)
control points as in section II.
2) Find all inﬂection point(s) on the curve by solving the
vector cross product of the ﬁrst and second derivatives
B (t) × B (t) = 0
3) Find the tangent lines at the start point, end point, and
all inﬂection points.
4) Check if the tangent of any two adjacent points in
step 3 (where the curvature doesn’t change) is close
to each other. If exist, apply the linear approximation
(Bresenham’s line algorithm) to that pair of points
5) If the segment cannot be approximated linearly, apply
the circular arc approximation as explained in section
IV to that segment.
6) If an error between the approximated segment and the
Bézier curve segment is not exceeded than the userdeﬁned tolerance, include that segment in the ﬁnal
model. If not, subdivide that segment at (ta + tb )/2
where a and b is the start and end points of the segment
then repeat step 4-6.
The following example shows the model of the Bézier
curve of the given set of control points

IV. C IRCULAR A RC A PPROXIMATION OF A B ÉZIER
S EGMENT
This approximation is based on the basic geometric property said there is a unique circle that passes through 3 given
points. The algorithm as follows:
1) Find the tangent line at the ﬁrst and end points of the
Bézier segment (point A and B in Figure 1).
2) Find the intersection of two tangent lines (point C).
3) Find the incenter point (point G) corresponding to the
triangle created by joining three points (A, B, and C).
Note that the incenter point here is used as a relative
center of the triangle which can be retrieved from (3).
A(BC) + B(AC) + C(AB)
(3)
AB + BC + AC
4) Find the arc segment that passes through points A,
G, and B using the geometric property of the circle
as follows: Let mA and mB are slopes of the line
segments AG and BG respectively,
G=

mA =
xO =

yA − yG
,
xA − xG

mB =

yB − yG
,
xB − xG

mA mB (yA − yB ) + mB (xA + xG ) − mA (xG + xB )
,
2(mB − mA )

yO = −

1
mA

xO −

x A + xG
2

+

Circular arc approximation of a Bézier segment

bi = {{10, 20}, {30, 60}, {50, 10}, {60, 50}}

yA + yG
.
2

. The corresponding degree-3 Bézier formula is as follows:

The center of the arc O(xO , yO ) is located at the intersection of the line that bisect/perpendicular to AG and the

B(t) =

28

10 + 60t − 10t3
20 + 120t − 270t2 + 180t3

(4)

The inﬂection point of this curve can be obtained from
solving
ˆi
60 − 30t2
−60t

ˆj
120 − 540t + 540t2
−540 + 1080t

kˆ
0
0

=0

(5)

Simplifying (5) gives
−32400 + 72000t − 16200t2 = 0

(6)

or t = 0.508083, 3.93636 where only one point at t =
0.508083 falls inside (0, 1) range. Therefore the Bézier
curve (4) has only one inﬂection point at B(0.508083) =
{39.1734, 34.8788}

Figure 4.

Final model

segments using both linear and circular arc approximation
and the error is less than the deﬁned tolerance at τ = 0.1.
VI. R ESULTS
In this experiment we compare the efﬁciency of four key
algorithms used to render the Bézier curve which are:
• Algirithm 1: Calculate all pixels on the curve recursively based on the Bernstein polynomial basis. The
algorithm runs until the curve becomes smooth [2].
• Algorithm 2: Subdivide the curve into linear segments
satisfying the user-deﬁned tolerance then use the builtin line algorithm to render the curve.
• Algorithm 3: Subdivide the curve into circular arc
segments satisfying the user-deﬁned tolerance then use
the built-in arc algorithm to render the curve.
• Algorithm 4: Purposed algorithm–use a combination of
linear and circular arc approximation.
The experiment tended to measure the number of segments and computational time of each algorithm by varying
the following variables:
1) Algorithms: 4 key algorithms as mentioned above
2) Degree of the curve: Degree 4 and 20
3) Deﬁned tolerance: 0.1 and 0.01
4) Resolution: 256x256 and 1024x1024
The algorithm was programmed and calculated using Java
which ran on Core i5 CPU with 4GB of RAM. The following
tables show the result of this experiment. Note that number
of segments corresponding to the recursive method are not
counted since the algorithm calculates the coordinates of all
pixels required to generate a smooth curve.



Figure 2.

Circular arc approximation of two segments

Figure 2 shows the approximation of a Bézier curve in
the previous example. The curve has one inﬂection point that
separates the curve into 2 parts. Both parts cannot be approximated linearly then a single circular arc approximation was
applied to each part. It can be clearly seen from the ﬁgure
that there is too much error between the curve segments and
the approximated arcs. Then the algorithm subdivided the
curve into 4 segments and run the approximation again. The
result is shown in Figure 3 where we could see that the error
was reduced. The ﬁnal model of the curve approximation is
shown in Figure 4 where the curve was subdivided into 8

Table I
R ESOLUTION =256 X 256, D EGREE =4, τ = 0.1
Method
Recursive
Linear Approximation
Circular Arc Approximation
Purposed Algorithm
Figure 3.

Circular arc approximation of four segments

29

No. of Segments
19
16
15

CPU Time (ms)
1564
11
22
10

rendering since it requires a lot of computational time.
Approximation methods can generate curves as good as a
recursive method but require less computational time. A
linear approximation requires more subdivision times to
achieve the desired tolerance comparing with another two
approximation algorithms. When the curve is too complex a
linear approximation may be not a good choice since it takes
too much time. Circular approaches seems to be more useful
with complex curves. The purposed method, which is a
combination of two main approximation algorithms, reduces
the complexity of the pure circular arc approximation by
replacing some parts of the curve by straight lines. In other
words, the purposed algorithm combines advantages of both
linear and circular arc approximation algorithms together
and create a new combination algorithm which works faster
and requires less subdivision times. Anyway, the choice of
using the algorithm is also according to how complex the
curve is and which application it will be applied to.

Table II
R ESOLUTION =256 X 256, D EGREE =4, τ = 0.01
Method
Recursive
Linear Approximation
Circular Arc Approximation
Purposed Algorithm

No. of Segments
26
18
18

CPU Time (ms)
1564
15
26
13

Table III
R ESOLUTION =256 X 256, D EGREE =20, τ = 0.1
Method
Recursive
Linear Approximation
Circular Arc Approximation
Purposed Algorithm

No. of Segments
32
24
23

CPU Time (ms)
5326
38
49
29

Table IV
R ESOLUTION =256 X 256, D EGREE =20, τ = 0.01
Method
Recursive
Linear Approximation
Circular Arc Approximation
Purposed Algorithm

No. of Segments
44
30
30

CPU Time (ms)
5326
65
72
56

R EFERENCES
[1] G. Farin, Curves and Surfaces for Computer-Aided Geometric
Design. Information Technology and Control, San Diego, CA:
Academic Press, 1993.

Table V
R ESOLUTION =1024 X 1024, D EGREE =4, τ = 0.1
Method
Recursive
Linear Approximation
Circular Arc Approximation
Purposed Algorithm

No. of Segments
24
18
17

CPU Time (ms)
2255
125
48
12

[2] C. Thanutong and N. Dejdumrong, Scan Conversion for Bezier
Curve Using Degree Elevation Technique. Eighth International
Joint Conference on Computer Science and Software Engineering (JCSSE), pp. 214-219, 2011.
[3] L. Piegl, Curve ﬁtting algorithm for rough cutting., ComputerAided Design, vol. 18, no. 2, pp.79-82, 1986.

Table VI
R ESOLUTION =1024 X 1024, D EGREE =4, τ = 0.01
Method
Recursive
Linear Approximation
Circular Arc Approximation
Purposed Algorithm

No. of Segments
36
26
25

[4] D.J. Walton and D.S. Meek, Approximation of quadratic Bézier
curves by arc splines. Journal of Computational and Applied
Mathematics, vol. 54, pp. 107-120, 1994.

CPU Time (ms)
2255
140
75
14

[5] D.S. Meek and D.J. Walton, Approximating smooth planar
curves by arc splines. Journal of Computational and Applied
Mathematics, vol. 59, pp. 221-231, 1995.

Table VII
R ESOLUTION =1024 X 1024, D EGREE =20, τ = 0.1
Method
Recursive
Linear Approximation
Circular Arc Approximation
Purposed Algorithm

No. of Segments
56
38
37

[6] D.S. Meek and D.J. Walton, Approximation of a planar cubic
Bezier spiral by circular arcs. Journal of Computational and
Applied Mathematics, vol. 75, pp. 47-56, 1996.

CPU Time (ms)
9315
306
123
49

[7] Y.J. Ahn, H.O. Kim and K.Y. Lee, G1 arc spline approximation
of quadratic Bezier curves. Computer-Aided Design, vol. 30,
no. 8, pp. 615-620, 1998.
[8] J.H. Yonga, S.M. Hua, and J.G. Sun, Bisection algorithms
for approximating quadratic Bézier curves by G1 arc splines.
Computer-Aided Design, vol. 32, pp. 253-260, 2000.

Table VIII
R ESOLUTION =1024 X 1024, D EGREE =20, τ = 0.01
Method
Recursive
Linear Approximation
Circular Arc Approximation
Purposed Algorithm

No. of Segments
84
46
46

CPU Time (ms)
9315
889
307
92

[9] S. Li, Y. Dai, and M. Zhang, Curve ﬁtting with arc splines for
NC toolpath generation. Transactions on Engineering Sciences,
vol. 44, pp. 153-160, 2003.
[10] A. Riskus, Approximation of a cubic bezier curve by circular
arcs and vice versa. Information Technology and Control, vol.
35, no. 4, pp. 371-378, 2006.

VII. C ONCLUSION
The results show that a traditional recursive method based
on the polynomial basis is not good for Bézier curve

[11] N. Dejdumrong, Monomial form is universal. Journal of
Computer and Advanced Technologies, 2011.

30

