Improvement of Collision Detection Performance of Hierarchies by Using
Dynamic-Density of 3D Objects Based on LOD (Level-of-Detail)
ChunHo Yi, WonSeop Kim, TaeYong Kim
Department of Image Engineering, Graduate School of Advanced Imaging Science
Multimedia, and Film, Chung-Ang University, 221 Huksuk-Dong Dongjak-Ku, 156-756
Seoul, South Korea {ych@sdu.ac.kr, refarde@gmail.com, kimty@cau.ac.kr}
Abstract
This paper is Many studies have been conducted
focusing on standard objects in 3D space for quick and
exact collision detection in 3D graphics. A great deal of
these took interest in the improvement of performance
speed of collision detection of 3D objects, and in
realization of realistic expressions along with the
marvelous advancement of 3D graphics hardware.
In this paper, features of various collision detection
algorithms for standard 3D objects among 3D graphic
algorithms were analyzed, and a ‘dynamic density’ that
utilizes the center value and corner points of standard
objects in simple hierarchic structures of existing 3D
objects is suggested.
By using this algorithm, an LOD (Level-of-Detail)
algorithm can be applied to 3D space to improve
collision detection of 3D objects in a 3D space. Also,
through suggesting efficient rendering of 3D dimensional
spaces as an important element of 3D graphics and a
realistic expression method, the realism and efficiency of
3D games, which regards the real-time element as an
important one, can be greatly improved.
Keywords--- 3D Game Engine, CollisionDetection, Dynamic-Hierarchies weight, Level-ofDetail.

1. Introduction
Standard 3D objects have been efficiently assigned a
boundary scope to determine culling and collision
detection for a quick rendering process in 3D graphics.
These kinds of 3D objects are classified into globes,
oriented bounding boxes, capsules, lozenges, cylinders,
and ellipses, and a variety of detailed algorithms have
been applied to each 3D object.
Presently, much research is taking place in the field
of standard 3D objects to increase the speeds of 3D
objects and to obtain exact collision-detection and
culling in the field of 3D graphics. In the field of 3D
graphics, not only is hardware technology advancing
very quickly, but also the level of interest in realistic
expression of 3D objects is gradually growing. For 3D
graphics, a speedy and realistic rendering technique is
inevitably necessary.

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

Furthermore, the core process of such quick
rendering techniques is performed through collisiondetection and culling. Among the existing 3D collision
algorithms, a technique of ‘improving collision-detection
performance of hierarchies by using dynamic density of
3D objects in hierarchic structure based on LOD’ and a
more realistic method of collision-detection that
improves upon existing 3D algorithms is presented.
These will contribute to improving the sense of
reality and efficiency in 3D games that require a realtime 3D graphic element. [3] [4] [5].

2. Definition and Classification of BoundingVolume
The following are the features of algorithms of 3D
graphics standard objects.
Utilizing the Cohesion Rate of Space and Time
3D objects are being expressed on a 2D screen, by
dominating the space from one frame to another, and
through a real-time rendering process.
Preliminary Calculation
3D objects require a great amount of memory for
preliminary calculations or offline stages due to their
data structure and numbers of polygons. Therefore, by
including 3D space partitioning and boundary volumes,
it is possible to use memory in a more efficient way.
Features Required for Collision Detection System
In 3D graphics, the collision coefficient is an aspect
of collision handling that takes the following steps in
space; Collision detection, collision determination, and
collision response.
: Regardless of the position of 3D models, an
efficient real-time collision detection test can be made
using the conditions of many polygons.
In case of processing polygon soups, we can
simplify them into general polygon forms and process
them regardless of the limitations of being bulgy, or
requiring information of the surrounding 3D objects.
3D models can be changed to Rigid-body.
- The type of 3D object suggested in the past was
applied for producing bounding volume, which is more

efficient and closer to models. It must increase the
speeds of collision algorithms of bounding volume, and
creation of bounding volumes. It follows the collision
detection between objects of number n and static objects
of number m [8]

2.2.2. Grid Type: Arrange objects in Grid stance
with equal distances, and test collision detection within
the cell

2.1. 3D Object-Centered Classification and Its
Features
2.1.1. AABB(Axis Aligned Bounding Box)
: Bounding Box aligned with Coordinate Axis AABB
type deals with collision through an aligned list called a
‘sweep approach.’ For 3D standard objects, its collision
detection is relatively easier and quicker than other
methods and it bears crosschecking characteristics
between objects, but its collision reality between objects
is relatively weaker than other methods

Figure 2 Grid Type

3. Collision Coefficient Type through
Hierarchy Building by Applying Dynamic
LOD (Level-of-Detail)

2.1.2. OBB (Oriented Bounding Box): Bounding
Box Aligned with Moving Direction of Object
General method of collision detection between two
OBBs is to conduct the collision test for each object from
the edge to the side. That means, in case of testing
collision detection for two OBBs, a total of 144 collision
tests should be conducted (12 edges × 6 sides × 2 boxes
= 144)
2.1.3 K-dop Tree: K-dop is a generalized type of
AABB. Bounding volume is used in hierarchic structure
in practice. Efficiently organizing bounding volume is to
quickly approach to the target tree (domain). The
theoretical basis of generalizing AABB for K-dop is that
it increases connection efficiency to AABB and at the
same time gains a relative advantage over OBB
K-dop is constructed by culling the edge of AABB.
The value of K is the number of half-space that is
defined by the side of bounding volume, and as the value
of K increases, more empty space is cut from AABB.
The matter of K-dop is renewed whenever the object
included revolves, since K-dop is a generalized type

Figure 3 Hierarchy Building

3.1. Hierarchy Model Outline
- Hierarchic 3D model has simple volume forms in
each node.
- Sub format of each model exists in their positions
around each node.
- Polygons exist around each sub object in the
hierarchic structure. [9] [10]

3.2. Bounding Volume Hierarchy Operation
F = Nu x Cu + Nbv x Cbv + Np x Cp

2.2. 3D Space-Centered Classification and Its
Features
2.2.1. Axis Aligned: It is to locate 3D objects that
have the possibility of colliding in space, and test the
possibility as in detail in the next stage

(1)

F: Function of total collision-detection test
Nu: Number of bounding volumes updated
Cu: Memory cost of bounding volume updated
Nbv: Number of bounding volume pair overlap
test
Cbv: Memory cost of overlap test between 2 BVs
Np: Number of primitive pairs tested for
interference
Cp: Memory cost of testing 2 primitives for
interference

Figure 1 Axis Aligned Type

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

3.3. LOD (Level-of-Detail) Outline

Figure 4 Level-of-Detail
The LOD (Level-of-Detail) algorithm applys the
phenomenon of human sight whereby near objects can be
seen vividly, and far-away objects in less detail.
The concept of ‘LOD’ was first introduced by James
Clark in 1976, who discussed the advantages of
differentiating the resolutions of the objects shown in the
screen in several stages. With the rapid development of
3D-related hardware and software, and the publication of
a great deal of computer-graphics-related research since
the 1990s, LOD algorithms began to be placed as an
effective 3D graphic expression method that culled
invisible objects from the viewpoint, lessened the meshes
which express objects at a far distance, and describes
objects at a near distance in a clearer way.
Generally an LOD algorithm consists of a means of
configuring the 3D graphics screen in regard to the view
point, which is to define an object clearly if it is closer
and define it more vaguely if it is at a far distance, and
minimizing the error value to reduce the “popping”
phenomena, which rapidly reduces image quality with a
shift in the view point in 3D space. [1] [2] [9]

Figure 5 DDHCD Algorithm

4.1. Algorithm Structure in 3D Objects
To improve the performance of collision detection
by using dynamic density, the following things are
necessary within the 3D objects with the suggested
algorithm.
- Partition 3D object models for BV collision test
into structural forms.
: For an efficient collision test in BVH, there is a
need for quick judgment of partition by using density
within hierarchic structures of 3D models. The object
should be tested with BV-BOX as the center at the
lowest level.
Function P(x) for judging partitions of hierarchic
structures:

(2)
m: average, σ: standard deviation

4. Suggestion of a Collision-Detection
Method through Hierarchy Building with
Dynamic Density of 3D Objects Applied
LOD (Level-of-Detail)
Existing
algorithms
approaching
hierarchic
structures through the use of LOD were trying to
improve performance speed by simplifying 3D forms
within hierarchic structures, but there was a restriction in
expanding these methods to various kinds of 3D objects.
DDHCD (Dynamic-Density Hierarchies of Collision
Detection) suggested here is applying dynamic density
within hierarchic structures of CDs that used BVs in a
restricted way. This is used for; (a) quick judgment of
structural partitioning of 3D objects, and (b) upgrading
the accuracy of CDs by judging the density of 3D objects
from the lower level to the center of BVs.

- From the bottom of a 3D object there are 9 exact
values of corner points of the box, including the value of
the center point of BV-BOX.
: Calculate the value of density in the BOX of 3D
object from its bottom, taking the density value as the
center

Figure 6 Hierarchic Structure BV-BOX
- An efficient formula of judgment for collision
check that can be applied to CDs including BV-BOXes is
suggested.

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

4.2. Application of Collision Coefficient to
Hierarchy Model

4.3. Application of Hierarchic BV through
LOD
: Through applying features of the LOD algorithm,
the efficiency of collision detection can be improved for
calculating collisions in 3D space by including the lower
hierarchy of Hierarchy Model.
Judgment of Each Hierarchic Structure in 3D
Space by Using LOD

Figure 9 Application of LOD in BV Structure
Partitioning 3D Models into Hierarchic
Structures: Partitioning into LOD Hierarchy and
Bounding Volume Hierarchy

Figure 7 Generation of DDHCD
- Hierarchic 3D models exist with simple center
points within each BV.
- A subform of each model exists around the node in
each position.
- Polygons exist around each sub object in a
hierarchic structure.

Figure 10 Hierarchic Structure in 3D Object
Figure 8 Application of BV Central Line to
Collision Model

P=(C, d, R, w)
: Judgment Function for Hierarchic Partitioning
C: Center Point (x,y,z) Coordinates
d: Diameter of 3D Object
R: Radius of BV Field
w: Density Value of the Center of Structure
Elements

ai, bi, ci: Points of number
i ' triangle of Virtex
µ: average value
C: covariance matrix

Object Density : fs(s)

K : Kernel function
H : matrix bandwith
Wk: Kth observation

(3) In case of triangle polygon is 'n'

(4)

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

(3) 3 Dimensional Density of BV-BOX of 3D
Object It is applied by comparing 3D object density
and BV density.
- Judgment Formula P for Structure
: Partitioning: Improve CD efficiency through
comparing BV density of center point ‘K’ and 3D
object of center ‘C.’
: Judging the situation of structural partitioning
Figure 11 3D Object Density
- Objects with two independent hierarchic
structures in 3D space
- Formula of Judgment of Collision by Using
LOD in the Screen
- Distance of Collision of Objects ‘δ’
- Increase of Realism by Applying DDHCD
: Error bound ζ
- Dist (tA0, tB0) < δ + ζ
Application of Algorithm in 3D Space

Figure 13 Comparing 3D Density at the Bottom
of BV

OB = fs(s) /E

(5) nx, ny, nz: integral numbers
(1) Boundary Conditions of Each Axis of BV

5. Conclusion and Future Direction of
Development
Although computer graphic cards and other
hardware are greatly advanced, there are still a lot of
difficulties in real-time performance of calculation in 3D
games.
In 3D game engines, 3D standard object and
collision coefficient process are important basic
algorithms as introduced so far. In this study, a method
of improving the realism of collision detection by
applying LOD through partitioning 3D objects into a
hierarchic structure in 3D engines has been suggested.

Figure 12 Axis of BV
(2) Expression of Each 3 Dimensional Space with
K Point as the Center

(6)

Figure 14 Left general CD Right DDHCD
Existing studies specified limited application of
collision coefficient in special areas (circa 2000). Here,

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

a method of maintaining the realism of LOD and
conducting a realistic collision test of 3D objects through
applying BV density to 3D objects partitioned with
hierarchic structures is proposed.
The experiment environment of this study was
arranged with algorithms suggested by PIV-2.0, Geforce
5200, and an airplane with a 1,000-polygon image size.
In the future, through focusing on construction of a
new experimental environment, we plan to go beyond the
simple airplane format and conduct various kinds of 3D
object tests, to provide better algorithms that can be
examined and used to supplement the development of
more advanced styles of 3D games.

[14]
[15]
[16]

[17]

6. Acknowledgement
This research was supported by the ITRC(Information Technology Research Center, MIC) program and
Seoul R&BD program, Korea.

References
[1]

[2]

[3]
[4]
[5]
[6]
[7]

[8]
[9]

[10]

[11]
[12]
[13]

Peter Lindstrom, “Terrain Simplication Simplified: A
General Framework for View-Dependent Out-of Core
Visualization, IEEE Transactions on Visualization and
Computer Graphics, 8(3), July-September 2002, pp. 239254.
Hugeus Hoppe, “Geomery clipmaps : Terrain rendering
using nested regular grids,”, Siggraph 2004. [3] Jonathan
Blow, “Terrain Rendering at High Levels of Detail”
GDC 2000
Louis Castle, “ Real-time Continuous LOD for PCs and
Consoles,” GDC 2000
A. Watt and F. Plocarpo, “3D Game: Real-Time
Rendering and Software Technology” Addison-Wesley,
2001
Tim Schroeder “ Collision Detection Using Ray
Casting”, Game Developer Magazine 2001
Mark DeLoura, Charles “Game Programming Gems”,
ed., River Media, 2000.
Young K Kim, Gokul Varadhan, Ming C. Lin, Dinesh
Manocha: Fast swept volume approximation of complex
polyhedral models. Symposium on Solid Modeling and
Applications 2003: 11-22
Kelly Ward, Ming C. Lin Joohi Lee, Susan Fisher, Dean
Macri : Modeling Hair Using
Level-of-Detail
Representations. CASA 2003: 41-47
Stephane Redon, Young J. Kim, Ming C. Lin, Dinesh
Manocha, Jim Templeman: Interactive and Continous
Collision Detection for Avartats in Virtual
Environments.
Sung-Eui Yoon, Brian Salomon, Ming C. Lin, Dinesh
Manocha: Fast Collision Detection between Massive
Models using Dynamic Simplication. Symposium on
Geometry Processing 2004 : 139-150
M.Lin and S.Gottschalk,. Collision detection between
geometric model: Asurvey. Proc. Of IMA conference on
Mathematics of Surface.1998
P.V.Sander. X. Gu, S.J.Gortler, H.Hoppe and
J.Snyder.Silhouette
clipping.
Proc.
Of
ACM
SIGGRAPH.2000
S.Gottachalk, M .Lin, and D. Manocha. OBB-Tree : A
hierarchical structure for rapid interference detection.

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

[18]
[19]
[20]
[21]
[22]
[23]
[24]
[25]

[26]

[27]
[28]

Proc. Of ACM SIGGRAPH. Pp 171-180. 1996[1]
Akenine-Möller, and Eric Haines. (2002) Real-Time
Rendering. Second Edition. Natick, Massacheusettes,
A.K. Peters. pp. 345-357.
Watt, Alan and Fabio Policarpo. (2003) 3D Games:
Animation and Advanced Real-Time Rendering Vol II.
Harlow, England, Addison-Wesley. pp 37-45.
[3] Ulrich, Thatcher. (2000) “Loose Octrees," in Mark
DeLoura, ed., Game Programming Gems. Rockland
Massacheusettes, Charles River Media. pp 444-453.
[4] Davis, D, W Ribarsky, T Y Yang, N Faust and S
Ho. (1999) Real-Time Visualization of Scalably Large
Collections of Heterogeneous Objects. Proceedings of
IEEE Visualization 99. pp 437-440.
O’Neil, Sean. (2003) “Procedural Worlds: Avoiding
the Data Explosion" in Thor Alexander, ed. “Massively
Multiplayer Game Development". Rockland Massacheusettes, Charles River Media. pp 314–331.
Akenine-Möller, and Eric Haines. (2002) Real-Time
Rendering. Second Edition. Natick, Massacheusettes,
A.K. Peters. pp. 557-563.
Woo, Andrew. (1990) “Fast Ray-Box Intersection" in
Andrew Glassner, ed. “Graphics Gems". Academic
Press. pp 395-396. http://www.graphicsgems.org/
Akenine-Möller, and Eric Haines. (2002) Real-Time
Rendering. Second Edition. Natick, Massacheusettes,
A.K. Peters. pp. 572-575.
Mulholland, Andrew and Glenn Murphy. (2003) “Java
1.4 Game Programming " Plano, Texas, Wordware
Publishing Inc.. pp 402-406.
Ritter, Jack. (1990) “An Efficient Bounding Sphere " in
Andrew Glassner, ed. “Graphics Gems". Academic
Press. pp 301-303. http://www.graphicsgems.org/
Welzl, Emo. (1991) “Smallest Enclosing Discs (Balls
and Ellipsoids)" in H. Maurer, ed. “New Results and
New Trends in Computer Science". LNCS 555.
Eberly, David. (2000) 3D Game Engine Design: A
Practical Approach to Real-Time Computer Graphics.
San Francisco, Morgan Kauffman Publishers, Inc.
Gomez, Miguel. (2003) “An Axis Aligned Bounding Box
(AABB) Sweep Test“. Game Developer Magazine /
Gamasutra Network. October 18th, 1999. Online:
http://www.gamasutra.com/features/19991018/Gomez_3.
htm. Cited January 19th, 2003.
Antonio, Franklin. (1992) "Faster Line Segment
Intersection" in David Kird, ed. "Graphics Gems III".
Academic Press, pp. 199-202. Source code implementation available through the ACM: http://
www.acm.org/pubs/tog/GraphicsGems/gemsiii/insectc.c
Haines, Eric. (1994) "Point in Polygon Strategies"
Graphics Gems IV, ed. Paul Heckbert, Academic Press,
p. 24-46.
Eberly, David H. and Philip J. Schneider. (2002)
"Geometric Tools for Computer Graphics" San
Francisco, Morgan Kauffman Publishers. pp 265-284.

