Visualization of astrophysical simulations using IDL Object Graphics
D. Pomar`ede, E. Audit, A. S. Brun, V. Gautard, F. Masset, R. Teyssier, B. Thooris
CEA/DSM/DAPNIA SEDI/LILAS & SAp
pomarede@cea.fr
Abstract
The ability to interactively visualize the complex products of three-dimensional simulations is a key aspect in
the validation and verification process of numerical algorithms and frameworks. Computational astrophysics,
which benefits from the rapidly increasing computing resources offered by the use of massively parallel mainframes, is a challenging playground to scientific visualization. In this paper, we describe a graphical package developed in the framework of IDL Object Graphics. The requirements governing its design are defined in the context
of the COAST software project which aims at providing an
ensemble of enabling tools and techniques for the development and the validation of major simulation codes. This
covers a wide range of applications, including cosmological formation of large-scale structures, turbulences in the
interstellar medium, stellar magnetohydrodynamics, and
formation of proto-planetary systems. The use of IDL Object Graphics provides an interactive and immersive visualization of complex scenes where various fields of different
nature are entangled. Three-dimensional scalar and vector
fields distributed over regular mesh grids or more complex
structures such as Adaptive Mesh Refinement data, as well
as N-body systems, can be visualized in a number of different, complementary ways.
Keywords— Scientific visualization, Data visualization, Visualization frameworks and infrastructures, Visualization
tools and applications

1 Introduction
With the increasing computing power offered by massively parallel mainframes, simulation has become a major tool in the investigation of complex physical phenomenae [1]. This is true in particular in the domains of physics
and astronomy, where computational astrophysics is considered as a discipline of its own [2]. Like other branches
of Computational Science, computational astrophysics has
its foundations in the development and optimization of numerical methods, verification and validation of codes, and
depends strongly on the enabling technologies they use, for
example in data management and visualization. Visualiza-

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

tion plays an important role in computational astrophysics
where one of the most significant problem is the size and
complexity of the datasets that must be analyzed [3]. Interactive visualization brings many benefits to astronumerics : first, it is an enabling technique for the development
of simulations codes, where it helps in controlling the impact of the codes’ development lifecycles. Different technical aspects such as domain decomposition, boundary limits, initial conditions, message passing and parallelization,
choice in concurrent numerical algorithms, data handling
methods, can be considered and controlled thanks to visualization. Second, the interactivity and the immersion
within the simulated volume help to gain insight of the
phenomena behind the data. Finally an important aspect of
visualization is the ability to render complex scenes involving different data objects of different nature, as required by
the complexity of the natural phenomenae under scrutiny,
in order to establish the coherence of the various physical
fields involved in the simulation.

2 Visualisation of astrophysical plasmas
simulations
In this section are described the scientific goals and the
technical backgrounds for which the visualization of astrophysical simulations is considered. From this discussion
are derived the requirements on the design and the engineering developments that have led to implementation of a
visualization program, in the framework of the IDL Object
Graphics.

2.1 The COAST Software Project
The COAST (Computational Astrophysics at Saclay)
project is dedicated to high performances computing in astrophysics. It includes development of codes, numerical
methods, visualization, distributed databases, optimization
and parallelization methods, code management, verification & validation techniques [4, 5, 6]. This project has its
foundation in a suite of independent numerical codes described thereafter.

2.1.1 The simulation algorithms
The programs developed within the COAST project are
written in F90 and parallelized with MPI, the Message
Passing Interface Standard [7], unless otherwise noted.
ASH, the Anelastic Spherical Harmonic code solves the
3D anelastic equations of motion in a rotating spherical
shell using a pseudo-spectral method [8]. The three thermodynamic variables, the mass flux, and the magnetic field
are expanded in spherical harmonics to resolve their horizontal structures and in Chebyshev polynomials to resolve
their radial structures.
HERACLES is a three-dimensional Radiation Hydrodynamics code [9]. This program is implemented in cartesian, cylindrical and spherical coordinates with regular
mesh grids, a multiple grid approach being currently investigated.
JUPITER is a Godunov code in Cartesian, cylindrical
or spherical geometry, with mesh refinement and special
emphasis on planets embedded in disks and nearly steady
states [10]. This hydrodynamical code is written in C.
RAMSES is an N-body and hydrodynamical code based
on the Adaptive Mesh Refinement (AMR) octree technique [11]. Its tree based data structure allows for recursive
grid refinements on a cell-by-cell basis.
These codes are run on massively parallel mainframes,
such as MareNostrum located at the Barcelona Supercomputing Center [12].
2.1.2 Applications
In this section is given a brief description of the areas of
application of the programs described above, with a focus
on details that set requirements on the visualization tool.
Cosmological structures formation. The formation of
the structures of the Universe is driven by gravitational
clustering. Dark matter is believed to be the dominant
component in mass of the cosmological density field, together with a small fraction (∼10%) in baryons (the building bricks of matter as we know it, such as atoms) [11]. Although baryons can be described as an hydrostatic ionized
plasma trapped in dark matter potential wells, the complexity of hydrodynamical processes such as shock heating, atomic radiation cooling, and star formation requires
an accurate treatment. Dark matter particles are considered as a collisionless N-body system in a gravitational potential for which the Vlasov-Poisson equations are solved.
The implementation of the RAMSES octree AMR allows
to achieve a formal resolution of 81923, reached at the 14th
level of the AMR, corresponding to the implementation of
4.1 × 107 cells, together with a complement of 2563 simulated particles. Simulations are performed to investigate
several scenarios for the evolution of the baryon budget in

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

galactic halos and derive the individual halo star formation, as well as the global star formation rate in the Universe [13].
Turbulences in the Interstellar Medium. The HERACLES code is used to study the thermal fragmentation of
turbulent flows of interstellar hydrogen [14]. Molecular
clouds form through the condensation of a warm neutral
phase into a cold medium. Thermal condensation involves
several different spatial scales, each related to different
physical mechanisms. As a result, simulating the thermal
condensation requires a dynamic range of 104 . While the
current implementation of the HERACLES code based on
Cartesian grids allows to reach a maximum of 12003 grids,
ongoing developments based on multiple embedded grids
will make it possible to reach the required formal resolution.
Stellar magnetohydrodynamics. The ASH code is used
to simulate turbulent convection within deep spherical
shells of the solar convection zone [15]. These studies aim
at a better understanding of the origins of the differential
rotation profile with radius and latitude that has been revealed by helioseismology, thus providing a better knowledge of the solar magnetic dynamo and its cycles of activity. Simulations are performed on Cartsesian grids with a
number of cells ranging typically from 2 106 to 108 involving increasingly nonlinear flows.
Dynamics of proto-planetary systems. The observation
of the recently discovered planetary systems has shown
that a large fraction of the planets seem to have neared
their central star after their formation. This planetary migration has generated systems where giant planets are orbiting close to the central star [16], or where orbital resonances are observed. The simulation of such systems with
JUPITER benefits from its variable-resolution technique.

2.2 Design requirements
A visualization tool is designed as part of the COAST
software project with the following requirements. It is implemented as an interactive widget giving access to the four
different output data formats provided by the ASH, HERACLES, JUPITER and RAMSES codes. 3D data can be
handled in the three following forms : scalar field, vector
field, N-body system. The basic form over which the scalar
and vector fields are distributed is the regular, Cartesian
mesh grid. Non-trivial data structures such as the RAMSES AMR and the JUPITER Multiple-grid implementation have also to be taken into account. Given the potentially large size of the data described above, memory management and optimization techniques have to be pursued.
Typical 6003 Cartesian grids should be handled on a 2 Gb

laptop computers. Larger grids, up to 12003 should be manipulated on dedicated visualization desktops with memories up to 32 Gb and multiple CPUs.
Scalar fields are visualized in three different, complementary ways : volume rendering (ray-tracing), isosurface,
image slice transformed in the 3D space. Vector fields are
visualized through either a hedgehog display or a streamlines display. N-body systems are visualized by means of
a particle cloud. Visualization of 2D subset (surface) and
1D subset (profile plot) is provided. All of the proposed
visualizations may be configured by the user at will. Different objects of different nature can be visualized simultaneously in a single, composite scene. The view properties
can be adjusted to obtain isometric, perspective, or wideangle views. Real-time navigation is proposed, including
rotations, translations and zooms. The data fields can be
observed both from outside and from within, in immersion.
Interactivity with the data is sought in different ways.

2.3

Technical requirements

Two methods of rendering are supported : via a hardware graphics accelerator or via software rendering. The
first solution based on the use of the OpenGL libraries has
to be highly efficient when operating on a local machine.
The second solution applies when the application runs on a
remote computer. In both cases, parallelization and farming of tasks may be engaged.
The implementation of the visualization tool has to be
validated on multiple platforms : graphics station, desktops and laptops under Linux, Windows, and Mac OS, or
through the use of parallel mainframes and clusters under
Unix/Linux.

3 Presentation of IDL
3.1

The IDL framework

IDL, the Interactive Data Language, is a firmlyestablished software for data analysis, visualization, and
cross platform application development [17]. IDL integrates a powerful, array-oriented, fourth-generation language with numerous mathematical analysis and graphical display techniques, thus providing a high level of flexibility, and supports OpenGL-based hardware accelerated
graphics. IDL programs run across all major platforms :
UNIX, Macintosh and Microsoft Windows.

3.2

IDL Object Graphics

IDL provides a set of tools for developing objectoriented applications. IDL’s Object Graphics engine is
object-oriented, and a class library of graphics objects allows to create applications that provide equivalent graphics functionality regardless of the computer platform, output devices, etc [18]. Traditional programming techniques
make a strong distinction between routines written in the

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

programming language (procedures and functions in the
case of IDL) and data to be acted upon by the routines.
Object-oriented programming begins to remove this distinction by melding the two into objects that can contain
both routines and data. Object orientation provides a layer
of abstraction that allows the programmer to build robust
applications from groups of reusable elements.
The IDL Object Graphics system is a collection of predefined object classes, each of which is designed to encapsulate a particular visual representation. Actions (such
as the modification of attributes, or data picking) may be
performed on instances of these object classes by calling
corresponding pre-defined methods. These objects are designed for building complex three-dimensional data visualizations.

4 Design implementation
In this section is presented the SDvision
Saclay/DAPNIA visualization interface implemented in the
framework of IDL Object Graphics and designed to fulfill
the requirements set for the visualization of astrophysical
simulations as stated above. A preliminary implementation
with limited features has been presented elsewhere [19].

4.1 Widget layout
The graphical interface is implemented as an interactive
widget as displayed in Figure 1 in its running state. The
user acts on the objects attributes through ensembles of
menus, drop lists, buttons, dialog fields, sliders, located in
various child bases of the top-level widget base. Rectangular areas in which graphics objects are drawn are view objects. View objects are added with model children, model
objects that represents a graphical item that can be transformed (rotated, scaled, translated) and that serve as container of other model objects or atomic graphic objects.
Transformations are obtained through mouse actions.

4.2 Object controllers
The control of graphics objects is achieved through dedicated lower-level widgets, as displayed on the right-hand
side of Figure 1. These controllers are invoked to generate
objects, hide or display them, and configure them at any
time during their lifecycle. Three categories of objects are
defined : Data objects are associated with the products of
the simulation. A scalar field can be visualized through
an isosurface object, a volume object, a transformable image. A vector field is visualized with a hedgehog display
and a streamlines display. N-body systems are visualized
through a particle cloud. The Data objects controller also
gives access to visualization of 2D subsets. Geometry objects are associated with the simulated geometry : volume
limits, axis system, domain decomposition. Scene objects

Figure 1: Layout of the SDvision widget interface.
give access to light objects that represent sources of illumination. Predefined lights are proposed, e.g. frontal, ambient, center divergent, etc.

4.3

View properties and output capabilities

The properties of the view can be acted upon thanks to
dedicated widgets : choice of isometric versus perspective
view, setting of the distance from the eyepoint to the viewplane, clipping plane positions, preset wide-angle view,
preset “no clipping” view, preset projections, setting of
haze effect. Preset background colors are proposed. A
generic rendering quality switch is accessible, the precise
effect of which depends on the graphics objects on display,
amounting to degrade or upgrade the graphical resolution.
Multiple output format are supported : encapsulated
postscript, gif and jpeg images, vrml files, mpeg movies.

4.4

Data Formats and Custom Variables

The widget provides a base specifically dedicated to
data format selection and loading. The four legacy data
formats used by the simulation codes are handled. These
binary data can be arranged in different ways : “brickof-bytes” arrays for the ASH data, multiple files mapping
the processors distribution for the others, with descriptor
files that contain the definition of the multiple grid for
JUPITER, and complex, tree-based data structure for the

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

RAMSES AMR. The widget gives access to data written
in the HDF5 Hierarchical Data Format [20]. As part of
the COAST project, the unification of all legacy format in
a single, optimized HDF5 description is sought, and already operational in the HERACLES code [4, 5]. The basic data structure used for the visualization of scalar and
vector fields is the regular-mesh Cartesian grid. The AMR
data are projected onto such structures.
New variables of physical relevance can be created from
the variables loaded as the primary simulation products. To
do so the variables in memory are exported to the IDL interactive command line where new variables can be defined
and uploaded back in the widget.

5 Visualization of scalar fields
In this section are presented the multiple ways in which
scalar fields are visualized : volume rendering, isosurface,
image of a planar slice.

5.1 Volume rendering
A volume object represents a mapping from a threedimensional array of data to a three-dimensional array of
voxel colors, which, when drawn, are projected to two dimensions. This amounts to a ray-tracing algorithm. The
implementation is based on the use of the IDLgrVolume

Figure 2: left : volume rendering of RAMSES data. The scalar field on display is the baryonic density restricted to the
level 10 of the AMR data structure, projected on a 10243 Cartesian mesh grid. Right: volume rendering of the stellar radial
velocity field obtained in a 2003 ASH simulation. The semi-transparency attributed to the voxels helps in the visualization
of intricate ascending and descending flows.

Figure 3: Volume rendering of the density field of the Interstellar Medium obtained in a 12003 HERACLES simulation. A
red-to-white palette is applied and the rendering is smoothed by using the 8 voxel’s nearest neighbors on each step on a ray.

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

class. Several options are proposed for the composite function to be used to measure the value of a pixel on the viewing plane by analyzing the voxels falling along the rays. In
Figure 2, left, is shown an example of a maximum intensity
projection. In this case, the color of each pixel on the viewing plane is determined by the voxel with the highest opacity value along the corresponding ray. The default opacity
table is a linear ramp. Non-trivial opacity functions and
red, green, blue color tables can be loaded. In Figure 2,
right, is shown a volume rendering obtained with a more
complex compositing function with Alpha blending.
The implementation of this class benefits from the
use of multiple CPUs, which is useful to perfom highresolution rendering of very large datasets. An example
of rendering a 12003 simulation is shown in Figure 3, as
obtained on a 32 Gb RAM visualization station with two
dual-core AMD Opteron units.

5.2

Isosurface

An isosurface, or contour surface, is a surface which
represents points of a constant value of a dataset. An histogram of the data is provided that can be clicked upon to
select the desired contour value. A list of vertices and polygons describing the contour surface is obtained using the
shade volume procedure of the IDL library. The method
used is that described in [21], and is similar to the marching cubes algorithm [22]. Once available, the vertice and
polygon lists are loaded in a polygon object, an instance of
the IDLgrPolygon class. Multiple isosurfaces can thus be
visualized, such as in the example of Figure 4 (left). In this
example, the number of polygons is about 370000. Transparency and shininess can be adjusted at will by the user.
Sources of illumination can also be adapted to improve
the visualization. In the case of Figure 4 (left), an ambient
and a frontal light are used. In Figure 4 (center), where
is displayed a JUPITER density field, three sources of directional lights are used (frontal, from the right, from the
bottom). Another example obtained for an HERACLES
simulation is shown in Figure 4 with sources of illumination coming from the sides.

5.3

Image Object

Image objects, instances of the IDLgrImage class, represent a mapping from a two-dimensional array of data
values to a two dimensional array of pixel colors. Image are rendered by default using a texture-mapped polygon on graphics devices using the RGB color model. The
image rectangle is transformed by the current full threedimensional model transform. This allows the image to be
drawn with the full flexibility of the current model transform. An example is shown in Figure 4 (right). In this
scene, a slight haze effect is added to enhance the depth
effect.

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

5.4 Two-dimensional Subsets
The SDvision widget provides a visualization of 2D
subsets. A surface object, instance of the IDLgrSurface
class, is used to represent a shaded or vector representation
of a mesh grid. An image of the data is also provided, that
can be scanned interactively to obtain 1D profile plot. An
example of filled surface enhanced with Gouraud shading
and frontal lighting is shown in Figure 5.

6 Visualization of vector fields
6.1 Streamlines display
Streamlines are obtained using the IDL particle trace
procedure to trace the path of a massless particle through a
vector field. Input seed points are either distributed on a 2D
or 3D rectangular grid, or interactively picked up on any
object in the scene. The trace is obtained by treating the
vector field as a velocity field and integrating. The vertices
generated along the paths are returned packed into a single
array along with a polyline connectivity array that can then
be loaded in an instance of the IDLgrPolyline class. Examples of streamline object are shown in Figure 6 (left and
center) where input seeds were picked up on an image of
the density field in JUPITER and RAMSES simulations.

6.2 Hedgehog display
Hedgehog displays are instances of the IDLgrPolyline
class used in conjunction with the IDLgrSymbol class that
provides three-dimensional arrow markers. Input seeds are
defined in the same fashion as for the streamline object. An
example of hedgehog object is shown in Figure 6 (right)
where the velocity field is displayed on an equatorial galactic plane.

7 Visualization of N-body systems
The display of particle clouds is obtained using a IDLgrPolyline object in association with a IDLgrSymbol object that provides dot or more elaborate markers. Like any
other object, the transparency of the cloud can be tuned
by acting upon the object alpha channel to obtain a threedimensional rendering. This is illustrated in Figure 1 where
the 1283 particles of a RAMSES simulations are considered. The widget provides histograms of physical quantities such as the Dark Matter density and velocity that can
be used to interactively select sub-samples of the particle
cloud. The user can select the lower and upper bounds
on the histogram, as illustrated in Figure 1. Other examples are shown in Figure 7 where only the most dense dark
matter regions are selected.

8 Features highlight
In this section, some interesting features of the SDvision
package are discussed.

Figure 4: Visualization of isosurfaces. Left : two isosurfaces of ASH data. The azimuthal component of the stellar magnetic
field is visualized for a negative (blue) and a positive (red) contour value. Center : isosurface of a JUPITER density field
showing a planet formation. The boundaries associated with the multiple grid implementation are shown superimposed.
Right : Isosurface and image of HERACLES data. Turbulences of the interstellar medium are seen in the density field.

Figure 5: Surface of HERACLES data showing turbulences in the interstellar medium density field. The slice is the same as
the one visualized as an image in the three-dimensional scene of Figure 4 (right). The surface can be visualized in different
styles : points, wire mesh, filled, and with a texture mapping, using an instance of the IDLgrImage object class.

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

Immersion. Using its navigation capabilities and extended viewing properties, immersive views can be obtained to better examine the simulated data. This is illustrated in Figure 7 where the viewpoint is located within the
volume and scenes are rendered using a wide-angle perspective.
Composite Scenes. Thanks to the object controllers, and
by playing with various attributes such as the alpha channels, complex scenes can be obtained that mix together various objects of very different nature. This is illustrated in
Figure 7 where the observer can infer from these different
scenes that all the physical fields are distributed coherently.
For instance, it is observed that the region of high Dark
Matter particle density are very well correlated spatially
with the regions of high matter density.

9 Task Farming and parallelization
The farming of independent IDL tasks on multiprocessor systems can be obtained using the FastDL package developed by TechX corporation [23]. The TaskDL
libraries of this product were used to perform the farming
of the treatment of the different AMR fields of the RAMSES simulation. The gain in performance is illustrated in
Figure 8. The mpiDL libraries can also be used for parallelization based on the MPI standard.

10 Code management and distribution
The code is managed using the trac project management
tool with the Subversion version control system. It can be
compiled and run by IDL licensee. Non-IDL licensee may
run freely a binary version using IDL Virtual Machine [17].

11 Comparison with major existing tools
A category of major visualization packages are developed on an open-source basis, using for instance the VTK
library [24]. This is the case of the VisIt [25] and the Paraview [26] tools which have a special focus on parallel,
interactive visualization. In another category, which includes for instance the EnSight package [27], are the commercial products, characterized by their very high performances but poor flexibility in terms of their potential for
user-specific interfaces development. The use of the licensed IDL Object Graphics is a compromise, which benefits both from the strong commitment and support of a
commercial company together with a deep diffusion and
experience within the scientific community.
Though not so developed as the packages cited above,
the SDvision package described in this paper has many
advantages : the possibility to visualize the same data
with different objects, the possibility to use dedicated interfaces displaying data histograms to interactively select
some subsamples or contour values, the interactive generation of seeds for streamlines display, the creation of custom
variables derived from the primary simulation data,... For

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

what regards the handling of very large datasets, the interface with a parallelization package offers great perspectives in terms of improving performances.

12 Conclusions and perspectives
A versatile tool dedicated to the visualization of astrophysical simulations is obtained using IDL Object Graphics. This tool is characterized by its ability to interactively visualize various objects of very different nature simultaneously in complex, composite scenes.
Short terms perspectives of development are mainly
directed towards the optimization of the memory management to access larger data sets. The visualization of
large images could benefit from the implementation of
JPEG2000, an open, international standard for image compression based on wavelet technology. The handling of
multiple-grid data will be developed, and the interest of
parallelization will be further studied.

Acknowledgements
The authors would like to thank G. Herent and P.-F.
Honor´e of the LILAS laboratory for technical support. We
would like to acknowledge useful discussions, insights,
perspective of developments and training received from
ITTvis France. We thank Y. Dubois for providing simulations useful to the development of this software. We thank
the TechX Corporation for support during our testing of the
FastDL package.

References
[1] see e.g. Proceedings of the Conference on Computational Physics, Gyeongju, Republic of Korea, 29-31
Aug 2006, ed. J.S. Kim, Computer Physics Communications, Elsevier, in press.
[2] see e.g. “Numerical Modeling of Space Plasma
Flows”, Proceedings of the 1st IGPP-CalSpace International Conference, 26-30 March 2006, Palm
Springs, California, USA, ed. N.V. Pogorelov and
G.P. Zank, Astronomical Society of the Pacific
Conference Series, vol. 359 (2006), ISBN: 978-1583812-27-3.
[3] R.D. Bergeron & A. Foulks : “Interactive out-of-core
visualization of multiresolution time series data”,
Ibid.
[4] E. Audit, D. Pomar`ede, R. Teyssier, B. Thooris : “Numerical Simulations of Astrophysical Plasmas: status and perspectives of the Saclay/DAPNIA software
project”, Ibid.

Figure 6: Visualization of vector fields. Left : velocity streamlines of a JUPITER simulation of planetary migration with an
image of the density field. Center : in this RAMSES simulation, streamlines are generated by picking seeds interactively on
an image object, shown together with a red isosurface of the baryon density. Right : hedgehog display of the velocity field
in a RAMSES simulation of galaxy wind, with an image and an isosurface of the scalar density field.

Figure 7: Immersive visualization of complex, composite scenes of RAMSES data. From a fixed viewpoint located within
the volume, the view is augmented with various objects of different nature : 3 isosurfaces and 1 image of the baryon density
field together with high-density dark matter cores (upper left), volume rendering and image of the density (upper center),
addition of red Dark Matter particle clouds (upper right), image of the baryon density at different positions with Dark Matter
clouds and velocity streamlines (lower).

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

Figure 8: Task farming performances using TaskDL in terms of computing time required to project RAMSES AMR fields
into 2563 Cartesian grids versus the number of fields. The sappem machine is a 8-processors computer, used in sequential
mode (blue curve) or in task farming mode (black curve). The M70 is a DELL Precision laptop (green curve).
[5] D. Pomar`ede, B. Thooris, E. Audit, R. Teyssier, “Numerical Simulations of Astrophysical Plasmas”, Proceedings of the Sixth IASTED International Conference on Modelling, Simulation, and Optimization,
MSO2006, Gaborone, Botswana, 11-13 sept 2006,
ed. H. Nyongesa, Acta Press, ISBN: 0-88986-618-X.

[15] A.S. Brun, J. & Toomre : “Turbulent Convection under the Influence of Rotation: Sustaining a Strong
Differential Rotation”, Ap. J., 570 (2004) 865-885.

[6] http://www-dapnia.cea.fr/Projets/COAST

[17] http://www.ittvis.com/idl/

[7] http://www-unix.mcs.anl.gov/mpi/

[18] “Object Programming”, IDL Help, Programmer’s
Guides, IDL Version 6.3, April 2006 Edition.

[8] G.A. Glatzmaier, T.C. Clune, J.R. Elliott, M.S. Miesch, J. Toomre : “Computational aspects of a code
to study rotating turbulent convection in spherical
shells”, Parallel Computing, 25 (1999) 361-380.
[9] M. Gonz´alez, E. Audit, P. Huynh : “HERACLES :
a three dimensional radiation hydrodynamics code”,
Astron. Astrophys., 464 2 (2007), 429-435.
[10] F. Masset, see e.g. http://www-dapnia.cea.fr/
Projets/COAST/jupiter fargo.htm
[11] R. Teyssier : “Cosmological hydrodynamics with
adaptive mesh refinement - A new high resolution
code called RAMSES”, Astron. Astrophys., 385
(2002) 337-364.
[12] http://www.bsc.es/
[13] Y. Rasera & R. Teyssier : “The History of the Baryon
Budget: Cosmic Logistics in a Hierarchical Universe”, Astron. Astrophys., 445 (2006) 1-27.
[14] E. Audit & P. Hennebelle : “Thermal condensation
in a turbulent atomic hydrogen flow”, Astron. Astrophys., 433 (2005) 1-13.

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

[16] F.S. Masset, G. D’Angelo, W. Kley : “On the migration of protogiant solid cores”, Ap. J., 652 (2006)
730-745.

[19] D. Pomar`ede, E. Audit, R. Teyssier, B. Thooris :
“Visualization of large astrophysical simulations
datasets”, Proc. of the Conf. on Computational
Physics 2006, Op. Cit.
[20] http://www.hdfgroup.org/
[21] J.B. Klemp, M.J. McIrvin and W.S. Boyd : “PolyPaint - A Three-Dimensional Rendering Package”,
Proceedings of the Sixth International Conference
on Interactive Information and Processing Systems, Anaheim, CA, American Meteorology Society,
Feb.5-9, 1990, pp.286-293
[22] W.E. Lorensen and H.E. Cline : “Marching Cubes:
A High Resolution 3D Surface Construction Algorithm”, Computer Graphics, 21 (1987) 163-169.
[23] http://www.txcorp.com/
[24] http://public.kitware.com/VTK
[25] http://www.llnl.gov/visit/
[26] http://www.paraview.org/
[27] http://www.ensight.com/

