Multi-resolution Meshes Deformation Based on Pyramid Coordinates
Sha Chen-min，Liu Bo，Ma Zhan-guo，Zhang Hong-bin
College of Computer Science, Beijing University of Technology, China.
shachm@163.com, liubo@emails.bjut.edu.cn, mzgsy@163.com, zhb@public.bta.net.cn
Abstract
In this paper, we present a technique for multiresolution meshes deformation based on pyramid
coordinates. Pyramid coordinates are rotation
invariant, and can achieve low distortion editing for
large deformations. Their drawback is that the
reconstruction process is nonlinear and time
consuming especially for large meshes. In order to
decrease the computational cost, the proposed method
reduces the number of vertices involved in the
deformation. We first construct a simplified mesh
using a modified CPM algorithm; then edit the
simplified meshes by pyramid coordinates based mesh
detail presentation; finally, series of details are added
to the deformed simplified mesh. Our algorithm can
generate natural looking deformations more efficiently
than the original pyramid coordinates method.
Keywords--mesh deformation, CPM, pyramid
coordinates,

1. Introduction
Mesh deformation is useful in a variety of
applications in computer modeling and animation.
Many techniques have been developed to provide
natural looking deformations. In particular, differential
domain methods are very effective in preserving
surface details, which are important to generate highquality results.
Differential domain methods minimize an energy
function representing how well the details are
preserved after a deformation and can be solved as a
sparse linear system. The typical methods include
Poisson meshes[1], Laplacian coordinates[2], Pyramid
coordinates[3], Linear rotation invariant coordinates[4]
and so on. Poisson meshes manipulate gradients of the
mesh’s coordinate functions using an FFD and then
reconstruct the surface from the Poisson equation. The
Laplacian coordinates of each vertex are defined as a
displacement vector between the average of the

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

neighbor vertices and the actual 3D position of the
vertex. However, the Laplacian coordinates are not
invariant under rotation and scaling. The pyramid
coordinates capture the local shape (lengths and
angles) of the mesh around each vertex and help
maintain this detail under various editing operations.
They are invariant under rigid transformations but the
reconstruction is not linear. The Linear rotation
invariant coordinates deformation makes the
reconstruction linear, but it has to solve two linear
systems.
With the development of 3D scanning
technology, it’s popular to use dense triangle meshes
to represent complex objects. The large size of the
meshes makes it difficult to edit them efficiently by
differential domain methods. To improve editing
efficiency, this paper introduces a technique for multiresolution meshes deformation based on pyramid
coordinates.
We make the following contributions in this
paper:
1. Our algorithm combines multi-resolution
techniques with differential domain methods;
makes the deformations preserve surface details
well and improve the computational efficiency.
2. In mesh refining processing, we reconstruct the
deformed full resolution mesh using the
Laplacian. After editing operations, the 3D
positions of the vertices have been changed, but
we maintain the Laplacian invariant to preserve
details.

2. Multi-resolution meshes deformation
based on pyramid coordinates
In this paper, we use Pyramid coordinates to
represent mesh details. They are invariant under rigid
transformations and consequently can achieve low
distortion editing for large deformation constraints.
However, the reconstruction process of the pyramid
coordinates method is nonlinear, which leads to high
computational cost especially for large meshes. To
solve this problem, we introduce the multi-resolution

techniques in pyramid coordinates deformations.
Firstly, we construct a simplified mesh by modified
CPM (compressed progressive meshes) algorithm [5]
(see Fig. 1(c)); then we edit the simpler base meshes
based on pyramid coordinates (see Fig.1 (d)). Finally,
we add series of detail to the deformed models to
reconstruct full resolution meshes (see Fig.1 (e)).
These three steps are described in details in the
following sections.

(a)

(b)

(c)

(d)

(e)

(f)

Figure 1: Deformation. (a): Input model in
solid. (b): Input model in mesh. (c):
Simplification mesh. (d): Deformation with
Pyramid coordinates. (e): Deformed full
resolution mesh. (f): Deformed model in solid.

2.1. Mesh simplification
The elementary operation during mesh
simplification is the edge collapse, as show in Fi.2. An
edge collapse operation ecol({vs,vt}) unifies 2 adjacent
vertices vs and vt into a single vertex vs. The vertex vt
and two adjacent faces {vs,vt,vl} and {vt,vs,vr} vanish
in the process. A position vs is specified for the new
unified vertex. Edge {vl,vs} and {vs,vr} called cutedges.

(a)

(b)

(c)

Figure 3: Three restrictions used in edge
collapses during CPM simplification. (a) At
most two vertices may be collapsed into one.
(b) For each edge e=(v1,v2) that will be
collapsed and any vertex w that is connected
by an edge to both v1 and v2, the triple (v1,v2,w)
must define a valid triangle in Mi+1. (c) For each
edge e1=(v1,v2) that will be collapsed and any
edge e2=(w1,w2) forming a quadrilateral
(v1,v2,w1,w2) with e1 in Mi+1, e1 and e2 cannot be
collapsed in the same batch.
To achieve a good approximation at each stage,
we use an error metric to evaluate the error introduced
by every single edge collapse. In this paper, we choose
an estimation of the Hausdorff distance [6] as the error
metric. Then, we select a subset of edges that do not
violate the constraints defined above to be collapsed in
the next batch.
The simplification process is described as
follows:
1. For every edge in a batch, compute the error
metric and sort using the heap sort method.
2. According to the topological restrictions
described above and the edges sequence sorted in step
1, choose the valid edge to be collapsed.
3. All selected edges are collapsed to their
midpoint, and in order to reconstruct the full resolution
mesh, we record the cut-edges and the Laplacian of vt
in Fig. 2.

2.2. Pyramid coordinates deformation

V
βi

Figure 2: Illustration of the edge collapse
transformation

V5
li

V1

In this paper, we use CPM to simplify original
mesh. The full resolution mesh, Mmax, is simplified in
batches, creating a series of meshes Mmax, Mmax-1,
…,Mi+1, Mi, …, M1, M0 of decreasing accuracy. The
levels of simplification can be controlled by the users.
When collapsing edges in Mi+1, we comply with three
restrictions given by CPM, which are illustrated in Fig.
3.

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

V4
αi

V3

V2

(a)

(b)

(c)

Figure 4: (a) Pyramid coordinates: (b)
tangential components in the projection plane
P; (c) normal component β.
The steps of the pyramid coordinates deformation
algorithm for simplified meshes are as follows:

1. For every vertex v, compute the Pyramid
coordinates which are to be used in the reconstructions
and invariant during the whole deformation.
2. Choose the control vertices Vc and given the
new locations for Vc specified by the users.
3. Select the region of interest (ROI) using
Breadth_First Search method from begin point to end
point. Only the coordinates for vertices inside the ROI
will be computed.
4. Reconstruct the mesh based on Pyramid
coordinates. We can adopt the reconstruction process
as in [3]. It can be described as follows:
Let v be a mesh vertex in 3D and let v1,v2,…, vm
be its neighboring vertices. Given the normal
n=(nx,ny,nz) at v, we define the projection plane P as:
m

nx x + n y y + nz z + d = 0, d = −∑ n ⋅ v i (1)
i=1

We define v′ and v′i to be the projections of v and vi
to P, respectively. The description of the vertex with
respect to its neighbors consists of:
1. A set of angles αi between the projected edges
< v′ , v′i >and < v′ , v′i +1 > (Fig.4 (b));
2. A set of angles βi between n and the edges <v,
vi> (Fig.4 (c));
3. A set of projected edge lengths li=|| v′ - v′i ||.
Pyramid coordinates can be viewed as a
combination of tangential (α and l) and normal (β)
components. We can obtain the 3D coordinates of the
mesh vertices from the pyramid coordinates by the
following iteration reconstruction process:
1. For every vertex v, compute the current normal
n at v.
2. Compute the projection plane P (Eq.1) and
project the neighbor vertices of v to P.
3. For each vertex vi which is neighboring to a
control vertex v in Vc, compute each height offsets

h(ij ) from vij (the jth neighbor vertex of vi) to vi, and
update the positions of vi:

h(j i ) =|| v′i − v′ij || cot( β ij ) + ( v ij − v′ij ) ⋅ n (2)

v i = v′i + n

1 mi ( i )
∑ hj
mi j =1

(3)

4. For each vertex v, if v is not in control vertices

Vc, update the position of v as follows:
(a) Set the position of v′ to

v′ =

m

1
m

∑ω

i

∑ ωi v′i
i =1

i =1

(4)

where ωi are the mean value weights [7]
derived from αi and li.
(b) To derive the position of v given v′ ,
calculate a set of offsets hi along n using the
angles βi:
hi =|| v′ − v′i || cot( β i ) + ( v i − v′i ) ⋅ n (5)
(c) Finally, compute the new position of v
by offsetting v′ by the average of hi along n as
follows:

v = v′ + n

(6)

5. Repeat step 1-4 until obtaining visually
pleasing results.
The deformation procedure provides low
distortion results.

2.3. Mesh refinement
The refinement algorithm performs the inverse
operations of the simplification process to reconstruct
sequence of meshes M1, …, Mmax-1, Mmax. In [5], they
encode the geometry coordinates of the original
vertices of the collapsed edges in simplification mesh
process. The refinement process uses the same
prediction and reconstructs the correct vector by
adding the decoded correction. The basic idea is to
predict an unknown vector from known vertices and to
encode the prediction error. Each batch MiÆMi+1
includes the split vertex marking bits in Mi, the cutedges encoding for every split vertex, and the entropy
encoded prediction correction vectors of the split
vector. However, this algorithm does not suit for us.
After the deformation, the split vector was changed. In
this paper, we use the Laplacian to reconstruct the
deformed full resolution mesh. During the
reconstruction process, we keep the Laplacian
invariant to preserve details of the meshes. The
individual refinement batches MiÆMi+1 in this paper
are as follows:
1. For each collapsed edge, read the related
information which was saved during the simplification
process, including the cut-edges, split vertex vsplit, and
the vt’s Laplacian δ.
2. According to the position of cut-edges and split
vertex, we find out the neighbor vertices of vt. We can
obtain vs, vt.

1
v split = ( v s + v t )
2
δ = v t − ∑ wi v
i

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

1 m
∑ hi
m i =1

i
t

(7)

where the weights wi are the cotangent weights[8].

3．Experimental results
Figures 5-7 demonstrate the results of our
technique. The models undergo large deformations
using only a small number of control vertices. The
resulting models preserve the original details very
well.

(a)

(d)

(b)

(e)

(a)

(b)

(c)

(d)

(e)

(f)

(c)

(f)

Figure 5: (a): The original model in solid with
9770 vertices. (b): The original model in mesh.
(c): The simplification mesh with 3881
vertices. (d): Deformation with only one
control vertex. (e): Deformed full resolution
model. (f): The deformed model.

Figure 7: (a): The original model in solid with
5103 vertices. (b): The original model in mesh.
(c): The simplification mesh with 2018
vertices. (d) Walked. (e) Deformed full
resolution meshes. (f): The deformed model in
solid.
In this paper, we improve the efficiency in two
aspects. Firstly, we decrease |V| by simplifying
meshes; secondly, for simplified meshes with less
number of vertices, less number of iterations a are
needed to generate same quality models. The results
are listed in table 1.
Table 1: The results of our algorithm

(a)

(d)

(b)

(e)

(c)

(f)

Figure 6: (a): The original model in solid with
23982 vertices. (b): The original model in
mesh. (c): The simplification mesh with 3732
vertices. (d): Lift the tail. (e): Deformed full
resolution model. (f): The deformed model in
solid.
For the deformations with constraints, the
computational cost of them is:
T = a ⋅ (| Vc | ⋅t1 + | V | ⋅t2 )
(8)
where a is the number of iterations, |Vc| is the number
of control vertices, V is the set of vertices in the ROI
except the control vertices and |V| is the number of V,
t1 is the time to update the neighbor vertices of one
control vertices, t2 is the time to update a vertex in V.

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

Model
Triceratops
(Fig.1)
Camel
(Fig.5)
Dinosaur
(Fig.6)
Homer
(Fig.7)

Original
Size
(#vertices)
2832

Simplification
Size
(#vertices)
1794

Original mesh
iteration
times
183

Simplification
mesh
iteration times
55

9770

3881

1152

539

23982

3732

2845

487

5103

2018

937

254

Conclusions
A method for multi-resolution mesh deformation
based on pyramid coordinates is proposed in this
paper. The details of the mesh are well preserved
during the deformation operations. By introducing the
multi-resolution techniques, the computational
efficiency is improved by decreasing the number of
vertices involved in deformation and reducing the
number of iterations. The advantage of our algorithm
is rather obvious when applied in large mesh
deformation. Future research directions include
speeding up the method to achieve real-time
deformation.

Acknowledgements
This work was supported by National Natural
Science Foundation of China (No. 60443005,
60575008) and China Ministry of Education
(No.20040005016).

[4]

[5]

References
[1]

[2]

[3]

Dong Xu, Hongxin Zhang, Qing Wang, Hujun Bao.
Poisson Shape Interpolation. In Proceedings of the
2005 ACM symposium on Solid and Physical
modeling. Jun. 2005. pp. 267- 274.
O. Sorkine, D. Cohen-Or, Y. Lipman, et al. Laplacian
Surface Editing. In Proceedings of the 2004
Eurographics/ACM SIGGRAPH symposium on
Geometry processing. Jul. 2004. pp. 175-184.
A. Sheffer, V. Kraevoy. Pyramid Coordinates for
Morphing and Deformation. In Proceedings of the 3D
Data Processing, Visualization, and Transmission,

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

[6]

[7]
[8]

2nd International Symposium on (3DPVT'04). Sep.
2004. pp. 68-75.
Y. Lipman, O. Sorkine, D. Levin, et al. Linear
Rotation-invariant Coordinates for Meshes. ACM
Transactions on Graphics (TOG), vol.24, no.3. 2005.
pp. 479-487.
R. Pajarola, J. Rossignac. Compressed Progressive
Meshes. IEEE Transactions on Visualization and
Computer Graphics, vol.6, no.1. Jan. 2000. pp. 79-93.
M. Garland, P.S. Heckbert. Surface Simplification
Using Quadric Error Metrics. In Proceedings of the
24th annual conference on Computer graphics and
Interactive techniques. 1997. pp. 209-216.
M.S. Floater. Mean Value Coordinates. Computer
Aided Geometric Design, vol.20, no.1. Mar. 2003. pp.
19-27.
M. Meyer, M. Desbrun, P. Schroder, et al. Discrete
Differential-geometry Operators for triangulated 2manifolds. Visualization and Mathematics III. 2003.
pp. 35-57.

