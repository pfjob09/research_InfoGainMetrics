A 3D-Hash Function for Fast Image Indexing and Retrieval
M.Shahazad Mughal, M. Nawaz, Farhan Ahmad, Saadia Shahzad, A.K. Bhatti, S. Mohsin
COMSATS Institute of Information Technology, Abbottabad - PAKISTAN
{msmpu@yahoo.com, nawaz@ciit.net.pk, majfarhan@yahoo.com, saadiasm@yahoo.com
adnankb@ciit.net.pk, smohsin@ciit.net.pk}
Supervised by: Dr. Haroon Rashid, haroon@ciit.net.pk
Abstract
Image retrieval on the basis of similarity is an
important task in many image database applications.
Majority of the users’ requests requires retrieving those
images in the database that are spatially similar to the
query image. In image databases, images are represented
by symbolic images. Spatial relationships in a symbolic
image are represented by 2D strings.
In Image Database Systems, conventionally 2D
strings that are converted into triples represent symbolic
pictures or objects. A unique hash address is assigned to
each triple, which represents the picture. It serves the
purpose of retrieval of images by reducing pattern
matching.
The calculation of new unique hash keys for all
triples is required while inserting new image. In order to
overcome these problems we present a solution in this
paper that is the concept of a 3D hash function which
speeds up the computation of the associated values for the
picture objects.
Keywords - Image database systems, 2D string,
perfect hashing function, 3D hash function, image
retrieval

1. Introduction
A DBMS is utilized to arrange, organize, store, and
retrieve large amount of data. Traditionally, databases
have been used for management of alphanumeric data.
Most of the existing DBMS have dedicated their services
on retrieval and searching on alphanumeric pattern
matching.
Recently an emphasis is made on the image database
and it gains popularity on large scale. An image or
pictorial database has to concern with the management of
a large number of images. Thus, for fast query processing,

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

efficient algorithms for image indexing are required to
accommodate these enormous databases.
Image databases are required in many applications
such as office automation, CAD systems, and the fifth
generation computing systems. Some of these
applications, such as CAD systems, require that the
database techniques include operations for manipulation
of databases to account for parts of an image [2].
The traditional techniques for query and search
cannot be applied to pictorial database. Hence, a different
set of techniques is needed to completely or partially
match the queries with the pictures in a database for
retrieval. Sometimes, a user may want to retrieve images
by specifying relations between parts of an image. A
scene in an image is described in terms of atomic objects,
known as picture elements.
The requirement to allow for operations on picture
elements, especially the retrieval operations that specify
adjacency and relative positioning, puts new strains on
computation during query and retrieval [1]. For timely
access to images, the retrieval process needs a welldeveloped index. The index provides an efficient storage
and access mechanism, and is essential for any viable
image database. Therefore, the enhancement in storage
and access methods is warranted by the large volume of
complex image data as the processing time to retrieve
images in real-time can be enormous.
The earliest image database systems employed
lookup tables to organize the database and to access
images for retrieval. The retrieval of images from earlier
image databases involved the process of pictorial pattern
matching. This is achieved by matching pictorial objects
and their spatial relationship with the objects in the image
database. The problem of matching individual picture
elements in two given pictures to determine their
similarity is identical to graph matching problem [15],
and can be extremely time consuming for any moderately
complex picture.

The capability to represent pictorial objects and the
spatial relationship between these objects is a major
database design issue [11] [14]. The database systems
based on the Packed R-tree structure [11] and the
Intelligent Image Database System (IIDS) took the first
steps in providing this additional capability [14]. In
particular, spatial reasoning and similar image
information retrieval are the two strengths of IIDS. Since
spatial relationship depends on human interpretation and
is a fuzzy concept, the IIDS is concerned with the high
level object oriented approach to picture retrieval rather
than low level image primitive of objects at exact spatial
locations [12]. Dimitris Papadias et. al. has proposed a
frame-work for multidimensional relationships and object
retrieval in [5].
Chang, et. al., proposed a data structure, known as a
2D string, for spatial reasoning on images and quick
retrieval of images based on partial match [10], [17]. The
2D strings are well suited to images where orthogonal
symbolic projections are disjoint, and can be described by
using only global operators.
Indexing image databases is based on image content,
a major difference from conventional databases. Indexing
may be based on different criteria such as color, texture,
shape, motion, volume, semantic constraints, or spatial
constraints.[6]
However, the 2D strings are not sufficient enough to
represent complex images. A new set of local operators is
introduced to compensate for images whose projections
on orthogonal axes are overlapping [17]. The concept of
2D string is generalized to 2D G-string [16]. However,
the concept of 2D G-string is not well suited for storage
efficiency and spatial reasoning. Hence, a new concept of
2D C-string was introduced for efficiency in storage and
retrieval [12].
The picture algebra of the local and global operators
is developed in [13]. Another type of 2D H-String is
introduced which combines the advantages of C-string
and quad tree data structures to accommodate more
complex picture elements. The problem of picture
information storage and retrieval becomes the problem of
2D string manipulation.
Most current spatial similarity retrieval algorithms
focus on assessing similarity between two images and
ignore the indexing problem. This led to the existence of
efficient similarity assessment algorithms without the
accompanying indexing mechanisms. Without an efficient
indexing mechanism, search has to be done sequentially,
which incurs prohibitive cost in large image databases [3].
The organization of the paper is as follows:
In Section 2 we present the 2D string approach to
describe the spatial relationship between picture objects.
Section 3 describes the modified approach regarding the
2D string, 3-D Hash Function for Image Indexing and
Retrieval and the earlier algorithms to compute associated

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

values for picture elements to assign hash addresses to
ordered triples. Section 4 explains the complexity analysis
of our algorithm and compares it with other algorithms
proposed previously. At the end the conclusions are
given.

2. Proposed work
In this paper, we introduced an efficient algorithm
(3D hash function for image indexing and retrieval)
that will speed up the insertion and retrieval of images in
the image database. In earlier approaches if we have to
add a new image to the database then we had to repeat the
whole procedure to assign hash values to all triples, but
with the help of our algorithm process becomes simple
and there would be no need to repeat the whole procedure
for the insertion of new image.
In order to overcome the problem of time consuming
with maximum complexity of insertion and retrieval of
images which is not been focused in the previous work we
have put our great attention on it and introduced the
efficient algorithm for fast image indexing for insertion
and retrieval having minimum complexity.

3. The 2D String approach
In the 2D string approach, each picture is considered
to be made up of a set of picture elements. The entire
picture is divided into axis-oriented zones that are known
as Minimum Bounding Rectangles (MBRs). Each MBR
encloses at least one picture element. The centroid of the
rectangle is used as reference to the picture element.
When the MBRs of two objects are disjoint we can
conclude that the objects that they represent are also
disjoint. If the MBRs, however, share common points, no
conclusion can be drawn about the spatial relation
between the objects.[5]
In [3] Peter L. Stanchev has discussed about the
image data representation. It has divided the image data
into two main groups, Physical image representation and
Logical image representation. In logical image
representation it has discussed the attributes of image
objects as: meta attributes, semantic attributes, color
attributes, texture attributes, shape attributes and spatial
attributes.
Assuming that no overlaps occur, the individual
picture elements are projected onto the orthogonal axes.
The 2D spatial relations among picture elements are
expressed in terms of 1D spatial relations (or 1D string)
among the projections on the orthogonal axes. The 2D
string is a data structure that develops and maintains the
spatial relationship among elements in a picture using the
MBRs and allows for spatial reasoning on those elements

[12] [17] [18]. It is assumed that using standard
techniques in image processing, the picture elements have
been recognized. In [1] Apostol Natsev et. al. have
discussed different methods of identifying the regions and
objects in an image and also have presented image
similarity model.
The two dimensional relations between any two
picture elements can be classified into nine categories.
For example, starting with one of the picture elements to
be a reference, the nine categories can be enumerated as
“to the north of reference,” “to the north-west of
reference,” “to the west of reference,” “to the south-west
of reference,” “to the south of reference,” “to the southeast of reference,” “to the east of reference,” “to the
north-east of reference,” and “at the same location as
reference.”
For brevity, the verbal description is mapped onto
integers 1, 2, 3, 4, 5, 6, 7, 8, and 9 respectively, as shown
in the Figure 1. 9 is taken to be the reference point.
2
3
4

1
9
5

Let str ( S U R ) be the set of all 1D strings consisting
of elements from the set SUR satisfying the above
constraint, then a 2D image is a subset of str(SUR) ×
str(SUR). A 2D string is an ordered pair
x

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

n −1

Sn ,

y

where

Si ∈ S
x

y

ri , ri ∈ R, and
( p (1), p (2),.... p (n)) is a permutation of
(1,2,....., n).
The spatial relations among picture elements along xaxis are embedded in the first string while those along the
y-axis are embedded in the second string.
The development of a 2D string is explained with the
help of a symbolic picture presented in Figure 2.
D
E

Figure -1: Integer mapping of spatial relations

The operators in Table 1 are used to describe the
relationship between picture elements in two strings. The
first string describes the relationship between the
elements as seen in the projection on the horizontal axis
while the second string describes the relationship in the
projection on vertical axis.
Let S = {S1 , S 2 ,....., S n } be a set of n picture
elements in an image and R = {:, =, <} be the set of global,
infix relational operators as described in Table-1. Then, a
1D string is a string of symbols from the set
str ( S U R ) such that each element of R is enclosed
between two elements of S.

x

S p (1) r 1 S p ( 2 ) r y 2 S p ( 3).... S p ( n −1) r y n −1 S p ( n ) )

8
7
6

The basic idea in a 2D string is to project the picture
elements on the horizontal and vertical axis. The axisoriented symbolic projections are used to determine the
spatial relationship among elements. 2D strings employ
three operators to describe the spatial relationships among
the picture elements.
For two symbolic picture elements Si and Sj the three
operators are described in Table-1.
S i is to the left of S j (horizontal axis), or
Si < S j
S i is above S j (vertical axis)
S i = S j Projection of S i coincides with the
projection of S j
S i is in the same MBR as S j
Si : S j
Table -1: Relational operators used in 2D strings

x

( S1 r1 S 2 r2 S 3 ...S n −1 r

A

C
BF

Figure-2: Picture with five symbolic picture
elements
The picture in Figure-2 is described by a 2D string
as:
(A = E < B: F < C = D, A = B: F < E = C < D)
A 2D string is used to construct triples that contain
the spatial relationship between picture elements as
described by the integer mapping of MBRS in Figure- 1.
The triples are made up of two picture elements in
symbolic form and an integer to show the spatial
relationship between the two elements. Thus, the
relationship rij of a symbol S i to a reference symbol S j
is denoted by a triple ( S i , S j , rij ). As an example, the
triple to describe the relation between A and B in Figure 2
is specified as (A, B, 3) which implies that “A is to the
west of B.”
Let a picture be partitioned into N intervals along the
x-axis and M intervals along the y-axis. Mathematically, a
picture f is a mapping f : NxM → 2 S where S is the set
of all picture elements in the image. The image in Figure
2 is described by
f (1, 1) = {A},
f (2, 1) = {B, F},
f (1, 2) = {E},
f (3, 2) = {C},

f (3, 3) = {D}.
The set S of symbolic picture elements in Figure 2 is
given by:

S = {A, B, C, D, E, F}
Each picture in a database can be described in terms
of triples. The picture elements are used to construct
triples that show the relationship between every pair of
elements.
The set of triples in Figure 2 is given by:
T = {(A, B, 3), (A, C, 4), (A, D, 4), (A, E, 5), (A, F,
3), (B, C, 4), (B, D, 4), (B, E, 6),
(B, F, 9), (C, D, 5), (C, E, 7), (C, F, 8),
(D, E, 8), (D, F, 8), (E, F, 2)}
If there are several pictures in a scene, say f k , for k =
1, 2 . . . n and Tk is the set of triples corresponding to f k ,
then the set of all triples is denoted by T = U n Tk . The
k =1
set of symbols in all the pictures is given by:
S = {S i : ( S i ,* ,* ) ∈ T Or ( *, Si,* ) ∈ T }
D
A
q1

E

D
A

A

q2

C
q3

Figure-3: Queries on the database
Queries as shown in Figure-3, from the pictures in
Figure-2 can be formulated in terms of 2D strings and
triples as:
q1 = (A < D, A < D) q1 = {(A, D, 4)}
q2 = (E < A, A < E) q2 = {(A, E, 6)}
q3 = (A < C = D, A = C < D)
q3 = {(A, C, 3), (A, D, 4), (C, D, 5)}
The pattern matching is an intricate problem. A
perfect hash function can be usefully employed to store
and answer these queries. Taking clue from hash
functions in programming languages [9] Chang and Lee
advanced the idea of using a perfect hash function to
resolve the queries in 2D strings using a triple
representation [18]. The picture elements in an entire
image database are hashed such that there is a unique
address corresponding to each triple. The address leads to
a pointer to a linked list of all pictures that contain the
triple. This reduces the query to a simple address
calculation for the specified triples, and an intersection of
retrieved pictures if necessary.

3. The Modified 2D string approach
The two dimensional relations between any two
picture elements can be classified into nine categories.
For example, starting with one of the picture elements to
be a reference, the nine categories can be enumerated as:

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

1. To the north of reference
2. To the north-west of reference
3. To the west of reference
4. To the south-west of reference
5. To the south of reference
6. To the south-east of reference
7. To the east of reference
8. To the north-east of reference
9. Reference point
The verbal description can be mapped onto integers
0, 1, 2, 3, 4, 5, 6, 7, 8 as shown in the Figure-4.
2
3
4

1
0 Rp
5

8
7
6

Figure-4
0 is taken to be the Reference Point. In previous
approaches 9 was used for the overlapping. A 0 value
gives more clear vision of locality and overlapping
instead of 9 so we have modified it to 0.

4. 3D Hash Function for Image Indexing and
Retrieval
In 3D hash function each new picture element is
assigned an id in sequence to calculate a unique hash key
as it was calculated in the previous algorithms.
Previously given hash function
H= rij + a ( S i ) +a ( S j )
We have introduced 3D hash function, which is based
upon three independent hash functions for each
component of triple. We will consider each component as
a direction.
For a given triple (Si, Sj, rij):
S i Will give the row number first direction. (x-axis)
S j Will give the Column number second direction.
(y-axis)
rij Will give the third direction. (z-axis)
In proposed 3D Hash Function, when it would be
required to add an image then Si will give the row number
and Sj will tell the related column number. Place of image
will be obtained by knowing the value of spatial
relationship where pointer to the image will reside.
Position where pointer to the image have to reside can
easily be determined by using Si id, Sj id and value of
spatial relationship(rij) between Si and Sj.
Example: Consider an image having two elements A
and B with spatial relationship rAB. Let A has id 2, B has
id 4.
(A, B, rAB)
2

4 1

S4 =4
r24 =1

In example the triple shows the values.
Let A is S2 and B is S4. Then triple will be (S2, S4, 1)
S2 =2
S4 =5
r24 =1
S2 = Gives the row number i.e. 2
S4 = Gives the column number i.e.4
r24 = Gives the spatial relationship value from triple
i.e. 1
So the pointer to the image will reside at row 2,
column 4, and position 1.

0

Si

Pointer to
Linked List
of Images

2
3

4
.

1
0

1

2

3

4

rij

Sj
Linked list concept will be implemented which will
hold the addresses of all the images containing a triple. If
an image is to be inserted containing a triple already
exists then that image address will be inserted in the
linked list.

4.1 Retrieval of Images
Image retrieval is very easy with 3D-Hash function
because in our 3D-Hash function elements of the triples
which have the same spatial relationship values are linked
with each other with pointers which hold the address of
picture elements, so by passing a query will easily extract
all images whom addresses are in the linked list.
( S i , S j , rij )
Retrieval of images in our retrieval method is very
fast with a time complexity O(1).
Example: Consider the above discussed example. Now
for retrieval of images having the given relationship
between two image elements. An image having two
elements A and B with spatial relationship rAB. Let A has
id 2, B has id 4.

(A, B, rAB)
2

4

1

Let A is S2 and B is S4. Then triple will be (S2, S4, 1)
S2 =2

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

Pointer **

0
0

1

2

3

4

5

.

.

.

3

2
0

3
1

1

Si

8

2

0

2
1

4

rij

6

5

7

.

Sj

** to images
containing S2 (A)
and S4 (B) with
spatial relation r24
i.e.1

.

5. Complexity of a 3D-Hash Function for Fast
Indexing and Image Retrieval
Previously measured complexities were as fellows:
In algorithm1 (Basic Algorithm) is based on depthfirst-search with back tracking and the complexity of the
algorithm is O(m) n . If the algorithm finds the perfect
hash table in address space of size m + m ′ the number of
values search is given by:
m′
n
∑ (m + i)
i=0
In such case the complexity of the algorithm can be
described by O ((m + m ′) n +1 ) [8].
In algorithm2 (Heuristic Algorithm) prunes the
search space to reduce the number of values examined by
algorithm1. It classifies the triple into two categories
isoiconic and non-isoiconic. Algorithm2 requires more
backtracking than Algorithm1. In this case the complexity
of the algorithm is given by:
(m + .m ′)!(m + m ′) n / 2 +1
O(
) [8].
m ′!
Algorithm3 (Heuristic Algorithm with Negative
Associated Values) allows the negative values associated
with triple elements whereas Algorithm1 and Algorithm2
allows for non-negative values for the picture objects.
Due to this reason some of the smaller addresses in the

perfect hash table may be left unused. Algorithm3 aimed
to rectify this problem by allowing negative associated
values. The negative values may be utilizing the unused
addresses yielding the perfect hash table. The complexity
of the minimal perfect hash table computation is
O(m! (m − 4) n / 2 ) [8].
Where as our 3D-Hash function is very efficient
function and it does not require a repetitive hash-key
calculations at the time of insertion of a new image. Its
insertion and retrieval complexity is Ο(1) which is better
than the others techniques explained earlier.
The time complexity for insertion is:
T = time for x-direction + time for y-direction +
time for z-direction
T = O(1) + O(1) + O(1)
T = 3 O(1)
T = O(1)
And the same is the case for retrieval of an image.

[3]
[4]
[5]

[6]

[7]

[8]

[9]

Conclusions
In this paper, we have presented 3D-Hash function to
improve the speed of the algorithm to calculate associated
values for symbolic picture elements in an image
database. Actually no value needs any calculation we just
use 3D-Hash function to insert a triple in the image
database.
This 3D-Hash function is employed to resolve a
retrieval query in an image database system. Initially
triple reference point was considered to be 9, which was
not so descriptive to indicate an overlap. We have
proposed to change the “Reference Point as 0” to give
the clear indication of the overlapping.
The 3D-Hash function is based on dynamism in the
sense of insertion of images. In earlier work all insertions
were made on repetitive function calculations which was
the reason the complexity of insertion was very much
high. Where as our purposed 3D-Hash functions reduces
the complexity of insertion of image upto a fair level
because the complexity of 3D-Hash function is Ο(1) . The
ID values of objects in a picture are assigned sequentially
so no calculation here as well, just an increment in last
assigned value.

References
[1]

[2]

Apostol Natsev, Rajeev Rastogi, and Kyuseok Shim,
“WALRUS: A Similarity Retrieval Algorithm for Image
Databases”, IEEE Transactions on Knowledge and Data
Engineering, Vol. 16, No. 3, March 2004.
Qing-Long Zhang and Stephen s.-t. Yau. “A General
Approach to Indexing and Retrieval of Images in Image
Databases”, Communications in Information and Systems
International Press Vol. 3, no. 1, 61-74, June 2003.

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

[10]
[11]

[12]

[13]

[14]

[15]
[16]
[17]

[18]

Peter L. Stanchev, “Content-Based Image Retrieval
Systems”, CompSysTech’2001 – Bulgarian Computer
Science Conference – 21-22.06.2001, Sofia, Bulgaria.
A. Armstrong And J. Jiung, “An Efficient Image Indexing
Algorithm In JPEG Compressed Domain”, 0-7803-66220/01, 2001 EEE.
Dimitris Papadias, Nikos Mamoulis and Vasilis Delis,
“Approximate Spatio-Temporal Retrieval”, ACM
Transactions on Information Systems, Vol. 19, No.1, 5396, January 2001.
Essam a. El-kwae and Mansur r. Kabuka, “Efficient
Content-Based Indexing of Large Image Databases”,
ACM Transactions on Information Systems, Vol. 18,
No.2, 171-210, April 2000.
Venkat n. Gudivada and Vijay v. Raghavan, “Design and
Evaluation of Algorithms for Image Retrieval by Spatial
Similarity”, ACM TransactIons on Information Systems,
Vol 13. No 2, Aprd 1995
Chaman L. Sabharwal Sanjiv K. Bhatia, “Perfect Hash
Table Algorithm for image databases using negative
associated values Pattern recognition”, 27(3): 365376,1994.
Suh-Yin Lee and Fang-Jung Hsu. Picture Algebra for
Spatial Reasoning of Iconic Images Represented in 2D CString. Pattern Recognition Letters, 12:425–435, July
1991.
Suh-Yin Lee and Fan-Jung Hsu. 2D C-String: A New
Spatial Knowledge Representation for Image Database
Systems. Pattern Recognition, 23(10):1077–1087, 1990.
Timothy Arndt, “A Survey of Recent Research in Image
Database Management”, In Proceedings of the IEEE
Workshop on Visual Languages, pages 92–97, October
1990.
M. W. Freeston “A Well-Behaved File Structure for the
Storage of Spatial Objects. In Design and Implementation
of Large Spatial Databases”, Proceedings of the First
Symposium SSD ’89, pages 287–300, Santa Barbara, CA,
July 1989. Springer-Verlag. (Lecture Notes in Computer
Science # 409).
Erland Jungert. Extended Symbolic Projections As A
Knowledge Structure For Spatial Reasoning. In Fourth
BPRA Conference on Pattern Recognition, pages 343–
351, Cambridge, MA, March 1988. Springer-Verlag.
S. K. Chang, C. W. Yan, Donald C. Dimitro_, and
Timothy Arndt. “An Intelligent Image Database System”,
IEEE Transactions on Software Engineering, 14(5):681–
688, May 1988.
S. Sitharama Iyengar and Rangasami L. Kashyap.
“Introduction: Image Databases”, IEEE Transactions on
Software Engineering, 14(5):608–609, May 1988.
S. K. Chang, Q. Y. Shi, and C. W. Yan. Iconic Indexing
of 2D Strings. IEEE Transactions on Pattern Analysis and
Machine Intelligence, pami-9(3):413–428, 1987.
S. K. Chang and S. H. Liu. Picture Indexing and
Abstraction Techniques for Pictorial Databases. IEEE
Transactions on Pattern Analysis and Machine
Intelligence, PAMI-6:475–484, July 1984.
C. R. Cook and R. Oldehoeft. A Letter-Oriented Minimal
Perfect Hashing Function. ACM SIGPLAN Notices,
17:18–27, 1982.

