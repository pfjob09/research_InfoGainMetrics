INTERPOLATING MOVEMENTS USING CAGD TOOLS
Leonardo Traversoni
Universidad Autonoma Metropolitana (Iztapalapa)
Departamento de Ingenieria de Procesos e Hidraulica
Mexico DF
ltd@xanum.uam.mx
Abstract
The idea is to perform interpolations with quaternions
or quaternionic functions each one of whom represents
a movement. We present several antecedents of different
methods to perform interpolations with quaternions and
other antecedents of the its use considering the fact that they
represent movements for example to define surfaces in different ways. The paper is however focused on the quaternionic version of Sibson interpolant on the surface of the
sphere where the scattered data are moving vortices of some
fluid.

1 Our data set
First of all we have to point out exactly what we are talking about, it’s about movement itself, it is not the path of an
object, it is not the curve that represents the trajectory, it is
the movement itself with all its properties, velocity, acceleration momentum, etc.
To avoid such a confusion we choose something that is
mostly movement and nothing more, vorticity and vortices.
So our data set consists in point measurements of the
vorticity on the surface of a sphere (the Earth for example)
Those ”points” are not fixed but they are moving following
some known or unknown law. Our goal consists in beeing
able to determine at any moment and any place the characteristics of the vorticity in the surface of the sphere.

2 Choosing the interpolation method
We suppose that we are dealing with some kind of local
phenomena and not with a global one, this is a simplification but is true for practical purposes unless the phenomena
is extremely big. The interpolation method must be then
flexible and preferabily meshless because the whole set of
data is moving.

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

For that reasons we prefer Sibson’s interpolant on the
surface of a sphere, actually we can define it in terms of a
dynamic environment as we will show.
Sibson’s interpolant in the surface of a sphere
1) Given a set of scattered data in the surface of a sphere
our goals are:
1.1) Tessellate, with a Voronoi tessellation or its duals
(p.ex. Delaunay) the surface of the sphere taking account of
the data points.
1.2) Apply Natural Neighbor (Sibson’s) interpolation on
the surface of the sphere
There is a long history of attempts to do this begining by
Cline and Renka in 1984 none of them using natural neighbors but splines or other things.
The main difference of the present work is to try to do it
with 3D considerations
To do that we consider the data as a 3D one so for each
point we have 4 coordinates, the value of the function at the
point, and the spatial coordinates x, y, z of the point.
We apply a modification for 3D of Watson’s algorithm
to the set and of course we have our first problem: all the
points belong to the same sphere!
To avoid such problem we add to the original set the center of the sphere, in other words, we had a set of points
V = {v1 , ....., vn } and now we have a new set V ∗ =
{v1 , ......, vn , o}
Done this we are able to begin with the algorithm:
1) We consider the sphere determined by v1 , v2 , v3 ,
2) We pick the fourth point v4 it can be either:
2.1) Inside the sphere then we destroy it and we substitute it by 3 new: v1 , v2 , v4 , 0, v1 , v3 , v4 , o, v2 , v3 , v4 , o,
in each case we see if v3 , v2 and v1 respectively are not
into the corresponding sphere, if they are, such sphere is
not added to the list if not it is.
2.2) Outside the sphere and we do exactly the same
3) The general algorithm consists in :
3.1) Adding the k th point to the set and looking if it is
inside of some of the existing spheres. There are two cases:

3.1.1) It is inside of some of them, so we do the list of
the spheres and of the generators of them. Afterwards we
do all the possible spheres wit the point vk , o, and two of
the list and we check such sphere against all the other non
considered points in the list. We keep it if none of such
points is inside it.
3.1.2) It is outside of all of them so we build the spheres
with the point vk , o, and two taken from the convex hull of
the existing set of spheres. We check such spheres with all
the points generating all known spheres.
Due to the specific form of our problem, we obviously do
not need to check if the new point is inside or outside each
of the existing spheres. Actually a careful study shows that
the number of spheres having to be tested is bounded when
introducing a new point so the total amount of compilation
is increasing as O(n) which is very efficient.
There are many variants of the method, mostly presented
(Traversoni[1]) for the plane.

of this zones has as natural neighbors the generators of the
spheres to whose interior it belongs.
This means that we have now a new tessellation of the
sphere, the set of locus of points S who are simultaneously natural neighbors to some subset V ∗ ∈ V of the original set of points.

3.1

Analitically

We show an example with four points A, B, C, D how
does it looks anallitically the function
The vertices of the simplices (in our case tetrahedra)
are called the generators of the spheres because the center and radius of the spheres are determined by such points.
Let p1 , p2 , p3 , p4 be the points of coordinates p1 (x1 , y1 , z1 ),
p2 (x2 , y2 , z2 ), p3 (x3 , y3 , z3 ) and p4 (x4 , y4 , z4 ) then the
general equation
is given by:


3

Sibson’s interpolant

Based on natural neighbors we can set an interpolant
usually known as Sibson interpolant as follows:
Once we have the sphere tessellated with Delaunay triangles, covering spheres or Voronoi tiles, each new point
we consider will fall into one and only one Voronoi tile (or
in its frontiers), one and only one Delaunay triangle (or its
frontiers) and one or several covering spheres as they overlapp.
The natural neighbors of such point will be the generators of the spheres where it falls.
Sibson’s interpolation will be performed at each new
point using its natural neighbors. The weight of each neighbor is calculated as the ratio between the area of the intersection of the tile of the new point and the tile of the neighbor and the area of the tile of the new point. We are considering that we draw the tile of the new point superimposed
to the tessellation as it is before it is introduced.
Calculate such areas in the case of the sphere can be done
directly but we think it is easier and we prefer to do it with
an equivalent ratio obtained with the volumes obtained projecting from the center of the main sphere.
The interpolant obtained has a lot of very good properties
between them that it is very smooth (C 2 continuity).
It must be noted that all this properties are achieved very
naturally, doing only “linear” effort. I mean by “linear” that
there are no points added, we are just using the original data
points and the interpolant is used directly as defined.
One very important thing is the support of this function,
given the set of points we have that every point of its convex
hull is covered with at least one sphere. So there are zones
covered by more than one sphere. Every point inside one

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

x2 + y 2 + z 2
 x21 + y12 + z12
 2
 x2 + y22 + z22
 2
x3 + y32 + z32
x24 + y42 + z42

x
x1
x2
x3
x4

y
y1
y2
y3
y4

z
z1
z2
z3
z4


1
1

1

1
1

the center is given by:


x21 + y12 + z12
1  x2 + y22 + z22
xc =  22
4 x3 + y32 + z32
x24 + y42 + z42
 2
x1 + y12 + z12
1  x22 + y22 + z22
yc =  2
4 x3 + y32 + z32
x24 + y42 + z42
 2
x1 + y12 + z12
1  x2 + y22 + z22
zc =  22
4 x3 + y32 + z32
x24 + y42 + z42

y1
y2
y3
y4

z1
z2
z3
z4

x1
x2
x3
x4

z1
z2
z3
z4

x1
x2
x3
x4

y1
y2
y3
y4


1
1

1
1

1
1

1
1

1
1

1
1

We also have that:


x21 + y12 + z12
1  x2 + y22 + z22
γ =  22
4 x3 + y32 + z32
x24 + y42 + z42

x1
x2
x3
x4

y1
y2
y3
y4


z1
z2 

z3
z4

The radius is:
r=

γ 2 − (x2c + yc2 + zc2 )

Now to calculate the Sibson’s interpolant we have that
all the points involved, the vertices of the Voronoi tiles, are
centers of some sphere or if we consider them in the surface
of the sphere, of some circle. Our first task is to find the
center of such circles, they are found in the intersection of

the line between the center of the main sphere and the center
of any of the covering spheres of the set.
Even when the result is a very complicated expression
we can see before calculating it that it becomes something
rational of 2nd degree.
To calculate the areas of the intersections of the Voronoi
tiles we divide it in triangles, to calculate the area of each
triangle we do it with vectorial products between two sides
with a common vertex, in this case X the point where the
interpolant is to be calculated. In general then one factor
(vector) is then
(Xcc − x, Ycc − y, Zcc − z) Where Xcc , Ycc and Zcc
are rational functions of 2nd degree, the areas are then
of fourth degree, as they are functions also of the covering
circles they do not anihilate but in the circumferences but
never simultaneously but in the intersections, that is the data
points, and obviously the same happens with the derivatives.

3.2

Implementation

We have as seen above tessellated the sphere in a set of
circles we are going to call “covering circles” already defined in the plane by Traversoni[1].
Starting from there, there are two ways of doing the
things now. The first one is to work with distances and areas
on the surface of the sphere and repeat there the definitions
of Sibson in the plane. We can show that the function calculated in such a way is C 0 and C 1 continuous except in the
data points.
The result will be in general a rational cuartic in x, y, z.
The surfaces that must be calculated are however proportional to the volumes of the central pyramids that can be
formed projecting the centers of the covering circles from
the center of the sphere. The second method of calculation
is then to use the ratios between this volumes to calculate
the interpolant, obtaining the same results.

4

Consists in a real part Q0 = Re Q ∈ H and the dual part
Q = DuQ ∈ H
The dual quaternion:
2v0 + v (v0 ∈ R, v ∈ R3 )
corresponds to the traslation with the displacement vector :
1
v v0 = 0
v0
The quaternion:
D = d0 + d ∈ H D = 0
describes a rotation around the origin
A spatial displacement is a composition of the traslation
and the rotation, it corresponds to the dual quaternion:
Q = Q0 + Q = (2v0 + v) ∗ (d0 + d)
This dual quaternion satisfies Pl¨ucker condition:
Du(Q ∗ Q) = q 0 q + q 0 · q = 0
Resulting from this, a motion may be considered a curve
on the quadric hypersurface of the real projective 7-space.
Definition
Consider the polynomial:
n

Some basics on dual quatrernions

The adjunction of a dual unit with 2 = 0 to the
quaternions yields the nonconmutative ring H[ ] of the dual
quaternions:
A dual quaternion:

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

bni (t)Bi t ∈ R

Q(t) =
i=0

where
bni (t) =

Quaternionic interpolation

Quaternionic interpolation is performed using B Splines
as follows:
His idea is to use dual quaternion curves to perform the
interpolation of positions (point and orientation) of moving
objects.
Trajectories are then rational Bezier curves, and CAGD
methods may be used.

4.1

Q = Q0 + Q = (q 0 + q 0 ) + (q + q )

n
i

ti (1 − t)n−i

are the Bernstein polynomials and the coefficients Bi ∈
H
This polynomial satisfies also Pl¨ucker relation.
Let m + 1 spatial displacements:
Pi = (2 + esi ) ∗ (ri,0 + ri )
Where the first parentheses is the Trans(Pi ) and the second the
Rot(Pi ) and
si , ri ∈ R3 ; ri,0 ∈ R with parameters
ti ∈ R
The displacement Pi is assumed to describe the position
of the moving space
Eˆ3 with respect to the fixed space E 3 at the point on
time t

This interpolation fullfills the following requirements:
1)The interpolating motion is found by solving a set of
linear equations.
2) The result of the interpolation doesn’t depend on the
choice of the orientations of the fixed and the moving space.
3) The interpolation problem may be considered in a mechanical or in a geometrical point of view.

4.2

The interpolation of the rotational
part

The interpolation of the Q-motion has the form:
k

bkj (t)Cj

Qrot =
j=0

The coefficients Cj are the unknowns and it has to satisfy
the interpolation conditions:
Qrot (ti ) = λi (ri,0 + ri ) (i = 0, ...., m)

4.3

Algorithm 1

1) Normalize the rotational parts corresponding to the
above equation
2) Compute the m + 1 coefficients Cj ∈ H of the rotational motion by solving the system of linear equations:

The rotational:
3

(i)

d3j

Qrot = 2 +
j=0

t − ti
ti+1 − ti

(i)

Cj

As we can see this method still uses too much the idea of
trajectories and attaches to the idea of building the
trajectory.

5

A different idea

Let now be a set of ”scattered” unit quaternions on the
unit ball let them be {Q1 , Q2 , ....., Qn }
We want to use Sibsons interpolant with them so we
think on their axes pointing in severalscattered directions
then we will try to find how to translate to such a construction the ”natural neighbor” concept. So the set of
{A1 , A2 , ....., An } axes will meet the unit ball in the set of
points {P1 , P2 , ..., Pn }
So now our problem is transformed in a set of scattered
data on the unit sphere that we know how to deal with
Then we can perform Sibsons interpolation using as
weights the scalar parts of the quaternions representing the
rotation or better said the cosine of the half of the angle of
rotation.
The quaternion may be represented as:
α
α
α
α
, x sin , y sin , z sin }
2
2
2
2
so x, y, z is the direction of the axis and α the angle of
rotation.
Now if we have for example the axis moving without
a known rule we can interpolate them using for example
Juettler algorithm while we calculate at each step the new
natural neighbors relations and
sibson interpolant.
{cos

k

(0)

bkj (ti )Cj = Ri

i = 0, ..., m

j=0

3) Compute the m + 1 coefficients pj ∈ R3 of the
traslational motion solving the set of linear equations:
l

blj (ti )pj = si i = 0, ..., m
j=0

4) Multiply the traslational and the rotational part.

4.4

Algorithm 2

1) Estimate the velocities vi of the origin and the angular
velocities wi of the moving space at the given positions Pi
2) Construct the rotational cubic Q-motion with the algorithm 1
3) Construct the traslational cubic Q-motion
4) Define piecewise the motion as the composition of
both
The traslational spline Q-motion is given by:
(i)

d3j
j=0

Vorticity

The Navier Stokes equations for incompressible viscous
flow are:
1
Du
= − P+
Dt
R

2

u in D ·u = 0 in Du = 0 on ∂D

Taking ξ as:
ξ=

×v

The vorticity we have the vorticity transport equation:

3

Qtras = 2 +

6

t − ti
ti+1 − ti

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

(i)

pj

Dξ
= (ξ ·
Dt

)u +

1
R

2

ξ

Here u is the velocity, P the pressure, R the Reynolds
number.
As · u = 0 and ξ = × u
there exists a vector function ψ(x) such that
u = × ψ then
2

Du = (−div u, rot u)
As we are working with divergence free vectors and consequently
Du = (0, rotu)

ψ = −ξ

Remembering that

In 3D ψ is the velocity potencial in 2D is the stream function.
The solution to the avove differential equation is:
ψ(x, t) =

rot u = ∇ × u
we have that
u = T Du and with Du = rot u = ξ it follows

L(x − z)ξ(z)dz

where:

u = Tξ
−1
2π logx
1 1
4π x

x ∈ R2
x ∈ R3

since
u=

×ψ

This is an expression to describe the velocity u explicitely by the vorticity ξ. If the boundary values of u
are not zero but some known quantity then we have this
additional known summand F(boundary values of u). The
operators T and F are defined as:

we have that:

(TG u)(x) = −

e(x − y)u(y)dGy
G

u(x, t) =

K(x − z)ξ(z)dz
(Fγ u)(x) =

where K is:

e(x − y)α(y)u(y)dγy
γ

K(x) =

1 (−x2 , x1 )
x ∈ R2
2π
x2



0
1 
K(x) =
−x
3
4πx3
x2

x3
0
−x1


−x2
x1  x ∈ R3
0

The kernel K is singular for both dimensions. This idea
leads to the so called vorticity equations. In fact the transformation produces a non-linear system of differential equations for the two unknown vector functions u and ξ
Another idea is, applying ideas of quaternionic and Clifford analysis to find a transformation into one non-linear
equation only for the vorticity ξ. For this reason we use the
higher-dimensional version of the Borel-Pompeiu formula
as seen in Guerlebeck[2]:
T Du(x) = u(x) − F u(x)
where T is the T -operator (Teodorescu transform), D
the Dirac-operator and F the Cauchy integral. The Cauchy
integral depends only on the boundary values of u.
That means that if u = 0 on the boundary then this part
can be deleted of the formula. Moreover, Du means for a
quaternion valued function (0, u) (u is the vector of velocity)

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

α is the outer normal to γ at the point y and e(x) the fundamental solution (generalized Cauchy kernel) of the Diracoperator.
In this way substituting in the above equations we obtain
a nonlinear equation in ξ instead a system in u and ξ. To
find representation formulas and numerical methods for ξ is
one of the goals of the project. Because we have to evaluate
only the vorticity (and not in addition the velocity, too) a
better efficiency of this approach is expected.

7

Vortex and rotations

Now, a vortex is basically rotation and that rotation is
expressed as a quaternion in many ways. We have seen an
analytic expression where vorticity is the only variable left
in Navier Stokes but that is a quaternionic variable an therefore represents a rotation.
The question is what is that rotation?
Remember that:
ξ=

×v

So if both are quaternions this is a rotation or a displacement and can be expressed as double quaternion where:
ξ = GH

that is formed by two unit quaternions G and H such
that:
ξ = G = DQ v = H = DQ
So ξ may be decomposed, or can either represent, in a
”real” vortex and a stream, equivalent to the rotation and
the displacement.
This can be used, having as data a field of vortices, to
interpolate, using global interpolation, between this kind of
quaternions and the result in a given point will be the same
than using Navier Stokes.

8 References
[1]Traversoni Leonardo, Quaternion Wavelet Problems.
Proceedings of the VIII Texas International Symposium on
Approximation Theory.2002. IVS, IEEE, July 2002.
[2]Guerlebeck and Sproessig Quaternion and Clifford
Calculus for Phycisists and Engineers. J Wiley 1998
[3]Delanghe R Brackx F Sommen F, Clifford Analysis,
Pitman advanced publishing program. 1982.
[4]Ge QJ, Varsheny A, Menon JP,Chang, Ch F, Double Quaternions for motion interpolation,Proceedings of the
1998 ASME Design Engineering technical conference
.

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

