Fifth International Conference on Computer Graphics, Imaging and Visualization
Visualisation

Skeleton Based 3D Model Morphing Using Barycentric Map
Kosuke Kaneko, Yoshihiro Okada
Graduate School of Information Science and Electrical Engineering, Kyushu University
744 Motooka, Nishi-ku, Fukuoka, 819-0395 JAPAN
{k-kaneko, okada}@i.kyushu-u.ac.jp
vertex number of a 3D model is very high. So, we have
to develop any system that automatically determines the
vertex correspondence. However, this is not easy because
the vertex numbers of two models are usually different
and moreover their geometrical topologies are different.
Self-intersection is often caused when vertices of a
source model are not accurately corresponding with
those of a target model. In this paper, we propose an
algorithm for determining the vertex correspondence
automatically and accurately by using skeletons of a
source and a target model. Using the skeletons, we can
determine vertex correspondences between two
corresponding bones of a source and a target model, and
can calculate desirable trajectory for each vertex pair
even if geometrical topologies of the two models are
different. Figure 1 shows one result of our algorithm.
The upper figures are the sequence of metamorphosing a
horse model into a human model. The lower figures are
the translation sequence about bones of its skeleton.

Abstract

This paper proposes a skeleton based 3D model
morphing system using Barycentric map. Although
there have been many 3D model morphing systems,
even it is still laborious to perform the 3D model
morphing because it needs many manual operations.
The most important task for the morphing is the vertex
correspondence between two base models. When the
vertex numbers and geometric topologies of two models
are different, its 3D model morphing is difficult. For
overcoming this problem, the proposed system
automatically determines the vertex correspondence
based on skeletons of two models. The overview of
proposed processes is as follows: first of all, the user
segments each of two models manually. Then the system
generates bones of the each model based on the above
segmentation. Next, the system defines the hierarchy of
generated bones to generate the skeleton of the each
model and then determines the correspondence between
two bones of the two models based on the hierarchical
structures of their skeletons. Finally, the system defines
vertex correspondences between the two models using
Barycentric mapping. Then the 3D model morphing
between the two models will become possible. These
processes except the first segmentation step are
automatic.
Keywords--Polygonal
model,
Morphing,
Segmentation, Skeleton, Computer graphics

Figure 1.Upper: Morphing sequence of transforming a
horse into a human. Lower: Translation sequence about
bones of its skeleton.

1. Introduction

The algorithm of our system consists of the following
steps:
・ Segmentation of a source and a target model.
・ Extraction of bones from the segmented model to
generate skeletons of the two models.
・ Determining bone correspondences between the
two skeletons.
・ Determining vertex correspondences of every
bone correspondence pair between the skeletons.
・ Calculation of translation trajectory of every
vertex correspondence pair between the models.

Recently 3D Computer Graphics has become very
important and commonly used in various fields. One of
the 3D Computer Graphics effects is 3D model morphing.
3D model morphing is a technique of metamorphosing a
3D model. Especially 3D model morphing is popular in
facial animation. Usually 3D model morphing means
transformation of one 3D model called a source model
into other 3D model called a target model by translating
vertices of the source model to vertices of the target
model. To do so, we have to determine the vertex
correspondence between source and target models.
Manual operation is impractical for this because the

978-0-7695-3359-9/08 $25.00 © 2008 IEEE
DOI 10.1109/CGIV.2008.57

132

In the segmentation step, we have to segment each of a
source and a target model manually but our system
performs the other steps automatically.
This paper is consisting of the followings. First of all,
we present related work in Section 2. In Section 3, we
explain our morphing algorithm. Then, Section 4 shows
experimental results. Finally we conclude the paper in
Section 5.

3. Morphing algorithm
This section explains the algorithm of our morphing
system. First of all, we explain 3D model segmentation
in Subsection 3.1. Subsection 3.2 explains the algorithm
of generating skeletons of models. We explain bone
correspondence and vertex correspondence in Subsection
3.3 and in Subsection 3.4, respectively. Finally,
Subsection 3.5 explains the calculation of vertex
trajectory during metamorphosing a 3D model.

2. Related work
The algorithm of our system consists of three main
processes. First is the segmentation of a source and target
3D model. Second is to generate skeletons of the two
models. Third is to determine vertex correspondences
and morphing between the two models.
As for researches on the segmentation, there are many
previous works. Katz, et al, proposed the segmentation
algorithm which extracts feature points by using Multidimension scaling (MDS) and segments a 3D model
according to the feature points [8]. As another research,
there is a segmentation algorithm based on vector field
using Voronoi and Delaunay diagram [10].
As one of the researches on the 3D model skeleton
generation, Baran, et al, proposed the algorithm to
generate skeleton of a 3D model approximating the
medial surface [4].
In research field of the morphing, many researchers
study the algorithm for mainly effective vertex
correspondence and desirable trajectory which does not
occur self-intersection. Lee, et al, proposed the algorithm
of determining vertex correspondence interactively [1].
Kraevoy, et al, reports another method of determining
vertex correspondence by using cross-parameterization
method [11]. There are some methods of morphing using
surface patches. Our algorithm also uses it. Zockler, et al,
proposed morphing system of 3D model morphing which
generates surface patches interactively for accurate
vertex correspondences [7]. As another method of
morphing, there is an algorithm using implicit function.
This method has an advantage that it does not cause selfintersection. For example, Turk, el at, proposed the
algorithm of 3D model morphing using implicit function
[3]. Jin, et al, proposed the algorithm which
approximates 3D model surface represented by implicit
function using some blobs and metamorphoses the model
[12]. The morphing using Point-graphics [6] is one of
the methods without causing self-intersection because
the proposed method does not need polygonal surfaces.
Xiao, et al, proposed 3D model morphing system using
Point-graphics [2]. Bao, et al, proposed the algorithm of
Point-graphics based morphing animation [13]. For
accurate vertex correspondence, there are some methods
of morphing which segment 3D models. Shlafman, et al,
proposed the morphing algorithm of segmenting models
using patches [9]. Also, Kaneko, et al, proposed the
system of 3D model morphing which segments and
decomposes models for accurate vertex correspondence
and metamorphoses a 3D model [5].

3.1. Model segmentation
In this subsection, we explain the method of 3D model
segmentation of our proposed system. The system needs
the segmentation of a source and a target model into
some parts for extracting the bone from them. There are
many algorithms which segment a 3D model
automatically [8][10]. Our system provides functionality
to segment a 3D model by manual operation. Figure 2
shows a snapshot of the segmentation operation. The
system separates polygons inside a rectangular solid
from a model. The rectangular solid is colored in yellow
and separated polygons are colored in pink. The other
separated polygons are different colors. The rectangular
solid is determined by the user’s mouse operation. Figure
3 is the result of segmentation using our system. In the
following subsections, we explain our algorithm using a
horse (source) model and a human (target) model.

Figure 2. A screen snapshot of the segmentation
operation.

Figure 3.Upper: Horse model and its segmented parts
and Lower: Human model and its segmented parts.

133

bones of the model. Our system generates a skeleton as a
tree constructed from the bones. The tree is constructed
based on adjacency condition of segmented parts
automatically. Each segmented part and its polygonal
surface is assigned a segmentation number, and an
adjacency matrix is also built as shown in Figure 5. Each
element of the matrix is 0 or 1: adjacent part is written 1
and otherwise is written 0.

3.2. Generating skeleton of model
In this subsection, we explain the algorithm of
generating a skeleton of a model used in our system.
There are many works of generating a skeleton of a
model [4]. In our system, we extract bones from
segmented parts and generate a skeleton constructed
from them. For extracting bones, we use Principal
component analysis to segmented parts. The calculation
of this method is as follows:
I is a variance-covariance matrix about vertices of a
model.

⎛ I xx I xy I xz
⎜
I = ⎜ I yx I yy I yz
⎜
⎜ I zx I zy I zz
⎝

⎞
⎟
⎟
⎟
⎟
⎠

(1)

An element of the matrix I qr ( q, r ∈ {x, y, z}) is
expressed as the equation (2) by using q, r which are
Figure 5.The overview of checking adjacent parts in our
algorithm.

averages of qi , ri ∈ {x i , yi , z i } components of i-th
vertex.

I qr =

1
n

n

∑ (q

i

− q )( ri − r )

According to the generated adjacency matrix, our
system determines parent-child relationship between any
two parts and constructs a tree based on the relationship.
In our algorithm, the root of a tree is the bone which has
nearest position to the center of gravity of a model. And
then, the system defines a bone adjoining the root bone
as the child of the root. This operation is applied to every
child recursively. A tree constructed by these operations
is regarded as a skeleton of a model.

(2)

j =1

Then, we obtain the eigen values and eigen vectors of
the matrix by solving the equation (3)

G
G
Iai = λ i ai , i ∈ {1, 2,3}

(3)

An eigen vector having the largest eigen value
becomes the first principal component. We treat this
component as a bone of a segmented part. Figure 4
shows the bones extracted from segmented parts by our
system.

3.4. Mapping bones of skeletons
In this subsection, we explain the algorithm of
mapping bones of the skeletons generated in the previous
step. A bone of a source model is mapped to the bone
which has the nearest relative position to its parent
position in a target model. This mapping operation is
repeated until all bones mapping are determined. Figure
6 shows the result of this mapping process.

Figure 4.Upper: Bones of segmented parts of a horse
model and Lower: Bones of segmented parts of a human
model.

Figure 6.The result of mapping bones of skeletons.
The bone of a source model has the same color of the
mapped bone of a target model. Left: the skeletons of
two models before mapping their bones. Right: the
skeletons of the two models after mapping their bones.

Next, we will explain the algorithm of generating a
skeleton of a model from segmented parts treated as

134

However, if the bone numbers between a source and a
target model are different, this algorithm can not work
accurately. For overcoming this problem, our system
reconstructs the skeleton of a source model to be the
same as the structure of the skeleton of a target model as
shown in Figure 7.

N is the number of neighbor of vertex i . The pseudocode used in the system for calculating Barycentric map
is below. From our experiences, we use ω = 0 . 9 .
1: let v = (0, 0) for all inner points
2: define v i for all border points
3: while not converged do
4: for each inner point i don
5:
let v i′ = (1 − ω ) v i′ + ∑ λ i , j v ′j
j =1

If a segmented part has more than two borders, there
are some holes in Barycentric map. In this case, for
accurate vertex correspondence, our system translates the
holes of the part of a source model to the hole positions
of mapped part in a target model. After that, the system
performs Barycentric mapping again. Of course, any
vertices should not be placed in the holes. The pseudocode of this process is below. We define the center and
radius of the hole as c and r .

Figure 7.The result of reconstructing the skeleton of the
source model (a horse model) to be the same as the
structure of the skeleton of the target model (a human
model). Left: the skeleton before reconstructing process.
Right: the skeleton after reconstructing process.

1: let v = (0, 0) for all inner points
2: define v i for all border points
3: while not converged do
4: for each inner point do n
5:
let v i′ = (1 − ω ) v i′ + ∑ λ i , j v ′j
j =1
6:
if v i ′ is inner of a hole then
′
′
7:
vi = (vi − c ) ∗ r

3.4. Mapping vertices of bones
In this subsection, we explain the process of mapping
vertices of their two related bones. This process uses
Barycentric map for accurately mapping vertices of a
bone to vertices of its corresponding bone. Barycentric
map is one method of embedding vertices onto a polygon
in a plane. The polygon consists of border points related
to a bone of a 3D model. The system applies Barycentric
map to vertices of segmented parts and certain vertices in
the border of the parts are selected as the border points of
Barycentric map. If a segmented part has more than two
borders, i.e., more than two adjoining segmented parts,
we select the border adjoining its parent part as the
border points of Barycentric map. As shown in Figure 8,
border points are placed to form the border of a circle.
In our system, Barycentric map is calculated as
follows: We define vertices of a segmented part as
v i i = 1,... n and the border points as v1 ,...v m m < n .
In the below, we express the embedded vertices as
v i′ i = 1,... n and an edge between two vertices as ε .

We map the vertices of the part of a source model to
the vertices which has the nearest position in mapped
part in a target model. Figure 9 shows the overview of
the vertex correspondence process, and Figure 10 shows
the result of the process generated by the system.

Figure 8.Barycentric maps of segmented parts. Left:
Barycentric map of the head of a horse model. Right:
Barycentric map of the body of a horse model.

The border points v1 ,... v m are placed on the border of a
circle, and the other vertices in the circle are placed
according to the equation (4).

vi′ =

n

∑λ

i, j

i = m ,... n

(4)

j =1

⎧N
λ i, j = ⎨
⎩0

−1

if

(i, j ) ∈ ε
else

Figure 9.The overview of vertex correspondence. Upper:
the vertex translation of the part of a source model.
Lower: the part of a target model.

135

4. Experimental results
This section presents experimental results of 3D
morphing using our system. We show the results of two
types; one is the result of morphing under the condition
which a skeleton structure of a source model is similar to
those of a target model, and the other is that under the
condition which they are not similar. In the first
experiment, we use a horse (source) model and a human
(target) model. The horse and the human model have
14996 and 14643 vertices, respectively. Figure 12 shows
the result of the morphing.
In the second experiment, we use a human (source)
model and a shark (target) model. The horse and the
shark model have 14643 and 5141 vertices, respectively.
We show the structure of the models and the result of
mapping bones in Figure 11. The skeleton structure of a
source model is reconstructed according to those of a
target model. Figure 13 shows the result of the morphing.
Finally, other experimental results are shown in Figure
14 and 15.

Figure 10 The result of the vertex correspondence. Each
Barycentric map of a source model is very similar to the
map of its corresponding part of a target model.

3.5. Vertices translation
In this subsection, we explain the calculation of vertex
trajectory necessitated for metamorphosing a 3D model
into other. Our system translates both vertices and bones
during the morphing. So, vertex trajectory is affected by
the translation of a bone. By translating vertices with a
related bone, we have to control the trajectory to not
cause self-intersection. We define a bone of a source and
a target model as scB i i = 1,... n and tgB i i = 1,... n .
In addition, scB i is corresponding to tgB i . And then,
we define a vertex of a source and a target model as
scV i , j j = 1,... m and tgV i , j j = 1,... m , respectively.
Furthermore, scV i , j is corresponding to tgV i , j . Next, we
define a bone position of a source and a target model as
scB p i = ( scB pi _ x , scB p i _ y , scB pi _ z ) and

Figure 11.The result of mapping bones of skeletons. The
skeleton of a human model is reconstructed. The bone of
the source model has the same color as the mapped bone
of the target model. Left: the skeletons of the models
before mapping bones. Right: the skeletons of the models
after mapping bones.

tgB pi = ( tgB pi _ x , tgB pi _ y , tgB p i _ z ) , respectively. We
also define a bone scale of a source and a target model as
scB S i = ( scB S i _ x , scB S i _ y , scB S i _ z ) and

tgB S i = (tgB S i _ x , tgB S i _ y , tgB S i _ z ) , respectively. The

5. Concluding remarks

trajectory is calculated by the next equation (5).
n

m

Vi , j = ∑ ∑ {(1 − α )(scVi , j + α tgVi , j )}{(1 − α )(scM i , j + α tgM i , j )}

In this paper, we proposed a skeleton based 3D model
morphing system using Barycentric map. Our proposed
system can reduce execution cost of 3D model morphing
because the system automatically calculates the vertex
correspondence and the vertex trajectory. However, there
are some problems about self-intersection. Our system
causes self-intersection about border vertices of
segmented parts because these vertices move widely
during the morphing. Solving this problem is one of the
future works. Moreover, we will improve segmentation
process to be able to segment a model automatically for
reducing manual operation cost of the morphing.

(5)

i =1 j =1

Here, 0 ≤ α ≤ 1 and

⎛ scB S i _ x
⎜
⎜ 0
scM i = ⎜
0
⎜
⎜ scB P
i_ x
⎝

0
scB S i _ y
0

0
0
scB S i _ z

scB Pi _ y

scB Pi _ z

⎛ tgB S i _ x
⎜
⎜ 0
tgM i = ⎜
0
⎜
⎜ tgB P
i_ x
⎝

0
tgB S i _ y

0
0

0

tgB S i _ z

tgB Pi _ y

tgB Pi _ z

0⎞
⎟
0⎟
0⎟
⎟
1 ⎟⎠

0⎞
⎟
0⎟
0⎟
⎟
1 ⎟⎠

136

Figure 12.Upper: The result of horse-to-human model morphing. Lower: The movement of the skeleton of the model.

Figure 13.Upper: The result of human-to-shark model morphing. Lower: The movement of the skeleton of the model.
[5]
[6]

Figure 14.Upper: The result of dog-to-shark model
morphing. Lower: The movement of the skeleton of the
model.

[7]
[8]

[9]

Figure 15.Upper: The result of horse-to-shark model
morphing. Lower: The movement of the skeleton of the
model.

[10]

References
[1]
[2]

[3]
[4]

[11]

Aaron W. F. Lee, David Dobkiny, Wim Sweldensz, Peter
Schroder, Multiresolution Mesh Morphing, Proceedings
of SIGGRAPH 99, pp.343-350,1999.
Chunxia Xiao, Wenting Zheng, Qunsheng Peng,
A.R.Forrest, Robust Morphing of Point-sampled
Geometry, Journal of Visualization and Computer
Animation, Volume 15, Issue: 3-4, pp.201-210, 2004.
Greg Turk, James F. O'Brien, Shape Transformation
Using Variational Implicit Functions, The Proceedings of
the ACM SIGGRAPH 1999, pp.335-342, 1999.
Ilya Baran, Jovan Popovi, Automatic Rigging and
Animation of 3D Characters, Proceedings of the 2007
SIGGRAPH conference Volume 26, Issue 3, 2007.

[12]

[13]

137

Kosuke Kaneko, Yosihiro Okada, Koichi Niijima, 3D
Model Generation by Morphing, Computer Graphics,
Imaging and Visualization, 2006, pp.341-346, 2006.
Leif Kobbelt, Mario Botsch, A survey of point-based
techniques in computer graphics, Computer & Graphics
28, pp.801-814, 2004.
Malte Zockler, Detlev Stalling, Hans-Christian Hege,
Fast and intuitive generation ofgeometric shape
transitions, The Visual Computer, pp.241-253, 2000.
Sagi Katz, George Leifman, and Ayellet Tal, Mesh
Segmentation using Feature Point and Core Extraction,
The Visual Computer (Pacific Graphics), Volume 21,
Numbers 8-10, pp.649-658, 2005.
Shymon Shlafman, Ayellet Tal, Sagi Katz,
Metamorphosis
of
Polyhedral Surfaces using
Decomposition, Eurographics 2002, pp.219-228, 2002.
Tamal K. Dey, Joachim Giesen, Samrat Goswami, Shape
segmentation and matching with flow discretization,
Proceedings of workshop on Algorithms and Data
Structures(WADS), pp.25-36, 2003.
Vladislav Kraevoy, Alla Sheffer, Cross-Parameterization
and Compatible Remeshing of 3D Models, Proceedings
of the 2004 SIGGRAPH Conference, pp.861-869, 2004.
Xiaogang Jin, Shengjun Liu, Charlie C. L. Wang, Jieqing
Feng, Hanqiu Sun, Blob-based liquid morphing, Journal
of Visualization and Computer Animation 16(3-4),
pp.391-403, 2005.
Yunfan Bao, Xiaohu Guo, Hong Qin, Physically Based
Morphing of Point-sampled Surfaces, in the 18th
International Conference on Computer Animation and
Social Agents (CASA 2005), Vol.16, No.3-4, pp.509518, 2005.

