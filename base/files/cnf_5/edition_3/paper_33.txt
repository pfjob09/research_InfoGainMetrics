Fifth International Conference on Computer Graphics, Imaging and Visualization
Visualisation

Public Key Encryption of Images and Videos in Real Time Using Chebyshev Maps

K. Ganesan
School of Computing
Sciences VIT University
Vellore-632014,India
kganesan@vit.ac.in

Ishan Singh
School of Computing
Sciences VIT University
Vellore-632014, India
ishan_2727@yahoo.com

Abstract

Mansi Narain
School of Computing
Sciences VIT University
Vellore-632014, India
mun.mansi@gmail.com

Keywords: Chaos, public key, hash, chebyshev map

3. The calculation of decryption key from encryption key
is almost impossible.
The sender uses the public key of receiver to encrypt
the message; on the other end for decryption the receiver
uses the corresponding secret key to decrypt the message.
In this paper we describe a public-key encryption
algorithm based on chaotic maps [4]. The chaotic map
used in this algorithm is Chebyshev map [1]. In section 2
we describe the existing algorithm, then its cryptanalysis
and how to make the algorithm secure against the
cryptanalysis. After establishing the security of this
algorithm in section 2, in section 3 we propose an
extension of this algorithm to images and videos,
incorporating multilevel scrambling for better security
and, further improve the security by adding hash to the
algorithm. In the section 4 we summarize our
observations and results. We close the paper with a
conclusion in section 5.

1. Introduction

2. Public Key Encryption Using Chebyshev
Map

Due to rapid developments in limits and possibilities
of communications and information transmissions, there
is a growing demand of cryptographic techniques, which
has spurred a great deal of intensive research activities in
the study of cryptography. This paper describes a public
key encryption based on chebyshev polynomials [1].We
discuss the algorithm for textual data and present the
cryptanalysis which can be performed on this algorithm
for the recovery of encrypted data [2]. We also describe a
simple hashing algorithm for making this algorithm more
secure, and which can also be used for digital signature
[3]. The main scope of this paper is to propose an
extension of this algorithm to images and videos and
making it secure using multilevel scrambling and hash.
Software implementations and experimental results are
also discussed in detail.

In the past few years lot of research on chaotic
systems has been undertaken [4]. The chaotic systems are
known to be very sensitive to initial conditions and they
possess very random behaviour. Due to these properties
chaotic systems have become a very good candidate for
their use in the field of cryptography [5]. The field of
cryptography deals with providing security to one’s data
or files. Initially cryptography used the concept of secret
key which was required to be transmitted in a very secure
way.
Diffie and Hellman showed for the first time that
secret communication was possible without any transfer
of a secret key between sender and receiver [6]. This new
technique was named public key cryptography. Public key
encryption techniques in contrast to secret key techniques,
posses the following properties:
1. The encryption key is different from the decryption
key.
2. The encryption key is public.

978-0-7695-3359-9/08 $25.00 © 2008 IEEE
DOI 10.1109/CGIV.2008.66

Chebyshev map is a chaotic map which is defined as
follows:
Tn(x) = 2 · x · Tn−1(x) − Tn−2(x), for any n >=2, where
T0(x) = 1 and T1(x) = x.
The algorithm described here uses a remarkable property
called semigroup property which is given by:
Tr(Ts(x)) = Tr·s(x).
We now describe the existing algorithm [1]:
A, in order to generate the keys, does the following:
1. Generates a large integer s.
2. Selects a random number x in the interval [−1, 1] and
computes Ts(x).
3. A sets her public key to (x, Ts(x)) and her private key to
s.

211

B, in order to encrypt a message, does the following:
1. Obtains A’s authentic public key (x, Ts(x)).
2. Represents the message as a number M in the interval
[−1 1].
3. Generates a large integer r.
4. Computes Tr(x),Tr·s(x)= Tr(Ts(x)) and X =M· Tr·s(x).
5. Sends the cipher text C = (Tr(x), X) to A.

where p1,p2,p3 are decimal values calculated from the
binary representation of 128 bit hash. On the receiver’s
end the hash is again calculated using session id and
password and again the value of the parameters p1, p2
and p3 is calculated. Using these values the correct value
of Tr(x) can be calculated. Through this scheme, only the
user with correct session id and password can decrypt the
message. Hence the secure transmission of Tr(X) is
ensured.

A, to recover the plaintext M from the cipher text C, does
the following:
1. Uses her private key s to compute Ts·r(x) = Ts(Tr(x)).
2. Recovers M by computing M = X/Ts·r(x).

3. Extension of Secure Algorithm to Images
and Videos
In this section we describe how we can use the above
described algorithm for the encryption of images and
videos. Images are composed of discrete units called
pixels. A pixel is a small square representing some colour
value, which when taken together form the mosaic. The
image is a m x n matrix, where m represents the number
of rows of pixels and n the number of columns of pixels,
with each entry in the matrix being a numeric value that
represents a given colour. For encryption purpose each
pixel of the image can be considered as input message to
the encryption algorithm. We also propose the use of two
scrambling techniques to provide additional security.

2.1. Cryptanalysis
Chebyshev polynomials can be alternatively defined
as follows: Let n be an integer, and let x be a variable
taking value over the interval [−1, 1].The polynomial
Tn(x): [−1, 1] Æ [−1, 1] is defined as:
Tn(x) = cos(n · arccos(x)).
Description of the Attack:
Let (x, Ts(x)) be A’s public key. In order to encrypt a
message M, B chooses a large integer r and computes:

3.1. Arnold Cat Scrambling

Tr(x), Tr·s(x) = Tr(Ts(x)), and X = M · Tr·s(x)

Arnold Cat Scrambling [7] is a simple and elegant
demonstration and illustration of some of the principles of
chaos–namely, underlying order to an apparently random
evolution of a system. An image is hit with a
transformation that apparently randomizes the original
organization of its pixels as shown in Figure 1.

Then, he sends the cipher-text C = (Tr(x), X) to A.
Given A’s public key (x, Ts(x)) and the cipher text
(Tr(x),X), an adversary can recover M as follows:
1. Computes an r′ such that Tr ′ (x) = Tr(x).
2. Evaluates Tr′s(x) = Tr′(Ts(x)).
3. Recovers M = XTr′s(x) .

The transformation is defined as follows: If we let

For the description of how to calculate r’ one can refer to
[2]. Thus Chebyshev map based encryption technique is
not robust against attacks as such. Hence it needs security
enhancement. The proposed security enhancement is
described in the next section.

be a n x n matrix of some image, Arnold’s cat map is the
transformation

2.2. Security Enhancement
We use the hash algorithm [3] to calculate the hash
value of session id and password concatenated together of
any user. But instead of the XOR technique suggested we
use our own encryption algorithm, as most of the XORing based techniques are not robust against well known
attacks such as chosen/known plain text attack. To avoid
the possibilities of this attack we do the following: The
hash function [3] returns a 128 bit hash value. This 128
bit hash value is divided into three parts first two of 52
bits and third of 24 bits. All of these values are then
transformed into corresponding decimal representation.
The value Tr(X) which is to be transmitted is then
encrypted as follows:

3.2. Phase Scrambling
This technique randomizes the phase of the r, g and b
layers of an image individually [8] as shown in Figure 2.
This changes the colour composition of the image
significantly. It adds the same random phase structure to
the existing three (rgb) phase structures in the original
image. As a result, the relative phases of the r, g, and b
layers in the scrambled image will be identical to their
relative phases in the original image and the colour
composition of the scrambled image will be as in the
original image. (e.g., a gray scale image will generate a
scrambled image which is also gray scale). The contrast

Tr(X)’= ( ( p1 + p2 ) / p3 )* Original Tr(X)

212

of all three layers in the image will, after scrambling, be
identical to that of the rescaled (0-1) original image.

corresponding cipher text image I’. XOR-ing the mask Im
with unknown cipher text image J’ does not recover the
unknown plain image J encrypted with the same key as
shown in Figure 5.
Random phase

R component
Original
RGB Image

.
ORIGINAL IMAGE

G component
B component

SCRAMBLED IMAGE

Figure 1: Lena image after Arnold scrambling
Scrambled R
component

Random phase can be generated by generating a random
matrix whose size is the same as size as the image, taking
its fourier transform, setting the magnitude to unity, and
taking the inverse fourier transform. Figure 3 demonstrates
the phase scrambling of an image.

Scrambled G
component

Scrambled B
component

Scrambled
image

3.3. Encryption using Chebyshev Polynomial
Figure 2: Various stages of Phase Scrambling
technique

This phase takes as input the scrambled image and
encrypts it using chebyshev polynomial [1] of the order as
defined by the key generation process.
The input image is read pixel wise, and each pixel
is given as input to the encryption function described
earlier as input message. The output is the encrypted pixel
value. After every pixel of the scrambled image has been
encrypted the encrypted pixels are again converted back
to image form hence giving the final encrypted image as
shown in Figure 4

3.4. Implementation of hash for secure
transmission

ORIGINAL IMAGE

SCRAMBLED IMAGE

Figure 3: Lena image after phase scrambling
As described earlier for texts, in images also to make
encryption secure and robust we have implemented
hashing of the transmitted parameter using the id and
password of the user.
Since this parameter is used for decryption process
anyone trying to attack the system by using the
transmitted value of parameter will not get the correct
image, as the transmitted parameter is encrypted with
hash value. Only the person who knows correct id and
password can obtain the correct value of parameter and
decrypt the image. As we have not used XOR-ing
technique in encryption of transmitted values the
algorithm for images is also robust against chosen plain
text attacks. Known/chosen plaintext attacks are such
attacks in which one can access/choose a set of plaintexts
and observe the corresponding cipher texts. Most of the
XOR-ing based techniques are not robust against this
attack. Here we consider three M x N images namely I, I’,
J’ where I’ is the encryption result of I using certain initial
parameters, and another ciphered image J’ encrypted
using the same parameters. The mask Im is obtained by
simply XOR-ing the plaintext image I with its

Figure 4: Lena image after encryption (also
showing multilevel scrambling)

213

Thus our proposed method is robust against chosen/plain
text attacks.

original image I

XOR mask Im

From the observation it can be clearly seen that phase
scrambling is much faster when compared to Arnold cat
scrambling and hence is better for videos.

encrypted image I’

unknown encrypted Image J’
Figure 6: Results obtained on encrypting two
frames of video after phase scrambling.

4. Efficiency Check and Testing
A good encryption scheme should resist all kinds of
attacks, such as brute-force attack, known plaintext attack,
and statistical attack. We have already shown that our
proposed algorithm is robust against chosen/plain text
attack. Some statistical tests such as key sensitivity,
correlation of adjacent pixels, mono bit test and run test
are demonstrated in the following section.

Failed Attempt to crack image J’
Figure 5: Robustness against chosen plain text
attack

3.5. Videos

4.1. Key sensitivity test

Videos in simple terms are a collection of images.
Video is made up of frames and each frame is like a still
image. Since the number of frames in a video is large, we
need a scrambling method that takes less time; otherwise
the encryption process will be too slow.
As Arnold Scrambling uses modular arithmetic [7] it
takes more time for computation and hence it tends to
slow down the scrambling process. Since in a video the
number of frames is too large, we propose the use of
Phase Scrambling for video encryption as it is faster when
compared to Arnold scrambling.
The following results in Table 1 were obtained when
both these techniques were tested for time to scramble a
single frame of video. In Figure 6, we have shown 2
frames of a video and its phase scrambled outputs.

An ideal image encryption procedure should be
sensitive with respect to the initial parameters. The
change of a single bit in the key should produce a
different encrypted image.
We performed the test for r=81500, x=.5678 and the
following results as shown in Figure 7 were obtained. We
see that even for a slight change in S, we get an image
which is 99.481% different from original one.

Table 1: Time taken by both the scrambling
techniques for a single frame of video
SCRAMBLING
FRAME SIZE TIME TAKEN
METHOD
(Sec)
ARNOLD
256X256
0.8420
SCRAMBLING
PHASE
256X256
0.3120
SCRAMBLING

Original Image

214

4.3. Mono bit test [9]
This test counts the number of ones in the first 20,000 bit
stream. The test is passed if the number of ones is greater
than 9,654 and less than 10,346
Test Results of this test are shown in Table 2:
Encrypted image1
S=10600

Encrypted image 2
S=10601

Image

Figure 7: Key sensitivity test

Table 2: Result of Mono bit test.
Passing
Result
category

Lena Color
Image(256x256)

4.2. Correlation of adjacent pixels
We have analyzed the correlation between adjacent
pixels in several images and their encrypted images. For
an ordinary image, each pixel is usually highly correlated
with its adjacent pixels. These high correlation properties
can be quantified as the correlation coefficients for
comparison. First we select 1000 pairs of two adjacent
pixels from an image. Then we calculate the correlation
coefficient.
The following correlation plot was obtained when a
greyscale lena image was encrypted using the proposed
cryptosystem.
Correlation in original image = 0.916

9654 < X <
10,346

10227

4.4. Long run test [9]
Testing Procedure:
1) A long run is defined to be run of length 34 and
more(of either zeroes or ones)
2) On the sample of 20,000 bits the test is passed if there
are no longer runs.
Table 3: Results of Long run test
Passing
Results
Image
Category

Correlation in encrypted image=0.102
CORRE LATION OF ADJACENT PIXELS FOR ORIGINA L IMAGE
0.9
0.8
0.7

Lena Colour
Image(256x256)

< 34

16

Lena Greyscale

<34

14

0.6
0.5
0.4
0.3

Image(256x256)

0.2
0.1
0

0

0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.8

0.9

1

CORRELATION OF A DJACENT PIXELS FOR E NCRY PTED IMAGE
1

From Table 3, we can find that our chaotic sequence
generates sufficiently long sequence of random bits,
needed for robust encryption of images and videos.

0.9
0.8
0.7
0.6
0.5
0.4
0.3

4.5. Time Analysis

0.2
0.1
0

0

0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.8

0.9

In Table 4, we have recorded the time taken by our
algorithm to perform the encryption of images.

1

Figure 8 : Correlation in original image and
encrypted image

Table 4: Time analysis for various image sizes.

From the above findings, shown in Figure 8 it is evident
that correlation in encrypted image is very less as
compared to the original image, hence it is very difficult
to figure out the approximate value of any pixel with the
knowledge of its adjacent pixels.

Size of
image(Kb)
2.01
4.76
12.8
612

215

No. of pixels
64x64
128x128
256x256
512x512

Time taken(Sec)
.1400
.1710
.7170
4.8350

This work forms part of
ERIP/ER/0503549/M/01/897.

plot of image size and time taken for encryption
5

time taken for encryption in seconds

4.5
4

the

Research

Grant

7. References

3.5
3

[1] L. Kocarev, Z. Tasev, “Public key encryption based on
Chebyshev maps”, in: Proc. 2003 IEEE Symposium on Circuits
and Systems, Bangkok, TH, vol. 3, pp. 28–31.

2.5
2
1.5
1

[2] P. Bergamo, P. D’Arco, A. Santis and L. Kocarev, “Security
of public key cryptosystems based on Chebyshev polynomials”,
IEEE Transactions on Circuits and Systems—I 52 (2005), pp.
1382– 1393.

0.5
0
50

100

150

200
250
300
350
400
Size of the image(MxM pixels)

450

500

550

Figure 9: Plot of image size versus time taken for
encryption

[3] Di Xiao, Xiaofeng Liao, Shaojiang Deng, “A novel key
agreement protocol based on chaotic maps” Information
Sciences Volume 177, Issue 4, 15 February 2007, Pages 11361142

From Figure 9 we can see that the relationship between
size and time to encrypt is almost linear and as the file
size increases there is no abrupt change in the time taken
for encryption and it increases proportionally.

[4] K.Ganesan, R.Muthukumar, K.Murali. “Look-up Table
Based Chaotic Encryption of Audio Files” IEEE Trans Circ Syst
2006; APCCAS 2006;Pages. 407-7

In Table 5 we have tabulated time taken for encryption and
phase scrambling for various video sizes (pixel count) for
15 frames video:

[5] L.Kocarev,” Chaos Based Cryptography: A Brief
Overview”.IEEE Circuits and Systems Magazine,1(3):621,2001.

Table 5: Time analysis for videos
Pixel Count
64 x 64
128 x 128
256 x 256
512 x 512

Phase
Scrambling
Time(sec)
0.2190
0.8420
3.9930
20.8880

[6] Diffe W. And Hellman M .E.,”New Directions in
Cryptography”
IEEE
Transaction
of
Information
Theory.22:644-454,1976.

Encryption
Time(sec)

[7] Yuanzhi Wang, Guangyong Ren, Julang Jiang , Jian Zhang,
Lijuan Sun ,” Image Encryption Method Based on Chaotic
Map”, Second IEEE Conference on Industrial Electronics and
Applications, Pg. 2557-2560, 2007.

0.0620
0.2180
1.4360
7.6440

[8] N.K.Nishchal, J.Joseph and K.Singh, ”Fully phase based
encryption using fractional Fourier transform”, Opt.Eng
42,1583-1588(2003).

In real time video streaming, encryption is efficient for
64x64 and 128x128 pixel size videos and is jerk-free.
With further optimization and proper hardware
implementation it can be made efficient for higher
resolution videos. This is a topic for our further research.

[9] Alfred J.Menezes, Paul C.Van Oorschoty, Scott A.Vanstone,
“Handbook of Applied Cryptography”,Pg.180-185.

5. Conclusions
In this paper, first we describe the existing algorithm
to encrypt textual data using chebyshev polynomial and
its cryptanalysis. Then we have also introduced a non
XOR-ing technique to make the hashing algorithm more
secure against the chosen plain text attacks. Further we
have proposed the extension of encryption based on
chebyshev polynomial from textual data to images and
videos. The use of multilevel scrambling in the encryption
of images makes the cryptosystem more secure and robust
making it difficult for any intruder to crack the original
video.

6. Acknowledgements
We would like to thank the Defence Research and
Development Organization (DRDO), Govt. of India for
providing necessary facilities for carrying out this work.

216

