Fifth International Conference on Computer Graphics, Imaging and Visualization
Visualisation

Improved Canny Edges Using Ant Colony Optimization
1

Ya-Ping Wong, 2Victor Chien-Ming Soh, 3Kar-Weng Ban, 4Yoon-Teck Bau
Faculty of Information Technology, Multimedia University, 63100 Cyberjaya, Selangor, Malaysia
{1ypwong@mmu.edu.my, 2cmsoh@mmu.edu.my, 3kwban@mmu.edu.my, 4ytbau@mmu.edu.my}

rapidly toward a suboptimal region, therefore favouring
the exploration of new areas in the search space. The two
basic ACO procedures mentioned above (i.e. the
construction of solutions and the update of pheromone
trails by the ants) are repeatedly applied until a
termination condition is satisfied. In practice, a
termination condition may be the maximum number of
solutions generated, the maximum CPU time elapsed, or
the maximum number of iterations without improvement
in solution quality. ACO algorithms modelled after this
behaviour have been applied in a variety of optimization
problems as described in [6].

Abstract

Ant Colony Optimization (ACO) is a metaheuristic
approach for solving hard optimization problem. It has
been applied to solve various image processing problems
such as image segmentation, classification, image
analysis and edge detection. In this paper, we present an
Improved Canny Edges (ICE-ACO) algorithm which
uses ACO to solve the problem of linking disjointed
edges produced by Canny Edge Detector.
Keywords--- Ant Colony Optimization (ACO),
Swarm Intelligence, Canny Edge Detector, Edge
Linking

2 ACO and Image Processing
2.1 ACO and Image Segmentation, Classification
and Analysis

1. Introduction to ACO
Ant Colony Optimization (ACO) is a populationbased metaheuristic approach to find approximate
solutions to difficult optimization problems [1, 2]. The
inspiring source of ACO is the pheromone trail laying
behaviour of real ants, which use pheromone as a
communication medium. In analogy to the biological
example, ACO is modelled based on the indirect
communication of a colony of simple agents, called
artificial ants, mediated by artificial pheromone trails.
These pheromone trail values are modified at runtime
based on a problem-dependent heuristic function and the
amount of pheromone deposited by the ants while they
traverse between their colony and a food source. The
problem-dependent heuristic function, in the case of
famous ACO algorithms for travelling salesman problem
[3, 4, 5], is set to be the inverse of the distance between
one city and another city. In ACO, pheromone trail
values serve as distributed, numerical information, which
the ants use to construct solutions probabilistically.
There is one solution per ant.
The higher the pheromone value, the higher the
probability of an ant choosing that particular trail will be.
The pheromone values on lower quality trails which are
not reinforced often enough will progressively evaporate.
Pheromone evaporation implements a useful form of
forgetting: it avoids the algorithm from converging too

978-0-7695-3359-9/08 $25.00 © 2008 IEEE
DOI 10.1109/CGIV.2008.54

Ramos and Almeida [7] and Fernandes et al. [8] are
some of the pioneers to apply ACO in image processing.
Both of these papers described an extended model and
algorithm of an artificial ant colony system designed to
evolve in digital image habitats. The model can be
associated with the mathematical morphology Watershed
algorithm to improve the segmentation of digital greyscale images. This algorithm causes the emergence of
pheromone maps which may be a suitable support for
edge detection and image segmentation.
Bocchi et al. [9] presented an evolutionary swarm
algorithm for image segmentation where different
populations of individuals compete to occupy a bidimensional landscape representing the image to be
processed. Laptik and Navakauskas [10] described a
model on how ACO can be applied for image
segmentation. Piatrik and Izquierdo [11] performed
image classification using an ACO approach.
Zhuang and Mastorakis [12], Meng and Han [13],
and Fledelius and Mayoh [14] described how image
processing and image analysis in general can be done
using swarm-based algorithms such as ACO.

197

just like all other edge detection algorithms, it suffers the
problem of disjointed edges where the edges should be
joined. This is really a much harder problem comparing
to basic edge detection problem.
Thus, instead of applying ACO to grey-level images
to perform edge detection, we aim to apply ACO to solve
the edge linking problem stated above.

2.2 ACO and Edge Detections
Early work on applying ACO to edge detection was
carried out by Zhuang [15] and later refined by Zhu et al.
[16]. Both papers proposed a perceptual graph that is
used to represent the relationship between adjacent
image points, and the ant colony system is applied to
build the perceptual graph based on which the edge
information is obtained.
One of the best papers on edge detection using the
ACO approach was presented by Nezamabadi-pour et al.
[17] where the edge detection problem is represented by
a directed graph in which nodes are the pixels of an
image. In this approach, the values of visibility which
govern the simple movement of ants is determined using
the maximum variation of grey level values of the pixels
intensity rather than using the distance from one node to
another (the length of the graph edge) as in most graph
algorithms. A slightly different approach is given by
Rezaee [18].
An application of ant colony algorithm for edge
feature extraction in city aerial images for building
recognition is given by Guo et al. [19].
A very recent paper by Lu and Chen [20] published
in March 2008 also attempt to improve edge detection
using ACO. Ants are placed initially at endpoints of edge
segments produced by edge detection algorithm but the
original intensity values of the image are used to guide
the ants.

3.2 Model and Algorithm
3.2.1 The Algorithm
The high-level pseudo-code of our Improved Canny
Edges (ICE-ACO) Algorithm is given in Algorithm 1
below.
procedure ICE-ACO( CannyEdgesImage )
endpoints ← detectEndPoints(CannyEdgesImage )
segments ← segment(CannyEdgesImage )
for each endpoint
initialize pheromone
do N iterations
place all ants at endpoint
compute ants’ initial direction
for each ant
if ant destination is not found and ant is alive
move ant to next pixel according to Eq. (1)
if ant reaches the same segment
terminate the ant
else
store the ant tour solution
update the best tour solution
end if
end for each ant
evaporate pheromones according to Eq. (3)
deposit pheromones for all valid ant tours according
to Eq. (4)
end do N iterations
draw best ant tour solution into CannyEdgesImage
end for each endpoint
return CannyEdgesImage
end procedure

3. Improved Canny Edges (ICE-ACO)
Algorithm
3.1 Motivation
Almost all edge detection algorithms described
above operate on grey-level or colour images as the input
to their algorithms without any prior processing. The
exception is Lu [20] which uses edge detection algorithm
to generate edges in order to place the ants initially at the
endpoints of these edges. Nevertheless, we argue that
ACO is best applied to hard problems, and that using
ACO for edge detection is overkill as such problems are
solvable using simple algorithms such as Sobel Filters
[21] and Canny Edge Detectors [22]. After all, to
compute the value of the pixels’ visibility to the artificial
ants in determining the probability of displacing an ant
from one pixel to its neighbouring pixels, one would
certainly need to calculate the differences between the
intensity of a pixel and its neighbouring pixels. Such
computations are similar if not more complicated than
those done using Sobel Filters or Canny Edge Detectors.
Furthermore, in all the papers stated above, ACO-based
edge detection algorithms have not been demonstrated to
be better than existing edge detection algorithms in terms
of accuracy and efficiency.
It is generally accepted that Canny Edge Detector is
probably one of the best edge detection algorithms so far
as it produces edges that are one pixel wide. However,

Algorithm 1: High-level pseudo-code of Improved
Canny Edges (ICE-ACO) Algorithm
3.2.2 Segments and Endpoints
The input to our algorithm is the output of Canny
Edge Detector, which is a binarized image of thin edges
of which each edge is 1 pixel wide. Each pixel value xi ∈
X represents the binary value of ith pixel value in the
image X={ xi | xi =0 or 1; 0 ≤ i < height × width }, and
the pixel at the rth row and cth column is x(r × width + c) .
The first step of our algorithm is to extract all the
endpoints of all the line segments from the binarized
image where each endpoint yi ∈ Y ⊆ X. Example of a line
segment endpoint is shown in Figure 1.

198

line segment endpoint

where i and j ranges from 0 to n – 1 and n = height x
width. τj and ηij represent the amount of pheromone on
pixel j and the probabilistic direction bias from pixel i to
pixel j respectively, and N8(pixel i) is the set of 8neighbouring pixels surrounding pixel i. As in [8], the
probabilistic direction bias, ηij has the values shown in
Figure 5 below. α and β are two parameters set by the
users depending on the problem.

not a line segment endpoint

Figure 1: Line segment endpoint

Figure 2: Valid endpoints

Figure 5: The value of η ij used to determine the next
move of an ant coming from south.
Figure 3: Invalid endpoints
3.2.4 The Pheromone Updates and Ant Tours
Valid endpoints are shown in Figure 2, where the
pixels in the middle of the 3×3 filter are the endpoints
(depicted as black pixels). Examples of invalid endpoints
are shown in Figure 3, where the black pixels in the
middle are inside line segments.

The pheromone value τj serves as positive feedback
to attract the ants to follow solutions found by other ants.
Initially, it is set to be close to zero at each pixel inside
the image.
In order to attract ants to move toward endpoints, we
set up attractors at endpoints in the form of pheromone
values with Gaussian distribution around the endpoints
centered at the endpoints. Let A be the amplitude of a 2D
Gaussian function with standard deviation σ centered at
an endpoint, a pixel s that is Δr rows and Δc columns
away from that endpoint will have initial pheromone:

3.2.3 Ants Movements Heuristics
As shown in Algorithm 1, each endpoint is
processed one by one using ACO for N iterations using
m number of ants. All the m ants are to be put at the
endpoint currently being processed for the particular
iteration. The objective is to find the best line segment to
connect the current line segment. A line segment that has
already been connected by another segment earlier is to
be ignored.
At the beginning of iteration, we compute the initial
direction for each ant based on the endpoint's trajectory
as shown in Figure 4 below.

τ s = Ae

−

Δr 2 + Δc 2
2σ 2

(2)

A sample illustration of initial pheromones is shown
in Figure 6 below.

Add 2D Gaussian at each endpoint

Figure 4: Ants’ initial trajectory

Figure 6: Initial pheromone as attractors around
all endpoints

For each ant during an iteration, we continuously
move the ant using a probabilistic approach until the ant
reaches another line segment. The probability of moving
from pixel i to pixel j where pixel j ∈ Ν8 ( pixel i ) is
given by:

pij =

τ αj ηijβ
∑τ AαηiβA

Each ant is given a lifespan limiting the maximum
tour length. If an ant fails to reach any edge segment
within its lifespan or if it returns to its own original
segment, then the ant will be terminated and no
pheromone updates will occur.
At the end of each iteration, only the ants that have
successfully travelled from one line segment to another
line segment will update the pheromone in each pixel
along their tour, since those ants have found a solution.

(1)

pixel l ∈ N 8 ( pixel i )

199

thin disjointed edges produced by the Canny Edge
Detector. The final output is the image with gaps in
between disjointed edges being linked. The maximum
length of the gap to be linked between edges can be set
by limiting the lifespan of the ants.
The parameters α and β in Eq. 1 control the relative
importance of the pheromone versus the heuristic
information ηij. To demonstrate the difference between
these parameters, a circle with disjointed edges, shown in
Figure 8(a), is used as the input image. Figure 8(b), 8(d),
8(f), and 8(h) show the outcome of the proposed ICEACO algorithm with different α and β values. Figure
8(c), 8(e), 8(g), and 8(i) show the actual edges being
added by the algorithm. Since it is the relative difference
between α and β that is important, we usually fix α to
have a value of 1 and adjust β.

The pheromone level is updated as in [6] according to
Eq. 3 below.

τ j (new) = τ j (old )(1 − ρ ) + ∑ Δτ kj

(3)

k

where ρ represents the pheromone evaporation rate, and
τj(old)(1 – ρ) is constrained to be never less than its
initial pheromone. The amount of pheromone added onto
pixel j by ant k is given by:
⎧ Q
⎪
Δτ kj = ⎨ Cost k
⎪⎩0

if pixel j selected by ant k,

(4)

otherwise,

and,
⎧D k
if ant k found the pixel inside a segment,
⎪
k
⎪
D
Cost k = ⎨
if ant k found the endpoint of a segment,
⎪ 21 − 1
k
⎪⎩
ηij

(5)

where Dk is the total distance (number of pixels)
travelled by ant k from one line segment to another line
segment. Q is an adjustable parameter but for our case, Q
is set to 1. ηijk is the value from Figure 5 which gives a
directional bias; assuming that pixel i is the last pixel in
the tour of ant k before reaching the endpoint and pixel j
is the endpoint pixel.
Eq. 5 is necessary to allow the ants to favour joining
to endpoints even though the endpoints may be further
than other segments. This is illustrated in Figure 7 where
there are two possible solutions.

(a) Manually created input image

(b) α=1, β=1.5

(c) Difference between (a) and (b)

(d) α=1, β=2

(e) Difference between (a) and (d)

(f) α=1, β=2.5

(g) Difference between (a) and (f)

longer tour but less
directional changes,
thus preferred
shorter tour but more
directional changes,
thus not preferred

Figure 7: Two possible ant’s tour from one edge
segment to another
3.2.5 The Solutions

Using the elitist ant strategy, we record the best
solutions (i.e. least cost) found at every endpoint after all
the iterations have been carried out. Hence the tours
giving the least solution cost for each endpoint are the
best solutions. We then draw results of these tours onto
the original binarized image of thin edges, thus
connecting one edge segment endpoint to another line
segment.

(i) Difference between (a) and (h)
(h) α=1, β=3
Figure 8: Circle (iteration=100, ants=2, lifespan=50)

4. Experimental Results
In this section, the effectiveness of the proposed
ICE-ACO algorithm is discussed using experimental
data. The algorithm accepts a binary image that contains

After many trials and errors, it turns out that the
values α =1 and β=3 usually give reasonably good

200

solutions. Further analysis of course needs to be done in
future work on how these parameters actually affect the
results. In all the results below, these values are assumed.
The following parameters are also fixed in all the
examples in this paper:
• Evaporation rate, ρ
= 0.1
= 0.001
• Minimum Pheromone, τ0
= 10
• Attractor’s Amplitude, A
= 10
• Attractor’s σ
• C++ Random Number Seed = 1
The ants’ lifespan are also introduced in the
proposed ICE-ACO algorithm to control the length of the
lines generated by the ants. Its effect on the input image
in Figure 9(a) is clearly illustrated in Figure 9(b) and
Figure 9(d). In Figure 9(b), the lifespan is set to be 7 and
this is sufficient to join up the top of the alphabet ‘A’ but
the endpoints at the lower-left and upper-right of the
alphabet ‘N’ failed to find another segment to be linked
with: this is fine as it is clearly what we wanted.
However, when the lifespan is given a value of 12, these
endpoints end up being joined to the nearest segment as
shown in Figure 9(d), which is not what we desired.

(c) iteration=10, ants=2,
lifespan=50

(d) Difference between (b)
and (c)

(e) iteration=10, ants=2,
lifespan=100

(f) Difference between (b)
and (e)

(g) iteration=100, ants=2,
lifespan=50

(h) Difference between (b)
and (g)

(a) Manually created input image

(b) lifespan=7

(c) Difference between (a) and (b)

Figure 10: Lena
(d) lifespan=12

(e) Difference between (a) and (d)

Figure 9: Ant (iteration=100, ants=2)

Several experiments were also carried out on a set of
images to test the algorithm’s capability. Some of the
results are shown in Figure 10 and Figure 11. We can see
that from these results, some edges are joined correctly
but some false edges are inevitably created depending on
the parameters used. However, these are much fewer
compared with that of Lu and Chen [20]. Further studies
would need to be carried out to minimize this problem.

(a) Original image

(c) iteration=100, ants=2
(a) Original image

(b) Result from Canny Edge

(d) Difference between (b)
and (c)
Figure 11: House (lifespan=20)

(b) Result from Canny Edge

201

[9]

5. Discussions and Conclusions
Our experiment results show that the edge linking
problems associated with Canny Edge Detector can be
solved using a simple modification of the ACO
algorithm. This is an on-going research and there is
much more to be studied especially regarding how the
various parameters of the model affect the final results.
Further analysis is also needed to find a set of optimal
parameters for various images. A possible future
extension is to incorporate the edge gradient directions
into the model. We could also introduce artificial vision
or better heuristics to guide the ants to construct better
solutions.

[10]

[11]

[12]

Acknowledgment

[13]

The authors wish to thank Josiah Wang for all the
assistance rendered and for his contributions. This
research is funded by the Malaysian Ministry of Science,
Technology and Innovation (MOSTI) under the Grant
Number 305/PMATHS/613122 of eScience Fund.

[14]

[15]

References
[1]

[2]
[3]

[4]

[5]

[6]

[7]

[8]

M. Dorigo and T. Stützle. The Ant Colony Optimization
metaheuristic: Algorithms, Applications, and Advances,
In Glover F. and Kochenberger G. A. (Eds.), Handbook
of Metaheuristics, pp.251-285, New York Boston
Dordrecht London Moscow, Kluwer Academic
Publishers, 2003.
M. Dorigo and T. Stützle. Ant Colony Optimization,
Cambridge. Massachusetts and London, England, MIT
Press, 2004.
M. Dorigo, V. Maniezzo and A. Colorni. Ant System:
Optimization by A Colony of Cooperating Agents, In
IEEE Transactions on Systems, Man, and Cybernetics Part B., Vol. 26(1), pp.29-41, February 1996.
M. Dorigo and L. M. Gambardella. Ant Colony System:
A Cooperative Learning Approach to the Traveling
Salesman Problem, In IEEE Transactions on
Evolutionary Computation, Vol. 1(1), pp.53-66, April
1997.
T. Stützle and H. H. Hoos. MAX-MIN Ant System, In
Journal of Future Generation Computer Systems,
Elsevier Science Publishers, Vol. 16(8), pp.889-914,
June 2000.
M. Dorigo, M. Birattari and T. Stützle. Ant Colony
Optimization: Artificial Ants as a Computational
Intelligence Technique, In Computational Intelligence
Magazine, pp.28-39, IEEE, November 2006.
Vitorino Ramos and Filipe Almeida. Artificial Ant
Colonies in Digital Image Habitats - A Mass Behaviour
Effect Study on Pattern Recognition, In Proceedings of
ANTS´2000 - 2nd International Workshop on Ant
Algorithms (From Ant Colonies to Artificial Ants),
Marco Dorigo, Martin Middendorf & Thomas Stüzle
(Eds.), pp.113-116, Brussels, Belgium, 7-9 Sep. 2000.
Carlos Fernandes, Vitorino Ramos and Agostinho C.
Rosa. Self-Regulated Artificial Ant Colonies on Digital
Image Habitats, In Int. Journal of Lateral Computing,
IJLC, vol. 2, no 1, pp.1-8, ISSN 0973-208X, Dec. 2005.

[16]

[17]
[18]
[19]

[20]

[21]
[22]

202

L. Bocchi, L. Ballerini and S. Hässler. A New
Evolutionary Algorithm for Image Segmentation, In
EuroGP´05 – EvoWorkshops 2005, Franz Rothlauf,
Jürgen Branke, Stefano Cagnoni, et al. (Eds.), SpringerVerlag, LNCS series, 2005.
R. Laptik and D. Navakauskas. Application of Ant
Colony Optimization for Image Segmentation, In
Electronics and Electrical Engineering. Kaunas:
Technologija, No. 8(80), pp.13-18, 2007.
Tomas Piatrik and Ebroul Izquierdo. Image
Classification Using an Ant Colony Optimization
Approach, In Semantic Multimedia, LNCS, Springer,
Vol. 4306, pp.159-168, Dec. 2006.
X. Zhuang and N.E. Mastorakis. Image Processing with
the Artificial Swarm Intelligence, In WSEAS
Transactions on Computers, Issue 4, Vol.4, pp.333-341,
ISSN 1109-2750, April 2005.
Meng Zhi-gang and Han Yong-guo. Application of
Artificial Life in Image Processing, In Applications
Research of Computers Journal, Vol.23, No.1, pp.255257, 260, 2006.
W. Fledelius and B.H. Mayoh. A Swarm-based
Approach to Medical Image Analysis, In AIA´06,
Artificial Intelligence and Applications, Acta Press,
Innsbruck, Austria, Feb. 2006.
X. Zhuang. Edge Feature Extraction in Digital Images
with the Ant Colony System, In IEEE Int. Conf. on
Computational Intelligence for Measurement Systems
and Applications, CIMSA-04, pp.133-136, IEEE Press,
July 2004.
Hui Zhu, Xiaodong Zhuang and XiangZhong Meng.
Emergent Behavior of Ant Colony System in Digital
Images for Acquiring Edge Information, In IEEE
International Conference on Information Reuse and
Integration 07, IRI, pp.116-121, 2007.
Hossein Nezamabadi-pour, Saeid Saryazdi and Esmat
Rashedi. Edge Detection Using Ant Algorithms, In Soft
Computing, Vol. 10, Issue 7, pp. 623–628, May 2006.
Alirezae Rezaee. Extracting Edge of Images with Ant
Colony, In Journal of Electrical Engineering, Vol. 59,1,
pp.57-59, 2008.
Guo Yurong, Wei Zhenzhong and Zhang Guangjun. An
Application of Ant Colony Algorithm for Edge Feature
Extraction in City Aerial Image for Building
Recognition, In 8th International Conference on
Electronic Measurement and Instruments, 2007, ICEMI
'07. pp.2-944-2-947, 2007.
De-Sian Lu and Chien-Chang Chen. Edge Detection
Improvement by Ant Colony Optimization, Pattern
Recognition Letters, Vol 29, Issue 4, pp.416-425, Mar.
2008,
Rafael C. Gonzalez and Richard E. Woods. Digital
Image Processing (2nd Edition), Prentice Hall, 2007.
J Canny. A Computational Approach to Edge Detection,
In IEEE Transactions on Pattern Analysis and Machine
Intelligence, V.8 N.6, pp.679-698, Nov. 1986.

