Research Report
Interacting with Huge Hierarchies: Beyond Cone Trees
Jeromy Carri&re, Rick Kazman
Computer Graphics Lab, Department of Computer Science
University of Waterloo, Waterloo, Ontario, Canada N2L 3Gl
{ j2carrie,rnkazman}@watcgl.uwaterloo.ca
fmiz, which attempts to capitalize upon the use of cone

Abstract

trees while overcoming the size limitations which have
been evident in previous implementations. Our approach
to overcoming the size limitations which have hampered
straight-forward cone tree implementation has three major
components:

This paper describes an implementation of a tool
for visualizing and interacting with huge information hierarchies, and some preliminary empirical evaluation of the
tool’s eficacy. Existing systems for visualizing huge hierarchies using cone trees “break down” once the hierarchy
to be displayed exceeds roughly 1000 nodes, due to increasing visual clutter. This paper describes a system
called fsviz which visualizes arbitrarily large hierarchies
while retaining user control. This is accomplished by augmenting cone trees with several graphical and interaction
techniques: usage-based filtering,
animated zooming,
hand-coupled rotation, fish-eye zooming, coalescing of
distant nodes, texturing, effective use of colour for depth
cueing, and the applications of dynamic queries. The fsviz
system also improves upon earlier cone tree visualization
systems through a more elaborate node layout algorithm.
This algorithm enhances the usefulness of cone tree visualization for large hierarchies by all but eliminating clutter.

1.

presentation: we improve on the layout algorithms for
cone trees, removing all visual clutter, making better
use of colour and node shape, and providing fish-eye
viewing, as will be discussed in sections 2 and 2.5;

2.

animation: we have implemented both automatic animatron and hand-coupled rotation, as will be discussed
in section 2.4:

3.

intelligent filtering: we allow users to interactively
prune the hierarchy through dynamic queries, as will
be discussed in section 3.

In addition to these improvements to the visualization
of hierarchies, we provide the ability to directly modify
the hierarchy without ever departing from the presentation
metaphor, as will be discussed in section 4.

1 Introduction
A number of systems have been implemented which
attempt to allow a user to view large hierarchies, centered
around the use of three dimensional visualization in general, and cone trees in particular [9]. A cone tree is a three
dimensional representation of hierarchical information in
which one node of a tree is located at the apex of a cone,
and all of its children are arranged around the circular base
of the cone. The goal of a cone tree visualization is to
present a structure in such a way that the entire hierarchy,
or a large percentage of it, is visible without scrolling.

This paper will describe the implementation of fsviz,
showing how we use these three techniques to allow users
efficient access to hierarchies of theoretically arbitrary
size. We will also present some preliminary empirical
results on evaluating the efficacy of fsviz. Although fsviz
could be used to interact with any hierarchy, we will
exemplify its use in the domain of a Unix file-system hierarchy.

A few groups (191, 1131)have constructed prototype
visualization tools using cone trees. However, these systems all lose their efficacy once the hierarchy to be visualized exceedsapproximately 1000 nodes, primarily due to a
prohibitive level of visual clutter. In [S] the authors state
“there are limits to the size of the hierarchy that can be
effectively displayed. . .more than about 1000 nodes, 10
layers”. This paper describes a research system, called

Visual effects or “channels”, such as colour, text,
shape, and size, are the mechanisms by which information
is conveyed to the user. Choosing appropriate channels
involves determining which information is interesting and/
or useful to the user, determining which channels are
available (from a technical point of view), and mapping
channels to information to be conveyed. Also, problems
of “information overload” must be considered.

O-8186-7201-3/95 $04.00 0 1995 IEEE

Proceedings of the Proceedings on Information Visualization (INFOVIS '95)
0-8186-7201-3/95 $10.00 © 1995 IEEE

2 Presentation

74

2.1 Colour
Previous cone tree implementations (operating in the
same problem domain) made use of colour in various
ways, such as using varying colour to indicate the age of
files represented in the tree. In the implementation presented here, colour conveys file size. A smooth range of
colour is more likely to intuitively indicate increasing file
size: the greater the saturation of the colour, the larger the
file.

2.2 Shape
3 dimensional node shape was adopted as an altemative to texturing of the nodes. From initial prototyping
with fsviz, we have observedthat users can easily pick out
files of different types when the nodes representing those
files are different shapes. This schemehas the advantage
that node shapesremain distinctive even at relatively low
resolution. Even at a resolution of 10 pixels by 10 pixels,
different node shapes are easily distinguishable. This is
not true of most other visual channels, such as texture

However, this is an inefficient use of colour, because
files are nor evenly distributed by size: the median size for
a file in a Unix file-system is approximately one kilobyte
[7]. Therefore, a distribution of colour that maps a larger
number of shadesto files that have sizes between zero and
1024 bytes is required. Recent samples collected at the
University of Waterloo show only a slightly different distribution from that in [7].

1131.
The adopted schememaps C language source files to
spheres, executable files to tetrahedra, and other files to
cubes. While other geometries could easily be added to
represent more file formats, there is undoubtedly a point at
which further node shapeswill not improve the visualization.

Thus, our schememaps ranges of file sizes to colours
such that equal colour distribution is given to size ranges
containing an equal number of files. For example, files
smaller than 256 bytes are shown in green and files
between 256 bytes and 1K are shown in blue---the particular colours are chosen arbitrarily. Within these ranges, the
saturation of the colour varies with size.

It should be noted that in the printed representationof
the visualization, it is difficult to distinguish node shapes.
These shapes are easily distinguished (at the resolution
mentioned above) on the screen.
2.3 Text
While colour, shape,and size of nodes are useful cues
for identifying either continuously varying data (such as
size) or discrete data with a small range of values (such as
file type), they are not useful for presenting datasuchas
file names. This information is conveyed via text placed
near the nodes in the tree. The text scales and rotates
along with the tree such that it always faces the viewer.

Also, the colour of arcs connecting nodes in the tree
indicates the depth in the tree of the node at the “top” of
the arc. As you move down the tree, the colours of the
arcs change smoothly from blue to red. This application of
colour is especially useful when the tree is being viewed
from the top---it is very easy to identify the hierarchical
relationship between nodes, even though only two dimensions are being used.

An example of a tree indicating the use of text and
shapeis given in Figure 1.

Another application of colour is used for colouring
the arcs in the tree. We map the type (and hence colour) of
the file representedby the node at the “lower” end of an
arc to the colour of the arc.
2.1.1 Possible Enhancements
Rather than basing the distribution of colours of nodes
in the tree on a pre-calculated statistical summary of file
sizes, an accurate distribution of colours, and their saturation levels, could be calculated at runtime. However, this
poses its own problems as a user may have difficulty in
adapting to a colour schemethat changesfrom file-system
to file-system. At the least, the ability to revert to a standard colour schemeshould be included.
In addition, colour must be used in such a way that the
information which it conveys is attainable through other
visual channels such as texture, since a large percentageof
the population is at least partially colour-blind.

Figure 1: A Tree with Node Shapes and Labels

75

Proceedings of the Proceedings on Information Visualization (INFOVIS '95)
0-8186-7201-3/95 $10.00 © 1995 IEEE

2.4 Animation
Animation is applied in two forms within fwiz. The
first is hand-coupled rotation, in which the user can
directly manipulate both their view of the cone tree strncture and the orientation of the cone tree’s subcomponents.
In previous studies, such as [14], hand-coupled rotation
has been shown to be an effective aid to the human cognitive processeswhen working with three dimensional constructs.

can effectively allocate spacearound the radii of the cones
in the tree to accommodate the children. In this way, all
overlap between subtrees can be eliminated. Overlap in
this senserefers to the intersection of individual cones in
the three-dimensional tree, rather than the visual overlap
that occurs when the three-dimensional representation is
projected onto two dimensions.

Also, the software provides automatic animation in
two ways. First, the user can select a set of nodes in the
tree and fsviz will perform sequenceof “zooms” to bring
the user directly to that set. Second,when a file is selected
using the file information browser, the node representing
that file will be rotated to the front of the tree. This rotation is accomplishedstep by step from the node upward to
the root. The node first rotates to the appropriate side of
the cone in which it resides, then its parent rotates to the
front of its cone, and so on, until the root is reached. In
this way the user can keep track of the transformation that
is taking place. This second technique is similar to that
used in [9].

i-l

.

/

Figure 2: Tree Layout

2.5 Tree Layout
While a simplistic node layout algorithm for cone
trees often produces satisfactory results for small trees,
such algorithms are often inadequatefor large hierarchies
(even for more than a hundred nodes). A simple algorithm
may determine the radii of the sub-coneswithin the tree
based solely on the depth of the parent node in the tree.
For example, considerthe function:

The algorithm used by fsviz commences layout at the
bottom of the tree (at level n) with a cone radius basedlinearly on the number of nodes in the cone. At all levels
above, the circumference for a cone at level n-l is estimated by:
C II-1 z 2-&n

where rkn is the radius of child i at level n. The radius is
then calculatedwith:

R(h) = &
Here, R(h) representsthe radius of a tree at height h,
and Ri is some fixed initial radius. Determining cone radii
using this function produces satisfactory tree layouts for
small trees. However, the applications of cone tree techniques to large information hierarchies are more interesting. We therefore require a more elaborateschemefor tree
layout.

Also, the arc length required for a child will be estimated
by:
sip r.z -

1, n + ‘i, n

Subtrees are placed around the cone, with angles defined
by:

Other attempts at reducing clutter in visual representations of hierarchical information have used a radically
different mechanism for display, such as [4], [5]. These
algorithms can be quite effective, and may be applicablein
concert with the layout algorithm described below. fmiz
also addressesthe idea of “focus” and fish-eye viewing, as
describedin [4], in concert with dynamic queries.

In this way, each cone occupies as much space as it
requires in its parent’s cone.
Finally, to continue proper layout, the radius of the
largest child is added to the required radius of the parent.
This adjustedradius is used for the remainder of the layout

Becausethere is no restriction that a tree to be visualized will be fully n-branching, as is assumedby [S], one

76

Proceedings of the Proceedings on Information Visualization (INFOVIS '95)
0-8186-7201-3/95 $10.00 © 1995 IEEE

,

---

calculations (up the tree), and the original radius is used
for rendering. A top view of a rendered tree is shown in
Figure 3, demonstratingthis layout algorithm in operation.

where n is the node being considered, y is the current
focus, and root is the root node.
fsviz applies dynamic queries in an implementation of
fish-eye views, as describedin section 3.3.

It is important to note that overlap is only truly eliminated when the number of nodes in each cone is large.
This is due to the fact that the approximation to the circumferenceof a cone breaks down when that cone has few
children. A typical example is the case in which a node
has two children, both of which are very large---the circumference of the node’s cone will be estimated as the
sum of the radii of the two children, which is obviously
too small, and the children will overlap. This problem is
addressedin fsviz by scaling each cone up by a factor
which varies inversely as the number of children in the
cone and directly as the ratio between the largest child and
the estimated parent radius. This technique has proved
appropriatein practice.

2.7 Automatic Subtree Coalescing
A final graphical, as opposedto semantic, technique
was applied in fsviz to reduce the number of nodes displayed at a given time. Whenever a subtreeis sufficiently
distant from the user’s focus node so as to be practically of
no interest to them, the subtreeis collapsed, or coalesced,
into a single graphical representation. This representation
is currently a tetrahedron,whose colour reflects the size of
the directory itself. The threshold distance beyond which
this coalescingtakes place is adjustable,via a slider. .

Figure 4: A Coalesced Tree
Figure 3 and Figure 3 show two views of the same
tree, the first with distant subtreescoalescedand the second, where the user has zoomed in slightly on the tree,
with those same subtreesexpanded.

Figure 3: A Top View

2.6 Fish-eye Viewing
Fish-eye views, as defined in [4] and [ll], are motivated by the desire to satisfactorily balance local detail
and global structure (or context) when displaying data
visually. The basic mechanism depends on a Degree of
Interest (DOI) function which defines the “importance” of
a particular node in the structure. An a priori importance
typically plays a role in the DO1 function. Nodes are then
displayed basedon their relationship to a threshold importance. A typical example using tree structures defines the
a priori importance of a node as the negative distance
from the root of the tree to that node. The distance from a
particular node, called thefocus, completes the DO1 function:

Figure 5: The Same Tree Expanded
This technique serves two purposes: it produces an
improvement in rendering efficiency, sincefsviz does not
attempt to render distant nodes (which are so small as to
have little meaning to the user), and visual clutter is
reduced. For example, when attempting to render very
large numbers of small nodes and arcs, one typically runs
into anti-aliasing problems. This is eliminated by coalescing distant sub-treesinto a few, relatively large polygons.

77

Proceedings of the Proceedings on Information Visualization (INFOVIS '95)
0-8186-7201-3/95 $10.00 © 1995 IEEE

3 Information Filtering

be specified in order to prune the tree, as above.

The application of dynamic queries ([l], [2]) to the
visualization of hierarchical structures has not been
explored in previous cone tree prototypes. Dynamic queries are a direct manipulation mechanism for databases
which allow “users to formulate queries with graphical
widgets, such as sliders” [2] rather than in a separatequery
language. The results of the query immediately affect the
information presented. For example, the fsviz implementation of dynamic queries allows the tree to be pruned or
expanded---nodes are hidden or shown---based on the
value of some attribute of the nodes, such as file size or
usage frequency.

This technique is very powerful, as it captures the
intuitively appealing notion that the nodes which have
been of greatest interest to the user in the past are those
likely to be of interest in the future.
Several techniques were considered for the collection
of file usage measurements. The most effective but most
difficult to implement schemeis that of hooking the underlying file-system, so that accessesto files can be recorded
by the kernel when files are opened. This scheme also
offers considerable flexibility as different types of
accessescan be recorded individually. While this scheme
offers the greatest functionality, it is usually difficult to
rebuild the kernel of a multi-user computer. For this reason, a second, simpler scheme was adopted for prototyping purposes. This second approach utilizes a modified
shell to record occurrences of file names on command
lines. The numbers collected using this mechanism supply
an approximation to actual file accessmeasurements.

By allowing a user to dynamically specify queries and
have these queries control the class of information visualized, we can utilize fsviz as a semantic filter. By doing so,
we can access arbitrarily large information landscapes,
under the assumption that the user can narrow the scope of
the search---and thus the information which needs to be
visualized---through dynamic queries.

Once executing, fsviz allows the user to specify maximum and minimum accesscounts for the files that should
be displayed in the tree. As with dynamic queries on file
size, the tree display is updated dynamically when the
maximum or minimum values are changed.

The coupling of our improved layout algorithm and
dynamic queries means that a user can start by visualizing
an arbitrarily large hierarchy, and through a sequenceof
dynamic queries, zooms and animated rotations, quickly
locate a small section of interest within the hierarchy.

3.3 Implementing Fish-eye Viewing
As mentioned above, in section 2.6, fsviz implements
fish-eye viewing using dynamic queries. The system
implements the DO1 function which bases node importance on the node’s distance from the root and on the
node’s distance from the current focus. A double-box
slider is then used, as for other dynamic queries [l], to
select a range of DO1 values. Nodes with degreesof interest outside the specified range are pruned from the tree. In
this way, the fish-eye technique implemented is a semantic
fish-eye, rather than a graphical fish-eye as described by

Three examples of dynamic queries using fmiz are
now presented.
3.1 Node Size Queries
As mentioned above, node size is one possible
attribute that could be used for dynamic queries. fsviz
allows the user to dynamically hide nodes which represent
nodes which are larger than some maximum size or
smaller than some minimum size. The maximum and
minimum sizes are adjustable dynamically using a doublebox slider.

WI.

The tree display changesdynamically when the maximum or minimum node size is modified by the user.
Wheln one of the size bounds changes,the tree is redrawn,
with nodes representing nodes with sizes outside the specified range not displayed.

4 Tree Manipulation
While previous cone tree efforts provide mechanisms
by which the displayed tree structure can be manipulated,
they provide little or no functionality for manipulation of
the information hierarchy. fsviz goes beyond previous
cone-tree implementations in that it not only displays huge
hierarchies, but allows users to control the underlying
information structure without leaving the underlying presentation metaphor. For example, a “drag-and-drop”
interaction capability was added to allow users to move
and copy subtrees from place to place. Furthermore, a
combination of control panel buttons and tree selections
allow directory creation and “find” operations.

3.2 Frequency of Usage Queries
Another interesting application of dynamic queries to
the visualization of hierarchies addresses the relative
usage frequency of the nodes in the hierarchy. That is,
how often a particular node (in our example, a file) has
been accessed, relative to the other files in the tree,
becomes another attribute of the node representingthe file.
Maximum and minimum values for this attribute can then

78

Proceedings of the Proceedings on Information Visualization (INFOVIS '95)
0-8186-7201-3/95 $10.00 © 1995 IEEE

Figure 6: The Main Window Showing a Large Hierarchy
4.1 Possible Enhancements
In [8] there is a description of cam trees, in which the
tree grows left to right rather than top to bottom. Such a
modification to the software would be almost trivial and
may ease some of the text display issues that arise.

The user interface for fsviz comprises three windows. The main window (Figure 3) contains the rendering
of the directory and file hierarchy. A control panel contains a file information browser (showing details on
selectedfiles as described below) along with a number of
buttons used to control the operation of the program. A
visual key window describes the meaning of the various
types of visual information used in the rendering, such as
node colour and node shape.

The implementation of Tversky et al [13] permitted
the user to enable and disable individual channelsof visual
information. The selective processing of information thus
made possible may be of substantial benefit to the visualization process. This also suggestspossible enhancements
of configurability, such as allowing the user to dynamically allocate visual channels to particular features of the
underlying structure. One possible feature would permit
the user to choose the file type to node shape mapping
according to personal preference. Although configurability lends considerableflexibility to a visualization system,
one must be careful not to place too much weight on it at
the expense of a useful base-level allocation of the visual
channels to more important aspectsof the available information.

The user can select individual nodes in the tree structure by pointing and clicking. When selecting nodes with
children, further mouse movement and button combinations allow rotation of the subtree. Functionality to shrink,
enlarge, and collapse subtrees is also in place. The collapse feature is convenient when browsing larger structures; subtreesthat clutter the view can be collapsed to a
“tag” node, shown as a black disc. Shrink and enlarge
operate similarly, allowing control over the radii of individual subtrees.
Other interaction techniques including zooming to a
selected node and, for nodes that are symbolic links,
zooming to the linked-to node.

Further user interaction issuesinclude:
l

Also, any node in the tree can be made the apparent
root, biding all nodes not descendantsof this new root. In
this way, the focus can be shifted to a particular portion of
the tree. A small stack of root nodes is maintained to
allow the user to progressively refine their focus in the
tree.

.

79

Proceedings of the Proceedings on Information Visualization (INFOVIS '95)
0-8186-7201-3/95 $10.00 © 1995 IEEE

the ability to arbitrarily reorder nodes in the tree. In
this way, users could group nodes they wish to consider together;
animation techniquesbeyond the simple “zoom-andpan” scheme implemented here. A more elaborate
animation sequence that simulates a tree “fly-

through” might be an effective visualization mechanism.

fmiz has eliminated visual clutter that a user is able to eas-

ily navigate around the hierarchy without losing context.
Thus, fwiz provides a means of scaling to arbitrary large
hierarchies, whereas other cone-tree implementations do
not.

5 Implementation
fsviz is currently implemented under the Silicon
Graphics Graphics Library (GL), running on both the IRIS
Indigo/XS24 and the Onyx/Reality Engine.

6.1 Evahation
A small user test was conducted to provide some idea
as to the usability offmiz. Five users were provided with a
brief introduction to the operation of the application and
were asked to perform three tasks in the context of a small
file-system hierarchy. The tasks were:

There are two primary data structuresemployed in the
implementation of fmiz. The first is a multi-way tree that
is constructed at initialization time from Ehe file-system
information. Each node in this tree represents a file or
directory and contains file-system information (returned
by stat()) and layout information such as node location in a
modeling coordinate system. Also, if the node is representing a directory, it will contain pointers to the node’s
children.

1. Find the larged file in the tree.
2.

Find Eheall files in the tree larger than 1M.

3. Find the the 4 most frequently accessedfiles in the
tree.

The second data structure used is an object hierarchy.
This directed acyclic graph is generated at initialization
time from the multi-way tree. The hierarchy contains the
transformationsto place nodesin their correct positions, as
well as all of the primitive objects used for nodes.

The users were then asked to perform the same tasks
using standard Unix shell utilities (no particular utilities
were suggested).The users had no prior experience with
fsviz, but each had more than 5 years experience with
Unix. The timing results collected are shown below (all
times are in seconds).

6 Results
In the current implementation of f&viz, hierarchies
larger than approximately 2000 nodes suffer from
extremely poor interactive performance. Larger hierarchies,up to approximately 5000 nodes,have been successfully rendered, without breakdown of the layout
algorithm. That is, hierarchies of up to 5000 nodes have
been rendered without having any node obscure any other
node.
There is no theoretical limit to the size of the hierarchy that fsviz can display. However, as with any visualization mechanism, a lack of screenspaceand resolution will
eventually place a practical limitation on the amount of
information that can be conveyed. The point at which the
screenresolution limitation manifests itself in fmiz is the
hierarchy size at which some of the node shapescan no
longer be distinguished, with the whole tree in view. With
hierarchieslarger than about 1000 nodes, someof the most
distant nodes are no longer identifiable.

The third task was not tested in the shell environment,
as Unix does not provide the facilities, in general, for file
access measurements.Four of the five users solved the
first and second tasks identically using shell utilities,
explaining the identical times.
Examining the times for completion of the various
tasks, we see that in only one case was the task performed
more slowly with fmiz. We construct a small-sample Student’s t statistic for the first task with the hypothesis that
the mean time for perform&g the task is equal for @viz and
shell utilities. We find that 2%2.11, which is inside the
rejection region for the a = .l level of significance. Thus,
the chances are 1 in IO that our test could lead us to conclude that the task was performed faster with fsviz if in fact
this conclusion is false.

It is important to note, however, that this limit is not
due to visual clutter, as was the case with earlier cone-tree
implementations. We have shown that huge hierarchies
can be displayed by fsviz without visual clutter. The current limitation is merely that not aEZof the nodes will be
detailed enough for a user to immediately perceive their
semantic status---a limitation which the system ameliorates in part by allowing the user to navigate, pan, and
zoom around the hierarchy, and in part by coalescingdistant trees into single, large nodes. It is precisely because

I

Proceedings of the Proceedings on Information Visualization (INFOVIS '95)
0-8186-7201-3/95 $10.00 © 1995 IEEE

Performing the same analysis on the data from the
second task, we find t=-1.48, which is inside the rejection
region for the a = .2 level of significance. For this task,
80

the chances are 1 in 5 that our test could lead us to conclude that the task was performed faster with fsviz if in fact
this conclusion is false.

colour, texture, node shape, node size, and text for representation of the hierarchy, as well as the possibility of user
interaction with the visualized structure. By paying careful attention to node layout, we were able to addressone of
the most severe limitations of previous studies: we
removed all visual clutter. Possibly more significantly,
fsuiz allows for automatic coalescing of nodes, which
means that distant information is not lost, it is merely summarized into a single identifiable polygon. Finally, we
have explored the composition of cone trees, as a display
technique, with dynamic queries, as an information filtering technique.

As the third task was not performed in the shell environment, it cannot be used for comparison.
This evaluation is obviously preliminary, and was
conducted primarily to provide support for informal experience indicating the strengths of fmiz. We see some indication that fsviz is useful in performing certain tasks
concerning hierarchical information. Furthermore, we
conducted the study using a relatively small file system
hieararchy. We expect that the advantageof fsviz would be
more dramatic with a larger hierarchy.

fsviz also goes beyond previous implementations in
that it permits input in the form of user modifications to
the visualized hierarchy. This permits a user to perform
useful work within the visualization metaphor,rather than
using it as an “output-only” tool.

In our experience,fsviz is most suited to helping users
answer structural and trends-related questions. For example, a user wishing to find a particular file in a file-system
tree will not find the task faster or more easily using fsviz
versus standard Unix shell tools. However, a user wishing
to determine the approximate number of files whose
attributes satisfy a particular set of constraints will
undoubtedly have the desired results in a shorter time if
@viz is used. Tasks with a broader scope, such as determining which branches of a file-system tree contain clusters of large files, will demonstrate the strengths of fsviz
even more dramatically. Looking for patterns of usage--such as ascertaining if the most frequently accessedfiles in
a tree reside in the same directory, or finding the smallest
subtree that contains all of the most frequently used files--are also tasks well suited to tbe structure of fsviz.

Future work must consider the problem of scalability
to larger structures in terms of tree layout and condensation of information. Also, user-based experimentation
could shed considerable light on the appropriate use of
colour and other visual channels.

References
[ 11C. Ahlberg,C. Williamson,B. Shneiderman,
“DynamicQueries for InformationExplorationandEvaluation”,Proceedings of
CHI ‘92,1!-@2,pp. 619-626.
[2] C. Ahlherg, B. Shneiderman,
“Visual Information Seeking:
Tight Couplingof DynamicQueryFilters with StarfieldDisplays”, Proceedings of CHI ‘92, 1992,pp 619-626.
[3] G. W. Fumas,“GeneralizedFisheyeViews”, Proceedings of
CHI ‘86, 1986,pp. 16-23.
141H. Koike,H. Yoshihara,“Fractal Approachesfor Visualizing
HugeHierarchies”,Proceedings of 1993 IEEE/es Symposium on

6.2 Limitations/Future
Directions
Robertson et al [8] considered the effectiveness of
cone trees in balanced hierarchies as somewhat doubtful
since it is difficult to distinguish between virtually identical substructures from a distance. The extension of cone
tree-like ideas into larger hierarchies, possibly incorporating statistical summaries to give high level information
should be considered. For example, in a very large structure a high level summary might show a directory containing a large number of files as a special icon coloured to
indicate the average size of the files within the directory.
Many extensions of this type of representation are possible.

Visual Languages, 1993, pp. 55-60.

[S] S. J. Mulbnder, A. S. Tanenbaum,“ImmediateFiles”, So&
ware-Practice and Experience, Vol. 14, April 1984,pp. 365368.
161G. Robertson,S.Card,J. Ma&inlay, “The InformationVisualizer, An Information Workspace”‘Proceedings
,
of CHI’91,

1991,pp. 181-188.
(71G. Robertson,S. Card,J. Ma&inlay, “Cone Trees: Animated
3D Visualizationsof Hierarchical Information”,Proceedings of
CHI’91, 1991,pp. 189-194.
[S] M. Sarkar,M. Brown, “GraphicalFisheyeViews”, Communications of the ACM, Vol. 37 Num. 12, 1994,pp. 73-84.
[9] 0. Tverslcy,S. Snibhe,R. Zeleznik,“Cone Treesin the UGA
GraphicsSystem: Suggestionsof a more RobustVisualization
Tool”, TechnicalReportCS-93-07,Departmentof ComputerScience,Brown University,February1993.

7 Conclusions
Cone trees provide aesthetically pleasing representations of hierarchical information in three dimensions.
Although there is still no conclusive evidence to support
their usefulness in visualizing large structures in general,
fsviz addressesseveral of the usability issuesraised by previous implementations. Such issues include the use of

[lo] C. Ware, D. Hui and G. Grank, “Visualizing

81

Proceedings of the Proceedings on Information Visualization (INFOVIS '95)
0-8186-7201-3/95 $10.00 © 1995 IEEE

Object Oriented

Softwareia Three Dimensions”,Proceedings of CASCON ‘93,
Toronto,Ontario,24-28October1993,pp. 612-620.

