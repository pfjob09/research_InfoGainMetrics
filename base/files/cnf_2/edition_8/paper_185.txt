Pacific Graphics 2008
T. Igarashi, N. Max, and F. Sillion
(Guest Editors)

Volume 27 (2008), Number 7

Sketching MLS Image Deformations On the GPU
Yanlin Weng†
†

Xiaohan Shi‡

University of Wisconsin - Milwaukee

‡

Hujun Bao‡

Jun Zhang†

State Key Lab of CAD&CG, Zhejiang University

Abstract
In this paper, we present an image editing tool that allows the user to deform images using a sketch-based interface.
The user simply sketches a set of source curves in the input image, and also some target curves that the source
curves should be deformed to. Then the moving least squares (MLS) deformation technique [SMW06] is adapted
to produce realistic deformations while satisfying the curves’ positional constraints. We also propose a scheme to
reduce image fold-overs in MLS deformations. Our system has a very intuitive user interface, generates physically
plausible deformations, and can be easily implemented on the GPU for real-time performance.
Categories and Subject Descriptors (according to ACM CCS): I.3.5 [Computer Graphics]: Computational Geometry
and Object Modeling-Boundary representations

1. Introduction
Image deformation has long been an active research area in
computer graphics and has a number of useful applications.
For example, a user might want to change the pose of a person or an object in a photo. A user might also want to interactively manipulate a 2D image in real-time live performance.
Most of these applications demand intuitive user interaction,
realistic deformation results, and interactive performance.
Many image deformation methods have been proposed in
the literature. Recently, several works [ACOL00, IMH05]
have shown that, for realistic shapes, deformations should
be as rigid as possible. Schaefer et al. proposed to deform
images based on Moving Least Squares (MLS) [SMW06]
using various classes of linear functions including affine,
similarity and rigid transformations. With this technique, the
user deforms images by specifying point and line segment
constraints. Closed-form solutions are derived by minimizing the amount of local scaling and shearing. By defining
least squares problems on each grid point, the MLS technique does not need to solve a global least squares problem
as in previous methods [ACOL00,IMH05] and thus achieves
faster deformation speeds.
However, in the practical use of the MLS deformation
technique, we found that sometimes point and line segment
constraints are inconvenient for representing user-specified
deformations. For example, the user might want to bend the
Leaning Tower of Pisa into an ’S’ shape; another example
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.
Published by Blackwell Publishing, 9600 Garsington Road, Oxford OX4 2DQ, UK and
350 Main Street, Malden, MA 02148, USA.

is that the user might want to change face contour of a cartoon character into a specific shape (see Figure 1). Performing such deformation tasks using point or line segment constraints requires numerous handles and/or tedious tuning of
the handle positions. We also found that the parameter in
MLS deformations affects the deformation quality greatly.
Particularly, fold-overs may occur in the deformed image
with badly-chosen parameters (see Figure 2). And a constant
parameter set by an experienced user never fulfills various
handle configurations which may change from time to time.
In this paper, we propose to enhance the MLS image deformation technique in three aspects. First we introduce a
sketch-based user interface: the user simply sketches a set of
source curves in the input image and also some target curves
that the source curves should be deformed to. Then the MLS
technique is adapted to produce realistic deformations while
satisfying the curves’ positional constraints. Secondly, to
reduce fold-overs while maintaining high quality deformation results, we introduce a customized iterative optimization
procedure to solve for the optimal parameter value. Finally,
the whole algorithm is implemented efficiently on the GPU,
and achieves real-time performance.
2. Related Work
Image deformation techniques have been well studied in the
area of computer graphics, and we discuss here only those
works most related to ours.

1790

Y. Weng et al. / Sketching MLS Image Deformations On the GPU

Early techniques such as free-form deformation [SP86,
LCS95] use grids as deformation handles and typically require aligning grid lines corresponding to the control points
of the spline to features in the image, which is cumbersome
for the user. Beier et al. [BN98] presented an image morphing technique by using lines as control handles. However,
this method may produce complicated warps that can suffer
from undesirable folding in the deformed image.
Igarashi et al. [IMH05] propose to triangulate the input
image and deform the triangulation via solving a linear system whose size is equal to the number of vertices in the
triangulation. The amount of scaling and shearing for each
triangle is minimized to produce as-rigid-as-possible deformations. This method, however, can only run at interactive
frame rates for a coarse triangulation, resulting in noticeable
discontinuities in deformed images. Weng et al. [WXW∗ 06]
present a nonlinear optimization approach to 2D shape deformation. The algorithm aims to preserve the Laplacian coordinates of the shape boundary and local area of the shape
interior. Physically plausible results can be achieved at the
cost of minimizing a nonlinear energy through an iterative
Gaussian-Newton method. In some image applications involving warping, it is usually desirable to preserve some
regions of the image, such as foreground objects or other
prominent parts. Gal et al. [GSCO06] presented a particular
formulation of the Laplacian editing technique which can
preserve the shape of these regions by constraining their deformation to be a similarity transformation. The MLS deformation technique [SMW06] also tries to minimize local scaling and shearing. However, only a small linear system (2×2)
is solved at each point in a uniform grid, allowing much
higher performance. In their current system, only point and
line segment handles are supported. Recently physics-based
models are also employed to enhance as-rigid-as-possible
deformations with elastics [SGW07]. More recently, Lipman et al. [LLCO08] proposes a conformal/quasi-conformal
deformation technique for 2D/3D shapes. Deformations are
performed by manipulating a cage which encloses the shape.
Each point inside the cage is then deformed by transforming
it using a linear combination of the cage geometry using precalculated Green coordinates. Therefore, this method does
not need a global optimization.
To provide an intuitive way to manipulate images, Eitz et
al. [ESA07] propose a sketch-based user interface in which
the user outlines the source image region and sketches a new
boundary shape onto the location where this region is to be
pasted. The correspondence between the source and target
boundary curves are automatically determined by an alternating optimization process. The method needs to solve a
global linear system to minimize a shape distortion energy.
Our deformation is based on moving least squares and only
needs to solve a small linear system.
Removing fold-overs has been a longstanding problem
in image deformation techniques. In early image warping

Figure 1: Sketch-based MLS image deformation. Left column: the user defines curve handles by sketching strokes;
Right column: the user sketches new strokes to deform the
images. In the upper row, one stroke is used to hold the background crowd and building while the other stroke deforms
the Leaning Tower of Pisa into an ’S’ shape. In the bottom
row, a cartoon character is given a typical Popeye’s chin
with only one stroke. The yellow curves are the B-splines,
and the green polylines show the control points connected in
order.
methods, this problem is solved for a small subset of interpolation methods. For example, for the thin-plate stiffness
equations, additional constraints can be placed to force the
Jacobian determinant to remain positive [LCH94, LW94].
For multilevel B-splines, a clipping of spline control points
can ensure the one-to-one warping property [LCS95]. For
triangulation based warping, a method using time-varying
triangulation has been proposed [FM98]. A general solution proposed by Tiddeman et al. [TDR01] takes a set of
user specified translations and constructs a set of one-toone warpings by interpolation and scaling, which are then
concatenated to produce a single one-to-one warping function which prevents fold-overs in the resultant warped image. However, the method is not guaranteed to converge in
a finite number of iterations and its performance is thus unclear. Also the deformation quality may degrade after applying the warp. Our method, customized for the MLS deformation method, reduces image fold-overs while maintaining
high quality deformations in real-time.
3. MLS Deformation with Curves
The need for a sketch-based user interface in image deformation comes from the following fact. In image deformations,
handles are often placed on the features of the image for intuitive interaction. The shape of the handle should match the
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

1791

Y. Weng et al. / Sketching MLS Image Deformations On the GPU

shape of the feature. In practice, many features have a curved
shape (e.g., the contour of a face). In these cases, point and
line segment handles used in the original MLS deformation
technique [SMW06] are inconvenient. Therefore we introduce a sketch-based user interface into the MLS deformation
framework to allow fast sketching of image deformations.

Our system uses uniform cubic B-splines to represent usersketched curves. For a curve p(t), t ∈ [0, 1], with n segments,
there are n + 3 control points. Denote as ak (0 ≤ k ≤ n + 2)
the k-th control point of curve p(t). p(t) can be computed as
n+2

∑ Nk (t)ak ,

where Nk (t) is the blending coefficient of the kth control
point at t.
For the i-th segment (1 ≤ i ≤ n) of a uniform cubic Bspline, t ∈ [(i − 1)/n, i/n] and the blending coefficient Nk (t)
is defined as

(−t˜3 + 3t˜2 − 3t˜ + 1)/6,
k == i − 1;




k == i;
 (3t˜3 − 6t˜2 + 4)/6,
Nk (t) =
(−3t˜3 + 3t˜2 + 3t˜ + 1)/6, k == i + 1;


 t˜3 /6,
k == i + 2


0,
otherwise,
where t˜ = t ∗ n − i + 1.

When the user draws a curve, a B-spline is created and
the positions of its control points are optimized so that the
B-spline curve fits the user-drawn curve. In our current implementation, we set the number of B-spline control points
to 5, which means n = 2. Since n is known, solving ak is
reduced to a polynomial fitting problem, which is solved by
minimizing the squared distance between the B-spline and
the user-drawn curve. This can be easily done through least
squares optimization. After fitting, the user-drawn curve is
discarded and the B-spline is used for subsequent deformations.
In the following, we assume pi (t) is the ith source curve
and qi (t) is its corresponding target curve that pi (t) is to be
deformed to, which means a point on pi (t) with the parameter value t ′ corresponds to the point on qi (t) having the same
parameter value t ′ . Denote as ai,k and ci,k the kth control
points of curves pi (t) and qi (t) respectively.
3.2. Formulation
The formulation of curve handles is similar to the formulation of line segment handles in [SMW06]. Given a point v
in the image, the goal is to solve for the best transformation
(M, T ) that minimizes

i

1
0

wi (t)|pi (t)M + T − qi (t)|2 dt,

|p′i (t)|
,
|pi (t) − v|2α

(3)

where p′i (t) is the derivative of pi (t).

T = q∗ − p∗ M,

(4)

where p∗ and q∗ are the weighted centroids:
p∗ =

1
0 wi (t)pi (t)

∑i

∑i wi (t)

, q∗ =

∑i

1
0 wi (t)qi (t)

∑i wi (t)

.

(5)

(1)

k=0

∑

wi (t) =

Eq.(2) is quadratic in T and can be solved in terms of the
matrix M

3.1. Curve Representation

p(t) =

where M is a linear transformation matrix and T is a translation. wi (t) is defined as

(2)

c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

By replacing T with (q∗ − p∗ M) in Eq.(2), we get

∑
i

1

0

wi (t)| pˆi (t)M − qˆi (t)|2 dt,

(6)

where pˆi (t) = pi (t) − p∗ and qˆi (t) = qi (t) − q∗ . Note that
pˆi (t) and qˆi (t) are still B-splines, and their control points
are simply computed as aˆi,k = ai,k − p∗ and cˆi,k = ci,k − q∗
respectively.
In the following, we examine the situations where M is a
similarity or rigid-body transformation, which often generates visually pleasing deformation results.
Similarity Curves For similarity transformations, the matrix M is constrained to satisfy M T M = λ 2 I for some scalar
λ . According to the derivation in [SMW06] and the B-spline
representation (Eq.(1)), the minimization problem in Eq.(6)
can be rephrased as finding a column vector M1 that minimizes

2

aˆi,0


T
⊥
 −aˆ


cˆi,0


i,0 
1




.
.






.
.
L
M
−
w
(t)
∑ 0 i

 1 
 dt,
.
.



i
T
 aˆi,n+2 
cˆi,n+2 
−aˆ⊥
i,n+2
where M1 is the first column vector of M, and
L=

N0 (t)
0

0
N0 (t)

···
···

Nn+2 (t)
0

0
Nn+2 (t)

.

We define ⊥ as an operator on 2D vectors such that (x, y)⊥ =
(−y, x).
This energy has a unique minimizer, yielding the optimal
transformation matrix M:

T
aˆ j,0


 −aˆ⊥ 
cˆTj,0
−cˆ⊥T

j,0 
j,0




1
..
..
..

 Wj 
,
M=
∑




.
.
.
µs j 

 aˆ j,n+2 
cˆTj,n+2 −cˆ⊥T
j,n+2
−aˆ⊥j,n+2
(7)

1792

Y. Weng et al. / Sketching MLS Image Deformations On the GPU

Figure 2: MLS image deformations with different α values. If α is not properly chosen, the deformation result suffers from
fold-overs and contains large distortion (middle). A well chosen α can eliminate fold-overs and distribute distortions more
evenly (right).
where µs is the scaling constant defined by

µs = ∑ ∑ ∑
r

j

c

where A j is from Eq.(10).

aˆ j,r aˆTj,c δ jr,c ,

and W j is a block-structured weight matrix:

δ j0,0
δ j0,n+2
0
···

0,0

···
0
δj
0


.
.
..
.
..
..
..
Wj = 
.

 n+2,0
0
· · · δ jn+2,n+2
 δj
δ jn+2,0 · · ·
0
0

Then we scale fr (v) to make its length |v − p∗ |, and translate by q∗ to get the final optimal deformation:
0

δ j0,n+2
..
.
0
δ jn+2,n+2







.




δ jr,c is the integral of the weight function wi (t) multiplied
by the blending coefficients of control points:
δ jr,c =

1
0

wi (t)Nr (t)Nc (t)dt.

(8)

The deformation function fs (v) is then computed as
fs (v)

= vM + T = (v − p∗ )M + q∗
A
= ∑ cˆ j,0 · · · cˆ j,n+2 µsj + q∗ ,

(9)

j

where A j is a 2(n + 3) × 2 matrix


aˆ j,0
 −aˆ⊥ 

j,0 


v − p∗
..

A j = Wj 

 −(v − p∗ )⊥
.


 aˆ j,n+2 
⊥
−aˆ j,n+2

T

.

(10)

j

cˆ j,0

···

cˆ j,n+2

fr (v)

| fr (v)|

+ q∗ .

(12)

Note that while the user sketches a new target curve q j to
deform an image, the source curve p j and its control points
a j,k remain fixed. Therefore, much of matrix A j can be precomputed yielding fast deformations. The evaluation of the
matrix A j involves the computation of several integrals, e.g.,
p∗ in Eq.(5), and δ j in Eq.(8). Unlike point and line segment
handles in [SMW06] where these integrals have closed-form
solutions, it is hard to derive a closed-form solution for Bspline handles, even with the help of symbolic integration
packages. We instead adopt a numeric approach to compute
these integrals, which can be significantly accelerated using
modern graphics hardware (see Section 5). In order to do so,
we compute the values of wi (tk )Nr (tk )Nc (tk ) at a set of sampling points {tk } that are uniformly distributed in [0, 1], and
summarize the computed values together.
Ideally, the deformation function fs (v) (or fr (v)) needs to
be computed for every pixel in the image. In practice, following [SMW06], we approximate the image with grids on the
order of 128 × 128 and compute the deformation functions.
We then fill the resulting quads using bilinear interpolation.
3.3. User Interface

Rigid Curves For rigid curves, the transformation matrix must satisfy M T M = I. Following the derivation in
[SMW06], we first compute a rotated vector fr (v):
fr (v) = ∑

fr (v) = |v − p∗ |

A j,

(11)

As demonstrated in the accompanying video, the user first
draws a set of strokes in the image which are fitted to
the source B-splines {pi (t)}. Initially, the target B-splines
{qi (t)} coincide with the source curves {pi (t)}. Then the
user picks a curve pi (t) he wants to manipulate and draws
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

Y. Weng et al. / Sketching MLS Image Deformations On the GPU

1793

a new curve to specify the target shape (i.e., the target
curve qi (t)). The image is deformed immediately. This simple pick-and-redraw user interface is very suitable for fast
sketching of the image, where users can quickly perform
complex deformation tasks with only a few mouse operations. Our system also allows the user to directly move the
control points of the B-splines to fine tune the result.
4. Fold-over Reduction for MLS Deformation
Like most other image deformation methods, the MLS technique may suffer from fold-overs. On the one hand, many
fold-overs are unavoidable because extreme deformations
will certainly cause such fold-overs to happen. On the other
hand, some fold-overs can be avoided with a properlychosen parameter α in Eq.(3) (see Figure 2 for an example).
Based on this observation, we introduce an iterative optimization procedure to solve for the optimal α and reduce
fold-overs while retaining high quality deformations. Note
that this optimal α is computed for a specific deformation.
When the user changes the deformation, this value needs to
be re-computed.
The basic idea is to compute the MLS deformation for
a given α value, evaluate the quality of the deformation,
then adjust the parameter value accordingly. This process is
carried out iteratively until the optimal parameter value is
found. In the following, we first introduce two metrics for
measuring the quality of MLS deformations. We then describe our customized optimization procedure for solving for
the optimal α in MLS deformations.
4.1. Metrics
We use two metrics to measure the quality of MLS deformations: one for fold-overs; the other for distortions. Since
MLS deformations already minimize local non-uniform
scaling and shearing in the least squares sense, we design
the metrics based on only area changes in the deformed image.
Fold-overs Recall that deformations are evaluated for a grid
in MLS deformations, so we define the metric for fold-overs
on quads of the grid. For each quad, if it flips in the deformed
image, its area is counted among the fold-overs:

∑

E1 =

c∈ f lippedquads

|Ac |,

where Ac is area of quad c in the deformed image.
Distortions Similarly, the distortion of the deformed image
can be computed as
E2 =

∑
c∈quads

|Ac − Ac |L ,

where Ac and Ac are the areas of quad c in the deformed and
original images respectively. Note that a different L leads to
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

Figure 3: Energy curves with respect to different values of
α . On the left is for E1 , while on the right is for E2 . The
blue lines indicate zero. Note that both energy curves have
only one minimum point. These curves are evaluated for the
deformation shown in Figure 2.

Figure 4: The relationship between α and fold-overs. Left:
when α is small, the grid points near the handle do not follow the handles’ movement, resulting in local fold-overs.
Right: when α is large, the weights of the grid points between the two handles form a fall-off. The grid points near
the fall-off tend to squeeze together.
different metrics. If L = 1, the total amount of area changes
is measured; if L = ∞, the maximal local area change is measured. In practice, we found that L = ∞ results in more plausible results, since local distortions are usually noticeable in
the deformed image.
4.2. Customized Optimization Procedure
Given the above metrics, our goal is to solve for the optimal
α to reduce fold-overs, E1 , as much as possible, and to minimize the distortions E2 whenever there are no fold-overs.
In the following, we first analyze the properties of the two
energy functions, then describe our customized optimization
approach to the energy minimization problem.
Given the deformation example shown in Figure 2, we
plot the energy curves of E1 and E2 with respect to α in
the range of [0, 10], as shown in Figure 3. Both energy
curves vary smoothly and have only one minimum point,
which suggests that a simple optimization procedure (e.g.,
line search) is enough to find the minimal point. Figure 4
also illustrates the relationship between the value of α and
image fold-overs: when α is small, the grid points near the
handle do not follow the handle movement, resulting in local fold-overs; when α is large, the grid points between the
two handles tend to squeeze together. Therefore, the optimal
value of α must be within these two extremes. We conjecture

1794

Y. Weng et al. / Sketching MLS Image Deformations On the GPU

grid
60 × 60

# curves
16

120 × 120

16

240 × 240

16

operation
without opt
with opt
without opt
with opt
without opt
with opt

frame time
0.909ms
11.934ms
1.048ms
12.798ms
1.054ms
14.007ms

Table 1: Performance statistics.
Figure 5: The mountain is raised, and the tree is bent. It
looks like the mountain is going to erupt, and the tree is trying to avoid damage.
that the energy curves have only one minimum point, which
is true for our test cases.
Based on the above analysis, we designed a line search
strategy to find the minimum point. First, the minimum must
be bracketed, i.e., it should lie between α1 and α2 . The interval is then divided by computing E(α ) at two internal points,
α3 and α4 , and rejecting whichever of the two outer points
has the highest function value. Subsequently only one extra
internal point needs to be calculated. Of the various methods of dividing the interval, that using the golden section is
relatively simple and effective:

α4 − α1 = α2 − α3 = (α2 − α1 )/τ ,
√
where τ = (1 + 5)/2.
To determine the initial interval, we adopt different solutions for two situations. In the first situation, users pick-andredraw a curve. According to our experiments, the minimum
point occurs usually within [0.5, 1.0] for all deformations
shown in this paper. We therefore use this as the initial interval. In the second situation, the user moves control points
smoothly to change the deformation. In this case, the optimal α changes smoothly and is expected to be around the
current value. In practice, we find that an interval of width
0.04 centered at the current α is wide enough to bracket the
minimum point.
5. GPU Implementation
We have implemented the described algorithm on the GPU
using NVIDIA’s CUDA [NVI07]. During precomputation,
the matrices A j (i.e., Eq.(10)) of all grid points are calculated
and stored as a 3D texture of dimension l(n + 3) × w × h,
where l(n+3) is the total number of control points and w×h
is the dimension of the grid. The integrals (e.g., δ jr,c ) are
approximately computed using numeric integration on the
GPU too. We found that 16 ∼ 64 sample points are enough
to get accurate approximations.
Other per-grid-point values that can be precomputed
(i.e., |v − p∗ |) as well as the positions of the control points

(i.e., aˆ j,k and cˆ j,k ) are individually packed into 2D textures. Per-grid-point values that change during deformation
(i.e.„ q∗ ) are computed on-the-fly. The deformation function
(Eq.(9), Eq.(11) and Eq.(12)) can be easily computed using the matrix-vector multiplication operation on the GPU
[KW03]. The deformed image is finally displayed by rendering quads onto the screen directly, and OpenGL’s vertex buffer object extension is employed to avoid unnecessary
read-backs from the GPU.
For the optimization procedure described in Section 4.2,
the division of intervals is performed on the CPU, and the
rest of the line search algorithm is done on the GPU. Specifically, given a new α decided on the CPU, we deform the
image and evaluate the corresponding energy functions (E1
and E2 ) on the GPU. The evaluation is carried out in two
consecutive steps: first the energy value of each quad is calculated; then a series of reductions is performed to gather
the total energy using the standard GPU primitive reduce
exposed in CUDPP [HOS∗ 07]. Each quad is composed of
two triangles and its area is computed as the sum of the triangle areas. Note that E1 only counts those flipped quads,
and a quad is considered to be flipped if one of its triangles
is flipped, i.e., the computed triangle area is negative. The
total energy is then read back to the CPU, and a new α value
is decided. The whole process is then iterated until the width
of the interval is less than a user-specified threshold.
6. Experimental Results
We have implemented the described algorithm on a 3.7Ghz
PC with 2GB of memory and a NVIDIA 8800GTX graphics
card. Please see the companion video for live demos.
Our sketch-based user interface provides the user with a
fast and intuitive image deformation experience. With only
three sketched strokes, a picture of a peaceful landscape can
be made vivid (see Figure 5). Also, the MLS optimization is
capable of generating visually pleasing deformations. For all
examples shown in this paper, we perform rigid transformations.
Our fold-over reduction technique greatly reduces the
amount of fold-overs in deformed images. In Figure 6, the
Leaning Tower of Pisa is made taller by stretching the tower
and suppressing the surrounding building. Before fold-over
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

Y. Weng et al. / Sketching MLS Image Deformations On the GPU

1795

7. Conclusion and Future Work

Figure 6: We make the Leaning Tower of Pisa taller by
stretching the tower and suppressing the nearby building.
However, fold-overs and noticeable distortion occur in the
building region. After fold-over reduction, the building is restored into a reasonable shape.

Figure 7: When a cartoon character is given a sharp chin,
his face is cut across by fold-overs. A piece of hair is missing, and the image contains discontinuity. After fold-over reduction, the deformation becomes much better, and the hair
between the eyebrows is preserved.

reduction, the building contains fold-over and is distorted.
After fold-over reduction, the building looks more plausible. In another example (see Figure 7), a cartoon character
is deformed to have a sharp chin. Before fold-over reduction, fold-overs occur in the middle of the face as well as
near the ear; the image contains discontinuity, and a piece of
the hair (originally lying between the eyebrows) is missing.
After fold-over reduction, the deformation becomes much
better without fold-overs and discontinuity, and the hair is
preserved.
Our prototype system achieves real-time performance on
large grids (e.g., 240 × 240) with many curves (see Table 1).
Another benefit of our algorithm is that it scales well with
the grid size: only a 9% performance drop is observed for a
4× grid size. For optimal performance, modern GPUs need
hundreds of thousands of threads to hide the memory access
latency. For small and middle-sized grids, the thread number
is not so large and the performance is still bounded by the
memory access. This explains why the performance does not
change linearly with the number of grid points as illustrated
in Table 1.
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

We have enhanced the MLS image deformation technique
in three aspects: user interface, fold-over reduction and performance. Our sketch-based user interface allows the user
to deform images intuitively by drawing strokes. To reduce
fold-overs in the deformed images, an iterative optimization
procedure is carried out to solve for the optimal parameter
α . We also implemented the whole algorithm on the GPU
for real-time performance.
Although our system provides the user with an intuitive
image deformation experience, there are still some aspects
that can be improved. First, in many examples, it is troublesome to ask the user to sketch a floor line across the image to
prevent it from moving globally. This sketch is unnecessary
if we automatically fix one of the image boundaries. Second,
although our fold-over reduction technique works well for
some large deformations shown in the paper, it fails to find
a good solution in some situations. This is partially because
only a single parameter α for the whole image is optimized.
In the future, we plan to explore the possibility of assigning a
different α value for every grid point. Optimizing these pergrid-point α values could further reduce fold-overs and improve the deformation results. Finally, we believe our sketchbased interface is particularly useful in manipulating video
objects. We would like to extend our sketch-based MLS deformation method to the temporal domain to deform video
objects.
Acknowledgements
The authors would like to thank Kun Zhou and the anonymous reviewers for their helpful comments, and Stephen Lin
for proofreading of this paper. We are also grateful to Xin
Huang and Minmin Gong for their help during video production.
References
[ACOL00] A LEXA M., C OHEN -O R D., L EVIN D.: Asrigid-as-possible shape interpolation. In SIGGRAPH 2000
Conference Proceedings (2000), pp. 157–164.
[BN98] B EIER T., N EELY S.: Feature-based image metamorphosis. Seminal graphics: poineering efforts that
shaped the field (1998), 373–380.
[ESA07] E ITZ M., S ORKINE O., A LEXA M.: Sketch
based image deformation. In Proceedings of Vision, Modeling and Visualization (VMV) (2007), pp. 135–142.
[FM98] F UJIMURA K., M AKAROV M.: Foldover-free image warping. Graph. Models Image Process. 60, 2 (1998),
100–111.
[GSCO06] G AL R., S ORKINE O., C OHEN -O R D.:
Feature-aware texturing. In Proceedings of Eurographics
Symposium on Rendering (2006), pp. 297–303.

1796

Y. Weng et al. / Sketching MLS Image Deformations On the GPU

[HOS∗ 07] H ARRIS M., OWENS J., S ENGUPTA S.,
Z HANG Y., DAVIDSON A.: CUDPP homepage, 2007.
http://www.gpgpu.org/developer/cudpp/.
[IMH05] I GARASHI T., M OSCOVICH T., H UGHES J. F.:
As-rigid-as-possible shape manipulation. ACM Trans.
Graph. 24, 3 (2005), 1134–1141.
[KW03] K RUGER J., W ESTERMANN R.: Linear algebra operators for gpu implementation of numerical algorithms. ACM Trans. Graph. 22, 3 (2003), 908–916.
[LCH94] L EE S.-Y., C HWA K.-Y., H AHN J.: Image morphing using deformable surfaces. In Proceedings of Computer Animation ’94 (1994), pp. 31–39.
[LCS95] L EE S.-Y., C HWA K.-Y., S HIN S. Y.: Image
metamorphosis using snakes and free-form deformations.
In SIGGRAPH ’95 (1995), pp. 439–448.
[LLCO08] L IPMAN Y., L EVIN D., C OHEN -O R D.:
Green coordinates. In SIGGRAPH 2008 (2008), p. to appear.
[LW94] L ITWINOWICZ P., W ILLIAMS L.: Animating images with drawings. In SIGGRAPH ’94 (1994), pp. 409–
412.
[NVI07] NVIDIA: CUDA programming guide 1.0, 2007.
http://developer.nvidia.com/object/cuda.html.
[SGW07] S CHIWIETZ T., G EORGII J., W ESTERMANN
R.: Freeform image. In Pacific Graphics ’07 (2007),
pp. 27–36.
[SMW06] S CHAEFER S., M C P HAIL T., WARREN J. D.:
Image deformation using moving least squares. ACM
Trans. Graph. 25, 3 (2006), 533–540.
[SP86] S EDERBERG T. W., PARRY S. R.: Free-form deformation of solid geometric models. SIGGRAPH ’86
(1986), 151–160.
[TDR01] T IDDEMAN B., D UFFY N., R ABEY G.: A general method for overlap control in image warping. Computers & Graphics 25, 1 (2001), 59–66.
[WXW∗ 06] W ENG Y., X U W., W U Y., Z HOU K., G UO
B.: 2d shape deformation using nonlinear least squares
optimization. The Visual Computer 22, 9 (2006), 653–
660.

c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

