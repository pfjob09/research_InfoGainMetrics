Eurographics Symposium on Geometry Processing 2008
Pierre Alliez and Szymon Rusinkiewicz
(Guest Editors)

Volume 27 (2008), Number 5

Polyhedral Finite Elements Using Harmonic Basis Functions
Sebastian Martin1
1

Peter Kaufmann1

Computer Graphics Laboratory, ETH Zurich

2

Mario Botsch1,2

Martin Wicke3

Computer Graphics Group, Bielefeld University

Markus Gross1
3

Stanford University

Abstract
Finite element simulations in computer graphics are typically based on tetrahedral or hexahedral elements, which
enables simple and efficient implementations, but in turn requires complicated remeshing in case of topological
changes or adaptive refinement. We propose a flexible finite element method for arbitrary polyhedral elements,
thereby effectively avoiding the need for remeshing. Our polyhedral finite elements are based on harmonic basis functions, which satisfy all necessary conditions for FEM simulations and seamlessly generalize both linear
tetrahedral and trilinear hexahedral elements. We discretize harmonic basis functions using the method of fundamental solutions, which enables their flexible computation and efficient evaluation. The versatility of our approach
is demonstrated on cutting and adaptive refinement within a simulation framework for corotated linear elasticity.
Categories and Subject Descriptors (according to ACM CCS): I.3.5 [Computer Graphics]: Computational Geometry
and Object Modeling—Physically based modeling

1. Introduction
Finite element methods have become tremendously important in computer graphics. They are used to animate scenes
showing “real-world” behavior, for example in virtual reality applications like surgery simulations, or computer animations for feature films. Its versatility and rigorous mathematical foundation make the finite element method an indispensable tool, which consequently has been applied to a
wide variety of problems.
Traditionally, FEM simulations in computer graphics rely
on strictly tetrahedral or hexahedral meshes, which simplifies the finite element approximation and significantly
speeds up the involved computations. However, allowing a
single element shape only can be too restrictive, since it requires complex remeshing in case of topological changes,
for instance due to cutting, fracture, or adaptive refinement.
One class of approaches [MBF04, SDF07, SSIF07] therefore avoids remeshing after cutting by embedding each resulting cut part into an individual copy of the original tetrahedron. An interesting alternative is the approach of Wicke
et al. [WBG07]: They directly support more general convex polyhedral elements in finite element simulations by employing mean-value coordinates as a generalization of linear
barycentric FEM shape functions.
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.
Published by Blackwell Publishing, 9600 Garsington Road, Oxford OX4 2DQ, UK and
350 Main Street, Malden, MA 02148, USA.

In this paper we extend their approach to arbitrary convex
and non-convex polyhedral elements using harmonic coordinates [JMD∗ 07] as FEM basis functions (cf. Fig. 1). Harmonic basis functions naturally generalize linear basis functions for tetrahedral elements and trilinear basis functions
for hexahedral elements. Hence, our method seamlessly integrates into existing FEM frameworks, such that standard
tetrahedral or hexahedral elements can be used in regular
parts of the model, whereas irregular polyhedral elements
are used in regions of cutting or adaptive refinement.
Harmonic coordinates, as the solution of a Laplace PDE
with Dirichlet boundary constraints, have an analytic solution for simple element shapes only. For general polyhedra
they therefore have to be approximated numerically, using
for instance finite differences, finite elements, or the boundary element method. As a simple and flexible alternative
we propose an approximation using radial basis functions,
which guarantees the resulting basis functions to be harmonic and to furthermore exactly satisfy important physical
conservation properties.
The use of general polyhedral elements significantly increases the flexibility in generating and manipulating the
simulation mesh. We demonstrate this versatility in examples of cutting and adaptive refinement within a simulation
framework for elastically deformable models.

1522

Martin et al. / Polyhedral Finite Elements Using Harmonic Basis Functions

Figure 1: Using harmonic basis functions, even non-convex polyhedral elements can be used directly in FEM simulations.

2. Related Work
Starting with Terzopoulos et al. [TPBF87,TF88], physicallybased methods have been used extensively in computer
graphics. In this paper, we focus on elastically deformable
solids that are simulated using the finite element method.
From the vast body of literature in the field, we only cite key
references, and refer the interested reader to [NMK∗ 06] for
a more comprehensive overview.
In computer graphics, finite element methods are implemented almost exclusively using tetrahedral (e.g. [OH99])
or hexahedral meshes (e.g. [MTG04, JBT04]). These discretizations allow for simple and efficient implementations
of the finite element method, but in turn require rather complex mesh restructuring in case of topological changes, for
instance due to fracture, cutting, or mesh refinement.
In the context of fracture or cutting simulation, one class
of approaches tackled the arising problems using continuous remeshing [OH99,OBH02,SOG06]. In contrast, the virtual node algorithm [MBF04] and its generalization [SDF07,
SSIF07] duplicates elements instead of splitting them, and
embeds the surface parts into those copies. Point-based approaches do not have to maintain a consistent simulation
mesh [MKN∗ 04], but on the other hand have to update special shape functions [PKA∗ 05] or distance graphs [SOG06].
In contrast, Wicke et al. [WBG07] avoid costly remeshing by
supporting general convex polyhedra in FEM simulations.
The need to accurately simulate highly detailed models
lead to the development of adaptive and hierarchical simulation techniques [DDCB01, GKS02, CGC∗ 02, OGRG07].
Hanging nodes, or T-junctions, in an adaptively refined simulation mesh often pose problems, and hence have to be either avoided or specially treated, for instance by refining basis functions instead of elements [GKS02, CGC∗ 02], or by
constraining hanging nodes to edge midpoints [SSIF07].
We propose to handle the complex elements arising during cutting as well as hanging nodes due to adaptive refinement within a single, consistent simulation framework based
on arbitrary polyhedral elements. The key to such a generalization is to find basis functions that fulfill all necessary
requirements for convergent FEM schemes [Hug00], but are
defined for a larger class of element shapes.

Our approach is inspired by, and hence most similar to, [WBG07], who employed 3D mean-value coordinates [FKR05,JSW05,JLW07] as shape functions for convex
polyhedra. The main drawback of mean-value coordinates,
as well as of Wachspress coordinates [Wac75,War96], is that
they are defined on simplicial polyhedra only, i.e., on convex
elements with triangulated faces. The restriction to convex
elements might even be advantageous in practice, e.g., for
collision detection. However, having to triangulate element
faces can cause erroneous (slight) asymmetries for otherwise
perfectly symmetric configurations (e.g., symmetric deformations of symmetric hexahedral meshes).
To overcome these limitations, we propose to use harmonic coordinates [JMD∗ 07] as FEM basis functions, which
enables the simulation of arbitrary convex and non-convex
polyhedral elements with planar (not necessarily triangulated) faces. In contrast to mean-value coordinates, harmonic
functions generalize both linear basis functions for tetrahedra and trilinear basis functions for hexahedra, and therefore
can be considered a seamless generalization of linear basis
functions to arbitrary polyhedral elements.

3. Elastic Deformations
Before introducing harmonic basis functions (Section 4),
discussing their numerical approximation (Section 5), and
describing their integration into a dynamic simulation framework (Section 6), we will first review the basic concepts of
continuum elasticity and its Galerkin discretization in this
section. A more detailed overview of deformable models
and finite element discretizations can be found in the survey [NMK∗ 06] or in the textbooks [Chu96, Hug00].
In the following we consider an object with material coordinates x = [x, y, z]T , which is deformed by a displacement
field u = [u(x), v(x), w(x)]T . The local deformations of the
material are measured by a 3 × 3 strain tensor, where typical
choices are the nonlinear Green-Lagrange strain
εG (u) =

1
∇u +(∇u)T + ∇u(∇u)T
2

(1)

or the linearized Cauchy strain
εC (u) =

1
∇u +(∇u)T .
2

(2)

c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

1523

Martin et al. / Polyhedral Finite Elements Using Harmonic Basis Functions

We employ the linear Cauchy strain ε = εC in our framework, since it greatly simplifies the simulation, and the resulting linearization artifacts can be mostly eliminated by
a co-rotational formulation [MG04]. Note, however, that
the harmonic basis functions we introduce in Section 4 are
equally valid for nonlinear strain measures.
In an elastic material, strain leads to restoring forces represented by a 3 × 3 stress tensor σ. Since stress and strain
are symmetric tensors, we can represent their independent
degrees of freedom by 6-vectors. Assuming a Hookean material yields a linear relation between stress and strain
σ(u) = C ε(u) ,

(3)

where the symmetric 6 × 6 matrix C contains the elastic coefficients of the material. Finally, the elastic energy E(u)
stored in a deformed object is given by stress times strain,
integrated over the object volume Ω:
E(u) =

1
2

ε(u)T C ε(u) dx .

(4)

Ω

The displacement field u(x) is then discretized using a
finite dimensional space spanned by basis functions Ni (x).
To this end, the object is partitioned into finite elements e,
i.e., e = Ω, and u(x) is approximated by interpolating the
displacements ui of the nodes xi within elements. The interpolated displacement ue in an element e of k nodes is
k

e

u(x) |e ≈ u (x) :=

∑

ui Nie (x) ,

(5)

i=1

where the shape functions Nie = Ni |e determine the influence
of the nodal displacements ui in the element. From the gradient ∇ue (x) one computes strain and stress, such that the
elastic energy stored in the deformed element e
Ee ue =

1
2

ε ue

T

C ε ue dx ,

(6)

e

can be accumulated into the total energy E(u) = ∑e Ee (ue ).
Its variational derivative ∂E/∂u, respectively the partial
derivatives ∂E/∂ui , constitute the internal restoring forces
that drive the dynamic elasticity simulation.
The basis functions Ni have to fulfill a number of requirements in order to guarantee convergence of the method under
refinement of the discretization [Hug00]: For linear elasticity, they have to be in the Sobolev space H1 . In the special
case of linear FEM they have to be C1 smooth within elements and C0 continuous across element boundaries. Furthermore, the basis functions need to exactly reproduce linear functions (e.g., rigid motions). These conditions are satisfied by linear shape functions for tetrahedra and trilinear
shape functions for hexahedra — the element types and basis
functions most frequently used in computer graphics. However, since those require complex remeshing for topological
changes, we introduce more flexible shape functions for general polyhedral elements in the following section.
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

4. Harmonic Basis Functions
We propose to use harmonic basis functions as a generalization of linear barycentric basis functions to general polyhedral elements. A shape function Nie : e → IR is harmonic
if its Laplacian vanishes in e, in which case it is uniquely
determined by Dirichlet boundary constraints b(x) on ∂e:
∆Nie (x) = 0 ,
Nie (x) = bi (x) ,

for

x ∈ e,

(7)

for

x ∈ ∂e .

(8)

For a finite element simulation we need nodal basis functions Nie for interpolating quantities within each element e.
If these functions are chosen to be harmonic, they are fully
determined by the values bi (x) on the element boundary ∂e,
which we set up following [JMD∗ 07]: First, in order to interpolate nodal quantities, the basis function Nie of node i has
to equal 1 at the node xi and 0 at all others, i.e.,
Nie x j = δi j

∀ i, j = 1, . . . , k .

(9)

Additionally, in order to ensure continuity across element
boundaries, the values of the basis function for node i defined in neighboring elements e1 and e2 should coincide on
the face or edge shared by the two elements:
Nie1 (x) = Nie2 (x)

for

x ∈ e1 ∩ e2 .

(10)

This can be guaranteed by choosing the values on the
faces of a d-dimensional element to be (d − 1)-dimensional
harmonic coordinates. For a trivariate harmonic basis function Nie on a 3D element e the boundary conditions are bivariate harmonic coordinates on its faces, which themselves
are determined by univariate harmonic (i.e., linear) interpolation of the nodal values Nie x j = δi j along the edges.
It follows from these recursively defined boundary constraints and the uniqueness of harmonic functions for fixed
Dirichlet constraints, that harmonic shape functions reproduce linear triangles and bilinear quads in 2D, as well as linear tetrahedra and trilinear hexahedra in 3D. The harmonic
basis for a more complex 2D element is shown in Fig. 2.
Harmonic basis functions satisfy all requirements for
admissible FEM basis functions (we refer the reader
to [JMD∗ 07] for short proofs of some of these properties):
• Since 3D harmonic shape functions degenerate to 2D harmonic coordinates on element faces, they are continuous
across element boundaries: Ni ∈ C0 (Ω).
• As solution to Laplace’s equation (7) they are smooth
within elements: Nie ∈ C∞ (e).
• For fixed constraints bi , (7) characterizes the minimizer of
the Dirichlet energy e ∇Nie 2 . Hence, the gradients of
harmonic functions are square integrable: ∇Nie ∈ L2 (e).
Combining the last three points we get Ni ∈ H1 (Ω).
• They are non-negative Ni (x) ∈ [0, 1], build a partition of
unity ∑i Ni (x) = 1, and reproduce linear functions.

1524

Martin et al. / Polyhedral Finite Elements Using Harmonic Basis Functions

Figure 2: Harmonic basis functions for the six nodes of a non-convex 2D element. The constraint collocation points ci are
visualized as small spheres along the element boundary, the kernel centers ki are shifted slightly outside and are shown in gray.

5. Numerical Approximation
Closed form expressions for harmonic basis functions exist
for simple element shapes only, such as tetrahedra or hexahedra. For more general elements, harmonic basis functions
Nie have to be computed numerically as the solution of (7),
(8), which is valid for both 2D faces and 3D elements. To
this end, several well-established techniques for solving the
2D and 3D Laplacian PDEs exist, each having their own respective advantages and drawbacks.
Finite Differences. Overlaying the element by a regular 3D
grid and using a finite difference discretization leads to the
solution of a sparse linear system for a piecewise trilinear
approximation of Nie [JMD∗ 07]. While this method is comparatively easy to implement, an accurate solution requires
a sufficiently dense grid in order to resolve the smallest
edges/faces of the element. In particular for cutting, where
small edges occur frequently, the cubic growth of volumetric grids leads to very complex systems, which require advanced multi-grid methods for their solution [JMD∗ 07].
Finite Elements could be used to solve (7) on an adaptive
tessellation of polyhedral elements, thereby overcoming the
limitations of regular grids. However, since the major goal
of our approach is to enable adaptive FEM computations
without complex remeshing of elements, the recursive application of adaptive FEM to each polyhedral element is a
chicken-and-egg problem and contradicts our goals.
Boundary Element Method. The boundary element
method (BEM) is also well suited to solve the PDE (7). By
formulating the solution as an integral of fundamental solutions over the element’s boundary, it avoids a volumetric tessellation and therefore needs a boundary discretization only.
Due to our experiments the major drawback of BEM is performance: In its exact formulation, each function evaluation
requires a full integral over the element’s boundary, which
makes the numerical integration of (6) very expensive.
Fundamental Solutions. While all the above methods can
be employed for solving (7), (8) we found the method of
fundamental solutions (MFS) [FK98] to be a more flexible,
easier-to-implement, yet sufficiently accurate alternative.

MFS is closely related to BEM: It is also a boundary
method, and thus does not require a volumetric tessellation, and it also represents the approximate solution in terms
of fundamental solution kernels. However, instead of the
boundary integrals in BEM, MFS employs a simple, meshless collocation. A shape function Nie (x), simply denoted by
N(x) in the following, is represented in the following form:
n

N(x) =

∑ wj ·ψ

x−kj

+ aT1 x + a0 ,

(11)

j=1

where the first part is a superposition of n weighted radial basis functions ψ (RBFs), centered at k j , and the second part
is a linear polynomial in x. The kernel function ψ is chosen as fundamental solution of the Laplace PDE, which is
ψ(r) = log r in 2D and ψ(r) = 1/r in 3D. As a consequence,
the function (11) is harmonic by construction [Duc77], in the
whole domain except at the kernels’ singularities k j .
Hence, the kernel k j have to be placed outside the element. A standard method is to first sample the boundary by
s j ∈ ∂e, and to move the kernels outward in (interpolated)
normal direction by a small fraction ξ of the element size:
k j = s j + ξ · size(e) · n s j .

(12)

For non-convex elements one additionally has to take care
that this simple offsetting does not generate centers in the
element’s interior. For generating the n samples s j , we select
the element’s nodes, about 3–5 samples on each edge, and a
uniform sampling of its faces of about the same density.
The function (11) satisfies (7) by construction, thus we
solve for the best approximation of the Dirichlet constraints (8). To this end, we approximate the boundary integral of the L2 error by a sum of m collocation points ci :
|N(x) − b(x)|2 ≈
∂e

1 m
∑ |N(ci ) − b(ci )|2 → min . (13)
m i=1

These collocation points ci ∈ ∂e are generated equivalently
to the samples s j , but at a higher resolution of m ≈ 3n. The
distribution of kernel centers ki and collocation constraint
points ci , as well as the resulting basis functions are shown
for a non-convex L-shaped 2D element in Fig. 2.
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

1525

Martin et al. / Polyhedral Finite Elements Using Harmonic Basis Functions

Given the kernel centers ki , the minimization of the L2
error (13) amounts to solving an overdetermined linear least
squares system for the coefficients of (11):


w1




T
. 
ψ11 . . . ψ1n c1 1 
b(c1 )
 .. 
 .

 . 
..
.. ..  
 =  ..  , (14)
 ..
.
. . 
 wn 
b(cm )
ψm1 . . . ψmn cTm 1  a1 
a0
where ψi j = ψ ci − k j . This least squares system can be
solved in a numerically robust manner using the QR factorization or the SVD pseudo-inverse [GL89].
In order to compute a 3D basis function Nie for an element e, we first solve the above linear system on each of
its faces. The resulting 2D harmonic functions constitute the
boundary constraints for the final 3D linear system, which
yields the coefficients of Nie . Notice that in order to compute all k basis functions N1e , . . . , Nke of an element e with k
nodes, the same 2D and 3D systems are solved for k different right-hand sides bi (x). After factoring each matrix once,
these systems can be solved efficiently by back-substitution.
Discussion. As described in Section 4, exact solutions of
(7), (8) satisfy the conditions for admissible FEM shape
functions. The numerical approximation N from (11) satisfies all but one exactly, and one up to small numerical errors.
Since the singularities k j are located outside of e, we have
N ∈ C1 (e) and ∇N ∈ L2 (e). However, the C0 continuity
across elements is only satisfied approximately through the
Dirichlet conditions (8), resp. (13). Our typical choice of 5
edge samples for generating kernels through (12) leads to L2
boundary errors of about 2–3%. More accurate results can
be achieved by using more kernels in (11). However, as we
show in Section 8, the accuracy of the global solution is not
limited by the individual basis functions’ errors.
Typically, MFS approximations are based on fundamental solution kernels ψ · − k j only, and do not include a
linear polynomial as in (11). This polynomial, however, is
crucial in our case, since it guarantees exact reproduction
of linear functions, independent of the number n of kernels
used. Due to our experiments even small errors in the linear reproduction (L2 error around 10−3 ) would cause ghost
forces, thereby destroying the preservation of linear and angular momenta and resulting in counter-intuitive behavior.
The offset distance ξ in (12) has to be chosen heuristically.
In our experiments, we found ξ = 0.1 to be a reliable setting,
as similarly stated in [LGW∗ 07]. Moreover, due to our dense
sampling of collocation points ci (m ≈ 3n) the solution of
the least squares system (14) is hardly influenced by ξ. In
contrast, an exact interpolation (m = n + 3) cannot prevent
oscillations on the boundary between the ci and would be
much more sensitive to the offset distance (cf. Fig. 3).
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

Figure 3: Top: If we enforce the boundary conditions exactly, the solution oscillates and is very sensitive to the offset distance (ξ = 0.05, 0.1, 0.15). Bottom: In contrast, dense
least-squares boundary conditions are more robust and considerably less affected by different parameter choices.

Degenerate elements cause numerical problems for harmonic shape functions, just as they do for standard shape
functions. Two (almost) coincident kernels ki , k j lead to linearly dependent rows i, j in (14), yielding a rank deficient
matrix. Simple cases, like the clustered kernels near the concave corner in Fig. 3, can be resolved explicitly by merging
kernels, or implicitly through the SVD pseudo-inverse.
For degenerate edges with coincident nodes xi , x j , we
conceptually merge xi and x j by computing one joint basis function φeij from the constraints bi + b j in (8) and using
a joint nodal displacement ui j = ui = u j . Note that this does
not change the simulation mesh, and therefore preserves,
e.g., planarity of faces. Almost planar sliver elements can
be merged with their neighbors as proposed in [WBG07].
6. Finite Element Simulation
After introducing harmonic basis functions and their numerical approximation, we insert them into the Galerkin discretization of Section 3 and set up the matrix equations for
the FEM simulation. We again give the main equations only,
and refer the reader to [NMK∗ 06, Hug00] for more details.
Once the basis functions Nie are computed as described in
the previous section, the displacement ue within e can be approximated as in (5), which can be written in matrix notation
ue (x) :=

k

∑ Nie (x) ui

= He (x) Ue ,

i=1

with a 3 × 3k matrix He (x) of basis function values Nie (x)
and a vector Ue = [uT1 , . . . , uTk ]T of e’s nodal displacements.

1526

Martin et al. / Polyhedral Finite Elements Using Harmonic Basis Functions

Figure 4: A quadtree element with neighbors at a higher refinement level. Shown are the basis functions for the shared
nodes, where the center one is not a hanging node, but instead is part (and DOF) of all three elements.

Figure 5: Left: Collision handling on the simulation mesh’s
nodes. Right: Collision handling on the embedded surface.
With the discrete energy (15), the governing equation for
a dynamically deforming elastic solid becomes
¨ + DU
˙ + KU = Fext ,
MU

Since the Cauchy strain is linear in the displacements, it
can also be written in matrix notation as
ε ue (x) = Be (x) Ue ,
with a 6 × 3k matrix Be (x) built from gradients ∇Nie (x). Using this matrix notation of each element’s strain, the global
elastic energy (6) of the deformed model can be written as
E(u) =

∑ UTe
e

1
2

e

BTe C Be dx Ue =

1 T
U KU , (15)
2

=: Ke

with Ke denoting the 3k × 3k stiffness matrix of element e,
which are assembled into the global stiffness matrix K, and
U = [. . . uTi . . . ]T the global vector of nodal displacements.
For a general polyhedral element e, the computation of its
stiffness matrix Ke requires numerical integration, since the
derivative matrix Be (x) is not constant, as in the special case
of linear tetrahedra. We employ either bounding box subdivision and Gaussian quadrature or Monte Carlo integration
instead of the heuristic integration proposed by [WBG07],
since the latter degrades for non-convex elements. For linear
elasticity, the matrices Ke can be precomputed, such that the
integration has to be performed only once for each element.
As a consequence, the run-time complexity of our simulation
is not higher than that of a simulation using a tetrahedral or
hexahedral discretization.
Since the linear strain is not rotation-invariant, even
rigid-body motions will give rise to strain, which in turn
causes ghost forces. This can be remedied by adapting
the stiffness warping of [MG04] to general polyhedral elements [WBG07]: The rotation Re of the element’s displacement Ue is extracted using shape matching, and is factored
out by correcting the stiffness matrix as Ke ← Re Ke RTe .
This correction has to be performed in each time step, and
the global stiffness matrix K needs to be updated accordingly. Again, the complexity for these computations is of the
same order as for tetrahedral or hexahedral simulations.

(16)

with mass matrix M, damping matrix D, and the vector Fext
containing external forces. We use a standard semi-implicit
Euler method for the robust time-integration of (16). In our
framework we employ simple nodal collision detection and
handling, based on linear penalty forces being added to Fext
in order to resolve collisions. The collision handling for harmonic basis functions is performed in exactly the same way
as for standard linear or trilinear basis functions.
7. Embedded Simulation
Using the method described so far, we can simulate deformable objects that are discretized by general polyhedral
elements. However, a straightforward volume tessellation
works for clean, moderately complex objects only, but becomes problematic for highly complex or topologically inconsistent models (e.g., scanned data, point-based models).
To be able to also handle such objects, we adapt a space
embedding technique [FvdPT97, CGC∗ 02, MG04, JBT04,
SSIF07]. In a preprocessing step, we voxelize the object into
hexahedral elements, and then simulate the elastic deformation on the resulting voxels only. The high resolution surface
mesh is deformed by interpolating the displacement within
the voxels according to (5). However, since the complexity
of regular grids grows cubically under refinement, this approach can handle moderate grid resolutions only.
Exploiting the flexibility we gain from arbitrary element
shapes, a hierarchical, adaptive refinement is very easy to
implement. Similar to [BPWG07], we employ an octree-like
discretization that refines nodes near the embedded surface.
Note that this does not lead to hanging nodes in our discretization. Since the elements need not be strictly hexahedral, faces between octree cells of different depth do not require special handling, as illustrated in Fig. 4.
For embedded simulations we perform collision handling
on the vertices of the embedded surface, instead of on the
simulation nodes (cf. Fig. 5). Similar to [SSIF07], (penalty)
forces applied to an embedded vertex x = ∑i xi Ni (x) simply
have to be distributed to the simulation nodes xi , weighted
by the (generalized) barycentric coordinates Nie (x).
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

1527

Martin et al. / Polyhedral Finite Elements Using Harmonic Basis Functions
0

10

Standard FEM
CHARMS
Harmonic FEM, 1 source
Harmonic FEM, 10 sources

!1

L2!Error

10

!2

10

!3

10

0

10

1

2

10

3

10

10

# DOFs

4

10

3

Condition Number

10

2

10

1

10

Standard FEM
CHARMS
Harmonic FEM, 1 source
Harmonic FEM, 10 sources

0

10
0
10

1

10

2

# DOFs

10

3

10

Figure 6: For a 2D Poisson problem with known solution, we compare bilinear FEM (left), adaptive basis function refinement
of CHARMS (middle), and our adaptive element refinement (right). The graphs compare approximations for grids of about the
same number of DOFs. The plots show L2 errors and condition numbers of K for increasing numbers of DOFs.
8. Results
In this section we demonstrate the versatility of our polyhedral finite element framework on adaptive refinement and
progressive cutting, and give statistics and comparisons of
our method. Most examples show individual frames of simulations that are also included in the accompanying video.
Non-Convex Elements. As a proof of concept, Fig. 1 shows
a simulation of a simple, non-convex element, whose shape
functions are computed using n = 97 RBF centers in (11).
While non-convex elements undoubtedly increase the meshing flexibility, we also note that in practice a restriction to
convex elements might be preferable, for instance for efficient collision detection.
2D Adaptive Refinement. Fig. 6 shows a quantitative analysis of our method based on a 2D Poisson problem −∆u = f
with known analytic solution. We compare convergence behavior and condition numbers of uniform refinement of standard bilinear FEM, adaptive refinement of bilinear basis
functions with CHARMS [GKS02], and our quadtree-like
adaptive element refinement (cf. Fig. 4).
While condition numbers increase similarly with the number of DOFs for all methods, adaptive refinement makes better use of the DOFs than uniform refinement. When comparing CHARMS to our refinement technique, the former can
also be used for higher order basis functions, whereas our
method is a generalization of linear shape functions only.
However, it allows for more flexible splits without the need
to balance neighboring elements’ refinement levels (see below). The plots also show that the number of sources si (resp.
of RBF kernels ki ) used for individual basis functions Nie has
practically no effect on the global approximation error.
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

Adaptive Mesh Generation. In Fig. 7, the Stanford bunny
is embedded in an adaptive octree-like simulation mesh,
which concentrates the DOFs at the more interesting boundary surface. Supporting general polyhedral elements makes
this kind of adaptive embedding both easy to implement
and to maintain, thereby enabling the efficient simulation of
highly complex or topologically inconsistent meshes.
Stress-Based Dynamic Refinement. Polyhedral elements
allow for dynamic element refinement: Similar to fracture [OH99, OBH02], we sample the stress tensor σ(x) at a
few points within each element, compute the principal stress
as the largest absolute eigenvalue, and refine an element once
a certain threshold is reached. Fig. 8 illustrates this for two
kinds of adaptive refinement: A uniform 1-to-8 subdivision
of voxels, and the more flexible 1-to-2 splitting perpendicular to the maximum stress direction, which results in fewer
elements for the same refinement threshold.
Progressive Cutting. As proposed in [WBG07], supporting
general polyhedra in FEM simulations effectively avoids the
need for complex remeshing during cutting and thus considerably simplifies the implementation. Our harmonic basis
functions seamlessly integrate into both tetrahedral and hexahedral simulations, where then only the cut elements have
to be computed as harmonic polyhedral elements (cf. Fig. 9).
Arbitrary cuts can lead to non-convex elements with small
opening angles, which complicates off-setting RBF centers.
To avoid this problem, and to simplify the actual element
splitting and collision detection, our cutting algorithm generates convex elements only, following [WBG07].
Timings. For the examples shown, Table 1 summarizes
model complexities and timings, taken on an Intel Core2
Duo, 2.4 GHz. Solving the linear systems takes about the

1528

Martin et al. / Polyhedral Finite Elements Using Harmonic Basis Functions

Figure 7: The bunny model is embedded into an adaptively refined, octree-like simulation mesh, shown on the left. The degrees
of freedom are concentrated on the surface, wasting little computing power on the less interesting, invisible interior.

Figure 8: Dynamic, stress-based refinement of a hexahedral bar model, using 1-to-2 splits for the bending deformation and
1-to-8 subdivision for twisting. The bar is constrained at both ends, the color visualizes the maximum principal stress.
same time as for standard FEM, with only a slight increase
in matrix density in case of complex polyhedra with high
vertex count. Solving for and numerically integrating shape
functions Nie is considerably more expensive than for simple linear tetrahedra or trilinear hexahedra. Note, however,
that general polyhedral elements are employed in irregular
regions of adaptivity and cutting only, whereas in regular
regions we can use standard elements. Our approach therefore trades the combinatorial complexity of remeshing for
the computational complexity of polyhedral elements.

Acknowledgments. This research was supported by the
Swiss National Science Foundation grant 200021-117756.

9. Conclusion
We have introduced an FEM framework for arbitrary polyhedral elements based on harmonic basis functions, and proposed the method of fundamental solutions as a simple and
flexible method for computing these basis functions. Being
able to use general polyhedral elements in FEM simulations
considerably simplifies topological changes of the simulation domain, as illustrated for adaptive mesh generation, dynamic refinement, and progressive cutting.
While we demonstrated harmonic polyhedral elements
mainly in the context of corotated linear elasticity, it is important to note that they can as well be used with nonlinear strain measures and nonlinear material behavior, which
therefore constitutes an interesting direction for future work.
Furthermore, extending our approach to both adaptive and
hierarchical discretizations and solvers has the potential to
improve runtime performance of the simulation.

Figure 9: Left: Progressive cutting of a hexahedral bar
model. Right: Cutting a tetrahedral dinosaur mesh. Tetrahedra are visualized in yellow, general polyhedra in blue.
Scene
Start #N/#E End #N/#E
Collision (Fig. 5) 274 / 153
274 / 153
4.8k / 3k
4.8k / 3k
Bunny (Fig. 7)
Bending (Fig. 8)
99 / 40
256 / 88
99 / 40
1392 / 719
Twisting (Fig. 8)
Bar Cut (Fig. 9)
99 / 40
391 / 63
Dino Cut (Fig. 9) 5.6k / 19k 9.3k / 21k

tinit tsolve
105 5.2
59 221
302 1.6
170 37
688 3
48 113

ttotal
20
247
60
276
235
752

Table 1: Statistics and timinigs for the examples shown in
this paper. We list initial and final number of nodes (#N) and
elements (#E), avg. time to compute Nie and setup Ke per
polyhedral element, and for the linear solve per time-step
(both [ms]), and the total simulation time [s].

c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

Martin et al. / Polyhedral Finite Elements Using Harmonic Basis Functions

References
[BPWG07] B OTSCH M., PAULY M., W ICKE M., G ROSS M.:
Adaptive space deformations based on rigid cells. Computer
Graphics Forum (Proc. Eurographics) 26, 3 (2007), 339–347.
[CGC∗ 02]

C APELL S., G REEN S., C URLESS B., D UCHAMP
T., P OPOVI C´ Z.: A multiresolution framework for dynamic
deformations. In SCA ’02: Proceedings of the 2002 ACM
SIGGRAPH/Eurographics symposium on Computer animation
(2002), pp. 41–47.

[Chu96] C HUNG T. J.: Applied Continuum Mechanics. Cambridge University Press, New York, 1996.
[DDCB01] D EBUNNE G., D ESBRUN M., C ANI M.-P., BARR
A. H.: Dynamic real-time deformations using space and time
adaptive sampling. In Proceedings of SIGGRAPH’01 (2001),
pp. 31–36.
[Duc77] D UCHON J.: Spline minimizing rotation-invariant seminorms in Sobolev spaces. In Constructive Theory of Functions
of Several Variables, Schempp W., Zeller K., (Eds.), no. 571 in
Lecture Notes in Mathematics. Springer Verlag, 1977, pp. 85–
100.
[FK98] FAIRWEATHER G., K ARAGEORGHIS A.: The method of
fundamental solutions for elliptic boundary value problems. Advances in Computational Mathematics 9, 1–2 (1998), 69–95.
[FKR05] F LOATER M. S., KOS G., R EIMERS M.: Mean value
coordinates in 3d. Computer Aided Geometric Design 22 (2005),
623–631.
[FvdPT97] FALOUTSOS P., VAN DE PANNE M., T ERZOPOULOS
D.: Dynamic free-form deformations for animation synthesis.
IEEE Transactions on Visualization and Computer Graphics 3, 3
(1997), 201–214.
[GKS02] G RINSPUN E., K RYSL P., S CHRÖDER P.: Charms: A
simple framework for adaptive simulation. In Proceedings of
SIGGRAPH’02 (2002), pp. 281–290.
[GL89] G OLUB G. H., L OAN C. F. V.: Matrix Computations.
Johns Hopkins University Press, Baltimore, 1989.
[Hug00] H UGHES T. J. R.: The Finite Element Method. Linear
Static and Dynamic Finite Element Analysis. Dover Publications,
2000.
[JBT04] JAMES D., BARBI Cˇ J., T WIGG C.: Squashing cubes:
Automating deformable model construction for graphics. In Proceedings of SIGGRAPH ’04 Sketches and Applications (2004).
[JLW07] J U T., L IEPA P., WARREN J.: A general geometric construction of coordinates in a convex simplicial polytope. Computer Aided Geometric Design (2007). preprint.
[JMD∗ 07] J OSHI P., M EYER M., D E ROSE T., G REEN B.,
S ANOCKI T.: Harmonic coordinates for character articulation.
ACM Trans. on Graphics (Proc. SIGGRAPH) 26, 3 (2007), 71.
[JSW05] J U T., S CHAEFER S., WARREN J.: Mean value coordinates for closed triangular meshes. In Proceedings of SIGGRAPH’05 (2005), pp. 561–566.
[LGW∗ 07] L I X., G UO X., WANG H., H E Y., G U X., Q IN H.:
Harmonic volumetric mapping for solid modeling applications.
In Proceedings of symposium on Solid and physical modeling
(2007), pp. 109–120.
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

1529

[MBF04] M OLINO N., BAO Z., F EDKIW R.: A virtual node algorithm for changing mesh topology during simulation. In Proceedings of SIGGRAPH’04 (2004), pp. 385–392.
[MG04] M ÜLLER M., G ROSS M.: Interactive virtual materials.
In Proceedings of Graphics Interface’04 (2004), pp. 239–246.
[MKN∗ 04] M ÜLLER M., K EISER R., N EALEN A., PAULY M.,
G ROSS M., A LEXA M.: Point-based animation of elastic, plastic
and melting objects. In Proceedings of the Symp. on Computer
Animation’04 (2004), pp. 141–151.
[MTG04] M ÜLLER M., T ESCHNER M., G ROSS M.: Physically
based simulation of objects represented by surface meshes. In
Proceedings of Computer Graphics Int.’04 (2004), pp. 26–33.
[NMK∗ 06] N EALEN A., M ULLER M., K EISER R., B OXERMAN
E., C ARLSON M.: Physically based deformable models in computer graphics. Computer Graphics Forum 25, 4 (2006), 809–
836.
[OBH02] O’B RIEN J. F., BARGTEIL A. W., H ODGINS J. K.:
Graphical modeling and animation of ductile fracture. In Proceedings of SIGGRAPH’02 (2002), pp. 291–294.
[OGRG07] OTADUY M. A., G ERMANN D., R EDON S., G ROSS
M.: Adaptive deformations with fast tight bounds. In Proceedings of the Symp. on Computer Animation’07 (2007), pp. 181–
190.
[OH99] O’B RIEN J. F., H ODGINS J. K.: Graphical modeling and
animation of brittle fracture. In Proceedings of SIGGRAPH’99
(1999), pp. 137–146.
[PKA∗ 05] PAULY M., K EISER R., A DAMS B., D UTR &#233;
P., G ROSS M., G UIBAS L. J.: Meshless animation of fracturing
solids. In Proceedings of SIGGRAPH’05 (2005), pp. 957–964.
[SDF07] S IFAKIS E., D ER K. G., F EDKIW R.: Arbitrary cutting of deformable tetrahedralized objects. In Proceedings of the
Symp. on Computer Animation’07 (2007), pp. 73–80.
[SOG06] S TEINEMANN D., OTADUY M. A., G ROSS M.: Fast
arbitrary splitting of deforming objects. In Proceedings of the
Symp. on Computer Animation’06 (2006), pp. 63–72.
[SSIF07] S IFAKIS E., S HINAR T., I RVING G., F EDKIW R.: Hybrid simulation of deformable solids. In Proceedings of the Symp.
on Computer Animation’07 (2007), pp. 81–90.
[TF88] T ERZOPOULOS D., F LEISCHER K.: Modeling inelastic
deformation: Viscoelasticity, plasticity, fracture. In Proceedings
of SIGGRAPH’88 (1988), pp. 269–278.
[TPBF87] T ERZOPOULOS D., P LATT J., BARR A., F LEISCHER
K.: Elastically deformable models. In Proceedings of SIGGRAPH’87 (1987), pp. 205–214.
[Wac75] WACHSPRESS E. L.: A Rational Finite Element Basis.
Academic Press, 1975.
[War96] WARREN J.: Barycentric coordinates for convex polytopes. Advances in Computational Mathematics 6 (1996), 97–
108.
[WBG07] W ICKE M., B OTSCH M., G ROSS M.: A finite element
method on convex polyhedra. In Proceedings of Eurographics’07
(2007), pp. 355–364.

