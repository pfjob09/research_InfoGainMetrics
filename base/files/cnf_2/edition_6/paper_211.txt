DOI: 10.1111/j.1467-8659.2010.01802.x
Pacific Graphics 2010
P. Alliez, K. Bala, and K. Zhou
(Guest Editors)

Volume 29 (2010), Number 7

An Example-based Approach to Synthesize Artistic Strokes
using Graphs
Mikyung Kim and Hyun Joon Shin
Department of Digital Media, Ajou University, Korea

Abstract
In this paper, we propose a technique to produce artistic strokes in a variety of drawing material based on example
images. Our approach is to divide example strokes scanned from images into small pieces along their stroke
directions and synthesize a novel stroke by rearranging them along a user specified curve. The visible quality of a
synthesized stroke can be maintained by utilizing the connectivity information stored in a directed graph constructed
in the preprocessing step. At run-time, the graph is traversed to find a path best matching the user specification
given as a curve and additional information. The results of our experiments shows that visually convincing strokes
of various materials can be generated efficiently.
Categories and Subject Descriptors (according to ACM CCS): I.3.4 [Computer Graphics]: Graphics Utilities—Paint
System

1. Introduction
In this paper, we propose an example-based approach to
synthesize realistic strokes in drawing and painting materials. Computer-generated strokes are widely adopted in
many painting applications, and most of them use simple
image patterns to produce effects of those materials, which
lack beauty of random nature of real material and look artificial. In many recent literatures, strokes of the materials
are synthesized based on mathematical or physical models [CAS∗ 97,CT05,BWL04]. Those physical or mathematical
models are designed for a particular material type and, thus, in
order to produce strokes of a different type, one needs to first
analyze and model physical properties of the target material,
which requires labor, time, and scientific knowledge.

properties of materials, we use real examples hand-drawn on
papers or canvases assuming that they inherently exhibit most
of interesting properties of the materials. We propose a new
framework to synthesize strokes matching the user specification, based on those examples. In this context, the problem
of synthesizing a novel stroke can be casted into segmenting
example strokes and rearranging the pieces. To do this, we
employ the idea of motion graphs [KGP02]. A motion graph
is a graph-like structure which stores connectivity information between example motion segments and allows efficient
motion rearrangement. Therefore, using a graph structure, we
can make stroke synthesis simple and efficient.

An interesting approach has been proposed by Ando and Tsuruno [AT10]. Their method takes real photographs capturing
a few strokes of a material as examples. The example strokes
are segmented and reassembled to form a novel stroke. In
order to connect segments, they adopted a technique similar
to 1D texture synthesis. The proposed example-based framework is versatile since one can add a material easily without
tedious modeling process.

In order to adopt the idea of motion graph for stroke synthesis,
we first need to design a method to connect small pieces of
strokes seamlessly without large distortion. Based on the
connection method, we also need to define a segmentation
method that supports the connection method together with
a similarity metric for graph construction with which we
can maintain the visual quality of synthesized strokes in a
reasonable level. The graph is traversed with an application
specific search scheme and a criterion to yield a graph path
matching the user specification.

The work of Ando and Tsuruno inspired us to develop a
new technique for stroke synthesis. Instead of modeling the

Our contributions are listed as follows.

c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.
Published by Blackwell Publishing, 9600 Garsington Road, Oxford OX4 2DQ, UK and
350 Main Street, Malden, MA 02148, USA.

2146

Mikyung Kim & Hyun Joon Shin / An Example-based Approach to Synthesize Artistic Strokes using Graphs

Example strokes

..
.

Run-time synthesis

Preprocessing

Segmentation

Connetion Graph

User specification

Graph search

Synthesized stroke

Figure 1: An overview of the proposed framework

• We propose a framework that can be used for many types
of drawing and painting materials.

particular material and are not easy to extend to different
types of materials.

• We introduce a simple and hardware friendly method to
seamlessly connect stroke segments.

Instead of providing the user to synthesize an individual
stroke, a number of researches have focused on converting
an existing image into its stylistic counterpart. Among them,
many successful approaches were based on real examples. In
Image Analogies, Hertzmann et al. proposed a generalized
framework to convert an image into one with the different
style based on the relation between a pair of example images [HJO∗ 01]. This idea was extended by Ritter et al. who
proposed an interactive stroke synthesis system based on
examples. In their approach, they used a computationally
expensive pixel-based texture synthesis method to synthesize strokes [RLA∗ 06]. To convert an image into the style of
an example image, Wang et al. extracted the style of brush
strokes from the example image and applied them onto the
target image along its directional field [WWYS04].

• We adopt a notion of graphs for efficient stroke rearrangement while maintaining a reasonable quality.
• We provide a graph search method for interactive painting.
In Section 2, the related work is briefly reviewed. We describe
the details of the proposed framework in Section 3 followed
by application dependent issues discussed in Section 4. We
conclude the paper with discussion of the drawbacks of our
method and future research in Section 5.

2. Related Work
Computer-generated stroke synthesis has been researched for
a few decades. Hsu et al. proposed skeletal strokes in which
an image of a real stroke are deformed to match the user
specification [HLW93]. We believe this is the first stroke synthesis method based on real images of strokes. This method
was also adopted for an painting and animation system called
Skeletal Draw [HL94]. The idea using the stroke image was
also adopted in silhouette rendering [NM00]. Ando and Tsuruno proposed an example-based approach that divided the
example strokes into pieces and reconnected them to produce a novel stroke. While those approaches more or less
deform the example strokes to produce a novel stroke matching the user specification, we try to minimize distortion of
the example for better realism.
Physical simulation has been often used for synthesis of artistic strokes. Curtis et al. proposed a physically based model for
watercolor [CAS∗ 97]. Using simulation, they could produce
extremely realistic effects of watercolor. They also suggest a
method to convert an image into watercolor-style image. Baxter et al. introduced an interactive model for paint [BWL04].
Their model could cover oil and acrylic colors. The relation
between ink and paper has been also explored by Chu and
Tai [CT05]. By adopting Lattice Boltzman equation, they
could realistically model absorption of ink into paper. With
proper modeling, those physically based approaches can produce realistic effects of materials, but they are limited to

Most of example-based approaches including ours share the
same idea that real strokes drawn on the paper contain most
of interesting properties of the material. Differently from the
others, we focus on run-time efficiency most. To provide
an interactive controllability to the user, we try to minimize
the computation at run-time. To minimize the complexity of
image synthesis at run-time, we use simple blending method
to connect examples. To make this simple method able to
produce realistic strokes, we preprocess the examples using
graph structures which prevent us from generating noticeable
artifact.
3. Stroke Analysis and Synthesis
Figure 1 illustrates an overview of our framework. In this
framework, example strokes are given in the form of images.
For each example stroke, our system asks the users to trace
its center curve representing the flow of the stroke. The users
can also provide additional information such as time varying
pressure, brush orientation, speed, and so on, which are the
parameters that can be controlled at run-time for a better
realism. Basically small patches from images are placed and
composed onto a virtual canvas to form a user specified stroke.
Therefore, it is the most important to select patches to place
not only for matching the user specification, but also for
visual quality of the synthesized stroke. In order to facilitate
this selection process at run-time, we employ the notion of
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

Segmentation
..
.

Connetion Graph
Segmentation

Connetion Graph

User specificaton Graph search Synthesized stroke

Mikyung Kim & Hyun Joon Shin / An Example-based Approach to Synthesize Artistic Strokes using Graphs

1

1

0
0
Orientation alignment

Orientation alignment

Position alignment

Position alignment

0

0

0
0

11

2147

0

1

0

1

1

1

Figure 3: Blending over two patches: two semi-transparent
layers of the patches are composed to form smooth transition.

Figure 2: Alignment of two patches

directed graph. Here, a graph is a data structure where a
node is a small patch from an image, and an edge represents
connectivity between two nodes without quality degradation.
Therefore, by traversing the graph, one can produce a variety
of strokes with a reasonable quality by connecting small
pieces.
The proposed framework to synthesize strokes consists with
three major steps: example preparation, graph construction,
and run-time synthesis. In the first step, many example strokes
of a medium drawn on a paper are scanned or photographed
into a digital image format. Additional information about
the strokes is also prepared here by the users. In the second
step, each stroke is segmented into small patches and a graph
storing the connectivity information among the patches is
built. Finally, a novel stroke is synthesized by traversing the
graph and connecting pieces along the path seamlessly. Note
that the first two steps are preprocessing steps and are executed once for a material. For only the last step is frequently
performed at run time, we focus on the efficiency of the last
step to provide users with interactive performance at run-time
while maintaining a reasonable quality of the result. Hence,
we first describe our method to connect two patches, and
based on this, we will, then, discuss the details about each
step.
3.1. Stroke Connection
In our framework, two small patches from stroke images
are connected to form an image of a novel stroke. In order
to achieve seamless connection between the patches, they
should first be aligned in the image space together. At the
boundary, two patches are extended and alpha-blended with
each other to eliminate a visual seam between them. Here,
since those operations are performed very frequently at runtime, they should be efficient enough to guarantee interactive
performance.
As shown in Figure 2, two patches must be aligned in 2D
space in order to be connected seamlessly. We measure the
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

continuity of a synthesized stroke based on that of the center
curve of the stroke. Let the two patches be pi and p j . In
order to make seamless connection between pi and p j , the
starting point of the center curve of p2 must be matched at
the end point of p1 ’s center curve. Moreover, to guarantee
G 1 continuity (geometric tangent continuity), the tangent
directions of the center curves at the joint must be matched
to each other. Those constraints can be satisfied by 2D rigid
transformation of p2 . The alignment of the boundary lines
can be done by simply dividing the example stroke in the
normal direction of the center curve.
The boundary must be further touched up since a small difference between the patches is noticeable at the boundary
when they are connected. In order to make the connection
more realistic, we extrude the patch boundary back and forth
in the direction of the stroke curve, so the patches overlap
around the boundary. The transparency value at a pixel is set
linearly to the distance from the boundary normalized by the
width of the overlapping range. (See Figure 3.) This makes
the patches smoothly blend into each other. Notice that this
method can be simply implemented in the standard graphics
pipeline, and can perform efficiently. Here, the amount of
extrusion is a user controllable value for the type of material. An wider extrusion can efficiently eliminate the seam
between patches of smooth material including watercolor, oil,
and board markers. On the other hand, the strokes of granular
media such as pastel, charcoal, and chalk are more realistic
with narrow overlapping regions.
Figure 4 shows the effect of the connection method. On the
left hand side of the upper row, the patches are connected
without overlapping. In the figure, one can notice apparent
seams between pairs of patches. We can connect the same
sequence of patches more realistically by overlapping and
blending as shown in the upper right the figure. However, the
seams are less noticeable in a synthesized stroke of a granular
material as shown in the bottom row of the figure. On the
contrary, overlapping makes the stroke blurry in this case.
Therefore, the size of overlapping must be set dependently to
the types of material. In our experiment, we have interactively
chosen the size of overlapping for the best visual quality. We

2148

Mikyung Kim & Hyun Joon Shin / An Example-based Approach to Synthesize Artistic Strokes using Graphs

Figure 4: Connected patches: (left) without overlapping,
(right) with overlapping.

Figure 6: Our example preparation UI.

interface that allows the user to conveniently specify the
center curves on the scanned images. In this UI shown in
Figure 6, the user-drawn curves are fitted with Catmul-Rom
spline curves for further editing. The parametric curve representation also provides an analytic mean to compute the
tangent and normal directions of the stroke. Additional information such as brush orientation and pressure are also
specified by the user in this stage (shown as a black box in
the figure). On the knot sequence given for the center curve,
those values are assigned to form one-dimensional spline
curves. In our experiment, we found that untrained graduate
students can specify the center curve for a stroke with 8 to 12
control points in 3 to 5 minutes. For we use 6 to 8 example
strokes for a material, it takes about 30 minutes to prepare
the examples of one material.
Figure 5: Example strokes.

use 20 pixels for the smooth material, and 3 pixels for the
others.
The proposed method has an advantage over the image
quilting method used in the previous example-based approach [AT10]. The image quilting method is designed to
produce the optimal seam between patches, but, due to its
computational cost, the method is adopted for down-sampled
images, which causes visual artifacts. On the other hand, our
simple connection method is efficient enough to stitch all the
patches of a painting in realtime since alpha-blending is supported by most of graphics hardwares. However, the quilting
method does not require the strict alignment of segments. It
provides a better flexibility and one can produce wider ranges
of strokes with a limited set of examples.
3.2. Example Stroke Preparation
Given the digitized images, we first ask the users to specify
the center curves on each stroke. We implemented a user-

In order to help the user, we have tested a couple of designated
methodologies. First, we bind a brush with a stylus, and let
the user draw example strokes on the paper placed on top of a
tablet. With this method, the center curve can be specified by
simply offsetting the curve recorded by the tablet, as long as
the relative position of the stylus to the brush is not changed
during drawing. Another advantage of this method is that a
variety of additional information can also be directly captured
from the device. This trick does not work for materials that
wear fast including pastel, crayon, chalk, and so on. Another
method we have tried is to print predefined curve patterns on
a paper, and let the user draw strokes on the patterns. With
this method, the center curve can be achieved by registration.
However, we cannot use this method when the material is
translucent and leaves the printed pattern visible.
For our experiment, we drew strokes of five materials including charcoal, watercolor, pencil, board marker, and crayon.
In order to guarantee versatility, circular patterns with various radii are drawn for each material. Figure 5 shows some
examples of the real hand-drawn strokes. Each stroke was
separated from the image and its center curve is specified
with the dedicated user interface.
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

Mikyung Kim & Hyun Joon Shin / An Example-based Approach to Synthesize Artistic Strokes using Graphs

2149

3.3. Segmentation and Graph Construction
We segment the example strokes into small patches, so we
can synthesize a novel stroke by connecting them. As in Section 3.1, the boundaries of each patch need to be perpendicular to the tangent direction for efficient seamless connection.
Therefore, we cut the example strokes in the normal direction
while progressing along the center curve. The parametric distance between two consecutive cuts can be set to control the
tradeoff between flexibility and performance. The thiner each
patch is, the more patches we have. If we have more patches,
there would be more nodes and edges in the final graph, and
we have more chances to find a graph path better matching
the user requirement. However, it takes more time to traverse
a graph. With extensive experiment, we divide each stroke,
such that we have four patches between a successive pair
of control points. By doing this, the approximated distance
between the start and end point of a patch is 10 to 15 pixels.
Those patches are built into the nodes of the graph.
An edge in the graph indicates that we can connect the patches
at the nodes without noticeable visual quality degradation.
Therefore we need to connect two nodes when their overlapping regions are visually similar to each other. To do this, we
first build a matrix each of which element is the visual difference between the pair of the corresponding patches. Based
on our connection method, we define the difference metric
between the patches pi and p j as follows. To calculate the
difference, we first align the coordinate of the overlapping regions in such a way that the low left corners of the regions are
located at the origin and the tangent directions are aligned to
x-axis. Assuming that the visual difference can be measured
by the color difference, the difference between the patches
ei j is defined:
ei j =

∑x,y w(x)||ci (x, y) − c j
∑x,y w(x)

(x, y)||2

,

(1)

Figure 7: An example of the difference matrix with red dots
indicating the edges.

has been specified interactively such that the average number
of outgoing edges are 10.
Fiqure 8 demonstrates the image of stroke synthesized by
traversing the graphs. The strokes are composed on the frame
buffer additively without physical models such as KubelkaMunk model [CAS∗ 97] for simplicity.
4. Stroke Synthesis
4.1. Interactive Painting

where W is the width of the overlapping region. The weight
is maximal at the center and fades out to zero at the boundary.
An example of a difference matrix is shown in Figure 7.

The most obvious application of the proposed system would
be interactive painting, where the user provides a curve to
specify the geometry of the stroke and the system produces
a matching stroke. We can provide a better user experience
by allowing the virtual strokes to be drawn while the user is
specifying the curve. As a novel stroke corresponds to a graph
path, we need to traverse the graph for a path that closely
matches the user specification. However, it is not realistic
to find the best matching graph path in an interactive ratio.
Therefore, we propose a traversal scheme that provides an
approximated solution interactively.

As in motion graphs, the local minima in the matrix that
are below the user-specified threshold are selected as the
edges connecting the corresponding nodes. The threshold
is set to control the tradeoff between the flexibility and the
visual quality. Therefore the threshold for a example stroke
set should be selected such that the junction between the pair
of the segments for an edge is close enough and the number
of the outgoing edges from a node is sufficient to yield a
variety of choice at a time. In our experiment, the threshold

Our basic idea, here is to find the best graph path for short part
of the user curve at a time. While the user is drawing the curve,
our system waits for the part of curve that is encountered yet
to become long enough (10 pixels in our experiment) until
another node is required. We then pop out a couple of edges
(2 for our experiment) from the previously built path. This
causes a part of the user curve to become un-encountered state.
We perform a new traversal to find best matching path for the
un-encountered part. Here this traversal starts from the last

where ci (x, y) is the color at (x, y) in the aligned image of
pi . The ranges of x and y are the width and the height of
the overlapping region, respectively. Since one fades out to
complete invisible at the boundary of the overlapping region,
the weight w(x) is defined as
w(x) = 1 − |2x/W − 1|,

(2)

c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

2150

Mikyung Kim & Hyun Joon Shin / An Example-based Approach to Synthesize Artistic Strokes using Graphs

Figure 8: Synthesized strokes: (top) watercolor, (bottom)
charcoal.
Figure 10: Painting drawn using our system.
User curve
Fixed

Best Path

d
Figure 9: Our local search method: among possible paths
(orange) from the fixed path (blue), one that has the closest
endpoint to the user curve (gray) is selected (purple).

node that is not popped out. By doing this, since the new part
of the curve acts as a look ahead, we can find better matching
edges in the place of the edges popped out. Moreover, we can
maintain the search depth to a reasonable level to guarantee
an interactive response. We use an exhaustive search method
to find each short path. The error metric for search is the
Euclidean distance from the end point of the last node in
the image space to its closest point on the user curve as
shown in Figure 9. Figure 10 shows paintings drawn with our
interactive painting system.
It is worth to note that the average time complexity of the
proposed traverse method is O(nk ) where n is the number of

outgoing edges of the nodes, which is, for our test set, 10 in
average, and k is the number of look-ahead, which is 3 in
our experiment. This exponential complexity may prevent the
users to add a large number of examples. For example, our
test set is limited to 10 outgoing edges per node in average
and the number of look-ahead is bounded by 3 edges to
complete each search step within 50 ms. One can develop a
better search method incorporating a dynamic algorithm or
randomized algorithm, which will also handle the repeating
pattern problem sometimes observed in our results.
Another thing we want to notice the readers with is the effects of example set and the user-drawn curve. With the other
example-based approaches, our graph-based method has the
inherent problem that the range of syhtnesizable strokes is
strictly limited to the example stroke set. For example, with
the circular pattern set shown in Figure 5, cannot create precise matches to the user input curves as shown in Figure 11.
Those deviations can be suppressed by adding a few examples
with sharp corners as shown in the upper row of Figure 12
and we can produce far better results shown in the lower part
of the figure, but it also increases the computation time for
each search step by 5%.
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

Mikyung Kim & Hyun Joon Shin / An Example-based Approach to Synthesize Artistic Strokes using Graphs

2151

out deep search. Although some features have not be exactly
duplicated since the possible range of the strokes is limited
to the examples in our system, our results maintain not also
realistic effect of the material, but also pleasing random nature of hand drawing. The flower example took 3 minutes to
be completed and the portrait example took 48 minutes due
to many small strokes on the hair.

5. Conclusion and Limitations
Figure 11: The strokes that deviate from the user input curves
(drawn in black) due to the limited example set.

Figure 12: The strokes produced with the additional examples (green strokes at the top).

4.2. Stylistic Filter
Another application of the proposed framework is stylistic filter, which convert a picture into the stylistic painting. Among
many possible styles, we apply our framework to generate
sketch style filtering. To do this, we first employ the coherent
line drawing method proposed by Kang et al. [KLC07]. This
method can convert an image into its line drawing counterpart
by finding the edge tangent file of the image and tracing it.
To make a stylistic conversion, we also find the edge tangent
field of an image and trace it to find curves along the important edges. Instead of drawing those curves, we take the
curves as the user specification for stroke generation. The
best matching graph path is found for each curve with the
aforementioned scheme.
Figure 13 exhibits the original images, their line drawing
version and the results of the proposed method. Here, we
slightly increase the local search depth to 5, since the images
have many sharp curves, which cannot be well matched withc 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

In this paper, we proposed a novel framework to produce
strokes of a variety of media without modeling their properties. By taking examples from real strokes and rearranging
them, we could synthesize images of strokes with reasonable qualities. In order to simplify the run-time process, we
incorporate the notion of graph that stores the connectivity
information among the small patches segmented from the
example stroke images. Further, we also suggested a simple blending method to connect the patches seamlessly. For
interactive painting applications, an efficient graph search
method was suggested that allows the system to visualize an
intermediate result interactively.
The first weakness of the proposed method is that it cannot
reproduce some interesting phenomena of the real media including the flow effect of watercolor. We cannot even change
the texture of the paper at run-time. However, we believe
that many of essential properties of the media are reflected
in the example, so we can reproduce them by rearranging
the segments. Typical effects of watercolor including edge
darkening, backruns, and granulation can be duplicated if the
example strokes bear them.
The other drawback can be that we must have a sufficient
number of sample strokes. As stated in 4.1, the number of
examples is crucial for controllability and flexibility. The controllability is limited because not only the proposed approach
is based on examples, but also the numbers of edges are
controlled for efficiency. While the former issue is inherent,
the later issue can be handled by developing more efficient
traversal methods.
Beside this, in order to provide better realism, it is required
to have a sufficient number of example strokes. For example,
if we have plenty of example strokes, and we add terms for
stroke length into our graph search metric, we can simulate
the gradual dry effect of watercolor brushes. However, due
to the limitation of graphic memory, it is unrealistic to store
the images of a large number of strokes in texture memory of
graphic hardware. Although our graph based approach can be
controlled for reasonable performance, one needs to choose
a proper number of example strokes for limited memory
compromising realism.

2152

Mikyung Kim & Hyun Joon Shin / An Example-based Approach to Synthesize Artistic Strokes using Graphs

Acknowledgements
This paper was completed with Ajou university research fellowship of 2008.
References
[AT10] A NDO R., T SURUNO R.: Segmental brush synthesis with
stroke images. Graphics Forum (2010), To be published. 1, 4
[BWL04] BAXTER W. V., W ENDT J., L IN M. C.: IMPaSTo:
A realistic, interactive model for paint. In Proceedings of the
International Symposium on Non-Photorealistic Animation and
Rendering, NPAR (New York, NY, June 2004), Spencer S. N.,
(Ed.), ACM, pp. 45–56. 1, 2
[CAS∗ 97] C URTIS C. J., A NDERSON S. E., S EIMS J. E., F LEIS CHER K. W., S ALESIN D. H.: Computer-generated watercolor.
In SIGGRAPH ’97: Proceedings of the 24th annual conference
on Computer graphics and interactive techniques (New York,
NY, USA, 1997), ACM Press/Addison-Wesley Publishing Co.,
pp. 421–430. 1, 2, 5
[CT05] C HU N. S.-H., TAI C.-L.: Moxi: real-time ink dispersion
in absorbent paper. In SIGGRAPH ’05: ACM SIGGRAPH 2005
Papers (New York, NY, USA, 2005), ACM, pp. 504–511. 1, 2
[HJO∗ 01] H ERTZMANN A., JACOBS C. E., O LIVER N., C UR LESS B., S ALESIN D. H.: Image analogies. In SIGGRAPH ’01:
Proceedings of the 28th annual conference on Computer graphics
and interactive techniques (New York, NY, USA, 2001), ACM,
pp. 327–340. 2
[HL94] H SU S. C., L EE I. H. H.: Drawing and animation using
skeletal strokes. In SIGGRAPH ’94: Proceedings of the 21st annual conference on Computer graphics and interactive techniques
(New York, NY, USA, 1994), ACM, pp. 109–118. 2
[HLW93] H SU S. C., L EE I. H. H., W ISEMAN N. E.: Skeletal
strokes. In UIST ’93: Proceedings of the 6th annual ACM symposium on User interface software and technology (New York, NY,
USA, 1993), ACM, pp. 197–206. 2
[KGP02] KOVAR L., G LEICHER M., P IGHIN F.: Motion graphs.
ACM Trans. Graph. 21, 3 (2002), 473–482. 1
[KLC07] K ANG H., L EE S., C HUI C. K.: Coherent line drawing.
In NPAR ’07: Proceedings of the 5th international symposium
on Non-photorealistic animation and rendering (New York, NY,
USA, 2007), ACM, pp. 43–50. 7
[NM00] N ORTHRUP J. D., M ARKOSIAN L.: Artistic silhouettes:
A hybrid approach. In Proceedings of the First International Symposium on Non Photorealistic Animation and Rendering (NPAR)
for Art and Entertainment (June 2000). 2
[RLA∗ 06] R ITTER L., L I W., AGRAWALA M., C URLESS B.,
S ALESIN . D.: Painting with texture. In 17th Eurographics Symposium on Rendering (2006), pp. 26–28. 2
[WWYS04] WANG B., WANG W., YANG H., S UN J.: Efficient
example-based painting and synthesis of 2d directional texture.
IEEE Transactions on Visualization and Computer Graphics 10
(2004), 266–277. 2

Figure 13: Examples of stylistic filtering using the proposed
framework comparing to the original and the coherent line
drawing method.
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

