DOI: 10.1111/j.1467-8659.2009.01706.x
Eurographics/ IEEE-VGTC Symposium on Visualization 2010
G. Melançon, T. Munzner, and D. Weiskopf
(Guest Editors)

Volume 29 (2010), Number 3

Topological Landscape Ensembles for Visualization of
Scalar-Valued Functions
William Harvey and Yusu Wang
Department of Computer Science and Engineering, The Ohio State University, USA

Abstract
Visual representation techniques enable perception and exploration of scientific data. Following the topological
landscapes metaphor of Weber et al., we provide a new algorithm for visualizing scalar functions defined on simply
connected domains of arbitrary dimension. For a potentially high dimensional scalar field, our algorithm produces
a collection of, in some sense complete, two-dimensional terrain models whose contour trees and corresponding
topological persistences are identical to those of the input scalar field. The algorithm exactly preserves the volume
of each region corresponding to an arc in the contour tree. We also introduce an efficiently computable metric on
terrain models we generate. Based on this metric, we develop a tool that can help the users to explore the space
of possible terrain models.
Categories and Subject Descriptors (according to ACM CCS):
Generation—View algorithms

1. Introduction

field. In this paper we present an algorithm to generate a
collection of 2D terrain models which preserve the contour
tree of the input scalar field. These terrain models serve as
“topological landscape metaphors” of the input scalar field,
a concept that was previously proposed in [WBP07].

Visualization of scalar functions f : D → IR for various domains D is an important problem in analyzing scientific data.
Scalar functions are prevalent in a variety of disciplines and
sometimes admit simple and natural visualizations when D
takes certain forms. For example, grayscale digital images
are scalar functions with a rectangular domain D ⊂ IR2 and
can be easily visualized via rendering to a raster display.

Related work. The application of contour trees traces back
to the 40’s [Ree46] in the field of topography. Recently it
has been used in a broad spectrum of applications such as
geographic information systems [GC86, TIS∗ 95], isosurface
extraction [BK93,CS03,vKvOB∗ 97], and volume visualization and segmentation [BPS97, CS03, WDC∗ 07]. One factor
contributing to its practical success is perhaps the simple and
efficient algorithm proposed by Carr et al. [CSA03] which
computes the contour tree of a simplicial domain of arbitrary dimensions in O(n log n) time, where n is the number
of vertices and edges in the domain.

However, as the dimensionality or complexity of D increases, an effective visualization technique may no longer
be obvious. In such scenarios, a natural approach is to use
dimensionality reduction techniques to project the data to
lower dimensions. Various dimensionality reduction algorithms have been proposed [BN03, Hot33, RS00, TdSL00],
often focusing on locally preserving the metric during the reduction. However, there is usually no guarantee that dimensionality reduction will preserve the topological structure of
f . This can limit their ability to capture the high-level global
features of the input scalar fields.

While the contour tree is informative, its graph-like structure can be unintuitive in creating a visual picture of the underlying dataset. Furthermore, laying out the contour tree as
a graph with few crossings in the plane is a nontrivial problem if one wishes to also indicate the scalar function values
in the layout. This problem becomes more serious as the dimension of the dataset increases. To enhance the contour tree
structure, Takahashi et al. [TFO09] recently proposed an ap-

On the other hand, given a scalar function f : D → IR defined on a simply connected domain D, the contour tree of f
traces changes in connected components of level sets of f as
the function value varies. It encodes perhaps the simplest, yet
still meaningful, topological information of the input scalar
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.
Published by Blackwell Publishing, 9600 Garsington Road, Oxford OX4 2DQ, UK and
350 Main Street, Malden, MA 02148, USA.

I.3.3 [Computer Graphics]: Picture/Image

993

994

W. Harvey & Y. Wang / Topological Landscape Ensembles for Visualization of Scalar-Valued Functions

proach which approximates the contour tree by embedding
it in IR3 in a way that strives to preserve the geometry of
the original domain. Specifically, they designed a metric for
the input scalar field that tends to contract contours and then
used this metric to perform dimensionality reduction to embed the input data in IR3 .
In [WBP07], Weber et al. proposed the novel topological landscape metaphor for an input scalar field, which is a
two-dimensional terrain model sharing the same contour tree
as the input data. The resulting landscape visualization harnesses the ability of humans to rapidly and easily understand
the structure of a terrain, thereby avoiding the difficulties involved in trying to understand the scalar field via a graph
drawing of a (potentially very complex) contour tree.
Our contributions. Our paper is built on the topological
landscape concept developed in [WBP07], but broadens its
scope in several ways. Specifically:
• Given an input (potentially high dimensional) scalar field
defined on a simply-connected domain, we define and
compute a collection of, in some sense complete, 2D terrain models (topological landscapes metaphors) for it.
• Each of these terrains preserves the contour tree structure of the input scalar field. Each also preserves the exact volume of its corresponding topological component in
the input domain. (Roughly speaking, the volume of each
mountain peak and valley is preserved in the 2D terrain.)†
• We observe the connection between our terrain generation
algorithm and the widely-used family of treemap techniques [JS91]. This provides an extra layer of flexibility
in our terrain generation: we can use any existing treemap
algorithm to construct a terrain layout.
• We develop a novel algorithm to lay out the collection of
terrains and a simple tool for the user to explore it and to
identify potential signature terrains.
• We demonstrate the effectiveness of our tool by applying it to standard volumetric datasets as well as a highdimensional protein simulation dataset where interesting
properties of the protein folding process are revealed.
2. Preliminaries
We now briefly introduce the contour tree of a scalar function. For a detailed exposition we refer the reader to [Car00].
Let f : M → IR be a scalar field defined on a simply connected domain M. A level set of f is a set f −1 (α) := {x ∈
M | f (x) = α} for some value α ∈ IR. As we vary α, the connected components in the level set may appear, disappear,
split, and merge. The contour tree of f tracks such changes.
† [WBP07] used a nonlinear optimization procedure for this purpose and obtained good accuracy in their experiments. However, the
exact volume preservation is not guaranteed. The running time of it
is parameter/data dependent, and may not always converge.

(a)

(b)

(c)

Figure 1: (a) The graph of a terrain f : IR2 → IR, (b) its
contour tree and (c) its corresponding contours at critical
points. The dark-shaded and light-shaded regions in (a) and
(c) are the topological components for edges ac and cd, respectively.

Specifically, a contour is a connected component in a level
set. Two points x, y ∈ M are equivalent if they belong to the
same contour. The contour tree of f , denoted by T ( f ), is the
quotient space induced by this equivalence relation.
Intuitively, T ( f ) is obtained by continuously collapsing
each contour in the level set into a single point [Ree46].
There is a 1-to-1 correspondence between contours of f and
points of T ( f ). Given a point q ∈ T ( f ), we use Cq to denote the contour from M that is collapsed to q. Note that
the input scalar field f : M → IR induces a function f˜ on
T ( f ) under the quotient operation. That is, for any q ∈ T ( f ),
f˜(q) = f (x) for any x ∈ Cq . We abuse the notation slightly
and use f to represent f˜ as well from now on.
If M is simply connected, then T ( f ) is loop-free and can
be represented as a tree. See Figure 1 for an example in
which the height of each point q in the contour tree is f (q).
Tree nodes of T ( f ) are points in T ( f ) such that either their
up-degree is not 1 or their down-degree is not 1. They correspond to certain “critical” isovalues where the 0-homology
of the level set (i.e. the number of connected components)
changes. Specifically, a node with degree 1 (also called a
leaf) of T ( f ) corresponds to an extreme point in the domain
M. A node of degree more than 2 corresponds to merging/splitting of contours. Deleting the nodes of T ( f ) from T ( f )
leaves a set of curves which are the edges of the contour tree.
Topological components. Consider an edge e of the contour tree T . Let TopoComp(e) ⊆ M denote the union of all
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

W. Harvey & Y. Wang / Topological Landscape Ensembles for Visualization of Scalar-Valued Functions

(a)

(b)

995

(c)

Figure 2: In (a), v is either a lower-leaf (left, a local minimum) or upper-leaf (right, a local maximum). Its local config-type is
minc or maxc, respectively. Note, the contours Ct , Cu and Cv adopt the nesting relationship as specified by the directed path from
t to u to v. (b) An example of a merge-1 local config-type. The contour Cu corresponding to the saddle u has two components.
(c) An example of a merge-2 local config-type where Cu has two components (loops) with one contained inside the other. The
split-1 / 2 local config-types are similar to merge-1 / 2, but occur at tree nodes whose up-degree is two.
contours that are mapped to points in e; that is,
TopoComp(e) =

[

Cq .

q∈e

Since every point q in e has degree 2, as we traverse e the corresponding contours do not change their connected component information. Thus TopoComp(e) can be thought of as
the evolution of a particular contour. We call TopoComp(e)
a topological component of f w.r.t. arc e. For example,
for the edge e = (a, c) in Figure 1, TopoComp(e) (darklyshaded region) indicates the evolution of the contour created at a and merged to another contour at c. If M is an
m-dimensional manifold, then we can talk about the mdimensional volume of TopoComp(e).
From now on, for simplicity we assume that M is a dmanifold, and the input function f : M → IR is “nice” (more
precisely, a Morse function [Mil63]). For such inputs, the
contour tree is simple; its nodes are either of degree 1 (corresponding to extreme points) or of degree 3 (corresponding
to saddle points). Our algorithm can also handle the general
case in which the contour tree is not simple.
3. Algorithm
Overview. Since the contour tree is an abstract graph without a natural embedding, it can be difficult to interpret in
its entirety. Given a scalar field f : M → IR defined on a dmanifold M, we follow the direction of [WBP07] and wish
to compute some 2D terrain metaphor g : IR2 → IR for f .
As in [WBP07], we require that g and f share the same
contour tree. Additionally, we also require that the areas of
the topological components of g are the same as the volumes
of corresponding topological components of f . Intuitively,
this guarantees that the size of the mountains and valleys
we see in the generated terrain match the volumes of their
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

counterparts in the input domain. It is important to keep in
mind that the volumes of the topological components in the
input domain are not integrals of f , and thus it makes sense
to preserve them as the areas of the footprints (in IR2 ) of the
hills and valleys of g rather than as the volumes (integrals)
of these hills and valleys.
Furthermore, there are many possible terrain models with
different configurations in the plane. We thus aim to produce
an ensemble of terrains and provide a tool that help users to
explore this ensemble.
In the remainder of this section, we first introduce this
ensemble of terrain models. We then describe a simple algorithm to compute a particular terrain model as well as an
algorithm to efficiently traverse this ensemble. Finally, we
present a novel way to visualize the space of terrain models.
3.1. Ensemble of Terrain Models
The only two-dimensional manifolds that are simply connected are the 2-sphere S and the two-dimensional plane IR2 .
We choose to use IR2 as our underlying domain for the terrain metaphor models, as this is perhaps the easiest and most
intuitive platform for visualization.
A contour in IR2 is a simple closed curve. By the Jordan
curve theorem the local configuration of contour evolutions
can be enumerated as shown in Figure 2. We index these
local config-types as minc, maxc, merge-1, merge-2, split-1,
and split-2. These local config-types can be uniquely distinguished by assigning directions to the tree edges. Specifically, a direction from point u to v in a tree edge means that
the contour corresponding to u contains that of v. Hence a
labeling of tree nodes with local config-types is equivalent
to assigning edge directions.
Every terrain in the plane will give rise to a labeling of

996

W. Harvey & Y. Wang / Topological Landscape Ensembles for Visualization of Scalar-Valued Functions

terrain is the interior of the square D = [0, 1] × [0, 1] which is
homeomorphic to IR2 (the boundary of D corresponds to the
point at infinity z). We also assume without loss of generality
that the input domain M has total volume 1.

(a)

(c)

(b)

(d)

Figure 3: (a) A contour tree T . A directed tree induced by
choosing z1 , z2 , or z3 as the root is shown in (b), (c), and (d),
respectively, where z3 is an internal node. Edge directions
indicate the inclusion relationships of the contours when embedded. The red thick path in (c) are edges whose directions
are inverted as we change the root from z1 to z2 .
its contour tree nodes with these local config-types, and two
terrains share the same configuration if they have the same
labeling at all nodes. A terrain model with a specific configuration will be called an implementation of this configuration. Our algorithm will produce an implementation for
every possible configuration of an input contour tree as well
as a way to quickly traverse these configurations.
3.1.1. Generation of Configurations
We now inspect how many configurations can exist and
how to generate them. Specifically, consider the downfork
degree-3 node in Figure 2. The corresponding two contourevolution configurations in (b) and (c) are actually the same
if we compactify the plane into the 2-sphere S by adding a
point at infinity. This is because on S there is no containment
relation between closed curves. Hence a downfork node simply corresponds to the event where two contours merge into
one as the function value increases. In fact, all terrains on S
having contour tree T share the same configuration. Furthermore, given any tree T there is always a terrain on S with T
as its contour tree. Let h : S → IR be one such terrain.
Point at infinity. Now, by choosing a point at infinity z on
S, there is a homeomorphism Φz between the open set Sz :=
S \ {z} and IR2 . Φz maps the terrain h : S → IR on S to a
planar terrain Fz : IR2 → IR defined as Fz := h ◦ Φz .
From now on, we assume that the domain of our planar

Given a point at infinity z ∈ S, the configuration of the
corresponding planar terrain Fz can be computed as follows.
Let z˜ be the point in the contour tree T corresponding to
the contour containing z. We obtain a unique directed tree
by choosing z˜ as the root, and assign a direction to each tree
edge as induced by the flow whose source is z˜. See Figure
3 for examples. This directed tree induces a labeling of the
local config-type for each tree node, which forms the configuration of the terrain model Fz .
To see why this directed tree gives the desired configuration, assume that z is an extreme point. Since z is mapped
to the boundary of D, as we move away from z along contour tree edges the corresponding contours will continuously
evolve inwards. Hence the directions we assign (induced by
the flow away from the point z) indicate the corresponding
containment relations among contours.
If z is not an extreme point then the contour Cz passing
through z is mapped to union of the boundary of D (i.e. the
mapping of z) and a simple curve cutting through D (i.e. the
mapping of Cz \ {z}). The above procedure still holds.
Finally, it is easy to check that Fz1 and Fz2 have the same
configuration if points z1 and z2 are mapped to the same contour tree edge. In other words, if z1 and z2 are from the same
topological component in the terrain h on S, then Fz1 and Fz2
are simply different implementations of the same configuration. Putting everything together, we have:
Claim 3.1 Given a contour tree T with n nodes, there are
2n − 1 distinct configurations of planar terrain models. n − 1
of them are generated by choosing an arbitrary point from
each tree edge as the root to assign edge directions, and n of
them are generated by choosing a tree node as the root.
Let χu denote the configuration induced by choosing u as
the root of the directed tree. From now on, for simplicity of
exposition we compute only an ensemble of configurations
Π = {χu | u is a leaf node of T }. However, our algorithm
works for all 2n − 1 configurations and our software also
computes all of them.
We remark that the terrain metaphor generated in
[WBP07] has the configuration of choosing either the global
minimum or global maximum as the root.
3.1.2. Traversing the Ensemble
Consider two contour tree nodes u and v, and their corresponding terrain configurations χu and χv . It is straightforward to check that when the tree root moves from node u to
v, only those arcs on the unique path π(u, v) in the contour
tree T will reverse their directions and no other tree edges
will be affected. See Figure 3(c). Once the configuration χu
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

W. Harvey & Y. Wang / Topological Landscape Ensembles for Visualization of Scalar-Valued Functions

(a)

(b)

Figure 4: Red dotted lines indicate the contour tree. (a) Setting u to be the point at infinity induces a merge-1 local
config-type at v. (b) Setting w to be the point at infinity induces a merge-2 local config-type at v which resembles a
volcano with edge (x, v) corresponding to its crater.
is known, it takes only O(|π(u, v)|) time to update it to obtain
configuration χv . Hence we can enumerate all configurations
by traversing the contour tree in O(|T |) time.
Such an efficient traversal of the entire ensemble of configurations can also be used to help to identify the best terrain model under some optimization objective function. For
example, merge-1 and split-1 local config-types might be
preferred over merge-2 and split-2, as the former two configurations provide a more natural illustrations of merging
components than the latter two. See Figure 4 for an example
of two components (created at w and x) merging at a saddle
v. (A similar case holds for the implementation of a splitting
node.) Such an optimal configuration can be easily computed
in O(|T |) time using the above traversal algorithm.
3.2. Terrain Implementation for a Configuration
We now describe how to compute an implementation of a
terrain given a configuration χz corresponding to a tree node
z. We begin by computing a layout of the terrain using a
treemap algorithm. We then generate a triangular mesh from
the layout and interpolate the function values to achieve the
desired result.
3.2.1. Terrain Layout Generation

997

that we can use a recursive algorithm to embed contours corresponding to tree nodes. To preserve the area of topological
components, we require that for any directed edge e = (u, v),
the area of the region Ruv sandwiched between embedded
contours Cu and Cv is the same as the volume of the topological component TopoComp(e) in the input domain. (Note
that the topological component TopoComp(e) is mapped to
Ruv .) This requirement implies that the area of Ru should
equal the total area of topological components for all edges
in the subtree of Tz rooted at node u.

(a)

(b)

Figure 5: Schemes for generating the terrain layout. The region between contours Cu and Cv equals to the volume of the
topological component corresponding to edge euv .
Now let the area-weight A(e) of a tree edge e be the volume of its associated topological component in the input domain. The area-weight A(v) of a tree node v is simply the
total area-weights of all edges in the subtree of Tz rooted at
v. The algorithm we now describe will embed each contour
as a rectangular curve. Specifically, suppose the contour of
a tree node u is already embedded as a rectangle Cu , and the
rectangular region Ru enclosed by Cu has area A(u). We recursively embed all nodes in the subtree of Tz rooted at u in
Ru as follows. Let e = (u, v) be the outgoing edge at u. There
are two possibilities (see Figure 5):

Given a contour tree T , a configuration χz is simply a directed tree Tz induced by choosing tree node z as the root.
Recall that each edge e ∈ T corresponds to a topological
component TopoComp(e) in the original domain. The goal
of generating a terrain layout is to identify a contour Cu in
D for every tree node u of T so that (1) containment relations between contours are as indicated by directions of tree
edges in Tz , and (2) each topological component is mapped
to a region in D with the same area.

(1) If v has degree 3, then we first scale Ru down to a rectangle Rv such that the area of Ru \ Rv equals the area of the
topological component TopoComp(e). We then partition
Ru into two rectangles Rl and Rr whose areas are the total
area-weights of all edges in the left subtree at v and of all
edges in the right subtree at v, respectively. Cv is the union
of boundaries of Rl and Rr . We recursively embed the left
subtree of v in Rl and the right subtree of v in Rr .
(2) If v is a leaf, then its corresponding contour Cv is an
extreme point, which we set to be the center of Ru .

Given a tree node u ∈ Tz , assume its contour is already embedded in D as Cu , and let Ru ⊆ D be the region bounded by
Cu . Since directions along edges in Tz indicate the containment relations between contours, it is necessary that all subtrees of Tz rooted at u will be embedded in Ru . This suggests

The above algorithm is a variant of the slice-and-dice
treemap algorithm [BDL05]. Indeed, treemaps are a way
to visualize hierarchically-organized datasets by recursively
partitioning a region in IR2 such that the area of each subregion corresponds to a given attribute of the dataset. In our

c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

998

W. Harvey & Y. Wang / Topological Landscape Ensembles for Visualization of Scalar-Valued Functions

case, the attribute is the area of each topological component. We can use any treemap algorithm to compute a terrain
layout. An example of using the Voronoi treemap [BDL05]
is shown in Figure 8(b) which looks more natural than the
slice-and-dice layout. However, the time complexity of sliceand-dice is linear in the number of tree nodes of T , while
the Voronoi treemap algorithm uses Lloyd’s method [Llo82]
which can require many iterations to converge. Our software
provides both types of layouts.
3.2.2. Terrain Mesh Generation
Given a terrain layout map L containing a set of contour
curves C1 , . . . ,Cn corresponding to tree nodes v1 , . . . , vn , the
function value for all points in Ci is simply f (vi ). We first
construct a triangulation K of D such that Ci s are preserved
as a subset of edges of K. This is done by inserting some
Steiner points within each region of L. Specifically, there
are two types of regions: annulus-like regions sandwiched
between two closed curves, and simple regions with one
boundary curve. For the former, we insert no Steiner points
and simply triangulate the region. For the latter, we insert
k Steiner points randomly and then triangulate the region.
Since each simple region corresponds to either a peak or a
valley, we use these additional Steiner points to provide a
more refined visualization in these regions. Annulus-like regions correspond to regions between saddles, and we create
wall-like terrain surfaces for them. The value k is a userspecified parameter that trades visual quality for mesh simplicity and is set to a small constant in our experiments.
Function interpolation. We now have a mesh K with function values known at vertices along contours Ci s, but unknown at the added Steiner points. Consider a simple region
from the layout with boundary Ci . The function values of
all points along Ci are equal. Furthermore, by the way we
construct the layout, the center point vc of this region corresponds to the contour of some leaf node in the contour
tree, hence vc is an extreme point with known function value
as well. The function values of Steiner points in the interior of this region are computed using a standard Gaussianweighted graph Laplacian [GSAW05].
3.3. A Visualization of Spaces of Configurations
So far, we have discussed how to generate an ensemble Π
of configurations for an input contour tree T as well as
an implementation of each terrain configuration. One natural question is how to choose a configuration to visualize, which is perhaps application dependent. To assist the
user in exploring the space of possible terrain models for T ,
we develop an efficiently computable metric on Π and use
it to project the configurations into two-dimensional space.
See [CSvdP04] for discussions on some other potential measures on configurations.
Metric for Π. Given two configurations χu and χv generated
by choosing tree nodes u and v as roots of a directed tree,
respectively, we define their distance d(χu , χv ) as follows.

Let π(u, v) be the unique path between u and v in the
original contour tree T . Given a tree edge e = (q, r), let
f (e) := | f (q) − f (r)| be the function value difference between the two endpoints of e. Set w(e) as the product of f (e)
and the area of the topological component associated to e.
Roughly speaking, w(e) gives the amount (volume) of earth
enclosed by the terrain in domain TopoComp(e). For example, for a 2D terrain, if TopoComp(e) is a peak region, w(e)
is the volume of the peak. We define the distance between χu
and χv as d(χu , χv ) = ∑e∈π(u,v) w(e). Recall π(u, v) denotes
the set contours whose containment relations now need to
be reversed as the tree root changes from u to v. Intuitively,
d(χu , χv ) is the total amount of earth that one has to transport
to convert one terrain to the other.
The pairwise distances between all configurations in Π
can be computed in Θ(n2 ) time by traversing the contour
tree Θ(n) number of times. We then use ISOMAP [TdSL00]
to embed each configuration as a point in the plane. Since the
difference in appearance of two terrain models is captured by
the metric d, the resulting 2D point cloud provides a visualization of the variations in appearance of the terrain models and can facilitate selection of one or more representative
models from the pool of all choices. For example, clusters in
this 2D point cloud, or outliers, may correspond to representative terrain models. We provide a user interface in which
a user may click on any 2D point to instantly bring up the
corresponding terrain layout and/or the final terrain model.
General contour trees. Our algorithm can be extended to
handle contour trees with nodes of degree other than 1 or
3, as treemap algorithms can easily handle arbitrary node
degrees. The contour tree can also be optionally simplified
[CSvdP04, WBP07] by eliminating branches corresponding
to topological features whose persistence is below a userspecified threshold. This helps to reduce the visualization
clutter of highly complex contour trees.
Time complexity. Given an input scalar field defined on a
simply-connected simplicial domain, its contour tree T can
be computed in O(N log N) time, where N is the number of
vertices and edges [CSA03]. Let t be the size of T . The ensemble of configurations has cardinality 2t − 1. Given each
configuration, a corresponding terrain model can be computed in O(tk) time, where k is the number of control points
inserted in each region of the terrain layout; that is, tk is the
total number of points in the final mesh. The time complexity to generate the 2D embedding of the set of configurations
takes time O(t 2 ) as the ISOMAP algorithm only needs to
compute the first two eigenvectors.
4. Experiments
To demonstrate the visualization and analysis workflow, we
begin by exploring terrain models generated from a basic 3D
volumetric dataset. We then turn to a more challenging highdimensional dataset with a structure that cannot be easily
visualized using classical techniques.
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

W. Harvey & Y. Wang / Topological Landscape Ensembles for Visualization of Scalar-Valued Functions

(a)

(e)

(b)

(f)

(c)

(g)

(h)

999

(d)

(i)

Figure 6: Analysis of a 3D volumetric dataset. (a) A terrain visualization generated using the proposed algorithm. (b) Contour
tree of the dataset. (c)–(d) The outer boundary of the terrain corresponds to the large empty region around the combustion
chamber. (e)–(f) (g)–(h) Structures on the generated terrain and their corresponding components in the volume. (i) Result
of [WBP07] (image copied from [WBP07]).
4.1. A Simple Example: 3D Volume Dataset
We begin with a 3D volumetric dataset to introduce
the visualization and analysis workflow of our software
and to demonstrate the relationship between the input
dataset, the contour tree, and generated terrain models.
The (64 × 64 × 64)-voxel fuel dataset (available from
http://www.volvis.org) is a simulation of fuel injected into a
combustion chamber where the function value indicates the
density of air. The contour tree is computed by first tessellating each voxel into tetrahedra (see [CS07] for discussions
of handling more general interpolants). In Figure 7(b), we
show the 2D space of possible terrain models. As one scans
through this space, our software allows quick generation of
the terrain layouts using either the slice-and-dice treemap algorithm or the Voronoi treemap algorithm as shown in Figure 8.
Figure 6(a) shows a terrain model corresponding to the
layout in Figure 8(b), with the global minimum chosen as
the point at infinity (and thus mapped to the boundary of the
terrain). Since the combustion chamber is surrounded by a
region containing the global function minimum, setting the
global minimum to be the point at infinity seems appropriate,
as illustrated by 6(c)(d). Figures 6(e)(f) and (g)(h) illustrate
the correspondences between features on the terrain and regions in the volume dataset. Note that the relative volumes of
the regions in the dataset are preserved in the terrain, as are
nesting and adjacency relationships of the topological components.
The terrain generated by [WBP07] and its corresponding
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

features in the original volumetric data are shown in Figure 6(i). It presents a similar visualization as our software
for this example. We remark that for this simple example
(and for other 3D volumetric datasets), it is often natural to
map the outer boundary of the volumetric data (which is the
global minimum of this scalar field) to the outer boundary of
the 2D terrain model. In doing so, the containment relations
between the topological components of the 3D scalar field
and the 2D terrain are identical. Hence, while other configurations can be produced to explore the dataset, they may not
be particularly useful for obtaining a better understanding of
this kind of data. Still, to illustrate our software, we include
an example of an alternative terrain configuration and a visualization of the space of terrains in Figure 7.
This convenient property that the outer boundary of
the scalar field corresponds to either its global minimum or global maximum typically does not exist in highdimensional or more complex datasets. Our next experiment
shows the usefulness of the proposed framework for choosing a good terrain model when it is not clear a priori how the
point at infinity should be determined.
4.2. High-Dimensional Data
One powerful application of our tool is for visualizing and
exploring functions defined on high-dimensional domains.
The objective of this experiment is to visualize the so-called
energy landscape E : S → IR of the conformational space
of the survivin protein [PL10]. Here, S is the space of conformations and E(p) is the energy of a particular conformation p of the survivin protein. This protein is over-expressed

1000

W. Harvey & Y. Wang / Topological Landscape Ensembles for Visualization of Scalar-Valued Functions

(a)

(b)

Figure 7: (a) An alternative terrain model in which the component containing the global minimum is converted from an
annulus to a convex interior region (dark gray region in center). (b) Embedded space of terrain configurations.

(a)

(b)

Figure 8: (a) Slice-and-dice and (b) Voronoi treemap layouts of terrains in Figure 6.
in tumor cells as a homodimer and is therefore a target for
anti-cancer drugs. A dataset of 20,000 conformations was
obtained via replica exchange molecular dynamics (REMD)
simulation of a protein docking from various initial conformations under fluctuating environmental temperatures. This
dataset can be thought of as a sampling of S. The backbone of each conformation consists of n = 46 alpha-carbon
atoms which were used to compute an n2 = 1035 dimensional vector of pairwise distances describing the protein
shape. That is, each protein conformation is considered as
a point in the 1035-dimensional space (the intrinsic dimensionality of the conformational manifold has been estimated
at around 20 using dimensionality reduction). We reduce the
number of conformations to 2000 samples using the method
from [Gon85].
The goal is to obtain insights in both the energy landscape and how the REMD simulation methods sample the
conformational space. Specifically, a widely believed conjecture in molecular dynamics is that the conformation of
interest (such as the native conformation) is usually the one
with globally minimal energy. To explain why proteins in
nature can often identify the global minimum quickly, the
so-called funnel theory suggests that there is a funnel structure around the global minimum. That is, even though there
are local maxima/minima around the global minimum, there
is a global trend of a valley in the energy landscape.
Initially, traditional dimensionality reduction techniques
were used to try to visualize the energy landscape of the protein in low-dimensional space. However, the resulting landscapes were difficult to interpret as the topological structure

of the original function was not preserved. Figure 9 shows
an energy landscape generated by projecting the hign dimensional points to 2D using PCA, then building a Delaunay triangulation over them. (Other dimensionality reduction methods, such as ISOMAP and Laplacian Eigenmaps,
give similar results.) Red color indicates high energy value
and blue means lower energy value. Note that local peaks
and valleys in the resulting terrain are somewhat meaningless, as they are mostly artifacts of distortion introduced
by dimensionality reduction. However, the PCA embedding
suggests that there are two main regions sampled, one mostly
consisting of high energy conformations (the red region to
the top in Figure 9(a)), and the other one mostly low energy
conformations (the blue region to the bottom-right).
The proposed method provides a framework that facilitates interpretation of the simulation data and helps to discover the funnel shape of the energy landscape. See Figure 10. The contour tree of the high-dimensional point cloud
was computed by approximating the (assumed) underlying
manifold using a k-nearest neighbor graph [TFO09]. The
embedded space of all configurations is shown in (a). We
pick three extreme configurations and show the corresponding terrains in (b), (c), and (d). The terrains in (b) and (c)
correspond to mapping the global minimum and global maximum, respectively, to the terrain boundary. Views which
are similar to these two can be generated using the method
of [WBP07], and an example is shown in (e)‡ . However, we
argue that neither the global minimum nor global maximum
serve as the ideal point of inifinity for this dataset, and (d)
presents a better terrain metaphor for this data.

(a)

(b)

Figure 9: An energy landscape produced by PCA. (a) Terrain produced from Delaunay triangulation of first two principal components of high-dimensional protein conformation
point cloud. (b) Closeup view of the landscape emphasizing
the jagged distortion around the global minimum.
Specifically, the lower half of the contour tree of this data
consists mostly of low-energy conformations, and the upper
half consists primarily of high-energy conformations. (This

‡ While we do not have the terrain model of [WBP07] which maps
the global maximum to the 2D terrain boundary, we expect that their
algorithm can easily produce a terrain similar to the one shown in
10(c).

c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

1001

W. Harvey & Y. Wang / Topological Landscape Ensembles for Visualization of Scalar-Valued Functions

is visible in Figure 9 in the embedding by the PCA algorithm.) Thus, a more natural point at infinity for this dataset
would be a point partitioning the contour tree into these two
mostly homogeneous regions. The terrain in Figure 10(d)
achieves this goal, resulting in a more faithful picture of
the conformational space as sampled by the REMD simulation algorithm. Here, both the funnel structure and the highenergy/low energy portion are clearly visible. Figures 10(f)–
(g) compare the side views of 10(d) and the PCA terrain of
Figure 9(a). In this sense, Figure 10(d) combines features
both from dimensionality reduction of the high dimensional
dataset and from its topological information.

(a)

(b)

(c)

(d)

Finally, note that the user is never required to interpret the
contour tree at any time during the visualization workflow, as
our 2D map of the space of terrain configurations provides
a natural and intuitive method for navigating the possible
visualizations.
5. Conclusions and Future Work
We adopt the topological landscape paradigm proposed
in [WBP07] and propose a new algorithm for visualizing
scalar-valued functions defined on manifolds of arbitrary dimension. Given a scalar field potentially in high dimensions,
our algorithm produces a collection of all possible configurations of planar terrains that share the same contour tree. In
each planar terrain we generate, the areas of the topological
components in it exactly mimic the volumes of their counterparts in the input scalar field. We propose a metric on the
possible terrain models that facilitates exploring the collection of 2D terrain models.
Going forward, we focus our attention on using the technique for visualization and analysis of high-dimensional data
such as protein folding and biomedical analysis. The injection of other geometric information into the generated terrains and its impact on the preservation of topological information is also an area of future research. For example,
we can use dimensionality reduction methods to find the
locations of critical points of the input scalar field in lowdimensional space. We will investigate how to generate terrains with not only the correct contour tree structure, but also
with guarantees on the locations of its critical points.
Acknowledgements. This work is supported by the National
Science Foundation (NSF) under grants CCF-0747082 and
DBI-0750891. We are grateful to Chenglong Li and In-Hee
Park for providing REMD datasets and assistance. We thank
Gunther Weber and Peer-Timo Bremer for their time and effort in producing terrain models of the protein datasets and
for helpful discussions, Rephael Wenger for feedback and
assistance with volumetric datasets, and Josh Levine and Issam Safa for discussions. We also thank the anonymous reviewers for useful comments and feedback. The cloud image
appearing in some figures is provided by A. Kulshreshtha
under the Creative Commons Attribution 3.0 United States
license (http://creativecommons.org/licenses/by/3.0/us/).
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

(e)

(f)

(g)

Figure 10: (a) Space of terrain configurations for the protein
dataset. (b)–(c) Terrains generated from mapping the global
minimum and maximum to the boundary, respectively. While
(c) reveals a funnel structure around the lowest-energy conformation, it neglects the global structure of the sampled
conformational space. (d) Terrain providing the most faithful representation of the conformational space. (e) Result
of [WBP07] which maps the global minimum to the boundary of the terrain, and is directly comparable to (b). (f) Side
view of (d). (g) Side view of the terrain model generated using PCA embedding of Figure 9.

1002

W. Harvey & Y. Wang / Topological Landscape Ensembles for Visualization of Scalar-Valued Functions

References

[RS00] ROWEIS S. T., S AUL L. K.: Nonlinear dimensionality
reduction by locally linear embedding. Science 290, 5500 (Dec.
2000), 2323–2326.

[BDL05] BALZER M., D EUSSEN O., L EWERENTZ C.: Voronoi
treemaps for the visualization of software metrics. In Proceedings of the ACM 2005 Symposium on Software Visualization, St.
Louis, Missouri, USA, May 14-15, 2005 (2005), Naps T. L., Pauw
W. D., (Eds.), ACM, pp. 165–172.

[TdSL00] T ENENBAUM J. B., DE S ILVA V., L ANGFORD J. C.:
A global geometric framework for nonlinear dimensionality reduction. Science 290, 5500 (Dec. 2000), 2319–2323.

[BK93] B ERG M. D ., K REVELD M. J. V.: Trekking in the alps
without freezing or getting tired. In ESA ’93: Proceedings of the
First Annual European Symposium on Algorithms (London, UK,
1993), Springer-Verlag, pp. 121–132.

[TFO09] TAKAHASHI S., F UJISHIRO I., O KADA M.: Applying
manifold learning to plotting approximate contour trees. IEEE
Transactions on Visualization and Computer Graphics 15, 6
(2009).

[BN03] B ELKIN M., N IYOGI P.: Laplacian eigenmaps for dimensionality reduction and data representation. Neural Computation
15, 6 (2003), 1373–1396.

[TIS∗ 95] TAKAHASHI S., I KEDA T., S HINAGAWA Y., K UNII
T. L., U EDA M.: Algorithms for extracting correct critical points
and constructing topological graphs from discrete geographical
elevation data. Comput. Graph. Forum 14, 3 (1995), 181–192.

[BPS97] BAJAJ C. L., PASCUCCI V., S CHIKORE D. R.: The
contour spectrum. In IEEE Visualization ’97 (Oct. 1997).
[Car00] C ARR H.: Efficient Generation of Contour Trees in Three
Dimensions. Master’s thesis, The University of British Columbia,
2000.
[CS03] C ARR H., S NOEYINK J.: Path seeds and flexible isosurfaces using topology for exploratory visualization. In VISSYM ’03: Proceedings of the symposium on Data visualisation
2003 (Aire-la-Ville, Switzerland, Switzerland, 2003), Eurographics Association, pp. 49–58.
[CS07] C ARR H., S NOEYINK J.: Representing interpolant topology for contour tree computation. In Proc. Topology-based Methods in Visualization 2007 Workshop, Hege H.-C., Polthier K.,
Scheuermann G., (Eds.). Springer, 2007.

[vKvOB∗ 97] VAN K REVELD , VAN O OSTRUM , BAJAJ , PAS CUCCI , S CHIKORE: Contour trees and small seed sets for isosurface traversal. In COMPGEOM: Annual ACM Symposium on
Computational Geometry (1997).
[WBP07] W EBER G., B REMER P.-T., PASCUCCI V.: Topological landscapes: A terrain metaphor for scientific data. IEEE
Transactions on Visualization and Computer Graphics 13, 6
(2007), 1416–1423.
[WDC∗ 07] W EBER G. H., D ILLARD S. E., C ARR H., PAS CUCCI V., H AMANN B.: Topology-controlled volume rendering.
IEEE Transactions on Visualization and Computer Graphics 13,
2 (2007), 330–341.

[CSA03] C ARR H., S NOEYINK J., A XEN U.: Computing contour trees in all dimensions. Comput. Geom 24, 2 (2003), 75–94.
[CSvdP04] C ARR H., S NOEYINK J., VAN DE PANNE M.: Simplifying Flexible Isosurfaces using Local Geometric Measures.
In Proceedings of Visualization 2004 (2004), pp. 497–504.
[GC86] G OLD C., C ORMACK S.: Spatially ordered networks and
topographic reconstruction. In Proceedings of the Second International Symposium on Spatial Data Handling (Seattle, Washington, 1986), Marble D., (Ed.), pp. 74–85.
[Gon85] G ONZALEZ T. F.: Clustering to minimize the maximum intercluster distance. Theoretical Computer Science 38, 2–3
(June 1985), 293–306.
[GSAW05] G RADY L., S CHIWIETZ T., A HARON S., W ESTER MANN R.: Random walks for interactive alpha-matting. In Proceedings of the Fifth IASTED International Conference on Visualization, Imaging and Image Processing (Benidorm, Spain,
Sept. 2005), Villanueva J. J., (Ed.), ACTA Press, pp. 423–429.
[Hot33] H OTELLING H.: Analysis of a complex of statistical variables into principal components. Journal of Educational Psychology 24 (1933), 417–441, 498–520.
[JS91] J OHNSON B., S HNEIDERMAN B.: Tree maps: A spacefilling approach to the visualization of hierarchical information
structures. In IEEE Visualization (1991), pp. 284–291.
[Llo82] L LOYD S. P.: Least squares quantization in PCM. IEEE
Transactions on Information Theory 28 (1982), 128–137.
[Mil63] M ILNOR J.: Morse Theory. Princeton Univ. Press, New
Jersey, 1963.
[PL10] PARK I.-H., L I C.: Novel dynamic ligand-induced-fit
simulation via enhanced conformational samplings and ensemble dockings: a survivin example. Journal of Physical Chemistry
B (2010). In press.
[Ree46] R EEB G.: Sur les points singuliers d’une forme de Pfaff
complétement intégrable ou d’une fonction numérique. Comptes
Rendus de L’Académie ses Sciences (1946), 847–849.

c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

