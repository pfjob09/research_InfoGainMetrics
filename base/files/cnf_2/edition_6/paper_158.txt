DOI: 10.1111/j.1467-8659.2010.01767.x
Eurographics Symposium on Geometry Processing 2010
Olga Sorkine and Bruno Lévy
(Guest Editors)

Volume 29 (2010), Number 5

Polygonal mesh watermarking using Laplacian coordinates
Y. Yang and I. Ivrissimtzis
School of Engineering and Computing Sciences, Durham University, UK

Abstract
We propose a watermarking algorithm for polygonal meshes based on the modiﬁcation of the Laplacian coordinates. More speciﬁcally, we ﬁrst compute the Laplacian coordinates (x, y, z) of the mesh vertices, then construct
the histogram of the lengths of the (x, y, z) vectors, and ﬁnally, insert the watermark by altering the shape of that
histogram. The watermark extraction is carried out blindly, with no reference to the host model. The proposed
method is more robust than several existing high capacity watermarking algorithms. In particular, it is able to
resist attacks such as translations, rotations, uniform scaling and vertex reordering, due to the invariance of the
histogram of the Laplacian vector lengths under such transformations. Compared to the existing robust watermarking methods, our experiments show that the proposed method can better resist common mesh editing attacks,
due to the good behaviour of the Laplacian coordinates under such operations.
Categories and Subject Descriptors (according to ACM CCS): I.3.5 [Computer Graphics]: Computational Geometry
and Object Modeling—Curve, surface, solid and object representations

1. Introduction
A digital watermark is a digital signal embedded into a digital medium, such as text, audio, image or video, to protect it
from unauthorized use or alteration. Several important applications, such as proof of ownership, or copy control, require
robust watermarks, that is, watermarks that are able to resist
unintentional or malicious attacks to remove them.
As the mesh geometry has much higher carrying capacity than the connectivity, a typical watermarking algorithm
for 3D polygonal meshes embeds the watermark into the geometry, altering the positions of the vertices. Then, theoretical arguments or experiments are used to demonstrate the
robustness of the algorithm against commons attacks, such
as geometric transformations, addition of noise and mesh
smoothing. In contrast, in this paper we are primarily concerned with the robustness of the watermark against editing
attacks that change the global shape of the mesh.
We believe that, in many cases, the assumption of a mesh
editing attack is more realistic than the assumption of a noise
addition, or a smoothing attack. Indeed, even if the attacker
can use smoothing or noise addition to remove the watermark without degrading the visual quality of the model, still
they would probably want to alter the global shape of the
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.
Published by Blackwell Publishing, 9600 Garsington Road, Oxford OX4 2DQ, UK and
350 Main Street, Malden, MA 02148, USA.

model through mesh editing in order to, either disguise the
appropriation of the model, or to create a model ﬁt for their
purpose.
The algorithm we propose is based on Laplacian coordinates. In particular, the signal is embedded into the histogram of the lengths of the vectors (x, y, z), where (x, y, z)
are the Laplacian coordinates. We notice that the lengths of
the Laplacian coordinates, unlike the Laplacian coordinates
themselves, are invariant under both translation and rotation.
The use of histograms means that the method is also invariant under uniform scaling and vertex reordering. Finally, experiments show that the use of Laplacian coordinates makes
the proposed method resillient against mesh editing attacks.
The main contributions of the paper are:
• A new polygonal mesh watermarking algorithm based on
Laplacian coordinates.
• A demonstration that the algorithm is robust against editing operations altering the global shape of the mesh.
The rest of this paper is organized as follows. Section 2
reviews the relevant literature. Section 3 presents the preliminaries and the basic ideas of the proposed watermarking
scheme. Watermark embedding and extraction methods are
described in detail in Section 4 and Section 5, respectively.

1586

Yang et al. / Laplacian watermarking

The experimental results are presented and discussed in Section 6 and ﬁnally, we brieﬂy conclude in Section 7.

2. Related Work
Given their immediate practical applications, watermarking algorithms have been developed for objects of various dimensions, including text documents [LT07], audios [BPN01], digital images [RP05] and video [NM08].
The research interest into the watermarking of 3D models is relatively newer; however, several watermarking
[AM05, WH09], or closely related steganographic algorithms [CLYL09, SWK08] have already been proposed.
Similarly to image watermarking, 3D mesh watermarking methods work either in the spatial domain [YY99]
[LLLL05] [YIK03] [CPJ07] [Bor06], or in the frequency
domain [OMT02] [PHF99] [UCB04] [YPSZ01]. In one of
the earliest approaches, Yeo et al. [YY99] verify 3D meshes
with the use of a watermarking method which perturbs each
vertex to ensure that two predeﬁned hash functions have the
same value on it. Veriﬁcation is achieved by a comparison of
the values computed by the two hash functions. One drawback of this method is the causality problem, caused by its
heavy dependence on the order of traversal of the vertices.
Lin et al. [LLLL05] address this issue using vertex-orderindependent hash functions. Yu et al. [YIK03] embed the
watermark by altering the distance between the vertices and
the center of the host 3D model. Cho et al. [CPJ07] propose an algorithm based on the modiﬁcation of the mean
value and variance of the distribution of vertex norms. Bors
[Bor06] uses a neighborhood localized measure to ﬁnd vertices that give small embedding distortion and then watermarks these vertices by local geometric perturbations.
Another category of robust 3D mesh watermarking methods is based on frequency analysis. Using the mesh spectral analysis proposed by Karni et al. [KG00], Ohbuchi et al.
[OMT02] modify the shape of the mesh to insert the watermark into the low frequencies. Praun et al. [PHF99] embed
the watermark into the perceptually signiﬁcant features of
the 3D model, which are identiﬁed by Hoppe’s multiresolution decomposition [Hop96]. The watermarking algorithms
by Uccheddu et al. [UCB04] and Yin et al. [YPSZ01] use
the multiresolution analysis in [LDW97] and [GSS99], respectively. A general survey of 3D mesh watermarking can
be found in [WLDB08].
Steganographic methods also embed a digital signal into
a carrier digital object. Their purpose is to hide information
into a host in such a way that an eavesdropper cannot detect the existence of the hidden message [CMB∗ 08]. They
are closely related to watermarking, and similar techniques
apply. However, due to the different domains of application, steganographic methods favor large embedding capacity, usually at the expense of robustness, while watermarking
schemes are evaluated principally on their robustness.

Chao et al. [CLYL09] propose a steganographic method
based on small perturbations of the vertices of the 3D models. The method achieves high embedding capacity with low
embedding distortion, but it is not able to withstand malicious attacks. Cayre et al. [CM03] propose a blind data
hiding scheme which considers each triangle as a two-state
(i.e., 0 or 1) geometric object, depending on the position
of the projection of a vertex onto its opposite edge. The
theoretical capacity of this method is one bit per vertex.
Motivated by this idea, Wang et al. [WC05] increases the
embedding capacity and reduces the distortion by using a
multi-level embedding procedure. Their work was extended
in [CW07], achieving higher embedding capacity and lower
visual degradation. The extended method takes into account
the surface texture information (i.e., rough or smooth), making it an adaptive algorithm.
As pointed out in [CLYL09], the previous 3D steganographic approaches are not robust and they can even be attacked by distortionless operations, such as translations or
vertex reordering. In contrast, watermarking methods are
generally robust against distortionless attacks, while some of
them can resist mesh processing operations such as smoothing, or noise addition. However, they can not successfully
resist mesh editing operations that change the global shape
of the mesh.
3. The Watermarking Algorithm
In this section we introduce the basic notation and terminology and then give an overview of the proposed algorithm.
The details of the implementation of the watermark embedding and extraction will be discussed in the next two sections.
3.1. Preliminaries
Let M be a polygonal mesh model with N vertices and let
V and E denote the sets of vertices and edges of M, respectively. Let vi be the vertex indexed by i, its position described
in Cartesian coordinates by [xi yi zi ] (written as a row vector).
The 1-ring neighbor of the vertex vi is denoted by
N (vi ) = v j |(vi , v j ) ∈ E, 1 ≤ i, j ≤ N .

(1)

For each vertex vi , the vectors of the Laplacian coordinates
Li = [xi yi zi ] are the rows of the matrix
⎡
⎤
x1 y1 z1
⎢ x2 y2 z2 ⎥
⎢
⎥
L = M×⎢ .
(2)
.. ⎥
..
⎣ ..
.⎦
.
xN yN zN
where M is the Kirchhoff matrix [Bol98])
⎧
⎪
⎨|N (vi )| if i = j
Mi, j = −1
1 ≤ i, j ≤ N (3)
if v j ∈ N (i)
⎪
⎩
0
otherwise
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

1587

2400

5000

2000

4000

1600

Number of elements

Number of elements

Yang et al. / Laplacian watermarking
6000

3000

2000

1000

with k1 = k2 and |X| denoting the number of elements of X.
Here, nthr is an embedding threshold.

1200

800

400

0

0
0

20

40

60

80

100

120

140

160

180

200

0

50

Index of each bin, Bk

100

150

200

250

300

350

400

450

500

Index of each bin, Bk

(a)

(b)

Figure 1: Histograms of the lengths of the vectors of the
Laplacian coordinates of the Rabbit model with (a) K = 200
and (b) K = 500 bins.

The use of a different discrete Laplacian, as for example the
one used for mesh editing in [SCOL∗ 04], would lead to a
watermarking algorithm of comparable performance.
The Cartesian coordinates of the vertices are obtained
from the Laplacian coordinates by M−1 × L. For numerical stability, as M may be not invertible, we update the M in
Eq. 3 by
Mi, j =

Mi, j − ε
Mi, j

if i = j
otherwise

1 ≤ i, j ≤ N

d i = Li =

xi + yi + zi

2

1≤i≤N

(5)

These lengths are then classiﬁed into K bins Bk , according
to
Bk = {di |dmin + δ(k − 1) ≤ di < dmin + δk}

(6)

with 1 ≤ i ≤ N and 1 ≤ k ≤ K. The dmin and dmax are the
minimum and maximum elements of d = {d1 , d2 , · · · , dN }
and
dmax − dmin
δ=
(7)
K
is the size of the bin. We also assume that dmax ∈ BK .
The histogram of d is produced by counting the number of
elements in each bin Bk . Two examples for the Rabbit model
for the values of K = 200 and K = 500 are shown in Fig. 1.
The ﬁgure indicates that many bins are empty.
3.2. Overview of The Algorithm
We assume that the watermark is a bitstring. Each bit (w j =
−1 or + 1) is inserted into a pair of bins (Bk1 , Bk2 ) with k1 =
k2 . However, in order to ensure exact watermark extraction,
some pairs of bins will not be used. A pair of bins (Bk1 , Bk2 )
is valid if it satisﬁes
f (Bk1 , Bk2 ) = |Bk1 ∪ Bk2 | = |Bk1 | + |Bk2 | ≥ nthr

|Bˆk1 | < |Bˆk2 |
|Bˆk1 | ≥ |Bˆk2 |

(8)

c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

if w j = −1
if w j = +1

(9)

where Bˆk1 and Bˆk2 are the k1 -th and k2 -th bins after the watermarking operation. To move an element di from one bin to
another, we either enlarge or reduce its value so as to push it
to the other bin. Notice that no element movement operation
is applied when |Bk1 | < |Bk2 | and w j = −1, or |Bk1 | ≥ |Bk2 |
and w j = +1.
Finally, the watermark bit w j is extracted from the pair of
bins (Bˆk1 , Bˆk2 )
wj =

The proposed watermarking method embeds the watermark into the histogram of the lengths of the Laplacian coordinate vectors
2

Assuming that (Bk1 , Bk2 ) is valid, we insert one watermark bit w j into this pair by, if necessary, moving some elements from Bk1 into Bk2 or vice-versa, such that

(4)

where ε > 0 is a small real number.

2

A pair of bins that is not valid is called invalid. The proposed method does not utilize the bins B1 and BK , and thus,
(Bk , B1 ) and (Bk , BK ) are always invalid. As it will become
apparent later, this requirement ensures that the watermark
can be extracted with no reference to the original model.

−1 if |Bˆk1 | < |Bˆk2 |
+1 if |Bˆk1 | ≥ |Bˆk2 |

(10)

4. Watermark Embedding
In order to embed the watermark, we ﬁrst alter the set of
Laplacian lengths d, computing a new set dˆ
dˆ = {dˆ1 , dˆ2 , · · · , dˆN }

(11)

carrying the watermark. Then, through a minimization proˆ with lengths dˆ is realized,
cess, a set of Laplacian vectors L
and eventually the corresponding Cartesian coordinates are
computed.
4.1. The Computation of dˆ
As the bins B1 and BK are excluded from the embedding
process, and as we need one pair of bins to embed one message bit, if K is odd we need to exclude one more bin from
the embedding process (here we chose BK−1 ). Thus, the
maximum index of a bin used for watermarking is
K −2
+1
Kˆ = 2
2

(12)

For any di inside the bins B1 , BK or BK−1 (when K is
odd), we have dˆi = di , that is, no changes are made.
For the rest of the bins, in order to reduce the embedding distortion and hence improve the visual quality of the
marked mesh, the watermark bits are inserted into pairs
of adjacent bins (Bk1 , Bk2 ) with k2 = k1 + 1. That gives
a set of (Kˆ − 1)/2 candidate bin pairs (B2 , B3 ), (B4 , B5 ),
. . . , (BK−1
, BKˆ ).
ˆ

1588

Yang et al. / Laplacian watermarking

For any such pair, if f (Bk , Bk+1 ) < nthr , then the pair is
invalid and we do not embed a watermark bit, that is, dˆi = di .

and update the ﬁrst n elements in Eq. 13 by

Number of elements

600
400

1250
1000
750
500
250
0

0

30

60

90

120

150

180

210

240

270

300

0

30

60

where

d=

d
di

if di ∈ {di1 , di2 , ..., din }
if di ∈ (Bk+1 − {di1 , di2 , ..., din }) ∪ Bk

(a)

⎧
∑di ∈Bk di
⎪
⎪
⎪
⎪
⎨ |Bk |

4900

3000

4200

2500

3500

2000
1500
1000
500

(15)
⎪
⎪
⎪
2d
+
δ(2k
−
1)
⎪
⎩ min
if |Bk | = 0
2
is the average value of elements in Bk if Bk is non-empty,
or the average of the lower limits of Bk and Bk+1 , if Bk is
empty. Notice that by transferring the smallest elements of
Bk+1 into Bk , we keep the distortion of the mesh to a minimum.
The number n of points transferred from Bk+1 to Bk is
given by
|Bk+1 | −

f (Bk , Bk+1 ) − 1
f (Bk , Bk+1 ) − 1
+
2
nrobust

4.2. Distortion Minimization and Watermarked Mesh
Generation
Next we compute a set of Laplacian coordinates Lˆ realizing
ˆ This is an undetermined probthe computed set of lengths d.
lem and we solve it by minimizing the distance between the
Laplacian coordinates before and after watermarking. For
computational efﬁciency we minimize that distance at each
vertex separately, that is, we minimize
ˆ i − Li
L

2

= (xˆi − xi )2 + (yˆi − yi )2 + (ˆzi − zi )2

(17)

subject to
xˆi 2 + yˆi 2 + zˆi 2 = dˆi2

(18)

210

240

270

300

2800
2100
1400

0
30

60

90

120

150

180

210

240

270

300

0

30

60

90

120

150

180

210

240

270

300

Index for each bin, Bk

(c)

(d)

Figure 2: Histogram changes as a result of watermarking the Horse and Rabbit models with K = 300 bins. (a)
non-watermarked histogram of Horse, (b) watermarked histogram of Horse, (c) non-watermarked histogram of Rabbit
and (d) watermarked histogram of Rabbit.

From Eq. 17 and Eq. 18, we observe that this minimization problem is equivalent to ﬁnding a point (xˆi , yˆi , zˆi ) on a
sphere S of radius dˆi centered at the origin that is closest to
the given point (xi , yi , zi ). This means that (xˆi , yˆi , zˆi ) is the
projection of (xi , yi , zi ) on S. As S is centered at the origin,
the projection of (xi , yi , zi ) on it is given by
xˆi =

(16)

where the parameter nrobust controls the tradeoff between robustness of the watermark and distortion of the mesh. If the
number of points to be transferred, as computed by Eq. 16,
exceeds the number of points in Bk+1 , then we just transfer
all the contents of Bk+1 into Bk .

180

700

0

if |Bk | > 0

150

(b)

3500

0

(14)

120

Index for each bin, Bk

Index for each bin, Bk

dˆi =

90

Index for each bin, Bk

Number of elements

(13)

1500

800

0

Number of elements

di1 ≤ di2 ≤ · · · ≤ di|Bk+1 |

1750

200

Case 1: If |Bk | ≥ |Bk+1 |, then no alteration of the Laplacian lengths is required, and thus, dˆi = di .
Case 2: If |Bk | < |Bk+1 |, then we have to transfer some
elements from Bk+1 to Bk . We order the elements of Bk+1
in ascending order

2000

1200
1000

Number of elements

If f (Bk , Bk+1 ) ≥ nthr , then the pair is valid and the watermarking process depends on the relation between Bk , Bk+1
and the bit w j . Without loss of generality we assume that
w j = +1, as the case w j = −1 is completely analogous. We
separate two cases:

1400

yˆi =

zˆi =

xi dˆi
xi 2 + yi 2 + zi 2
yi dˆi
xi 2 + yi 2 + zi 2

(19)

zi dˆi
xi 2 + yi 2 + zi 2

Finally, the Cartesian coordinates of the watermarked
ˆ are computed from its Laplacian coordinates by
model M
−1
ˆ
M × L.
Fig. 2 shows the alteration of the histograms of the
Horse and Rabbit models with K = 300 bins. A comparison between the non-watermarked and the watermarked histograms indicates that their global shapes are similar.
5. Watermark Extraction
ˆ in Cartesian
Given a watermarked polygonal mesh model M
coordinates, the watermark extraction is very simple and can
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

1589

Yang et al. / Laplacian watermarking

be carried out blindly, with no reference to the original mesh
M.
First, we obtain the 1-ring neighbors of each marked vertex vˆi and construct the weighted Laplacian matrix M using
Eq. 3 and Eq. 4. After calculating the watermarked Laplacian coordinates, we compute the lengths dˆ of the coordinate
vectors.
Then, we classify the elements in dˆ into K bins Bˆk , 1 ≤
k ≤ K, using Eq. 6 and Eq. 7. Since the ﬁrst and the last
bins B1 and BK have not been altered by the watermarking process, the minimum dˆmin and maximum dˆmax of dˆ (after watermarking) are equal to the minimum dmin and maximum dmax of d (before watermarking). That is, given the
total number of bins K, the step size δ used in the watermark extraction process is the same as the step size used in
the watermark embedding process. This is an efﬁcient solution to the non-synchronization problem. However, dˆmin and
maximum dˆmax may change signiﬁcantly when the waterˆ has suffered from malicious attacks. If this
marked mesh M
is the case, we form the bins using only those dˆi that satisfy
dmin ≤ dˆi ≤ dmax and Eq. 7.
In the next step, we disregard the bins Bˆ1 and Bˆk (k >
ˆ which do not carry watermark, and form the pairs
K),
(Bˆ2 , Bˆ3 ), (Bˆ4 , Bˆ5 ), · · · , (BˆK−1
, BˆKˆ ). From the embedding
ˆ
process, we know that only pairs (Bk , Bk+1 ) satisfying
f (Bk , Bk+1 ) ≥ nthr have been used as watermark carriers.
Based on the equation
f (Bk , Bk+1 ) = f (Bˆk , Bˆk+1 )

(20)

which is a consequence of the embedding strategy that swaps
vertices inside pairs of bins only, we can ﬁnd the pairs that
carry watermark by checking if
f (Bˆk , Bˆk+1 ) ≥ nthr

(21)

That means that we do not need the knowledge of the original mesh M to compute the pairs of bins that carry watermark.
Finally, each embedded watermark bit w j is sequentially
extracted from each pair (Bˆk , Bˆk+1 ) by
wj =

+1 if |Bˆk | ≥ |Bˆk+1 |
−1 if |Bˆk | < |Bˆk+1 |

6. Experimental Results
The proposed method has been implemented on Matlab using Gabriel Peyr´e’s code [Pey08]. The 3D mesh models
used in the experiments, namely, the Bunny, Rabbit, Horse,
Dragon, Elephant, Hand and Hank, are shown in Fig. 3. The
watermark bits are produced randomly with uniform distribution, using the Matlab function randint. The parameter ε
in Eq. 4 that ensures the invertibility of the Laplacian matrix
M is ﬁxed at ε = 0.00001. In our Matlab implementation,
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

Table 1: Parameter setting and experimental results. C is
the embedding capacity of the model in bits. In each test, the
number of actually changed bins is 2C.
Model
Bunny
Rabbit
Horse
Dragon
Elephant
Hand
Hank

N
34835
70658
19851
50000
24955
17117
15488

K
498
1010
284
715
498
245
150

nthr
46
46
46
46
46
46
70

nrobust
5
5
5
5
5
5
5

C
21
102
22
103
25
52
30

which is not optimized for time efﬁciency, it takes few minutes (for instance, approximately one minute for the Bunny
model) to watermark the test meshes on a PC running on
an Intel Core 2 Duo T6570 2.1 GHz processor with 2 GB
memory.
The parameters used in the experiment are reported in
Tab. 1. Notice that the parameters nthr and K need to be
passed to the watermark extraction algorithm. In a real installation framework, we can avoid the necessity of passing nthr and K to the extraction algorithm by always ﬁxing
nthr at a constant and using a K proportional to N, that is,
K = N/Nc , where Nc is a constant. In most experiments,
nthr = 46 and the parameter K was computed this way with
Nc = 70.
6.1. Evaluation of the Visual Degradation
A ﬁrst desirable characteristic of a watermarking method is
the transparency of the watermark. That is, we expect the
embedded watermarks to be imperceptible. Our ﬁrst experiment evaluates the visual impact of the mesh alterations
caused by watermarking.
Fig. 4, Fig. 5 and Fig. 6 show the test models after watermarking. We found that it is fairly difﬁcult to observe
any undesirable artifacts on the watermarked models, even
upon close inspection. In addition, the watermarked models
shown in Fig. 4, Fig. 5 and Fig. 6 and the corresponding
originals shown in Fig. 3 are visually indistinguishable. We
conclude that the proposed watermarking method is capable
of preserving the visual quality and the global shape of the
cover mesh models.

6.2. Evaluation of Robustness
A watermarking method should be capable of surviving unintentional or malicious attacks, preventing the removal of
the embedded watermark by an adversary. To evaluate the
robustness of the proposed method, we apply the attack to
the watermarked model and attempt to extract the watermark

1590

Yang et al. / Laplacian watermarking

(a)

(b)

(c)

(d)

(e)

(f)

(g)

Figure 3: Original mesh models used in the experiments. (a) Bunny, (b) Rabbit, (c) Horse, (d) Dragon, (e) Elephant, (f) Hand,
and (g) Hank.

(a)

(b)

(c)

(d)

(e)

Figure 4: Watermarked mesh models. (a) Bunny, (b) Rabbit, (c) Horse, (d) Dragon, and (e) Elephant.

(a)

(b)

(c)

Figure 5: Illustration of the watermarked Hand and its deformed versions. (a) watermarked Hand, (b) deformation of
(a), and (c) deformation of (a).

(a)

(b)

(c)

Figure 6: Illustration of the watermarked Hank and its deformed versions. (a) watermarked Hank, (b) deformation of
(a), and (c) deformation of (a).

(a)

(b)

(c)

Figure 7: Illustration of Cho et al.’s [CPJ07] watermarked
Hank and its deformed versions. (a) watermarked Hank, (b)
deformation of (a), and (c) deformation of (a).

from the attacked model. The standard measures of robustness are the normalized correlation (NC) and the correct detection rate (CDR), which are obtained by a comparison between the original watermark string and the extracted one. In
this paper, two types of attacks were conducted: distortionfree geometric transformations and mesh editing operations.
Note that we do not measure the robustness against some
other common attacks, such as noise addition and cropping,
as the visual alterations resulted from such operations are
usually at an unacceptable level.
As expected, the watermark is perfectly robust against
vertex reordering and geometric transformations, including
translation, rotation and uniform scaling. This is because the
watermark carrier, that is, the histogram of the lengths of
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

Yang et al. / Laplacian watermarking

Table 2: Evaluation of the robustness of the proposed algorithm against mesh editing operations.
Model
Fig. 5 (b)
Fig. 5 (c)

NC
0.93
0.73

CDR
0.96
0.86

the Laplacian coordinate vectors, is invariant under these
operations, except uniform scaling. Although uniform scaling may deform the histogram, the watermark survives because both embedding and extraction are based on relationships between histogram bins that are invariant under uniform scaling.
Regarding vicious attacks, we only consider mesh editing
operations that are likely to be applied to the 3D models in
practice. We carried out such operations using the popular
Character Rigging tool of the well-known 3D editing software Blender 2.49 [ble]. Some instances of the mesh models undergoing deformation are shown in Fig. 5 and Fig. 6.
In both examples, the shapes of the deformed models are
meaningful and can still be used in practical applications.
Tab. 2 lists the robustness results under mesh editing for
the two models. We notice that we obtain high values of
NC and CDR, even for severely edited models. The reason
is that even though the mesh editing operations modify the
global shape of the models, the watermark carrier, i.e., the
histogram of the lengths of the Laplacian coordinates vectors, is almost unchanged. We conclude that we are able to
correctly extract most of the embedded watermark bits, and
hence, the proposed watermarking method offers satisfactory resistance against editing attacks.

6.3. Embedding Capacity
The data in the second and fourth columns of Tab. 1 imply that, for each of the test models, the embedding capacity
does not attain its theoretical maximum (K − 2)/2 , indicating that the proposed method cannot embed a watermark
bit into every bin pair. This happens because many bins are
empty, and because some bin pairs do not meet the embedding condition in Eq. 8, see also Fig. 1 and Fig. 2.
Regarding the real embedding capacity of the method, the
two crucial parameters are the number of bins K and the embedding threshold nthr . Fig. 8 (a) shows the embedding capacity for variable K and ﬁxed nthr = 60. As expected, the
embedding capacity increases monotonically with K, as a
larger K means that more bin pairs are available for watermarking. Fig. 8 (b) shows the embedding capacity for variable nthr and ﬁxed K = 1000. As expected, the embedding
capacity decreases monotonically with nthr , as a greater nthr
means that more bin pairs become invalid.
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

1591

6.4. Comparison and Discussion
We compared the proposed method with existing watermarking and steganographic algorithms. The results of the evaluation are summarized in Tab. 3. We notice that steganographic
methods have higher embedding capacity but weaker robustness compared to the watermarking ones. In fact, steganographic methods are quite sensitive to mesh alterations and
even a slight processing could cause the complete removal
of the embedded message. Consequently, they are not appropriate for applications such as digital content protection and authentication. By contrast, watermarking methods
show higher levels of robustness, at the expense of their embedding capacity.
We claim that the proposed method outperforms other
schemes in terms of robustness under common shapechanging editing operations. The reason is that the watermark primitives used by previous schemes, for example, the
vertex norms used by Cho et al. [CPJ07], are sensitive to
changes of the global shape. In contrast, the histogram of
the lengths of the Laplacian vectors is less sensitive to such
operations.
Tab. 4 summarizes the experimental comparison between
the proposed method and Cho et al.’s method [CPJ07], regarding robustness to mesh editing. We implemented Cho et
al.’s watermark algorithm that alters the distribution of vertex norms, deﬁned as the distances between the vertices and
the center of the mesh model. In the experiment, the same bit
string was embedded to the Hank model using Cho et al.’s
and our method, respectively. For Cho et al.’s algorithm, we
set the watermark strength factor α = 0.04 and the bin number to 30, while for our algorithm we used the parameter values listed in Tab. 1. Then, using Blender, we deformed Cho’s
and ours watermarked models, trying to obtain edited models with the same appearance, see Fig. 6 and Fig. 7. Tab. 4
shows that our approach achieves higher NC and CDR values, and hence, it is more robust.
The Ohbuchi et al. [OMT02] method is weakly resistant
against mesh editing attacks because the watermark is embedded in the low frequencies of the spectrum of the Laplacian. However, variants of their method using medium or
high frequencies as watermark carriers could be more resistant to mesh editing attacks. Moreover, their method outperforms ours in that it is robust against a wider range of attacks, including mesh simpliﬁcation and remeshing. On the
other hand, their method is a non-blind scheme and requires
the original mesh for watermark extraction. That makes it
unsuitable for a range of practical applications where such
information can not be provided to the extraction algorithm.
7. Conclusion
We propose a watermarking algorithm for polygonal meshes
based on the histogram of the lengths of Laplacian coordinate vectors. The watermark extraction is carried out

1592

Yang et al. / Laplacian watermarking
180

160
Bunny
Rabbit
Horse
Dragon
Elephant

Embedding capacity (bits)

120

140

100
80
60
40

120
100
80
60
40

20
0
200

Bunny
Rabbit
Horse
Dragon
Elephant

160

Embedding capacity (bits)

140

20
400

600

800

1000

1200

1400

0

1600

20

40

60

80

100

120

140

Embedding threshold nthr

Bin number K

(a)

(b)

Figure 8: Embedding capacity versus (a) number of bins K, with ﬁxed embedding threshold nthr = 60 and (b) embedding
threshold nthr , with ﬁxed K = 1000. In both cases, nrobust = 5.
Table 3: Comparison with previously proposed methods.
Method
Domain
Capacity
Extraction method
Similarity transformation
Vertex reordering
Mesh editing

Cayre’s
spatial
∼|v|
blind
√
×
×

Steganography
Wang’s
Chao’s
spatial
spatial
3|v|
3nlayers |v|
blind
blind
×
×
×
×
×
×

Zafeirio’s
spatial
|w|
blind
√
√
×

Watermarking
Cho’s
Ohbuchi’s
spatial frequency
|w|
|w|
blind
non-blind
√
√
√
√
×

×

Ours
spatial
|w|
blind
√
√
√

√
Here, |v| and |w| represent the numbers of the mesh vertices and watermark bits, respectively; the symbols × and indicate
that the method can weakly survive and can survive attacks, respectively; nlayers is an embedding parameter. The previous
approaches used for comparison include those by Cayre et al. [CM03], Wang et al. [WC05], Chao et al. [CLYL09], Zafeiriou
et al. [ZTP05], Cho et al. [CPJ07] and Ohbuchi et al. [OMT02].

Table 4: Performance comparison between ours and Cho et
al.’s [CPJ07] methods.
Model
Fig. 6 (b)
Fig. 7 (b)
Fig. 6 (c)
Fig. 7 (c)

Method
Proposed
Cho’s
Proposed
Cho’s

NC
0.87
0.49
0.93
0.19

CDR
0.93
0.73
0.96
0.60

blindly without reference to the original model. The proposed method is robust against translation, rotation, uniform
scaling and vertex reordering as a result of using primitives
that are invariant under these operations to carry the watermark. Most importantly, the proposed method is robust under common mesh editing operations that change the global
shape of the mesh. We believe that mesh editing is the logi-

cal choice of a malicious attacker aiming at the unauthorized
use of copyrighted material, and thus, the research on watermarking methods that are robust against such attacks can
have immediate practical implications.
The main limitation of the proposed watermarking technique is its weak resistance against other attacks, such as
mesh simpliﬁcation, remeshing and topological changes.
Such operations may change the Laplacian coordinates signiﬁcantly, and consequently alter the watermark carrier, i.e.,
the histogram of the lengths of the Laplacian coordinate vectors, to the extent that the embedded watermark is destroyed.
As a direction for future research, we propose watermarking methods based on local coordinates other than the Laplacian. Mean value coordinates and harmonic coordinates have
also demonstrated good behavior under mesh editing operations and thus, they are good candidates as potential watermark carriers.
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

Yang et al. / Laplacian watermarking

References
[AM05] A LFACE P. R., M ACQ B.: Blind watermarking of 3d
meshes using robust feature points detection. In IEEE International Conference on Image Processing (2005), vol. 1, pp. 693–
696. 2
[ble]

http://www.blender.org/. 7

[Bol98] B OLLOBÁS B.: Modern graph theory. Springer Verlag,
1998. 2
[Bor06] B ORS A. G.: Watermarking mesh-based representations
of 3-d objects using local moments. IEEE Transactions on Image
Processing 15, 3 (2006), 687–701. 2
[BPN01] BASSIA P., P ITAS I., N IKOLAIDIS N.: Robust audio
watermarking in the time domain. IEEE Transactions on multimedia 3, 2 (2001), 232–241. 2
[CLYL09] C HAO M.-W., L IN C.-H., Y U C.-W., L EE T.-Y.: A
high capacity 3d steganography algorithm. IEEE Transactions
on Visualization and Computer Graphics 15, 2 (2009), 274–284.
2, 8
[CM03] C AYRE F., M ACQ B.: Data hiding on 3-d triangle
meshes. IEEE Transactions on Signal Processing 51, 4 (2003),
939–949. 2, 8
[CMB∗ 08] C OX I. J., M ILLER M. L., B LOOM J. A., F RIDRICH
J., K ALKER T.: Digital watermarking and steganography. Morgan Kaufmann, 2008. 2
[CPJ07] C HO J.-W., P ROST R., J UNG H.-Y.: An oblivious watermarking for 3-d polygonal meshes using distribution of vertex
norms. IEEE Transactions on Signal Processing 55, 1 (2007),
142–155. 2, 6, 7, 8
[CW07] C HENG Y.-M., WANG C.-M.: An adaptive steganographic algorithm for 3d polygonal meshes. The Visual Computer
23, 9 (2007), 721–732. 2
¨
P.: Multires[GSS99] G USKOV I., S WELDENS W., S CHR ODER
olution signal processing for meshes. In SIGGRAPH’99 (1999),
ACM Press, pp. 325–334. 2
[Hop96] H OPPE H.: Progressive mesh. In SIGGRAPH’96 (1996),
vol. 96, pp. 99–108. 2
[KG00] K ARNI Z., G OTSMAN C.: Spectral compression of mesh
geometry. In SIGGRAPH’00 (2000), ACM Press, pp. 279–286.
2
[LDW97] L OUNSBERY M., D E ROSE T. D., WARREN J.: Multiresolution analysis for surfaces of arbitrary topological type.
ACM Trans. Graph. 16, 1 (1997), 34–73. 2
[LLLL05] L IN H.-Y., L IAO H.-Y., L U C.-S., L IN J.-C.: Fragile
watermarking for authenticating 3-d polygonal meshes. IEEE
Transactions on Multimedia 7, 6 (2005), 997–1006. 2
[LT07] L IU T.-Y., T SAI W.-H.: A new steganographic method
for data hiding in microsoft word documents by a change tracking technique. IEEE Transactions on Information Forensics and
Security 2, 1 (2007), 24–30. 2
[NM08] N OORKAMI M., M ERSEREAU R. M.: Digital video watermarking in p-frames with controlled video bit-rate increase.
IEEE Transactions on Information Forensics and Security 3, 3
(2008), 441–455. 2
[OMT02] O HBUCHI R., M UKAIYAMA A., TAKAHASHI S.: A
frequency-domain approach to watermarking 3d shapes. Computer Graphics Forum 21, 3 (2002), 373–382. 2, 7, 8
[Pey08] P EYR E´ G.: http://www.ceremade.dauphine.fr/∼peyre/,
2008. 5
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

1593

[PHF99] P RAUN E., H OPPE H., F INKELSTEIN A.: Robust mesh
watermarking. In SIGGRAPH’99 (1999), ACM Press, pp. 49–56.
2
[RP05] ROBERT A., P ICARD J.: On the use of masking models
for image and audio watermarking. IEEE Transactions on Multimedia 7, 4 (2005), 727–739. 2
[SCOL∗ 04] S ORKINE O., C OHEN -O R D., L IPMAN Y., A LEXA
¨
M., R OSSL
C., S EIDEL H.-P.: Laplacian surface editing. In
Symposium on Geometry Processing (2004), EG Press, pp. 179–
188. 3
[SWK08] S ALMAN M., W ORRALL S., KONDOZ A.: An efﬁcient steganographic algorithm for 3-d models. In International
Conference on Signal Processing (2008), pp. 2742–2745. 2
[UCB04] U CCHEDDU F., C ORSINI M., BARNI M.: Waveletbased blind watermarking of 3d models. In Workshop on multimedia and security (Magdeburg, Germany, 2004), ACM Press,
pp. 143–154. 2
[WC05] WANG C.-M., C HENG Y.-M.: An efﬁcient information
hiding algorithm for polygon models. Computer Graphics Forum
24 (2005), 591–600. 2, 8
[WH09] WANG Y.-P., H U S.-M.: A new watermarking method
for 3d models based on integral invariants. IEEE Transactions on
Visualization and Computer Graphics 15, 2 (2009), 285–294. 2
[WLDB08] WANG K., L AVOUE G., D ENIS F., BASKURT A.: A
comprehensive survey on three-dimensional mesh watermarking.
IEEE Transactions on Multimedia 10, 8 (2008), 1513–1527. 2
[YIK03] Y U Z., I P H. H. S., K WOK L. F.: A robust watermarking scheme for 3d triangular mesh models. Pattern Recognition
36, 11 (2003), 2603–2614. 2
[YPSZ01] Y IN K., PAN Z., S HI J., Z HANG D.: Robust mesh
watermarking based on multiresolution processing. Computers
& Graphics 25, 3 (2001), 409–420. 2
[YY99] Y EO B. L., Y EUNG M. M.: Watermarking 3d objects for
veriﬁcation. Computer Graphics and Applications 19, 1 (1999),
36–45. 2
[ZTP05] Z AFEIRIOU S., T EFAS A., P ITAS I.: Blind robust watermarking schemes for copyright protection of 3d mesh objects.
IEEE Transactions on Visualization and Computer Graphics 11,
5 (2005), 596–607. 8

