Eurographics Symposium on Geometry Processing 2009
Marc Alexa and Michael Kazhdan
(Guest Editors)

Volume 28 (2009), Number 5

Smoothing of Partition of Unity Implicit Surfaces
for Noise Robust Surface Reconstruction
Yukie Nagai, Yutaka Ohtake and Hiromasa Suzuki
The University of Tokyo, Japan

Abstract
We propose a novel method for smoothing partition of unity (PU) implicit surfaces consisting of sets of nonconforming linear functions with spherical supports. We derive new discrete differential operators and Laplacian
smoothing using a spherical covering of PU as a grid-like data structure. These new differential operators are
applied to the smoothing of PU implicit surfaces. First, Laplacian smoothing is performed for the vector field
defined by the gradient of the PU implicit surface, which is then updated to reflect the smoothing of the gradient
field. This process achieves a method for noise robust surface reconstruction from scattered points.
Categories and Subject Descriptors (according to ACM CCS): I.3.5 [Computer Graphics]: Computational Geometry
and Object Modeling, Curve, surface, solid, and object representations—surface reconstruction, implicit surface,
smoothing

1. Introduction
Surface reconstruction from points sampled on the surface
of an object is a very important process in mechanical engineering and computer graphics. Many algorithms have been
proposed because of the various demands of the relevant areas of application. Previous algorithms can be classified into
two groups based on their approach: explicit methods and
implicit methods.
Explicit methods. A typical method in this category involves Delaunay-based algorithms, which are intuitive but
need dense sampling with little noise. Recently, a number
of algorithms with noise robustness have appeared (e.g. the
Power Crust [ACK01] by Amenta et al., the Robust Cocone [DG06] by Dey and Goswami, and the Eigencrust algorithm [KSO04] by Kolluri et al.). However, even these are
more sensitive to noise than implicit methods. Moreover, algorithms in this category tend to be time-intensive because
of their global nature.
Implicit methods. Nowadays, implicit approaches are a
major force in surface reconstruction because of their stability with noise and their low computational costs.
With implicit methods, the space is divided into the inside
and outside of the object, and a boundary surface is then defined between the internal and external points. If necessary,
c 2009 The Author(s)
⃝
c 2009 The Eurographics Association and Blackwell Publishing Ltd.
Journal compilation ⃝
Published by Blackwell Publishing, 9600 Garsington Road, Oxford OX4 2DQ, UK and
350 Main Street, Malden, MA 02148, USA.

the surface is approximated using a triangular mesh generated by a polygonizer such as Marching cubes [LC87], dual
contouring [JLSW02], and so on. Algorithms in this group
are categorized according to whether the method they are
based on is local or global.
Local implicit methods. The notable advantages of methods in this category include highly accurate representation,
fast computation and the ability to handle large data sets. Algorithms in this group began with VRIP [CL96], which provides high-resolution surfaces but struggles to handle misaligned surfaces. Other examples of this approach include algorithms based on moving least squares [ABCO∗ 01, GG07]
and its variants [AK04, ÖGG09]. the Multi-level Partition of
Unity implicits (MPU) [OBA∗ 03] proposed by Ohtake et al.
excel in the above advantages.
Local operation offers many merits as outlined above, but
also has some difficulties in handling very low-quality data
such as that with large amounts of noise, outliers, lack of
sampling, and large differences in sampling density. The resulting shapes are sometimes significantly deformed, and
may also have holes and extra components. An example of
the MPU is shown in Fig. 1(b).
Global implicit methods. Global implicit approaches have
the advantage of being able to handle low quality data. Ex-

1340 Y. Nagai, Y. Ohtake and H. Suzuki / Smoothing of Partition of Unity Implicit Surfaces for Noise Robust Surface Reconstruction

(a)

(b)

(c)

(d)

Figure 1: Scanned data ((a), top) for a terra-cotta Shiisa object((a), bottom); (b) model reconstructed using MPU [OBA∗ 03];
(c) Poisson surface reconstruction [KBH06]; (d) reconstruction using our algorithm.

amples of such methods include the Radial Basis Function approach [CBC∗ 01] by Carr et al., the integration of
Voronoi diagrams and the variational method [ACSTD07]
by Alliez et al., the Graph-cut approach by Hornung and
Kobbelt [HK06], and the finite element method by Sharf et
al. [SLS∗ 07]. The Poisson surface reconstruction technique
proposed by Kazhdan et al. [KBH06] excels in computational speed and noise robustness. Unfortunately, however,
the global implicit approach achieves noise robustness at the
cost of high-accuracy reconstruction. The results of the Poisson surface reconstruction method shown in Fig. 1 (c) show
this characteristic.
Our approach. Based on the discussions above, we propose a novel surface reconstruction algorithm that is essentially based on the local implicit method. Unfortunately, as
outlined above, generating a smooth model using only a local method is very difficult because the techniques involved
depend entirely on fitting approaches. To combat this, we accomplish reconstruction with smooth surfaces by introducing smoothing terms to the local implicit method.
Smoothing itself is a well-studied subject, and many
methods have been proposed. Among them, Laplacian
smoothing is intuitive and simple, so is followed by many
extensions such as Taubin Smoothing [Tau95], bi-Laplacian
smoothing [KCVS98] by Kobbelt et al., and mean-curvature
flow [DMSB99] by Desbrun et al. Unfortunately, mesh
smoothing cannot change the topology of a mesh, so extra
components in the target mesh (see Fig. 6(b)) are not removed.
With this proposal, we achieve a precise and noise robust
surface reconstruction algorithm that inherits the benefits of

local implicit methods and smoothing. We adopt a partition of unity implicit as a local implicit method along with
Laplacian smoothing. The partition of unity implicit generates an implicit function as a weighted average of spherically
supported linear approximation functions. At this point, a
spherically covered space has no differential operators, so
we define such operators in a domain covered by spherical
supports associated with linear functions. Our smoothing is
based on the diffusion of a gradient field, and acts to smooth
local approximations. The main idea is illustrated in Fig. 2.
This smoothing can handle adaptively sampled data, and enables topological change.
The concept is inspired by normal-based smoothing methods [Tau01, OBS02, CT03] that smooth normals then move
vertices. A similar method for grids is proposed by Tasdizen
et al. [TWBO02] based on level set methods [Set99]. The
novelty of our approach lies in its definition of differential
operators on a set of spherical supports for linear functions.
Paper organization. In Section 2, we explain the spherical
cover generated by partition of unity. Then in Section 3, differential operators defined on the spherical cover are derived.
In Section 4, we apply these operators to smooth PU implicit
functions. The preservation of detail and an overview of our
algorithm are outlined in the same section. Section 5 presents
our experimental results and discusses them and Section 6
concludes the paper and outlines future work.

2. Partition of Unity
In this section, we describe the details of a spherical cover
made using the PU method. The structure of such a spherical
c 2009 The Author(s)
⃝
c 2009 The Eurographics Association and Blackwell Publishing Ltd.
Journal compilation ⃝

Y. Nagai, Y. Ohtake and H. Suzuki / Smoothing of Partition of Unity Implicit Surfaces for Noise Robust Surface Reconstruction 1341

Figure 2: Left: Isosurfaces generated using PU. Isosurfaces of local approximations are shown with dotted lines.
Right: Isosurfaces after the smoothing of local approximations.

Figure 3: An example of PU in 2D. Left: The scalar field
determined by f (xx) and the reconstructed image (black line).
Values of f (xx) indicated in red are high, and those in blue
are low. Right: The supports of local approximations {gi (xx)}
are indicated with pink circles. The blue dots represent the
centers of supports, and input points are shown with black
dots.

cover is described in Section 2.1, and its method of generation is explained in Section 2.2.

2.1. Spherical Cover
Given a set of points {pp j } sampled from a surface associated with oriented normals {nn j }, we approximate the surface
with the zero-level surface of signed distance function f (xx),
as shown in the image on the left of Fig. 3. A domain including all the sampling points is covered by a set of spheres as
shown in the image on the right of Fig. 3.
Spherical support si is defined by center c i and radius ri .
si has the implicit linear function gi (xx), whose support is si
itself. gi (xx) is represented as coefficient vector α i , and constant term βi as gi (xx) = α i · (xx − c i ) + βi . The value of gi (xx)
locally approximates the signed distance of point x inside
si from the surface. Isosurface gi (xx) = 0 therefore approximates the sampling points inside si . gi (xx) is obtained by least
square fitting for sampling points inside si , then α i and βi are
described as
(
)
∑ j wi (pp j )(cci − p j )
∑ j wi (pp j )nn j
αi =
, βi = α i ·
.
∥ ∑ j wi (pp j )nn j ∥
∑ j wi (pp j )
(1)
These are the weighted averages of normals and coordinates
of sampling points inside si . In this work, weighting function
wi (xx) is the second-degree B-spline b2 (3∥xx − ci ∥/2ri ).
Weighted average f (xx) of local approximations {gi (xx)}
represents the signed distance from arbitrary point x inside
the domain to the surface of the object.
f (xx) =

∑i wi (xx)gi (xx)
∑i wi (xx)

(2)

This is the algorithm known as Partition of Unity, which is
hereafter abbreviated as PU. A specific process to determine
a spherical covering is described in Section 2.2.
c 2009 The Author(s)
⃝
c 2009 The Eurographics Association and Blackwell Publishing Ltd.
Journal compilation ⃝

Figure 4: Sphere expansion. Left: the spherical cover
generated using MPU. The red sphere is to be expanded.
Right: after expansion. The spheres inside the red sphere
(shown in purple) are eliminated.

2.2. Generation of Initial Spherical Cover
Here we outline the generation of a spherical cover for a
domain including sampling points {pp j }. We assume that the
domain is rescaled so that the length of the longest edge of
the bounding box of {pp j } is one. In this step, a spherical
cover is generated essentially based on MPU, but the number
of spheres is lower than the result produced by MPU itself.
In a similar way to MPU, the generation process begins
by dividing the domain with an adaptive octree measuring
local approximation errors. An octant is assigned a spherical support si whose center c i is the center of the octant and
whose radius ri is 0.75 times the length of the octant’s diagonal. Then, gi (xx) is determined by (1). Let the approximation
error of an octant be the maximum value of |g(pp j )| for sampling points inside the corresponding support. Each octant
is divided recursively until its approximation error does not
exceed user-specified tolerance ε.
After this step, we modify the resulting spherical cover

1342 Y. Nagai, Y. Ohtake and H. Suzuki / Smoothing of Partition of Unity Implicit Surfaces for Noise Robust Surface Reconstruction
by expanding the radii of randomly selected spheres as long
as their local approximation errors do not exceed ε. Spheres
completely included inside an expanded sphere are eliminated. In Fig. 4, a 2D example shows the effect of this expansion, which helps to reduce the number of spheres. In
our experiments, the final number of spheres is about half
the number of octants.
After spherical covering using PU, to improve the
smoothness of the reconstructed surface, implicit function
αi } and {βi }.
f (xx) is smoothed by iteratively updating {α
New differential operators suitable for a spherical cover are
defined in the next section.

3. Differential Operators for Partition of Unity
For smooth shape representation, Laplacian smoothing is
used for local approximation functions. Since we are working on a set of spherical supports, using discrete differential
operators specialized for a spherical cover is preferred than
using general differential operators for a traditional orthogonal grid or a tetrahedral mesh [TLHD03]. Unfortunately, no
differential operators for PU have yet been proposed. Hence,
in this section we aim to define differential operators for
a domain covered by a set of supports associated by linear
functions.
The following calculations are performed only at the centers of spherical supports, so new operators are defined at
their centers. To distinguish our discrete operators from traditional continuous ones, hereafter we denote new operators
for centers as Grad(·), Div(·) and Lap(·) corresponding to
the traditional ∇(·), ∇ · (·) and △(·), respectively.
We assume that each spherical support si is assigned a
constant vector v i . Then, the vector at point x is evaluated
using PU as follows:
v (xx) =

∑i wi (xx)vvi
.
∑i wi (xx)

(3)

Let us define Div(vvi ) as the average integration of ∇ · v (xx)
inside si :
∫

4πri3
Div (vvi ) ≡
3

x ∈si

∫
x ∈∂si

the left side of equation (5) is approximated as follows:
4πri3
4πr2
∫ i
Div(vvi ) ≈
∑
3
∑ j x ∈δi, j dxx j

∇ · v (xx)dxx.

(4)

v (xx) · n (xx)dxx,

(5)

where n (xx) is a unit normal at point x on the sphere. Here,
we define a neighbor of si as a support intersecting with si .
Let δi, j be the part of ∂si inside a neighbor s j (indicated by
the green dotted line in Fig. 5, which shows an illustration of
a 2D version). For simplicity, we assume that δi, j is covered
only by si and s j , then v (xx) in (5) is replaced with v j . Now,

∫
x ∈δi, j

v j · n (xx)dxx.

(6)

The value of this approximated area is greater than the true
value of
4πri2 when neighbors overlap each other. Denom∫
inator x ∈δi, j dxx on the right-hand side normalizes this approximated area.
Calculating the integrals of (6), we obtain the divergence
at c i
c j − ci
3
Div(vvi ) =
Di, j v j ·
.
(7)
∑
j
ri Si
∥cc j − c i ∥
∫

In the above equation, Si = ∑ j x ∈δi, j dxx and Di, j is the area
of the disk whose boundary is the circle where ∂si and ∂s j
intersect. We define intersection disk as such a disk (see
Fig. 5). For simpler notation, by introducing
ϕi, j =

Di, j
,
∥cc j − c i ∥

(8)

equation (7) can be rewritten as
Div(vvi ) =

By the divergence theorem, the right side of (4) is represented as an integration over sphere ∂si :
4πri3
Div (vvi ) =
3

Figure 5: Left: intersecting 2D spheres (considering the diffusion at center c i of support si ). The orange lines are local
approximations, and the blue arrows are their normals. δi, j
is indicated by the green dotted line, and the intersection disk
with area Di, j is indicated by the solid green line. Right: an
example of the adaptive spherical cover in 3D.

3
ri Si

∑ j ϕi, j v j · (cc j − c i ).

(9)

This is an isotropic operator, and we introduce an anisotropic
operator in Section 4.3 by multiplying ϕi, j by an anisotropic
factor.
With this new divergence operator, we also obtain the
Laplacian operator through Div(Grad(vvi )) = Lap(vvi ) in a
way similar to the continuous form ∇ · ∇(vvi ) = △(vvi ). First,
by replacing v with ∇vv in (7), the equation can be represented as
3
Div(∇vvi ) =
ϕi, j ∇vv j · (cc j − c i ).
(10)
ri Si ∑ j
Let us define operator Grad(vvi ) as the first-order Taylor
c 2009 The Author(s)
⃝
c 2009 The Eurographics Association and Blackwell Publishing Ltd.
Journal compilation ⃝

Y. Nagai, Y. Ohtake and H. Suzuki / Smoothing of Partition of Unity Implicit Surfaces for Noise Robust Surface Reconstruction 1343

(a)

(b)

(c)

(d)

Figure 6: (a) Noisy data points; (b) initial zero-level surface approximated using PU; (c) results of isotropic smoothing by (13)
and (16); (d) results of the anisotropic Laplacian smoothing by (17). The sharp features are well preserved.

expansion at c j , which is v i ≈ v j +Grad(vv j )·(cci −cc j ). Then,
(10) is expressed as
Lap(vvi ) =

3
ri Si

∑ j ϕi, j (vv j − v i ).

(11)

As Lap( f (cci )) = Div(Grad( f (cci ))), the Laplacian for
function f (cci ) is derived in the same manner. The Laplacian
of f (cci ) on the domain covered by spherical supports is
3
Lap( f (cci )) =
ri Si

∑ j ϕi, j ( f (cc j ) − f (cci )).

(12)

The proposed differential operators seem to be applicable to PU consisting of any type of local function. However,
these operators are limited to use in cases where local functions are linear, since we simplify gradients by assuming that
they are constant in each support.
Approximation with linear local functions is sufficient for
surface reconstruction because its output takes the form of
a polygonal mesh. Using local linear approximations tends
to generate more supports than the quadratic approximations
of MPU [OBA∗ 03], but linear approximation makes the algorithm more noise robust, while high-order approximations
are more noise-sensitive.
4. Smoothing of Partition of Unity
After local approximations are obtained by the spherical
covering, the gradient field {vvi } of f (xx) is smoothed to give
smoother surface representation. Each vector v i is smoothed
by Laplacian smoothing with the new discrete Laplacian operators. Then, each local approximation is updated to have
the smoothed vector as its gradient.
Here we show an overview of each step of iterative PU
smoothing.
1. Initialize the vector field with the continuous gradient of
f (xx): set v i ≡ ∇ f (cci ) for each sphere center c i
αi }: smooth v i by Laplacian smoothing. Set
2. Update {α
updated vector vˆ i to αˆ i
c 2009 The Author(s)
⃝
c 2009 The Eurographics Association and Blackwell Publishing Ltd.
Journal compilation ⃝

3. Update {βi }: calculate βˆ i so that vˆ i = Grad (gi (cci )). Update βi to βˆ i
The result of this smoothing is shown in Fig. 6. The details
of Steps 2 and 3 are described in Section 4.1 and 4.2, respectively.

4.1. Smoothing of Gradient Field
For vector v i , the new smoothed vector vˆ i is obtained by
solving Lap(vvi ) = 0. It derives the smoothed vector
vˆ i =

∑ j ϕi, j v j
.
∑ j ϕi, j

(13)

4.2. Update of Local Functions
In this step, we update {g(xx)} with equation (15) reflecting
the smoothing of {vvi }. In the previous step, the update of α i
was performed with αˆ i = vˆ i , so in this step, βi (the constant
term of gi (xx)) is updated. Our aim is equivalent to updating
f (xx) so that it satisfies
Grad ( f (cci )) = vˆ i .

(14)

For simple computation, here we introduce the assumption of f (cci ) ≈ gi (cci ) = βi . This implies that the center of a
sphere is not included in other spheres. We observed good
results for all examples in this paper obtained under this assumption.
By calculating the divergence for the both sides of equation (14), we obtain the weak solution
Lap ( f (cci )) = Div (ˆvi ) .
By solving equation (15), βi is updated to
(
)
∑ j ϕi, j αˆ j · (cci − c j ) + β j
βˆ i =
.
∑ j ϕi, j

(15)

(16)

1344 Y. Nagai, Y. Ohtake and H. Suzuki / Smoothing of Partition of Unity Implicit Surfaces for Noise Robust Surface Reconstruction
are smoothed out, as shown in the top-right image in Fig. 7.
On the other hand, the result with the fitting terms shown in
the bottom-left image in Fig. 7 demonstrates that the details
are well represented.
By introducing a fitting term to the smoothing of v , v
is obtained as the minimizer of the following minimization
problem:
∥Lap ( vˆ i )∥2
+ λn ∑ σk wi (ppk ) ∥ˆv i − n k ∥2 → min .

(18)

k

Coefficient λn is a sufficiently large number. We set the value
at about 107 . σk is the confidence level of p k (details below).
The minimizer of this problem is
(
)
vˆ i = (3/ri Si )2 ∑ j ϕi, j ∑ j ϕi, j v j + λn ∑k σk wi (ppk )nnk
)
/(
(3/ri Si )2 (∑ j ϕi, j )2 + λn ∑k σk wi (ppk ) . (19)
In the same way, the update of f (xx) (equation (14)) becomes
Figure 7: The effects of fitting terms and convergence. Topleft: The initial zero-level using PU; top-right: results after
five iterations without fitting terms; bottom-left: results after
five iterations with fitting terms; bottom-right: results after
twenty iterations with fitting terms.

4.3. Anisotropic Laplacian Smoothing
To preserve highly curved regions, the anisotropy factor proposed in [PSM94] is introduced into the smoothing of v
(equation (13)) and the update of f (xx) (equation (16)). We
propose the use of the anisotropic factor
ψi, j

1
=
1 + θ2i, j

(17)

where θi, j is the angle between v i and v j . The weighting
function ϕi, j in equations (13) and (16) is replaced with
ϕi, j ψi, j .

(Lap ( f (cci )) − Div (ˆv i ))2
+ λ p ∑ σk wi (ppk )g2i (ppk ) → min .

(20)

k

Coefficient λ p is set at a sufficiently large value, e.g. 109 .
The minimizer of (20) is
(
βˆ i = (3/ri Si )2 ∑ j ϕi, j ∑ j ϕi, j (αˆ j · (cci − c j ) + β j )
(
))
+λ p αˆ i · ∑k σk wi (ppk )(cci − p k )
/(
)
(3/ri Si )2 (∑ j ϕi, j )2 + λ p ∑k σk wi (ppk ) . (21)
Confidence level σk indicates the reliability of a sampling
point p k . In cases where confidence values are obtained with
a scanner, using these values is one solution. In cases where
such values are not available, we assign confidence value σk
as defined below for each sampling point pk :
σk =

∑i wi (ppk )τi
.
∑i wi (ppk )

(22)

An example of the effect of this anisotropic factor ψi, j is
shown in Fig. 6. For noisy points (a), results obtained using
PU (b), isotropic smoothing (c) and anisotropic smoothing
(d) are presented. By introducing the anisotropy factor (17),
the sharp edges and corners are preserved.

τi represents the distribution of sampling points inside support si . The definition of τi is
(
)
(23)
τi = exp −2ω2i

4.4. Detail Preservation in Smoothing

where ωi is the angle between eigenvector N i of the minimum eigenvalue of PCA for the sampling points inside si
and the vector from centroid G i of the sampling points inside si to center c i of si (see Fig. 8).

In surface reconstruction, preserving detail is just as important as smooth representation. To avoid the loss of detail by
oversmoothing, we introduce terms that make the approximated surface fit the sampling points. The effects of this
modification are shown in Fig. 7. After applying several iterations of PU smoothing without the fitting terms, the details

σk becomes smaller when p k is near an area with a lack
of sampling. σk is based on the confidence of supports {si }
including p k .
When the sampling point distribution is uniform (as in the
c 2009 The Author(s)
⃝
c 2009 The Eurographics Association and Blackwell Publishing Ltd.
Journal compilation ⃝

Y. Nagai, Y. Ohtake and H. Suzuki / Smoothing of Partition of Unity Implicit Surfaces for Noise Robust Surface Reconstruction 1345

part on the left of Fig. 8), vector N i and c − G i have almost
the same direction, and the value of τi increases. If the sampling density changes inside si , their directions are different
and τi decreases. The distribution of the value of σk is indicated in Fig. 9. Note that outliers are detected.
Moreover, the fitting terms help smoothing to converge
quickly. It can be seen that the results from five iterations of
smoothing (the bottom-left image in Fig. 7) and those from
twenty iterations (the bottom-right image in Fig. 7 ) show no
notable difference.
Figure 9: Confidence levels are indicated with coloring;
blue is high (reliable) and red is low (unreliable). Low confidence values are assigned to outliers.

Figure 8: Examples of 2D spheres with points (black dots)
uniformly sampled (left) and non-uniformly sampled (right).
The line approximated using PCA for the sampling points
is shown in dark green, and its normal N i is shown with a
light green arrow. The centroid of the sampling points, G i , is
indicated with a large gray point.

4.5. Algorithm Summary
Here we summarize the whole algorithm as follows.
1.
2.
3.
4.

Approximate the surface using PU
Evaluate the confidence of the sampling points
Iteratively apply PU smoothing preserving detail
Polygonize the zero-level surface

Step 1 has already been explained in Section 2, and Steps 2
and 3 are outlined in Section 4.4. The number of the iterations in Step 3 is five in our experiments for all models. In
the last step, we polygonize the zero-level surface using the
SurfaceNets [Gib98] with uniform sampling around only the
zero-level surface as proposed in [Blo88]. We set use a sampling point with a high confidence value as a seed point for
detecting the zero-level surface.
5. Results and Discussion
Parameter setting. All input data in this paper (except
Fig. 6, 11, and 15) are noisy raw scanned data. All parameters except ε are fixed unless the settings are described. The
only free parameter required by the proposed algorithm is
approximation error tolerance ε, which depends on the noise
level of the scanning device. A comparison of results with
different values of ε is shown in Fig. 10 (the details of ε are
described in Section 2.2).
c 2009 The Author(s)
⃝
c 2009 The Eurographics Association and Blackwell Publishing Ltd.
Journal compilation ⃝

Figure 10: The reconstructed mesh with different values of
ε. From left to right, ε = 1.0 × 10−2 , 5.0 × 10−3 , 2.5 × 10−3 ,
and 1.25 × 10−3 .

Noise robustness. The robustness for noise is demonstrated
in Fig. 11. The sampling points are obtained from a noisy
mesh. The noise level on the right model is twice as large as
that on the left model. The reconstructed meshes are topologically correct even for data with large amount of noise.
In Fig. 12, the robustness for normal noise is demonstrated. For data with normals randomly rotated by 30◦ , our
approach succeeded in reconstruction (b). For a rotation angle of 60◦ , the reconstructed model is affected in terms of
smoothness (d). By setting λn to zero, even for such cases, a
smooth surface is obtained (e).
Performance. Timing results are reported in the Table 1. In
order to perform PU smoothing efficiently, we construct and
store the graph as an adjacency list data structure.
However, following our observation, the average of degrees of a sphere intersection graph is about 100, which
makes processing large data sets difficult. According to our
experiments, reducing the degree by shrinking the radii of

1346 Y. Nagai, Y. Ohtake and H. Suzuki / Smoothing of Partition of Unity Implicit Surfaces for Noise Robust Surface Reconstruction
is lost by the smoothing effect. On the other hand, the
proposed method generates a smooth mesh with the detail
well preserved (see the close-ups in the lower columns of
Fig. 1).

Figure 11: Noise robustness. The sampling points are obtained from a mesh added Gaussian noise. The value of the
standard deviation of the noise on the left/right model is a
quarter/half of the averaged edge-lengths.

Another comparison for a large data set with Poisson surface reconstruction is shown in Fig. 13. The reason that Poisson surface reconstruction is selected as a comparative algorithm is that it has excellent reconstruction capabilities, and
the software required is freely available. The parameters for
Poisson surface reconstruction are 11 for the level of the octree, and for ours, ε = 1.0 × 10−3 . In reconstruction using
our method, detail is preserved well, e.g. the bumps in the
hand. This is thought to be because the proposed algorithm
uses first-order approximation, while Poisson surface reconstruction uses zeroth-order approximation.
Another example is shown in Fig. 14. The surface is gradually sparsely sampled. The results of Poisson surface reconstruction shrink near the tail, but the results from proposed
method can express a rough shape of the tail.

(a)

(b)

(c)

(d)

(e)

Figure 12: Normal noise robustness. (a) Data with normals
rotated randomly by 30◦ ; (b) reconstructed model for (a);
(c) data with normals rotated randomly by 60◦ ; (d) results
for (c); (e) results for (c) with λn = 0.

supports to 0.7 times the original radii reduce the computational time and space. The average of degree after
this shrinking is about 40. The results obtained with this
shrinking are no different from those without shrinking.
This shrinking is only for constructing a sphere intersection
graph, so we use the original radii in all the other process
including the calculation of ϕi, j .

Model
Bunny
Arma.
Buddha
Buddha

#
ε
#
pts. (×10−3 ) supps.
362K 2.5
176K
2.3M 1.0
7.35M
3.2M 2.5
540K
3.2M 1.25 2.94M

Time [min:sec]
init. smooth. poly.
0:18 0:19 0:14
5:42 36:21 3:49
2:05 2:26 0:58
3:41 13:35 1:08

Peak #
RAM tris.
74M 315K
3.24G 3.30M
234M 1.07M
1.23G 1.08M

Table 1: Computational time and performance. From left to
right: the number of sampling points, value of ε, the number
of supports, computation time for initialization of PU, for
smoothing, and for polygonization, the maximum memory
space our algorithm used, and the number of triangles of
the result mesh. Arma. is an abbreviation of Armadillo.

Comparison. We compared our results with MPU
[OBA∗ 03] and Poisson surface reconstruction [KBH06]
for a Shiisa model (see Fig. 1). In the MPU results, peak
stretches and extra components appear around the tail.
Poisson surface reconstruction gives a mesh in which detail

One of the drawbacks of our method is that reconstructed
surfaces tend to extend in the tangential directions. See the
tail of the dragon in Fig. 14. A more clear comparison of
this property is shown in Fig. 15. This is caused by diffusion
of normals in our method. In contrast, Poisson surface reconstruction solves Laplacian equation on the region where
sampling is missing. Thus the missing parts are filled with
minimal surfaces.
Another drawback is that the proposed method is three–
five times more time-consuming than that of the Poisson surface reconstruction. However, our PU smoothing based on
iterative averaging can be easily parallelized by using multicore CPU.
6. Conclusion
We derived new differential operators for a spherically covered domain. As a related application, detail-preserving
noise robust surface reconstruction algorithm is proposed
based on a diffusion technique.
The local approximations in this work are linear functions. Changing the primitive functions to be quadratic and
cubic functions is a future task to be performed, and we also
plan to represent sharp edges. Anisotropic smoothing preserves edges, but more precise representation is needed in
some applications. Other possible applications include volume processing and the smoothing of more attributed vectors
such as 4D vectors and texture data.
Acknowledgement
The authors recognize the fruitful discussions involving
Hiroshi Kawaharada and Ralph Martin, and express their
thanks to Michael Kazhdan for making his algorithm publicly available. Thanks also go the Stanford Computer
c 2009 The Author(s)
⃝
c 2009 The Eurographics Association and Blackwell Publishing Ltd.
Journal compilation ⃝

Y. Nagai, Y. Ohtake and H. Suzuki / Smoothing of Partition of Unity Implicit Surfaces for Noise Robust Surface Reconstruction 1347

Figure 14: Comparison of results for gradually downsampled points. Top: close-ups of the results from Poisson
surface reconstruction (left), proposed method (right), and
sampling points (middle). Bottom: results from Poisson surface reconstruction (left) and proposed method (right).
Figure 13: Meshes reconstructed using the Poisson surface
reconstruction (left) and our methods (right).

Graphics Laboratory for providing scanning data. The authors are also grateful for a range of suggestions from anonymous reviewers. This research is partly funded by Grant-inAid for Scientific Research (B), No. 19360070, Japan Society for the Promotion of Science (JSPS).
References
[ABCO∗ 01] A LEXA M., B EHR J., C OHEN -O R D., F LEISHMAN
S., L EVIN D., S ILVA C. T.: Point set surfaces. In VIS ’01: Proceedings of the conference on Visualization ’01 (2001), pp. 21–
28.
[ACK01] A MENTA N., C HOI S., KOLLURI R.: The power
crust. In Proceedings of 6th ACM Symposium on Solid Modeling (2001), pp. 249–260.

Figure 15: Comparison of the properties of reconstructed
surfaces. Left: the original noisy mesh (top) and partially
sampled points with normals from the mesh (bottom). Middle: results from Poisson surface reconstruction. Right: results from our method.

[ACSTD07] A LLIEZ P., C OHEN -S TEINER D., T ONG Y., D ES BRUN M.: Voronoi-based variational reconstruction of unoriented point sets. In SGP ’07: Proceedings of the fifth Eurographics symposium on Geometry processing (2007), pp. 39–48.

[CBC∗ 01] C ARR J. C., B EATSON R. K., C HERRIE J. B.,
M ITCHELL T. J., F RIGHT W. R., M C C ALLUM B. C., E VANS
T. R.: Reconstruction and representation of 3d objects with radial basis functions. In SIGGRAPH ’01: Proceedings of the 28th
annual conference on Computer graphics and interactive techniques (2001), pp. 67–76.

[AK04] A MENTA N., K IL Y.: Defining point-set surfaces. ACM
Transactions on Graphics 23, 3 (2004), 264–270. Proceedings of
ACM SIGGRAPH 2004.

[CL96] C URLESS B., L EVOY M.: A volumetric method for building complex models from range images. In Proceedings of ACM
SIGGRAPH 1996 (1996), pp. 303–312.

[Blo88] B LOOMENTHAL J.: Polygonization of implicit surfaces.
Comput. Aided Geom. Des. 5, 4 (1988), 341–355.

[CT03] C HOUDHURY P., T UMBLIN J.: The trilateral filter for
high contrast images and meshes. In EGRW ’03: Proceedings of

c 2009 The Author(s)
⃝
c 2009 The Eurographics Association and Blackwell Publishing Ltd.
Journal compilation ⃝

1348 Y. Nagai, Y. Ohtake and H. Suzuki / Smoothing of Partition of Unity Implicit Surfaces for Noise Robust Surface Reconstruction
the 14th Eurographics workshop on Rendering (2003), pp. 186–
196.
[DG06] D EY T. K., G OSWAMI S.: Provable surface reconstruction from noisy samples. Comput. Geom. Theory Appl. 35, 1
(2006), 124–141.
[DMSB99] D ESBRUN M., M EYER M., S CHRÖDER P., BARR
A. H.: Implicit fairing of irregular meshes using diffusion and
curvature flow. In SIGGRAPH ’99: Proceedings of the 26th
annual conference on Computer graphics and interactive techniques (1999), pp. 317–324.
[GG07] G UENNEBAUD G., G ROSS M.: Algebraic point set surfaces. In SIGGRAPH ’07: ACM SIGGRAPH 2007 papers (2007),
pp. 23.1–23.9.

[Tau95] TAUBIN G.: A signal processing approach to fair surface
design. In Computer Graphics (Proceedings of SIGGRAPH 95)
(1995), pp. 351–358.
[Tau01] TAUBIN G.: Linear Anisotropic Mesh Filters. Tech. Rep.
RC-22213 (W0110-051), IBM Research Technical Report, 2001.
[TLHD03] T ONG Y., L OMBEYDA S., H IRANI A. N., D ESBRUN
M.: Discrete multiscale vector field decomposition. ACM Trans.
Graph. 22, 3 (2003), 445–452.
[TWBO02] TASDIZEN T., W HITAKER R., B URCHARD P., O S HER S.: Geometric Surface Processing via Normal Maps. Tech.
Rep. UUCS-02-003, University of Utah School of Computing,
2002.

[Gib98] G IBSON S. F. F.: Using distance maps for accurate surface representation in sampled volumes. In VVS ’98: Proceedings
of the 1998 IEEE symposium on Volume visualization (1998),
pp. 23–30.
[HK06] H ORNUNG A., KOBBELT L.: Robust reconstruction of
watertight 3d models from non-uniformly sampled point clouds
without normal information. In SGP ’06: Proceedings of the
fourth Eurographics symposium on Geometry processing (2006),
pp. 41–50.
[JLSW02] J U T., L OSASSO F., S CHAEFER S., WARREN J.: Dual
contouring of hermite data. In SIGGRAPH ’02: Proceedings of
the 29th annual conference on Computer graphics and interactive techniques (2002), pp. 339–346.
[KBH06] K AZHDAN M., B OLITHO M., H OPPE H.: Poisson surface reconstruction. In SGP ’06: Proceedings of the fourth Eurographics symposium on Geometry processing (2006), pp. 61–70.
[KCVS98] KOBBELT L., C AMPAGNA S., VORSATZ J., S EIDEL
H.-P.: Interactive multi-resolution modeling on arbitrary meshes.
In SIGGRAPH ’98: Proceedings of the 25th annual conference on Computer graphics and interactive techniques (1998),
pp. 105–114.
[KSO04] KOLLURI R., S HEWCHUK J. R., O’B RIEN J. F.: Spectral surface reconstruction from noisy point clouds. In SGP ’04:
Proceedings of the 2004 Eurographics/ACM SIGGRAPH symposium on Geometry processing (2004), pp. 11–21.
[LC87] L ORENSEN W. E., C LINE H. E.: Marching cubes: A high
resolution 3d surface construction algorithm. In SIGGRAPH ’87:
Proceedings of the 14th annual conference on Computer graphics and interactive techniques (1987), pp. 163–169.
[OBA∗ 03] O HTAKE Y., B ELYAEV A., A LEXA M., T URK G.,
S EIDEL H.-P.: Multi-level partition of unity implicits. ACM
Transaction of Graphics 22, 3 (2003), 463–470.
[OBS02] O HTAKE Y., B ELYAEV A., S EIDEL H.-P.: Mesh
smoothing by adaptive and anisotropic gaussian filter. In Proceedings of Vision, Modeling, and Visualization VMV 2002
(2002), pp. 203–210.
[ÖGG09] Ö ZTIRELI C., G UENNEBAUD G., G ROSS M.: Feature
preserving point set surfaces based on non-linear kernel regression. Computer Graphics Forum 28, 2 (2009), 493–501. Proceedings of EUROGRAPHICS 2009.
[PSM94] P ERONA P., S HIOTA T., M ALIK J.: Anisotropic diffusion. In Geometry-Driven Diffusion in Computer Vision (1994),
pp. 73–92.
[Set99] S ETHIAN J. A.: Level Set Methods and Fast Marching
Methods. Cambridge University Press, 1999. Second Edition.
[SLS∗ 07] S HARF A., L EWINER T., S HKLARSKI G., T OLEDO
S., C OHEN -O R D.: Interactive topology-aware surface reconstruction. ACM Transaction of Graphics 26, 3 (2007), 43.1–43.9.
c 2009 The Author(s)
⃝
c 2009 The Eurographics Association and Blackwell Publishing Ltd.
Journal compilation ⃝

