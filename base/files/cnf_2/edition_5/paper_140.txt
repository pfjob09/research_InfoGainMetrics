DOI: 10.1111/j.1467-8659.2011.01993.x
Eurographics Symposium on Rendering 2011
Ravi Ramamoorthi and Erik Reinhard
(Guest Editors)

Volume 30 (2011), Number 4

Direct Ray Tracing of Phong Tessellation
Shinji Ogaki† and Yusuke Tokuyoshi‡1
1 Square

Enix Co., Ltd., Japan

Abstract
There are two major ways of calculating ray and parametric surface intersections in rendering. The first is through
the use of tessellated triangles, and the second is to use parametric surfaces together with numerical methods such
as Newton’s method. Both methods are computationally expensive and complicated to implement. In this paper, we
focus on Phong Tessellation and introduce a simple direct ray tracing method for Phong Tessellation. Our method
enables rendering smooth surfaces in a computationally inexpensive yet robust way.
Categories and Subject Descriptors (according to ACM CCS): I.3.7 [Computer Graphics]: Three-Dimensional
Graphics and Realism—Raytracing

1. Introduction
Rendering smooth surfaces is important in various fields
such as industrial design, film, and games. In the gaming
industry, we frequently use cinematic scenes that are often
pre-rendered. It is not difficult to render parametric surface
in real time graphics because modern GPUs support hardware tessellation. However, it is not easy for offline rendering. In order to obtain exactly the same appearance both in
real time graphics and in cinematic scenes, offline renderers
and game engines have to use the same tessellation method.
It is very helpful to generate high quality images from low
polygonal models since artists are freed from the need to
create both assets for offline renderers and game engines.
To render a smooth surface, a number of parametric surfaces
have been developed such as Cubic A-Patches [BCX95],
Curved PN Triangle [VPBM01], NURBS, and T-Spline
[SZBN03]. NURBS is known as one of the most flexible
parametric surfaces and the standard for industrial design. In
the gaming industry, simple tessellation algorithms including Curved PN Triangle are prefered since they fit well for
the current rendering pipeline. An offline renderer handles
parametric surfaces mainly in two ways. One approach is
to perform intersection tests with tessellated triangles. The
other method is to directly calculate intersection points. Analytic solutions are available only for limited cases. Many
intersection tests for low-degree primitives such as triangles
† ogaki@square-enix.com
‡ tokuyosh@square-enix.com
c 2011 The Author(s)
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd. Published by Blackwell Publishing, 9600 Garsington Road, Oxford OX4 2DQ,
UK and 350 Main Street, Malden, MA 02148, USA.

and quadrics can be found in the literature such as Graphics
gems series ( [Gla90], [Arv91], [Kir92], [Hec94], [Pae95])
and [AMHH08]. A comprehensive study can be found in
[SE02]. They also exist for low order parametric surfaces
such as bilinear patch [RPH04]. In general, numerical methods are necessary to render higher order parametric surfaces.
An intensive study has been done to efficiently render parametric surfaces. Nevertheless, it still remains an open problem.
Among various parametric surfaces, Phong Tessellation
[BA08] has recently increased in popularity because it produces nice results despite its simplicity. Phong Tessellation
has a couple of nice properties which make it attractive: the
shape is determined only by its vertices and vertex normals,
and analytic solutions exist for the ray-Phong Tessellation
intersection problem. In this paper, we therefore focus on
Phong Tessellation and present a simple and robust direct
ray tracing method for it. Besides the intersection test, we
introduce three techniques to efficiently render Phong Tessellation: 1) an axis aligned bounding box (AABB) overlap
test, 2) a surface area heuristic (SAH) kd-tree construction
method, and 3) a normal smoothing method.
2. Related Work
Tessellated Triangles Many efficient ray tracing methods for tessellated polygons have been proposed, such as
[SSS00]. This method tessellates triangles at runtime and
performs intersection tests along a ray hence additional
memory is not required over original triangle models. State-

1338

Shinji Ogaki& Yusuke Tokuyoshi / Direct Ray Tracing of Phong Tessellation

of-the-art methods can handle motion blur of micropolygons
(see for example [HQL∗ 10]). To achieve high performance,
tessellated triangles must be cached and rays have to be
traced in a coherent way so that cache performance is maximized. Additionally, in order to select the appropriate tessellation level, vital for achieving a high quality result, ray differentials [Ige99] must be used. View-dependent adaptivity
metrics such as [Bou10b] are also useful to increase performance.

3. Our Method
This section describes the details of our method. First, we
briefly review Phong Tessellation. Next we explain the rayPhong intersection test and Phong Tessellation-AABB overlap test. Then a SAH kd-tree construction method is introduced. Finally we describe how to calculate shading normals.

3.1. Phong Tessellation
Numerical Method Intersection points can be found via implicitization such as [SA84]. Another common method is to
express a ray as an intersection of two orthogonal planes and
obtain intersection points as the intersections of two planar
curves. In order to solve these problems, numerical methods including Newton’s method, Laguerre’s method, and
Bézier Clipping [SN90] can be used. For higher order parametric surfaces, sophisticated root finding algorithms such
as [EM95] can be used, however rendering speed might be
inferior to numerical methods. We can simplify the problem by removing one variable from bivaritate planar curve
equations with the Sylvester resultant [Kaj82]. This enables
us to obtain analytic solution up to a quadratic parametric
surface. However this is susceptible to numeric errors. Increasing ray coherency, for example, by reordering rays, can
improve performance further [JB86]. Wang et al. combined
Newton’s method and Bézier Clipping to increase robustness
[WSC02]. Their method uses a previus intersection point as
the initial value of Newton’s method to find the next intersection point. If the next intersection point is invalid, the algorithm switches to use Bézier Clipping. Toth [Tot85] applied
Interval Arithmetic to find intersection points. This approach
was later improved with SIMD [KHH∗ 07]. Recently, Knoll
et al. [KHK∗ 09] proposed a rendering method of arbitrary
implicit surfaces with Reduced Affine Arithmetic. Loop et
al. [LB06] used GPU to accelerate rendering of piecewise algebraic surfaces, and also introduced a preconditioning technique to obtain more robust solutions.

The definition of Phong Tessellation is given as follows. Let
(u, v, w) be a barycentric coordinate and Pi a vertex. Phong
Tessellation for a triangle is defined as
Pα (u, v) = (1 − α)P(u, v) + αP∗ (u, v),

(1)

where
P(u, v) = (u, v, w)(P1 , P2 , P3 )T


π1 (P(u, v))
∗
P (u, v) = (u, v, w)  π2 (P(u, v))  ,
π3 (P(u, v))
and w = 1 − (u + v). Letting Ni be a vertex normal vector,
the function πi is given as
πi (Q) = Q − ((Q − Pi )T Ni )Ni .

(2)

The factor α is used for controlling the shape. Phong Tessellation is extended for a quadrangle as
P(u, v) = uvP1 + (1 − u)(1 − v)P4
+ (1 − u)vP2 + u(1 − v)P3
P∗ (u, v) = uvπ1 (P(u, v)) + (1 − u)(1 − v)π4 (P(u, v))
+ (1 − u)vπ2 (P(u, v)) + u(1 − v)π3 (P(u, v)).
See [BA08] and [Bou10a] for more details.

3.2. Ray Phong Tessellation Intersection Test
Avoiding Redundant Intersection Tests In order to reduce the number of redundant intersection tests, mail-boxing
can be used. Inverse mail-boxing [SK07] is more suitable
when the rendering process is parallelized. Hunt introduced
cost function modification regarding inverse mail-boxing
[Hun08].
Shading Normals Other related research is normal smoothing. Breen [Bre86] proposed to use Phong normal to achieve
smooth shading of Steiner Patch. Phong interpolation has
been improved in the literature such as in [vOW97]. Consistent Normal Interpolation [RSM10] removes artifacts at
grazing angles. These algorithms cannot improve the quality
of shadow boundaries and silhouettes of objects. Hence we
have to rely on numerical methods or tessellation to improve
image quality.

Since Phong Tessellation defines a quadratic parametric surface, the intersection test can be rearranged into the intersection problem of two quadratic curves.
Every ray can be represented as an intersection of
two planes, say Plane1 (x, y, z) = D1 · (x, y, z)T + O1 and
Plane2 (x, y, z) = D2 · (x, y, z)T + O2 . The intersection X lies
on both the planes. Therefore we have
0 = D1 · X + O1

(3)

0 = D2 · X + O2 .

(4)

Substituting the right-hand side of Equation (1) for X of
Equation (3) and (4) gives two quadratic curves:
0 = F(u, v) = au2 + bv2 + c + duv + eu + f v

(5)

0 = G(u, v) = lu2 + mv2 + n + ouv + pu + qv,

(6)

c 2011 The Author(s)
c 2011 The Eurographics Association and Blackwell Publishing Ltd.

1339

Shinji Ogaki& Yusuke Tokuyoshi / Direct Ray Tracing of Phong Tessellation

where

However, we observed that Kajiya’s method generates artifacts because of numerical errors. Therefore, we propose a
simpler and more robust method which makes use of a pencil of curves (see [Hos92] for more details). The pencil P is
defined as

a = −D1 ·C31
b = −D1 ·C23
c =

D1 · P3 + O1

d =

D1 · (C12 −C23 −C31 )

e =

D1 · (C31 + E31 )

f =

D1 · (C23 − E23 )

0 = P = xF(u, v) + G(u, v) = (u, v, 1)M(u, v, 1)T ,
where


xa + l
M =  (xd + o)/2
(xe + p)/2

l = −D2 ·C31
m = −D2 ·C23
n =

D2 · P3 + O2

o =

D2 · (C12 −C23 −C31 )

p =

D2 · (C31 + E31 )

q =

D2 · (C23 − E23 )

(10)

(xd + o)/2
xb + m
(x f + q)/2


(xe + p)/2
(x f + q)/2  . (11)
xc + n

If 0 = |M|, P can be represented as a product of two lines.
This is a special case of a hyperbola. If this is not clear,
remember that u2 /s2 = v2 /t 2 can be expressed as (tu +
sv)(tu − sv) = 0. By letting
L1 = α1 u + β1 v + γ1

(12)

L2 = α2 u + β2 v + γ2 ,

(13)

(u, v, 1)M(u, v, 1)T = L1 L2 .

(14)

and Ei and Ci are given as
Ei j = Pj − Pi

(7)

Ci j = α((N j · Ei j )N j − (Ni · Ei j )Ni ).

(8)

Two quadratic curves have four intersections in general,
hence this problem can be solved analytically. (It is noteworthy that Phong Tessellation can be regarded as the integral Steiner, thus intersection points can also be obtained
with the implicitization method described in [SA84]. However, this method is slightly complicated since a 10 × 10 linear system has to be solved.) We can obtain the intersections
of the two planar curves F(u, v) and G(u, v) with [Kaj82].
To save space, we only describe the result. If F and G have
one or more common roots, the determinant of the Sylvester
matrix is zero. Hence we have
0 = a4 u4 + a3 u3 + a2 u2 + a1 u + a0 ,

(9)

where
a4 = abo2 + a2 m2 + d 2 lm + b2 l 2 − admo − bdlo − 2ablm
a3 = beo2 + d 2 mp

we have

The factorization is done by comparing the coefficients of
u2 , v2 , uv, u, v, and 1. Dividing the both sides of Equation
(14) by M11 or M22 , whichever has a greater absolute value,
makes the calculation easier and more robust. In the case of
M11 > M22 , the two lines L1 and L2 are obtained as
L1 = u+ M12 +

M122 − M22 v+ M13 ±

M132 − M33

L2 = u+ M12 −

M122 − M22 v+ M13 ∓

M132 − M33 ,

where Mi j = Mi j /M11 . The coefficients γ1 and γ2 are chosen
so that M23 = β1 γ2 + β2 γ1 . Similary, in the case of M22 >
M11 , L1 and L2 are obtained as
L1 = M12 +

M122 − M11 u+v+ M23 ±

M232 − M33

L2 = M12 −

M122 − M11 u+v+ M23 ∓

M232 − M33 ,

− admq − bdlq − bdop − a f mo − demo − b f lo
+ 2(aem2 + b2 l p + aboq + d f lm − abmp − belm)
2

2

2

2

2 2

2 2

a2 = abq + f lm + bco + d mn + b p + e m
− b f op − bdno − e f mo − cdmo
− bd pq − a f mq − demq − b f lq

+ 2(b2 ln + acm2 + beoq + d f mp − bemp − abmn − bclm)
a1 = beq2 + f 2 mp
− b f pq − bdnq − e f mq − cdmq − b f no − c f mo
+ 2(cem2 + b2 np + bcoq + d f mn − bcmp − bemn)
2

2 2

2

2 2

a0 = bcq + b n + f mn + c m − b f nq − c f mq − 2bcmn.
Solving this quartic equation, values for u are obtained. Substituting the values for u of Equation (5) or (6), we obtain
values for v.
c 2011 The Author(s)
c 2011 The Eurographics Association and Blackwell Publishing Ltd.

where Mi j = Mi j /M22 . The coefficients γ1 and γ2 are chosen
so that M13 = α1 γ2 + α2 γ1 .
Let {θ ∩ φ} denote the set of the intersections of θ and φ.
The set of the intersections is decomposed as
{F(u, v) ∩ G(u, v)} = {F(u, v) ∩ L1 } + {F(u, v) ∩ L2 } (15)
since
{F(u, v) ∩ G(u, v)} = {F(u, v) ∩ (F(u, v) + G(u, v))}
= {F(u, v) ∩ (xF(u, v) + G(u, v))}
= {F(u, v) ∩ P}
= {F(u, v) ∩ L1 L2 }.

1340

Shinji Ogaki& Yusuke Tokuyoshi / Direct Ray Tracing of Phong Tessellation

Thus, the problem can be simplified by finding the value of
x such that 0 = |M|. The values of x are given by solving the
following cubic equation

for i = 1, 2, 3. In this case we can significantly simplify the
problem assuming that 0 ≤ D(u, v) or 0 ≥ D(u, v) for every
u and v such that 0 ≤ u, 0 ≤ v, and 0 ≤ w. Letting

0 = a3 x3 + a2 x2 + a1 x + a0 ,

∂D
∂D
=
(20)
∂u
∂v
yields two line equations. Finding their intersection, we obtain the estimates of u and v, uˆ and v,
ˆ which are given as

(16)

where
a3 = abc + (de f − a f 2 − be2 − cd 2 )/4
a2 = abn + amc + lbc − (a f q + bep + cdo)/2

0=

uˆ = K(2(NG ·C23 )(NG · (C31 + E31 ))

+ (oe f + deq + d p f − l f 2 − me2 − nd 2 )/4

+ (NG · (C23 − E23 ))(NG · (C12 −C23 −C31 ))) (21)

a1 = amn + lbn + lmc − (l f q + mep + ndo)/2

vˆ = K(2(NG ·C31 )(NG · (C23 − E23 ))

+ (d pq + oeq + op f − aq2 − bp2 − co2 )/4
2

2

+ (NG · (C31 + E31 ))(NG · (C12 −C23 −C31 ))), (22)

2

a0 = lmn + (opq − lq − mp − no )/4.

where

We only need to obtain one value of x, which significantly reduces the cost of root finding. Substituting Equation (12) and
(13) into Equation (5) or (6) gives two quadratic equations.
By solving them, we obtain values for u and v. The parameters u, v, and w = 1 − (u + v) must lie between 0 and 1. Otherwise there is no intersection. Note also that the intersection test is immediately terminated if 0 < M11 M22 −M12 M21
since 0 = (u, v, 1)M(u, v, 1)T becomes an ellipsoid whose
area is zero.
3.3. Phong Tessellation - AABB Overlap Test
In order to build a high quality acceleration structure, we
need the Phong Tessellation-AABB overlap test. We perform the triangle-AABB overlap test [AM01] against an
enlarged AABB instead of calculating exact intersection
points.

Figure 1: Thickness and side drops of Phong Tessellation
An AABB is enlarged by an offset which is the maximum
of thickness and all side drops (Figure 1). Thickness is the
maximum distance between Pα (u, v) and the triangle P1 P2 P3
(Figure 1 Left), which is defined as
thickness = max(|D(u, v)|),

(17)

D(u, v) = NG · (Pα (u, v) − P1 )

(18)

where

and NG = (E12 × E13 )/|E12 × E13 |. Generally, this problem
is solved by minimizing the L2 -norm of D(u, v). It is worth
noting that in most cases the following condition holds:
0 ≤ NG · Ni

(19)

K=

1
.
4(NG ·C23 )(NG ·C31 ) − (NG · (C12 −C23 −C31 ))2

However uˆ and vˆ may not lie between 0 and 1. If this is the
case, we also have to evaluate the points (u,
ˆ 0) and (0, v).
ˆ
Side drop Si j is the maximum distance between the edge Ei j
and edge of Pα (u, v) (Figure 1 Right), which is given as
Si j = max(|(Pj − Pα (u, v)) × (Pi − Pα (u, v))|/|Ei j |). (23)
Obtaining side drop is easy thanks to the property of Phong
Tessellation. Since each edge is a quadratic curve, we only
have to evaluate the midpoint i.e. (u, v, w) = (0, 0.5, 0.5),
(0.5, 0, 0.5), and (0.5, 0.5, 0).
Once an offset is computed, it is reused during an acceleration construction process.
3.4. SAH KD-Tree Construction
In our implementation, kd-tree is used as an acceleration
structure. SAH has to be used as a cost metric to construct
a high quality kd-tree. Since obtaining exact terminals and
sorting them are time consuming operations, we use the
min-max binning algorithm [SSK07] with a slight modification. Our algorithm performs min-max binning with the
previously described AABB overlap test in a similar manner to binary search. To update min-bins set, we split the
current node and perform an overlap test with child node
boxes (light blue and red boxes as shown in Figure 2). If
the lower node box overlaps, it is further subdivided. If not,
the upper node box is subdivided. This process is recursively
performed until it reaches a user specified maximum depth
level (Figure 2 Top). The same approach is used to update
max-bins set (Figure 2 Bottom). The binary search part can
be made quaternary or octary by using SIMD instruction sets
such as Intel AVX. This speeds up the kd-tree construction
process.
Since our system handles various types of primitives, we
need to modify the cost metric SAH. SAH is defined as
SAH = SA(NodeL ) × TL + SA(NodeR ) × TR
+ NodeTraversalCost,

(24)

c 2011 The Author(s)
c 2011 The Eurographics Association and Blackwell Publishing Ltd.

1341

Shinji Ogaki& Yusuke Tokuyoshi / Direct Ray Tracing of Phong Tessellation

Figure 2: Binary search based binning method. Top: Finding lower bin. Bottom: Finding upper bin.

where SA denotes the surface area of a child node, and TL
and TR are the number of triangles in the left node and right
node, respectively. By introducing the ratio r based on the
cost of ray-triangle intersction test, SAH is modified as
SAH = SA(NodeL ) × (TL + r × PTL )

NS =

∂Pα (u, v) ∂Pα (u, v)
×
∂u
∂v

The partial derivatives

+ SA(NodeR ) × (TR + r × PTR )
+ NodeTraversalCost,

The surface normal NS can be derived as

(25)

where PTL and PTR are the number of Phong Tessellations in
the left and right node, respectively. Note that our cost function does not take into account inverse mail-boxing. Rendering performance varies depending on r. Through our experiments we observed that r = 4 is suitable as the cost ratio.

∂Pα (u,v)
∂u

∂Pα (u, v) ∂Pα (u, v)
×
.
∂u
∂v
(28)
∂P (u,v)
and α∂v are obtained as

∂Pα (u, v)
= (w − u)C31 + v(C12 −C23 ) + E31 (29)
∂u
∂Pα (u, v)
= (w − v)C23 + u(C12 −C31 ) − E23 . (30)
∂v
We cannot directly apply Consistent Normal Interpolation
since Phong Tessellation is not flat. However, this simple
method works well in practice since the gap between the geometric normal and Phong normal is relatively small.

3.5. Shading Normal
4. Result

Figure 3: Shading Normal. At grazing angles, reflected vectors might go underneath the surface.
For smooth rendering, we use the Phong-interpolated normal
NP as in [Bre86]. It is given as
NP = (uN1 + vN2 + wN3 )/|uN1 + vN2 + wN3 |.

(26)

In general, using NP produces good results. However, this
leads to unpleasant artifacts at grazing angles since NP is
not necessarily equivalent to the surface normal of Phong
Tessellation NS . To address this issue, we use NS instead if
the inner product of NS and the reflection vector r is negative
(Figure 3). Letting v be the viewing direction, r is given as
r = v − 2NP (v · NP ).
c 2011 The Author(s)
c 2011 The Eurographics Association and Blackwell Publishing Ltd.

(27)

We implemented the above described algorithm in our renderer. Figure 4 (Top) shows a low polygon sphere model and
Figure 4 (Middle) shows the same model rendered with our
method. Our normal smoothing method enables us to properly render a reflective material at grazing angles. Figure 4
(Bottom) shows the same scene rendered with our method
and Kajiya’s method [Kaj82]. Cracks can be seen in the
image rendered with Kajiya’s method while no visible artifacts are generated with our method. In our implementation
quartic equations are solved with Ferrari’s method and cubic equations are solved with Cardano’s method. Other root
finding methods might be able to remove cracks. However,
this result shows that our method gives better results with
standard techniques.
To further improve the AABB overlap test, we can split
Phong Tessellation into N small patches and operate in parallel because modern CPUs support SIMD instruction. We
tested this with N = 4, however, very little performance gain
was obtained. This is because our intersection test is implemented together with inverse mail-boxing hence a small
amount of redundant intersection tests can be ignored.

1342

Shinji Ogaki& Yusuke Tokuyoshi / Direct Ray Tracing of Phong Tessellation

Figure 4: Top: Low polygon models (in signle precision, 960x540pixels, 24seconds). Middle: Low polygon models rendered
with our method (in single precision, 960x540pixels, 64seconds). Bottom: Low polygon models rendered with Kajiya’s method
(in double precision, 960x540pixels, 103seconds). All images were rendered on a dual Xeon W5590 system.

5. Discussion and Future Work
Intersection Test Kajiya’s method needs to solve a quartic equation while ours solves a cubic equation. This fact
makes our algorithm more robust against numerical errors,
hence no visually perceptible noise is produced. During the
intersection test, we could obtain three x’s such that 0 = |M|.
Choosing x that minimizes M12 M21 −M11 M22 is reasonable.
However, it is difficult to see how the choice of x affects the
numerical accuracy. Interval Analysis is one such technique
to estimate the range of numerical errors. However, the plain
use of Interval Arithmetic may result in a range explosion.
We want to find a suitable quantitative evaluation method.
We also would like to compare the accuracy of our method
with other numerical methods.
If the shape controlling factor α is near zero, or all vertex
normals are very similar to each other, small cracks might

be generated. This is because in these cases the intersection
test is done by treating a thin patch as a flat triangle. Even
though it is unnoticeable until an image is rendered at very
high resolution, we would like to develop a better technique
to address this issue.
SAH KD-Tree Construction Our kd-tree construction is
based on the min-max binning algorithm. Its memory requirement is significantly lower compared to other algorithms because only AABB overlap tests are used. The resulting kd-tree is not optimal, however a reasonably high
quality tree can be built quickly with the help of SIMD instructions. We believe this algorithm is very useful especially in memory limited environments. An interesting research direction is to develop a fast SAH kd-tree construction algorithm for an arbitrary parametric surface. A better
exploitation of SIMD instruction sets may also be helpful.
c 2011 The Author(s)
c 2011 The Eurographics Association and Blackwell Publishing Ltd.

Shinji Ogaki& Yusuke Tokuyoshi / Direct Ray Tracing of Phong Tessellation

6. Conclusion
In this paper, we introduced a simple and robust ray tracing
method for Phong Tessellation which makes use of a pencil of curves. Image quality is high enough for non-product
design fields, especially for organic shapes. We believe our
algorithm is suitable to render smooth surfaces since high
quality images can be rendered from low polygon models without changing the renderer architecture. We also described the Phong Tessellation-AABB overlap test and SAH
kd-tree construction algorithm. They are very simple thanks
to the property of Phong Tessellation. The idea of our overlap test and kd-tree construction method is applicable to
other parametric surfaces and other data structures such as
Bounding Volume Hierarchy or Hierarchical Grid.

1343

[HQL∗ 10] H OU Q., Q IN H., L I W., G UO B., Z HOU K.: Micropolygon ray tracing with defocus and motion blur. In SIGGRAPH
’10: ACM SIGGRAPH 2010 papers (New York, NY, USA, 2010),
ACM, pp. 1–10. 2
[Hun08] H UNT W.: Corrections to the surface area metric with
respect to mail-boxing. In IEEE/EG Symposium on Interactive
Ray Tracing 2008 (Aug 2008), IEEE/EG, pp. 77–80. 2
[Ige99] I GEHY H.: Tracing ray differentials. In SIGGRAPH
’99: Proceedings of the 26th annual conference on Computer
graphics and interactive techniques (New York, NY, USA, 1999),
ACM Press/Addison-Wesley Publishing Co., pp. 179–186. 2
[JB86] J OY K. I., B HETANABHOTLA M. N.: Ray tracing parametric surface patches utilizing numerical techniques and ray coherence. SIGGRAPH Comput. Graph. 20 (August 1986), 279–
285. 2

7. Acknowledgement

[Kaj82] K AJIYA J. T.: Ray tracing parametric patches. In Proceedings of the 9th annual conference on Computer graphics and
interactive techniques (New York, NY, USA, 1982), SIGGRAPH
’82, ACM, pp. 245–254. 2, 3, 5

We would like to thank Tamy Boubekeur and Yuta Araki for
allowing us to use the low polygon models, and Arun Mehta
and Junko Asakura for their valuable comments. We also
thank anonymous reviewers for their helpful suggestions.

[KHH∗ 07] K NOLL A., H IJAZI Y., H ANSEN C., WALD I., H A GEN H.: Interactive ray tracing of arbitrary implicits with simd
interval arithmetic. In Proceedings of the 2007 IEEE Symposium
on Interactive Ray Tracing (Washington, DC, USA, 2007), IEEE
Computer Society, pp. 11–18. 2

References

[KHK∗ 09] K NOLL A., H IJAZI Y., K ENSLER A., S CHOTT M.,
H ANSEN C. D., H AGEN H.: Fast ray tracing of arbitrary implicit
surfaces with interval and affine arithmetic. Comput. Graph. Forum 28, 1 (2009), 26–40. 2

[AM01] A KENINE -M OLLER T.: Fast 3d triangle-box overlap
testing. journal of graphics, gpu, and game tools 6, 1 (2001),
29–33. 4

[Kir92] K IRK D. (Ed.): Graphics Gems III. Academic Press, Inc.,
1992. 1

[AMHH08] A KENINE -M ÖLLER T., H AINES E., H OFFMAN N.:
Real-Time Rendering 3rd Edition. A. K. Peters, Ltd., Natick,
MA, USA, 2008. 1

[LB06] L OOP C., B LINN J.: Real-time gpu rendering of piecewise algebraic surfaces. ACM Trans. Graph. 25 (July 2006), 664–
670. 2

[Arv91] A RVO J. (Ed.): Graphics Gems II. Academic Press, Inc.,
1991. 1

[Pae95] PAETH A. (Ed.): Graphics Gems V. Academic Press,
Inc., 1995. 1

[BA08] B OUBEKEUR T., A LEXA M.: Phong tessellation. In
SIGGRAPH Asia ’08: ACM SIGGRAPH Asia 2008 papers (New
York, NY, USA, 2008), ACM, pp. 1–5. 1, 2

[RPH04] R AMSEY S., P OTTER K., H ANSEN C.: Ray bilinear
patch intersections. Journal of Graphics Tools 9, 3 (2004), 41–
47. 1

[BCX95] BAJAJ C. L., C HEN J., X U G.: Modeling with cubic
a-patches. ACM Trans. Graph. 14 (April 1995), 103–133. 1

[RSM10] R ESHETOV A., S OUPIKOV A., M ARK W. R.: Consistent normal interpolation. ACM Trans. Graph. 29 (December
2010), 142:1–142:8. 2

[Bou10a] B OUBEKEUR T.: GPU Pro - Advanced Rendering Techniques. ShaderX Book Series. A.K. Peters, 2010, ch. As-SimpleAs Possible Tessellation for Interactive Applications. 2
[Bou10b] B OUBEKEUR T.: A view-dependent adaptivity metric
for real-time mesh tessellation. In IEEE International Conference on Image Processing (ICIP 2010) (2010), pp. 3969 – 3972.
2

[SA84] S EDERBERG T. W., A NDERSON D. C.: Ray tracing of
steiner patches. In Proceedings of the 11th annual conference on
Computer graphics and interactive techniques (New York, NY,
USA, 1984), SIGGRAPH ’84, ACM, pp. 159–164. 2, 3
[SE02] S CHNEIDER P. J., E BERLY D.: Geometric Tools for Computer Graphics. Elsevier Science Inc., New York, NY, USA,
2002. 1

[Bre86] B REEN D. E.: Creation and smooth-shading of steiner
patch tessellations. In Proceedings of 1986 ACM Fall joint computer conference (Los Alamitos, CA, USA, 1986), ACM ’86,
IEEE Computer Society Press, pp. 931–940. 2, 5

[SK07] S HEVTSOV A. S. M., K APUSTIN . A.: Ray-triangle intersection algorithm for modern cpu architectures. In Conference
on Computer Graphics and Vision (2007). 2

[EM95] E DELMAN A., M URAKAMI H.: Polynomial roots from
companion matrix eigenvalues. Math. Comput. 64 (April 1995),
763–776. 2

[SN90] S EDERBERG T. W., N ISHITA T.: Curve intersection using bézier clipping. Computer-Aided Design 22, 9 (1990), 538–
549. 2

[Gla90] G LASSNER A. (Ed.): Graphics Gems. Academic Press,
Inc., 1990. 1
[Hec94] H ECKBERT P. (Ed.): Graphics Gems IV. Academic
Press, Inc., 1994. 1

[SSK07] S HEVTSOV M., S OUPIKOV A., K APUSTIN A.: Highly
parallel fast kd-tree construction for interactive ray tracing of dynamic scenes. Comput. Graph. Forum 26, 3 (2007), 395–404.
4

[Hos92] H OSAKA M.: Modeling of curves and surfaces in
CAD/CAM. Springer-Verlag New York, Inc., New York, NY,
USA, 1992. 3

[SSS00] S MITS B., S HIRLEY P., S TARK M. M.: Direct Ray
Tracing of Smoothed and Displacement Mapped Triangles. Tech.
rep., 2000. 1

c 2011 The Author(s)
c 2011 The Eurographics Association and Blackwell Publishing Ltd.

1344

Shinji Ogaki& Yusuke Tokuyoshi / Direct Ray Tracing of Phong Tessellation

[SZBN03] S EDERBERG T. W., Z HENG J., BAKENOV A., NASRI
A.: T-splines and t-nurccs. In SIGGRAPH ’03: ACM SIGGRAPH
2003 Papers (New York, NY, USA, 2003), ACM, pp. 477–484. 1
[Tot85] T OTH D. L.: On ray tracing parametric surfaces. SIGGRAPH Comput. Graph. 19 (July 1985), 171–179. 2
[vOW97] VAN OVERVELD C. W. A. M., W YVILL B.: Phong
normal interpolation revisited. ACM Trans. Graph. 16 (October
1997), 397–419. 2
[VPBM01] V LACHOS A., P ETERS J., B OYD C., M ITCHELL
J. L.: Curved pn triangles. In SI3D ’01: Proceedings of the 2001
symposium on Interactive 3D graphics (New York, NY, USA,
2001), ACM Press, pp. 159–166. 1
[WSC02] WANG S.-W., S HIH Z.-C., C HANG R.-C.: An efficient and stable ray tracing algorithm for parametric surfaces. J.
Inf. Sci. Eng. 18, 4 (2002), 541–561. 2

c 2011 The Author(s)
c 2011 The Eurographics Association and Blackwell Publishing Ltd.

