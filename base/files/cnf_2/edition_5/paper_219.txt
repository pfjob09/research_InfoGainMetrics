DOI: 10.1111/j.1467-8659.2011.01974.x

COMPUTER GRAPHICS

forum

Volume 30 (2011), number 8 pp. 2246–2257

Example-Driven Deformations Based on Discrete Shells
Stefan Fr¨ohlich and Mario Botsch
Computer Graphics Group, Bielefeld University, Germany
{sfroehli,botsch}@techfak.uni-bielefeld.de

Abstract
Despite the huge progress made in interactive physics-based mesh deformation, manipulating a geometrically
complex mesh or posing a detailed character is still a tedious and time-consuming task. Example-driven methods
significantly simplify the modelling process by incorporating structural or anatomical knowledge learned from
example poses. However, these approaches yield counter-intuitive, non-physical results as soon as the shape space
spanned by the example poses is left. In this paper, we propose a modelling framework that is both example-driven
and physics-based and thereby overcomes the limitations of both approaches. Based on an extension of the discrete
shell energy we derive mesh deformation and mesh interpolation techniques that can be seamlessly combined into
a simple and flexible mesh-based inverse kinematics system.
Keywords: mesh deformation, physics-based deformation, discrete shells, inverse kinematics
ACM CCS: I.3.5 [Computer Graphics]: Computational Geometry and Object Modeling—Physically based
modeling.

1. Introduction
Mesh deformation is a fundamental and challenging topic
in digital geometry processing, with various applications in
as diverse fields as shape design, engineering, and computer
animation. As a consequence, a huge number of different
modelling approaches have been proposed over the years,
most of which can be classified as physics-based or physicsinspired. They employ elastic energies that approximate (or
at least qualitatively mimic) the behaviour of elastic objects
known from continuum mechanics. Despite the impressive
progress made in this field, manipulating geometrically complex shapes, for instance a detailed character model, can still
be a time-consuming and tedious process even with state-ofthe-art modelling tools. This is mainly because no knowledge
about the semantic or anatomical structure of the model is
incorporated into the physics-based deformation energy.
In contrast, example-driven deformations, as pioneered in
the mesh-based inverse kinematics (MeshIK) system of Sumner et al. [SZGP05], achieve natural shape manipulations by
a suitable blending of carefully designed example poses. Although the input poses now provide the previously missing
c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics
Association and Blackwell Publishing Ltd. Published by
Blackwell Publishing, 9600 Garsington Road, Oxford OX4
2DQ, UK and 350 Main Street, Malden, MA 02148, USA.

knowledge about the model’s deformation behaviour, existing example-driven methods are not physics-based. When the
modelling constraints cannot be represented within the shape
space spanned by the example poses (the example space), the
deformation might yield unnatural results.
In this paper, we propose a novel mesh deformation approach that combines the strengths of example-driven and
physics-based techniques and thereby avoids their respective
limitations. Our method incorporates given example poses,
but gracefully falls back to physics-inspired deformations
when leaving the example space.
In a general example-driven deformation framework, the
designer imposes modeling constraints and the system computes the shape closest to the example space meeting these
constraints. Therefore, such a framework conceptually consists of two main components:
• An interpolation operator that blends between the given
input poses to find the mesh that best matches the designer’s constraints within the example space.

2246

S. Fr¨ohlich and M. Botsch / Example-Driven Deformations Based on Discrete Shells

• A deformation operator that deforms the interpolated
shape to exactly satisfy the modelling constraints,
thereby potentially deviating from the example space.
For instance, the interpolation and deformation operators of the original MeshIK [SZGP05] are both based on
deformation gradients and linear Poisson systems. Linear
deformation gradients, however, were recently shown to yield
artefacts in the context of mesh deformation [BS08] and mesh
interpolation [WDAH10], which consequently also lead to
problems for the MeshIK system they are employed for.
Inspired by MeshIK [SZGP05], our goal is to overcome the
limitations inherent to deformation gradients. To this end, we
base our modeling system on an extension of the non-linear
discrete shell energy [GHDS03], which measures stretching
and bending as deviations of edge lengths and dihedral angles, respectively. This allows us to develop deformation and
interpolation operators that are free of the above-mentioned
linearization artefacts.
Our deformation and interpolation techniques on its own
are on a par with (but not necessarily superior to) state-ofthe-art methods for these problems. The major strength of
our approach is the seamless integration of these two components into a simple and elegant formulation for examplebased and physics-based deformations. We incorporate the
computation of the optimal interpolation weights, the interpolation itself, and the constrained mesh deformation into
a simple non-linear energy, which can easily be minimized
through a straightforward Gauss–Newton method. We further present a multiresolution optimization that enables the
editing of complex models at interactive rates. Our proposed
modelling framework overcomes several limitations of current example-based approaches. It can interpolate large rotations between example poses, is fully rotation invariant, and
falls back to physically plausible deformations when leaving
the example space.
2. Related Work
In this section, we discuss existing example-driven deformation approaches as well as mesh deformation and mesh
interpolation methods-because these two techniques are integral components of our modelling framework.
2.1. Mesh deformation
For the following discussion we focus on surface-based deformation techniques—in contrast to space deformations-to
enable the combination with a mesh interpolation operator.
Following [BS08], we further classify these approaches into
(i) shell-based techniques, which approximate the elastic energy of thin shells [TPBF87], and (ii) methods based on
differential coordinates, which manipulate the shape through
deformation gradients, Laplacians or local frames [Sor06].

2247

Most of the earlier techniques simplify the underlying energies to yield a linear variational optimization. The inherent
drawbacks of this linearization have been analysed in [BS08].
Shell-based methods typically have problems with large rotational deformations (e.g. [KCVS98, BK04]), and methods
based on differential coordinates or local frames often are
translation-insensitive (e.g. [YZX*04, ZRKS05, LSLC05,
KG08]), which basically requires the user to prescribe position and orientation of handle points and thereby prevents a
simple click-and-drag interaction.
Recent approaches employ non-linear elastic energies
to overcome these limitations, again being shell-based
[BPGK06, BMWG07] or based on differential coordinates or
frames [SK04, HSL*06, SZT*07, AFTCO07, SA07]. Compared to linear methods, the non-linear optimization is considerably more involved. Non-linear approaches therefore
typically perform the optimization in a hierarchical, adaptive, or subspace manner.
In this paper we adapt the discrete shell energy [GHDS03]
for our mesh deformation operator. Thanks to this non-linear,
physics-based energy our deformations are free of linearization artefacts, and we can control the local surface stiffness
(similar to [PJS06, HZS*06, KG08]) as well as the relation
of stretching and bending resistance. Note that while PriMo
[BPGK06] performs equally well for pure deformation, it
cannot be easily combined with mesh interpolation.
2.2. Mesh interpolation
To avoid the artefacts from linear interpolation of vertex
positions, several approaches interpolate per-triangle affine
transformations instead, that is per-face deformation gradients [ACOL00, XZWB05, SZGP05]. In this case, per-face
rotations have to be interpolated in a non-linear manner, typically through spherical linear interpolation. This interpolation of deformation gradients can fail for per-face rotations
of more than 180◦ , since then the shorter spherical interpolation path is taken, which might not be the correct one.
Baran et al. [BVGP09] avoid large rotations by splitting the
mesh into patches and interpolating per-face rotations relative to the patch rotation. An alternative is to replace the
per-face rotations between example poses by relative rotations between neighbouring frames [LSLC05, KG08]. The
three cited methods successfully interpolate between meshes
even in the presence of large rotations. However, they have
to solve for rotations and vertex positions in sequence using two linear systems, which still is an efficient linear process, but cannot be easily used as a component of a MeshIK
system.
Kilian et al. [KMP07] and Chao et al. [CPSS10] interpolate models along geodesics in suitable shape spaces, but their
methods are either too complex [KMP07] or work for solid
models only [CPSS10]. Recently, Winkler et al. [WDAH10]
proposed to represent and interpolate meshes in terms of

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

2248

S. Fr¨ohlich and M. Botsch / Example-Driven Deformations Based on Discrete Shells

edge lengths and dihedral angles. To find the mesh that best
matches the interpolated edge lengths and angles they employ
a rather complicated hierarchical shape matching technique,
which prevents their method from being directly used in a
MeshIK system.
However, Winkler’s approach [WDAH10] uses exactly the
same local mesh properties (edge lengths and dihedral angles) for mesh interpolation as discrete shells [GHDS03] use
for mesh deformation. Therefore, these methods conceptually fit nicely together, and we develop a relatively simple
and efficient energy minimization that replaces the complex
hierarchical shape matching of [WDAH10].

2.3. Example-based deformation
Early approaches for example-based deformations were proposed in the context of skeleton-controlled articulated models, first by pose-dependent corrections of vertex positions
for linear interpolation skinning [LCF00]. Later approaches
[WSLG07, WPP07] yield superior results by employing deformation gradients for skinning, example-based corrections
and rotational regression. However, these methods require a
skeleton to control the mesh.
Sumner et al. [SZGP05] were the first to propose a meshbased (in contrast to skeleton-based) inverse kinematics system. Given a rest pose and several example poses, they
extract per-face deformation gradients, which are used to
interpolate between examples. The interpolation weights are
determined automatically from the modelling constraints by
a non-linear optimization. However, the reconstruction of a
mesh from the interpolated deformation gradients, which at
the same time acts as deformation operator for incorporating the user’s constraints, was shown in [BSPG06] to be
equivalent to linear Poisson-based interpolation [XZWB05]
and deformation [YZX*04]. As a consequence, MeshIK inherits their linearization problems. It cannot handle per-face
rotations larger than 180◦ and yields unnatural deformation
results when leaving the example space.
The highly efficient data-driven deformation method of
Feng et al. [FKY08] fits a set of abstract skeleton bones
to an animation sequence, from which it learns the local
bone transformations using canonical correlation analysis.
At run-time they derive the bone transformations from the
modelling constraints and solve a Poisson system for the final
vertex positions. It is this final linear step that again yields
unnatural results when leaving the example space.
We are mostly inspired by the original MeshIK [SZGP05],
and improve it by replacing the interpolation and deformation
operators by a non-linear, rotation-invariant technique based
on the discrete shell energy. This allows us to handle arbitrary
large rotations between example poses and to fall back to
physically plausible deformations when leaving the example
space.

In the following we first explain our deformation and interpolation operators (Sections 3 and 4), before combining them
into an example-driven deformation framework (Section 5).
The numerical minimization of the employed non-linear energy using a Gauss–Newton method is described in Section 6.
For increased performance we propose a multiresolution optimization in Section 7.
3. Mesh Deformation Operator
The elastic energy for our mesh deformation operator extends
the discrete shell energy by a volume preservation term. In
the following we assume a mesh M with vertex positions
xi ∈ V, edges eij ∈ E and faces fij k ∈ F.
Analogous to discrete shells [GHDS03] we measure
stretching and bending terms E+ s and Eb as (weighted)
squared deviations of current (lower-case) edge lengths le
and dihedral angles θ e from their original (upper-case) values Le and e , respectively. To be able to extend the energy
later, we denote by l∗e and θ ∗e the desired target edge lengths
and dihedral angles, which for now are just the initial values
we want to preserve (l∗e = Le and θ ∗e = e ):
Es =

Eb =

1
2
1
2

le − le∗

2

e∈E

θe − θe∗
e∈E

2

1
,
L2e

(1)

L2e
.
Ae

(2)

Ae denotes the sum of the areas of the two triangles sharing
the edge e. Note that we omit the deviations of triangle areas
from the original discrete shell energy, because that term did
not have a significant impact in our examples.
The stretching and bending energies model twodimensional surfaces (thin shells). Hence, input meshes are
treated as hollow objects, even if they are intended to represent the boundary surface of a solid object. In that case, i.e.
for closed surfaces without boundaries, we optionally add a
global volume preservation term (similar to [HSL*06]):
Ev =

1
1
(v − v ∗ )2 2 .
2
V

(3)

Again, v, V, and v ∗ denote current, initial and target volume,
respectively (with v ∗ = V). As in [HSL*06] we compute the
global volume v as the sum of per-face tetrahedral volumes
v=

1
6f

(xi × xj ) · xk .

(4)

i,j ,k ∈F

We note that our volume preservation is just a heuristic: The
global volume preservation can compensate local volumes
changes of one part of the model in a completely different
surface region, thereby inducing strain. For a physically accurate solution local volumes (e.g. of a tetrahedral mesh)
have to be preserved instead (see e.g. [CPSS10]).

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

S. Fr¨ohlich and M. Botsch / Example-Driven Deformations Based on Discrete Shells

2249

Figure 1: Benchmark deformations from [BS08]. Translating the right border of a bumpy plane; twisting a bar by 135◦ ; bending
a cactus by 70◦ ; bending a cylinder by 120◦ . The grey surface regions are fixed, the yellow regions are handle constraints, the
blue regions are unconstrained and determined by minimizing the energy (5).
The total elastic energy is the sum of stretching, bending
and volume preservation terms, weighted by stiffness parameters λ, μ and ν, respectively:
E = λEs + μEb + νEv .

(5)

The weighting coefficients in (1), (2) and (3) are chosen to
account for irregular tessellations as well as to yield scaleinvariant energy terms. The stiffness parameters in (5) do not
have to be adjusted on a per model basis, but are typically set
to λ = 100, μ = 1 and ν = 1000 in our examples.
Mesh editing now amounts to a minimization of the energy (5), while satisfying the user’s modeling constraints
(prescribed positions for a selected set of vertices). We formulate the energy minimization as a non-linear least-squares
problem and employ a Gauss–Newton method, since this
technique requires first-order partial derivatives only and still
provides super-linear convergence (Section 6).

Figure 2: Global stiffness control. Bending a cylinder (left)
with either dominating bending stiffness (centre) or stretching stiffness (right).

Figure 1 provides a qualitative evaluation of our shellbased deformation on the benchmark models of [BS08].
Comparing our results to Figure 10 of [BS08] reveals that our
approach is qualitatively equivalent to PriMo [BPGK06], a
state-of-the-art non-linear approach. A quantitative comparison (in terms of performance) is given in Section 6.
A further advantage of our physics-based energy is the
explicit control of stretching and bending stiffness (λ and
μ), which allows to vary the surface deformation behavior
(Figure 2). Most approaches based on differential coordinates can (be extended to) locally adjust the surface stiffness, but cannot change the global deformation characteristic. Note that these stiffness parameters, although chosen
constant in (5), can also be controlled on a per-edge basis.
In Figure 3, we derive per-edge stretching and bending values from the example poses shown in Figure 9 (as described
in Appendix A). A pure deformation using these learned
stiffness values (without the MeshIK of Section 5) already
yields convincing results compared to uniform stiffness
parameters.
Figure 4 shows the effect of volume preservation on
a stretched cylinder, where the designer can choose (or

Figure 3: Local stiffness control. Deriving per-edge stiffness
from the example poses of Figure 9 leads to more natural
deformations (left) than uniform stiffness weights (right).

Figure 4: Stretching a cylinder (left) to 150% of its original
length without (top) and with volume preservation (bottom).
The volume error is 42% and 0.007%, respectively.

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

2250

S. Fr¨ohlich and M. Botsch / Example-Driven Deformations Based on Discrete Shells

continuously blend) between a hollow or an (approximately)
solid deformation behaviour.

4. Mesh Interpolation Operator
The second core component of our example-based deformation framework is the interpolation operator. Given a restpose mesh M and a set of k compatibly tessellated example
poses M1 , . . . , Mk , we want to explore the shape space
spanned by these meshes through a geometrically meaningful interpolation (and extrapolation) technique.
Following the idea of Winkler et al. [WDAH10] we interpolate meshes in terms of edge lengths and dihedral angles.
However, we derive a simpler method for computing the
mesh that best matches the interpolated edge lengths and angles, such that our interpolation operator can be combined
with the deformation technique of the previous section.
Finding the best matching mesh (in a least squares manner)
requires to minimize an energy that penalizes the squared
deviations from prescribed target edge lengths l∗e and dihedral
angles θ ∗e . Having the deformation operator of the previous
section at hand, all we need to do is to replace the rest-pose
lengths Le and angles e by the desired interpolated values.
Similarly, we can also interpolate the global volume V if the
volume preservation is activated.
Given the rest-pose M and example poses M1 , . . . , Mk ,
(i)
(i)
the edge lengths, dihedral
we denote by L(i)
e ,
e and V
angles and volume of mesh Mi , respectively. The target
values for (1), (2) and (3) are then determined by linearly
interpolating the differences of Mi ’s values to those of the
rest pose M, controlled by interpolation weights α 1 , . . . , α k :
le∗ = Le +

k

αi L(i)
e − Le ,
i=1

θe∗ =

k
e

+

αi

(i)
e

−

e

,

(6)

i=1
k

v∗ = V +

αi (V (i) − V ).
i=1

The same non-linear minimization as used in Section 3 and
described in Section 6 then computes the interpolated mesh.
Although in general a mesh with prescribed edge lengths
and dihedral angles does not exist, our least squares approximation leads to physically meaningful interpolated
shapes. In Figure 5 we show the same elephant interpolation/extrapolation sequence as used in Figure 1 of [KMP07]
and Figure 11 of [WDAH10]. Moreover, Figure 6 basically
reproduces Figure 6 of [WDAH10] and demonstrates that
large rotations and varying mesh resolution are naturally handled by our approach.

These results show our interpolation technique to be qualitatively on a par with the recent state-of-the-art approaches
[KMP07, WDAH10]. Because we use the same target
objective as Winkler et al. [WDAH10], we basically reproduce their results. However, while they compute the interpolated mesh by a hierarchical shape matching procedure,
our method requires a comparatively straightforward energy
minimization only, which is the key to combining the deformation and interpolation operators into the example-driven
deformation framework described in the next section.
5. Example-Driven Deformation Framework
After introducing the deformation and interpolation operators, we are now ready to derive our example-driven framework. Like in the case of mesh interpolation, the input is a set
of example poses M, M1 , . . . , Mk . However, instead of just
interpolating between the examples, the system should now
‘learn’ the deformation behaviour of the rest pose M from
the examples, such that a simple click-and-drag modelling
metaphor leads to natural and meaningful results.
Instead of preserving original edge lengths and dihedral
angles (as for mesh deformation), or prescribing interpolated
lengths and angles (as for mesh interpolation), we now have
to optimize for the interpolation weights α i of (6), such that
the interpolated mesh best fits the modelling constraints.
One particular strength of our approach is that this optimization of the interpolation weights, the interpolation operator and the deformation operator can all seamlessly be
integrated into one non-linear energy formulation. We simply use the interpolated target values (6) in the elastic energy
(5) (as for mesh interpolation) and furthermore extend the
set of unknowns to include both the free vertex positions
x1 , . . . , xn and the interpolation weights α 1 , . . . , α k .
Because the number k of examples typically is very small
compared to the number n of free vertices, and because the
derivatives of the target objectives w.r.t. the weights α i are
trivial to compute, incorporating examples poses does not
lead to a noticeable performance overhead compared to pure
mesh deformation or interpolation (Section 6).
If we compare the results of our example-driven deformation to that of existing example-based approaches [SZGP05,
FKY08], we can identify three important advantages. First,
our deformation and interpolation operators employ the
physics-based discrete shell energy. As a consequence, even
when leaving the space of example poses our method still
yields physically meaningful results, as shown in Figure 8.
This is in contrast to purely example-driven techniques,
which lead to undesired shears when deviating too much
from the examples (compare to Figure 15 of [FKY08] and
Figure 5 of [SZGP05]).
Secondly, because our interpolation method can deal with
large rotations between example poses, our MeshIK system

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

2251

S. Fr¨ohlich and M. Botsch / Example-Driven Deformations Based on Discrete Shells

Figure 5: Interpolation and extrapolation of the yellow example poses. The blending weights are 0, 0.35, 0.65, 1.0 and 1.25.

Figure 6: Interpolation of an adaptively meshed and strongly twisted helix with blending weights 0, 0.25, 0.5, 0.75 and 1.0.

ours

[SZGP05]

Figure 7: Given a set of input poses (left) the user can drag handle points (yellow spheres) and the example-based deformation
produces a meaningful result by finding the optimal interpolation weights for the input examples. While our rotation-invariant
method makes use of the bottom example pose in a rotated fashion, the original MeshIK approach leads to artefacts.
can do as well. The original MeshIK [SZGP05] is based
on linear deformation gradients and therefore might yield
artefacts for rotations of more than 180◦ (compare Figure 5.2
of [Sum05] to Figure 6 and our accompanying video).
Thirdly, our method is rotation-invariant, because examples are represented by (changes of) edge lengths and
dihedral angles—instead of by per-face affine world-space
transformations from the rest pose to the example poses
(deformation gradients). As an immediate consequence, our
method can use example poses in arbitrary orientations, for
example, to simplify rotation modelling of example poses
(see Figure 7 and the accompanying video). In contrast, the
original MeshIK cannot deal with rotated (i.e. mis-aligned)
poses.

Although this particular problem can potentially be fixed
by including per-example rotations in MeshIK’s optimization process, a similar problem can occur when combining
rotations of example poses (Figure 9). The
reason for the failure of the original
MeshIK is depicted on the right. In their
case, the combined deformation ‘shoulder
+ elbow’ (i.e. α 1 = α 2 = 1) first rotates the
shoulder around the global y-axis, followed
by a rotation of the forearms around the
global x-axis, leading to a forearm twist.
In contrast, our rotation-invariant framework yields the expected combined deformation, as reproduced by our IK system in
Figure 9.

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

2252

S. Fr¨ohlich and M. Botsch / Example-Driven Deformations Based on Discrete Shells

⎡

x1

⎤

⎢ ⎥
⎡
⎢ y1 ⎥
ws,1 l1 − l1∗
⎢ ⎥
⎢
⎢z ⎥
..
⎢
⎢ 1⎥
⎢
⎢ ⎥
.
⎢
⎢ . ⎥
⎢
⎢ .. ⎥
⎢ ws,m lm − lm∗
⎢ ⎥
⎢
⎢ ⎥
⎢
⎢ xn ⎥
⎢
⎢ ⎥
f : ⎢ ⎥ → ⎢ wb,1 θ1 − θ1∗
⎢
⎢ yn ⎥
⎢
⎢ ⎥
..
⎢
⎢ ⎥
⎢
⎢ zn ⎥
.
⎢
⎢ ⎥
⎢w
⎢ ⎥
θ
α
⎢ b,m m − θm∗
⎢ 1⎥
⎢ ⎥
⎣
⎢ . ⎥
⎢ . ⎥
wv (v − v ∗ )
⎣ . ⎦

Figure 8: The original MeshIK yields unwanted shears
when leaving the example space (left), whereas our technique still provides physically plausible results (right).

⎤
⎥
⎥
⎥
⎥
⎥
⎥
⎥
⎥
⎥
⎥.
⎥
⎥
⎥
⎥
⎥
⎥
⎥
⎦

(7)

αk
The target values l∗i , θ ∗i and v ∗ are again determined by interpolating the respective values of the example poses using
the weights α i as in (6). The weighting factors are chosen as

6. Numerical Minimization
We have shown how to formulate the mesh deformation
and mesh interpolation operators, as well as the complete
example-driven deformation technique as a nonlinear energy minimization. The simplicity of our energy (5) enables the analytic computation of its gradients, such that
we can employ an efficient Gauss–Newton minimization
[MNT04].

6.1. Gauss–Newton minimization
We start by formulating the energy minimization as a nonlinear least-squares problem. For a system with n unconstrained vertices x1 , . . . , xn , m unconstrained edges, and
k example poses, we set up a residual function f that
maps the vector x = (x1 , y1 , z1 , . . . , xn , yn , zn , α1 , . . . , αk )T
of unknown vertex positions and interpolation weights to
the residuals of edge lengths, dihedral angles and global
volume:

ws,e =

λ

1
,
L2e

wb,e =

μ

L2e
,
Ae

wv =

ν

1
, (8)
V2

such that the energy (5) becomes E(x) = 12 f(x)T f(x).
In each Gauss–Newton iteration we compute new vertex
positions and interpolation weights by solving a linear least
squares system for an update direction δ, which is then scaled
by a step-size h and used to update x:
J(x)T J(x)δ = −J(x)T f(x),

(9)

x ← x + hδ.

(10)

In the above equation J denotes the (2m + 1) × (3n +
k) Jacobian matrix of f. It is built from first-order partial
derivatives of the components of f with respect to the vertex positions xi or interpolation weights α i . For all derivatives simple analytical expressions exist, which are given in
Appendix B.

ours

[SZGP05]

Figure 9: Using three input poses (left) we fix the legs and drag the handle on the right wrist. Our MeshIK system successfully combines both example deformations, whereas the world-space deformation gradients of the original MeshIK lead to
artefacts.
c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

S. Fr¨ohlich and M. Botsch / Example-Driven Deformations Based on Discrete Shells

The step-size h is determined by simple bisection search.
Starting with h = 1 we successively halve h until the scaled
step decreases the energy, that is E(x + hδ) < E(x). We stop
the iteration if even a minimum step-size of hmin = 10−10 does
not lead to a further decrease of the energy.
Note that this minimization procedure can be used for pure
mesh deformation (no examples, no interpolation weights),
pure mesh interpolation (k examples, interpolation weights
known), as well as the full example-based framework (k examples, interpolation weights unknown).

6.2. Volume preservation
A closer look at the linear system (9) reveals a challenging
problem caused by the volume preservation. In each row the
Jacobian J contains the partial derivatives of the corresponding residual with respect to the components of x. For an edge
length constraint this leads to 2 × 3 = 6 non-zeros per row,
for a dihedral angle with four involved vertices we get 12
non-zeros. The volume v, however, depends on all vertex positions, such that the bottom row of J is completely filled. As
a consequence, the system matrix JT J is dense, such that efficient sparse solvers cannot be applied. In [HSL*06], volume
constraints were treated as hard constraints using Lagrange
multipliers. Our soft volume constraint with a controllable
stiffness parameter requires a different approach.
We propose to exploit the Sherman–Morrison formula
[GL89] to efficiently solve the system (9). To this end, we
denote by u the (dense) bottom row of J, which yields
J=

J˜
uT

⇒ J J = J˜ T J˜ + uuT =: A + uuT .
T

Hence, the system matrix JT J can be written as a rank-one
˜ The Sherman–Morrison formula states
update of A = J˜ T J.
how to update a matrix inverse after such an update:
A + uuT

−1

= A−1 −

A−1 uuT A−1
.
1 + uT A−1 u

2253

constraints, J˜ has full rank and A is symmetric positive definite. We can therefore use a sparse Cholesky solver [DH05]
for steps (i) and (ii). Because the rather expensive matrix
factorization of (i) can be re-used in step (ii), our three-step
procedure comes at a negligible additional cost compared to
an optimization without volume constraints.
Note that this technique cannot only be used for the efficient computation of volume constraints. It can also be
employed for other constraints that depend on a large number of mesh vertices, such as, for instance, constraining the
area of a large surface patch in the framework of [EP09]. We
remark that there are several ways to compute a factorization of a matrix with dense rows through matrix updates. For
instance, a general method based on updating a QR factorization is presented in [Sun95]. Our proposed solution has the
advantage that it is straightforward to implement with any
of the commonly employed sparse Cholesky solvers, such as
for instance CHOLMOD [DH05].

6.3. Performance and robustness
Compared to linear deformation methods, non-linear approaches are computationally more expensive, might get
stuck in local minima and are in general numerically more
sensitive to ‘bad’ input data. Extremely short edges, large
dihedral angles (fold-overs) or other kinds of degenerate triangles can cause the minimization to stall or even to fail.
However, in this respect our method is not more or less sensitive than most other nonlinear deformation techniques.
For instance, the synthetic examples shown in Section 3
converged in just a few iterations, starting from the initial
pose. For a more demanding test we compare to the dragon
example of PriMo [BPGK06]. As shown in Figure 10, even
for this complex model (50k vertices) and a bad starting
configuration our minimization converges in just nine iterations, which took 52s in total on a MacBookPro 2.53 GHz
Intel Core 2 Duo. In comparison, PriMo requires 6 iterations
and 45s on the same machine (on the original mesh resolution, i.e. without hierarchical optimization). Because our

The solution of (A + uuT )δ = b with b = −JT f becomes
δ = A−1 b −

A−1 uuT A−1 b
.
1 + uT A−1 u

We can therefore compute the solution of (9) by an efficient
three step procedure:
(i)
(ii)
(iii)

Compute y by solving Ay = b.
Compute z by solving Az = u.
Compute δ = y − z(uT y)/(1 + uT z).

Note that A = J˜ T J˜ is sparse, since J˜ does not contain the
volume constraint. Furthermore, because J˜ includes 2m ≈ 6n

Figure 10: Even from this bad initial configuration our nonlinear deformation method converges in nine iterations.

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

2254

S. Fr¨ohlich and M. Botsch / Example-Driven Deformations Based on Discrete Shells

interpolation and MeshIK techniques are basically equivalent
in terms of computations, their robustness and performance
are comparable to those of the mesh deformation.
Input meshes that contain local fold-overs in joint regions
are problematic for our method, such as, for example the
Lion and Goblin poses of Figures 7 and 9, which have been
produced by low quality skinning methods. The ‘hinge-like’
fold-overs constitute local minima where the optimization
might get stuck. However, these configurations are easy to
detect and surprisingly easy to handle. As soon as the dihedral
angle of an edge e changes by more than 180◦ between the
rest pose M and some example pose Mi , we deactivate that
edge by setting its bending stiffness μe to zero. This simple
heuristic solved the fold-over problem for all our examples.

7. Multiresolution Optimization
The above results demonstrate our non-linear optimization
to work reliably, but its performance is clearly too slow for
interactive applications. Because this is a standard problem
for non-linear editing or interpolation approaches, several
techniques have been proposed to increase performance (and
further improve robustness): performing the optimization on
a reduced model [DSP06, FKY08] or in a suitable subspace [HSL*06], or computing it in a hierarchical manner
[BPGK06, SZT*07, KMP07, WDAH10].
The cage-based subspace technique [HSL*06], while being an elegant formulation, is not directly applicable to our
setting, because building compatible cages for all example
poses is a challenging problem by itself. We instead follow the approach of Kilian et al. [KMP07] and concurrently
decimate all input meshes to a complexity of about 1000
vertices, where we use the sum of per-mesh quadric error
metrics [GH97] to prioritize halfedge collapses.
The non-linear optimization is then performed on the reduced meshes exactly as described in the previous sections.
One Gauss–Newton iteration on the coarse mesh takes about
30 ms only, which allows for real-time mesh editing (because
we initialize the Gauss–Newton optimization with the previous frame’s result it typically converges in less than five
iterations). However, an obvious limitation is that modelling
constraints can only be placed on coarse mesh vertices.
To transfer the coarse solution to the original, highresolution mesh, we adapt the multiresolution modelling
approach proposed in [BSPG06]. The main idea is to interpret the coarse mesh’s vertices as modelling constraints
(anchors) on the high-resolution mesh. After decimating the
input meshes, we pre-compute a high-resolution but lowfrequency base surface B by minimizing the thin-plate energy of the original mesh M with the anchors as constraints.
This amounts to solving a bi-Laplacian linear system. After
deforming the coarse mesh C into C , we compute the deformed base surface B by updating the anchor positions and

Figure 11: The different meshes involved in our multiresolution optimization: original resolution (top), smooth base
surface (middle), coarse simulation mesh (bottom), all in
initial (left) and deformed configuration (right).
again minimizing the thin-plate energy. The resulting base
surface deformation B → B is finally applied to the original
mesh M by deformation transfer [SP04], resulting in the deformed high-resolution and detailed mesh M . This process
is depicted in Figure 11.
It is important to note that this multiresolution reconstruction is also rotation-invariant. If a rotation R is applied to
the coarse mesh, i.e. C = R(C), then the mesh fairing with
rotated anchors will reproduce this rotation, B = R(B), as
will the deformation transfer, such that M = R(M).
In our interactive modeling system, the nonlinear deformation can be performed in real-time on the coarse mesh C,
and as soon as the mouse is released, the multiresolution reconstruction computes the deformed mesh M . Table 1 gives
performance statistics and compares the non-linear optimization on the fine mesh (Section 6) to the proposed multiresolution optimization.
An important question is how much the results of the
multiresolution optimization deviate from the results of the
full high-resolution optimization. We analysed this difference
for interpolation sequences of the Elephant model (Figure 5)
and the Dragon model (Figure 10). Table 2 shows that the
Hausdorff distance between the two optimizations is always

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

2255

S. Fr¨ohlich and M. Botsch / Example-Driven Deformations Based on Discrete Shells
Table 1: Performance statistics, with times given in milliseconds,
measured on a MacPro 2.66GHz Intel Xeon. From left to right:
number of vertices; time for one Gauss–Newton iteration on the
original resolution, for multiresolution pre-processing (computing C
and B) and for reconstructing B and M from C .
Model
Helix
Lion
Elephant
Dragon
Armadillo

|V|

G.-N.

612
5k
40k
50k
166k

18
250
3100
3700

B&C

B &M

377
4110
5300
21000

23
271
323
1278

mesh deformations, our system also features nonlinear mesh
interpolation and deformation transfer in a rotation-invariant
manner.
Investigating subspace optimizations will be an interesting
direction for future work, since this would lead to an even better preservation of target values, and hence to physically more
accurate results. In terms of performance a parallelization or
GPU-implementation of the multiresolution reconstruction
would allow to interact with the high-resolution model, while
still computing on the coarse simulation mesh.

Appendix A: Deriving Stiffness Values from Examples
Note: On the coarse mesh, one Gauss–Newton step takes about
30 ms. On the original Armadillo model, the Gauss–Newton step
failed due to memory restrictions.

Similar to [PJS06], we derive per-edge stretching stiffness λe
and bending stiffness μe by linearly mapping the stretching
and bending between the k example poses to stiffness values:

Table 2: Hausdorff distance (in percent of the bounding box diagonal) between the result of the multiresolution optimization and the
full high-resolution optimization.

λ˜ e = max L(i)
e − Le ,

Blending weight

μ˜ e = max

0.25
0.35
0.50
0.65
0.75

Elephant

Dragon

0.23%
0.29%
0.34%
0.39%
0.40%

0.49%
0.77%
0.69%

below 1% of the bounding box diagonal, which proves our
multiresolution optimization to be a good approximation. If
needed, the more accurate high-resolution result can easily
be obtained in two to three Gauss–Newton iterations starting
from the fine mesh M .
In addition to the figures shown in the paper, the accompanying video also demonstrates the proposed example-based
deformation system for a few modeling sessions.

λe = 1 −

i=1,...,k

i=1,...,k

(i)
e

−

e

,

λ˜ e
,
maxe λ˜ e + ε

μe = 1 −

μ˜ e
.
maxe μ˜ e + ε

Appendix B: Partial Derivatives for Constructing J
Here we give the partial derivatives of the individual components of the residual function f
from (7) required to build the Jacobian J. The local mesh configuration is shown to the right.

x4

n2

x2
n1

e
x1

x3

We define the following vectors
e = x2 − x1 ,
n1 = (x3 − x2 ) × (x3 − x1 ),
n2 = (x4 − x1 ) × (x4 − x2 ).
The derivative of the length constraint for edge (x1 , x2 ) is
simply the normalized edge direction

8. Conclusion
We presented a framework for combined physics-based and
example-driven mesh deformations. Thanks to our fully nonlinear formulation, we can perform large-scale shape manipulations in a high-quality, rotation-invariant manner.
The interpolation and deformation operators by themselves deliver comparable results to established methods in
terms of both quality and speed. Compared to purely geometric or purely physics-based approaches, incorporating example poses into the deformation process leads to more natural
results for models with non-trivial deformation behaviour.
In contrast to purely example-driven approaches, our system provides physically meaningful deformations even when
leaving the space spanned by the input poses. In addition to

−e
∂
.
w( e − l ∗ ) = w
∂x1
e
The partial derivatives for constraining the dihedral angle
θ = ∠(n1 , n2 ) are surprisingly simple (see [BMF03]):
∂
(x3 − x2 )T e
(x4 − x2 )T e
w(θ − θ ∗ ) = w
n
+
n2 ,
1
∂x1
e n1 2
e n2 2
∂
e
w(θ − θ ∗ ) = w
n1 .
∂x3
n1 2
The derivative of the volume constraint with respect to a
vertex position xk is computed by summing over xk ’s incident

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

2256

S. Fr¨ohlich and M. Botsch / Example-Driven Deformations Based on Discrete Shells

faces fij k ∈ N (xk ) [see (4)]:
∂
w(v − v ∗ ) = w
∂xk
f

(xi × xj ).
ij k ∈N (xk )

Finally, the derivative of a constraint (e.g. edge length)
with respect to an interpolation weight is [see (6)]
∂
w(l − l ∗ ) = −w(L(i) − L).
∂αi
Acknowledgements
The authors are grateful to Martin Kilian for the elephant
model of Figure 5, to Tim Winkler for the helix of Figure 6, and to Bob Sumner for the lion model of Figure 7
and an executable of the original MeshIK [SZGP05]. The
Armadillo and Dragon models are courtesy of the Stanford
3D Scanning Repository. The authors thank Peter Schr¨oder
and Eitan Grinspun for helpful discussions about discrete
shells, and Migual Otaduy for pointing us to the ShermanMorrison update. Both authors are supported by the Deutsche
Forschungsgemeinschaft (Center of Excellence in ‘Cognitive
Interaction Technology’, CITEC).
References
[ACOL00] ALEXA M., COHEN-OR D., LEVIN D.: Asrigid-as-possible shape interpolation. In Proceedings of
ACM SIGGRAPH (New York, NY, USA, 2000), ACM
Press/Addison-Wesley, pp. 157–164.
[AFTCO07] AU O. K.-C., FU H., TAI C.-L., COHEN-OR
D.: Handle-aware isolines for scalable shape editing.
ACM Transactions on Graphics, 26, 3 (2007), doi:
10.1145/1275808.1276481.
[BK04] BOTSCH M., KOBBELT L.: An intuitive framework
for real-time freeform modeling. ACM Transactions on
Graphics, 23, 3 (2004), 630–634.
[BMF03] BRIDSON R., MARINO S., FEDKIW R.: Simulation of
clothing with folds and wrinkles. In Proceedings of ACM
SIGGRAPH/Eurographics symposium on Computer animation (New York, NY, USA, 2003), Eurographics Association, pp. 28–36.
[BMWG07] BERGOU M., MATHUR S., WARDETZKY M.,
GRINSPUN E.: TRACKS: toward directable thin shells.
ACM Transactions on Graphics, 26, 3 (2007), doi:
10.1145/1275808.1276439.
[BPGK06] BOTSCH M., PAULY M., GROSS M., KOBBELT L.:
PriMo: Coupled prisms for intuitive surface modeling.
In Proceedings of Eurographics Symposium on Geometry
Processing (Aire-la-Ville, Switzerland, 2006), Eurographics Association, pp. 11–20.

[BS08] BOTSCH M., SORKINE O.: On linear variational surface
deformation methods. IEEE Transactions on Visualization
and Computer Graphics, 14, 1 (2008), 213–230.
[BSPG06] BOTSCH M., SUMNER R., PAULY M., GROSS M.:
Deformation transfer for detail-preserving surface editing. In Proceedings of Vision, Modeling, and Visualization
(Amsterdam, Netherlands, 2006), Akademische Verlagsgesellschaft, pp. 357–364.
[BVGP09] BARAN I., VLASIC D., GRINSPUN E., POPOVIC´ J.:
Semantic deformation transfer. ACM Transactions on
Graphics, 28, 3 (2009), 36:1–36:6.
[CPSS10] CHAO I., PINKALL U., SANAN P., SCHRO¨ DER P.: A
simple geometric model for elastic deformations. ACM
Transactions on Graphics, 29, 4 (2010), 38:1–38:6.
[DH05] DAVIS T. A., HAGER W.: CHOLMOD: supernodal sparse cholesky factorization and update/downdate.
http://www.cise.ufl.edu/research/sparse/cholmod, 2005.
[DSP06] DER K. G., SUMNER R. W., POPOVIC´ J.: Inverse kinematics for reduced deformable models. ACM Transactions
on Graphics, 25, 3 (2006), 1174–1179.
[EP09] EIGENSATZ M., PAULY M.: Positional, metric, and curvature control for constraint-based surface deformation.
Computer Graphics Forum, 28, 2 (2009), 551–558.
[FKY08] FENG W.-W., KIM B.-U., YU Y.: Real-time datadriven deformation using kernel canonical correlation
analysis. ACM Transactions on Graphics, 27, 3 (2008),
91:1–91:9.
[GH97] GARLAND M., HECKBERT P.: Surface simplification using quadric error metrics. In Proceedings of
ACM SIGGRAPH (New York, NY, USA, 1997), ACM
Press/Addison-Wesley, pp. 209–216.
[GHDS03] GRINSPUN E., HIRANI A. N., DESBRUN M.,
SCHRO¨ DER P.: Discrete shells. In Proceedings of ACM SIGGRAPH/Eurographics Symposium on Computer Animation (Aire-la-Ville, Switzerland, 2003), Eurographics Association, pp. 62–67.
[GL89] GOLUB G. H., LOAN C. F. V.: Matrix Computations.
Johns Hopkins University Press, Baltimore, 1989.
[HSL*06] HUANG J., SHI X., LIU X., ZHOU K., WEI L.-Y.,
TENG S., BAO H., GUO B., SHUM H.-Y.: Subspace gradient
domain mesh deformation. ACM Transactions on Graphics, 25, 3 (2006), 1126–1134.
[HZS*06] HUANG J., ZHANG H., SHI X., LIU X., BAO H.: Interactive mesh deformation with pseudo material effects.
Computer Animation and Virtual Worlds, 17, 3–4 (2006),
383–392.

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

S. Fr¨ohlich and M. Botsch / Example-Driven Deformations Based on Discrete Shells

[KCVS98] KOBBELT L., CAMPAGNA S., VORSATZ J., SEIDEL
H.-P.: Interactive multi-resolution modeling on arbitrary
meshes. In Proceedings of ACM SIGGRAPH (1998),
ACM Press, New York, NY, pp. 105–114.
[KG08] KIRCHER S., GARLAND M.: Free-form motion processing. ACM Transactions on Graphics, 27, 2 (2008),
12:1–12:13.
[KMP07] KILIAN M., MITRA N. J., POTTMANN H.: Geometric
modeling in shape space. ACM Transactions on Graphics,
26, 3 (2007), doi: 10.1145/1275808.1276457.
[LCF00] LEWIS J. P., CORDNER M., FONG N.: Pose space
deformation: a unified approach to shape interpolation and skeleton-driven deformation. In Proceedings of
ACM SIGGRAPH (New York, NY, USA, 2000), ACM
Press/Addison-Wesley, pp. 165–172.
[LSLC05] LIPMAN Y., SORKINE O., LEVIN D., COHEN-OR D.:
Linear rotation-invariant coordinates for meshes. ACM
Transactions on Graphics, 24, 3 (2005), 479–487.
[MNT04] MADSEN K., NIELSON H. B., TINGLEFF O.: Methods
for Non-Linear Least Squares Problems (2nd ed.). Tech.
rep., Informatics and Mathematical Modelling, Technical
University of Denmark, DTU, 2004.
[PJS06] POPA T., JULIUS D., SHEFFER A.: Material-aware mesh
deformations. In Proceedings of IEEE International Conference on Shape Modeling and Applications (2006), IEEE
Computer Society, pp. 141–152.
[SA07] SORKINE O., ALEXA M.: As-rigid-as-possible surface
modeling. In Proceedings of Eurographics Symposium on
Geometry Processing (Aire-la-Ville, Switzerland, 2007),
Eurographics Association, pp. 109–116.
[SK04] SHEFFER A., KRAEVOY V.: Pyramid coordinates for
morphing and deformation. In Proceedings of Symposium
on 3D Data Processing, Visualization and Transmission
(2004), IEEE Computer Society, pp. 68–75.
[Sor06] SORKINE O.: Differential representations for mesh
processing. Computer Graphics Forum, 25, 4 (2006),
789–807.
[SP04] SUMNER R. W., POPOVIC´ J.: Deformation transfer for
triangle meshes. ACM Transactions on Graphics, 23, 3
(2004), 399–405.

2257

[Sum05] SUMNER R. W.: Mesh Modification Using Deformation Gradients. PhD thesis, Massachusetts Institute of
Technology, 2005.
[Sun95] SUN C.: Dealing with Dense Rows in the Solution
of Sparse Linear Least Squares Problems. Tech. Rep.,
Cornell University, 1995.
[SZGP05] SUMNER R. W., ZWICKER M., GOTSMAN C., Popovi´c
J.: Mesh-based inverse kinematics. ACM Transactions on
Graphics, 24, 3 (2005), 488–495.
[SZT*07] SHI X., ZHOU K., TONG Y., DESBRUN M.,
BAO H., GUO B.: Mesh puppetry: cascading optimization of mesh deformation with inverse kinematics.
ACM Transactions on Graphics, 26, 3 (2007), doi:
10.1145/1275808.1276479.
[TPBF87] TERZOPOULOS D., PLATT J., BARR A., FLEISCHER
K.: Elastically deformable models. In Proceedings of
ACM SIGGRAPH (1987), ACM Press, New York, NY,
pp. 205–214.
[WDAH10] WINKLER T., DRIESEBERG J., ALEXA M., HORMANN
K.: Multi-scale geometry interpolation. Computer Graphics Forum, 29, 2 (2010), 309–318.
[WPP07] WANG R. Y., PULLI K., POPOVIC´ J.: Real-time enveloping with rotational regression. ACM Transactions on
Graphics, 26, 3 (2007), doi: 10.1145/1275808.1276468.
[WSLG07] WEBER O., SORKINE O., LIPMAN Y., GOTSMAN
C.: Context-aware skeletal shape deformation.
Computer Graphics Forum, 26, 3 (2007), 265–
273.
[XZWB05] XU D., ZHANG H., WANG Q., BAO H.: Poisson
shape interpolation. In Proceedings of ACM Symposium
on Solid and Physical Modeling (2005), ACM Press, New
York, NY, pp. 267–274.
[YZX*04] YU Y., ZHOU K., XU D., SHI X., BAO H., GUO B.,
SHUM H.-Y.: Mesh editing with Poisson-based gradient
field manipulation. ACM Transactions on Graphics, 23, 3
(2004), 644–651.
[ZRKS05] ZAYER R., R¨OSSL C., KARNI Z., SEIDEL
H.-P.: Harmonic guidance for surface deformation.
Computer Graphics Forum, 24, 3 (2005), 601–
609.

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

