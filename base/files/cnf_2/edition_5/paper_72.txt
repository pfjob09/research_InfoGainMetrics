DOI: 10.1111/j.1467-8659.2011.01916.x
Eurographics / IEEE Symposium on Visualization 2011 (EuroVis 2011)
H. Hauser, H. Pfister, and J. J. van Wijk
(Guest Editors)

Volume 30 (2011), Number 3

Interactive Exploration of Protein Cavities
M. Krone1 , M. Falk1 , S. Rehm2 , J. Pleiss2 , and T. Ertl1
1 Visualization
2 Institute

Research Center (VISUS), University of Stuttgart, Germany
for Technical Biochemistry (ITB), University of Stuttgart, Germany

Abstract
We present a novel application for the interactive exploration of cavities within proteins in dynamic data sets.
Inside a protein, cavities can often be found close to the active center. Therefore, when analyzing a molecular
dynamics simulation trajectory it is of great interest to find these cavities and determine if such a cavity opens
up to the environment, making the binding site accessible to the surrounding substrate. Our user-driven approach
enables expert users to select a certain cavity and track its evolution over time. The user is supported by different
visualizations of the extracted cavity to facilitate the analysis. The boundary of the protein and its cavities is
obtained by means of volume ray casting, where the volume is computed in real-time for each frame, therefore
allowing the examination of time-dependent data sets. A fast, partial segmentation of the volume is applied to
obtain the selected cavity and trace it over time. Domain experts found our method useful when they applied it
exemplarily on two trajectories of lipases from Rhizomucor miehei and Candida antarctica. In both data sets
cavities near the active center were easily identified and tracked over time until they reached the surface and
formed an open substrate channel.
Categories and Subject Descriptors (according to ACM CCS): J.3 [Computer Applications]: Life and Medical
Sciences—Biology and Genetics I.3.5 [Computer Graphics]: Computational Geometry and Object Modeling—
Boundary Representations I.4.6 [Image Processing and Computer Vision]: Segmentation—Region Growing

1. Introduction
With increasing computational power biologists are able to
simulate biological systems of increasing complexity at an
atomistic detail level, such as proteins in mixtures of different organic solvents or in combination with lipid layers.
Organic solvents and lipids may act as a substrate for the
simulated protein and hence influence its structure. Molecular dynamics simulations of large protein systems typically
take several days or weeks on a modern computer cluster. The simulations are typically executed on femtosecond
timescale resulting in an overall simulation time of ten to
hundred nanoseconds and produce a large, dynamic data set,
the so-called trajectory, which may contain several hundreds
of thousands of selected snapshots.
Many proteins, like α/β-hydrolases, open a channel toward their active site (the so-called “active state”) in presence of substrate. Locating the substrate entrance in a complete trajectory is a challenging, yet important topic. A
promising strategy to find the channel is to choose cavities inside the protein next to the active site and track them
through the trajectory until one or more cavities reach the
c 2011 The Author(s)
Journal compilation c 2011 The Eurographics Association and Blackwell Publishing Ltd.
Published by Blackwell Publishing, 9600 Garsington Road, Oxford OX4 2DQ, UK and
350 Main Street, Malden, MA 02148, USA.

surface. Until now, the available tools to find such tunnels, like CAVER [POB∗ 06], PocketPicker [WPS07], or
MOLE [PKKO07], only work for individual, static snapshots and not in real-time. This is not sufficient for exploring time-dependent structural changes like the activation of
a protein by the surrounding substrate.
We therefore propose a novel, user-steered interactive approach for the visual analysis of cavities in proteins. Our application allows the user to select a cavity by simply clicking
on it. The cavity is then extracted, visualized, and interactively tracked over time while the trajectory is replayed. As
soon as the cavity opens up to the environment and, hence,
the active site becomes accessible to the substrate, the user
is notified. Then the user can interact by either choosing another cavity or continuing the tracking of the currently selected cavity. If the cavity closes again, the user will again receive a visual signal. A graph showing the size of the cavity
further emphasizes the cavity state throughout the trajectory.
The graph view also enables off-line usage of the method.
After selecting a cavity, the user does not have to follow the
whole trajectory, but uses the graph to rapidly identify inter-

674

M. Krone, M. Falk, S. Rehm, J. Pleiss & T. Ertl / Interactive Exploration of Protein Cavities

➀

➁

➂
Figure 2: Solvent Excluded Surface of a small protein (isomerase FKBP12, blue) with a ligand (red). The ligand is
docked to the protein, i.e. it is not intersecting the protein
surface but rather fits like a key to the lock.
➃

Figure 1: A screenshot of our application. The components
are: ➀ 3D visualization; ➁ clipping plane view; ➂ graph
showing the cavity size over time; ➃ text console.

esting regions which can then be investigated more closely.
Figure 1 shows a screenshot of our application. To support
arbitrary large data sets, all computations are executed at interactive speed and out-of-core.
As mentioned above, the extraction of cavities in proteins
on an atomistic level is not yet possible at interactive speed
with currently available tools. The first step to this is to extract the boundary of the molecule with respect to the surrounding substrate, i.e. the molecular surface. The Solvent
Excluded Surface (SES), which is apt for this task, was defined by Richards [Ric77] and a computation scheme was
later given by Connolly [Con83]. However, the computation of this surface is computationally challenging and too
time-consuming for our task. We propose the use of a threedimensional density map which is generated from the pointbased input data (i.e. atom positions and radii). The boundary is extracted as an isosurface and closely resembles the
analytical SES. It can be visualized in high quality by means
of volume ray casting. This includes rendering the isosurfaces semi-transparently with correct depth ordering to illustrate the spacial complexity of the molecule. By partially
segmenting the volume, cavities are extracted and tracked.
The graphics processing unit (GPU) is used for volume generation and rendering, which allows updating the volume for
dynamic data at interactive frame rates.
The major contributions of our application can be summarized as follows: We present a method for the interactive
extraction and tracking of cavities within time-varying protein data. This allows searching for points in time, where the
cavity opens up to the environment, potentially forming a
substrate channel. A substrate channel can make the active

site of a protein accessible, which is essential for certain reactions. The application is designed to assist the user through
means of visual analysis. The presented application uses the
GPU for rapid volume generation and isosurface rendering
to visualize a smooth molecular surface in high quality and
rendering speed.
The paper is structured as follows. Section 2 covers related work. A description of the application and its intended
use are given in Section 3. Section 4 details the volume generation and rendering. The employed partial segmentation
used to extract and track a cavity over time is explained in
Section 5. The results and a discussion of the application
along with an informal evaluation by domain experts are
given in Section 6. Finally, Section 7 summarizes the paper
and gives directions for further improvements.
2. Related Work
There is a variety of available tools for the detection
of cavities in proteins, which use different technical approaches. CAVER [POB∗ 06] and MOLE [PKKO07] are
based on 3D Voronoi diagrams. PocketPicker [WPS07] and
LIGSITE [HS06] are grid-based. The recently published
McVol [TU10] introduces a Monte Carlo algorithm. But
these tools are not designed for the interactive use with dynamic data. They need by far too much time computing results and they provide no correlation between results of two
consecutive frames of a trajectory. This clearly contradicts
the idea of our application and makes these tools not applicable in our case.
The method used in our application is based on the boundary of the analyzed protein. The boundary between a protein
and the substrate can be modeled by the Solvent Excluded
Surface, which is defined by the surface of a spherical probe
while rolling over the atoms of the protein [Ric77]. Figure 2
shows the SES of a protein. The analytic equations to compute this surface were given by Connolly [Con83]. Since
the computation of this surface is quite extensive and time
c 2011 The Author(s)
Journal compilation c 2011 The Eurographics Association and Blackwell Publishing Ltd.

675

M. Krone, M. Falk, S. Rehm, J. Pleiss & T. Ertl / Interactive Exploration of Protein Cavities

consuming, several acceleration techniques based on Connollys work were presented [VBW94, SOS95, TA95]. Most
recently, GPU ray casting and efficient parallelization was
used to render the SES [KBE09, KDE10, LBPH10]. However, we decided against using the classical SES for our application, since the SES is only C0 continuous. It has sharp
crevices, ridges, and creases that can become a major visual
distraction when rendering the surface semi-transparently.
This is due to the multitude of small overlapping parts. Yet,
a clear and easy to perceive transparent depiction of the surface is a critical part of our application to facilitate the visual
analysis. Cipriano and Gleicher [CG07] presented a meshbased simplification of the SES. This approach maintains
important features of the surface while smoothing homogeneous regions. However, their technique is far too slow for
interactive usage and is therefore also not applicable in our
case. Another smooth representation can be obtained by rendering isosurfaces of Metaballs [Bli82]. Interactive rendering of dynamic data sets using fast GPU ray casting was presented recently [MGE07,KSN08]. However, this approach is
not feasible for extracting the cavities. Thus, we rejected it
in favor of a method, which allows both the rendering of the
surface and the extraction of the cavities.
Instead of evaluating metaballs directly, an intermediate
density volume can be computed and used for further computations. In the context of Smoothed Particle Hydrodynamics [GM77], densities computed from particle data are voxelized and stored in a uniform grid [MCG03]. This density
volume is then rendered either with point splatting or by
extracting isosurfaces with Marching Cubes (MC) [LC87].
Kolb and Cuntz [KC05] employ the GPU for the volume
generation and point sprites for rendering. A similar approach was used by Falk et al. [FKRE10] where the concentration of cellular signaling proteins is voxelized. Voxelized
representations of the input data and subsequently extracted
isosurfaces were also successfully applied on molecular surfaces. Giard et al. [GM10] and Dias et al. [DBG10] use the
MC algorithm to extract the surface. But their implementations do not exhibit sufficient speed for a complete reconstruction for each frame, which is crucial for the interactive
visualization of dynamic data. Furthermore, MC introduces
visual artifacts due to the tessellation of coarser volumes.
Volume ray casting (e.g. [Lev88]) can be used to render both a smooth isosurface and the volumetric data. In
this paper, the ray casting pipeline presented by Hadwiger
et al. [HLSR08] was employed. Additionally, we use the intermediate density volume for cavity detection and extraction. Can et al. [CCW06] use Level Sets [OS88] to extract
a molecular surface from the volume. The Level Set is also
used to detect cavities in the protein. Phillips et al. [PGD∗ 10]
are using direct volume rendering and perform an exhaustive
3D flood fill segmentation to extract all cavities of the protein. While following a similar idea as in our application,
the latter two approaches are not designed to be used with
dynamic data sets. They can neither cope in term of comc 2011 The Author(s)
Journal compilation c 2011 The Eurographics Association and Blackwell Publishing Ltd.

(a)

(b)

Figure 3: Volume isosurface of a hydrolase combined with a
Cartoon (a) and a Ball-and-Stick (b) model.

putation speed, nor do they provide a scheme to track cavities over time. In our approach, the detection of a cavity
is based on volume segmentation. Since we need to extract
spatial information about segments with equal density values, a region-based segmentation method is to be used rather
than a voxel-based method. While a voxel-based approach
only categorizes all voxels by thresholding, a region-based
approach collects groups of adjacent voxels, which match
a certain criteria. A good overview of common 3D volume
segmentation techniques is given in [Lak00].
3. Interactive Exploration of Protein Cavities
In this section, we go into detail about our application, its
features, and the intended use. Technical details of the components are given subsequently in Section 4 and 5.
The application is based on three views: A 3D visualization view which shows the protein, a clipping plane view,
and a graph which is used to plot the size of the selected
cavity (cf. Figure 1). The windows of all views can be freely
arranged and resized within the main window by the user.
The 3D view displays the isosurface of the protein. The isosurface is drawn semi-transparent. Thus, not only the outer
surface, but also the interior structures are visible to the user.
The isosurface rendering can be combined with a molecular model to provide further context for the user. Typically,
the Cartoon model, which gives a simplified representation
of the protein’s secondary structure, or the Ball-and-Stick
model, which shows the exact position of each atom (including the side chains of the amino acids), are used by application domain experts here (cf. Figure 3). The user can replay
the trajectory or jump to a certain frame while searching for
a cavity of interest. While an expert user will know where
the active site of the protein is located and will specifically
look for cavities there, this view can also be used to explore
all cavities inside the protein by non-experts (e.g. for educational use).
To select a cavity, the user applies a clipping plane to
the molecule and moves it until it cuts the cavity. The cut
through the volume defined by this plane is also shown on

676

M. Krone, M. Falk, S. Rehm, J. Pleiss & T. Ertl / Interactive Exploration of Protein Cavities

Figure 6: An example graph plotted for the first 50 frames of
a trajectory. The interesting points in time, where a notable
change of the cavity’s volume occurs, are labeled.
Figure 4: Clipping plane view used for cavity selection. The
two cavities (circled red) are clearly discernible.

the clipping plane view in 2D, where the user can easily select the cavity by simply clicking on the hole in the plane.
Figure 4 shows the clipping plane view. The color of the volume is highly modulated in the clipping plane view to make
the cavities clearly distinguishable. The use of a dedicated
window for the clipping plane view turned out to be very
user-friendly in our tests since it offers a clear representation
of the current cut through the volume (cf. Figure 7).
After the selection by the user, the cavity is extracted
via a 3D flood fill segmentation and visually highlighted
to be clearly distinguishable (cf. Figure 5). The flood fill is
only executed for the selected cavity, which results in a partial segmentation of the volume. When the user has found
the cavity of interest, the replay of the trajectory can be
started. The volume is updated for each frame using the potentially changed atom positions and shows the conformational changes of the protein. The cavity is extracted from

Figure 5: Illustration of a segmentation result (circled yellow). The selected cavity inside the isomerase is visualized
by yellow spheres for each voxel.

the updated volume and, consequently, the evolution of the
cavity is registered and presented to the user. Please note
that it is important to correlate between two time steps, since
parts of a cavity can split off and become irrelevant. The
segmented volume of the current time step—i.e. the number of allocated voxels—is always compared to the previous result. If the difference between two frames is greater
than a certain user-defined threshold, the user is notified by
a change of color of the segmented area, as can be seen in
Figure 12 or when comparing Figure 5 and Figure 7. In addition, the user can choose that the replay of the trajectory
is stopped when such a notable change of the cavity occurs.
Please note that the volume of the cavity is not exactly measured by our approach, as it is when using MSMS [SOS95]
or LSMS [CCW06], but our method provides a qualitative
measurement of the change of the cavity’s volume throughout the trajectory. There are three common scenarios for a
sudden, notable change of the cavity’s volume: a large part
of the cavity is split off; the cavity merges with another cavity; or the cavity opens up to the environment. While the user
will ignore splits or merges in most cases, since they do not
change the accessibility of the cavity from the substrate, the
cavity will potentially be accessible to the substrate once it
opens up to the environment. The visualization of the segmentation result—depicting the cavity—can now be used to
investigate the opening width of the cavity, which is important for its accessibility. Figure 7 shows a cavity which has
opened up to the environment and forms a wide channel,
thereby making the active site accessible to the substrate.
The third view, the 2D graph, is intended to support the
analysis. The x-axis of the graph denotes the time step of the
trajectory, while the y-axis denotes the qualitative size of the
currently tracked cavity. The current time step is indicated by
a dotted orange line. For each time step, the volume of the
cavity is plotted (Figure 6). If a notable change of the volume
of the cavity occurs, a label with the current time is drawn.
The graph provides an additional view on the computed data
and allows the user to easily follow the changes of the cavity volume. It can also be used to get a quick overview of
the development of a cavity without looking at the replay of
the whole trajectory, since it offers a further level of abstraction. For this, the user initially selects a cavity and waits unc 2011 The Author(s)
Journal compilation c 2011 The Eurographics Association and Blackwell Publishing Ltd.

677

M. Krone, M. Falk, S. Rehm, J. Pleiss & T. Ertl / Interactive Exploration of Protein Cavities

(a)

(b)

(c)

(d)

Figure 7: Different views of an open cavity. The segmentation has reached the environment and a notable change in cavity
volume has been detected, resulting in a cyan coloring of the cavity (a). The shape and size of the substrate channel is clearly
observable, especially when a clipping plane is applied (b). Without the visualization of the segmentation, the cavity is not
easily discernible (c), even with the clipping plane applied. (d) shows the clipping plane with the substrate channel circled red.

til the whole graph is computed. When analyzing the output,
the user can instantly see all plateaus in the plotted curve,
where the volume is maximal and therefore, the cavity must
have opened. These regions can then be analyzed more thoroughly by observing the replay in the 3D view.
The user-steered, semi-automatic workflow allows the interactive, out-of-core analysis since all stages of the computational pipeline are executed in real time without the need
for any pre-computation. Limiting the segmentation to the
important part, which is selected by the user, keeps the computation time low. This is crucial for the interactive use with
large, dynamic data sets. The design of the application and
the applied methods enable the user to precisely explore
the temporal development of a certain cavity. In comparison
with other techniques, which perform an extensive search for
cavities, this specifically allows to analyze the formation of a
substrate channel, i.e. the phenomenon of opening or closing
cavities. While other techniques such as the visualizations
by Can et al. [CCW06] or Phillips et al. [PGD∗ 10] provide
a good view on the cavities, they are not designed to track
and analyze their evolution. Additionally, an open substrate
channel would not be recognized because of its connection
to the environment.
4. Volume Generation and Rendering
The central step of our approach is the construction of a continuous density volume from discrete atoms. We use a three
dimensional Cartesian grid in object space represented by a
3D texture on the GPU. The extent of the grid is chosen in
a way that it encompasses all atoms of the studied protein.
The density volume is generated in the same way as by Kolb
and Cuntz [KC05] using a radial symmetric kernel function
W ∈ C2 [0, h] with the support h: The density ρ¯ at an arbitrary
position p is computed by considering the contribution of all
c 2011 The Author(s)
Journal compilation c 2011 The Eurographics Association and Blackwell Publishing Ltd.

neighboring atoms j
¯
ρ(p)
= ∑ m jW |p − p j |, h ,

(1)

j

where m j is the mass of the respective neighboring atom, and
p j is its position. Mass preservation is obtained by the normalization W (p) d p = 1 of the filter kernel. The support h
is determined by the radius of atom j scaled with an useradjustable filter radius f . Taking the neighboring atoms of
p into account can be considered as gathering. A scattering
approach, like in [KC05], can be employed to avoid the determination of the neighborhood around p. Atoms—or to be
more specific, their footprints—are splatted into the Cartesian grid. The filter kernel W is evaluated for each voxel
covered by the footprint, while the size of said footprint is
determined by h. The evaluation results for each atom are
¯
then accumulated to yield a density ρ(p)
for each voxel by
an additive blending operator.
The scattering approach can be implemented efficiently
on the GPU. The volume is divided into slices along one of
the major axes. Every slice is then computed individually by
splatting atoms onto it. For each atom j a splat with the appropriate footprint size is rendered into the current slice. The
density contribution of the atom is then computed for each
covered voxel. Taking the position p of a covered voxel (in
object space) and the atom position p j into account, equation (1) can be evaluated.
The final result is a scalar 3D texture that is visualized
in our work with volume ray casting [HLSR08]. Isosurfaces
of the density volume are used to approximate the solvent
excluded surface. The SES is typically obtained by rolling
a spherical probe (whose radius corresponds to the size of
a certain solvent molecule) over the van der Waals surface
of all atoms contained in the protein. By using a quadratic
polynomial, i.e. the smoothstep function, as kernel function,

678

M. Krone, M. Falk, S. Rehm, J. Pleiss & T. Ertl / Interactive Exploration of Protein Cavities

Figure 8: SES approximation with an isosurface (blue). The
probe, which would define the SES, is depicted in green. The
density field is computed from two (left) and three (right)
atoms (yellow). r indicates the van der Waals radius and the
approximation error is highlighted in red.

we achieve a representation similar to the SES for a probe
radius of 1.4 Å(water) when applying a filter radius f of 3.0
and an isovalue of 2.15. Figure 8 depicts two cases where
the SES is approximated by the blue isosurface. In the left
image, a saddle between two atoms (yellow) is established.
The difference between probe sphere silhouette, depicted in
green, and isosurface is highlighted in red indicating a small
error. However, the other parts of the SES are approximated
with little visible error. In our opinion, the approximation error is acceptable because an opening between two cavities is
visible if and only if the solvent molecule can pass through.

Figure 9: Semi-transparent renderings of the volumetric surface (left) and SES (right) of an enterotoxin (PDB-ID: 1TII,
∼5.500 atoms), colored by B-factor.
To encode biochemical properties atoms are usually colored according to a certain property. Example coloring
schemes commonly applied to proteins are coloring by element, by amino acid, by molecule, by charge, or by B-factor.
This color-coding can be included in the volume rendering to
represent additional information and is stored in additional
RGB channels of the density texture. The computation of the
final color is carried out in parallel with the density calculations. Atom colors are weighted with their corresponding
density values and accumulated for each voxel. The rendered
isosurface then gleams in the colors of the most contributing
atoms. Figure 9 shows a comparison of the isosurface and the
analytically computed SES, colored by B-factor. The opacity of the isosurface is dependent on its orientation to further
enhance shape perception. Regions facing toward the user
gain less opacity whereas perpendicular regions are rendered

Figure 10: The opacity of the isosurface is set to zero, however, due to the increasing opacity for regions perpendicular
to the view direction, bordering regions of the molecule are
still visible (Insulin, PDB-ID: 1RWE, ∼1.000 atoms, colored by amino acid chain).

more opaque. This eases the overall identification of ridges,
bumps, and molds while the isosurface can still be rendered
with high transparency (cf. Figure 10).
5. Extraction of Cavities
5.1. Volume Segmentation
The extraction of the cavity is done by segmenting the density volume, which is generated per frame from scratch using
the point-based atom data as explained in the previous section. Since only one cavity, which was selected by the user,
has to be extracted, we decided to rather use a fast, partial
segmentation than segmenting the whole volume. A simple
three-dimensional Region Growing algorithm is applied to
the volume. The initial seed point for the segmentation is the
position selected by the user. The flood fill is implemented as
a breadth-first search. The threshold for the segmentation is
the isovalue, which was used to extract the isosurface. The
flood fill is only started if the density value of the selected
seed point is below the isovalue, since otherwise the selected
seed point is inside the non-accessible region of the protein.
5.2. Tracking of Cavities
As described in Section 5.1, the user-selected cavity can
be obtained easily by a flood fill segmentation. However,
the challenge is to maintain the cavity over time while
the trajectory is replayed. To facilitate the correlation between two consecutive frames, the protein is aligned. During the MD simulation, the protein may rotate or translate. This motion can result in a false detection of the cavity and will unnecessarily increase the positional changes
in the protein data, which makes the visual analysis more
difficult for the user. Thus, these unwanted motions will
be removed from the trajectory during the preparation of
the data, leaving the internal motions of the protein unaffected. Kabsch [Kab76,Kab78] introduced a method to minc 2011 The Author(s)
Journal compilation c 2011 The Eurographics Association and Blackwell Publishing Ltd.

imize the root mean square deviation (RMSD) of the protein’s backbone between each conformation in the trajectory and a given reference conformation of the protein that
leads to a superimposition of all frames in the trajectory. This
alignment method is meanwhile widely used to simplify the
analysis of MD trajectories. Coutsias [CSD04] presented
a method to compute the RMSD based on quaternions,
which produces equivalent results as Kabsch’s method. Simply speaking, the alignment makes sure that the cavity will
roughly stay at the same spatial position. This facilitates the
selection of the seed point for the next segmentation step.
The update of the segmentation is carried out as follows:
The previous segmentation result is tested against the new
volume and all segmented voxels from the previous time step
which are now inside the protein are removed. The remaining voxels are located inside the cavity. The naïve approach
would be to take all these voxels as seed point for the flood
fill. While this would result in a very high speedup, it can
introduce ambiguities when a part of the cavity is split off,
which is not uncommon in proteins. However, in this case we
do not want to track both cavities, since the cavity that was
split off is not longer connected to the active site and, hence,
cannot form a substrate channel. We solve this by computing the distance between each remaining voxel and the initial, user-defined seed point. The remaining voxel with the
lowest distance to the initial seed point will be taken as the
new seed point for the segmentation of the current time step.
Please note that by applying the RMSD alignment beforehand, we can ensure that the updated segmentation maintains
the initially selected cavity.
A special case occurs when the cavity opens up to the
environment and potentially forms a substrate channel. In
this case, the whole environment would be recognized as belonging to the cavity. While this itself would not corrupt our
method, it would lead to a very high increase in the number of voxels found by the flood fill, which, in turn would
lead to much higher execution times for the segmentation.
Another issue would be the visual representation of the segmented cavity, which would occlude everything in this case.
To ensure short execution times, the flood fill is stopped if
the number of segmented voxels exceeds an upper boundary. In our experiments, a factor of two times the number of
voxel of the previous segmentation yielded good results. For
all figures in this paper, we used a threshold of three times
the number of voxels for better visibility. If this threshold is
reached before the flood fill finishes, the cavity will be visually highlighted by changing the color. The user can now
easily identify the exit point of the newly formed channel.
6. Results and Discussion
6.1. User study on biological simulation data
We applied our method to analyze MD simulation trajectories of two different biological data sets to investigate the
influence of organic solvents on the structure of lipases.
c 2011 The Author(s)
Journal compilation c 2011 The Eurographics Association and Blackwell Publishing Ltd.

679

Cavity Size

M. Krone, M. Falk, S. Rehm, J. Pleiss & T. Ertl / Interactive Exploration of Protein Cavities

Time

Figure 11: The curve plotted for the simulation of CALA.
The two pairs of short-term openings are clearly visible. The
last, long plateau reaching to the end indicates the formation
of a stable substrate channel (also visible in the 3D view).

The first investigated data set was based on lipase A from
Candida antarctica (CALA, PDB entry: 2veo). Only one
crystal structure of this lipase is known and this is believed
to be the closed form [EKJ∗ 08]. The actual entrance of the
substrate into the crystal structure is suggested to be near
amino acid 431 and seems to be blocked by a loop region
(a functional structure formed by the protein). A simulation
of CALA in toluene as solvent showed structural rearrangements in different parts of the protein. To find out whether
one of these changes led to an open channel toward the active site we chose the large cavity near the catalytic triad and
tracked it through the trajectory. After a few nanoseconds
of simulation time the tracked cavity opened up to the surface forming a channel to the active site which was stable
for only a short time. Visual inspection of the channel indicated that it was too narrow for a typical substrate molecule.
However, the 2D graph identified two more short-time opening events, followed by one large plateau until the end of the
simulation Again, visual inspection revealed the size of the
tunnel and we found the entrance to be both large enough
for a typical substrate and present for a long time. The cavity
tracking offered an easy-to-use and comfortable way to analyze the simulation trajectory in real-time and to find tunnels
to the active center, which where, surprising to us, different
from the originally proposed substrate entrance. As a second advantage, the 2D graph displayed the duration and the
change of size of the tunnel, which was fundamental to decide whether or not the tunnel was stable and large enough to
act as a substrate entrance. Figure 11 shows the curve plotted
to the graph for the whole trajectory. The described openings are clearly visible and indicated by dashed lines. Please
note that the first dashed line denotes the merge with another, larger cavity, which also leads to a notable change in
size. This phenomenon is clearly visible in the 3D view. Figure 7 shows a snapshot of the trajectory where the substrate
channel is fully formed.
In our second study, we investigated a molecular dynamics data set of the Rhizomucor miehei lipase [RTP10]. In the
trajectory the closed structure of the lipase (RML, PDB entry: 3tgl) was simulated with toluene as solvent. Here, it was
already known that conformational changes occur during the
simulation and that a tunnel was formed toward the active

680

M. Krone, M. Falk, S. Rehm, J. Pleiss & T. Ertl / Interactive Exploration of Protein Cavities

(a)

(b)

(c)

(d)

Figure 12: Results obtained from the second data set used in our studies (Rhizomucor miehei lipase, RML). At the beginning of
the trajectory, the protein is in its closed state (a) and a small, closed cavity is observable (b); later, the active site is accessible (c)
and the protein is in its open state (d).

center. Hence, we were interested in the first appearance of
this tunnel and its position and size on the surface as well
as the duration until the final tunnel was formed. Therefore,
whilst the replay of the trajectory we performed a visual inspection of the protein to discover internal cavities, which
were visible through the transparent surface. The clipping
plane was then positioned near the active site and through the
found cavity. In the clipping plane view we located and selected the corresponding cavity. This cavity was then tracked
through the trajectory. Before the suggested starting point
of the opening we found a preliminary and small tunnel toward the active side. In a visual inspection of the protein, this
small entrance was hard to find and could also not be seen
in the RMSD plots of the lid compared to the crystal structure as it was used by [RTP10] to determine the beginning of
the opening process. Figure 12 shows two snapshots taken
during the analysis.
While being rather anecdotic, these successful appliances
of our method by application domain experts point out the
effectiveness of your method and serve as a first justification.
A more formal and extensive user study is planned to be
carried out to confirm these results.
6.2. Performance
Table 1 shows the performance of the volume isosurface ray
casting for various data sets from the Protein Data Bank
(PDB) [BWF∗ 00] and the two trajectories used for the evaluation in Section 6.1. Please note that, although the PDB data
sets are static, the same performance will be obtained for
dynamic data sets containing equally sized proteins because
all computations are executed for each frame, i.e. for each
frame, the atomic coordinates are transferred to the GPU
and the volume is recomputed. All measurements were performed on an Intel Core i7-860 CPU (4 × 2.8 GHz) with
8 GB RAM and an NVIDIA Geforce GTX480 GPU at a
resolution of 1024 × 768 pixels. As for all ray casting algorithms, the screen coverage has a high impact on the frame
rate. Therefore, we also provide this value in the table. The

Table 1: Performance measurements for various data sets.
SC denotes the percentage of the screen, which is covered
by the protein. VR denotes the volume resolution. (∗) marks
data sets obtained from the PDB.
Data set

#Atoms

SC

VR=1283

VR=2563

1OGZ∗
1BT9∗
1TII∗
1AF6∗
1AON∗
CALA
RML

∼1,000
∼2,500
∼5,500
∼10,000
∼60,000
6,627
4,036

60%
70%
70%
70%
70%
70%
70%

32 fps
30 fps
24 fps
20 fps
10 fps
20 fps
23 fps

8 fps
7 fps
6 fps
5 fps
3 fps
5 fps
6 fps

size of the volume also highly affects the performance. In our
experiments, a volume size of 1283 voxels was used. This
size has proven to be detailed enough for cavity extraction
even for larger proteins and allows the interactive extraction
of isosurfaces with high visual quality (cf. Figure 13).
We also measured the performance for the isosurface ray
casting with static volumes, i.e. the volume was generated
only once. For a volume size of 1283 , frame rates of 60–
70 fps were obtained. For a volume size of 2563 , the frame
rate drops to 27–33 fps. The screen coverage was about 70%
in both cases.
Dias et al. [DBG10] also generate a density volume from
the atoms of a protein on the GPU. However, while our
method uses OpenGL shaders, they are using CUDA kernels. The largest data set used by Dias et al. for performance measurements was the hemoglobin protein shown
in Figure 13 with 4,387 atoms (PDB-ID: 1BIJ). Their
method takes more than 14 seconds to create a volume of
7,267,456 voxels on an NVIDIA GeForce GTX280. In contrast, our method takes 0.2 seconds to generate a 2563 volume (16,777,216 voxels) on an NVIDIA Geforce GTX260.
The huge discrepancy in speed may partially result from
more elaborate density functions used by Dias et al., but we
c 2011 The Author(s)
Journal compilation c 2011 The Eurographics Association and Blackwell Publishing Ltd.

M. Krone, M. Falk, S. Rehm, J. Pleiss & T. Ertl / Interactive Exploration of Protein Cavities

strongly believe that the main factor is the efficient use of
the fast graphics pipeline applied by our method. We also
doubt that the CUDA kernels were fully optimized, unlike
our implementation.
Due to the relatively small volume size, the transfer of
the texture from GPU to CPU and the subsequent partial
3D flood fill on the CPU have taken less than 0.1 seconds
in our tests, depending on the cavity size. The average runtime of this step for the examples presented in Section 6.1
were 0.05 seconds. The resulting speed when all computations (volume generation, rendering and cavity tracking) are
executed per frame was above 15 fps on our test system for
both example trajectories when using a 1283 volume.
6.3. Qualitative Results
As observable, the described volume generation and isosurface ray casting can be used even for large, dynamic
data sets to obtain a smooth molecular surface at interactive
frame rates. The method is especially beneficial if a semitransparent surface is desired since it provides a clear representation with correct depth blending. Figure 9 shows a
comparison between isosurface ray casting and SES rendering with depth peeling (please note that the SES does not
show interior cavities).
Our application allows illustrating biochemical properties
of the protein by coloring the isosurface. This is important
for the analysis of molecular data. To our knowledge, none
of the isosurface rendering methods given in Section 2 implements this feature.
7. Conclusions and Future Work
Molecular dynamics simulations of proteins are a common
tool in bioinformatics nowadays. These simulations produce
large, time-dependent data sets, so-called trajectories. When
analyzing a trajectory, the accessibility of a protein’s active site to a certain substrate is of special interest. Cavities can often be found near the active side and might open

681

up at one point. The point of opening and the width of the
resulting channel, which determines the accessibility, are
important features. In this paper, we presented an application for the interactive, user-steered exploration of cavities
in proteins. Our application can be used to visually analyze time-dependent data sets and locate the formation of
substrate channels. We generate a volumetric representation
of the point-based, atomistic protein data and visualize the
molecular surface by means of volume ray casting. A partial segmentation is used to extract the cavity from the volume. By updating the segmentation appropriately, the cavity
can be tracked. Notable changes of the size of the cavity—
indicating the opening of the cavity—are identified and visually highlighted.
We have shown the effectiveness of our techniques with
two different data sets obtained from molecular dynamics
simulations. The evolution of the cavities was clearly and
easily perceivable. The intended task—the analysis of substrate channels originating from cavities—was successfully
carried out by application domain experts.
To our knowledge, there is no tool available which can extract and track cavities in dynamic data. Current tools which
extract cavities and substrate channels are only working on
static snapshots of a protein, which makes them unfeasible
for dynamic data. However, it would be possible to use tools
such as MOLE [PKKO07] or PocketPicker [WPS07]) for a
detailed analysis of particular frames previously found using
our application.
Our application is already used by our project partners
from the field of bioinformatics to analyze their MD trajectories. We are currently improving the graphical user interface
and plan to make our application publicly available soon.
In the future, one major goal is to extend the methods
used in this application to automatically analyze the extended cavity, for example, to measure the width of a channel
and determine if it is wide enough for the substrate to pass
through. We are also investigating the applicability of techniques from the field of flow visualization to enhance the
tracking of the cavity and detect time-varying features like
growing, splitting or amalgamation of cavities.
Acknowledgments
The authors would like to thank Sebastian Grottel for providing the MegaMolTM visualization framework and the German Research Foundation (DFG) for financial support of the
project within the Collaborative Research Centre SFB 716
and the Cluster of Excellence in Simulation Technology
(EXC 310/1) at the University of Stuttgart.
References

Figure 13: Hemoglobin A (PDB-ID: 1BIJ) colored with a
rainbow color scheme.
c 2011 The Author(s)
Journal compilation c 2011 The Eurographics Association and Blackwell Publishing Ltd.

[Bli82] B LINN J. F.: A generalization of algebraic surface drawing. ACM Transactions on Graphics 1 (1982), 235–256. 3

682

M. Krone, M. Falk, S. Rehm, J. Pleiss & T. Ertl / Interactive Exploration of Protein Cavities

[BWF∗ 00] B ERMAN H., W ESTBROOK J., F ENG Z., G ILLILAND
G., B HAT T., W EISSIG H., S HINDYALOV I., B OURNE P.: The
Protein Data Bank. Nucl. Acids Res. 28 (2000), 235–242. 8
[CCW06] C AN T., C HEN C.-I., WANG Y.-F.: Efficient molecular surface generation using level-set methods. Journal of Molecular Graphics and Modelling 25, 4 (2006), 442–454. 3, 4, 5
[CG07] C IPRIANO G., G LEICHER M.: Molecular surface abstraction. IEEE Transactions on Visualization and Computer
Graphics 13, 6 (2007), 1608–1615. 3
[Con83] C ONNOLLY M. L.: Analytical molecular surface calculation. J. Appl. Cryst. 16 (1983), 548–558. 2
[CSD04] C OUTSIAS E. A., S EOK C., D ILL K. A.: Using quaternions to calculate RMSD. Journal of Computational Chemistry
25, 15 (2004), 1849–1857. 7
[DBG10] D IAS S., B ORA K., G OMES A.: CUDA-based triangulations of convolution molecular surfaces. In Proceedings of
ACM International Symposium on High Performance Distributed
Computing (HPDC ’10) (2010), pp. 531–540. 3, 8
[EKJ∗ 08] E RICSSON D. J., K ASRAYAN A., J OHANSSON P.,
B ERGFORS T., S ANDSTROM A. G., BACKVALL J.-E., M OWBRAY S. L.: X-ray structure of Candida antarctica lipase A shows
a novel lid structure and a likely mode of interfacial activation.
Journal of Molecular Biology 376, 1 (2008), 109–119. 7
[FKRE10] FALK M., K LANN M., R EUSS M., E RTL T.: 3D visualization of concentrations from stochastic agent-based signal
transduction simulations. In Proceedings of IEEE International
Symposium on Biomedical Imaging: From Nano to Macro (ISBI
’10) (2010). 3
[GM77] G INGOLD R., M ONAGHAN J.: Smoothed particle hydrodynamics: Theory and application to non-spherical stars.
Monthly Notices Royal Astronomical Society 181 (1977), 375–
389. 3
[GM10] G IARD J., M ACQ B.: Molecular surface mesh generation by filtering electron density map. Journal of Biomedical
Imaging 2010 (2010), 10:9–10:9. 3
[HLSR08] H ADWIGER M., L JUNG P., S ALAMA C. R., ROPIN SKI T.: Advanced illumination techniques for GPU volume raycasting. In ACM SIGGRAPH Asia 2008 courses (2008), pp. 1–
166. 3, 5
[HS06] H UANG B., S CHROEDER M.: LIGSITEcsc: Predicting
ligand binding sites using the connolly surface and degree of conservation. BMC Structural Biology 6, 1 (2006). 2
[Kab76] K ABSCH W.: A solution for the best rotation to relate
two sets of vectors. Acta Crystallographica Section A 32, 5
(1976), 922–923. 6
[Kab78] K ABSCH W.: A discussion of the solution for the best
rotation to relate two sets of vectors. Acta Crystallographica Section A 34, 5 (1978), 827–828. 6
[KBE09] K RONE M., B IDMON K., E RTL T.: Interactive visualization of molecular surface dynamics. IEEE Transactions on
Visualization and Computer Graphics 15, 6 (2009). 3
[KC05] KOLB A., C UNTZ N.: Dynamic particle coupling for
GPU-based fluid simulation. In Proceedings of Symposium on
Simulation Technique (ASIM) (2005), pp. 722–727. 3, 5
[KDE10] K RONE M., DACHSBACHER C., E RTL T.: Parallel
computation and interactive visualization of time-varying solvent
excluded surfaces. In Proceedings of ACM International Conference on Bioinformatics and Computational Biology (BCB ’10)
(2010), pp. 402–405. 3
[KSN08] K ANAMORI Y., S ZEGO Z., N ISHITA T.: GPU-based
fast ray casting for a large number of metaballs. Computer
Graphics Forum 27, 3 (2008), 351–360. 3

[Lak00] L AKARE S.: 3D Segmentation Techniques for Medical
Volumes. Tech. rep., Center for Visual Computing, Department of
Computer Science, State University of New York at Stony Brook,
2000. 3
[LBPH10] L INDOW N., BAUM D., P ROHASKA S., H EGE H.-C.:
Accelerated visualization of dynamic molecular surfaces. Computer Graphics Forum 29 (2010), 943–952. 3
[LC87] L ORENSEN W. E., C LINE H. E.: Marching cubes: A
high resolution 3d surface construction algorithm. In Proceedings of ACM SIGGRAPH Computer Graphics and Interactive
Techniques (1987), pp. 163–169. 3
[Lev88] L EVOY M.: Display of surfaces from volume data. IEEE
Computer Graphics and Applications 8, 3 (1988), 29–37. 3
[MCG03] M ÜLLER M., C HARYPAR D., G ROSS M.: Particlebased fluid simulation for interactive applications. In ACM SIGGRAPH/Eurographics Symposium on Computer Animation 2003
(2003), pp. 154–159. 3
[MGE07] M ÜLLER C., G ROTTEL S., E RTL T.: Image-space
GPU metaballs for time-dependent particle data sets. In Proceedings of Vision, Modelling and Visualization (VMV ’07) (2007),
pp. 31–40. 3
[OS88] O SHER S., S ETHIAN J. A.: Fronts propagating with curvature dependent speed: Algorithms based on hamilton-jacobi
formulations. Journal of Computational Physics 79, 1 (1988),
12–49. 3
[PGD∗ 10] P HILLIPS M., G EORGIEV I., D EHOF A. K., N ICK ELS S., M ARSALEK L., L ENHOF H.-P., H ILDEBRANDT A.,
S LUSALLEK P.: Measuring properties of molecular surfaces using ray casting. In Proceedings of International Workshop on
High Performance Computational Biology (2010). 3, 5
ˇ J., OTYEPKA M.:
ˇ
[PKKO07] P ET REK
M., KOŠINOVÁ P., KO CA
MOLE: A voronoi diagram-based explorer of molecular channels, pores, and tunnels. Structure 15, 11 (2007), 1357–1363. 1,
2, 9
ˇ
M., OTYEPKA M., BANAS P., KOŠINOVÁ
[POB∗ 06] P ET REK
P., KOCA J., DAMBORSKY J.: CAVER: A new tool to explore
routes from protein clefts, pockets and cavities. BMC Bioinformatics 7, 1 (2006), 316. 1, 2

[Ric77] R ICHARDS F. M.: Areas, volumes, packing, and protein
structure. Annual Review of Biophysics and Bioengineering 6, 1
(1977), 151–176. 2
[RTP10] R EHM S., T RODLER P., P LEISS J.: Solvent-induced lid
opening in lipases: A molecular dynamics study. Protein Science
19, 11 (2010), 2122–2130. 7, 8
[SOS95] S ANNER M. F., O LSON A. J., S PEHNER J.-C.: Fast
and robust computation of molecular surfaces. In Proceedings
of Symposium on Computational Geometry (SCG ’95) (1995),
pp. 406–407. 3, 4
[TA95] T OTROV M., A BAGYAN R.: The contour-buildup algorithm to calculate the analytical molecular surface. Journal of
Structural Biology 116 (1995), 138–143. 3
[TU10] T ILL M., U LLMANN G.: McVol – a program for calculating protein volumes and identifying cavities by a monte carlo
algorithm. J. Mol. Mod. 16 (2010), 419–429. 2
[VBW94] VARSHNEY A., B ROOKS F. P., W RIGHT W. V.: Linearly scalable computation of smooth molecular surfaces. IEEE
Computer Graphics and Applications 14, 5 (1994), 19–25. 3
[WPS07] W EISEL M., P ROSCHAK E., S CHNEIDER G.: PocketPicker: Analysis of ligand binding-sites with shape descriptors.
Chemistry Central Journal 1, 1 (2007), 7. 1, 2, 9

c 2011 The Author(s)
Journal compilation c 2011 The Eurographics Association and Blackwell Publishing Ltd.

