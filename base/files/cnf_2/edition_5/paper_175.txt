DOI: 10.1111/j.1467-8659.2011.01898.x

COMPUTER GRAPHICS

forum

Volume 30 (2011), number 6 pp. 1719–1749

Visual Analysis of Large Graphs: State-of-the-Art and Future
Research Challenges
T. von Landesberger1,2 , A. Kuijper1,2,3 , T. Schreck1 , J. Kohlhammer2 , J.J. van Wijk4 , J.-D. Fekete5 and D.W. Fellner1,2,3

1 Technische

Universit¨at Darmstadt, Germany
IGD, Darmstadt, Germany
3 Technische Universit¨
at Graz, Austria
4 Technische Universiteit Eindhoven, the Netherlands
5 INRIA, France
{tatiana.von landesberger@gris.informatik.tu-darmstadt.de, arjan.kuijper@igd.fraunhofer.de, tobias.schreck@gris.tu-darmstadt.de,
joern.kohlhammer@igd.fraunhofer.de, vanwijk@win.tue.nl, Jean-daniel.fekete@inria.fr, d.fellner@igd.fraunhofer.de}
2 Fraunhofer

Abstract
The analysis of large graphs plays a prominent role in various fields of research and is relevant in many important
application areas. Effective visual analysis of graphs requires appropriate visual presentations in combination with
respective user interaction facilities and algorithmic graph analysis methods. How to design appropriate graph
analysis systems depends on many factors, including the type of graph describing the data, the analytical task at
hand and the applicability of graph analysis methods. The most recent surveys of graph visualization and navigation
techniques cover techniques that had been introduced until 2000 or concentrate only on graph layouts published
until 2002. Recently, new techniques have been developed covering a broader range of graph types, such as timevarying graphs. Also, in accordance with ever growing amounts of graph-structured data becoming available,
the inclusion of algorithmic graph analysis and interaction techniques becomes increasingly important. In this
State-of-the-Art Report, we survey available techniques for the visual analysis of large graphs. Our review first
considers graph visualization techniques according to the type of graphs supported. The visualization techniques
form the basis for the presentation of interaction approaches suitable for visual graph exploration. As an important
component of visual graph analysis, we discuss various graph algorithmic aspects useful for the different stages
of the visual graph analysis process. We also present main open research challenges in this field.
Keywords: visual graph analysis, graph visualization, graph interaction, visual analytics
ACM CCS: Data Structures [E.1]: Graphs and Networks; Trees; Mathematics of Computing [G.2.2]: Discrete
Mathematics; Graph Theory [H.4]: Information Systems: Applications; Information Systems [H.5.2]: Interfaces
and Presentation; User Interfaces.

1. Introduction
The analysis of graphs is important in many application areas including finance, biology, sociology, transportation and
software engineering. It includes a variety of different tasks.
The main aspects relate to the understanding of global and
local structure of the graph, the connections between entities,
the clusters of highly connected entities, etc. Such high-level
tasks often consist of a series of low-level tasks [LPS*06], in
particular when dealing with large and complex graphs.
c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics
Association and Blackwell Publishing Ltd. Published by
Blackwell Publishing, 9600 Garsington Road, Oxford OX4
2DQ, UK and 350 Main Street, Malden, MA 02148, USA.

The analysis of graphs is often supported by their visual presentations. In this respect, graph visualization research concentrates on the development of effective graph
layouts and visual mappings. The visualization of large
graphs is accompanied by effective interaction techniques, in
particular, in cases when the whole graph is too complex or
large to be visualized in one static view. The interaction alone
may not be sufficient to accomplish certain analytical tasks.
Therefore, algorithmic support—such as machine learning,
or graph analysis algorithms—needs to be supported in

1719

1720

T. von Landesberger et al. / Visual Analysis of Large Graphs

Figure 1: The main components of visual graph analysis
considered in this report.

interactive visualization systems. Such integrated visual analysis of large data sets is the main focus of the research field
called Visual Analytics, which evolved from Information Visualization and Scientific Visualization [KMS*08]. It has effectively started to grow after the publication of the seminal
book by Thomas and Cook in 2005 [TC05]. Therein, Visual
Analytics is defined as the science of analytical reasoning
facilitated by interactive visual interfaces. Recently, Visual
Analytics has been a major driving force for the research and
development of interactive visualization techniques for large
amounts of data including graphs.
Our motivation for this report is twofold. First, we recognize that by now most recent graph visualization survey
[HMM00, DPS02] date back several years. Therefore, we
aim to provide an update by adding more recent publications
to the body of work presented in these surveys. Secondly,
we aim to take a Visual Analytics perspective on the field of
visual graph analysis by explicitly considering in a unified
way the aspects of visual representation, user interaction,
and algorithmic analysis (Figure 1). These three elements
form the basis for effective visual graph analysis systems
and are closely interrelated. For example, algorithmic graph
analysis may be applied as a pre-processing step before a
specific graph layout is determined for visual representation.
Interactive direct object manipulation approaches are often
useful for exploring large and complex graphs visually. Also,
by means of user interaction, further graph analytic processing steps, or updates to the presented views, can be requested.
The algorithmic analysis thereby helps to reveal interesting
aspects of the data. The user involvement in this analytic
process can vary from an automatic analysis, where the calculation is done without user involvement, over a user-driven
analysis, where the user triggers the algorithmic processing
of the data, up to a user-steered process where the user has

Figure 2: The Visual Analytics process by Keim et al.
[KAF*08] with the four key steps: (1) data pre-processing,
(2) mapping/layout, (3) visual user interaction and (4) modelbased analysis. c 2008 Springer-Verlag, Berlin, Heidelberg.

full control over the analytical process including setting the
algorithm parameters.
In this state-of-the-art report, we provide a systematic
overview of the main approaches in each of the three aspects
of visual analysis of graphs. We therefore develop a classification of techniques according to these aspects. Within
each category, we refer to exemplary papers, while focusing on new developments in the visual graph analysis area.
We discuss the respective techniques to offer the reader the
possibility to concentrate on methodological aspects of visual analysis of graphs applicable across various domains.
Owing to the broad scope of the paper, we present the main
features (strengths and weaknesses) of the techniques as far
as they were discussed by the authors of the papers or were
mentioned in evaluations.
The structure of the report reflects the steps of the visual analytics process introduced by Keim et al. [KAF*08]
(Figure 2). Section 2 details on definitions and a classification of graphs by types and introduces main pre-processing
methods for visual graph analysis. This section is the basis
for a discussion of visual graph representations given in Section 3. Sections 4 and 5 survey key approaches for interaction
with and algorithmic analysis of graphs in visualization, respectively. Finally, Section 6 concludes and outlines future
challenges in this research domain.

2. Basic Graph Definition and Pre-processing
Techniques
In this section, we recall fundamental graph definitions as
well as approaches for graph pre-processing useful for subsequent graph visualization.

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

T. von Landesberger et al. / Visual Analysis of Large Graphs

1721

2.1. Definitions
Graphs are a prominent data structure within Visual Analytics
and related research fields. Often, graphs are applied for
describing relationships between entities. A graph refers to
a set of vertices (nodes) and a set of edges (i.e. links) that
connect pairs of vertices. It is a pair G = (V , E); E ⊆ [V 2 ],
where elements of V are vertices and elements of E are edges
[Die05]. Furthermore, attributes can be attached to vertices
and edges, for example to denote their type, size or some
other application-related information.
Graphs are often classified into undirected and directed
[HMM00]. For a directed graph (resp. undirected), the edge
vertices e = (v 1 , v 2 ) are ordered (resp. unordered). A graph
containing both directed and undirected edges is called
mixed.
A path of length s in G is a sequence of connected vertices
pathG (v1 , vs ) = v1 , v2 , . . . , vs where vi ∈ V and (vi , v i+1 ) ∈
E. A cycle is a closed path with a 1 = as . A tree is a connected
undirected graph without cycles [Die05]. A connected graph
can be transformed to a tree by removing edges causing
cycles while keeping the graph connected. A Tree T is called
rooted when one vertex r is distinguished as a so-called
root node: T = (V , E, r). Such trees are often treated as
hierarchies, where the length of the path to the root denotes
the level of a vertex in the hierarchy. We note that, formally, a
hierarchy is a directed acyclic graph so, there can be several
paths from a vertex to the root node. In this survey, we use
the term hierarchy as synonym to ‘rooted tree’.
In graph theory literature, a directed graph with weighted
edges is also called a network. In information visualization,
the term network is often used in a broader sense denoting a
graph with attributes associated with vertices and edges.
An additional graph category are so-called compound
graphs. A compound graph C = (G, T ) is defined as a graph
G = (V , EG ) and a rooted tree T = (V , ET , r) that share the
same set of vertices, such as
∀e = (v1 , v2 ) ∈ EG , v1 ∈ pathT (r, v2 ) and v2 ∈ pathT (r, v1 ).
Relationships between vertices are expressed by T: vertices
sharing a common parent in T belong to the same ‘group’.
When two vertices sharing a common parent are connected
in G, they share a generic relationship. Many other kinds of
relationships can be expressed including hierarchic and cross
group.
Compound graphs can be created by successive aggregation (or clustering) of graph vertices in a bottom-up approach. This operation usually involves creating new nodes
as group/cluster parents. In this case, vertices (and implicitly,
also edges) of the original graph are aggregated (i.e. added
as children of the group parent), thereby creating constructed
meta-nodes or super-nodes. The attributes of the meta-nodes
can be calculated from the attributes of the merged nodes.

Figure 3: Classification of graphs according to their time
dependence and graph structure.
Similarly, edges between meta-nodes are aggregated into
meta-edges and their attributes can be calculated from the
original edges. Compound graphs which are constructed in
this way are also referred to as aggregated graphs. The list of
operations that can be performed on such graphs is dependent
on the particular application and graph type.
Graphs may also evolve over time, thereby forming dynamic graphs (i.e. time-dependent graphs) in contrast to
static graphs. Time-dependent changes may affect the attributes of nodes and edges, the graph structure or both.
Figure 3 summarizes the graph classification presented
earlier.
Furthermore, graphs may be distinguished according to
their topological properties. There exists a variety of literature on graph theory (e.g. [Die05]) which focuses on graph
terminology, classification and algorithmic graph analysis. In
the following, we mention only the most relevant terminology
used later in this report. Basic graph properties include the
number of nodes, graph density and connectivity. Properties
are often taken into account (or are a pre-requisite) for certain visualization techniques. These properties influence the
choice and effectiveness of the applied visualization methods. For example, the increasing number of nodes, higher
graph density or both pose a scalability problem in visualization owing to limited display space and human perception
capabilities.
The number of nodes (i.e. graph order) is often referred
to as graph size (|V |). Graph density is the number of
edges relative to the maximum potential number of edges
2|E|
. Sparse graphs have around O(|V |) < |E|
D = |V |(|V
|−1)
2
O(|V | ) edges, whereas dense graphs show density values
close to one. Graphs with the maximum number of edges are
called complete graphs. A clique is a subset of a graph that
is fully connected.
According to the graph size, graphs are often referred
to, for example as small or large. The definition of large
graphs is however not standardized. Often graphs with thousands, hundreds of thousands or millions of nodes are called
large. However, not only the number of nodes determines the

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

1722

T. von Landesberger et al. / Visual Analysis of Large Graphs

notion of a ‘large’ graph. Graph density and connectivity
also play an important role for the notion of a ‘large’ graph.
From the visualization point of view, ‘large’ graphs usually
lead to cluttered displays. In algorithmic analysis, ‘large’
graphs refer to long computational times or memory footprint larger than the available RAM size. A discussion about
the influence of graph size and density on visualization and
construction of graphs for testing visualizations according to
these parameters is provided in [Mel06].
Several special graph structures appear often in real-world
cases, and dedicated visualization methods have been developed for these [ACJM03, vHW08, JHGH08, MJW*09]. For
example, social networks usually exhibit a structure called
small world network: the typical distance between two nodes
grows proportionally to log |V |. Scale-free networks, for
example protein networks or certain types of social networks have a degree distribution that follow approximately
the power law. Bipartite graphs are graphs whose nodes form
two disjoint sets: V 1 , V 2 with V 1 ∪ V 2 = V and V 1 ∩ V 2 =
∅, such that: ∀e = (v 1 , v 2 ) ∈ E, v 1 ∈ V 1 and v 2 ∈ V 2 .
2.2. Algorithmic graph pre-processing
In graph visualization, algorithmic graph pre-processing often includes graph simplification to reduce the size, while
maintaining the main graph structure. Also pre-processing of
graph properties can be used for graph visualization (in algorithms for positioning of nodes and edges) or highlighting of
interesting parts of the graph. The modified graph is used then
for an easier visual inspection as large and complex graphs
are difficult to understand even using advanced node and edge
positioning algorithms (layouts). Such pre-processing steps
can usually be performed automatically without user interaction. There are two main approaches to graph reduction:
graph filtering and graph aggregation.

(a) Original graph

(b) Stochastic edge sampling

(c) Geodesic clustering

(d) Structure-based filtering

Figure 4: Example of various graph reduction techniques.
The graphs are visualized using the GEM layout [JHGH08].
c 2008 IEEE.
gregation can be repeated multiple times, creating a hierarchical graph, which is a special kind of compound graph.
There are various ways of aggregating a graph, including
using predefined node hierarchies, or aggregation according to node attributes, or according to the node clusters
[EDG*08, BDL*10], to name a few. Figure 5 (top) shows an
example aggregation schema with several aggregation levels.

2.3. Graph filtering
There are two types of filtering: stochastic and deterministic. Stochastic filtering is mainly based on random selection
of nodes and edges from the original graph. These methods are compared in [LF06]. Deterministic filtering uses, as
its name suggests, a deterministic algorithm for the selection of the nodes/edges to be removed. This filtering can be
based on node/edge attributes, on topologic values such as
betweenness centrality or other graph properties. For example, filtering based on edge–betweenness–centrality can be
used for removal of less important edges while keeping the
underlying structure (connectedness and other features such
as cliques) of the graph [JHGH08] (Figure 4).
2.4. Graph aggregation
In this approach, nodes and edges are merged to single nodes
and edges, thereby reducing the size of the graph and revealing relationships between groups of nodes. Graph ag-

Figure 5: Graph aggregation for multiscale graph visualization [EDG*08]. c 2008 IEEE. Top: Graph aggregation
schema showing several levels of aggregation. Darker rectangles show the corresponding data areas in the aggregation.
Bottom: Example of graph aggregation using a matrix visualization.

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

T. von Landesberger et al. / Visual Analysis of Large Graphs

The highlighted rectangle shows the corresponding data in
each aggregation level. Figure 5 (bottom) shows the original
and aggregated data in a matrix visualization.
3. Visual Representations of Graphs
Visualization is one of the main means of exploratory graph
analysis. It includes the development of appropriate types of
visual representations (e.g. matrix or node-link diagrams),
efficient placement of graph elements on the screen and efficient visual attribute mappings (design of graph elements for
improved readability of the drawing).
In computer-created graph visualization, several so-called
aesthetic criteria are taken into consideration. They are usually implemented as objective functions to optimize in layout algorithms. The standard criteria include minimizing
the number of crossings, minimizing the total drawing area,
maximizing symmetries and many more related to particular
types of graphs and edge drawing styles [Pur97, DBETT99,
BBD09]. Recently, Beck et al. [BRSG07] extended previous
works to focus on both static and dynamic graphs irrespective of their graphic representations (including also matrix
representations in addition to node-link diagrams). They consider three groups of criteria: general, dynamic and aesthetic
scalability.
• The general criteria include reduction of visual clutter,
reduction of spatial misunderstanding resulting from spatial closeness, maximization of spatial matching of items
for following paths and maximization of space efficiency.
• For dynamic graphs, the following criteria are desired:
maximization of display stability between time points,
reduction of cognitive load when analysing time dynamics, minimization of temporal aliases mainly owing to
positioning of different nodes in the same place in two
time periods.

1723

discuss different ways of visual graph representations and
designs of graph drawings.
3.1. Visual representations of static graphs
The visualization of static graphs has received much attention
in the Information Visualization community. The section start
with trees that are simpler than general graphs.
3.1.1. Trees
Techniques for displaying trees can be divided into three
main groups: Space filling, node-link based and hybrid
(Figure 6). There have been several studies comparing the different ways of visualizing trees [SCGM00, BN01, vHvW02,
Kob04, AK07]. A very useful visual overview of tree visualization has been provided in the poster [JS10]. It is difficult
to unify these results as they differ significantly. Recently,
Ziemkiewicz and Kosara have shown that the effectiveness
of the visualization technique depends not only on the task
to be solved, but also on the formulation of the task assignment, that is if it reflects a containment or a level metaphor
[ZK08].
Node-link techniques: These approaches use links between items to depict their relationship. Layout algorithms
controlled by optimization criteria or the node positions.
Many layout algorithms have been proposed to date in the
Graph Drawing community. They include layered, radial or
balloon layouts in two-dimensional (2D) [HMM00], Cone
trees [RMC91] in 3D, point-based trees [SSH09], nature inspired Phyllotrees [NCA06] or hyperbolic layouts [LRP95,

• Aesthetic scalability criteria refer to graph readability for
larger graphs, that is, scalability in number of vertices
(i.e. increasing graph order), scalability in number of
edges (i.e. increasing graph density), and scalability in
number of graphs, in particular with increasing number
of time steps for which graph data is given.
All these criteria are important but they cannot be simultaneously optimized and are not sufficient to design a good
layout which is usually data and task dependent. Therefore,
exploratory graph visualization requires more than one layout
algorithm to reveal the several perspectives on relationships
between nodes.
In this section, we describe the main graph visualization
techniques following the graph classification from Section 2.
We introduce techniques for static and time-varying graphs.
In each part, techniques for hierarchies, generic directed and
undirected graphs and compound graphs are presented. We

Figure 6: Three types of hierarchy visualization techniques.
(a) Node-Link, (b) space-filling and (c) hybrid. [ZMC05], c
2005 IEEE.

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

1724

T. von Landesberger et al. / Visual Analysis of Large Graphs

Figure 7: Examples of node-link tree visualizations. (a)
Phyllotrees [NCA06], c 2006 IEEE. (b) Point-based tree
[SSH09], c 2009 IEEE.

Mun97, AH98] (Figure 7). Most of these classic tree layout algorithms have a linear complexity in time and memory
so the layout computation is scalable. However, the nodelink representation by design leaves significant background
space empty and thereby may encounter scalability problems
when applied to larger graphs. For the visualization of node
attributes, specialized techniques for multidimensional data
visualization such as glyphs, radial or parallel plots have been
used.
Space filling techniques: These techniques try to use the
full area of the display to present the hierarchy. Instead of
employing links for representing node relationships, the spatial positions of nodes are employed, using either closeness
or enclosure. They are mainly applied to visualization of hierarchic partitions of sets of data items, for instance files in
a file system. Area size can be used to encode quantitative
attributes of nodes, such as file size. In addition, colour and
height can represent additional data attributes. In case more
complex additional information needs to be displayed, specialized data presentations can be placed in the child nodes
such as icons, parallel coordinate diagrams, etc. Space-filling
techniques can be categorized by the placement strategy employed into enclosure, adjacency and crossing (Figure 8).
• Enclosures: These techniques recursively layout child
nodes within the area of their parent nodes. The most
prominent examples are Treemaps—rectangular shapes
recursively subdividing rectangular display space according to the underlying hierarchy, introduced by Shneiderman[Shn92] (so-called slice-and-dice algorithm).
Variants include Voronoi tessellations [BDL05] or bubble
layouts [Bed01]. Other types, such as elliptic [OCNF09]
or circular shapes have been proposed, but they do not
lead to fully space filling visualizations.
The main advantage of enclosures is the very good usage of the available space, as the child nodes do not
need extra space owing to the overlap with the parent
nodes. The disadvantage is that the overlapping of the

Figure 8: Three types of space filling hierarchy visualization
techniques. (a) Enclosure: Cushion Treemap [vWvdW99], c
1999 IEEE. (b) Adjacency: Icicle plot [TS08], c 2008 IEEE.
(c) Crossing: BeamTrees [vHvW02], c 2002 IEEE.

parent nodes may also lead to a more difficult distinction of the hierarchy structure by the user, as it is rather
implicitly encoded. For Treemaps, several advanced layout techniques have been developed including ordered
(i.e. pivot-based) [BSW02], squarified [BHvW99] and
spiral [TS07] Treemap layouts. For example, squarified
Treemaps aim at generating subrectangles of square-like
aspect ratios, supporting easier comparison of sizes and
presentation of additional diagrams or other elements
within the rectangles. According to Tu and Shen [TS07],
the slice-and-dice algorithm leads to high aspect ratios
with good readability. Strip, pivot-based and spiral techniques have medium aspect ratios with medium readability. Squarified Treemaps have very good (low) aspect
ratios but low readability. To better distinguish the hierarchical structure, cushion Treemaps [vWvdW99] apply
shading of the shapes. Treemaps that reflect the geographic distribution of the hierarchical data were presented in [WD08].
• Adjacency: In contrast to Treemaps, adjacency-based
techniques do not overlap the parent nodes by child
nodes, but represent the node relationships by placing
the child nodes next to their parent nodes. The placement can be in circular layers, such as in the SunBurst
method [SZ00], or on linear layers, yielding so-called icicle plots. The advantage of this visualization is that the
parent nodes are not overlapped by their child nodes and
therefore, their attributes can be more easily displayed
and analysed. However, this visualization is not as dense
as squarified Treemaps.

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

T. von Landesberger et al. / Visual Analysis of Large Graphs

1725

• Crossings: The crossing method places child nodes across
the parent node, thereby only partially overlapping the
parent. The Beamtree method [vHvW02] improves over
the classic Treemaps when the hierarchical structure may
be difficult to visually assess, while still being more space
efficient than the adjacency techniques. The main drawback of this technique is that users are unfamiliar with
this approach and that it is often less readable than other
methods.
Hybrid approaches: These approaches combine nodelink diagrams with Treemaps: a part of the hierarchy is displayed in a Treemap and the rest as a node-link diagram (Figure 6c). They present the data in a flexible space-efficient way
while still clearly presenting the data structure and emphasizing the content. The most prominent representative are
‘elastic hierarchies’ [ZMC05]. In connection to interactive
determination of the type of visual metaphor used for each
part of the hierarchy, this technique allows for flexible analysis of the data using advantages of both representations.

Figure 10: Graph layout examples. (a) A comparison
of multi-level graph layouts GRIP, FM 3 and Topolayout
[AAM07]. c 2007 IEEE. (b) Layered layout of cyclic directed graph [DK05]. c 2005 IEEE.

3.1.2. Directed and undirected graphs
Techniques for displaying general graphs can be divided into
three main groups: node-link based, matrix-based and hybrid
(Figure 9). We discuss these in more detail later. In addition,
there are specialized graph drawing techniques, which use
new graph visualization techniques. Two main examples are:
graph splatting and graph maps. The first one forms graphs as
2D scalar fields [vLdL03]. The second one visualizes graphs
as maps [GHK10], where the relationships between nodes
are represented as adjacency between neighbouring areas
(nodes). Both approaches create an approximate representation of a graph.
A comparison of node-link and matrix techniques is presented by Ghoniem et al. [GFC04]. According to the study,
the advantages of node-link diagrams are their intuitiveness,
compactness and better suitability for path following tasks.
They are more effective for smaller and sparse graphs. The

Figure 9: Three types of general graph visualization techniques: a) Node-link diagram, b) adjacency matrix, c) hybrid.
From [HFM07], c 2007 IEEE.

Matrix representation inherently does not have edge crossings and node overlapping problems, and is thereby suitable
also for dense graphs. When using appropriate node ordering, they can easily reveal dense substructures in the graph.
However, they also suffer from scalability in limited display
spaces, especially for very large graphs. In visual graph analysis, graph layout and matrix ordering influence the effectiveness of these representations. These issues are therefore
in the core of graph visualization research.
Node-link representations: The main challenge is the
layout (i.e. the placement of the nodes) so that graph readability and certain notions of graph aesthetics are supported
(Figure 10). Typical requirements include that the nodes do
not overlap, the number of edge crossings is minimized, edge
length is homogeneous and in general, graph substructures
are easily recognizable. This problem is intensively studied in
the Graph Drawing community. Given these aesthetic goals
and constraints, the aim is to find algorithms that efficiently
provide good solutions.
Note that a specific group of graphs are graphs with geographic reference, such as transportation graphs. In this
case, the nodes and possibly also edges of the graph have an
inherent geographic location, which needs to be taken into
consideration in their graphic presentation. Therefore, a specific graph layout algorithm is not needed for determining the
position of each node on the screen. However, the fixed node
position may exacerbate graph readability problems, such as
crossings and long edges. Visualization of geographic data
is a special research field, which we do not address here in
detail.

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

1726

T. von Landesberger et al. / Visual Analysis of Large Graphs

When no position is inherently associated with vertices, a
graph layout algorithm is required. The graph layout research
field is very large, and an extensive survey of proposed techniques is beyond the scope of this report. The latest survey
from Herman et al. dates from 2000 [HMM00] and several new algorithms have appeared since then. The related
work part in [AAM07, MM08] as well as the comparison in
[HJ07] nicely summarize many current techniques. In our report, we classify the techniques according to the type of node
placement.

• Force-based layouts: These techniques are based on a
simulation of mechanical laws by assigning repulsive
forces between nodes and attraction forces between endpoints of edges. Several forces have been described in
the literature to achieve different properties of the layout. The seminal work of Eades [Ead84] uses an electric
force between charged particles to model node repulsion
and spring forces between the link endpoints to model
edge attraction. Fruchterman and Reingold [FR91] have
then improved the distribution of nodes by adaptation of
the force models and Noack has further improved it with
a more flexible set of force functions to achieve either a
good space density or a good clustering of nodes [Noa03].
Kamada and Kawai [KK89] try to layout nodes such as
the Euclidean distance between the nodes is proportional
to the graph-theoretical distance. This family of layouts,
however, does not scale well to graphs of thousands of
nodes or more, due to their complexity. Therefore, improvements have been proposed. For instance, faster calculation of forces using an efficient GPU implementation
[GHGH09], or using heuristics [FLM95].
• Constraint-based layouts: This family of layouts extends
the force-directed approach with constraints on node position. These constraints include horizontal and vertical
alignment of nodes, nonoverlapping nodes, edge direction, or closeness of grouped nodes [DMW09]. An example are orthogonal layouts, where the edges are only
composed of straight vertical and horizontal lines. These
layouts can be supported also by user interaction (see also
Section 4). Example works from this category include
[DMS*08, DMW09, DMW09]. This family of layouts
greatly improves the power of expression at the cost of
slightly longer execution time.
• Multiscale approaches: These techniques rely on a hierarchical decomposition of a graph into simpler nested
sub-graphs. They first layout the coarser graph and
then include more nodes level by level. Exemplary
works include [GK01, KCH02, HJ05, FT07, MM08]
(Figure 10a). These methods are typically much faster
than traditional force-directed methods. They can be differentiated according to the technique used for creating
the node hierarchy, and the layout of the resulting layers. For example, [MM08] employs node clustering and

subsequent positioning of the nodes along space filling
curves.
• Layered layouts: These approaches, also called ‘hierarchic layouts’, place nodes of the graph on parallel horizontal layers [GKNV93]. They are mainly used for directed graphs and are based on the Sugiyama approach
[STT81]. It works in four phases: (1) cycle removal,
(2) assignment of nodes to layers, (3) reduction of edge
crossings and (4) assignment of coordinates to nodes.
Improvements to these layouts, specifically for cyclic
graphs, position all nodes of a cycle within one level; examples include the Dig-Cola layout [DK05] and Cyclic
Leveling [BBBL09] (Figure 10b). This algorithm and its
variants are quite fast in practice and standard implementations such as [GKNV93] can easily layout several
thousands of nodes in seconds.
• Non-standard layouts: Other approaches exist that combine the previous techniques or use completely alternative approaches to graph layouts. Projection of a node
layout from high-dimensional to 2D space has been proposed in [HK02]; although it is very fast in practice, the
quality of the layout is very sensitive to the structure of
the graph. For example, it is very effective for meshes
and not effective at all for trees. LGL [ADWM04] first
simplifies the graph by computing a spanning-tree; it
then computes the layout iteratively in depth order using a force-directed layout. LGL is able to scale to very
large graphs (billions of vertices) thanks to the initial decomposition. It is very effective for quasi-trees but has
not been thoroughly studied for other kinds of graphs;
its results are very sensitive to the spanning-tree computation: choosing different spanning trees will results
in quite different layouts for the same graph. The ISOM
method [Mey98] applies the Self-Organizing Map algorithm [Koh01] for finding a suitable graph layout. As
an alternative to costly layout computation, a graph layout visualization based on the semantics of the graph
(on node labels) was presented in [SA06]. Semantically
identical nodes (e.g. with the same labels) can be placed
in boxes using standard layout algorithms (e.g. forcedirected) (Figure 11) or in layers using their importance
for assigning the position within layers [GOB*10]. Furthermore, attributes or properties associated with graph
vertices can be used directly to specify the position of
these vertices, as with scatterplots [SA06, BCD*10]: the
layout computation is then straightforward and very fast.
Comparison of graph layouts: A recent comparison of
the readability of graph layouts using eye-tracking [Hua07,
PSD09] has shown that force directed layouts outperform
orthogonal and layered layouts on various user tasks. Another comparison of advantages and disadvantages of numerous current layouts was published by Hachul and J¨unger
[HJ07]. They compare the graph drawing outputs according
to various criteria finding that the HDE layout [HK02] is

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

T. von Landesberger et al. / Visual Analysis of Large Graphs

1727

transitions (from thick to narrow), curves and animated textures [TK08, HvW09, BBG*09]. These options may also be
combined. A comparison of graph drawing different ways
to represent edges was presented in [HvW09]. It shows that
arrows, although popular and widely used, do not perform
as well as colour and thickness transitions. Graph nodes and
edges often have associated attributes that are included in the
analysis. This study did not concentrate on attributed edges.
For such edge attributes, in particular edge weight, colouring
of edges or edge thickness can be employed. For the visualization of node attributes, a visualization of multivariate
data items (e.g. glyphs or radial plots) is employed. Various
possibilities of graph designs can be found in [Kre09].

Figure 11: Graph visualization using data semantics
[SA06]. c 2006 IEEE.

very fast but frequently produces layouts with many overlapping edges. In contrast, FM3 [HJ05] creates pleasing
layouts in reasonable time. Both algorithms together with
GRIP [GK01] scale well with graph size. A comparison
of user-produced versus automatically generated layouts
[vHR08, DLF*09] found also that the results of physicsbased algorithms, such as force-directed layouts, were preferred by the users.
Design of graph drawing: The above-mentioned techniques cover graph layout. In addition to specific layouts,
occlusion and readability of the display can be improved by
edge-bundling [Hol06, CZQ*08, TE10, LBA10] (Figure 12)
and the removal of node overlap [GH09, IAG*09]. Drawing of node-link diagrams also includes a suitable design
of edge and node drawing primitives. For directed graphs,
the representation of edge directions is of importance. There
are multiple design possibilities including usage of arrows,
colour transitions (from colour A to colour B), thickness

Figure 12: The use of edge bundling for improving graph
readability. (a) Ariginal graph and (b) graph with edge
bundling. [Hol06], c 2006 IEEE.

Visualization of multiple graph connected components:
For the visualization of multiple components, first a layout
for each individual connected component is calculated and
then a specific placement of these components on the screen
is performed. The most widely used placement method is
called packing. It lays out the components so that they do not
overlap and are space efficient. Dogrusoz [Dog02] compares
several 2D packing algorithms for graphs which use representation of graphs by their bounding rectangles. They include
strip packing, tiling and alternate-bisection. The polyomino
algorithm of Freivalds et al. [FDK02] uses a special representation of the graph objects, which substantially reduces the
unused display space in comparison to rectangular shapes.
Goehlsdorf et al. [GKS07] introduce new quality measures to
evaluate a 2D placement which yields more compact layouts
than the previously mentioned approaches.
Matrix representation: These techniques visualize the
adjacency matrix of a given graph, where edge attributes are
encoded in the matrix cells. They can display both directed
and undirected graphs, where the latter leads to a symmetric
matrix. The advantage of this representation with respect to
the node-link representation is the non-overlapping display
of graph edges, and the readability of the graph especially for
larger and denser graphs. The disadvantage is an increased
difficulty for users to follow paths, and a possible unfamiliarity of matrices to the users. In a matrix visualization, the
ordering of rows/columns plays an important role: similar to
layout for the node-link representation. Different strategies
to order the matrix can be employed (Figure 13). Prespicuous reordering can reveal clusters in the graph and other patterns. For a discussion of these, we refer to [MML07, DPS02,
HF06, EDG*08]. Although matrices are suitable for larger
graphs, they also suffer from scalability issues as they use
linear order of nodes along the matrix rows/columns. Therefore, interaction techniques and aggregated displays have
been proposed [vH03, AvH04, HF06, EDG*08, vHSD09]
(see also Sections 4 and 5).
Combination of matrix and node-link approach: Techniques using a combination of the two previous approaches
aim at overcoming their limitations by focusing on their
strengths. Three main approaches exist (Figure 14).

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

1728

T. von Landesberger et al. / Visual Analysis of Large Graphs

Figure 13: Examples of matrix reordering on graph presentation. (a) Using HDE algorithm. (b) Using NNTSP reordering. From [EDG*08], c 2008 IEEE.

• Multiple synchronized views: These techniques link the
matrix and node-link representation [HF06]. Both views
show the same data and are synchronized during exploration. Thereby, the user can concentrate on whatever
view is more suitable for the current task.
• Matrix with link overlay: The Matlink [HF07] approach
enhances matrix visualization with links at the border
of the matrix (connecting the nodes). Using link highlighting, the paths can be easily spotted in the Matlink
view and at the same time, the advantages of the matrix
representation are retained.
• Partial matrix and node-link representation: There are
two main approaches. First, Nodetrix [HFM07] combines both representations in one view, where nodelink diagrams display the overall graph structure of the
network, and adjacency matrices show communities.
The work also discusses three ways of link display for
this setting: aggregated links, underlying links, and underlying links with full size (Figure 15). These forms
can be also used for attributed links. Secondly, layered
graphs (directed acyclic graphs) can be represented by
so-called ‘quilts’. They arrange nodes in a matrix-like
form and connect them with orthogonal edges. In this
way, a clear view of the graph is created [WBS*08,
BDF*10].

3.1.3. Compound graphs
Literature on visualization of graphs with hierarchic
structure is relatively rare. We identify three main
approaches.
Node-link graph visualization techniques: These use
node-link diagrams for the lowest hierarchy level and then use
‘bubbles’ (enclosures) for various hierarchy levels. Examples
include TugGraph [AMA09] and GrouseFlocks [AMA08].
The advantage of this method is its intuitiveness. However,
for large graphs with many links, this view gets easily over-

Figure 14: Examples of combined matrix and node link
graph visualization techniques. (a) Multiple linked views
[HF06]. c 2006 IEEE. (b) Links connected to the matrix
view [HF07]. c 2007 Springer-Verlag Berlin Heidelberg. (c)
Node-link and matrix combined - part and part [HFM07]. c
2007 IEEE.
crowded (Figure 16a). The edge over-plotting problem can
be partially solved by edge bundling [Hol06] (Figure 12). Alternatively, only links between merged nodes can be drawn
(Figure 16c).

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

T. von Landesberger et al. / Visual Analysis of Large Graphs

1729

Matrix view with links: These visualizations combine
the generic node relationship visualization with a tree-based
visualization of the hierarchic node relationships. This is an
analogy to MatLink [HF07]. This view is very clear, however,
it may be difficult to understand the compound relationships
between nodes (Figure 16e).

3.2. Visual representation of dynamic graphs
Figure 15: Three ways of link visualization in a combined
node-link and matrix data representation using the NodeTrix
approach [HFM07]. c 2007 IEEE.

In this section, we discuss two categories of visual display
of the time changes on graph elements: using animation and
using static displays. Animated displays usually employ or
enhance static visualization techniques such as presented in
Section 3.1. Animation is a natural way of conveying the
change of the data over time. However, its effectiveness is
limited by human perception capabilities. Usually, users are
only able to recognize and remember larger changes in the
data. Therefore, highlighting of graph changes is used. It
allows for more effective spotting of differences between two
successive time points [APP10]. The static view is preferred
for more detailed analysis of data changes. Static views that
also incorporate the time-dimension of the data are more
complex. In the following, we categorize the visualization
techniques according to the type of data changes captured
into those that affect only data attributes, and those that
affect also data relationships. Please note that visual analysis
of changes in dynamic graphs is related to comparing graphs.
Graph comparison is discussed in Section 5.2.

3.2.1. Trees

Figure 16: Visualization techniques for compound graphs
[Hol06], c 2006 IEEE. (a) Node-link visualization with
grouped nodes in ‘bubbles’. (b) Links overlaying a treemap
visualization. (c) Compound drawing using enclosures and
links between merged nodes. (d) ArcTrees - links overlaying
a 1D treemap [BDJ05]. (e) A matrix view for showing relations between entities linked with tree view of the nodes as in
MatLink approach [HF07].

Treemap-based:
A treemap visualization of the node
hierarchy uses overlaid links between nodes [FWD*03]
(Figure 16b). This approach may suffer from strong overplotting in case of many links between nodes of the hierarchy. Therefore, edge bundling is advised to improve the
readability of the display [Hol06] (Figure 12). Similarly, also
1D treemaps with links between nodes, so called ArcTrees
[BDJ05] can be employed (Figure 16d), but these do not
scale well for large hierarchies.

For the visualization of dynamic trees with only data attribute changes, either treemaps with time series in the leaf
nodes [DHKS05, SKM06] or the so-called Timeline Trees
[BBD08] can be used (Figure 17a and b). Timeline trees
show the hierarchy on one side and the time sequences on
the other side of the view. The treemap representation directly shows the hierarchic structure and time-variation in
one combined view. This allows for an easy comparison of
the time-developments across the hierarchy. However, the
comparison is affected by different node sizes and difficult
for small nodes. Therefore, a specific treemap layout preserving the aspect ratio has been developed [DHKS05, SKM06].
Timeline Trees assign the same space to all nodes. The vertical positioning of time lines allows for very good comparison
of the values at the same time points. The separation of the
time dimension from the hierarchic structure, however, complicates the comparison of tree branches.
For visualization of dynamic data with structural changes,
animated views are used. Card et al. [CSP*06] have used
and extension of DOI Trees [CN02], [HC04] to visualize
the changes of an administration over time; a time-slider is
used to control the visualized time-span. Animated graphs
(Section 6.1) can be employed in general. In particular, the

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

1730

T. von Landesberger et al. / Visual Analysis of Large Graphs

data. Alternatively, Tu and Shen [TS07] propose also static
comparison of two time points in a treemap visualization
(called contrast treemap).

3.2.2. Directed and undirected graphs
For attribute changes only, techniques for visualization of
static graphs can be combined with visualizations of individual time-dependent data items (e.g. colour charts [SLN05])
are used (Figure 18a). The advantage of this approach is the
large number of the available graph layouts.
In case of structural changes, time-dependent graph layouts (animated graphs) need to be employed [CBTT95,
Nor96, DGK01, EHK*03, KG06]. In animated graph visualization (in analogy to animated tree visualization), a stable graph layout, which changes minimally, is of essence.
A stable graph layout preserves the mental map of the
user. It enables the user to follow changes on the screen
[ELMS91, DGK01] and thereby it facilitates the analysis of
graph changes. In laying out dynamic graphs, there is a large

Figure 17: Visualization of time-dependent trees. (a) Time
line tree [BBD08], c 2008 ACM. (b) Time series in the
treemap nodes [DHKS05], c 2005 IEEE. (c) Animated hierarchic circlular plots [TS08], c 2008 IEEE.

layouts based on the Sugiyama approach [GBPD04] are suitable. Alternatively, animated treemaps [GF01, TS07] or icicle/circular plots [TS08] can be used (Figure 17c). When
choosing the graph layout, the layout stability needs to be
taken into consideration. For example in the treemap representations, the spiral layout [TS07] achieves a high continuity
with high stability of the layout. Strip and pivot-by-middle
layouts have also been shown to have higher layout suitability [BSW02]. All these layouts are preferable in spite of their
higher aspect ratios in comparison to the squarified treemap.
Furthermore, dynamic Voronoi treemaps [SFL10] offer both
good aspect ratios and stable layouts for displaying dynamic

Figure 18: Visualization of time dependent graphs. (a) Time
series in nodes [SLN05], c 2005 IEEE. (b) Animated graphs
[FT08], c 2008 IEEE.

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

T. von Landesberger et al. / Visual Analysis of Large Graphs

1731

difference between strategies for drawing graphs with known
histories and those that need to be adjusted in real-time depending on new data streams. A paper of Frishman and Tal
[FT08] addresses this particular issue by proposing an online algorithm for dynamic layout implemented on the GPU,
thereby accelerating the layout computation (Figure 18b).
Instead of animation, Brandes and Corman [BC03] use the
third dimension to show the evolution on time. GraphDice
[BCD*10] uses interaction to switch between projections
where time can be mapped to one dimension.
3.2.3. Compound graphs
There are only few techniques that visualize time-varying
compound graphs. They employ either animation or static
data representations.
Kumar et al. [KG06] present a specific layout for animation of a node-link diagram with transparent ‘bubbles’ for
the hierarchic grouping of nodes (Figure 19a). Frishman and
Tal [FT04] present a layout which focuses on maintaining
the clustered structure during the animation. The groups of
nodes are displayed using bounding boxes around the groups.
Reitz et al. [RPD09] use dynamic graph layouts for showing
areas of interest in dynamic compound graphs.
A static approach to visualization of dynamic compound
digraphs using TimeArcTrees was presented by Greilich et al.
[GBD09] (Figure 19b). They show a sequence of node-link
diagrams with horizontal node alignment in a single view,
thereby supporting their direct comparison. TimeRadarTrees
[BD08] use radial tree layouts for the hierarchy and a sequence of circle segments for representation of the temporal
change of the structure (edges) of the Digraph (Figure 19c).
This view easily gets complex for larger graphs.
4. User Interaction in Graph Visualization
Interaction helps users solving tasks connected to exploration of graphs. These tasks can be of different nature such
as topology-based or attribute-based [LPS*06]. Topologybased tasks include finding adjacent nodes, or determining
connections between nodes. Attribute-based tasks include,
for example searching for nodes with specific values, and
finding edges of certain types. For each task, one or more interaction techniques can be employed. Standard interaction
techniques such as zooming, panning or brushing and linking
[CMS99, War00] are commonly used in graph visualization.
In addition, specialized techniques have been developed for
interactive visual graph navigation and exploration.
Interaction and exploration are deeply inter-related. Some
graph analysis systems such as Pajek [dMB05] claim to support exploratory graph analysis by chaining complex operations on graphs without showing the intermediary results. However, Ahlberg et al. describe interactions and more

Figure 19: Visualization of time varying compound graphs.
(a) Animated graphs by Kumar et al. [KG06], c 2006 IEEE.
(b) TimeArcTrees [GBD09], c 2009 held by the authors. (c)
TimeRadarTrees [BD08], c 2008 held by the authors.

specifically dynamic queries [AWS92] as required to truly
achieve exploration. The main reason is cognitive: exploring
requires several hypothesis to be maintained in short-term
memory which is very limited in capacity. Planning complex
operations without feedback or using a textual syntax consumes all the short-term memory and exploration becomes
impossible from short-term memory alone. Therefore, providing interactions with immediate feedback for the most
frequent operations supports exploration. Other less frequent
operation could still be done using more complex mechanisms, as explained in the next section on graph analysis.

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

1732

T. von Landesberger et al. / Visual Analysis of Large Graphs

The categorization of interaction techniques can be based
on various criteria such as task, user intention [YKSJ07]
or user action [EF09]. These criteria are interrelated. For
example, one task may include performing several actions, or
one task may correspond to several user intentions. Moreover,
one user intention can be achieved by several user actions or,
vice versa, an action can suit several intentions.
We categorize interaction techniques according to stages
in the Information Visualization reference model of Card
et al. [CR98], [CMS99] and user actions. The reference
model has three stages: data, visual form (a.k.a visual abstraction) and view. The classification criterion is whether
the user action affects the data (the selection of the displayed
data or the data values), the visual display of the data (visual parameters or visual representation), or the view. Data,
visualization and view manipulation can be used for interactive data exploration and navigation. This categorization
follows the idea of Elmqvist and Fekete [EF09] and Bertini
and Lalanne [BL09]. Please note that these three types of interaction are sometimes closely connected. For example, data
manipulation may automatically lead to changes of visual parameters (e.g. data filtering can influence the graph layout, or
zooming can be combined with data filtering forming a type
of semantic zooming).

Figure 20: Example of edge lens interaction. (a) Original
view without lens. (b) Using edge lens From [WCG03], c
2003 IEEE.

4.1. View interaction
4.1.1. Panning and zooming
Panning and zooming allow to navigate in any direction and
change the zoom-level in the view. For node-link diagrams,
a specific type of panning (guided panning) has been proposed. It allows to navigate along edges of a selected node
and thereby to explore the structure of the graph. It can be
combined with automatic zooming on the edge and distortion of end-node position closer to the currently selected node
[MCH*09].
4.1.2. Magic lenses
Owing to the limited display space, showing the whole data
set may lead to strong over-plotting or very small (up to,
unreadable) data items. Magic Lenses [BSP*93], including
distortion techniques, change the representation or allocate
more space to items in focused areas and thereby, improve
the readability of the data of interest. They are used both for
node-link and space filling graph visualization techniques.
The changes can concentrate either on one area or on multiple areas of the screen. For geometric changes, the technique is called fisheye views. Interactive selection of the focus area helps to explore different parts of the data in more
detail.
• Single focus: Graphical fisheye views were introduced in
[SB92]. So-called edge lenses resolve strong overlaps of

Figure 21: Examples of different types of edge lens interactions. (a) Original view without lens. (b) Using local edge
lens. (c) Using bring neighbors lens. (d) Using composite lens
which combines (b), (c) and Fisheye lens. From [TAvHS06],
c 2006 IEEE.
edges in the view. They displace the edges to a larger
area [WCG03] (Figure 20). This approach is especially
useful for geographic-based graphs, where node repositioning is not desired and therefore, cannot help to solve
edge overlap. Another approach uses filtering of interesting edges in a specified area, or moving neighbour nodes
closer to a selected node relying on the graph structure [MCH*09]. This type of node position change can
be combined with geometric view distortion [TAvHS06]
(Figure 21). In node-link visualization of hierarchies,
a degree-of-interest function can be used for allocating
more area to more interesting parts of the tree, for example in DOITrees [CN02, HC04].
None-geometric magic lenses include Excentric Labels
and Colour Lenses. Excentric Labels [FP99, BRL09]
show labels or other statistics for items contained in dense
focus regions (nodes or matrix cells). The information

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

T. von Landesberger et al. / Visual Analysis of Large Graphs

1733

4.2. Visual abstraction interaction
In these approaches, the change of the visual presentation of
the data concerns adjusting the type of visual presentation
and its parameters.
Most of the graph visualization systems provide standard
dialog boxes and widgets to change the visual abstraction
parameters, including the layout technique and its various
parameters. Currently, very few systems allow the interactive
manipulation of layout parameters, except using indirect manipulation such as sliders, list boxes, radio buttons and check
boxes. Rich visualization systems provide a large number of
these indirect manipulation widgets which use an important
amount of the screen real-estate and force users to search for
the right widget by reading their labels and trying to make
sense of them, which can be quite long and tedious. This
is why several research work is devoted to providing more
direct mechanism to change the parameters.

4.2.1. Changes of visual parameters
These techniques affect the parameters of the visual presentation. They include highlighting of items and other
techniques.
Highlighting: The emphasis of interesting items is a standard interaction technique. Recently, new techniques for
highlighting a node and its neighbourhood using hotbox and
lasso selections were presented in [MJ09].

Figure 22: Multiple foci in a treemap. (a) Original view. (b)
Using balloon focus. From [TS08], c 2008 IEEE.

is displayed outside the focus region with connectors
linking the nodes/cells to their related label. Colour
lenses [EDF10] dynamically adapt the colour range of
items inside the focus region to better use the screen
colour range when mapping values with a very large dynamic to the colour of nodes or matrix cells.
• Multiple foci: Multiple foci distort several view areas
at the same time. It is useful for comparing various
parts of the display or focusing on several items that
are spread across the view. In node-link diagrams either
magnification of the areas of interest [SZG*96, TS99]
or space folding (shrinking of area out of focus) can
be used [MGT*03, ERHF09] (Figure 28, bottom right).
For treemaps, the so-called balloon focus can be used
for enlarging multiple items in a treemap [TS08]. This
approach keeps the form of other areas keeping relative
position of items unchanged (Figure 22).

Brushing and linking: Multiple coordinated views are
used to show the data from different perspectives. In these
views, changes in one visualization (e.g. highlighting) are
automatically transferred to the other views. For example, a
matrix view coupled to a hierarchical view of the data can be
used to reveal important information in the data [AvH04].
Semantic zooming: Semantic zooming combines zooming with an increasing level of detail. In particular, graph
aggregation can be used for gaining a coarser view on a large
graph. The semantic zooming increases the level of detail by
drilling down to lower levels of aggregation of the original
data [EDG*08, AvH04].

4.2.2. Changes of visual scheme
Changes of the visual scheme cover changing of the type
of data visualization either by changing the layout or by
changing the visual mapping.
Layout change: In node-link diagrams, layout change
(adjustment) affects the positions of the data items on the
screen (Section 3). It can be performed by changing of the
layout type with automatic recalculation of the new layout,
by manual movement of nodes or by adjusting the layout
parameters including automatic readjustment of the layout.

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

1734

T. von Landesberger et al. / Visual Analysis of Large Graphs

be visualized by filtering according to criteria or by manual
data selection. The disadvantage of this approach is the need
to show the whole graph at the beginning, which may require
higher computational time for the layout and may lead to
occlusions owing to the limited screen size. The advantage
is gaining an overview of the graph structure first and then
concentrating on interesting parts.

Figure 23: Transformation of visual representation of a
graph from node-link to matrix view. The picture shows five
stages of this process [HFM07], c 2007 IEEE.

When concentrating on user-defined changes to graph layouts, an approach to easy selection and layout change of
nodes and subgraphs was presented in [MJ09]. Furthermore, interactive adjustment of the layout constraints was
presented in [DMW09]. For matrix visualizations, userdriven reordering of matrix representation was described in
[HF06].
Change of visual representation: The change of the type
of data presentation, for example from a matrix to a node-link
diagram was presented in [ZMC05, HFM07]. This change
can affect the whole data view [HFM07] (Figure 23) or only
a part of it [ZMC05, HFM07]. By changing the visual representation, new insights into the data can be reached. To be
able to follow the changes, smooth animations across transitions should be used.

4.3. Data interaction
Data-level interaction affects the selection of the data to be
displayed, or may change the data values and structure.
Some operations can be done interactively but general
graph analysis system provide more sophisticated mechanisms including scripting languages or powerful macro facilities to perform more complex operations.

4.3.1. Data filtering
These interaction techniques influence which parts of the
data set are displayed. The data filtering may follow three
paths.
A top down approach: This approach starts from the
whole graph and then constrains the part of the data set to

A bottom up approach: This approach starts from one selected node [Fur86, AF07, vHP09] and successively shows
more nodes/connections on demand. There are two main
methods of choosing the additional nodes/edges to be displayed: based on graph structure or based on a degree-ofinterest function. The advantage of this approach is that only
the most interesting part of the data set is visualized, however
it is difficult to determine the starting point for the exploration
and to define the degree-of-interest function. Therefore, we
consider these methods in more detail.
• Navigation based on graph structure: These techniques
reveal/hide that part of the graph that is determined by
the connections between nodes. In graphs, neighbourhood traversal shows neighbour nodes of a focus node
up to a certain level [HB05]. For hierarchies, several
traversal methods for have been described in [EF09]. The
hierarchy traversal methods include: (1) above traversal, where nodes up to a certain level are shown; (2)
below traversal, where nodes starting from a selected
level are displayed; (3) level traversal, where nodes at
a certain level are displayed; (4) range traversal, where
nodes in a range of levels are shown and (5) unbalanced
traversal, where certain branches of a tree are visible
(Figure 24).
• Navigation based on a degree of interest function: These
methods start from a selected node, and next the edges
and nodes of highest interest are shown [Fur86, vHP09].
For the determination of the interesting nodes, a specific degree of interest (DOI) function is used. Depending on the specification of the DOI function, various
graph exploration paths can be followed. These DOI
functions were used for building specific views on trees
(DOITrees,SpaceTree) [CN02, HC04, PGB02]. In the
work of Furnas [Fur86], the DOI of a node depends on
the distance to the node in focus and the a priori interest in this node (e.g. according to node importance in
the network, or node properties). Van Ham and Perer
[vHP09] extended this function with user interest (UI),
which reflects the current specific exploratory focus of
the user.
A middle-out approach: This method combines both
bottom-up and top-down approaches. It starts with a coarsened graph (middle) and then interactively either reduces or
increases the graph coarsening level by hiding visible nodes
or showing additional nodes [WMC*09]. For determining

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

T. von Landesberger et al. / Visual Analysis of Large Graphs

1735

Figure 25: Interactive editing of a graph hierarchy. (a) Creating a new aggregation node by merging of nodes. (b) Deleting an aggregation node, thereby revealing the underlying
merged nodes. From [AMA08], c 2008 IEEE.
[AMA08] allows the user to add and remove aggregated
nodes on demand (Figure 25). This allows for variable views
on the graph and its structure.
5. Graph Analysis
Figure 24: Hierarchy traversal strategies [EF09], c 2009
IEEE. (a) Above traversal, (b) below traversal, (c) level
traversal, (d) range traversal and (e) unbalanced traversal.

the middle coarsening level and the next interactive steps,
graph algorithms are used (Section 5).

Algorithmic graph analysis is beneficial during all stages of
the visual graph analysis process. Relevant techniques allow,
for example to reduce a large graph to a smaller graph prior
to visualization, to search for specific graph structures of
interest or to find similarities and dissimilarities for generating comparative graph views. In this section, we describe a
number of graph analytical approaches.
5.1. Analysis of graph structure

4.3.2. Changes of data values
In these approaches, the change of the displayed data set
result from direct data value manipulation. Specifically, the
user can change the data values on one level or create/change
graph aggregations.
Graph editing: The user can interactively delete or add
nodes or edges directly in the visual interface. These graph
editing actions trigger adjustment of the layout, while still
maintaining the layout style and, where reasonable, the current layout topology. Graph editing affects the structural
properties of the graph. In particular, the changes can affect specific types of subgraphs (so-called motifs). Automatic
identification and highlighting of such structural changes was
presented in [vLGRS09].
Interactive graph aggregation:
For simplification of
graphs, graph aggregation is often used. The graph aggregation can be pre-defined, or determined interactively by the
user [HF06, AMA08, AMA09]. For example, GrouseFlocks

In most user tasks, the analysis of the relationships between
entities in the graph and the assessment of the global graph
structure plays the key role. These tasks may be effectively
supported by a combination of algorithmic graph analysis
and interactive visualization. The algorithmic methods allow,
for example to calculate node/edge properties, identify clusters in the graphs, etc., the results of which are visualized
interactively. In the following, we summarize the methods
according to user tasks starting from more simple to more
complex tasks.
5.1.1. Identification of important nodes
In networks, some nodes play a specific role owing to their
position within the network. For example, so-called hubs and
authorities can be identified and visualized in the network,
enabling faster analysis of the graph [OPPROG09]. The importance of nodes and edges is measured by derived quantities (i.e. network metrics) such as centrality-based measures

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

1736

T. von Landesberger et al. / Visual Analysis of Large Graphs

user-specified [AMA08], on clustering results based on node
properties [PS06], or depend on structural properties of the
graph [vLGRS09] (Figures 5 and 25).

5.1.5. Identification of the impact of graph changes on
the structural properties

Figure 26: Interactive graph motif search and visualization.
From [vLGRS09], c 2009 held by the authors.
[Fre79] and ranking-measures [WS03]. Network metrics can
help the analysts to explore networks. Color coding of nodes
or edges by metric values, or displaying metrics and networks in multiple linked views (as lists, scatterplots or parallel coordinates) are used in this respect. They offer the possibility to interactively chose the metrics of interest and to
filter/highlighting nodes according to these metrics [CJM04,
PS06, BCD*10, VMCJ10].
5.1.2. Analysis of connections between two nodes
Besides focusing on single nodes, relations between two
nodes can be analysed, typically by calculation and highlighting of shortest paths between the entities. Usually,
such analysis is combined with interactive selection of
two entities of interest [HB05, HF07, TK08, GBD09]
(Figure 14b).
5.1.3. Analysis of graph substructures
In many applications, specific types of substructures (i.e.
motifs) play an important role. For example, in social networks, cliques identify highly connected communities, or
feed-forward motifs (substructures in form of a triangle
where directed edges exist from nodes A–B, A–C and
B–C) in biologic networks indicate the functional properties of the network [Sch08]. To support the substructure analysis, these motifs can be calculated and visualized in the network [MMO05, SS05, KSS06, vLGRS09,
MJW*09] (Figure 26). The type of structure can be interactively chosen by the user in order to support various analytical
tasks.

In time-dependent graphs, the role of the nodes can change
over time, therefore analysis and visualization of topologic
properties (e.g. betweenness centrality) of selected nodes has
been proposed [PD08, PRB08]. In addition, when analysing
user-defined changes (in what-if-scenarios) the impact of
node or edge deletion/addition on local substructure can be
analysed and highlighted [vLGRS09].

5.2. Graph comparison
One specifically important analytical task is the examination
of the similarities and differences between multiple graphs,
especially focusing on structural aspects. Usually, structural
differences are in the focus. Such difference may be identified
by the identical node labels in both graphs, or by graph
matching algorithms. After the matching, visualization is
employed to explore the differences [AWW09]. There are
various types of analysis which we describe next.

5.2.1. One-to-one node comparison of two graphs
Probably the most common task in graph comparison is
the matching of individual nodes from one graph to individual nodes of the second graph. The VisLink visualization approach [CC07] was developed to support this task.
It shows both graphs on separate planes in 3D, and draws
matching links between corresponding nodes (Figure 27a).
For comparison of hierarchies, a similar approach, based on
drawing the two hierarchies in opposite parts of the display
and linking of their leaf nodes was proposed in [HvW08]
(Figure 27b). In both cases, the visibility of matching links
can be increased by edge bundling.

5.2.2. One-to-many nodes comparison of two graphs
One-to-many nodes comparison concerns correspondence of
one node in one graph to many nodes in another graph. Di
Giacomo et al. [GDLP09] developed a system that visualizes
these one-to-many connections with low overlapping of links
(Figure 27c).

5.1.4. Analysis of graph structure on several aggregation
levels

5.2.3. Structural differences between two graphs

User-defined or data-driven graph aggregation can reveal relationships between groups of entities in a graph. The grouping may be based on categoric node attributes [Wat06], or
on a pre-defined node hierarchy [AMA09]. It can also be

When analysing structural differences between two graphs,
analysts are often interested in identifying which links or
parts of the graphs correspond to or differ from the other
one. For the analysis of trees, the TreeJuxtaposer system

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

T. von Landesberger et al. / Visual Analysis of Large Graphs

1737

Figure 28: Tree comparison. (a) Schema of the tree comparison. (b) Example of tree comparison using highlighting
of tree differences. The left view shows the traditional view,
the right view is distorted to emphasize important parts of
the tree [MGT*03], c 2003 ACM.

Figure 27: Visualization of graph comparison. (a) One-toone graph matching [CC07], c 2007 IEEE. (b) One-to-one
hierarchy matching [HvW08], c 2009 held by the authors. (c)
One-to-many graph matching [GDLP09], c 2009 SpringerVerlag Berlin Heidelberg.
supports to analyse and highlight structural differences between two trees [MGT*03] (Figure 28). For general graphs,
Fung et al. [FHK*09] use both multilevel graph views following the VisLink approach [CC07], and overlapping of
two networks with highlighting of common structural parts
(Figure 29a). Archambault [Arc09] uses graph aggregation
and graph filtering to reveal structural differences between
two graphs (Figure 29b).

5.2.4. Structural similarity among multiple graphs
Structural comparison of multiple graphs is often based on
their description by several graph properties such as graph

size, density, connectedness, etc. (see also Section 2.1). These
properties can be used for exploration of large sets of graphs
[FPSG10], or for the determination of structural similarity
between graphs. Graph similarity may serve as an input
for clustering of graphs (grouping similar graphs). Clustering helps gaining overview of types of graphs in large
graph databases. Interactive combination of graph clustering
and visualization of clustering results has been proposed in
[vLGS09] (Figure 30).

6. Concluding Remarks and Future Challenges
Research on visual graph analysis deals with the interrelated issues of graph drawing, graph presentation,
human–computer interaction and analytics. This state-of-theart report represents an encompassing overview and systematization of recent developments in this field. Many advances
have been made on individual parts of visual graph analysis.
On the other hand, the surveyed literature discusses many
important open challenges, that researchers see in need of
work. In the following, we summarize key research challenges. The discussion of the relevant topics is divided into
three broad areas: graph visualization and interaction, visual
analysis systems and conceptual issues.

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

1738

T. von Landesberger et al. / Visual Analysis of Large Graphs

Figure 30: SOM-based graph clustering for analysis of
types of graph data space and similarities between graphs
[vLGS09], c 2009 IEEE.

thereof, will continue. In particular, user involvement in the
graph layout process involving analytical expertise of the user
is a promising approach and may lead to easier interpretation
of the drawings.

Figure 29: Visualization of structural differences between
two graphs. (a) A schematic illustration of graph difference.
(b) Visualization of graph differences using network overlapping [FHK*09], c 2009 IEEE. (c) Visualization of graph
differences using difference hierarchies [Arc09], c 2009 held
by the author.

From an analytical perspective, also the understanding
of the meaning of the nodes and edges, besides their
global structure, is necessary. In particular, the readable/nonoverlapping drawing of nodes, edges and their labels is an
important issue. When displaying graphs with labels, even
smaller graphs can easily lead to overcrowded displays. This
topic is gaining more interest in visual analytics research.

6.1. Graph visualization and interaction

6.1.2. Graph types in graph drawing

6.1.1. Scalability issues in graph drawing

In recent years, the variety of considered graph types has
increased substantially. In particular, there has been a large
amount of work on drawing dynamic and compound graphs.
When drawing dynamic graphs, layout stability and on-line
graph drawing are the main points of interest for the future
research. In visual analysis, the understanding of the graph
changes needs to be supported by stable layouts that preserve the mental map of the analyst thereby allowing them
to follow changes on the screen [DGK01]. These layouts
should be very stable for minor graph changes and, at the
same time, be able to effectively show large graph changes.
Although a non-trivial challenge, if successfully supported it
may lead to easier spotting of structural changes in the graph
and thereby, more efficient and effective analysis. On-line
graph drawing, where the data stream is unpredictable, poses
major challenges in this respect.

There has been much interest in the development of faster
layout algorithms that produce more readable layouts for
large graphs, also using parallel computing, as provided, for
example by current CPUs and GPUs. It is recognized that
using a combination of automatic graph layout generation
and user-oriented, interactive layout steering, better layouts
can be obtained. As graphs get larger, graph filtering and
aggregation have been the main means of graph simplification allowing to draw them. Alternatively, the limited screen
space leading to strong over-plotting in large graph visualization can be avoided by drawing graphs on large screens,
where specialized layouts can be applied [MGL06]. It can
be foreseen that work on more sophisticated graph layouts
revealing the main structures in the whole graphs, or parts

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

T. von Landesberger et al. / Visual Analysis of Large Graphs

Compound graphs as a combined graph type, including
aggregated graphs, represent a complex data type. The main
analytical problem there is the understanding of both types
of connections in a graph, as well as the understanding of
the graph structures on multiple abstraction levels. This is
a very cumbersome task, which can be supported by graph
visualization systems. However, the drawing of such complex
graphs is still in its infancy.
In the future, also further graph types such as hypergraphs
[KKS09], or graphs with overlapping sets of nodes [HD10]
may become more prominent in visual graph analysis research.

6.1.3. Graph uncertainty
Graph visualization by now mainly deals with drawing
graphs with given data, largely disregarding graph uncertainty. Visualization of uncertain data is a general challenge
in visual analytics. As has been shown in [GS05], the degree of data certainty affects analytical decisions. Therefore,
it is an important issue in visual graph analysis. In graph
visualization, various types of uncertainty can be regarded.
The uncertainty can relate to the graph structure (the existence of nodes and edges between them) and/or on graph
attributes (edge and node attributes). For displaying node and
edge attribute uncertainty, various methods from multivariate
data visualization with uncertainty (see, e.g. overviews given
in [PWL97, THM*05, GS06]) could be applied. However,
their applicability to graph visualization needs to be studied. When dealing with structural uncertainty, there are few
dedicated techniques. For example, CandidTree [LRCP07]
uses transparency and colour for conveying uncertainty in
merged graphs. Therefore, it is expected that more methods
will be developed in the future to address graph uncertainty
issues.

6.1.4. Perception issues in graph visualization
The understanding of graph structures in visualization
strongly depends on human perception capabilities. Studies
of human perception for graph drawing have recently focused
on comparison of graph understanding using varying graph
layouts. In graph design, studies on edge visualization have
shown that the edge design has an influence on the graph
reading. These various studies have given rise to new problems in graph visualization, which need to be studied in the
future.

6.1.5. Graph interaction techniques
In graph exploration, recently new interaction techniques for
various graph types have been developed. These techniques
increasingly make use of the structural properties of the graph
to interactively navigate in the graph (e.g. [TS08, vHP09,

1739

TAS09]). This tendency supports the analytical purpose of
graph visualization, as analysts can more easily examine the
structural relationship between entities in the graph. In the
future, this direction can be extended.

6.2. Visual analysis systems
6.2.1. Visual analysis systems
In line with Keim’s visual analytics process [KAF*08], modern visual graph analysis systems should interactively integrate data pre-processing, interactive data visualization and
building and visualizing of data models for gaining knowledge from the data. Many visual analysis techniques already include parts of this process. However, many of them
rely on black box computations (e.g. automatic graph preprocessing, automatic calculation of graph similarities or
cliques). To support the variable hypothesis-insight-driven
analytical process, more user involvement in the process
should be aimed at. The user should have full control of
the type of the analysis and its parameters. As this process
includes multiple loops, interactive feedback possibilities
are necessary. Therefore, integrated visual analysis systems
should include such features.

6.2.2. Integration of various data types in visual analysis
Graphs as data structures capturing relationships between entities are part of a larger set of data types examined in various
applications. Usually, the analysis of graphs is undertaken in
combination with analysis of related data sets, or other data
sets are transformed into graphs for their analysis [CGK*07,
BMGK08]. For analysis of the various data sets as a whole,
the sole focus on visual graph analysis (in particular graph
exploration) without taking other relevant data into account,
is not suitable. In the future, larger integrated visual analytics systems combining research results from several areas are
needed.

6.2.3. Addressing new analytical tasks
With the increasing data set sizes and their complexity, new
analytical tasks arise. For example, one such task is the examination of the similarities and differences between graphs.
This task builds on the examination of the structure of one
graph as discussed above. Lately, several papers about visual graph comparison for both trees and general graphs
have been published (Section 5). The comparison can concern only two graphs, trying to match nodes and edges between them. It can focus on finding similar graphs for one
particular graph from a large set of graphs. It can concern
gaining an overview of the types of structures in a large set
of graphs. It can concentrate on analysing the similarities
of whole graphs or on matching of parts of one graph to
other graphs. Owing to its complexity, and the variety of the

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

1740

T. von Landesberger et al. / Visual Analysis of Large Graphs

problems, it is foreseeable that the research in this area will
need to continue.
6.2.4. Collaborative visual graph analysis
For solving complex analytical tasks concerning multiple
large related data sets, a collaboration of several experts is
necessary. Recently, the development of collaborative visual
analysis systems has received attention [BMZ*06, Kee06,
ITC08]. However, collaborative visual graph analysis is not
represented prominently. Therefore, the study of collaborative systems including graph data sets would be of advantage.
The specifics of graph exploration, in particular, need to be
studied.
6.2.5. Insight provenance for visual graph analysis
In Visual Analytics applications, the analytical processes are
often long-running and/or distributed. To support the reproducibility, reversibility and automation of these processes,
user tracking of the graph interaction steps is necessary. As
a basis for tracking, a taxonomy of graph interaction techniques is necessary. The theory of interaction is a general
Visual Analytics challenge [TC06]. Although several interaction taxonomies also for insight provenance have been recently introduced [GZ08, HMSA08], their applicability and
the need for their adaptation to graph analysis needs to be
studied. In return, specific classifications of graph interaction
techniques could be developed. In this report, we have aimed
to classify them for gaining a concise overview of the current
state of the research. This classification, however, may not
be directly applicable to user tracking applications.
6.2.6. Applications
For analytical purposes, standard graph visualization and
analysis methods need to be adapted to the specific needs of
the particular application domain. For example, there are specialized systems for visualization of bio-chemical structures,
shareholding structures and many more. Designing graph
visualization systems with fast adaptability to various data
types, analytical tasks and application-dependent analytical
processes is still a challenge. Even within one application,
often, the network to be analysed needs to be constructed
from heterogeneous data sources, and the focus of interest
(attributes of nodes and edges) varies dynamically. Designing
such systems is obviously not trivial.
6.3. Conceptual issues
6.3.1. Evaluation
Evaluation of usability and user acceptability of the techniques including development of the evaluation methodologies is an important future challenge for the Visual Analytics research area [KMS*08, TC05, TC06, LK07]. Currently,
there is a broad discussion in the Visual Analytics com-

munity on the appropriate methodology for the evaluation
of Visual Analytics and information visualization systems.
This discussion applies also to the visual analysis of graphs.
This challenge is expressed in the words of Plaisant et al. in
the introduction to the special issue of Computer Graphics
and Applications [PGS09] ‘Assessing VA [Visual Analytics] technology’s effectiveness is challenging because VA
tools combine several disparate components, both low and
high level, integrated in complex interactive systems used by
analysts, emergency responders, and others. . . . Traditional
evaluation metrics such as task completion time, number of
errors, or recall and precision are insufficient to quantify the
utility of VA tools, and new research is needed to improve
our VA evaluation methodology’. When concentrating on
the evaluation of graph visualization techniques, several approaches have been proposed, ranging from quantitative to
qualitative studies. Controlled experiments measuring accuracy and duration of user tasks have been used, for example, to compare tree visualization techniques [Kob04, AK07,
ZK08]. An extension of these two main measures, the socalled cognitive load measure was used for evaluating general graph visualizations [HEH09]. Moreover, eye tracking
can be employed for quantitative evaluation, for example for
comparing graph layouts [Hua07, PSD09]. These controlled
studies offer a quantitative comparison across techniques,
however often suffer from the focus only on selected low level
tasks. Note that the formulation of these tasks can influence
the comparison result [ZK08]. A combination of quantitative and qualitative study has been performed for comparing
graph layouts produced by both in a manual and in an algorithmic way [DLF*09]. The subjective user view has been
used for ranking of best layouts. A qualitative view on the
effectiveness of visual analytics techniques can be gained by
use case studies conducted by domain experts (e.g. in [PS08,
MGT*03]). This method offers insights into the usability of
the systems in real world scenarios, however does not allow
for standardized quantitative comparison of the techniques.
The choice of appropriate evaluation method and its design
is still discussed in the community.
6.3.2. Taxonomies and benchmarks
The field of visual graph analysis would profit from more
elaborate taxonomies for tasks, interaction, visualization
techniques, measures for quality, and benchmarks for comparing the new techniques. They would support both the
design and development of visual analytic systems and their
evaluation. Although several taxonomies and sample data
sets exist, a more broader scope of theory and data aspects
is needed owing to the large set of problems/tasks in visual
analysis of graphs.
Acknowledgments
We thank Vyara Ivanova, Anna Mitkova, Melanie G¨orner
and Robert Rehner for their helpful comments and

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

T. von Landesberger et al. / Visual Analysis of Large Graphs

suggestions. We are grateful to the anonymous reviewers
for their constructive and useful comments. We thank all
authors and copyright holders of the original figures for
agreeing to their reproduction in this paper. This work
was partially supported by the German Federal Ministry of
Economics and Technology within the THESEUS project
(http://www.theseus-programm.de/). It was also partially
supported by the German Research Foundation (DFG) within
the project Visual Feature Space Analysis as part of the Priority Program on Scalable Visual Analytics (SPP 1335).

1741

alization Symposium (Beijing, China, 2009), IEEE Press,
pp. 113–120.
[APP10] ARCHAMBAULT D., PURCHASE H. C., PINAUD B.: Difference map readability for dynamic graphs. In Proceedings of International Symposium on Graph Drawing (Konstanz, Germany, 2010), Lecture Notes in Computer Science (Springer Verlag, Berlin), pp. 50–61.
[Arc09] ARCHAMBAULT D.: Structural differences between
two graphs through hierarchies. In Proceedings of Graphics Interface (Toronto, ON, Canada, 2009), Canadian Information Processing Society, pp. 87–94.

References
[AAM07] ARCHAMBAULT D., AUBER D., MUNZNER T.: Topolayout: multilevel graph layout by topological features.
IEEE Transactions on Visualization and Computer Graphics 13, 2 (2007), 305–317.
[ACJM03] AUBER D., CHIRICOTA Y., JOURDAN F., MELANCON
G.: Multiscale visualization of small world networks.
In Proceedings of IEEE Symposium on Information Visualization (Washington, DC, USA, 2003), IEEE Press,
pp. 75–81.
[ADWM04] ADAI A. T., DATE S. V., WIELAND S., MARCOTTE
E. M.: LGL: creating a map of protein function with
an algorithm for visualizing very large biological networks. Journal of Molecular Biology 340, 1 (June 2004),
179–190.
[AF07] APPERT C., FEKETE J.-D.: Naviguer dans des grands
arbres avec controltree. In Proceedings of International
Conference of the Association Francophone d’Interaction
Homme-Machine (New York, NY, USA, 2007), ACM,
New York, pp. 139–142.
[AH98] ANDREWS K., HEIDEGGER H.: Information slices: visualising and exploring large hierarchies using cascading,
semi-circular discs. In Late Breaking Hot Topic Paper,
Proceedings of IEEE Symposium on Information Visualization (Washington, DC, USA, 1998), IEEE Press.
[AK07] ANDREWS K., KASANICKA J.: A comparative study of
four hierarchy browsers using the hierarchical visualisation testing environment (HVTE). In Proceedings of International Conference Information Visualization (Washington, DC, USA, 2007), IEEE Press, pp. 81–86.

[AvH04] ABELLO J., van Ham F.: Matrix zoom: a visual
interface to semi-external graphs. In Proceedings of
IEEE Symposium on Information Visualization (Washington, DC, USA, 2004), IEEE, New York, pp. 183–
190.
[AWS92] AHLBERG C., WILLIAMSON C., SHNEIDERMAN B.:
Dynamic queries for information exploration: an implementation and evaluation. In Proceedings of the SIGCHI
Conference on Human Factors in Computing Systems
(New York, NY, USA, 1992), ACM Press, pp. 619–
626.
[AWW09] ANDREWS K., WOHLFAHRT M., WURZINGER G.:
Visual graph comparison. In Proceedings of International Conference on Information Visualisation (Columbus, USA, 2009), IEEE Press, pp. 62–67.
[BBBL09] BACHMAIER C., BRANDENBURG F. J., BRUNNER W.,
LOVA´ SZ G.: Cyclic leveling of directed graphs. Lecture
Notes in Computer Science 5417 (2009), Springer Verlag,
Heidelberg, 348–359.
[BBD08] BURCH M., BECK F., DIEHL S.: Timeline trees: visualizing sequences of transactions in information hierarchies. In Proceedings of the Working Conference on
Advanced Visual Interfaces (Napoli, Italy, 2008), ACM
Press, New York, pp. 75–82.
[BBD09] BECK F., BURCH M., DIEHL S.: Towards an aesthetic
dimensions framework for dynamic graph visualisations.
In Proceedings of the International Conference on Information Visualisation (Columbus, USA, 2009), IEEE
Press, pp. 592–597.

[AMA08] ARCHAMBAULT D., MUNZNER T., AUBER D.: Grouseflocks: Steerable exploration of graph hierarchy space.
IEEE Transactions on Visualization and Computer Graphics 14, 4 (July/August 2008), 900–913.

[BBG*09] BLAAS J., BOTHA C., GRUNDY E., JONES M.,
LARAMEE R., POST F.: Smooth graphs for visual exploration of higher-order state transitions. IEEE Transactions
on Visualization and Computer Graphics 15, 6 (2009),
969–976.

[AMA09] ARCHAMBAULT D., MUNZNER T., AUBER D.: Tuggraph: path-preserving hierarchies for browsing proximity
and paths in graphs. In Proceedings of IEEE Pacific Visu-

[BC03] BRANDES U., CORMAN S. R.: Visual unrolling of network evolution and the analysis of dynamic discourse.
Information Visualization 2 (2003), 40–50.

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

1742

T. von Landesberger et al. / Visual Analysis of Large Graphs

[BCD*10] BEZERIANOS A., CHEVALIER F., DRAGICEVIC P.,
ELMQVIST N., FEKETE J.-D.: Graphdice: a system for exploring multivariate social networks. Computer Graphics
Forum 29, 3 (2010), 863–872.

multi-analyst, collaborative framework for visual analytics. In Proceedings of IEEE Symposium on Visual Analytics Science and Technology (Baltimore, Maryland, USA,
2006), IEEE Press, pp. 129–136.

[BD08] BURCH M., DIEHL S.: Timeradartrees: visualizing dynamic compound digraphs. Computer Graphics Forum 27,
3 (2008), 823–830.

[BN01] BARLOW T., NEVILLE P.: A comparison of 2-D visualizations of hierarchies. In Proceedings of IEEE Symposium on Information Visualization (San Diego, CA, USA,
2001), IEEE Press, pp. 131–138.

[BDF*10] BEZERIANOS A., DRAGICEVIC P., FEKETE J.-D., BAE
J., WATSON B.: GeneaQuilts: a system for exploring large
genealogies. IEEE Transactions on Visualization and
Computer Graphics 16, 6 (2010), 1073–1081.

[BRL09] BERTINI E., RIGAMONTI M., LALANNE D.: Extended
excentric labeling. Computer Graphics Forum 28 (2009),
927–934.

[BDJ05] BRODLIE K. W., DUKE D. J., JOY K. I.: Arctrees: visualizing relations in hierarchical data. In Proceedings of the
Joint Eurographics and IEEE TCVG Symposium on Visualization. P. Neumann, S. Schlechtweg and S. Carpendale
(Eds.) (Leeds, UK, 2005), IEEE Press, pp. 53–60.

[BRSG07] BENNETT C., RYALL J., SPALTEHOLZ L., GOOCH A.:
The aesthetics of graph visualization. In Proceedings of
Computational Aesthetics in Graphics, Visualization, and
Imaging (Banff, Alberta, Canada, 2007), Eurographics,
Switzerland.

[BDL05] BALZER M., DEUSSEN O., LEWERENTZ C.: Voronoi
treemaps for the visualization of software metrics. In Proceedings of ACM Symposium on Software Visualization
(Saint Louis, Missouri, USA, 2005), ACM, New York,
pp. 165–172.

[BSP*93] BIER E. A., STONE M. C., PIER K., BUXTON W.,
DEROSE T. D.: Toolglass and Magic Lenses: the SeeThrough Interface. In Proceedings of the 20th Annual
Conference on Computer Graphics and Interactive Techniques (New York, NY, USA, 1993), SIGGRAPH ’93,
ACM Press, New York, pp. 73–80.

[BDL*10] BATAGELJ V., DIDIMO W., LIOTTA G., PALLADINO
P., PATRIGNANI M.: Visual analysis of large graphs using
(x,y)-clustering and hybrid visualizations. In Proceedings
of IEEE Pacific Visualization Symposium (Taipei, Taiwan,
2010), IEEE Press, pp. 209–216.
[Bed01] BEDERSON B. B.: Photomesa: a zoomable image
browser using quantum treemaps and bubblemaps. In Proceedings of ACM Symposium on User Interface Software
and Technology (Orlando, Florida, 2001), ACM, New
York, pp. 71–80.
[BHvW99] BRULS M., HUIZING K., VAN Wijk J.: Squarified
treemaps. In Proceedings of the Joint Eurographics and
IEEE TCVG Symposium on Visualization (Vienna, Austria, 1999), IEEE Press, pp. 33–42.
[BL09] BERTINI E., LALANNE D.: Surveying the complementary role of automatic data analysis and visualization in knowledge discovery. In Proceedings of the ACM
SIGKDD Workshop on Visual Analytics and Knowledge
Discovery (Paris, France, 2009), ACM, New York, pp.
12–20.
[BMGK08] BARSKY A., MUNZNER T., GARDY J., KINCAID R.:
Cerebral: visualizing multiple experimental conditions
on a graph with biological context. IEEE Transactions
on Visualization and Computer Graphics 14, 6 (2008),
1253–1260.
[BMZ*06] BRENNAN S., MUELLER K., ZELINSKY G.,
RAMAKRISHNAN I., WARREN D., KAUFMAN A.: Toward a

[BSW02] BEDERSON B. B., SHNEIDERMAN B., WATTENBERG
M.: Ordered and quantum treemaps: making effective use
of 2D space to display hierarchies. ACM Transactions on
Graphics 21, 4 (2002), 833–854.
[CBTT95] COHEN R. F., BATTISTA G. D., TAMASSIA R., TOLLIS
I. G.: Dynamic graph drawings: trees, series-parallel digraphs, and planar st-digraphs. SIAM Journal of Computer
24 (1995), 970–1001.
[CC07] COLLINS C., CARPENDALE S.: VisLink: revealing relationships amongst visualizations. IEEE Transactions
on Visualization and Computer Graphics 13, 6 (2007),
1192–1199.
[CGK*07] CHANG R., GHONIEM M., KOSARA R., RIBARSKY W.,
YANG J., SUMA E., ZIEMKIEWICZ C., KERN D., SUDJIANTO
A.: WireVis: visualization of categorical, time-varying
data from financial transactions. In Proceedings of IEEE
Symposium on Visual Analytics Science and Technology
(Sacramento, CA, USA, 2007), IEEE Press, pp. 155–
162.
[CJM04] CHIRICOTA Y., JOURDAN F., MELANCON G.: Metricbased network exploration and multiscale scatterplot. In
IEEE Symposium on Information Visualization (Austin,
Texas, 2004), IEEE Press, pp. 135–142.
[CMS99] CARD S. C., MACKINLAY J., SHNEIDERMAN B.: Readings in Information Visualization: Using Vision to Think.
Morgan Kaufmann Publishers, 1999.

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

T. von Landesberger et al. / Visual Analysis of Large Graphs

[CN02] CARD S. K., NATION D.: Degree-of-interest trees: a
component of an attention-reactive user interface. In Proceedings of the Working Conference on Advanced Visual
Interfaces (New York, NY, USA, 2002), ACM Press, New
York, pp. 231–245.
[CR98] CHI E. H.-H., RIEDL J. T.: An operator interaction
framework for visualization systems. In proceeding of the
IEEE Symposium on Information Visualization (Research
Triangle Park, NC, USA, 1998), IEEE Press, pp. 63–70.
[CSP*06] CARD S. K., SUN B., PENDLETON B. A., HEER J.,
BODNAR J. W.: TimeTree: exploring time changing hierarchies. Proceeding of the Symposium on Visual Analytics Science and Technology (Baltimore, Maryland, 2006),
IEEE Press, pp. 3–10.
[CZQ*08] CUI W., ZHOU H., QU H., WONG P. C., LI X.:
Geometry-based edge clustering for graph visualization.
IEEE Transactions on Visualization and Computer Graphics 14, 6 (2008), 1277–1284.
[DBETT99] Di Battista G., EADES P., TAMASSIA R., TOLLIS I.
G.: Graph Drawing: Algorithms for the Visualization of
Graphs. Prentice-Hall, 1999.
[DGK01] DIEHL S., GOERG C., KERREN A.: Preserving the
mental map using foresighted layout. In Proceedings of
Joint Eurographics, IEEE TCVG Symposium on Visualization (Ascona, Switzerland, 2001), IEEE Press, pp.
175–184.
[DHKS05] DAYAL U., HAO M., KEIM D., SCHRECK T.: Importance driven visualization layouts for large time-series
data. In Proceedings of IEEE Symposium on Information
Visualization (2005), IEEE Press, pp. 203–210.
[Die05] DIESTEL R.: Graph Theory. Springer-Verlag, Heidelberg, 2005.
[DK05] DWYER T., KOREN Y.: DIG-COLA: directed graph
layout through constrained energy minimization. In Proceedings of IEEE Symposium on Information Visualization
(Minneapolis, MN, USA, 2005), IEEE Press, p. 9.
[DLF*09 ] DWYER T., LEE B., FISHER D., QUINN K. I.,
ISENBERG P., ROBERTSON G., NORTH C.: A comparison of
user-generated and automatic graph layouts. IEEE Transactions on Visualization and Computer Graphics 15, 6
(2009), IEEE Press, pp. 961–968.

1743

layout. IEEE Transactions on Visualization and Computer
Graphics 14, 6 (2008), 1293–1300.
[DMW09a] DWYER T., MARRIOTT K., WYBROW M.: Dunnart:
a constraint-based network diagram authoring tool. Graph
Drawing 5417 (2009), 420–431.
[DMW09b] DWYER T., MARRIOTT K., WYBROW M.: Topology
preserving constrained graph layout. In Proceedings of the
Revised Papers from International Symposium on Graph
Drawing (Chicago, USA, 2009), Lecture Notes in Computer Science, Springer Verlag, Heidelberg, pp. 230–241.
[Dog02] DOGRUSOZ U.: Two-dimensional packing algorithms for layout of disconnected graphs. Information Sciencies 143, 1–4 (2002), 147–158.
[DPS02] D´IAZ J., PETIT J., SERNA M.: A survey of graph
layout problems. ACM Computing Surveys 34, 3 (2002),
313–356.
[Ead84] EADES P.: A heuristic for graph drawing. Congressus
Numerantium 42 (1984), 149–160.
[EDF10] ELMQVIST N., DRAGICEVIC P., FEKETE J.-D.: Color
lens: adaptive color scale optimization for visual exploration. IEEE Transactions on Visualization and Computer
Graphics 99 (2010), RapidPosts, IEEE Press.
[EDG*08] ELMQVIST N., DO T.-N., GOODELL H., HENRY N.,
FEKETE J.-D.: Zame: interactive large-scale graph visualization. In Proceedings of IEEE Pacific Visualization Symposium (Kyoto, Japan, 2008), IEEE Press, pp. 215–222.
[EF09] ELMQVIST N., FEKETE J.-D.: Hierarchical aggregation
for information visualization: overview, techniques, and
design guidelines. IEEE Transactions on Visualization
and Computer Graphics 16, 3 (2009), 439–454.
[EHK*03] ERTEN C., HARDING P. J., KOBOUROV S. G.,
WAMPLER K., YEE G.: Graphael: graph animations with
evolving layouts. In Proceedings of the 11th Symposium
on Graph Drawing (Perugia, Italy, 2003), IEEE Press,
pp. 98–110.
[ELMS91] EADES P., LAI W., MISUE K., SUGIYAMA K.: Preserving the Mental Map of a Diagram. Research Report
IIAS-RR-91-16E, International Institute for Advanced
Study of Social Information Science, August 1991.

[dMB05] DE NOOY W., MRVAR A., BATAGELJ V.: Exploratory
Social Network Analysis with Pajek. Cambridge University Press, Cambridge, USA, 2005.

[ERHF09] ELMQVIST N., RICHE Y., HENRY N., FEKETE J.D.: M´elange: Space folding for visual exploration. IEEE
Transactions on Visualization and Computer Graphics 99,
1 (2009).

[DMS*08] DWYER T., MARRIOTT K., SCHREIBER F., STUCKEY
P., WOODWARD M., WYBROW M.: Exploration of networks
using overview+detail with constraint-based cooperative

[FDK02] FREIVALDS K., DOGRUSO¨ Z U., KIKUSTS P.: Disconnected graph layout and the polyomino packing approach. In Revised Papers from the 9th Int. Symposium

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

1744

T. von Landesberger et al. / Visual Analysis of Large Graphs

on Graph Drawing (London, UK, 2002), Springer-Verlag,
pp. 378–391.
[FHK*09] FUNG D. C. Y., HONG S.-H., KOSCHUTZKI D.,
SCHREIBER F., XU K.: Visual analysis of overlapping biological networks. In Proceedings of the 2009 13th International Conference Information Visualisation (Washington,
DC, USA, 2009), IEEE Computer Society, pp. 337–342.
[FLM95] FRICK A., LUDWIG A., MEHLDAU H.: A fast adaptive
layout algorithm for undirected graphs. In Proceedings of
the DIMACS International Workshop on Graph Drawing
(1995), pp. 388–403.
[FP99] FEKETE J.-D., PLAISANT C.: Excentric labeling: dynamic neighborhood labeling for data visualization. In
Proceedings of the SIGCHI conference on Human factors
in computing systems: the CHI is the limit (New York,
NY, USA, 1999), CHI ’99, ACM, pp. 512–519.
[FPSG10] FREIRE M., PLAISANT C., SHNEIDERMAN B.,
GOLBECK J.: ManyNets: an interface for multiple
network analysis and visualization. In Proceedings of international conference on Human factors in computing
systems (New York, NY, USA, 2010), ACM, pp. 213–222.
[FR91] FRUCHTERMAN T. M. J., REINGOLD E. M.: Graph drawing by force-directed placement. Software: Practice and
Experience 21, 11 (1991), 1129–1164.
[Fre79] FREEMAN L. C.: Centrality in social networks. Social
Networks 1, 3 (1979), 215–239.
[FT04] FRISHMAN Y., TAL A.: Dynamic drawing of clustered
graphs. In Proceedings of the IEEE Symposium on Information Visualization (Austin, TX, USA, 2004), IEEE
Press, pp. 191–198.
[FT07] FRISHMAN Y., TAL A.: Multi-level graph layout on the
GPU. IEEE Transactions on Visualization and Computer
Graphics 13, 6 (2007), 1310–1319.
[FT08] FRISHMAN Y., TAL A.: Online dynamic graph drawing. IEEE Transactions on Visualization and Computer
Graphics 14, 4 (2008), 727–740.
[Fur86] FURNAS G. W.: Generalized fisheye views. SIGCHI
Bulletin 17, 4 (1986), 16–23.
[FWD*03] FEKETE J.-D., WANG D., DANG N., ARIS A.,
PLAISANT C.: Overlaying graph links on treemaps. In Proceedings of IEEE Information Visualization Symposium
Posters Compendium (Seattle, USA, 2003), IEEE Press.
[GBD09] GREILICH M., BURCH M., DIEHL S.: Visualizing
the evolution of compound digraphs with TimeArcTrees. Computer Graphics Forum 28, 3 (2009), 975–
982.

[GBPD04] G¨ORG C., BIRKE P., POHL M., DIEHL S.: Dynamic
graph drawing of sequences of orthogonal and hierarchical graphs. In Graph Drawing (2004), Pach J. (Ed.), vol.
3383 of Lecture Notes in Computer Science, Springer,
Heidelberg, pp. 228–238.
[GDLP09] GIACOMO E., DIDIMO W., LIOTTA G., PALLADINO P.:
Visual analysis of one-to-many matched graphs. In Proceedings of the Revised Papers from International Symposium on GraphDrawing (Konstanz, Germany, 2009),
Springer Verlag, Heidelberg, pp. 133–144.
[GF01] GHONIEM M., FEKETE J.-D.: Animating treemaps.
In Proceedings of 18th HCIL Symposium—Workshop on
Treemap Implementations and Applications (Maryland,
USA, 2001), University of Maryland, College Park, USA.
[GFC04] GHONIEM M., FEKETE J.-D., CASTAGLIOLA P.: A comparison of the readability of graphs using node-link and
matrix-based representations. In Proceedings of IEEE
Symposium on Information Visualization (Austin, TX,
USA, 2004), IEEE Press, pp. 17–24.
[GH09] GANSNER E. R., HU Y.: Efficient node overlap removal using a proximity stress model. Graph Drawing
5417 (2009), 206–217.
[GHGH09] GODIYAL A., HOBEROCK J., GARLAND M., HART
J. C.: Rapid multipole graph drawing on the gpu. In Graph
Drawing,Tollis I. G. and Patrignani M. (Eds.). SpringerVerlag, Berlin, Heidelberg, 2009, pp. 90–101.
[GHK10] GANSNER E., HU Y., KOBOUROV S.: GMap: visualizing graphs and clusters as maps. In Proceedings of IEEE
Pacific Visualization Symposium (Taipei, Taiwan, 2010),
IEEE Press, pp. 210–208.
[GK01] GAJER P., KOBOUROV S. G.: GRIP: Graph drawing
with intelligent placement. In Proceedings of International Symposium on Graph Drawing (Vienna, Austria,
2001), Springer Verlag, Heidelberg, pp. 222–228.
[GKNV93] GANSNER E. R., KOUTSOFIOS E., NORTH S. C.,
Vo K.-P.: A technique for drawing directed graphs.
IEEE Transactions on Software Engineering 19 (1993),
214–230.
[GKS07] GOEHLSDORF D., KAUFMANN M., SIEBENHALLER M.:
Placing connected components of disconnected graphs.
In Proceedings of Asia-Pacific Symposium on Information Visualisation (Kyoto, Japan, 2007), IEEE Press, pp.
101–108.
[GOB*10] GRETARSSON B., O’DONOVAN J., BOSTANDJIEV S.,
HALL C., H¨ollerer T.: SmallWorlds: Visualizing social recommendations. Computer Graphics Forum 29, 3 (2010),
833–842.

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

T. von Landesberger et al. / Visual Analysis of Large Graphs

[GS05] GRIETHE H., SCHUMANN H.: Visualizing uncertainty
for improved decision making. In Proceedings of International Conference on Perspectives in Business Informatics
Research (Karlstad, Sweden, 2005), Skovde, Sweden.
[GS06] GRIETHE H., SCHUMANN H.: The visualization of uncertain data: methods and problems. In Proceedings of
Simulation and Visualization (Trier, Germany, 2006), SCS
Publishing House, GB, pp. 143–156.
[GZ08] GOTZ D., ZHOU M.: Characterizing users’ visual analytic activity for insight provenance. In Proceedings of
IEEE Symposium on Visual Analytics Science and Technology (Columbus, USA, 2008), IEEE Press, pp. 123–130.
[HB05] HEER J., BOYD D.: Vizster: visualizing online social
networks. In Proceedings of the IEEE Symposium on Information Visualization (Minneapolis, MN, USA, 2005),
IEEE Press, pp. 32–39.
[HC04] HEER J., CARD S. K.: Doitrees revisited: scalable,
space-constrained visualization of hierarchical data. In
Proceedings of the Working Conference on Advanced Visual Interfaces (New York, NY, USA, 2004), ACM Press,
New York, pp. 421–424.
[HD10] HENRY RICHE N., DWYER T.: Untangling Euler diagrams. IEEE Transactions on Visualization and Computer
Graphics 16, 6 (2010), 1090–1099.
[HEH09] HUANG W., EADES P., HONG S.-H.: Measuring
effectiveness of graph visualizations: a cognitive load
perspective. Information Visualization 8 (2009), 139–
152.
[HF06] HENRY N., FEKETE J.-D.: MatrixExplorer: a dualrepresentation system to explore social networks. IEEE
Transactions on Visualization and Computer Graphics 12,
5 (2006), 677–684.
[HF07] HENRY N., FEKETE J.-D.: Matlink: enhanced matrix visualization for analyzing social networks. In Proceedings of the International Conference on HumanComputer-Interaction (Rio de Janeiro, Brasil, 2007),
Springer Verlag, Berlin, pp. 288–302.
[HFM07] HENRY N., FEKETE J.-D., MCGUFFIN M.: NodeTrix:
a hybrid visualization of social networks. IEEE Transactions on Visualization and Computer Graphics 13, 6
(2007), 1302–1309.
[HJ05] HACHUL S., J¨UNGE M.: Drawing large graphs with a
potential-field-based multilevel algorithm. Lecture notes
in Computer Science 4372 (2005), 285–295.
[HJ07] HACHUL S., J¨UNGER M.: Large-graph layout algorithms at work: an experimental study. Journal of Graph
Algorithms and Applications 11, 2 (2007), 234–369.

1745

[HK02] HAREL D., KOREN Y.: Graph drawing by highdimensional embedding. In Proceedings of the Revised
Papers from International Symposium on Graph Drawing (Irvine, CA, USA, 2002), Springer Verlag, Berlin, pp.
207–219.
[HMM00] HERMAN I., MELANCON G., MARSHALL M. S.:
Graph visualization and navigation in information visualization: a survey. IEEE Transactions on Visualization
and Computer Graphics 6, 1 (2000), 24–43.
[HMSA08] HEER J., MACKINLAY J., STOLTE C., AGRAWALA
M.: Graphical histories for visualization: supporting analysis, communication, and evaluation. IEEE Transactions
on Visualization and Computer Graphics 14, 6 (2008),
1189–1196.
[Hol06] HOLTEN D.: Hierarchical edge bundles: visualization
of adjacency relations in hierarchical data. IEEE Transactions on Visualization and Computer Graphics 12, 5
(2006), 741–748.
[Hua07] HUANG W.: Using eye tracking to investigate graph
layout effects. In Proceedings of Asia-Pacific Symposium
on Visualization (Kyoto, Japan, 2007), IEEE Press, pp.
97–100.
[HvW08] HOLTEN D., VAN WIJK J. J.: Visual comparison of
hierarchically organized data. Computer Graphics Forum
27, 3 (2008), 759–766.
[HvW09] HOLTEN D., VAN WIJK J. J.: A user study on visualizing directed edges in graphs. In Proceedings of International Conference on Human Factors in Computing
Systems (Boston, MA, USA, 2009), ACM, New York, pp.
2299–2308.
[IAG*09] IMAMICHI T., ARAHORI Y., GIM J., HONG S.-H.,
NAGAMOCHI H.: Removing node overlaps using multisphere scheme. In Proceedings of the Graph Drawing
(Konstanz, Germany, 2009), pp. 296–301.
[ITC08] ISENBERG P., TANG A., CARPENDALE S.: An exploratory study of visual information analysis. In Proceedings of the Conference on Human Factors in Computing
Systems (2008), ACM Press, pp. 1217–1226.
[JHGH08] JIA Y., HOBEROCK J., GARLAND M., HART J.: On the
visualization of social and other scale-free networks. IEEE
Transactions on Visualization and Computer Graphics 14,
6 (2008), 1285–1292.
[JS10] J¨URGENSMANN S., SCHULZ H.-J.: Poster: a visual survey
of tree visualization. In Proceedings of IEEE Information
Visualization (Salt Lake City, USA, 2010), IEEE Press.
[KAF*08] KEIM D., ANDRIENKO G., FEKETE J.-D., G¨ORG C.,
KOHLHAMMER J., MELANCON G.: Information Visualization,

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

1746

T. von Landesberger et al. / Visual Analysis of Large Graphs

vol. 4950 of Lecture Notes in Computer Science. Springer,
2008, ch. Visual Analytics: Definition, Process, and Challenges, pp. 154–175.

Conference on Knowledge Discovery and Data Mining (Philadelphia, USA, 2006), ACM, New York, pp.
631–636.

[KCH02] KOREN Y., CARMEL L., HAREL D.: ACE: A fast multiscale eigenvectors computation for drawing huge graphs.
In Proceedings of the IEEE Symposium on Information
Visualization (Boston, MA, USA, 2002), IEEE Press,
p. 137.

[LK07] LARAMEE R. S., KOSARA R.: Challenges and unsolved problems. Lecture Notes in Computer Science 4417
(2007), 231–254.

[Kee06] KEEL P.: Collaborative visual analytics: inferring
from the spatial organization and collaborative use of
information. In Proceedings of IEEE Symposium on Visual Analytics Science and Technology (Baltimore, USA,
2006), IEEE Press, pp. 137–144.
[KG06] KUMAR G., GARLAND M.: Visual exploration of complex time-varying graphs. IEEE Transactions on Visualization and Computer Graphics 12, 5 (2006), 805–812.
[KK89] KAMADA T., KAWAI S.: An algorithm for drawing
general undirected graphs. Information Processing Letters
31, 1 (1989), Elsevier, 7–15.
[KKS09] KAUFMANN M., KREVELD M., SPECKMANN B.: Subdivision drawings of hypergraphs. In Proceedings of the
Revised Papers from International Symposium on Graph
Drawing (2009), pp. 396–407.
[KMS*08] KEIM D. A., MANSMANN F., SCHNEIDEWIND J.,
THOMAS J., ZIEGLER H.: Visual analytics: scope and challenges, visual data mining: theory, techniques and tools
for visual analytics. Lecture Notes in Computer Science
(LNCS) 4404 (2008), 76–90.
[Kob04] KOBSA A.: User experiments with tree visualization
systems. In Proceedings of the IEEE Symposium on Information Visualization (Austin, USA, 2004), IEEE Press,
pp. 9–16.
[Koh01] KOHONEN T.: Self-Organizing Maps, 3rd ed.
Springer, Berlin, 2001.
[Kre09] KREMPEL L.: Network visualization. In Handbook
of Social Network Analysis, J. Scott and P. J. Carrington
(Eds.). Sage Publishing, 2009, ch. 37.
[KSS06] KLUKAS C., SCHREIBER F., SCHWO¨ BBERMEYER H.: Coordinated perspectives and enhanced force-directed layout
for the analysis of network motifs. In Proceedings of AsiaPacific Symposium on Information Visualisation (Tokyo,
Japan, 2006), IEEE Press, pp. 39–48.
[LBA10] LAMBERT A., BOURQUI R., AUBER D.: Winding
roads: routing edges into bundles. Computer Graphics
Forum 29, 3 (2010), 853–862.
[LF06] LESKOVEC J., FALOUTSOS C.: Sampling from large
graphs. In Proceedings of ACM SIGKDD International

[LPS*06] LEE B., PLAISANT C., SIMS PARR C., FEKETE J.D., HENRY N.: Task taxonomy for graph visualization. In
Proceedings of AVI Workshop on BEyond time and Errors
(Venezia, Italy, 2006), ACM, New York, pp. 1–5.
[LRCP07] LEE B., ROBERTSON G. G., CZERWINSKI M., PARR C.
S.: CandidTree: Visualizing structural uncertainty in similar hierarchies. Information Visualization 6 (December
2007), 233–246.
[LRP95] LAMPING J., RAO R., PIROLLI P.: A focus+context
technique based on hyperbolic geometry for visualizing
large hierarchies. In Proceedings of the SIGCHI Conference on Human Factors in Computing Systems (Denver,
Colorado, USA, 1995), ACM Press/Addison-Wesley Publishing Co., New York, pp. 401–408.
[MCH*09] MOSCOVICH T., CHEVALIER F., HENRY N., PIETRIGA
E., FEKETE J.-D.: Topology-aware navigation in large networks. In Proceedings of International Conference on Human Factors in Computing Systems (Boston, USA, 2009),
ACM, New York, pp. 2319–2328.
[Mel06] MELANCON G.: Just how dense are dense graphs in
the real world: a methodological note. In Proceedings of
AVI Workshop on BEyond Time and Errors: Novel Evaluation Methods for Information Visualization (2006), ACM
Press, New York, pp. 1–7.
[Mey98] MEYER B.: Competitive learning of network diagram layout. In Proceedings of IEEE Symposium on Visual Languages (Halifax, NS, Canada, Canada, 1998),
IEEE Press, pp. 56–63.
[MGL06] MUELLER C., GREGOR D., LUMSDAINE A.: Distributed force-directed graph layout and visualization. In
Proceedings of the Eurographics Symposium on Parallel Graphics and Visualization (Lisbon, Portugal, 2006),
IEEE Press.
[MGT*03] MUNZNER T., GUIMBRETIE` RE F., TASIRAN S., ZHANG
L., ZHOU Y.: TreeJuxtaposer: scalable tree comparison using focus+context with guaranteed visibility. In Proceedings of ACM SIGGRAPH (San Diego, USA, 2003), ACM,
New York, pp. 453–462.
[MJ09] MCGUFFIN M. J., JURISICA I.: Interaction techniques
for selecting and manipulating subgraphs in network visualizations. IEEE Transactions on Visualization and Computer Graphics 15 (2009), 937–944.

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

T. von Landesberger et al. / Visual Analysis of Large Graphs

[MJW*09] MA’AYAN A., JENKINS S., WEBB R., BERGER S.,
PURUSHOTHAMAN S., HUSN N. A., POSNER J., FLORES T.,
IYENGAR R.: SNAVI: Desktop application for analysis and
visualization of large-scale signaling networks. BMC Systems Biology 3, 1 (2009), 10–20.
[MM08] MUELDER C., MA K.-L.: Rapid graph layout using
space filling curves. IEEE Transactions on Visualization
and Computer Graphics, 14, 6 (2008), 1301–1308.
[MML07] MUELLER C., MARTIN B., LUMSDAINE A.: A
comparison of vertex ordering algorithms for large
graph visualization. Proceedings of International AsiaPacific Symposium on Visualization (Kyoto, Japan, 2007),
IEEE Press, pp. 141–148.
[MMO05] MCPHERSON J., MA K.-L., OGAWA M.: Discovering parametric clusters in social small-world graphs.
In Proceedings of ACM Symposium on Applied Computing (Santa Fe, USA, 2005), ACM, New York, pp. 1231–
1238.
[Mun97] MUNZNER T.: H3: laying out large directed graphs in
3D hyperbolic space. In Proceedings of IEEE Symposium
on Information Visualization (Phoenix, AZ, USA, 1997),
pp. 2–10, 114.
[NCA06] NEUMANN P., CARPENDALE M. S. T., AGARAWALA
A.: Phyllotrees: phyllotactic patterns for tree layout. In
Proceedings of the Joint Eurographics and IEEE TCVG
Symposium on Visualization (Lisbon, Portugal, 2006), Eurographics, pp. 59–66.
[Noa03] NOACK A.: Energy models for drawing clustered
small-world graphs. In Proceedings of International Symposium on Graph Drawing (Perugia, Italy, 2003), Springer
Verlag, Berlin, pp. 425–436.
[Nor96] NORTH S. C.: Incremental layout in DynaDAG.
In Proceedings of the Symposium on Graph Drawing
(Passau, Germany, 1996), Springer-Verlag, Berlin, pp.
409–418.
[OCNF09] OTJACQUES B., CORNIL M., NOIRHOMME M., FELTZ
F.: CGD—a new algorithm to optimize space occupation
in ellimaps. In Proceedings of IFIP TC 13 International
Conference on Human-Computer Interaction (San Diego,
USA, 2009), Springer Verlag, Berlin, pp. 805–818.
[OPPROG09] OVALLE-PERANDONES M. A., PERIANESRODRIGUEZ A., OLMEDA-GOMEZ C.: Hubs and authorities
in a Spanish co-authorship network. In Proceedings
of International Conference Information Visualisation
(Atlantic City, USA, 2009), IEEE Press, pp. 514–
518.
[PD08] POHL M., DIEHL S.: What dynamic network metrics can tell us about developer roles. In Proceedings of

1747

the International Workshop on Cooperative and Human
Aspects of Software Engineering (New York, NY, USA,
2008), ACM Press, pp. 81–84.
[PGB02] PLAISANT C., GROSJEAN J., BEDERSON B. B.: Spacetree: supporting exploration in large node link tree, design
evolution and empirical evaluation. In Proceedings of the
IEEE Symposium on Information Visualization (Boston,
USA, 2002), IEEE Press, p. 57.
[PGS09] PLAISANT C., GRINSTEIN G., SCHOLTZ J.: Visualanalytics evaluation. IEEE Computer Graphics and Applications 29, 3 (2009), 16–17.
[PRB08] POHL M., REITZ F., BIRKE P.: As time goes by: integrated visualization and analysis of dynamic networks.
In Proceedings of the Working Conference on Advanced
Visual Interfaces (Napoli, Italy, 2008), ACM, New York,
pp. 372–375.
[PS06] PERER A., SHNEIDERMAN B.: Balancing systematic and
flexible exploration of social networks. IEEE Transactions on Visualization and Computer Graphics 12 (2006),
693–700.
[PS08] PERER A., SHNEIDERMAN B.: Integrating statistics and
visualization: case studies of gaining clarity during exploratory data analysis. In Proceeding of SIGCHI Conference on Human Factors in Computing Systems (Florence,
Italy, 2008), IEEE Press, pp. 265–274.
[PSD09] POHL M., SCHMITT M., DIEHL S.: Comparing readability of graph layouts using eyetracking and taskoriented analysis. In Proceedings of Computer Graphics
International (Victoria, British Columbia, Canada, 2009),
Victoria, Canada.
[Pur97] PURCHASE H. C.: Which aesthetic has the greatest
effect on human understanding&quest. In Proceedings of
International Symposium on Graph Drawing (Rome, Italy,
1997), Springer Verlag, Berlin, pp. 248–261.
[PWL97] PANG A., WITTENBRINK C., LODHA. S.: Approaches
to uncertainty visualization. The Visual Computer 13, 8
(1997), 370–390.
[RMC91] ROBERTSON G. G., MACKINLAY J. D., CARD S.
K.: Cone Trees: animated 3D visualizations of hierarchical information. In Proceedings of the SIGCHI
Conference on Human Factors in Computing Systems
(New Orleans, USA, 1991), ACM, New York, pp. 189–
194.
[RPD09] REITZ F., POHL M., DIEHL S.: Focused animation of dynamic compound graphs. In Proceedings
of International Conference Information Visualisation
(Atlantic City, USA, 2009), IEEE Press, pp. 679–
684.

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

1748

T. von Landesberger et al. / Visual Analysis of Large Graphs

[SA06] SHNEIDERMAN B., ARIS A.: Network visualization by
semantic substrates. IEEE Transactions on Visualization
and Computer Graphics, 12, 5 (2006), 733–740.
[SB92] SARKAR M., BROWN M. H.: Graphical fisheye views
of graphs. In Proceedings of the SIGCHI conference on
Human factors in computing systems (1992), Springer Verlag, Berlin, pp. 83–91.

[SZG*96] SCHAFFER D., ZUO Z., GREENBERG S., BARTRAM
L., DILL J., DUBS S., ROSEMAN M.: Navigating hierarchically clustered networks through fisheye and
full-zoom methods. ACM TOCHI 3, 2 (1996), 162–
188.
[TAS09] TOMINSKI C., ABELLO J., SCHUMANN H.: CGV—
an interactive graph visualization system. Computers &
Graphics 33, 6 (2009), 660–678.

[SCGM00] STASKO J., CATRAMBONE R., GUZDIAL M.,
MCDONALD K.: An evaluation of space-filling information visualizations for depicting hierarchical structures.
International Journal of Human-Computer Studies 53, 5
(2000), 663–694.

[TAvHS06] TOMINSKI C., ABELLO J., VAN Ham F., SCHUMANN
H.: Fisheye tree views and lenses for graph visualization.
In Proceedings of IEEE Information Visualization (Baltimore, USA, 2006), IEEE Press, pp. 17–24.

[Sch08] SCHWO¨ BBERMEYER H.: Analysis of Biological Networks. Wiley Series on Bioinformatics, Computational
Techniques and Engineering. Wiley, 2008, ch. 5,
pp. 85–112.

[TC05] THOMAS J. J., COOK K. A. (Eds.): Illuminating the
Path: The Research and Development Agenda for Visual
Analytics. National Visualization and Analytics Center,
IEEE Press, 2005.

[SFL10] SUD A., FISHER D., LEE H.-P.: Fast dynamic voronoi
treemaps. In Proceedings of International Symposium on
Voronoi Diagrams in Science and Engineering (2010), pp.
85–94.

[TC06] THOMAS J., COOK K.: A visual analytics agenda.
Computer Graphics and Applications, IEEE 26, 1 (2006)
10–13.

[Shn92] SHNEIDERMAN B.: Tree visualization with tree-maps:
2-D space-filling approach. ACM Transactions on Graphics 11, 1 (1992), 92–99.
[SKM06] SCHRECK T., KEIM D. A., MANSMANN S.: Regular
treemap layouts for visual analysis of hierarchical data. In
Proceedings of Spring Conference on Computer Graphics
(2006), Comenius University, Bratislava, pp. 184–191.
[SLN05] SARAIYA P., LEE P., NORTH C.: Visualization of
graphs with associated timeseries data. In Proceedings
of IEEE Symposium on Information Visualization (2005),
IEEE Press, pp. 225–232.
[SS05] SCHREIBER F., SCHWO¨ BBERMEYER H.: MAVisto: a tool
for the exploration of network motifs. Bioinformatics 21,
17 (2005), 3572–3574.

[TE10] TELEA A., ERSOY O.: Image-based edge bundles:
Simplified visualization of large graphs. Computer Graphics Forum 29, 3 (2010), 843–852.
[THM*05] THOMSON J., HETZLER B., MACEACHREN A.,
GAHEGAN M., PAVEL M.: A typology for visualizing uncertainty. In Proceedings of SPIE Conference on Visualization and Data Analysis 2005 (San Jose, CA, USA
2005), vol. 5669, SPIE, Bellingham, WA, USA, pp. 146–
157.
[TK08] TEKUSˇOVA´ T., KOHLHAMMER J.: Visual analysis and
exploration of complex corporate shareholder networks.
In Proceedings of the IS&T/SPIE Visualization and Data
Analysis (San Jose, CA, USA, 2008), vol. 6809, SPIE,
Bellingham, WA, USA, p. 68090F.

[SSH09] SCHULZ H.-J., SCHUMANN H., HADLAK S.: Pointbased tree representation - a new approach for large hierarchies. In Proceedings of IEEE Pacific Visualization
Symposium (2009), IEEE Press, pp. 81–88.

[TS99] TOYODA M., SHIBAYAMA E.: Hyper mochi sheet: a predictive focusing interface for navigating and editing nested
networks through a multi-focus distortion-oriented view.
In Proceedings of the SIGCHI Conference on Human Factors in Computing Systems (Pittsburgh, PA, USA, 1999),
ACM, New York, pp. 504–511.

[STT81] SUGIYAMA K., TAGAWA S., TODA M.: Methods for visual understanding of hierarchical system structures. Systems, Man and Cybernetics, IEEE Transactions on 11, 2
(1981), 109–125.

[TS07] TU Y., SHEN H.-W.: Visualizing changes of hierarchical data using treemaps. IEEE Transactions on Visualization and Computer Graphics 13, 6 (2007), 1286–
1293.

[SZ00] STASKO J., ZHANG E.: Focus+context display and
navigation techniques for enhancing radial, space-filling
hierarchy visualizations. In Proceedings of the IEEE Symposium on Information Vizualization (Salt Lake City,
USA, 2000), p. 57.

[TS08a] TEKUSˇOVA´ T., SCHRECK T.: Visualizing timedependent data in multivariate hierarchic plots - design
and evaluation of an economic application. In Proceedings
of International Conference on Information Visualisation
(Columbus, USA, 2008), IEEE Press, pp. 143–150.

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

T. von Landesberger et al. / Visual Analysis of Large Graphs

[TS08b] TU Y., SHEN H.-W.: Balloon focus: a seamless multifocus+context method for treemaps. IEEE Transactions
on Visualization and Computer Graphics, 14, 6 (2008),
1157–1164.
[vH03] VAN HAM F.: Using multilevel call matrices in large
software projects. In Proceedings of the IEEE Symposium
on Information Visualization (Seattle, USA, 2003), IEEE
Press, pp. 227–232.
[vHP09] VAN HAM F., PERER A.: Search, show context, expand on demand: supporting large graph exploration with
degree-of-interest. IEEE Transactions on Visualization
and Computer Graphics 15, 6 (2009), 953–960.
[vHR08] VAN HAM F., ROGOWITZ B.: Perceptual organization in user-generated graph layouts. IEEE Transactions
on Visualization and Computer Graphics, 14, 6 (2008),
1333–1339.
[vHSD09] VAN HAM F., SCHULZ H.-J., DIMICCO J. M.: Honeycomb: Visual analysis of large scale social networks. In
Proceedings of IFIP TC 13 International Conference on
Human-Computer Interaction: Part II (San Diego, USA,
2009), Springer Verlag, Heidelberg, pp. 429–442.
[vHvW02] VAN HAM F., VAN WIJK J.: Beamtrees: compact
visualization of large hierarchies. In Proceedings of the
IEEE Symposium on Information Visualization (Boston,
USA, 2002), IEEE Press, pp. 93–100.
[vHW08] VAN HAM F., WATTENBERG M.: Centrality based
visualization of small world graphs. Computer Graphics
Forum 27, 3 (2008), 975–982.
[vLdL03] VAN LIERE R., DE LEEUW W.: Graphsplatting: Visualizing graphs as continuous fields. IEEE Transactions
on Visualization and Computer Graphics 9 (2003), 206–
212.
[vLGRS09] VON LANDESBERGER T., G¨ORNER M., REHNER R.,
SCHRECK T.: A system for interactive visual analysis of
large graphs using motifs in graph editing and aggregation. In Proceedings of Vision Modeling Visualization
Workshop (Atlantic City, USA, 2009), TU Braunschweig,
Germany, pp. 331–339.

1749

[vWvdW99] VAN WIJK J., VAN DE WETERING H.: Cushion
treemaps: visualization of hierarchical information. In
Proceedings of IEEE Symposium on Information Visualization (San Francisco, USA, 1999), IEEE Press, pp.
73–78.
[War00] WARE C.: Information Visualization: Perception for
Design. Morgan Kaufmann, 2000.
[Wat06] WATTENBERG M.: Visual exploration of multivariate
graphs. In Proceedings of the SIGCHI Conference on Human Factors in Computing Systems (Montreal, Canada,
2006), ACM, New York, pp. 811–819.
[WBS*08] WATSON B., BRINK D., STALLMAN M., DEVAJARAN
D., RHYNE T.-M., PATEL H.: Visualizing very Large Layered
Graphs with Quilts. Tech. Rep. TR-2008-10, NC State
University, 2008.
[WCG03] WONG N., CARPENDALE S., GREENBERG S.: Edgelens: an interactive method for managing edge congestion
in graphs. In Proceedings of IEEE Symposium on Information Visualization (Seattle, USA, 2003), IEEE Press,
pp. 51–58.
[WD08] WOOD J., DYKES J.: Spatially ordered treemaps.
IEEE Transactions on Visualization and Computer Graphics, 14, 6 (2008), 1348–1355.
[WMC*09] WONG P. C., MACKEY P., COOK K., ROHRER R.,
FOOTE H., WHITING M.: A multi-level middle-out crosszooming approach for large graph analytics. In Proceedings of IEEE Symposium on Visual Analytics Science and
Technology (Atlantic City, USA, 2009), IEEE Press, pp.
147–154.
[WS03] WHITE S., SMYTH P.: Algorithms for estimating relative importance in networks. In Proceedings of ACM
SIGKDD International Conference on Knowledge Discovery and Data Mining (NY, USA, 2003), ACM Press,
pp. 266–275.
[YKSJ07] YI J. S., KANG Y. A., STASKO J., JACKO J.: Toward a deeper understanding of the role of interaction
in information visualization. IEEE Transactions on Visualization and Computer Graphics 13, 6 (2007), 1224–
1231.

[vLGS09] VON LANDESBERGER T., G¨ORNER M., SCHRECK T.:
Visual analysis of graphs with multiple connected components. In Proceedings of IEEE Symposium on Visual
Analytics Science and Technology (Braunschweig, Germany, 2009), IEEE Press, pp. 155–162.

[ZK08] ZIEMKIEWICZ C., KOSARA R.: The shaping of information by visual metaphors. IEEE Transactions on Visualization and Computer Graphics 14, 6 (2008), 1269–
1276.

[VMCJ10] VIAU C., MCGUFFIN M. J., CHIRICOTA Y., JURISICA
I.: The FlowVizMenu and parallel scatterplot matrix: hybrid multidimensional visualizations for network exploration. IEEE Transactions on Visualization and Computer
Graphics 16 (2010), 1100–1108.

[ZMC05] ZHAO S., MCGUFFIN M., CHIGNELL M.: Elastic hierarchies: combining treemaps and node-link diagrams. In
Proceedings of IEEE Symposium on Information Visualization (Minneapolis, MN, USA, 2005), IEEE Press, pp.
57–64.

c 2011 The Authors
Computer Graphics Forum c 2011 The Eurographics Association and Blackwell Publishing Ltd.

