DOI: 10.1111/j.1467-8659.2011.01963.x
Eurographics / IEEE Symposium on Visualization 2011 (EuroVis 2011)
H. Hauser, H. Pfister, and J. J. van Wijk
(Guest Editors)

Volume 30 (2011), Number 3

Comparison of Multiple Weighted Hierarchies:
Visual Analytics for Microbe Community Profiling
K. Dinkla1 , M.A. Westenberg1 , H.M. Timmerman3 , S.A.F.T. van Hijum2,3,4,5 , and J.J. van Wijk1
2

1 Eindhoven University of Technology, the Netherlands
Centre for Molecular and Biomolecular Informatics, Radboud University Nijmegen Medical Centre, the Netherlands
3 NIZO Food Research, Ede, the Netherlands
4 TI Food and Nutrition, Wageningen, the Netherlands
5 Netherlands Bioinformatics Centre, Nijmegen, the Netherlands

Abstract
We propose visual analytics techniques to support concurrent comparison of hundreds of cumulatively weighted
instances of a single hierarchy. This includes a node-link representation of the hierarchy where nodes depict
the weights of all instances with high-density heat maps that are grouped and aligned to ease cross-referencing.
Hierarchy exploration is facilitated by smoothly animated expansion and collapse of its branches. Detailed information about hierarchy structure, weights, and meta-data is provided by secondary linked visualizations. These
techniques have been implemented in a prototype tool, in which the computational analysis concerns have been
strictly separated from the visualization concerns. The analysis algorithms are extensible via a script engine. We
discuss the effectiveness of our techniques for the visual analytic process of microbe community profiling experts.
Categories and Subject Descriptors (according to ACM CCS): I.3.6 [Computer Graphics]: Methodology and
techniques—Interaction techniques J.3 [Computer Applications]: Life and Medical Sciences—Biology and genetics

1. Introduction
A cumulatively weighted hierarchy is a weighted rooted tree
where the weight of each internal node equals the sum of the
weights of its children, e.g., the distribution of scientists by
their domain of expertise. Visualizing a single cumulatively
weighted hierarchy is a well-researched problem that has led
to solutions like treemaps and icicle plots [Shn92]. However,
traditional methods do not adequately support the comparison of many weighted instances of the same hierarchy. For
example, cross-referencing weights between two instances is
already difficult with a small multiples approach, see Fig. 1,
and almost impossible for hundreds.
Multiple weighted instances of a single hierarchy are
used for microbial community research, which has entered
a phase where large amounts of data are generated by socalled next-generation DNA sequencing techniques. This
data represents the abundance of microbe classes, which
form a hierarchy that is also known as a taxonomy, as a
function of environments (e.g., the gut of a mouse or human). These environments have properties, termed metac 2011 The Author(s)
Journal compilation c 2011 The Eurographics Association and Blackwell Publishing Ltd.
Published by Blackwell Publishing, 9600 Garsington Road, Oxford OX4 2DQ, UK and
350 Main Street, Malden, MA 02148, USA.

science
100%

science
100%

natural social formal
5%
90%
5%

natural social formal
20% 50% 30%

mathematics computation
15%
75%

mathematics computation
5%
25%

Figure 1: Fictional distributions of scientists by domain of
expertise for two countries. Comparison of weights between
these trees is difficult: weight representations are far apart,
and there are many visual obstacles in between.

data, for which the microbial composition could differ. The
main goals of domain experts are to find correlations of:
microbe abundance within specific environments, microbe
abundance between environments, and meta-data values in
relation to microbe abundance. To achieve this, domain experts use a combination of statistical methods such as regression, PCA, and visual representations such as bar charts,
while partitioning and aggregating them by their meta-data.

1142

K. Dinkla & M. Westenberg & H. Timmerman & S. van Hijum & J. van Wijk / Comparison of Multiple Weighted Hierarchies

Common tools that offer these methods only allow for the
comparison of a selection of microbe classes without a representation of the microbe taxonomy, which is integral to the
reasoning process of domain experts. Therefore, the status
quo is a time-consuming way of analyzing data and is not
sufficient to extract all relevant patterns from these complex
data.
In this paper we propose a visual analytics environment
to address this issue. It supports both computational analysis methods and visual representations that are familiar to
microbial community experts. Specifically, our contribution
is the effective combination of the following techniques to
support the analysis task:
• Visualization of a hierarchy with a node-link representation that can be explored via the animated expansion and
collapse of branches;
• Simultaneous visualization of weights of a large number
of hierarchies with high-density heat maps that are superimposed on the node-link representation;
• User-customizable analysis algorithms, to manipulate the
ordering of weights in the heat maps, and to find nodes of
interest;
• Additional visualizations that are linked to the tree, which
provide detailed information about hierarchy structure,
weights, and meta-data.
We have implemented this approach in a prototype that
has been used by domain experts during the analysis of a
data set that was derived from real environments. These experts found the approaches to be of particular use to identify
microbe classes that have general dominance, interactions
between microbe classes, and correlations between microbe
abundance and environment conditions.
However, we illustrate our approach with another data set
that is easier to interpret for a broader audience, and which
demonstrates its generic applicability. This data set shows
the frequency of words in 60 classic novels, where the words
are hierarchically classified by their meaning (a hierarchy
that contains around 600 classes). Therefore, words that express a ‘lake’ or ‘sea’ also express the more general notion
of ‘body of water’, and thus the classes ‘lake’ and ‘sea’ are
descendants of the class ‘body of water’ in the hierarchy.
Each novel has four meta-data values: title, author, genre,
and the century that it was written in. So, for example, usage of the presented techniques enables the insight that most
novels contain a lot of words that express some form of measure, and more specifically that novels of the adventure genre
have many words that express fuel. The novels were obtained from Project Gutenberg [Har92] and the hierarchical
word classification was derived from WordNet [Mil95].
2. Data Specification
The described data can be divided into three aspects: the
nodes that form a hierarchy, the weights of every instance

of the hierarchy, and fields of meta-data that annotate these
instances.
V is the single set of nodes that forms a rooted tree (the
hierarchy), which is shared by all weighted instances, where
every v ∈ V has a name and a (possibly empty) set of children. The root of the tree is denoted by r.
I is the set of weighted hierarchy instances. The weight of
i ∈ I for v ∈ V is denoted by w(i, v) ∈ R. These weights are
cumulative:
∀i∈I, v∈V

w(i, v) =

∑

w(i, c)

c∈children of v

Because we are concerned with distributions over a hierarchy, we assume that all instances have normalized weights
such that:
∀i∈I

w(i, r) = 1

In addition, we assume that nodes without any instance
weight have been filtered out:
∀v∈V ∃i∈I

w(i, v) > 0

F is the set of meta-data fields, where every f ∈ F has a
name and binds a nominal value φ( f , i) to every i ∈ I.
3. Visualization Approach
The different data aspects, in combination with hundreds of
weighted instances of a single hierarchy that contains hundreds of nodes, makes expression of the data as a single,
all encompassing, visualization impractical. Therefore, we
have divided the data exploration over multiple linked views.
Each view combines multiple aspects of the input information (see Fig. 2).
The structure view provides an overview of the entire hierarchy; every node is represented, but in a minimal way. Its
main purpose is to provide context while the user navigates
in different, more detailed, views. It is therefore designed
to take up as little screen space as possible; as a traditional
cladogram. Individual nodes are not given a direct visual
representation to limit the complexity of the cladogram. Existence of nodes can still be inferred from branching of the
tree and vertical positions in the cladogram.
The main view functions as the backbone of the exploration process. It allows for the hierarchy to be navigated
while conveying detailed weight information of individual
nodes. Detailed meta-data is provided with the instance
view, which shows field values for every instance in the form
of an enriched table. Both views are discussed in more detail
in the following sections.
The node view allows the navigation of and search for hierarchy nodes by name. It shows a plain list of nodes that are
sorted by name, nothing of the hierarchy structure is conveyed. Nodes are searched for by entering (part of) their
c 2011 The Author(s)
Journal compilation c 2011 The Eurographics Association and Blackwell Publishing Ltd.

K. Dinkla & M. Westenberg & H. Timmerman & S. van Hijum & J. van Wijk / Comparison of Multiple Weighted Hierarchies

main

instance node

V
w
I
ϕ

structure

F

Figure 2: Left: Abstract depiction of the views and their layout. Right: The data types, functions, and view dependencies.

name while the list is filtered incrementally, for each input
character.
3.1. Main view
The main view supports the inspection and comparison of
weights within and between nodes in context of the hierarchy. It shows a node-link representation of part of the hierarchy: the visible nodes E ⊆ V are referred to as expanded, the
remainder C ⊆ V as collapsed. Nodes are expanded and collapsed via interaction with the node representations in any
of the views.
When a node is collapsed, its descendants are collapsed
as well. By collapsing nodes, much needed space is freed,
which is used for displaying expanded nodes and their
weights. The loss of context that results from collapsed
nodes is compensated by representing them with glyphs.
Contrary to standard node-link representations of hierarchies, a visual representation of a node does not convey the
information of the node itself; it conveys the information
of its children. This reduces the complexity of the representation because a normal node-link representation would
require n links to depict containment of n children by their
parent, while our approach draws but one broad link. These
broad links are defined by Bézier curves to give a smooth
look that stands out from the straight lines of the remaining
visualization. Since information of siblings is expressed in
the same node, easier comparison between their weights is
achieved as well. A similar approach was found useful for
densely visualizing a DAG that was derived from multiple
trees such that their structures could be compared [GK07].
Every node is divided into cells, which are vertical slices,
each representing a child. Each cell can convey the name of
its node e ∈ E, by drawing its name in a vertical orientation,
fading out the characters that do not fit in the cell (see Fig. 3).
In addition, the cells have tool tips that reveal their names
in case cells display heat maps and the observer wants to
quickly identify the node that belongs to a cell of interest.
Instance weights that belong to e are expressed by a heat
map. Every heat map displays the weights for the same sequence of instances i1 , i2 , ..., in ∈ I, with colored tiles in
a vertical arrangement from top to bottom. This sequence
c 2011 The Author(s)
Journal compilation c 2011 The Eurographics Association and Blackwell Publishing Ltd.

1143

can be manipulated to filter out and rearrange the instances,
which is described in Section 4.
Let w and h be the width and height (in pixels) of the cell
of e respectively. A basic approach to construct a heat map
for e is to place tiles below each other from top to bottom
for every instance. The color of each tile is then based on
the weight of a corresponding instance. However, h is often
smaller than the number of instances n. Hence, the height of
a tile is hn < 1, requiring the tiles to be drawn at the sub-pixel
level.
We achieve this with a technique based on the information
mural [JS98], which also applies to situations where hn ≥ 1.
Every horizontal strip of pixels in the cell gets its own tile,
and the instances are given spans of equal size that cover
these tiles. Based on these spans, the weights are distributed
over the tiles, resulting in an aggregate weight value for every tile.
These values are shown for every tile with a heated-object
color scale, which varies from low to high brightness for
values that range from zero to one, respectively, as can be
seen in Fig. 3. The values are normalized using a range [0, u],
where u is the upper bound of all aggregate values of a scope
that contains one or multiple cells. We offer three types of
scope: node scope for scaling values per cell, sibling scope
for scaling values per node of sibling cells, and level scope
for scaling cells per hierarchy depth level. When an observer
wants to compare the weights for a single node, the node
scope will result in a better use of the color scale. When the
observer is interested in comparing weights between nodes,
the other scopes are more useful. The lower bound is fixed to
zero at all times because an observer expects the color black
to represent zero.
The aggregation of weights results in loss of information and the possible obfuscation of interesting weight distributions. This is unavoidable when superimposing large
amounts of data on relatively small nodes, but is compensated for by the detailed instance view discussed in Section 3.3. In addition, the user has the possibility to enlarge
the vertical size of a single depth level to increase the resolution of its heat maps.
Glyphs are used as compact representations of collapsed
subtrees, positioned underneath the cells, as shown in Fig. 3.
Structural characteristics of a subtree are conveyed in the
form of a trapezoid; the maximum depth of the subtree is
mapped to the height of the glyph, and its number of descendant leafs is mapped to the width of the glyph’s top and
bottom sides. The shape of the glyph approaches the form
of a rectangle when the number of leafs of its subtree approaches one, and the form of a triangle for large numbers
of leafs. This guarantees a lower bound on their surface area,
which increases visibility (and therefore usability) over the
default approach of using a thin triangle for few leafs.
The height of every glyph is attained by linearly scaling

1144

K. Dinkla & M. Westenberg & H. Timmerman & S. van Hijum & J. van Wijk / Comparison of Multiple Weighted Hierarchies

Figure 3: Left: The hierarchy representation of the main view as applied to the novels data set, where cells display the names
of their nodes (in this case entity classes). Right: The same representation, but where cells display instance weights with heat
maps (every horizontal line represents a novel). The weights are scaled by groups of siblings, which in this case enables the
identification of overall abundant words. For example, most novels contain less words that describe something physical than
those that describe something abstract, and words that refer to some form of matter mostly refer to a substance.

the maximum depth of corresponding c ∈ C over a fixed
range. Because hierarchies of the intended application domain tend to have a depth of at most ten, differences in height
can easily be distinguished, even when scaled linearly. Likewise, a single logarithmic scale is used for the top and bottom sides because the distribution of leafs in V is skewed
towards many small values for nodes near the leafs and few
very large values near the root. The scope of the scaling
could be limited to the visible glyphs. However, this would
cause changes in the dimensions of glyphs when users expand or collapse nodes, disturbing the visual orientation of
the user.

3.2. Layout and animation

The primary purpose of the main view is to enable the
user to find interesting correlations of weights, as this is the
primary goal of our target domain experts. Hence, the heat
maps are given as much vertical space as possible, the width
of cells is limited, and sibling cells are grouped as blocks.
This decreases the overall distance between cells and reduces occurrence of visual obstacles in between, enabling
an easy comparison of weights between nodes, especially
for sibling nodes that decompose the weights of their shared
parent.

Layered and circular layouts are in standard use by research fields that involve analysis of microbes; the domain
experts expect them, contrary to balloon layouts. In addition, all nodes of equal depth are aligned for layered and
circular layouts, which eases comparison of the contents of
nodes. Our approach uses a layered layout because its horizontal alignment of nodes suits the display of quantitative
data representations on nodes. Curving them to match circular alignments would have made high-density node content
depiction impractical.

Correlations appear as bright or dark patterns on the heat
maps, vertically as well as horizontally. The ordering of
the instances, by which their weights are expressed on the
heat maps, influences the ease of detection of these patterns.
Hence, this ordering has to be manipulated iteratively by the
user during the analytical process (see Section 4).

There are many layered layout algorithms, of which the
TR algorithm, created by Reingold and Tilford, is in common use [RT81, HDM98]. It minimizes the total width of
the tree, keeping visual distance between nodes short, while
every node is centered over its children for improved depiction of hierarchy. We use this algorithm to lay out the clado-

Both the main view and the structure view show node-link
representations of the hierarchy. The manner in which their
nodes are arranged affects the ability of the users to discern
the hierarchy structure and their ability to compare node contents. Common layouts are: Layered layout, where the root
is drawn at the top and nodes of equal depth are aligned in
horizontal layers; Circular layout, where the root is drawn at
the center and nodes of equal depth are aligned in concentric
circles around the root; Balloon layout [MH98], where the
root is drawn at the center and the children of every node are
aligned around it in a circle.

c 2011 The Author(s)
Journal compilation c 2011 The Eurographics Association and Blackwell Publishing Ltd.

K. Dinkla & M. Westenberg & H. Timmerman & S. van Hijum & J. van Wijk / Comparison of Multiple Weighted Hierarchies

gram of the structure view and have adapted it to lay out the
more complex main view tree, including smooth animation
of node expansion and collapse. This animation is achieved
through linear interpolation between relative parent-child xcoordinates, those generated by the TR algorithm before the
expansion or collapse of a branch and those generated for a
tree where the branch has been fully expanded or collapsed.
By using this basic approach the user is enabled to quickly
navigate the tree, and can even expand or collapse additional nodes while the tree is still in animation. The entire
tree is centered and scaled to fit the view if necessary. This
keeps all expanded nodes visible and comparable, contrary
to SpaceTree, which uses panning to keep nodes of interest visible while other nodes may be placed outside of the
view [PGB02].
3.3. Instance view
Detection of weight patterns in the main view is meaningless without further information about the instances, which
is provided by the instance view: a table representation that
has meta-data fields as columns and instances with their
field values as rows (see Fig. 4). The ordered instances
i1 , i2 , ..., in ∈ I, which are displayed from top to bottom in
the table, match the order of instance weights in the heat
maps of the main view.
In most situations there are too many instances to depict
at the same time. Thus, only a limited section of the rows is

1145

shown. In the main view, the cursor can be hovered over a
heat map that depicts instance weights of e ∈ E. Within this
heat map, the cursor can be hovered over a tile that depicts
aggregated weights of instances il , il+1 , ..., iu , where 1 ≤ l ≤
u ≤ n. When this happens, the table is translated over the
y-axis such that il , il+1 , ..., iu are visible, and the rows are
highlighted. The heat tiles of e are depicted on the left of the
instance view to form a more intuitive link between the two
views. Instances that are hovered over with the cursor are
depicted with pink heat map tiles in both views.
The table also displays instance weights of e with bars
that are scaled linearly over range [0, maxi∈I w(i, e)]. This
provides a less distorted representation of the weights of e
than that of the heat map, because the bars represent isolated
weights, not aggregated like the heat map tiles, and convey
weights by geometric size, which is less prone to perceptual
distortions than the use of color scales. Thus, weights and
meta-data are easily compared.
The visual complexity of the table is reduced by showing
but a small selection of fields in the table; the user adds and
removes fields from the table and thereby filters out information that is not of interest. In addition, vertically neighboring column cells are visually merged when they have the
same field values, which creates blocks that require less text
to convey values (see Fig. 4). Because the field values are
nominal and instances are often sorted by field value, these
blocks can be large and thereby greatly reduce visual complexity. Blocks of equal value, which do not neighbour each
other, are spotted with greater ease by applying a 1 to 1 mapping of colors to the values per field and filling the blocks
with these colors.
4. Analysis Approach
Combining visualizations with analysis methods improves
the effectiveness and efficiency of the discovery process;
guiding the user to interesting parts of the data and manipulating the visualizations in such a way that patterns can be
perceived. The default approach to implementing such analysis methods is to do it at the source code level, directly tied
to the visualization. In practice this means that the user has
to convey his information interests to the creator of the visualization, who then has to implement analysis algorithms
that suit these interests.

Figure 4: Left: Heat map that is hovered over in the main
view, it depicts the frequency of words that belong to the
‘fuel’ class per novel, where novels are ordered by genre.
Right: Instance view, showing meta-data for two properties,
and frequencies as bars. For illustrative purposes, the entire
main view tree is not shown, and the blue lines have been
added to show the relation between the low-detail heat map
and high-detail instance view. Observe that drama novels
make less mention of fuel than adventure novels.
c 2011 The Author(s)
Journal compilation c 2011 The Eurographics Association and Blackwell Publishing Ltd.

To provide more flexibility, the prototype includes a script
environment that executes custom-made analysis methods.
Important data is exposed to this environment, such as the
input data of Section 2 and the nodes that have been selected in the views. A domain expert can add an analysis
method to the environment that the user subsequently calls
via a GUI, similar to applying a function to selected cells
in a spreadsheet program. The resulting visual analytic process has isolated visual from analytical concerns, making it
highly adaptable to the changing analytical needs of domain
experts.

1146

K. Dinkla & M. Westenberg & H. Timmerman & S. van Hijum & J. van Wijk / Comparison of Multiple Weighted Hierarchies

Figure 5: Combined use of the main, instance, and structure views to analyze the novels data set. The novels have been reordered
via hierarchical clustering of the sub-classes of the ‘psychological feature’ class: ‘cognition’, ‘event’, and ‘motivation’. The
‘motivation’ class, which is being hovered, shows an interesting pattern that is inspected with the instance view. The high
weights appear to be correlated with the genre of the novels, specifically the drama genre. The motivation class has been
expanded to inspect the decomposition of its weights over its sub-classes. Because the pattern is interesting, a similarity score
has been computed for the motivation class to find classes with similar weights. The colored glyphs and structure view suggest
that this weight pattern is not specific to the motivation class or classes that are close to it in the hierarchy.

Two overall characteristics of the visualizations can be
manipulated by scripted analysis methods, which are described in the following sections: the coloring and ordering
of hierarchy nodes based on a score that is assigned to them,
and the selection and ordering of instances that are shown in
the main and instance views.
4.1. Node scores
A node score expresses the significance of a node as a number; the higher the number, the greater the importance, which
is conveyed by mapping it to a color in a visualization or arranging nodes by their score in the node view. It guides the
user to nodes (or areas) of interest. The assignment of scores
is defined as a function s, which can also be used to order and
rank nodes, defined as function r. All nodes are ordered to attain v1 , v2 , ..., vm ∈ V , where s(v1 ) ≤ s(v2 ) ≤ ... ≤ s(vm ). The
rank of a node follows from this ordering, i.e., r(vz ) = z − 1
for 1 ≤ z ≤ m.
Besides ordering nodes by score, the node view marks
each v ∈ V with a tile. The score s(v) is scaled and mapped
to the color of the tile, black for the lowest score and increasingly green for higher scores. Nodes in the structure view are
highlighted in a similar manner, but the color scale ranges
from the view’s background color to green. Because a glyph
of the main view represents a subtree that consists of nodes
A ⊆ V , it is colored for the maximum score maxa∈A s(a).

Thus, the user can easily see which branches contain a node
of high score (see Fig. 5).
The prototype includes a couple of definitions for the
function s. The cosine similarity score compares each node
v ∈ V to an interactively selected node q ∈ V by similarity of their weight vectors, (w(i1 , v), w(i2 , v), ..., w(in , v)) and
(w(i1 , q), w(i2 , q), ..., w(in , q)), where i1 , i2 , ..., in ∈ I is the
displayed instance sequence. The cosine similarity compares
the vectors by their angle α, focusing on their shared patterns. The score increases as α decreases and the weights of
v and q are more alike, which allows the user to find nodes
with a weight pattern of interest.
The regularity score looks for distinctive areas of low
and high average weight for each v ∈ V , based on
the gradient of a moving average of weight sequence
w(i1 , v), w(i2 , v), ..., w(in , v). The moving average suppresses
areas of strongly varying weights and only changes between
areas of different average weight, which are the areas of interest. Thus, the score increases when the weights form a
more regular pattern.
4.2. Instance selection and ordering
Arranging instances in different ways, and leaving out instances that do not meet certain requirements, allows the
user to perceive patterns in the heat maps of the main view.
c 2011 The Author(s)
Journal compilation c 2011 The Eurographics Association and Blackwell Publishing Ltd.

K. Dinkla & M. Westenberg & H. Timmerman & S. van Hijum & J. van Wijk / Comparison of Multiple Weighted Hierarchies

Those are patterns that the user likely would not have seen
for an arbitrary ordering. The selection and ordering results
in a sequence i1 , i2 , ..., in ∈ I, which specifies the order of instances for all heat maps of the main view and the instance
view, thus aligning them to ease cross-referencing (see sections 3.1 and 3.3). The prototype includes scripted functionality like filtering, ordering by meta-data values, and clustering by weights.
Ordering by meta-data is a basic, but important, way to
structure instances. When such an ordering is used, the instances form groups per categorical value of one or multiple
meta-data fields, which translate to areas in the heat maps
that may show differing average weight per group. This is
similar to partitioning the instances and expressing some of
their aggregated weight properties as bar charts. However,
more information about weight distribution is provided via
heat maps.
We have also implemented a method that actively finds
similarities in the weights and emphasizes them by ordering the instances in a certain way: hierarchical clustering, a
method that is often applied to the heat maps of micro-array
data and known to domain experts. It uses the cosine similarity of instance weights that belong to specific nodes, which
have been selected by the user in advance.
When clustered, instances with similar weights tend to
clump together, manifesting as a more organized appearance of heat maps in the main view. The expert can then
cross-reference the resulting patterns with meta-data in the
instance view to find correlations, and investigate these further by applying targeted analysis methods, e.g., sorting by
a meta-data field of interest. In addition, the user can add his
own scripted clustering techniques to satisfy more domainspecific needs, which may include meta-data as a clustering
criterion.
5. Related Work
The depiction, navigation, and comparison of large tree
structures has received much attention in the visualization community [HMM00,MGT∗ 03,GK07,HVW08,GK10,
JS10, VLKS∗ 10]. Interactive node-link visualizations of hierarchies with additional node attribute data are common
as well [DL06, BBD08]. However, dealing with nodes that
have large amounts of quantitative data, such as the microbial community data, has received little attention. Tu et al.
presented an approach to visualize two weighted instances of
a hierarchy in a single treemap, enabling direct comparison
between instance weights [TS07]. Graham et al. dealt with
a greater number of weighted instances by applying a small
multiples approach, and included various interaction techniques to ease exploration and cross referencing [GKD06].
Yet, both of these approaches do not scale well to hundreds
of weighted instances.
On the other hand, more generalized tools could be used
c 2011 The Author(s)
Journal compilation c 2011 The Eurographics Association and Blackwell Publishing Ltd.

1147

to find correlations between weights of arbitrary branches
of the hierarchy if the data is converted to a less stringent
format. For example, one recently published approach enables the analysis of large 2D scalar matrices by grouping
columns and clustering the rows of these groups [LSPS10].
These clusters are then visualized as nodes, with their scalar
values expressed by heat maps, which form one column per
group and have their scalar values from the same rows connected by edge bundles. The resulting node-link representation resembles ours and might be used for similar analysis
tasks. However, it is incapable of representing a hierarchy
in an intuitive navigable way. Also, weights cannot be aggregated over branches, which is essential to domain experts
who need to use taxonomies to reason about entities at varying levels of abstraction. Therefore, the support for many
forms of data comes at the cost of reduced effectiveness for
the specific analysis requirements that stem from certain application domains.
Tools that have been developed within the microbiology
community already show emphasis on intuitive tree-like representations of hierarchies. Sundquist et al. have developed
visualizations of weighted hierarchies [SBJ∗ 07], which are
closely related to traditional node-link and icicle representations. Unlike icicle trees, the branches of Sundquist’s tree
gradually separate like flows to emphasize its hierarchical
structure. Here, the small multiples method can again be
used to compare multiple weight instances of a hierarchy
but still suffers from space and cross-reference issues.
Huson et al. visualize the hierarchy with a node-link representation where the weights are depicted by a pie or bar
chart for each node [HRM∗ 09]. Though easy to interpret,
this approach is again not suited for many nodes or instances.
For many nodes, the visualization is cluttered and overview
of the tree structure is lost. Though their approach allows
users to collapse and expand branches of the hierarchy, the
resulting adaptations of the visualization are not animated,
creating conflicts with the visual orientation of the user and
temporary confusion as a consequence [SIG07]. In addition,
when branches are collapsed, information of interest may be
obfuscated, possibly requiring the user to navigate through
the entire hierarchy to be aware of its existence. For many
weight instances of the hierarchy, the traditional charts are
hardly usable as they have too little space to express the relative values of weights in such a way that the user can derive
useful information.
Aggregation of quantitative data in explorable hierarchies
also appears in the form of decomposition trees, where aggregation and subsequent decomposition of large amounts
of hierarchical data is a concern [VM06, MS07]. It uses basic charts in a node-link representation to express aggregated
information of entries that are subject to multiple categorizations. The user can explore the data by partitioning the entries of a node by category, interactively constructing a tree

1148

K. Dinkla & M. Westenberg & H. Timmerman & S. van Hijum & J. van Wijk / Comparison of Multiple Weighted Hierarchies

that decomposes the root aggregation by various categories
for each path.
Plaisant’s SpaceTree provides a way to navigate tree
structures while reserving ample space per node to display
additional content [PGB02]. It also allows for branches to
be collapsed and expanded, but here these actions are properly animated and collapsed branches are replaced by glyphs
to provide context whilst navigating the tree.
6. Application to Microbe Community Profiling
The described techniques have been implemented in a prototype application, which was written in the Java language for
flexible deployment. The prototype relies on the scene graph
engine Piccolo2D, formerly known as Jazz [BMG00], for
interaction and animation. The scripted analysis algorithms
are enabled via an embedded JavaScript engine; Rhino, managed by the Mozilla Foundation.
Though applied to a data set of classic novels in the previous examples, the prototype was developed to assist microbe
community analysts. This development followed a process
of four cycles over six months, where each cycle involved
the creation of a prototype, its informal evaluation by domain experts, and the refinement of the prototype for the
next cycle. These domain experts consist of two bioinformaticians who concern themselves with pre-processing and
algorithmic analysis of the data, and a microbiologist who
analyses microbe community data sets on a regular basis.
The microbiologist has included the prototype in his
repertoire of analytic tools and has so far used it to analyze four data sets, which contained hierarchies of up to a
thousand nodes and up to two hundred weighted instances.
Concrete results that are of biological significance are not
discussed here, but will be compiled for future publication in
the target research community. We do describe the domainspecific context, and discuss the added benefit of our techniques to this context.
6.1. Background
High throughput DNA sequencing is used to generate sequence reads of a part of the 16S ribosomal DNA gene,
present in all microbes. This 16S gene differs for each microbe and allows to classify many of the microbes present
in an environment to get a quantitative approximation of its
microbe abundance. As with plants, microbes are placed in
a hierarchical classification, also termed taxonomy by biologists. Our data specification denotes this as V , where typical data sets can contain hundreds of nodes, each denoting a
taxon.
The main purpose of such a hierarchy is to allow biologists to reason about generic groups of organisms that have
similar characteristics. The process of hierarchically classifying microbes is shown in Fig. 6, which can be implemented in different ways [HAQS07, VMHR∗ 07, SBJ∗ 07].

[A, T, ...]
a
[T, G, ...]

b

c
d

e

[T, A, ...]
1. Collect

2. Extract

3. Read

4. Place

Figure 6: The steps taken to project information about the
inhabitants of an environment onto a taxonomy.

First, an arbitrary set of microbes is collected from an environment, referred to as a sample, from which an instance
of I will be derived. Next, genetic pieces are extracted from
the microbes. These pieces are then read to attain symbol sequences, called reads. Finally, these sequences are assigned
to the hierarchy.
By comparing each read with reference reads from a
database it can be assigned to the best-matching leaf of the
hierarchy, and to all of its ancestors because we are dealing with a hierarchy of classes. The final counts of assigned
reads per node, divided by the total number of reads, act as
weights of the instance (microbe abundance of the sample,
analogous to word abundance of a novel). The same process
is repeated for hundreds of samples with varying experimental parameters, resulting in many weight instances with varying meta-data values that provide insight into what kind of
microbes thrive – and compete for resources – under certain
conditions.
6.2. Evaluation
The presented techniques have been fine-tuned to the needs
of the domain experts via the aforementioned iterative development process. Therefore, it comes as no surprise that the
domain experts are positive about the capabilities and ease
of use of the prototype. Especially the ability of the views to
visually combine large amounts of data while still showing
a single intuitive and navigable representation of a microbe
taxonomy was noted as important by the microbiologist because it suits the customs in the field of microbe community profiling. It also improves his ability to communicate
findings to other experts and even laymen. During the analysis of four different data sets, the microbiologist emphasized
multiple characteristics of our techniques that were of added
value to his analysis process.
The different types of weight scaling (node, sibling, and
level) are of particular use to discern overall microbe dominance and therefore the relevance of possible abundance
differences between the environment samples. The grouping of siblings into single visual nodes matches the notion
that weight is decomposed from a parent class to its chilc 2011 The Author(s)
Journal compilation c 2011 The Eurographics Association and Blackwell Publishing Ltd.

K. Dinkla & M. Westenberg & H. Timmerman & S. van Hijum & J. van Wijk / Comparison of Multiple Weighted Hierarchies

1149

that this abundance is correlated specifically to the drama
genre. If the data set only contained drama novels from a
single century, then the century, or the combination of drama
and century, could have been the main relation to the low
abundance. When the microbiologist used simple aggregation by categories of meta-data values in combination with
traditional charts, there was a larger risk of such false positives because information about additional meta-data fields
was not visualized.
Figure 7: Left: Main view node depicting the decomposition
of microbe abundance over multiple classes, where samples
have an arbitrary order. Center: The same classes, sorted
by a meta-data field. The weights of the three right-most
classes appear similar while the left-most stands out. Right:
The same samples, clustered hierarchically by their weights.
Areas of high and low abundance are more clear, improving
identification of microbe competition.

dren, which sometimes leads to clear divergence of microbe
abundance for specific environment conditions at a certain
level of the taxonomy. The same effect can be seen in the
right branch of Fig. 5, where a parent node with a very consistent weight pattern splits into many children with strongly
varying weight patterns.
Clustering by weight similarity helps identification of interaction; the competition between different microbe classes
for resources of the sampled environments. Here, for a group
of samples, an overall increase of abundance for a specific class implies the overall decrease of abundance for
another class and vice-versa, while other microbe classes
hardly compete with each other (see Fig. 7). An advantage
of the main view is that these interactions can be discovered between different levels of the hierarchy. For example,
the presence of a specific class of microbes might be under
scrutiny of a microbe class that is further up the hierarchy.
However, the currently supported scaling methods do not facilitate the comparison of overall abundance between classes
at different levels and the introduction of a global scale is unlikely of aid because overall abundance can vary greatly between hierarchy levels. Future work is required to determine
techniques that resolve this problem effectively.
The detailed meta-data view aids in the assessment of correlations. Because the exact procedures of the experiments
are often not controlled by the microbiologist himself, or
data of multiple experiments has to be combined, the number
of meta-data fields and values can be large with respect to the
number of samples. In such a situation, perceived correlations between instance weights and meta-data could be misleading. By enabling fast inspection of detailed meta-data,
its reliability can be determined. For example, Fig. 4 shows
low abundance of ‘fuel’ for the drama genre, but also over
a wide range of centuries, which further supports the belief
c 2011 The Author(s)
Journal compilation c 2011 The Eurographics Association and Blackwell Publishing Ltd.

7. Conclusion
We have shown that superimposing information on a nodelink representation of a hierarchy with high-density heat
maps, in part specified by user customizable analysis algorithms, is an effective way to support the comparison of
large numbers of weighted hierarchy instances. The visual
complexity of this hierarchy depiction has been reduced by
grouping sibling nodes as blocks. This also benefits the comparison of weights between sibling nodes, which matches the
cumulation of weights of siblings in their shared parent, i.e.,
the decomposition of the parent’s weights over its children
is visually explicit.
Integration into the analysis process of microbe community experts has been eased by respecting their customs,
made possible through investigation of existing practices, iterative implementation, and further refinement of our techniques. The inclusion of smoothly animated hierarchy navigation and tightly linked views provides an advantage over
existing visualization tools in the target domain, which often disregard the visual orientation of the user. Our techniques enable the discovery of patterns within and between
many weighted instances of a hierarchy, allowing experts to
quickly discover correlations in the abundance of microbes,
for different classes of microbe and environment conditions.
Specifically, it enables the generation of new hypotheses regarding interactions between microbe classes.
In future work, we plan to enable interactive generation
of charts to express abundance in absolute terms. Generation of statistical results is also important to an expert during
the analysis process, and not possible with the current techniques. Further research of layout, interaction, and weight
scaling methods is required to facilitate the comparison of
overall abundance between nodes, especially for those that
are far apart from each other or at different levels of the hierarchy. We are also interested in investigating alternatives
for the heat maps that can convey quantitative information
without the perceptual problems that are inherent to the representation of values with color.
Acknowledgements
NIZO food research has provided data sets for this work.
Specifically, our thanks goes out to Jos Boekhorst for his
collaboration in acquirement and pre-processing of the data.

1150

K. Dinkla & M. Westenberg & H. Timmerman & S. van Hijum & J. van Wijk / Comparison of Multiple Weighted Hierarchies

References
[BBD08] B URCH M., B ECK F., D IEHL S.: Timeline Trees: Visualizing Sequences of Transactions in Information Hierarchies.
In Proceedings of the Working Conference on Advanced Visual
Interfaces (2008), ACM, pp. 75–82. 7
[BMG00] B EDERSON B., M EYER J., G OOD L.: Jazz: an extensible zoomable user interface graphics toolkit in Java. In Proceedings of the 13th annual ACM symposium on User interface
software and technology (New York, NY, USA, 2000), ACM,
pp. 171–180. 8
[DL06] D’A MBROS M., L ANZA M.: Software Bugs and Evolution: A Visual Approach to Uncover Their Relationship. Proceedings of the European Conference on Software Maintenance
and Reengineering (2006), 229–238. 7
[GK07] G RAHAM M., K ENNEDY J.: Exploring multiple trees
through DAG representations. IEEE Transactions on Visualization and Computer Graphics (2007), 1294–1301. 3, 7
[GK10] G RAHAM M., K ENNEDY J.: A survey of multiple tree
visualisation. Information Visualization 9, 4 (2010), 235–252. 7
[GKD06] G RAHAM M., K ENNEDY J., D OWNEY L.: Visual
Comparison and Exploration of Natural History Collections. In
Proceedings of the Working Conference on Advanced Visual Interfaces (2006), ACM, pp. 310–313. 7
[HAQS07] H USON D., AUCH A., Q I J., S CHUSTER S.: MEGAN
analysis of metagenomic data. Genome Research 17, 3 (2007),
377. 8
[Har92] H ART M.: Gutenberg: the history and philosophy of
Project Gutenberg. Project Gutenberg (1992). 2
[HDM98] H ERMAN I., D ELEST M., M ELANÇON G.: Tree visualisation and navigation clues for information visualisation.
Computer Graphics Forum 17, 2 (1998), 153–165. 4
[HMM00] H ERMAN I., M ELANÇON G., M ARSHALL M.: Graph
Visualization and Navigation in Information Visualization: A
Survey. IEEE Transactions on Visualization and Computer
Graphics 6, 1 (2000), 24–43. 7
[HRM∗ 09] H USON D., R ICHTER D., M ITRA S., AUCH A.,
S CHUSTER S.: Methods for comparative metagenomics. BMC
Bioinformatics 10, Suppl 1 (2009), S12. 7
[HVW08] H OLTEN D., VAN W IJK J.: Visual Comparison of
Hierarchically Organized Data. In Computer Graphics Forum
(2008), vol. 27, Wiley Online Library, pp. 759–766. 7

[Mil95] M ILLER G.: WordNet: a lexical database for English.
Communications of the ACM 38, 11 (1995), 39–41. 2
[MS07] M ANSMANN S., S CHOLL M.: Exploring OLAP aggregates with hierarchical visualization techniques. In Proceedings
of the 2007 ACM Symposium on Applied Computing (New York,
NY, USA, 2007), ACM, pp. 1067–1073. 7
[PGB02] P LAISANT C., G ROSJEAN J., B EDERSON B.: SpaceTree: Supporting Exploration in Large Node Link Tree, Design Evolution and Empirical Evaluation. In Proceedings of the
IEEE Symposium on Information Visualization (Washington, DC,
USA, 2002), IEEE, pp. 57–64. 5, 8
[RT81] R EINGOLD E., T ILFORD J.: Tidier drawings of trees.
IEEE Transactions on Software Engineering 7, 2 (1981), 223–
228. 4
[SBJ∗ 07] S UNDQUIST A., B IGDELI S., JALILI R., D RUZIN M.,
WALLER S., P ULLEN K., E L -S AYED Y., TASLIMI M., BATZOGLOU S., RONAGHI M.: Bacterial flora-typing with targeted,
chip-based Pyrosequencing. BMC Microbiology 7, 1 (2007), 108.
7, 8
[Shn92] S HNEIDERMAN B.: Tree visualization with tree-maps:
2-d space-filling approach. ACM Transactions on Graphics 11, 1
(1992), 92–99. 1
[SIG07] S HANMUGASUNDARAM M., I RANI P., G UTWIN C.:
Can smooth view transitions facilitate perceptual constancy in
node-link diagrams? In Proceedings of Graphics Interface
(2007), pp. 71–78. 7
[TS07] T U Y., S HEN H.: Visualizing Changes of Hierarchical
Data using Treemaps. IEEE Transactions on Visualization and
Computer Graphics 13, 6 (2007), 1286–1293. 7
[VLKS∗ 10] VON L ANDESBERGER T., K UIJPER A., S CHRECK
T., KOHLHAMMER J., VAN W IJK J., F EKETE J., F ELLNER D.:
Visual Analysis of Large Graphs. Proceedings of Eurographics:
State of the Art Report 2 (2010). 7
[VM06] V INNIK S., M ANSMANN F.: From analysis to interactive exploration: Building visual hierarchies from OLAP cubes,
vol. 3896 of Lecture Notes in Computer Science. Springer, 2006,
pp. 496–514. 7
[VMHR∗ 07] VON M ERING C., H UGENHOLTZ P., R AES J.,
T RINGE S., D OERKS T., J ENSEN L., WARD N., B ORK P.:
Quantitative Phylogenetic Assessment of Microbial Communities in Diverse Environments. Science 315, 5815 (2007), 1126.
8

[JS98] J ERDING D., S TASKO J.: The Information Mural: a technique for displaying and navigating large information spaces.
IEEE Transactions on Visualization and Computer Graphics 4,
3 (1998), 257–271. 3
[JS10] J ÜRGENSMANN S., S CHULZ H.: A Visual Survey of Tree
Visualization. In Poster Compendium of the IEEE Conference on
Information Visualization (2010). 7
[LSPS10] L EX A., S TREIT M., PARTL C., S CHMALSTIEG D.:
Comparative Analysis of Multidimensional, Quantitative Data.
IEEE Transactions on Visualization and Computer Graphics 16
(2010), 1027–1035. 7
[MGT∗ 03] M UNZNER T., G UIMBRETIÈRE F., TASIRAN S.,
Z HANG L., Z HOU Y.: TreeJuxtaposer: scalable tree comparison
using Focus+Context with guaranteed visibility. In ACM SIGGRAPH Papers (New York, NY, USA, 2003), ACM, pp. 453–
462. 7
[MH98] M ELANÇON G., H ERMAN I.: Circular drawings of
rooted trees. Reports of the Centre for Mathematics and Computer Sciences (1998). 4
c 2011 The Author(s)
Journal compilation c 2011 The Eurographics Association and Blackwell Publishing Ltd.

