DOI: 10.1111/j.1467-8659.2010.01726.x
Eurographics Symposium on Rendering 2010
Jason Lawrence and Marc Stamminger
(Guest Editors)

Volume 29 (2010), Number 4

Fast Estimation and Rendering of Indirect Highlights
J. Laurijssen1 , R. Wang2 , Ph. Dutré1 , and B.J. Brown1
1 Katholieke

Universiteit Leuven , Belgium

2 University

of Massachusetts Amherst

Abstract
This paper proposes a method for efficiently rendering indirect highlights. Indirect highlights are caused by the
primary light source reflecting off two or more glossy surfaces. Accurately simulating such highlights is important
to convey the realistic appearance of materials such as chrome and shiny metal. Our method models the glossy
BRDF at a surface point as a directional distribution, using a spherical von Mises-Fisher (vMF) distribution. As
our main contribution, we merge multiple vMFs into a combined multimodal distribution. This effectively creates
a filtered radiance response function, allowing us to efficiently estimate indirect highlights. We demonstrate our
method in a near-interactive application for rendering scenes with highly glossy objects. Our results produce
realistic reflections under both local and environment lighting.
Categories and Subject Descriptors (according to ACM CCS): I.3.7 [Computer Graphics]: Three-Dimensional
Graphics and Realism—Color, shading, shadowing, and texture

1. Introduction

In this paper we treat the glossy BRDF at a surface point
as a directional distribution modeled with a spherical von
Mises-Fisher (vMF) distribution. As our main contribution,
we merge multiple vMFs originating from different surface
points into a combined multimodal distribution, effectively
creating a filtered radiance response function. This allows
us to compute indirect highlights efficiently, without requiring a large number of samples. We demonstrate our technique with a near-interactive application which renders indirect highlights under both local and environment lighting.

With the rapid improvements in computation power, interactive global illumination has attracted increasing attention
in graphics research. Today it is not surprising to see rendering systems that simulate multi-bounce reflections on
diffuse and ideally specular surfaces at interactive rates
[WWZ∗ 09]. Despite this progress, it remains a challenge to
efficiently simulate global illumination effects that fall into
the medium-to-high frequency range. Our goal in this paper
is to simulate indirect highlights, caused by the primary light
source reflecting off two or more glossy surfaces (Figure 1).
Although indirect highlights are more subtle than diffuse interreflections, they are important to convey the realistic appearance of materials such as chrome and shiny metal.

2. Related Work
Global illumination has been a long-standing challenge in
graphics research. An overview of modern techniques can
be found in standard textbooks such as [DBB06]. A fundamental difficulty today is the computation of indirect lighting when many glossy surfaces are present. Standard Monte
Carlo methods such as path tracing and Metropolis sampling [Vea97] take a long time to converge. Other techniques such as irradiance caching [WRC88] and photon
mapping [Jen01] exploit illumination coherence, but their
cost increases rapidly for highly view-dependent effects. Radiance caching [KGPB05, GKBP05, GKB09] caches both
spatial and directional samples, which is efficient for moderately glossy surfaces but difficult for highly glossy ones,
especially when considering multiple bounces of reflections.

Consider the extreme case of two non-planar mirror surfaces reflecting light from a point source to the camera. It is
non-trivial to find a valid path that connects the light source
and camera through reflections on both surfaces, or even
whether such a path exists at all. If the surfaces are glossy,
many valid paths may exist. But still, only a few make
substantial contributions to the reflected radiance, making
it hard to find the important paths. In addition, the highly
view-dependent nature of such reflections invalidates most
caching based schemes [WRC88, Jen01]. Thus in general it
takes a long time to sample these paths adequately and compute a noise-free image.
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.
Published by Blackwell Publishing, 9600 Garsington Road, Oxford OX4 2DQ, UK and
350 Main Street, Malden, MA 02148, USA.

1305

1306

Laurijssen & Wang & Dutré & Brown / Fast Estimation and Rendering of Indirect Highlights

(a) No indirect highlights

(b) Our method

(c) Path traced

Figure 1: Our goal is to efficiently render indirect higlights (e.g. LGGE paths [Hec90]). (a) A scene rendered without indirect
highlights. (b) The same scene rendered with our method. Indirect highlights clearly contribute to the reflections of the dragon
on the sphere. (c) Rendering using a path tracer with the same number of paths traced as (b). Computation times are roughly
equal (∼ 3 seconds, at 1024 × 960 with 64 secondary rays). Our method produces smoother indirect highlights with fewer
samples than the path tracer.
For very glossy materials, it is usually more efficient to
trace stochastic rays from the view point. However, because
rays diverge upon each reflection, even with proper importance sampling, a large number of sample rays is required to
eliminate noise in the image. In this work, our distribution
merging method can be seen as an efficient filter applied to
stochastic sampling. We effectively create a filtered radiance
response function, allowing us to simulate indirect highlights
with a greatly reduced number of sample rays.
In [KC08] and [YWY08], illumination filtering is exploited to reduce sampling noise and improve rendering
quality; in [RS09], image-space samples are filtered to approximate glossy reflections and other distribution ray tracing effects. These techniques only consider a single bounce
of reflections and thus do not produce indirect highlights.
Ray differentials [Ige99] and path differentials [SW01]
keep track of each ray’s footprint in order to perform filtering during ray tracing. These methods are typically used
for texture filtering, but can perhaps be combined with our
approach for efficient reflectance filtering.
PRT [SKS02] exploits precomputed transport functions
to allow for real-time rendering. Although view-dependent
effects are possible with PRT, they are generally expensive
to sample and compress. [GKD07] and [WRG∗ 09] approximate BRDFs using Spherical Gaussians (SGs), achieving
high-quality results for glossy materials. However, they only
consider direct lighting. [GKMD06] and [TS06] use SGs to
approximate entire transport functions, which can include
both direct and indirect lighting. As with many PRT techniques, they require static geometry and materials.
Our method builds on the von Mises-Fisher (vMF) distribution [HSRG07], which is similar to the Spherical Gaussian
except for a normalization factor. Because of the convolution

property of vMFs, such distributions have been successfully
applied for efficient normal map filtering [Tok05, HSRG07,
OB10]. In contrast, we use vMF merging to filter the radiance response function. Our problem is not easily formulated
as convolution since our vMF lobes may not be identical.
Another area of related work is based on gathering illumination from many lights [Kel97, WFA∗ 05, HPB07]. These
methods assume the source of indirect lighting as many virtual point lights (VPLs). Then, the contribution from each
VPL is gathered at every shading point to approximate indirect lighting. Some recent work [Chr08,REG∗ 09] uses many
points to represent both the illumination and geometry, and
efficiently compute global illumination by projecting these
points to microbuffers stored at each shading pixel. These
methods exploit the clustering of diffuse point lights, while
our method exploits the clustering of reflected BRDF lobes.
Thus our method can be combined with existing methods to
allow for glossy clustered lights.
Visual spherical lights (VSLs) [HKWB09] extends standard VPLs (which assume diffuse point lights) to include
glossy source lights. Though efficient, it currently runs offline, taking several minutes to render a frame. In general,
highly glossy materials require many more source point
lights, degrading the performance of such an approach.
Recently, Wang et al. [WWZ∗ 09] combine GPU-based
photon mapping with adaptive irradiance sampling and photon tree cuts to achieve interactive global illumination. Their
method is efficient for diffuse or ideally specular surfaces.
On the other hand, simulating high-frequency glossy reflections remains a challenge.
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

1307

Laurijssen & Wang & Dutré & Brown / Fast Estimation and Rendering of Indirect Highlights

review of the vMF distribution; we then discuss the merging
algorithm; finally we describe the rendering algorithm.
4. Representation of Directional Distributions
4.1. The von Mises-Fisher Distribution
The von Mises-Fisher (vMF) distribution γ(s) [MJ00] is a
probability density function that describes the distribution
of directions s centered around a mean direction µ:
γ(s) = c(κ)eκ(µ·s)

Figure 2: Indirect highlights are formed by two glossy reflections between the camera and light source. Important
paths such as the path through q4 are easily missed if the
sampling is not sufficiently dense.
3. Overview
Figure 2 shows an illustration of indirect highlights, which
are created by the primary light reflected off two or more
glossy surfaces before reaching the camera. To sample these
paths, we can trace paths from the camera to a first surface
point p and perform BRDF importance sampling to continue the path. At each secondary surface point qi we send
a shadow ray to the light source to obtain the path’s contribution from the light source. Due to the narrow support
of glossy BRDFs (shown in the figure), important paths are
easily missed if we do not sample adequately. This leads to
significant noise due to the variance in sampling.
Our solution is to combine the contributions from all
points qi (in Figure 2) into merged lobes (in red), representing filtered radiance responses. This approximation allows
us to quickly compute the total radiance due to indirect highlights, without requiring a large number of sample rays.
Our algorithm can be implemented in any existing path
tracer. Specifically, at a secondary intersection qi , instead of
sending a shadow ray to the light source to sample direct
lighting, we store each qi ’s position and the corresponding
cosine-weighted BRDF lobe. We then merge all BRDF lobes
into a small number of clusters and approximate each cluster by a single lobe. We also compute the mean position for
each cluster. Finally each merged lobe is used to evaluate
direct lighting by sending a shadow ray to the light source.
The light source can be an environment map, in which case
we use filtered environment maps to return illumination radiance. Because the number of merged lobes is small, we
can greatly reduce the required number of shadow rays.
Since we focus on indirect highlights, paths other than indirect highlights are handled using other techniques. In particular, we use standard photon mapping to account for diffuse interreflections. In the following, we first provide a brief
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

(1)

where κ is the angular width: higher values of κ correspond
κ
to more concentrated distributions. c(κ) = 4π sinh(κ)
is a normalization factor. Except for c(κ), the vMF distribution is
the same as a Spherical Gaussian. Assuming κ 1, the distribution can be approximated as [HSRG07]:
κ κ(µ·s−1)
(2)
γ(s) ≈
e
2π
Suppose that si , i ∈ [1, M] is a set of directions resulting
from a stochastic process that can be modeled as a single
vMF distribution γ(s). We can estimate the parameters µ and
κ of this distribution by computing the unnormalized aver1 M
age direction r = M
∑i=1 si . Intuitively, r points in the mean
direction of the lobe, and the magnitude r indicates the angular width of the lobe. For example, a uniform distribution
of directions on the sphere results in r = 0, while an extremely concentrated distribution results in r ≈ 1. Mathematically, unbiased estimators for µ and κ based on r are
given by Banerjee et al. [BDGS05] as:
µ =

r
,
r

κ ≈

3 r − r
1− r 2

3

(3)

4.2. Mixture of vMF Distributions
A vMF distribution describes a single lobe, referred to as
a unimodal distribution. In many cases, a set of directions
si cannot be adequately described by a single lobe and thus
must be modeled as a multimodal distribution. A simple example is a set of directions generated through importance
sampling a BRDF with both a diffuse and a glossy component. We represent such a distribution as a mixture of vMFs:
N

∑ α j γ j (s)

(4)

j=1

where α j is the weight for each lobe, subject to ∑Nj=1 α j = 1.
In order to estimate the parameters of this model, we cluster
the set of input directions si . For each cluster, vMF parameters are computed (Eq. 3). Banerjee et al. [BDGS05] proposed a hard clustering spherical Expectation-Maximization
(EM) algorithm, as shown below:
It is an iterative algorithm that starts with N initial vMF
estimates. Each iteration consists of an expectation step and
a maximization step. The expectation step assigns a sample

1308

Laurijssen & Wang & Dutré & Brown / Fast Estimation and Rendering of Indirect Highlights

Algorithm 4.1:

V MF-EM

E STIMATION(S)

repeat
for each
 i ← 1 to M
k ← argmax j α j γ j (si )



for j ← 1 to N
do
1 j=k


 do zi j ←
0 else
for j 
← 1 to N
1 M
αj ← M

∑i=1 zi j


M

∑i=1 zi j si

 rj ← M α
j
do
3 rj − rj 3

κ
←
j

1− r j 2



 µ ← rj
j
rj
until converged

si to the lobe γ j that it most likely belongs to. The maximization step then updates the estimated parameters for each
lobe. The algorithm typically converges after a small number of iterations. Han et al. [HSRG07] show that additional
attributes such as color c j can be added easily to each distribution by adding their estimates to the maximization step.
5. Merging von Mises-Fisher Distributions
As outlined in Section 3, indirect highlights are created by
at least two consecutive glossy bounces between the camera
and light source (Figure 2). It is very difficult to find significant contributions for these highlights because the probability of a highly glossy BRDF lobe at points qi lying in the
direction of the light source is small.
Although each individual lobe may be very concentrated,
the union of them, represented by the merged distribution, is
typically much broader. Thus the probability of the merged
distribution lying in the direction of the light source is
much higher. This property allows us to estimate indirect
highlights more efficiently with greatly reduced sampling
noise. Although it is not obvious that the merged distribution
should give a correct result, we show in Sections 6.1 and 6.2
that it is indeed a good approximation of indirect highlights.
Below we discuss our method for merging distributions.
The input is a large number of unimodal distributions, representing the individual lobes at points qi . These lobes are
computed on the fly, similar to [WRG∗ 09]. Our output is a
mixture of vMFs with a small number of lobes representing
the merged distributions.
Unimodal Distributions. For now, assume that the merged
distribution of a set of vMFs is unimodal and hence can be
described by a single vMF (Figure 3(a)). Note that each input vMF can have a different angular width. To estimate such

(a)

(b)

(c)

Figure 3: The total distribution of a set of input vMFs is approximated by (a) a unimodal distribution; and (b) a multimodal distribution. (c) The error introduced by tracing
shadow rays from q¯ instead of q is a function of the distance
d between the two points and the distance r of q to the light
source. As long as d
r the error is insignificant.
a distribution, we need to know its unnormalized mean direction rm , which must be computed from the union of the
input vMFs. Since we already know the unnormalized mean
direction ri of each input vMF, we can exactly compute rm
by taking a weighted average of ri :
rm = ∑ αi ri

(5)

i

where αi is the relative weight for each input vMF generated
during importance sampling. From rm we can then estimate
the parameters of the merged vMF using Eq. 3.
Multimodal Distributions. As shown in Figure 3(b), the
input vMFs can form distinct clusters, therefore in general we must use a multimodal distribution to represent the
merged result. To compute individual components of such a
mixture model, we cluster ri into groups by applying the EM
estimation (Algorithm 4.1) on rri . Each of these clusters is
i
then used to create one vMF distribution according to Eq. 5.
Discussion. In case each input vMF γ(s) has equal κ (i.e. angular width), the merging can be formulated as a convolution
problem. Specifically, we can compute the distribution D(s)
of the lobe centers µi and the merged vMF is simply the convolution of γ(s) with D(s). This approach has been studied
in the context of normal map filtering by [HSRG07, Tok05].
However in our case, the input vMFs do not have equal κ,
therefore we cannot directly use the convolution formula.
In theory our lobe merging algorithm can be problematic
when the input lobes have very different angular widths but
lobe centers that are close to each other. In practice this is
seldom an issue, mainly because we are only concerned with
highly glossy BRDFs whose lobes are sharp. Wide lobes (i.e.
diffuse components of the BRDF) are processed separately.
If we look at the relationship between κ and r in Eq. 3, we
can see that a significant range of the κ value corresponds to
a very narrow range of r at r ≈ 1. This means that the
span in directions among the input lobes, which is likely to
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

1309

Laurijssen & Wang & Dutré & Brown / Fast Estimation and Rendering of Indirect Highlights

be wider than each individual lobe, has a much stronger influence on the width of the merged lobe. Therefore, in practice merging lobes with different angular widths does not
pose any serious problem.

We are particularly interested in the inner integral, which can
be seen as an effective BRDF computed as:

Comparisons to LightCuts. Our method bears some similarity to the LightCuts algorithm [WFA∗ 05], which clusters many diffuse VPLs based on their positions and orientations in a hierarchical manner. Each cluster in the hierarchy contains a VPL representative that exemplifies all
VPLs in the cluster. The main difference of our method is
that we do not use a VPL-based approach, instead, we use
ray tracing to find secondary intersection points. In addition,
our method aims to cluster and merge reflected BRDF lobes,
while LightCuts aim to cluster diffuse VPLs. Our method
can in fact be used as an extension in LightCuts to enable
glossy (non-diffuse) VPLs.

˜ q,
¯ s , so ) expresses the combined contribution of the
Here ρ(
˜ s , −s) to the indirect highlight. Our algoBRDF lobes ρ(q,
˜ q,
¯ s , so ) with vMF merging (Section 5),
rithm estimates ρ(
and then evaluates Eq. 8 to obtain the total indirect highlights.

6. Applications
In this section we describe how the lobe merging algorithm
is used in our rendering applications. We also discuss the
approximation accuracy and details of these applications.

6.1. Theory
Light transport through a scene is described by the rendering
equation [Kaj86], which states that the radiance L(p → so )
from point p in direction so is the sum of the emitted radiance Le (p → so ) and the reflected radiance:
L(p → so ) = Le (p → so ) +

Z
S

˜ s, so )L(p ← s)dωs (6)
ρ(p,

˜ s, so ) is the cosine-weighed BRDF at surface
where ρ(p,
point p. In the following we focus on indirect highlights
formed by two bounces of glossy reflections. Defining secondary surface points q such that L(p ← s) = L(q → −s),
we can expand the rendering equation with one additional
level of recursion:
L1 (p → so ) =
Z Z
S S

˜ s, so )ρ(q,
˜ s , −s)Le (q ← s )dωs dωs
ρ(p,

(7)

We assume that the illumination Le (q ← s ) is distant relative to q, thus it does not change much for different points q,
as long as these points are close to each other. We choose a
mean point q¯ with illumination Le (q¯ ← s ) to be the representative of all points qi in a local area. The error introduced
by this assumption is discussed later. Eq. 7 can now be reordered as follows:
L1 (p → so ) =
Z
S

Le (q¯ ← s )

Z
S

˜ s, so )ρ(q,
˜ s , −s)dωs dωs
ρ(p,

(8)

c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

˜ q,
¯ s , so ) =
ρ(

Z
S

˜ s, so )ρ(q,
˜ s , −s)dωs
ρ(p,

(9)

6.2. Algorithm
We start from a shading point seen by the camera. For each
such shading point, we trace secondary rays distributed ac˜ s, so ). For
cording to the BRDF at the shading point ρ(p,
each secondary intersection point we store the point’s location qi and the vMF distribution γi corresponding to
˜ i , s , −s). Because a spherical probability density funcρ(q
tion such as the vMF distribution integrates to 1, we also
need to store
an associated color ci for each γi which correR
˜ i , s , −s)dωs , attenuated with the color of
sponds to S ρ(q
the BRDF at the shading point p.
We proceed by merging the set of distributions γi . This
results in a multimodal estimate of the distribution corre˜ q,
¯ s , so ). We need to makeR sure that the total
sponding to ρ(
˜ q,
¯ s , so )dωs ,
integrand of this mixture corresponds to S ρ(
which we achieve by scaling by a constant a such that
M

a ∑ α jc j =
j=1

1
N

N

(10)

∑ ci

i=1

We also compute for each cluster j a position q¯ j as the mean
position of all its cluster members. Finally we perform a direct lighting computation for each of the lobes aα j c j γ j (s )
at position q¯ j .
Note that since the mean position q¯ j may lie underneath
the surface, the direct lighting computation may incorrectly
return zero due to immediate intersection with the surface.
We avoid this by choosing an appropriate ε value for each
shadow ray. Alternatively, we could pick a representative
point from all the secondary intersection points, instead of
using their mean position.
6.3. Approximation Error
We assume that the incident lighting and visibility do not
vary much among the secondary intersection points q. This
assumption allows us to trace shadow rays starting from a
mean position q¯ for all qi ’s. However this approximation
may introduce error, if the light source is not distant from all
qi ’s. To see this, consider a scene with two glossy reflectors
and a point light source which emits radiance L uniformly.
For each point q, the error is
µd

ε = c(κ)(eκµ¯s − eκµs ) = c(κ)eκµs (1 − e r )L

(11)

1310

Laurijssen & Wang & Dutré & Brown / Fast Estimation and Rendering of Indirect Highlights

Figure 4: Top row: indirect highlights rendered with a standard path tracer. Bottom row: our results computed with the same
number of samples. Our method produces smoother indirect highlights at roughly the same rendering time.
with d = q − q¯ and r the distance to the light source (Figure 3c). Thus to keep the error low, the distance of each point
to the mean position q¯ should be relatively small compared
to the distance to the light source. For environment lighting,
the light source is distant by definition; for local lighting, we
found this assumption to be true in most cases.
An addition source of error is the variation of shadow ray
visibility from each point q to the light source. Even with
environment lighting, the visibility may vary between the
q’s. However, in practice this is seldom an issue, because all
points belonging to the same cluster are fairly concentrated
spatially, so the visibility variation is typically very small.
6.4. Environment Lighting
Our approach can also render scenes lit by environment
lighting. Some simplifications can be made in this case. First
of all we use vMF prefiltered environment maps similar to
those used by Green et al. [GKD07]. Furthermore instead of
evaluating visibility after merging, we decide whether to add
a lobe at point qi based on one shadow ray in the mean direction µ of that lobe. Finally we do not need to compute mean
positions q¯ j for each cluster, since the direction of lighting
is independent of the point position.
7. Results
Implementation. We have implemented our algorithm in
a GPU renderer using NVidia’s OptiX [PBD∗ 10]. The implementation runs on an Intel Core2 Quad Q9450 2.66GHz
processor with an NVIDIA Quadro FX5800 graphics card.
Both local lighting and environment lighting are supported.
In the local lighting case, we assume one or a few primary point light sources. We use a GPU-based photon mapper to account for multi-bounce diffuse indirect lighting. To

do so, we start from the photon mapper included in the OptiX SDK, which runs on the GPU and is updated every time
the lighting changes. To accelerate final gathering, we add
the photon irradiance cache as introduced in [Chr99]. This
calculates irradiance ahead of time for a small number of
selected photons, using density estimation. The current photon mapping implementation we use takes less than a second
to re-build when the light source changes. In future work
we will integrate state-of-the-art GPU-based photon mapping [ZHWG08] to further improve the speed of this step.
To render, at each primary intersection point p we compute direct lighting and trace one diffuse final gather sample. These samples are then filtered in image space with a
bilateral filter [TM98], resulting in smooth diffuse indirect
lighting. Note that we use the bilateral filter only for smoothing the results, not for upsampling. Typically we use a kernel with a width of 30-40 pixels. Next, we trace additional
secondary rays, importance sampled according to the glossy
BRDF. At each secondary intersection point qi we store its
corresponding vMF lobe for vMF merging; we also trace a
final gather sample for both the diffuse and glossy component of the BRDF.
In the environment lighting case, we do not use the photon mapper to account for diffuse indirect lighting, due to
its cost. Therefore our diffuse reflections in this case only
include direct illumination. This is a reasonable simplification since diffuse indirect lighting is often not significant in
environment lighting. However, we must account for shadows or the rendering would look overly bright. To include
global shadowing effects, we compute an ambient occlusion
lobe at each vertex on the GPU before the rendering starts.
The lobe is computed from unoccluded shadow rays sampled from each vertex. This step takes no more than a few
seconds, and is computed only once at the start.
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

Laurijssen & Wang & Dutré & Brown / Fast Estimation and Rendering of Indirect Highlights

(a) without clustering
(a) without merging

1311

(b) with clustering

(b) with merging

Figure 5: The left image is rendered without vMF merging.
Each individual lobe in points qi is used to index the prefiltered environment map. The right image is rendered with
vMF merging, which produces much smoother results.
Rendering Quality. In all our scenes we use Phong specular BRDFs with exponents 64–512. We also include small
diffuse components to the BRDFs to increase the rendering
realism. We first compare the results of our method against
a standard path tracer. We are interested to see if our algorithm renders indirect highlights better for a given sampling
budget. In Figure 4 we compare both algorithms for some
scenes. Both implementations are identical except for the
indirect highlights component: the top row does not apply
vMF merging. Each individual lobe at the secondary intersection point requests a shadow ray to obtain illumination radiance. The bottom row shows our algorithm. The rendering
times are roughly the same for both algorithms. Our results
are smoother with less noise.
This same observation holds for the environment lighting
case shown in Figure 5. We notice that merging allows us
to render high-frequency lighting contributions (such as the
bright lights in Grace Cathedral) much more efficiently.
During experiments, we found that in most cases the
merged distribution is well approximated by a unimodal distribution. We could argue whether it is necessary to consider
a multimodal distribution. The answer is yes – the artifacts
introduced by using a unimodal-only representation can be
very severe sometimes. As an example, in Figure 6 we show
three colored perpendicular glossy planes. In the bottom
plane the reflections of the two vertical planes are visible.
Around the reflection of the edge shared by the two vertical
planes, the merged distribution contains contributions from
both planes. Without clustering (i.e. using unimodal only),
these contributions are merged into a nearly diffuse distribution, and artifacts are clearly visible (Figure 6a). With
clustering enabled, the algorithm automatically finds a multimodal distribution that consists of two clusters. Therefore
the artifacts are eliminated (Figure 6b).
On the other hand, we found that in places where the reflector contains rapidly varying high curvature, such as the
bunny example in Figure 7a–b, our clustering algorithm may
fail to detect clusters and thus incorrectly return a unimodal
distribution. This leads to indirect highlights which are too
smooth. However, compared to standard path tracing, which
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

Figure 6: The reflection of the edge between the two colored
vertical planes contains contributions from both planes. (a)
no clustering is applied, leading to artifacts in the reflections. (b) clustering is enabled, and artifacts are eliminated.

(a) Path traced

(b) Our method

Figure 7: Clustering for surfaces reflecting a surface with
high-frequency variation in curvature sometimes produces a
unimodal distribution resulting in too smooth indirect highlights (b) compared to ground truth (a).
typically produces noisy artifacts (shown in Figure 4 top
row), these smooth highlights are often preferred.
Performance. Table 1 shows the performance of our algorithm. All images are rendered at 640 × 480 resolution. We
trace 32 secondary rays and merge lobes into multimodal
distributions with two vMFs. Each image is rendered in just
a few seconds. Table 1 also shows the percentage cost of
each major rendering step, including photon mapping, direct
lighting, indirect diffuse, tracing secondary rays, and clustering. The performance varies depending on the number of
secondary rays that need to be traced and whether or not
these rays hit a surface.
The most challenging scenes are the sponza and bunny
scenes where many glossy surfaces are present, and most
secondary rays hit some surface. On the other hand, scenes
with environment lighting are much faster to render, often
at interactive frame rates. In scenes with a mix of diffuse
and glossy surfaces such as the dragon scene, computing the
diffuse indirect lighting (which is not the main focus of our
algorithm) is the main computation bottleneck. The overall
cost of clustering is very small. Thus we pay only a very low
price to avoid artifacts as those shown in Figure 6.
Glossiness Figure 8 shows how the glossiness of the reflectors influence the rendering quality of our approach. The
sphere on the right has medium glossiness (Phong exponent
e = 32) while two other spheres (one on the left, and one

1312

Laurijssen & Wang & Dutré & Brown / Fast Estimation and Rendering of Indirect Highlights

(a) path traced

(a) path traced

(b) vMF merging

Figure 8: The effect of glossiness on the rendering quality.
In this scene the sphere on the right has a Phong specular
exponent 32. The sphere on the left and the green sphere
visible in the reflection both have a Phong specular exponent
512. Our algorithm improves the rendering quality of the
reflected green sphere, which is difficult to sample due to the
highly glossy BRDF on that sphere.
Scene Le
Sponza L
Car
L
Bunny L
Dragon L
Glasses E
Teapot E

#F
66K
371K
72K
20K
21K
4K

P
2.1
6.4
1.5
11.1
-

D
2.7
11.8
1.3
12.2
32.5
57.7

I
10.1
77.3
10.3
71.2
-

S
80.1
4.4
78.5
3.6
44.0
32.3

C
5.0
0.1
8.4
1.9
23.5
10.0

(b) vMF merging

Figure 9: In this example, we set all spheres to use Phong
specular BRDF with exponent 512. The left image is rendered without vMF merging, while the right image is rendered with vMF merging.

Fps
0.13
0.84
0.14
1.01
2.22
4.27

Table 1: Performance of our GPU renderer. All images are
640 × 480. The second column lists whether the scene is lit
by environment lighting (E) or local lighting (L). The third
column shows the number of faces of each scene. Columns
4–8 list the percentage (%) cost of the following rendering
steps: photon mapping (P), direct lighting (D), indirect diffuse (I), tracing secondary rays (S) and clustering (C). The
last column shows the frame rates.
green sphere visible through reflections) are highly glossy
(e = 512). The reflection of the green sphere is a difficult
case for path tracing because it contains important paths that
are difficult to sample. In particular, the highly glossy BRDF
on the green sphere leads to narrow reflected lobes at the secondary intersection points. This is the case described in Figure 2. Our algorithm greatly improves the rendering quality
in such cases, due to the filtering of reflected lobes. On the
other hand, we do not improve the reflection of the medium
glossy sphere significantly, since such cases are relatively
easy to compute with path tracing.
In Figure 9 we show an example where we set all spheres
to use Phong specular BRDF with exponent e = 512. Again,
our results are much smoother in areas of indirect highlights.
8. Conclusion
We have presented a technique to merge multiple directional
distributions, which allows us to compute indirect highlights
efficiently. We demonstrated our technique under both local lighting and environment lighting, and achieved near-

Figure 10: The Glasses scene illuminated by environment
lighting. The rendering speed is 2.22 fps.
interactive rendering speed using a GPU implementation
without any precomputation. As correct simulation of indirect highlights is important to convey the appearance of
glossy materials, we believe that our technique is a valuable
complement to existing global illumination methods.
For future work we would like to examine our technique
when using more than two bounces of glossy reflections. It
would be interesting to study the effect of using our merged
lobes for additional sampling. We also plan to investigate
how to extend our technique to anisotropic materials e.g. by
using the Fisher-Bingham distribution [MJ00].
Acknowledgments We would like to thank the anonymous
reviewers for their thoughtful comments, and Toon Lenaerts
and Roeland Schoukens for modeling the scenes. Jurgen
Laurijssen is supported by grant CREA/08/017 from the Research Fund K.U.Leuven (Onderzoeksfonds K.U.Leuven);
Rui Wang is supported in part by NSF CAREER grant CCF0746577. Benedict J. Brown is a post-doctoral fellow of the
Research Foundation - Flanders (FWO).
References
[BDGS05] BANERJEE A., D HILLON I. S., G HOSH J., S RA S.:
Clustering on the unit hypersphere using von mises-fisher distributions. J. Mach. Learn. Res. 6 (2005), 1345–1382.
[Chr99] C HRISTENSEN P. H.: Faster photon map global illumination. Journal of Graphics Tools 4, 3 (1999), 1–10.

c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

Laurijssen & Wang & Dutré & Brown / Fast Estimation and Rendering of Indirect Highlights
Point-based Approximate Color
[Chr08] C HRISTENSEN P.:
Bleeding. Tech. rep., Pixar Technical Memo #08-01, 2008.
[DBB06] D UTRÉ P., BALA K., B EKAERT P.: Advanced Global
Illumination, second edition. A. K. Peters, Ltd., 2006.
ˇ
J., B OUATOUCH K.:
[GKB09] G ASSENBAUER V., K RIVÁNEK
Spatial directional radiance caching. Computer Graphics Forum
28, 4 (2009), 1189–1198.
ˇ
J., B OUATOUCH K., PATG AUTRON P., K RIVÁNEK
S. N.: Radiance cache splatting: A gpu-friendly global
illumination algorithm. In Proc. EGSR (2005), pp. 55–64.

[GKBP05]

TANAIK

[GKD07] G REEN P., K AUTZ J., D URAND F.: Efficient reflectance and visibility approximations for environment map rendering. Computer Graphics Forum 26, 3 (2007), 495–502.
[GKMD06] G REEN P., K AUTZ J., M ATUSIK W., D URAND F.:
View-dependent precomputed light transport using nonlinear
gaussian function approximations. In Proc. I3D (2006), pp. 7–
14.

1313

radiance transfer for real-time rendering in dynamic, lowfrequency lighting environments. ACM Trans. Graph. 21, 3
(2002), 527–536.
[SW01] S UYKENS F., W ILLEMS Y. D.: Path differentials and
applications. In Proc. EGRW (2001), pp. 257–268.
[TM98] T OMASI C., M ANDUCHI R.: Bilateral filtering for gray
and color images. In ICCV (1998), pp. 839–846.
[Tok05] T OKSVIG M.: Mipmapping normal maps. Journal of
Graphics Tools 10, 3 (2005), 65–71.
[TS06] T SAI Y.-T., S HIH Z.-C.: All-frequency precomputed radiance transfer using spherical radial basis functions and clustered tensor approximation. ACM Trans. Graph. 25, 3 (2006),
967–976.
[Vea97] V EACH E.: Robust Monte Carlo Methods for Light
Transport Simulation. PhD thesis, Stanford University, 1997.

[Hec90] H ECKBERT P. S.: Adaptive radiosity textures for bidirectional ray tracing. In Proc. SIGGRAPH (1990), pp. 145–154.

[WFA∗ 05] WALTER B., F ERNANDEZ S., A RBREE A., BALA
K., D ONIKIAN M., G REENBERG D. P.: Lightcuts: a scalable approach to illumination. ACM Trans. Graph. 24, 3 (2005), 1098–
1107.

ˇ
J., WALTER B., BALA K.:
[HKWB09] H AŠAN M., K RIVÁNEK
Virtual spherical lights for many-light rendering of glossy scenes.
ACM Trans. Graph. 28, 5 (2009), 1–6.

[WRC88] WARD G. J., RUBINSTEIN F. M., C LEAR R. D.: A ray
tracing solution for diffuse interreflection. In Proc. SIGGRAPH
(1988), pp. 85–92.

[HPB07] H AŠAN M., P ELLACINI F., BALA K.: Matrix rowcolumn sampling for the many-light problem. ACM Trans.
Graph. 26, 3 (2007), 26.

[WRG∗ 09] WANG J., R EN P., G ONG M., S NYDER J., G UO
B.: All-frequency rendering of dynamic, spatially-varying reflectance. ACM Trans. Graph. 28, 5 (2009), 1–10.

[HSRG07] H AN C., S UN B., R AMAMOORTHI R., G RINSPUN
E.: Frequency domain normal map filtering. ACM Trans. Graph.
26, 3 (2007), 28.

[WWZ∗ 09] WANG R., WANG R., Z HOU K., PAN M., BAO H.:
An efficient gpu-based approach for interactive global illumination. ACM Trans. Graph. 28, 3 (2009), 1–8.

[Ige99] I GEHY H.: Tracing ray differentials. In Proc. SIGGRAPH
(1999), pp. 179–186.
[Jen01] J ENSEN H. W.: Realistic image synthesis using photon
mapping. A. K. Peters, Ltd., 2001.
[Kaj86] K AJIYA J. T.: The rendering equation. In Proc. SIGGRAPH (1986), pp. 143–150.
[KC08] K RIVÁNEK J., C OLBERT M.: Real-time shading with
filtered importance sampling. Computer Graphics Forum 27, 4
(2008), 1147–1154.
[Kel97] K ELLER A.: Instant radiosity. In Proc. SIGGRAPH
(1997), pp. 49–56.
ˇ
J., G AUTRON P., PATTANAIK S., B OUA K RIVÁNEK
K.: Radiance caching for efficient global illumination
computation. IEEE TVCG 11, 5 (2005), 550–561.

[KGPB05]
TOUCH

[MJ00] M ARDIA K. V., J UPP P. E.: Directional Statistics. John
Wiley and Sons Ltd., 2000.
[OB10] O LANO M., BAKER D.: Lean mapping. In Proc. I3D
(2010), pp. 181–188.
[PBD∗ 10] PARKER S. G., B IGLER J., D IETRICH A.,
F RIEDRICH H., H OBEROCK J., L UEBKE D., M C A LLIS TER D., M C G UIRE M., M ORLEY K., ROBISON A., S TICH M.:
Optix: A general purpose ray tracing engine. ACM Transactions
on Graphics (August 2010).
[REG∗ 09] R ITSCHEL T., E NGELHARDT T., G ROSCH T., S EI DEL H.-P., K AUTZ J., DACHSBACHER C.: Micro-rendering
for scalable, parallel final gathering. ACM Trans. Graph. 28, 5
(2009), 1–8.
[RS09] ROBISON A., S HIRLEY P.: Image space gathering. In
Proc. HPG (2009), pp. 91–98.
[SKS02]

S LOAN P.-P., K AUTZ J., S NYDER J.: Precomputed

c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

[YWY08] Y U X., WANG R., Y U J.: Interactive glossy reflections
using gpu-based ray tracing with adaptive lod. Comput. Graph.
Forum 27, 7 (2008), 1987–1996.
[ZHWG08] Z HOU K., H OU Q., WANG R., G UO B.: Real-time
kd-tree construction on graphics hardware. ACM Trans. Graph.
27, 5 (2008), 1–11.

