DOI: 10.1111/j.1467-8659.2010.01658.x

COMPUTER GRAPHICS

forum

Volume 29 (2010), number 6 pp. 1905–1920

Hierarchical Structure Recovery of Point-Sampled Surfaces
Marco Attene and Giuseppe Patan`e
Istituto di Matematica Applicata e Tecnologie Informatiche, Consiglio Nazionale delle Ricerche, Italy
{attene, patane}@ge.imati.cnr.it

Abstract
We focus on the class of ‘regular’ models defined by V´arady et al. for reverse engineering purposes. Given a
3D surface M represented through a dense set of points, we present a novel algorithm that converts M to a
hierarchical representation HM . In HM , the surface is encoded through patches of various shape and size, which
form a hierarchical atlas. If M belongs to the class of regular models, then HM captures the most significant
features of M at all the levels of detail. In this case, we show that HM can be exploited to interactively select
regions of interest on M and intuitively re-design the model. Furthermore, HM intrinsically encodes a hierarchy
of useful ‘segmentations’ of M. We present a simple though efficient approach to extract and optimize such
segmentations, and we show how they can be used to approximate the input point sets through idealized manifold
meshes.
Keywords: hierarchical clustering, segmentation, shape primitives, selection
ACM CCS:
hierarchies.

I.3 COMPUTER GRAPHICS; I.3.5 Computational Geometry and Object Modeling–Object

1. Introduction
In its earliest years, Computer Graphics was dominated by
synthetic shapes, either created by designers through proper
software tools or generated out of simulation of physical
phenomena. Recent advances in 3D acquisition technologies
have brought a gradual change in the way 3D models are
produced and handled. Today, precise digitized models are
extremely complex, and it is not rare to deal with objects
made of millions of elements (e.g. points, triangles, etc).
Such a complexity prompted the development of algorithms
to partition large models in smaller parts, which are more
manageable and significant.
Properly designed models can be easily modified by acting
on few and well-placed control points. Since these models
are typically composed of patches that correspond to structural features of the shape (e.g. planes, through holes, etc),
it is relatively easy to replace such features with others and
re-design the model. In contrast, even if digitized models
are extremely flexible and detailed, they are hardly modifiable without a proper segmentation that identifies their structural parts. Thus, segmentation has become a fundamental
c 2010 The Authors
Journal compilation c 2010 The Eurographics Association and
Blackwell Publishing Ltd. Published by Blackwell Publishing,
9600 Garsington Road, Oxford OX4 2DQ, UK and 350 Main
Street, Malden, MA 02148, USA.

step for several application contexts, including Product Modelling, where segmented surfaces are computed for reverse
engineering purposes [VMC97], and Computer Graphics,
where properly segmented shapes support modern modelling
paradigms [FKS∗ 04].
Several algorithms have been proposed to hierarchically
segment 3D surface meshes [AFS06, AKM∗ 06, KT03], and
recently some work has been dedicated to volume meshes
[AMSF08]. Although point sets are widely used and flexible
surface representations, the computation of part hierarchies
out of point-sampled surfaces is still open to efficient solutions. Therefore, this work tackles the problem of hierarchically segmenting point sets in useful shape parts, and strives
to reduce the gap between a huge development of mesh-based
techniques and a relatively low attention on multi-resolution
decompositions of point sets. Note that the lack of connectivity and the atomic definition of point sets make the segmentation more complex than for simplicial meshes. In fact,
mesh segmentation algorithms rely on an explicit surface
connectivity [DKT05] and are often based on the properties
of discrete differential operators.

1905

1906

M. Attene & G. Patan`e / Hierarchical Structure Recovery of Point-Sampled Surfaces

It is worth mentioning that the hierarchical segmentation
of point sets provides benefits for a plethora of applications.
In Computer Vision, it makes it possible to convert a raw
point cloud to a hierarchy of features for shape recognition
[Mar82, PKKG03]. In Computer Graphics, a hierarchical
organization of the parts provides a support for the definition of regions of interest of variable size, which are useful
for editing purposes such as deformation or copy-and-paste
modelling [AMSF08]. Furthermore, it provides a multi-scale
shape abstraction that can be used to match point-sampled
surfaces [DGG03].

1.1. Overview and contributions
Building on previous research results obtained for triangle
meshes [AFS06], we present a novel approach that employs
a hierarchical clustering to efficiently and accurately construct a multi-resolution representation of a point set. In our
representation, the model is encoded as a structured hierarchy of point-sampled patches of various shapes and sizes.
By construction, each patch is fairly approximated through
either a planar, a spherical, a conical, a cylindrical or a
toroidal surface. Starting from such a representation, we easily compute a single-resolution segmentation of the point set
in which each segment is effectively idealized through one of
the five geometric primitives employed. This choice makes
our method an efficient and hierarchical solution to the problem of recovering the structure of piecewise algebraic models
that are described as assemblies of the aforementioned primitives. According to [VMC97], we refer to these kinds of
shapes as to regular models.
With respect to existing approaches, and in particular to
[AFS06], this article introduces several innovations: to perform the clustering, mesh connectivity is replaced by the
k-nearest neighbour graph, which is also used to evaluate
the differential properties that support the fitting stage. In
order to deal with uneven sampling densities and to improve
the fitting quality, we exploit the areas of properly computed
splats as weights associated to the points. Another innovation
is the selection of a broader set of primitives, which makes
it possible to obtain comprehensive hierarchical abstractions
of any regular model. Besides adapting the fitting strategy for
cylinders to better perform on point sets, we introduce a new,
robust and efficient fitting of cones and tori. A further original contribution is our algorithm to refine cluster boundaries
in segmentations extracted out of our hierarchies.
We also show that our hierarchical representation is particularly useful for Computer Aided Design (CAD) feature
selection. We believe that the proposed selection mechanism
may have a significant impact in the usability of forthcoming CAD systems dealing with reverse-engineered objects.
Finally, note that reconstructing a mesh is not always an
easy task due to possible missing data, noise, disconnected
portions of the point set or chamfered sharp edges; thus,

computing a mesh to be segmented may not be feasible. By
assuming that the points are sampled on a regular model,
however, we show that an idealized mesh can be robustly
reconstructed starting from the fitting primitives encoded in
our hierarchy.
1.2. Paper structure
The remainder of the article is organized as follows. In
Section 2, we briefly review previous work on point-sampled
surfaces and shape segmentation. Section 3 introduces the hierarchical clustering applied to point-sampled surfaces, discusses how to extract a segmentation out of the resulting
hierarchy, and how to refine it. Section 4 defines the geometric primitives that drive the clustering. Details of the
approach, along with experimental results and comparisons,
are discussed in Section 5, whereas Section 6 shows the
main applications of the proposed approach. Finally, conclusions and future work are outlined in Section 7.
2. Theoretical Background and Related Work
In the following, we briefly review previous work on pointsampled surfaces (Section 2.1) and segmentation of 3D
shapes (Section 2.2). For more details on these topics, we
refer the reader to the state-of-the-art reports [AGP∗ 04,
GPA∗ 02] and [APP∗ 07, Sha06], respectively.
2.1. Point set surfaces: definition and differential
analysis
A point-based representation of a surface M is a finite set
P of points sampled on M. The surface M underlying
P is commonly estimated using the moving least-squares
[ABCO∗ 01, AK04, Lev03] and the implicit [AA03] approximations. Given a point set P := {pi }N
i=1 , in the k-nearest
neighbour graph T of P each point pi ∈ P is linked to its
k nearest points in P, which constitute the neighbourhood
Npi := {pjs }ks=1 of pi . For dense point sets, this graph provides enough information to approximate the local geometric
and topological structure of M without meshing the whole
point set. The computation of T requires O(N log N ) time
[AMN∗ 98].
2.1.1. Point set surfaces
The MLS surface underlying P is defined by minimizing an
energy function, which is the sum of weighted squared distances of points in P to a plane [AK04, Lev03]. Changing
either the energy function or the normal field provides variants of the MLS surface [AA03, GG07]. For instance, the
RMLS variant [FCOAS03] preserves sharp features of M,
which are commonly chamfered in standard MLS surfaces.
In this article, we only need to estimate the normals at the
points of the input set P. To this end, for each point p, the

c 2010 The Authors
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

M. Attene & G. Patan`e / Hierarchical Structure Recovery of Point-Sampled Surfaces

un-oriented normal n(p) is defined as the unit eigenvector
related to the smallest eigenvalue of the 3 × 3 symmetric
covariance matrix C defined as
N

(pi − p)(pi − p)T θ ( p − pi 2 ).

C :=
i=1

Here, θ is a decreasing weighting function, e.g. the Gaussian
map θ (t) := exp(−t 2 /h2 ), where h is the scale parameter.
For each point, the value h is either set as the distance of
the farthest of its k-nearest neighbours in P or kept constant
by computing the average of these values on P [DS05].
Since the map θ rapidly decreases with the increase of the
Euclidean distance among points, we substitute the indices
in the previous sums with those of the points of P that belong
to the k-nearest neighbours of p. Neglecting the contributions
of the points that do not belong to Np makes the computation
of n(p) much faster at the cost of an acceptable approximation
error. Finally, the normals at the pi ’s are coherently oriented
by propagating the orientation of a seed normal along arcs of
the Riemannian graph of the point set [HDD∗ 94].

2.1.2. Principal curvatures and directions for
point-sampled surfaces
Let πp be the tangent plane to P at p, n(p) the corresponding
normal vector, and e an arbitrary directional vector contained
in πp . Then, we consider the intersection curve γ between
the surface M underlying P and the plane that is orthogonal
to n(p) × e and interpolates p. The value of the curvature
of γ at p is called normal curvature of M at p along the
direction e and it is uniquely determined by e. As e varies
among all the directional vectors in πp , the principal curvatures κ1 , κ2 are defined as the maximum and minimum of the
normal curvatures. In the following, the notation n refers to
the normalized vector n := n/ n 2 of unit length. According to [YQ07, LP05], the directional curvature in pi along
d := eij , eij := pj − pi , is defined as
κij := 2

n(pi ), pj − pi 2
,
pj − pi 22

pj ∈ Npi .

tan⊥
Let etan
its
ij be the normalized tangential part of eij and eij
orthogonal component; as done in [LP05], let wij be a weight
associated with the direction eij which depends on the local
sampling density. Integrating the directional curvatures, we
get an approximation Wi of the Weingarten map at pi ; i.e.
T

tan⊥
wij κij etan
ij eij .

Wi :=
pi ∈Npj

Then, the principal curvatures κ1 , κ2 of P at pi are computed as the eigenvalues of Wi . In Section 4.4, the principal
curvatures are used to identify the parameters that fully characterize the toroidal primitives.

1907

2.2. 3D Shape segmentation and structure recovery
3D segmentation techniques can be classified in two main categories: surface-based and part-based approaches [APP∗ 07,
Sha06]. A surface-based segmentation is a decomposition
of the input into a family of patches that have a uniform
behaviour with respect to a specific surface property such
as Gaussian curvature [YGZS05, MPS∗ 03], approximating
primitives [CDST97, VMC97, AFS06, MPS∗ 04], flatness
[GWH01], geodesic distances [KT03, ZTS02]. Other approaches employ spectral analysis [LZ04, YNBH06], scale
space clustering [BSRS04], scissoring [LLS∗ 05] and topological properties [PSF04, ZMT05, ZH04]. In contrast, partbased segmentation algorithms consider the input to be a
solid, and the extracted parts are characterized by their volume [LJS97, LSA94, AMSF08]. Both surface- and partbased methods can be either direct or hierarchical. In a
direct method, a single segmentation is extracted and possibly post-processed (e.g. through variational optimization).
Conversely, hierarchical approaches produce multiple segmentations where segments at finer levels are hierarchically
nested in segments at coarser levels. In the following, we
review direct (Section 2.2.1) and hierarchical segmentation
algorithms (Section 2.2.2).
2.2.1. Regular models and direct segmentation
Since our work targets mostly regular models, the review
of previous work is mainly focused on this class of objects.
In [VMC97], regular model has been defined as a 3D shape
that can be described as an assembly of primitive surfaces,
which may be parts of planes, spheres, cylinders, cones and
tori. V´arady et al. also proposed a surface-based algorithm
to retrieve the constituting patches starting from a raw surface mesh. After a first coarse segmentation based on the
identification of feature lines, their method classifies each
region as simple or multiple, depending on whether or not
the region can be effectively approximated by one of the
primitives. In the latter case, each region is analysed and
partitioned through dimensionality filtering on the Gaussian
sphere. Note that regular models must not be confused with
regular sets used for solid modelling applications.
In [SWK07], the segmentation is achieved by randomly
selecting minimal sets, which are defined as the smallest number of points that define a pre-defined primitive,
and by computing those primitives that approximate most
of the points. The segmentation is robust to noise but the
overall framework requires several parameters to guide the
identification of the primitives. Furthermore, the randomness of the point sampling might provide different results
depending on the thresholds used to define and minimize
the score function, which measures the quality of a shape
candidate.
In [VB04], first and second order surface properties guide
the direct segmentation of a point set into planes, spheres,

c 2010 The Authors
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

1908

M. Attene & G. Patan`e / Hierarchical Structure Recovery of Point-Sampled Surfaces

cylinders and cones. After a first phase where a coarse
segmentation is computed, a variational approach is applied to optimize the boundaries of the features extracted
in the first phase. A variational optimization approach is
also used in [CSAD04] to approximate complex polygon
meshes with few planar patches; this method is based on the
k − means clustering, and it has been extended in [WK05] to
treat also spherical, cylindrical and rollingball-like features.
The k-means clustering is exploited in [MFX∗ 07] too, where
neighbouring points are grouped according to their reciprocal Euclidean distances and the angular differences among
the normal directions.

2.2.2. Hierarchical segmentation
In [GWH01], a hierarchical clustering of triangulated surfaces in nearly planar patches was introduced. Arcs of the
dual graph of the mesh are iteratively collapsed, and the
order of such operations is determined by the planarity of
the corresponding clusters of triangles in the primal graph,
i.e. the input mesh. Similarly, in [ITY∗ 01] the clustering is
used to simplify the structure of CAD models, and the edgecontraction order is driven by the area of the clusters, their
flatness and the smoothness of their boundaries.
In [AFS06], the work of [GWH01] was extended to fit
spherical and cylindrical patches as well. The cost associated to each contraction is the minimum L2 residual among
those of the cluster’s best-fitting plane, sphere and cylinder.
Unfortunately, this technique can approximate only a subset
of the primitives used in [VMC97]. Finally, in [GG04] the
hierarchical clustering is guided by slippable motions, i.e.
rigid transformations that make the surface slide against the
stationery version without forming any gaps. In other words,
the motion of each point is required to be tangent to the mesh.
A slippable component is a collection of vertices which can
be approximated through a slippable motion. A hierarchical clustering such as in [GWH01] is exploited to compute
splippable components which, in their turn, can constitute
planes, spheres, cylinders, linear extrusion surfaces, surfaces
of revolution and helical surfaces.

Figure 1: Structural features encoded as clusters of points
along the paths connecting the root of the binary tree with
the leaves. Besides the point itself (red leaf), features of increasing size are captured; e.g. the planar top of the bolt, the
bolt itself, the stiffener and so on, up to the whole model.

3. Hierarchical Point Set Clustering
The basic idea of the hierarchical clustering is to iteratively
merge neighbouring elements into representative clusters as
long as possible, eventually representing the whole shape
through a single cluster. Depending on the shape representation, elements to be aggregated can be triangles [GWH01,
AFS06], tetrahedra [AMSF08], or simply points. The proposed approach belongs to the latter case, and two points are
neighbours if they are connected through an arc within the
k-nearest neighbour graph. The result of the iterative clustering is a binary tree of clusters providing a hierarchical
representation of the shape, namely:
1. each single point is a leaf of the tree;
2. the whole shape is the root;
3. a non-leaf node exists if the clusters represented by its
two children were merged into a single cluster.

Though it was not designed to specifically treat CAD models, the algorithm presented in [KT03] proved to provide useful segmentations for this class of shapes too. Instead of using
a bottom-up hierarchical clustering approach, this method is
based on a fuzzy k-means decomposition that proceeds topdown by iteratively splitting the whole shape along lines of
deep concavity.

Since the order in which clusters are merged influences
the resulting binary tree, the ordering criterion must make
the resulting tree (Figure 1) useful for some specifically targeted applications. For a regular model, the extracted clusters
should capture the structure of the underlying surface.

Unfortunately, though some works have been dedicated to
the segmentation of point sets [VB04, YNBH06, MFX∗ 07],
no existing approach has been designed to automatically
compute a hierarchy of features constituting a comprehensive
abstraction of a regular model.

To this end, we consider the same set of primitives dealt
with in [VMC97]; i.e. planes, spheres, cylinders, cones and
tori. Then, we strive to sort the merging operations so that
each of the resulting clusters is effectively approximated by
one of the geometric primitives employed. In the following,

c 2010 The Authors
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

M. Attene & G. Patan`e / Hierarchical Structure Recovery of Point-Sampled Surfaces

1909

Figure 2: Main steps of the proposed approach. (a) Input point set P; (b) k-nearest neighbour graph of P; (c) initial partition
where each point is associated to its own singleton cluster. (d) Intermediate level of the clustering in which the point-sampled
patches successfully capture the structural parts of the object. (e) Final single cluster constituted by P.
we provide an overview on the main steps of the proposed
approach (Section 3.1); then, we discuss how to extract a
segmentation out of the resulting hierarchy (Section 3.2) and
how to optimize it (Section 3.3).

3.1. Algorithm overview
After having computed the k-nearest neighbour graph T of
the input point cloud P, an un-oriented version U of T is built
in which the arc (vi , vj ) exists if either (vi , vj ) or (vj , vi ) are
in T . In this setting, U identifies the connectivity of the point
set and, in analogy to [GWH01], the algorithm iteratively
contracts all the arcs of U to generate the hierarchy of clusters
(Algorithm 1). Initially, each node of U identifies a single
point of P and the contraction of the first arc corresponds to
the union of two points within a single new cluster. Hence,
the node replacing the contracted edge is a cluster with two
points. Note that U represents the connectivity of the clusters
at each step of the algorithm.

To perform the contractions in the desired order, each
arc is associated a cost and all the arcs are inserted into a
priority queue sorted according to increasing cost values.
At each step, the first arc is removed from the queue and
contracted (i.e. U is modified), the two corresponding clusters
are merged, and all the arcs incident to the new node are repositioned within the queue according to their updated cost.
Computation of the cost associated to an arc. Let e = (vi , vj )
be an arc in U, and let C(v) denote the set of points aggregated
so far within the cluster represented by the node v of U. Also,
let Q(e) = C(vi ) ∪ C(vj ) be the set of points that would form
a cluster as the result of the contraction of e. Let L2plane (Q(e))
denote the fitting error of the best-fitting plane through Q(e);
this value is computed as the sum of the squared residuals
between the points of Q(e) and their best-fitting plane. Using
an analogous notation for all the other primitives employed,
we associate to e the following cost
Cost(e) = min L2plane (Q(e)), L2sphere (Q(e)), . . .
L2cylinder (Q(e)), L2cone (Q(e)), L2torus (Q(e)) .

Algorithm 1 Main steps of the hierarchical clustering.
Require: A point set P.
Ensure: A binary tree of clusters representing subsets of P.
1:
Compute the k-nearest neighbour graph T of P.
2:
Compute an unoriented version U of T in which the arc
(vi , vj ) exists if either (vi , vj ) or (vj , vi ) are in T .
3:
Associate a cost to each arc e in U; we indicate this value
as Cost(e).
4:
Create a priority queue h containing all the arcs of U
sorted according to their cost.
5:
while h = ∅ do
6:
remove the first arc e = (vi , vj ) from h;
7:
contract e to a single node v. This means that e, vi
and vj are all removed from U and replaced by the
single new node v;
8:
remove possible duplications of arcs incident at v;
9:
update the cost associated to all the arcs incident at v
and update their position in h accordingly.
10:
end while

Each such quantity is computed as described in Section 4.
For simplicity of the exposition, we did not include explicitly
the computation of each set C(v) in Algorithm 1. These
sets, however, must be computed as singletons during the
initialization, and incrementally updated at each contraction.
The binary tree of clusters generated by the algorithm can be
drawn within a 2D coordinate frame so that the y-coordinate
of each node corresponds to the cost of aggregating its subclusters. Such a diagram (dendrogram), can be cut through
a horizontal line at the desired y-value to produce a singleresolution partitioning or, equivalently, a segmentation of the
point set. In Figure 2, three segmentations are shown as they
result by cutting the dendrogram at the level of the leaves (c),
at an intermediate level (d) and at root level (e).

3.2. Extraction of a segmentation
To compute a segmentation (e.g. Figure 3(a)) out of the hierarchy, one may select a desired number of clusters and stop

c 2010 The Authors
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

1910

M. Attene & G. Patan`e / Hierarchical Structure Recovery of Point-Sampled Surfaces

Figure 3: Segmentation of a mechanical part (a) before and
(b) after variational optimization. In (a), boundary jaggedness is due to the aggregation of smaller clusters from previous levels in the hierarchy (bottom-left box).
the aggregation when such a number is reached. This choice,
however, would be somehow against the philosophy of using
a hierarchical setting, in which a preferred number of clusters is not known a priori. Moreover, in these cases k-means
based partitioners would probably perform a better job.
Assuming that the fitting error monotonically grows as
the clustering proceeds with the bottom-up construction
of the tree, another solution is to select a maximum admissible approximation error and stop the algorithm when
the next aggregation would exceed such an error. For
the primitives of Figure 4, the monotonicity of the error
growth is verified as follows. Let C1 and C2 be two clusters and C12 be their union. Denoting the fitting primitive of Ci with FCi and its residual error with d(Ci , FCi ),
we have that d(C12 , FC12 ) ≥ d(C1 , FC1 ) + d(C2 , FC2 ). Indeed,
the primitive FC12 is, by definition, the one that minimizes
the fitting error (e.g. Figure 5). Since the error is a sum
of terms indexed on the points of the extracted primitives,
if we use FC12 to approximate C1 and C2 then d(C12 , FC12 ) =
d(C1 , FC12 ) + d(C2 , FC12 ). Otherwise, using their own best fitting primitives FC1 and FC2 , the total residual error can only
be reduced or left unchanged.
To take into account the model size and the fact that we
use weights while computing fitting errors (Section 4), in
our implementation the threshold is related to the length of
the bounding box diagonal lbb as follows. Let L2 (P) be the
fitting error, and let d˜ 2 := 1wi L2 (P) be the average squared
i
distance of the cluster from its best fitting primitive. We stop
the algorithm
when the next aggregation would make the
√
˜2
value lbbd exceed an absolute threshold . In this way, if we
scale the input while keeping constant, then the resulting
segmentation does not change. To extract the segmentations
of Figures 3, 6, 7 and 8, the parameter was set to 0.01.
Note that some segmentations extracted as described here
may not be easily obtained indirectly by identifying the regions’ boundaries. Regions that are interesting from a CAD
user point of view, indeed, may not be bounded by sharp
features or by lines easily detectable on the basis of morpho-

Figure 4: Fitting primitives and parameters: (a) plane, (b)
sphere, (c) cylinder, (d) cone and (e) torus.

Figure 5: (a) Input point-sampled surface and (b) toroidal
primitive that best fits the blue points.
logical characteristics (e.g. the red cluster in Figure 6(a) and
the fillets in Figure 8, right).
3.3. Region optimization
At the beginning of the aggregation, several primitives are eligible to interpolate the points being clustered. In fact, seven
‘well-placed’ points are required to uniquely identify a torus,
which means that if a cluster contains less than eight points
we can assume that the best-fitting primitive interpolates
these points. Thus, all the contractions are assigned a null
cost, the aggregation proceeds in a random order and, even
when clusters become large enough to avoid any ambiguity,
we inherit an irregular distribution of points near the boundaries between adjacent segments (Figure 3(a)).
In order to get rid of this irregularity, we propose a
post-processing based on a variational optimization of an

c 2010 The Authors
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

M. Attene & G. Patan`e / Hierarchical Structure Recovery of Point-Sampled Surfaces

initial partitioning. Roughly speaking, we re-compute the
best-fitting primitive (BFP, for short) for each current cluster.
Then, we consider a point p close to the boundary between
two clusters and re-assign it to the cluster whose BFP is
closest to p. The process is repeated for each point having
at least a neighbour assigned to a different cluster. When
no more points can be re-assigned, we re-compute the bestfitting primitives and proceed to the assignment phase once
again. The process stops after a prescribed number of iterations or when, even after the update of the BFPs, no more
re-assignment takes place. The optimization algorithm
is summarized in Algorithm 2, where d(p, B) :=
minq∈B p − q 2 is the Euclidean distance between the point
p and its closest point on the primitive B. Our tests have
shown that the optimization never needs more than four iterations to converge. Comparing Figure 3(a) with (b) shows
the effect of the optimization.
Though this approach is close in spirit to [WK05], it is
substantially different; at each step of our method, only the
points on the border of clusters are allowed to jump into
adjacent clusters. In contrast, at each step of [WK05], every
cluster is deleted and re-grown starting from the triangle
which is closest to the proxy. This difference makes our
algorithm less ‘aggressive’, and typically the modifications
remain closer to the original boundaries. As for [CSAD04,

1911

Algorithm 2 Optimization of an initial partitioning of P
Require: A point set P segmented into a set of clusters; let
p.C be the cluster associated to the point p.
Ensure: An optimized assignment of the points to clusters.
1:
Initialize the number ni of iterations to be zero; i.e.
ni := 0.
2:
Choose nmax be the maximum number of iterations.
3:
for ni < nmax do
4:
ni + +;
5:
compute the best-fitting primitive Bc for each cluster;
6:
for e := (i, j ) ∈ T such that pi .C = pj .C do
7:
if d(pj , Bpi .C ) < d(pj , Bpj .C ) then
8:
pj .C := pi .C;
9:
end if
10:
if d(pi , Bpj .C ) < d(pi , Bpi .C ) then
11:
pi .C := pj .C;
12:
end if
13:
if no points were re-assigned then
14:
break;
15:
end if
16:
end for
17:
end for

WK05], Algorithm 2 may lead to disconnected clusters, but
this is not a problem for the applications discussed in this
article. In [VB04], an analogous optimization procedure has
been used to improve an initial segmentation of algebraic

Figure 6: Stability of the segmentation with respect to a varying amount of noise, which grows from (a) to (b) and (c). While
increasing the noise, the number, type and shape of each primitive do not change.

Figure 7: Segmentation robustness with respect to a fairly different sampling density.
c 2010 The Authors
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

1912

M. Attene & G. Patan`e / Hierarchical Structure Recovery of Point-Sampled Surfaces

Figure 8: (a) The carter model could not be segmented properly through [AFS06], whereas (b) the complete set of primitives
employed by our approach makes the segmentation more significant. If the primitives used by [AFS06] are sufficient, then the
crank model could be segmented properly by both [AFS06] (c) and our method (d).
strategies are not essential as long as the approximation discriminates among the various primitives. For example, if P
is a set of sufficiently numerous points sampled on a sphere,
then P must be closer to the approximately best-fitting sphere
than to all the other best-fitting primitives.

Figure 9: Segmentation of a basilica with 2M points.

models for reverse engineering. With respect to the approach
proposed in [VB04], our region optimization does not require
any threshold to be set, and can treat toroidal surfaces (not
supported in [VB04]).

4. Fitting Primitives
Herewith, P denotes the set of points in a cluster. We consider
a set of five geometric primitives, namely planes, spheres,
cylinders, cones and tori. Each primitive is unambiguously
identified by its parameters (Figure 4); e.g. a centre point
and a radius uniquely identify a sphere. For each primitive,
our objectives are the computation of (a) the parameters that
identify the primitive and (b) the distance between P and
the primitive. For planes [GWH01] and spheres [Pra87], algorithms are known to efficiently compute their parameters
by minimizing the fitting error. This error is defined as the
sum L2primitive (P) of the squared residuals between P and its
best-fitting primitive.
The proposed clustering deals with rather dense point
clouds, and the hierarchy to be recovered is actually interesting just in those parts where clusters contain numerous points
each (i.e. the top of the dendrogram). Thus, optimal fitting

If the point set P := {pi }N
i=1 is uniformly sampled, then the
weight wi of each pi is set equal to one; otherwise, it is set
equal to the area of the splat associated to pi and computed
as done in [WK04]. In this way, those points of P located in
regions with a low sampling density are assigned to higher
weights, as they represent larger portions of the underlying
surface M. Unless stated differently, in the remainder all
the sums range from i = 1 to N. The definition of planar and
spherical primitives is discussed in Section 4.1; the procedure
for cylinders, cones and tori is detailed in Section 4.2, 4.3
and 4.4, respectively.

4.1. Planes and spheres
wp

The centre of the planar primitive is identified by b := i wi i i
i
and its normal is the eigenvector of the covariance matrix M := i wi (pi − b)(pi − b)T corresponding to its minimum eigenvalue. In this case, the fitting error is L2plane (P) :=
2
i wi | n, pi − b 2 | .
For a spherical primitive (Figure 4(b)), the centre c :=
[cx , cy , cz ]T and radius r are computed by minimizing the
algebraic distance of the sphere from P [AFS06]. Indicating
with pi := (pix , piy , piz ), i = 1, . . . , N , the coordinates of
the points of P, these parameters are given by
cx , cy , cz , r 2 − cx2 − cy2 − cz2

T

= (AT A)−1 AT b,

(1)

where W := diag(w1 , . . . , wN ) is the diagonal matrix whose
non-null entries are the weights {wi }N
i=1 and
⎡

2p1x 2p1y 2p1z
⎢ 2p2x 2p2y 2p2z
⎢
A := W ⎢ .
..
..
⎣ ..
.
.
2pNx 2pNy 2pNz

⎤
1
1⎥
⎥
,
.. ⎥
.⎦
1

⎡
⎢
⎢
b := W ⎢
⎣

p1
p2
..
.
pN

2⎤
2
2⎥
2⎥

⎥.
⎦

2
2

c 2010 The Authors
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

1913

M. Attene & G. Patan`e / Hierarchical Structure Recovery of Point-Sampled Surfaces

The fitting error is defined as
wi ( pi − c

L2sphere (P) :=

2

− r)2 .

i

4.2. Cylinders
A cylinder is conveniently identified through the following
parameters: a unit vector a specifying the direction of the
axis; a centre point c on the axis; a radius r (Figure 4(c)).
As shown in [CG01, PGK02, VMC97, WK05], if normal information is available and reliable, then the problem of computing fitting cylinders is solved rather robustly. Thus, our
solution is inspired by these approaches and normal vectors
to the points of P are estimated as reviewed in Section 2.1.
The first step computes the cylinder axis as the unit vector which is the most orthogonal to all the normal vectors ni := n(pi ) at pi . To do this, we define the positive
semi-definite matrix C := i wi (ni nTi ) and assign to a the
eigenvector of C corresponding to its minimum eigenvalue.
Also, let dx and dy be the other two eigenvectors of C,
and let p˜ i := [ pi , dx 2 , pi , dy 2 ] be the 2D projection of
pi on a plane orthogonal to a and passing through the
origin.
Using a 2D version of (1), the centre c˜ := [c˜x , c˜y ] and radius r of a circle that fits the weighted p˜ i s are computed.
While the radius of such fitting circle is identified with
the radius of the cylinder, its centre c˜ must be transformed
back to 3D space, i.e. c := c˜x dx + c˜y dy . Once the parameters of the fitting cylinder have been found, the fitting error
is
wi ( (pi − c) × a

L2cylinder (P) :=

2

− r)2 .

i

imum eigenvalue. Let di := (ni × c) × ni be a normalized
tangent vector at pi coplanar with c. If pi belongs to a cone,
then the line passing through pi with direction di contains
the apex of the cone and di is the direction of zero curvature.
Thus, we define the apex a as the point which is closest to
all such straight lines in the least-squares sense. The squared
distance of a point q from the straight line Li defined by a
point pi and a unit directional vector di is
d 2 (q, Li ) := (q − pi ) × di 22 .
Our objective is to find a such that the quadratic convex functional E(a) = i d 2 (a, Li ) is minimized or, equivalently, such that all the partial derivatives of E(a) are null.
Taking into account the weights of the pi s leads to a linear
system ( i wi Mi )a − ( i wi bi ) = 0, where the matrix Mi
and the vector bi are defined for each pi as follows
⎡ 2
⎤
−dix diz
diy + diz2 −dix diy
⎢
⎥
2
+ diz2 −diy diz ⎦ ,
Mi := ⎣ −dix diy dix
2
−dix diz
−diy diz dix
+ diy2
⎤
⎡
pix diy2 − piy dix diy − piz dix diz + pix diz2
⎢
2 ⎥
bi := ⎣piy diz2 − piz diy diz − pix diy dix + piy dix
⎦.
2
piz dix
− pix diz dix − piy diz diy + piz diy2
Hence, the apex a of the conical primitive is computed as
a := ( i wi Mi )−1 ( i wi bi ). When the parameters of the
fitting cone are all available, the fitting error is
L2cone (P) :=

1
1 + tan2 θ

wi ( (pi − a) × c

−| pi − a, c 2 | tan θ)2 .
We now calculate the parameter tan θ so that the above equation is minimized. This is equivalent to finding tan θ so that
the derivative of L2cone (P) is equal to zero; i.e.
wi (pi − a) × c

4.3. Cones

tan θ =

A cone is conveniently identified through the following parameters: a unit vector c specifying the direction of the axis;
an apex a; and the tangent of the semi-apical angle tan θ
(Figure 4(d)). For the computation of the cone that best
fits a point set, the iterative algorithms presented in [KL87,
LMM98] are too slow for our purposes. Thus, as we did for
cylinders, we exploit normal information to cast the problem
to a robust, approximate and analytic approach.
First, we compute the cone axis c. Since the Gauss map of
a cone is a circle orthogonal to c, we compute the best-fitting
plane of the Gauss map of P and consider the normal of such
a plane to be the direction c of the axis. Let ni := n(pi ) be
the normal vector at pi and b := 1wi i wi ni the weighted
i
average of these normals. We define a positive semi-definite
matrix C := i wi (ni − b)(ni − b)T and assign to c the coordinates of the eigenvector of C corresponding to its min-

2

i

i

wi | pi − a, c 2 |

2

.

i

4.4. Tori
A torus is identified through the following parameters: a centre point a; a height vector d; and a radius r (Figure 4(e)).
Note that r is the radius of the circular axis of the torus, d 2
is the radius of the generating circle, and d is the normalized
direction of the axis of symmetry. To compute these parameters, we observe that one of the principal curvatures of a
torus is constant and its reciprocal is the radius d 2 of the
circle that generates the torus. Let ki1 and ki2 be the (signed)
principal curvatures at pi (Section 2.1), with ki1 ≤ ki2 . The
variance of the principal curvatures within P := {pi }N
i=1
is

c 2010 The Authors
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

1914

M. Attene & G. Patan`e / Hierarchical Structure Recovery of Point-Sampled Surfaces

⎧
⎪
⎪
⎪
Var(k1 ) :=
⎪
⎪
⎪
⎪
⎪
⎪
⎪
⎨

N
ki1

5. Results and Discussion

2
ki1
−

ki1 ,

i

i

i

⎪
⎪
⎪
⎪
Var(k2 ) :=
⎪
⎪
⎪
⎪
⎪
⎪
⎩

N
ki2

2
ki2
−

ki2 .

i

i

i

Let k˜1 := N1 i ki1 be the average minimum curvature, and
let k˜2 be the average maximum curvature within P. The radius
d 2 of the generating circle is assigned the absolute value
of the reciprocal rd of the principal curvature that changes
the less, that is

rd :=

1/k˜1

if Var(k1 ) < Var(k2 ),

1/k˜2

otherwise.

and d 2 := |rd |. Let q be a point belonging to the torus,
and let n(q) be the normal at q. Note that when q is
moved towards the opposite direction of n(q) at a signed
distance rd , its new position is on the circular axis of the
torus. Indeed, the circular axis coincides with the locus of
points obtained by moving all the points of the torus as
described.
We now move all the pi s using this process and compute
their best-fitting plane (Section 4.1) and consider the normal of such a plane as the direction of the height vector d.
Furthermore, we project these transformed points on the fitting plane and compute their best-fitting circle, whose radius
and centre correspond to the radius r and centre a of the
torus.
Let us consider the projection p˜ i := pi − rd ni of the
point pi , where ni is the normal at pi and the point
b˜ := 1wi i wi p˜ i is the barycentre of the p˜ i s. Let M˜ :=
i
1
˜ p˜ i − b)
˜ T be the covariance matrix of
wi (p˜ i − b)(
i

wi

i

the p˜ i s. Indicating with {d, dx , dy } the eigenvector of the matrix M˜ corresponding to the eigenvalues λ1 ≤ λ2 ≤ λ3 , the
height vector of the torus is assigned the value d := d 2 d.
Now, let p˜ i := [ p˜ i , dx 2 , p˜ i , dy 2 ] be the projection of p˜ i on
a plane orthogonal to d. As we did for cylinders, we reduce
the dimensionality of (1) to find the centre c˜ := [c˜x , c˜y ] and
radius r of a circle that fits the weighted p˜ i s. The centre of
the torus is obtained by transforming c˜ back to 3D space as
c := c˜x dx + c˜y dy and the radius r of the torus corresponds
to the radius of the fitting circle. Finally, the fitting error is
computed as
L2tori (P) : =

wi [( (pi − a) × d

2

− r)2

i

+ | pi − a, d 2 |2 ]1/2 − d 2 )2 .

Our prototype has been implemented in C++ and tested on
an Intel Core 2 PC equipped with 2 Gb of RAM. To extract the k-nearest neighbour graph, we used a function provided by the ANN library [AMN∗ 98] that employs kd-trees
to efficiently compute exact nearest neighbours. In all our
experiments, we used k = 10 to calculate the connectivity
graph U, while a larger value of k was used to compute the
normal vectors and the curvature tensors. This latter value
of k ranged from 20 when the cloud was affected by low or
no noise (e.g. Figure 6(a,b)), to 40 when the point-set was
significantly noisy (e.g. Figure 6(c)). In general, we have experimented that a proper increase of k within such a range
makes our algorithm sufficiently stable in presence of noisy
data. Furthermore (Section 4), we have verified that weighting the points during the computation of the fitting primitives
and the corresponding residuals makes our approach suitable
to treat point sets with fair variations in sampling densities
(Figure 7). However, the cloud must be locally dense enough
to permit the use of the k-nearest neighbours as acceptable
substitutes of an explicit connectivity. PointShop3D was used
to produce the illustrations depicting point-sampled surfaces.
The point sets illustrated in Figures 3, 7(left), 8(left), 9 and
11 are all aligned range scans produced by laser digitization.
As for data noise, the intrinsic coherent misalignment among
the various scans might impact the order of the very first point
aggregations, but it is far too small to have an influence on
any meaningful segmentation.
For the sake of simplicity, the input point set is assumed
to represent a single connected object. If multiple components must be treated, we analyse the connectivity of U and
then run the clustering separately on the various components.
Alternatively, U is enriched with the arcs of the Euclidean
minimum spanning tree (EMST, for short) of P and the algorithm is run once on the resulting single component. In this
latter case, if the connected components are assumed to be
features of the shape and not induced by a poor sampling,
then the arcs of the EMST that were not already in U may be
contracted after all the others. In the following, we discuss
the computational complexity (Section 5.1), the comparison
with previous work, and the main limitations (Section 5.2)
of the proposed approach.

5.1. Computational complexity and performances
We analyse the algorithmic complexity of our clustering algorithm by first assuming that the tree is perfectly balanced,
and then by generalizing the result also in light of experimental observations. Without loss of generality, we suppose
that the number N of points of P is a power of two. Since
the number E of edges in U is bounded by 2kN , where k is
the number of neighbours used to compute U, we have that
O(E) = O(N ). To count the number of operations needed to

c 2010 The Authors
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

M. Attene & G. Patan`e / Hierarchical Structure Recovery of Point-Sampled Surfaces

1915

Table 1: Timings. Number N of points and seconds required to
perform the clustering: the total time is the sum of this value plus
k-nearest neighbours (k := 20), normals and curvature tensor computation. See also Figure 10.

Test
Figure 2
Figure 3
Figure 6
Figure 7(a)
Figure 7(b)
Figure 8 left
Figure 8 right
Figure 9
Figure 11

N

Clustering

Total

10 000
293 672
98 556
353 334
20 776
533 746
334 511
2 187 366
606 542

0,9
36,64
12,9
43,8
1,95
63,3
38,25
281,52
72,88

1,17
48,39
15,81
55,97
2,59
83,77
49,48
381,5
95,75

Figure 11: Segmentation obtained by [SWK07] (left) and
(middle, right) two resolutions of our hierarchy.

Following a similar path as above, the worst case complexity
is O(N 2 ). We conclude that the complexity varies between
N log N and N 2 , depending on how balanced the tree is. Experiments tend to show that in practice we are closer to the
balanced tree (i.e. favourable) situation.

5.2. Comparison with the state of the art

Figure 10: With reference to Table 1, this graph highlights
that our algorithm computes the hierarchy in a time that is
(nearly) linearly proportional to the number of input points.

construct the binary tree, we scan the hierarchy level by level
from the leaves (level n in the tree) to the root (level 1), with
n = log2 N . To construct level n − 1, we generate the fitting
primitives of E potential clusters made of 21 points each. For
level n − 2, we need to compute the primitives of E/2 potential clusters made of 22 points each and so on. In general,
for the level n − i we need to compute E/(2i−1 ) potential
clusters made of 2i points each. The computation of each fitting primitive is linear, hence for 2i points it requires O(2i )
operations. Thus, the total number of operations necessary
to construct the hierarchy is proportional to
n−1

i=1

E i
2 = 2E(n − 1).
2i−1

(2)

Since N = 2n and E ∈ O(N ), (2) becomes 2E(n − 1) ∈
O(En) = O(2n n) = O(N log N ) and it reasonably matches
the actual time required by our implementation on various
examples (Table 1, Figure 10). For the worst-case complexity, which occurs when the tree is completely unbalanced,
the number of levels n is equal to the number of points N.

We have compared our approach with state-of-the-art algorithms. The first comparison is against the method proposed
in [AFS06], in which the triangles of a mesh are hierarchically clustered while minimizing the approximation error
with geometric primitives. Besides being able to work on
point sets without any explicit connectivity, a significant advantage of our method is the broader set of primitives used
for approximation, which makes it possible to obtain useful segmentations for a larger class of models. For example,
the conical feature in the carter model (Figure 8, left) could
not be captured by [AFS06], whereas our approach successfully provides a useful segmentation. If the object contains
only planar, spherical and cylindrical features, then the two
methods provide comparable results (Figure 8, right). When
the number of elements (i.e. triangles in [AFS06] and points
in our method) being clustered is comparable, we observed
that our algorithm is slightly slower, as a consequence of the
larger number of primitives.
In a second experiment, we have compared our approach
with the algorithm proposed in [SWK07], which provides an
optimal partitioning of the input point set according to a criterion that is similar to the one that drives our clustering. We
have observed that by interrupting the clustering as described
in Section 3.2, we obtain segmentations comparable with the
results reported in [SWK07] (Figure 11). This is a noticeable
fact because our approach was not studied to create a single
optimal segmentation, while it was designed to produce a
whole hierarchy of segmentations which are used in a much
broader spectrum of applications.

5.3. Limitations
Our approach has been designed to reconstruct a hierarchical
organization of the features composing a regular model; if
the input does not belong to this class, then our method does

c 2010 The Authors
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

1916

M. Attene & G. Patan`e / Hierarchical Structure Recovery of Point-Sampled Surfaces

Figure 12: After having computed the hierarchy of the model (a), the user clicked on the bolt, rotated the mouse wheel to select
all its points and moved the bolt to a new position (b) on the stiffener. Through a further wheel rotation, the user increased the
size of the selection to cover the whole stiffener. (c) Finally, the stiffener along with its bolt were moved to a new position.
not provide significant results. In principle, it should not be
difficult to extend the algorithm to cope with a larger class of
models, perhaps including quadric surfaces [YLW06]. However, the freedom in shape patches characterized by numerous parameters would probably lead to higher computational
costs. Another drawback is the use of a global priority queue
that makes it difficult to parallelize the algorithm to deal with
large clouds of points.

6. Applications
In this section, our hierarchical segmentation is exploited to implement a powerful region-selection mechanism (Section 6.1) and to reconstruct manifold meshes
(Section 6.2).

6.1. Interactive region selection with applications
to model re-design
When our method is applied to regular models, clusters often correspond to structural features of the object which are
hierarchically nested within the binary tree. For example,
a cylinder may correspond to a through hole, a plane to a
thin slab, a torus to a fillet and so on. Furthermore, the fillet itself may be part of a slot that, in its turn, is part of a
slab in the hierarchy. This fact suggested us to exploit our
hierarchical clustering for the interactive selection of shape
features. According to previous results on tetrahedral meshes
[AMSF08], we have developed an intuitive system that
interactively selects parts of the shape by traversing the binary tree of clusters. The cost used to sort merging operations,
as well as the greedy and incremental nature of the algorithm
itself, makes the resulting hierarchies contain virtually all the
interesting features of the shape at all the scales. Thus, by
browsing the hierarchy, it is likely that a user finds several
‘interesting’ features that are eligible for editing.
On this premise, we have developed an interaction mechanism to select a shape feature by clicking on a point (i.e.
a pixel rendering a splat), and by rotating the mouse wheel
to select the size of the feature containing the point clicked.

The feature hierarchy is computed once as a pre-processing
step. Then, a mouse click on a point corresponds to selecting a leaf of the cluster tree, and the rotation of the mouse
wheel causes a motion upwards/downwards along the path
connecting the selected leaf to the root of the tree. The
nodes along this path are the clusters in the hierarchy; in
particular, the path represents a sequence of clusters approximated by geometric primitives of increasing size and
each cluster properly contains its predecessor in the sequence
(Figure 1).
In the example of Figure 12, the user may click on a point
on the bolt and rotate the mouse wheel to select among the
bolt itself, the whole stiffener containing the bolt, and so on,
up to the whole shape. Once a feature has been selected,
its boundary is refined on the fly through a local run of the
optimization described in Section 3.3 where only the selected
feature and its adjacent clusters are modified.
Though Figure 12 shows an example of re-design, our purpose is not to describe a re-design system: this would require
to describe too many aspects (e.g. interaction techniques to
shift the features, algorithms to resample the resulting holes)
that are out of the scope of the article. The focus of the figure,
in fact, is only to show a simple application of our mechanism
for feature selection. Also, note that using a hierarchy provides more flexibility than a single-resolution segmentation.
In Figure 12, a single segmentation would capture either the
bolt only or the group stiffener + bolt, but not both as needed
in our redesign application. The use of a hierarchy allows
one to abstract the geometry depending on the scale, so that
the group stiffener + bolt is considered as an approximate
stiffener at one scale, and as an actual pair stiffener plus bolt
at a finer scale.

6.2. Idealized mesh reconstruction
When our hierarchical clustering is used to extract a segmentation, clusters may be exploited to create a patch-based
manifold connectivity among the points. To this end, let us
suppose that the input point set P has been subdivided into a
family {Ri }ki=1 of clusters, such that Ri ⊆ P and each cluster

c 2010 The Authors
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

M. Attene & G. Patan`e / Hierarchical Structure Recovery of Point-Sampled Surfaces

Ri has been associated to its best-fitting primitive i and parameters (Section 4). Focusing on the cluster Ri , we project
each point pjs ∈ Ri , s = 1, . . . , li , onto the point p˜ js ∈ i
that minimizes the Euclidean distance pjs − p˜ js 2 . This step
is easily done analytically based on the parameters defining the primitive. Once each point of Ri has been mapped
on i , we reconstruct a local manifold connectivity among
the projected points using the algorithm in [GKS00], which
computes the surface normals by assuming specific sampling conditions. In contrast, our implementation associates
to each projected point the normal of the fitting primitive
at that point, thus making the reconstruction more robust.
After this initial reconstruction, which results in a triangle
mesh that we call Ki , each triangle tij is analysed. If at least
one of its three edges does not belong to the k-nearest neighbour graph of P, then tij is removed from Ki .
In some cases, the resulting meshes are glued together to
form a single connected component. To do this, we exploit the
graph U that codes the adjacency relations among the clusters
when Algorithm 1 is terminated to extract the segmentation.
Also, we use the original graph U that codes the initial pointto-point connectivity at the beginning of Algorithm 1. Then,
for each arc e = {Ra , Rb } ∈ U we proceed as follows: first,
we search in U the shortest arc s connecting two points pai and
pbj belonging to Ra and Rb respectively and being boundary
vertices in Ka and Kb . Then, we merge Ka and Kb in a new
single mesh Kab by connecting pai and pbj through two new
triangles as described in [AF06]. After having connected all
the Ki s using the aforementioned technique, the remaining
holes are triangulated as done by Barequet and Sharir in
[BS95]. Finally, sharp features are reconstructed by running
EdgeSharpener [AFRS05]. The whole process is depicted in
the example of Figure 13.
Clearly, the union of the initial Ki s succeeds only if they
are actually parts of a whole manifold and orientable surface
(Figure 13). Actually, the projection of points on their corresponding primitive may generate intrinsically non-manifold
configurations, as in the example of Figure 1 where the stiffener is idealized with a single plane. In these cases, our mesh
reconstruction stops after the creation of the Ki s, and lets the
user choose whether to join manually the patches.
Note that if the input is sampled on a regular model, this
approach to mesh reconstruction has the important effect
of removing (not only reducing) the noise through a leastsquares approximation. Furthermore, the user may act on the
threshold error to stop the clustering so that unimportant tiny
features are removed as well, thus producing an idealized
surface out of the input points. Clearly, these considerations
do not apply if the input is not a regular model.

1917

Figure 13: Once a proper segmentation out of (a) a noisy
point set has been extracted, each point is projected on the
best-fitting primitive of its cluster, for which a local mesh (b)
is constructed. (c) Cluster-patches are connected through
strips of triangles to form a single component and (d) sharp
edges are reconstructed using [AFRS05].

effectively implement powerful mechanisms for region selection, which can be exploited when re-designing reverseengineered objects. Then, from our hierarchies manifold
meshes can be reconstructed through single-resolution segmentations. Our future work will be focused on the inclusion
of new fitting surfaces and on the speed-up of the algorithm.
For this last aim, we will exploit a random sampling [SWK07]
or an initial segmentation that splits the input properly to parallelize the clustering [VB04, VMC97]. Finally, the surface
reconstruction can be improved by exploiting the intersection of the extracted fitting primitives instead of using the
EdgeSharpener algorithm.

Acknowledgements
Special thanks are given to the anonymous reviewers, Bianca
Falcidieno and the members of the Shape Modelling Group at
IMATI-CNR, Genova-Italy for helpful comments. This work
has been partially supported by FOCUS K3D, FP 7 CA.
Giuseppe Patan`e has been partially funded by the GNCSINdAM ‘F. Severi’, ‘Young Researcher Programme’. We acknowledge the PointShop3D software and the ANN library.
Models are courtesy of the AIM@SHAPE repository, the Institut fuer Photogrammetrie of the Stuttgart University, and
Drexel University.
References

7. Conclusions and Future Work
We have presented an algorithm to construct a multiresolution representation of a point-sampled surface and to

[AA03] ADAMSON A., ALEXA M.: Approximating and intersecting surfaces from points. In Symp. on Geometry Processing (2003), pp. 230–239.

c 2010 The Authors
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

1918

M. Attene & G. Patan`e / Hierarchical Structure Recovery of Point-Sampled Surfaces

[ABCO*01] ALEXA M., BEHR J., COHEN-OR D., FLEISHMAN
S., LEVIN D., SILVA C. T.: Point set surfaces. In IEEE Visualization (2001), pp. 21–28.
[AF06] ATTENE M., FALCIDIENO B.: Remesh: An interactive
environment to edit and repair triangle meshes. In Shape
Modeling and Applications (2006), pp. 271–276.
[AFRS05] ATTENE M., FALCIDIENO B., ROSSIGNAC J.,
SPAGNUOLO M.: Sharpen and bend: Recovering curved
sharp edges in triangle meshes produced by featureinsensitive sampling. IEEE Trans. on Visualiz. and Comp.
Graphics 11, 2 (2005), 181–192.
[AFS06] ATTENE M., FALCIDIENO B., SPAGNUOLO M.: Hierarchical mesh segmentation based on fitting primitives. The
Visual Computer 22, 3 (2006), 181–193.
[AGP*04] ALEXA M., GROSS M., PAULY M., PFISTER H.,
STAMMINGER M., ZWICKER M.: Point-based computer
graphics. In ACM Siggraph Course Notes (2004).

[CG01] CHAPERON T., GOULETTE F.: Extracting cylinders in
full 3D data using a random sampling method and the
gaussian image. In Vision Modeling and Visualization
(2001), pp. 35–42.
[CSAD04] COHEN-STEINER D., ALLIEZ P., DESBRUN M.: Variational shape approximation. ACM Transactions on Graphics 23, 3 (2004), 905–914.
[DGG03] DEY T. K., GIESEN J., GOSWAMI S.: Shape segmentation and matching with flow discretization. Lecture Notes
in Computer Science 2748 (2003), 25–36.
[DKT05] DESBRUN M., KANSO E., TONG Y.: Discrete differential forms for computational modeling. In ACM Siggraph
2005 Courses (2005), p. 7.
[DS05] DEY T. K., SUN J.: An adaptive MLS surface for
reconstruction with guarantees. In Symp. on Geometry
Processing (2005), pp. 43–52.

[AK04] AMENTA N., KIL Y. J.: Defining point-set surfaces.
In ACM Siggraph (2004), pp. 264–270.

[FCOAS03] FLEISHMAN S., COHEN-OR D., ALEXA M., SILVA
C. T.: Progressive point set surfaces. ACM Transactions
on Graphics 22, 4 (2003), 997–1011.

[AKM*06] ATTENE M., KATZ S., MORTARA M., PATANE G.,
SPAGNUOLO M., TAL A.: Mesh segmentation - a comparative study. In Proc. of the IEEE Shape Modeling and
Applications (2006), p. 7.

[FKS*04] FUNKHOUSER T., KAZHDAN M., SHILANE P., MIN P.,
KIEFER W., TAL A., RUSINKIEWICZ S., DOBKIN D.: Modeling
by example. ACM Transactions on Graphics 23, 3 (2004),
652–663.

[AMN*98] ARYA S., MOUNT D. M., NETANYAHU N. S.,
SILVERMAN R., WU A. Y.: An optimal algorithm for approximate nearest neighbor searching fixed dimensions.
Journal of the ACM 45, 6 (1998), 891–923.

[GG04] GELFAND N., GUIBAS L. J.: Shape segmentation using
local slippage analysis. In Symp. on Geometry Processing
(2004), pp. 214–223.

[AMSF08] ATTENE M., MORTARA M., SPAGNUOLO M.,
FALCIDIENO B.: Hierarchical convex approximation for fast
region selection. Computer Graphics Forum 27, 5 (2008),
1323–1333.
[APP*07] AGATHOS A., PRATIKAKIS I., PERANTONIS S., SAPIDIS
N., AZARIADIS P.: 3D mesh segmentation methodologies
for cad applications. Computer-Aided Design and Applications 4, 6 (2007), 827–841.
[BS95] BAREQUET G., SHARIR M.: Filling gaps in the boundary of a polyhedron. Computer-Aided Geometric Design
12, 2 (1995), 207–229.
[BSRS04] BESPALOV D., SHOKOUFANDEH A., REGLI W. C., SUN
W.: Local feature extraction using scale-space decomposition. In Design Engineering Technical Conferences
(2004).
[CDST97] CHAZELLE B., DOBKIN D., SHOURHURA N., TAL A.:
Strategies for polyhedral surface decomposition: An experimental study. Computational Geometry: Theory and
Applications 7, 4-5 (1997), 327–342.

[GG07] GUENNEBAUD G., GROSS M.: Algebraic point set surfaces. In ACM Transactions on Graphics 26 (2007), p.
23.
[GKS00] GOPI M., KRISHNAN S., SILVA C.: Surface reconstruction based on lower dimensional localized delaunay
triangulation. Computer Graphics Forum 19, 3 (2000),
467–478.
[GPA*02] GROSS M., PFISTER H., ALEXA M., PAULY M.,
STAMMINGER M., ZWICKER M.: Point-based computer
graphics. Eurographics Tutorial, 2002.
[GWH01] GARLAND M., WILLMOTT A., HECKBERT P.: Hierarchical face clustering on polygonal surfaces. In ACM
Symp. on Interactive 3D Graphics (2001), pp. 49–58.
[HDD*94] HOPPE H., DEROSE T., DUCHAMP T., HALSTEAD M.,
JIN H., MCDONALD J., SCHWEITZER J., STUETZLE W.: Piecewise smooth surface reconstruction. In Computer Graphics and Interactive Techniques (1994), pp. 295–302.
[ITY*01] INOUE K., TAKAYUKI I. Y. A., TOMOTAKE F., KENJI
S.: Face clustering of a large-scale cad model for surface

c 2010 The Authors
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

M. Attene & G. Patan`e / Hierarchical Structure Recovery of Point-Sampled Surfaces

mesh generation. Computer-Aided Design 33 (2001), 251–
261.
[KL87] KELKER D., LANGENBERG C. W.: A mathematical
model for orientation data from macroscopic elliptical conical folds. Mathematical Geology 19, 8 (1987),
729–743.
[KT03] KATZ S., TAL A.: Hierarchical mesh decomposition
using fuzzy clustering and cuts. ACM Transactions on
Graphics 22, 3 (2003), 954–961.
[Lev03] LEVIN D.: Mesh-independent surface interpolation.
Geometric Modeling for Scientific Visualization 3 (2003),
37–49.
[LJS97] LEONARDIS A., JAKLIC A., SOLINA F.: Superquadrics
for segmenting and modeling range data. IEEE Transactions on Pattern Analysis and Machine Intelligence 19
(1997), 1289–1295.
[LLS*05] LEE Y., LEE S., SHAMIR A., COHEN-OR D., SEIDEL
H.-P.: Mesh scissoring with minima rule and part salience.
Computer Aided Geometric Design 22, 5 (2005), 444–
465.
[LMM98] LUKA´ CS G., MARTIN R., MARSHALL D.: Faithful
least-squares fitting of spheres, cylinders, cones and tori
for reliable segmentation. Lecture Note in Computer Science, Computer Vision 1406, 1 (1998), 671–686.
[LP05] LANGE C., POLTHIER K.: Anisotropic smoothing of
point sets. Computer Aided Geometric Design 22, 7
(2005), 680–692.
[LSA94] LEONARDIS A., SOLINA F., ALENKA M.: A direct recovery of super-quadric models in range images using
recover-and-select paradigm. In Proc. of Conf. on Computer Vision (1994), pp. 309–318.
[LZ04] LIU R., ZHANG H.: Segmentation of 3D meshes
through spectral clustering. In Pacific Graphics (2004),
pp. 298–305.
[Mar82] MARR D.: Vision. Freeman Publishers, New York,
1982.
[MFX*07] MIAO Y.-W., FENG J.-Q., XIAO C.-X., PENG Q.S., FORREST A. R.: Differentials-based segmentation and
parameterization for point-sampled surfaces. Journal of
Computer Science and Technology 22, 5 (2007), 749–
760.
[MPS*03] MORTARA M., PATANE` G., SPAGNUOLO M.,
FALCIDIENO B., ROSSIGNAC J.: Blowing bubbles for multiscale analysis and decomposition of triangle meshes. Algorithmica 38, 1 (2003), 227–248.

1919

[MPS*04] MORTARA M., PATANE` G., SPAGNUOLO M.,
FALCIDIENO B., ROSSIGNAC J.: Plumber: A method for a
multi-scale decomposition of 3d shapes into tubular primitives and bodies. In Proc. of ACM Solid Modeling and
Applications (2004), pp. 339–344.
[PGK02] PAULY M., GROSS M., KOBBELT L. P.: Efficient simplification of point-sampled surfaces. In Proc. of the conference on Visualization (2002), pp. 163–170.
[PKKG03] PAULY M., KEISER R., KOBBELT L. P., GROSS
M.: Shape modeling with point-sampled geometry. ACM
Transactions on Graphics 22, 3 (2003), 641–650.
[Pra87] PRATT V.: Direct least-squares fitting of algebraic
surfaces. ACM Siggraph 21, 4 (1987), 145–152.
[PSF04] PATANE` G., SPAGNUOLO M., FALCIDIENO B.: Paragraph: Graph-based parameterization of triangle meshes
with arbitrary genus. Computer Graphics Forum 23, 4
(2004), 783–797.
[Sha06] SHAMIR A.: Segmentation and shape extraction of
3D boundary meshes. In Eurographics 2006 State of the
Art Reports (2006), pp. 137–149.
[SWK07] SCHNABEL R., WAHL R., KLEIN R.: Efficient
RANSAC for point-cloud shape detection. Computer
Graphics Forum 26, 2 (2007), 214–226.
[VB04] VANCO M., BRUNNETT G.: Direct segmentation of
algebraic models for reverse engineering. Computing 72,
1-2 (2004), 207–220.
[VMC97] V´ARADY T., MARTIN R. R., COX J.: Reverse engineering of geometric models - an introduction. ComputerAided Design 29, 4 (1997), 255–268.
[WK04] WU J., KOBBELT L.: Optimized sub-sampling of
point sets for surface splatting. Computer Graphics Forum 23, 3 (2004), 643–652.
[WK05] WU J., KOBBELT L.: Structure recovery via hybrid
variational surface approximation. Computer Graphics
Forum 24, 3 (2005), 277–284.
[YGZS05] YAMAUCHI H., GUMHOLD S., ZAYER R., SEIDEL H.P.: Mesh segmentation driven by gaussian curvature. The
Visual Computer 21, 8-10 (2005), 659–668.
[YLW06] YAN D., LIU Y., WANG W.: Quadric surface extraction by variational shape approximation. Lecture Notes in
Computer Science 4077 (2006), 73.
[YNBH06] YAMAZAKI I., NATARAJAN V., BAI Z., HAMANN B.:
Segmenting point sets. In Proc. of Shape Modeling and
Applications (2006), pp. 4–13.

c 2010 The Authors
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

1920

M. Attene & G. Patan`e / Hierarchical Structure Recovery of Point-Sampled Surfaces

[YQ07] YANG P., QIAN X.: Direct computing of surface curvatures for point-set surfaces. In Symp. on Point-based
Graphics (2007), pp. 605–608.

[ZMT05] ZHANG E., MISCHAIKOW K., TURK G.: Featurebased surface parameterization and texture mapping. ACM
Transactions on Graphics 24, 1 (2005), 1–27.

[ZH04] ZHOU Y., HUANG Z.: Decomposing polygon meshes
by means of critical points. In Multimedia Modeling Conference (2004), pp. 187–195.

[ZTS02] ZUCKERBERGER E., TAL A., SHLAFMAN S.: Polyhedral
surface decomposition with applications. Computers &
Graphics 26, 5 (2002), 733–743.

c 2010 The Authors
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

