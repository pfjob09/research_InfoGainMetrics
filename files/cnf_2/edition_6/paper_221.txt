DOI: 10.1111/j.1467-8659.2010.01812.x
Pacific Graphics 2010
P. Alliez, K. Bala, and K. Zhou
(Guest Editors)

Volume 29 (2010), Number 7

Fast Updating of Delaunay Triangulation of Moving Points by
Bi-cell Filtering
Yuanfeng Zhou1 , Feng Sun1 , Wenping Wang1 , Jiaye Wang2 , and Caiming Zhang2
1 Department
2 School

of Computer Science, The University of Hong Kong, Hong Kong, China
of Computer Science and Technology, Shandong University, Jinan, China

Abstract
Updating a Delaunay triangulation when data points are slightly moved is the bottleneck of computation time
in variational methods for mesh generation and remeshing. Utilizing the connectivity coherence between two
consecutive Delaunay triangulations for computation speedup is the key to solving this problem. Our contribution
is an effective filtering technique that confirms most bi-cells whose Delaunay connectivities remain unchanged
after the points are perturbed. Based on bi-cell flipping, we present an efficient algorithm for updating twodimensional and three-dimensional Delaunay triangulations of dynamic point sets. Experimental results show
that our algorithm outperforms previous methods.
Categories and Subject Descriptors (according to ACM CCS): I.3.5 [Computer Graphics]: Computational Geometry
and Object Modeling—Geometric algorithms, languages, and systems

1. Introduction
Delaunay triangulation is a fundamental data structure in
computational geometry. It is versatile in a spectrum of
applications including mesh generation for finite element
method [EAD∗ 06], surface reconstruction from scanned
data in computer graphics [CG04] and intensity field reconstruction in astrophysics [Sch07]. The computation of Delaunay triangulations has extensively been studied in recent
decades [BDP∗ 02]. Efficient and robust methods in two dimensions [She96] and three dimensions [CGA] are available.
Some applications, such as mesh generation [DBC07,ACSYD05, TWAD09, YWLL10] and remeshing [AdVDI05,
LWL∗ 09, YLL∗ 09], require to iteratively construct the Delaunay triangulation of a point set which changes slightly
in each iteration, and computing the Delaunay triangulation
in each iteration is the most time-consuming step. Figure 1
shows the initialization and connectivity changes in two iterations of a typical Delaunay meshing algorithm in two dimensions, based on the CVT approach using the Lloyd iterations. Note that 30 edges are flipped at the 10th iteration and
only 2 edges are flipped at the 100th iteration. It is therefore
natural to ask if the update can be done efficiently in such
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.
Published by Blackwell Publishing, 9600 Garsington Road, Oxford OX4 2DQ, UK and
350 Main Street, Malden, MA 02148, USA.

(a)

(b)

(c)

(d)

Figure 1: Delaunay triangulations of 2,000 points in a typical meshing algorithm. Edge flips (different connectivities)
from previous iteration are highlighted in dark. (a) Delaunay triangulation of initialization; (b) The 10th iteration; (c)
The 100th iteration; (d) The percentage of computation time
taken for DT updating with different number of seeds.

2234

Y. Zhou et al. / Fast Updating of Delaunay Triangulation of Moving Points by Bi-cell Filtering

cases without computing the Delaunay triangulation from
scratch.
Although frequently used, it is inefficient to always build
the Delaunay triangulation from scratch in each iteration,
which overlooks the spatial coherence between consecutive
iterations. Figure 1(d) shows the percentage of time used to
build Delaunay triangulation with different number of seeds.
Compared with existing mature methods for computing Delaunay triangulations of fixed points, algorithms for computing Delaunay triangulations of moving points need further
investigation. In this paper, we focus on the latter and propose an efficient approach.
The problem is formulated as follows: given a point set
S and its Delaunay triangulation DT (S), we need to compute the Delaunay triangulation DT (S ) of a point set S ,
which is somewhat perturbed from S. The method that computes the Delaunay triangulation DT (S ) from scratch will
be referred to as the rebuilding method, in which the spatial
coherence between S and S is not utilized at all. Currently,
no existing algorithms outperform rebuilding consistently on
typical three-dimensional data sets, albeit the computation
can be accelerated by one order of magnitude in two dimensions by the method in [dCTAD09], which is deemed the
fastest method for updating Delaunay triangulation of moving points so far.
Contribution: Our contribution is a simple and effective
check to quickly confirm most bi-cells in DT (S) which remain Delaunay for S after perturbation of data points. We
use bi-cell flipping to update a bi-cell in DT (S) if it fails
the check and is therefore potentially non-Delaunay, supposing that it is flippable. If the local connectivity becomes
non-Delaunay and not flippable, which is a relatively rare
case, we then rebuild the Delaunay triangulation of S from
scratch. Experiments show our algorithm outperforms other
existing methods and runs 2 to 3 times faster than rebuilding
in three dimensions.

A
A

C

C

D
B
D
B

(a)

(b)

Figure 2: Two typical two-dimensional bi-cells. (a) satisfies
the empty sphere condition; (b) does not satisfy the empty
sphere condition, since B is inside the circumcircle of the
triangle ADC.
and fixed. There are also some algorithms and implementations that build Delaunay triangulations when the set S is
given on the fly [Dev02, LJ05, CGA].
Since our algorithm is based on bi-cell flipping, we briefly
introduce the concepts in the bi-cell flipping algorithm.
Definition 1 (Bi-cell) : A bi-cell in two-dimensional triangulation is a pair of triangles sharing an edge. A bi-cell in
three-dimensional triangulation is a pair of tetrahedra sharing a face.
Remark: In two dimensions, there is a one-to-one mapping
between bi-cells and edges. So we may also use an edge to
denote a bi-cell.
Figure 2 shows two typical two-dimensional bi-cells. (a)
shows a bi-cell satisfying the empty sphere condition and (b)
shows a bi-cell violating the condition. Flipping the edge CD
to AB turns (b) to (a) to generate the Delaunay triangulation.
In two dimensions, the Delaunay triangulation can be constructed by edge (i.e., bi-cells) flipping until all edges (i.e.,
bi-cells) are Delaunay [Wag36, dBvKOS97].
E

B

E

B

2. Review
Several methods have been proposed to update Delaunay triangulations of points evolving in iterations. We will give a
brief review of each approach. We first breifly introduce Delaunay triangulation.
2.1. Delaunay Triangulation
The Delaunay triangulation of a set S of n points in Rd ,
DT (S), is a simplicial complex [Mun93,dBvKOS97] which
satisfies the empty sphere condition. By empty sphere, we
mean that no points in S lie inside the circumscribing sphere
of any simplex in DT (S). Figure 2 (a) illustrates the empty
sphere property of a two-dimensional Delaunay triangulation of four points.
Different algorithms have been proposed to construct Delaunay triangulations [PS93, For86] when the set S is given

C

C

D

A

D

A

(a)

(b)

Figure 3: A three-dimensional bi-cell and its flipping. (a) A
three-dimensional bi-cell. (b) Three bi-cells result from flipping the face BCD to the edge AE.
Figure 3 (a) shows a three-dimensional bi-cell. Unlike the
two-dimensional case, it is still open in three dimensions
whether one triangulation can always reach another triangulation of the same point set by flipping [Joe89]. However,
such cases are not encountered in our experiments. The overall performance of our bi-cell flipping algorithm is better
than rebuilding, as we will see later in this paper.
Now we shall review existing methods.
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

Y. Zhou et al. / Fast Updating of Delaunay Triangulation of Moving Points by Bi-cell Filtering

2.2. Kinetic Framework
Given a set of points S, its Delaunay triangulation DT (S)
and S perturbed from S, we build DT (S ). This problem
can be solved in a continuous manner using the framework
of the kinetic data structure (kinetic framework) [Gui98].
[Rus07] proposes to morph DT (S) to DT (S ) by keeping track of all connectivity changes when all points in S
move to points in S , respectively. Most time is consumed on
the computation of the connectivity changes which are not
relevant to DT (S ) and thus unnecessary. Due to the complexity of maintaining all connectivity changes, this method
is considerably slower than rebuilding DT (S ) from scratch
in all experiments in [Rus07]. Here we conclude that kinetic
framework is not suitable for efficiently building Delaunay
triangulations of evolving point sets when we do not want to
keep track of the continuous motion between S and S .
2.3. Flipping Update Algorithm
Guibas and Russell consider using flipping as the main operation to update DT (S) to DT (S ) [GR04]. Conceptually,
the procedure is to first check all cells in DT (S). If the orientation of one cell is reversed, then remove some vertices in
DT (S) to make it an embedded triangulation. Then, flipping
bi-cells to make it Delaunay. Finally insert the removed vertices with updated geometric positions in S to get DT (S ).
In three dimensions, flipping may get stuck and rebuilding is
triggered to compute DT (S ). Their experiments show this
approach is often faster than rebuilding. Shewchuk proposes
star splaying to build Delaunay triangulations from a “nearly
Delaunay” triangulation by local correction [She05]. It can
resolve the flipping stuck in algorithm of [GR04] without
calling rebuilding.

2235

progressively along iterations. The algorithm is the fastest
one known so far for updating Delaunay triangulation of a
point set with small perturbation and is the one to be compared with our algorithm.
A more detailed explanation of
the safe zone defined in [dCTAD09]
is needed for later discussion. The
figure on the right shows a twodimensional bi-cell and two concentric circles it defines. The center of
the two circles is the intersection
point of the two perpendicular bisectors of AB and CD. Then the me- Figure 4: Tolerance
dian circle, shown in solid line, de- defined for a twofines a tolerance zone for the bi-cell dimensional bi-cell in
in that the connectivity will remain [dCTAD09].
unchanged if after perturbation the
two outer-vertices stay outside the median circle and the two
inner vertices stay inside the median circle. Hence, a circle
is assigned as a safe zone to each vertex – the circle is centered at the vertex and its radius is the distance between the
median circle to the outer circle. It follows that the original
edge connectivity will remain unchanged if all the vertices
after perturbation stay inside their safe zones. The idea of
the vertex safe zone in three dimension is similar but its construction is more complex. Please refer to the details in [dCTAD09].
Note that the above filtering condition (or safe zone) is
conservative, since that the vertices stay in their safe zones
is only a sufficient condition for keeping the same edge connectivity, not a necessary one.

De Castro et al. propose a new approach that associates a
safe zone to each vertex in DT (S) [dCTAD09]. One vertex
is said to be filtered if it stays in its safe zone and therefore
does not trigger a change of its connectivity to its neighboring vertices. If a vertex does not pass the filtering:

No existing algorithms outperform rebuilding consistently
for typical three-dimensional triangulations, though in two
dimensions the computation can be accelerated by one order
of magnitude [dCTAD09]. Therefore, we wish to develop
more efficient filtering conditions so that more perturbed
vertices whose original connectivity still satisfying Delaunay condition can be filtered, thus reducing the instances
of unnecessarily invoking the procedure to update the edge
connectivity.

(i) In two dimensions, it is relocated if the triangulation is
not embedded anymore, otherwise it is repaired by edge flipping.

3. A New Delaunay Certificate Safe Zone for Bi-cell
Filtering

2.4. Vertex Filtering Algorithm

(ii) In three dimensions, it is relocated if the local star of the
vertex is not Delaunay anymore.
To relocate an updated vertex, the algorithm first inserts
the point with updated geometric position and removes the
point with previous outdated position. After this relocation,
safe zones of some nearby vertices are affected and a series of updates of these safe zones are performed to keep all
safe zones valid. This algorithm is suitable for mesh generation and remeshing applications based on variational approaches in which the displacement of vertices decreases
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

In this section, we shall give a fundamentally new, and efficient filtering condition for checking the Delaunay condition after perturbation. For simplicity of discussion, the basic idea will be explained in two dimensions but it is easy to
extend to three dimensions.
3.1. Delaunay Condition of a Bi-cell
Figure 5 (a) illustrates a two-dimensional Delaunay bi-cell
composed of two cells p1 p2 p3 and p1 p3 p4 . The empty

2236

Y. Zhou et al. / Fast Updating of Delaunay Triangulation of Moving Points by Bi-cell Filtering

2D
p1

P4

P1

p4

P´4
P´2

P´1
P´3

p1

p2

P2 p2

p3

(a)

p4

P3

p3

(b)
3D

2D

P1

p2

P2

p1

P´3

P´1

p4

(c)

P3

p3

3.2. Perturbation Theorem
Theorem 1 connects the empty sphere condition of a Delaunay bi-cell with the positive determinant of its corresponding
matrix. This suggests that one may update a Delaunay triangulation with existing tools in matrix computation. Here we
recall a well-known result in matrix theory and show how to
apply it to updating Delaunay triangulations.
Theorem 2 (Perturbation Theorem) Suppose A ∈ Rn×n
and ∆A ≤ ε A . If ε · κ(A) < 1, then A + ∆A is nonsingular, where . is a matrix norm, κ(A) = A · A−1 is the
condition number of the matrix A.
The theorem is part of Lemma 2.7.1 in [GVL96].

P´2
p2

p3

3D

P´4
p4

p1

P4

(d)

Figure 5: Delaunay condition of a two-dimensional bi-cell.
(a) a bi-cell satisfying empty sphere condition; (b) positive
orientation of the lifted tetrahedron; (c) a bi-cell violating
empty sphere condition; (d) negative orientation of the lifted
tetrahedron.

Given the input point set S, its triangulation DT (S) and
S perturbed from S, we use Theorem 2 to filter bi-cells in
DT (S). Let Bc be a bi-cell in DT (S) composed of p1 p2 p3
and p1 p3 p4 . With a perturbation, we denote pi in S as
pi + δpi , that is xi = xi + δxi and yi = yi + δyi . Then, the
corresponding matrix M of the perturbed Bc is M + ∆M,
where ∆M is


δx1 δy1 ∆1 0
 δx2 δy2 ∆2 0 


 δx3 δy3 ∆3 0  ,
δx4 δy4 ∆4 0
where ∆i = 2xi δxi + δxi2 + 2yi δyi + δy2i , i = 1, 2, 3, 4.

sphere condition is equivalent to the positive orientation of
the tetrahedron lifted from the four points to the paraboloid
z = x2 + y2 , as illustrated in Figure 5 (b). Here we denote
Pi = (xi , yi , xi2 + y2i ) as the lifted point of pi = (xi , yi ) to the
paraboloid z = x2 + y2 , i = 1, 2, 3, 4. The bi-cell composed of
p1 p2 p3 and p1 p3 p4 is Delaunay if and only if the volume of the tetrahedron is positive, or equivalently, the determinant |M| of the matrix M is positive, where M is


x1 y1 x12 + y21 1
 x2 y2 x22 + y22 1 


 x3 y3 x2 + y2 1  .
3
3
x4 y4 x42 + y24 1
Figure 5 (c) and (d) show a non-Delaunay bi-cell violating
the empty sphere condition and its lifted tetrahedron with
negative orientation, respectively.
To summarize, we have the following theorem [GS85,dBvKOS97].
Theorem 1 Given a two-dimensional bi-cell Bc, the following four statements are equivalent:
1.
2.
3.
4.

Bc is Delaunay;
Bc satisfies the empty sphere condition;
The lifted tetrahedron of Bc has positive orientation;
The determinant of the corresponding matrix M of Bc is
positive.

In three dimensions, the i-th row in M is (xi , yi , zi , xi2 +
y2i + z2i , 1)T and the i-th row in ∆M is (δxi , δyi , δzi , ∆i , 0)T ,
where ∆i = 2xi δxi + δxi2 + 2yi δyi + δy2i + 2zi δzi + δz2i , for
i = 1, 2, 3, 4, 5.
By Theorems 1 and 2, we may check the perturbed corresponding matrix ∆M to filter bi-cells which are still Delaunay after perturbation, as stated in the next theorem.
Theorem 3 Given a Delaunay bi-cell Bc, let M be its corresponding matrix. Let the corresponding matrix be M + ∆M
M
after perturbation. If ∆M < κ(M) and none of the two cells
of Bc is reversed in orientation, Bc after perturbation is still
Delaunay.
Proof: To prove that Bc after perturbation is still Delaunay, we need to show that the orientation of the lifted bi-cell,
as a tetrahedron, is preserved, that is, |M + ∆M| is positive,
where | · | stands the determinant of a matrix. The proof is
by contradiction. Construct a function f (t) = |M + t · ∆M| :
R → R. Since f (t) is a polynomial, it is continuous over t.
Suppose |M + ∆M| is negative. Since f (0) is positive and
f (1) is negative, there exists 0 < t0 < 1 such that f (t0 ) = 0.
M
However, since ∆M < κ(M) and 0 < t0 < 1, we have t0 ·
M

∆M = t0 · ∆M < κ(M) ; hence M + t0 · ∆M is nonsingular.
So, f (t0 ) = |M + t0 · ∆M| = 0, a contradiction.
We conclude that Bc after perturbation is still Delaunay.

c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

2237

Y. Zhou et al. / Fast Updating of Delaunay Triangulation of Moving Points by Bi-cell Filtering
M
κ(M)

Note that ∆M <
is a sufficient condition to ensure
that the bi-cell Bc is Delaunay after perturbation, given the
triangulation is embedded.

the perturbation is a scaling, we have ∆M = 0 since the bicells before and after perturbation are congruent. However,
we choose not to apply the scaling preprocessing since it
involves square root computation.

3.3. Safe Zone of a Bi-cell – Computation and
Properties

3.3.2. Boundary Handling

To compute the safe zone efficiently, we should choose a
suitable matrix norm. Although the 2-norm is often used in
theoretical analysis, our tests show that the 1-norm and ∞norm lead to more efficient implementation. We choose to
use the ∞-norm in all experiments presented in this paper.

Following [dCTAD09], we add a point at infinity, also
known as infinite point, to simplify the handling of boundary. All points on the convex hull of S have infinite edges
connected with infinite point, and then, each edge on the
convex hull is adjacent to two triangles including one infinite triangle and each infinite edge is adjacent to two infinite
triangles.

Given an interior bi-cell Bc in DT (S) composed of
p1 p2 p3 and p1 p3 p4 , since κ(M) = M · M −1 , the
sufficient condition is simplified as ∆M < M1−1 , where
the precomputed M −1 is updated only when it becomes
invalid. Here, we call M1−1 the safe tolerance of Bc. The
∞-norm of ∆M is the maximum absolute row sum, that is,
max{|δxi | + |δyi | + |∆i |, i = 1, 2, 3, 4}.

y

p3

p´3

p´3

p2

p2

p1 (p´1)

p´2 x

p´1

p4

p´4

(a)

p1
p3

p1

p3
p2

(a)

p3

p´2

∞

p2

3.3.1. Translation Invariance

p1

∞

p´4

p4

(b)

Figure 6: Bi-cell translation after perturbation. (a) The bicell p1 p2 p3 p4 and after perturbation, it becomes p1 p2 p3 p4
(b) To make the computation more efficient, we translate
both bi-cells by moving their first points (p1 and p1 , resp.)
to the origin.
To make the computation of safe zones and checking more
efficient, we perform a preprocessing step to translate both
the original bi-cell and the perturbed bi-cell by moving their
first points (p1 and p1 , resp.) to the origin. After this translation, three leftmost entries in the first row of M and ∆M are
zero.
Our bi-cell filtering operation possesses the following
property called translation invariance.
Property 1 (Translation Invariance) Suppose that the perturbation applied to the bi-cell Bc is a translation, that is,
pi = pi + δp, i = 1, 2, 3, 4. Then, with the translation processing, ∆M = 0.
It is not hard to see that scale invariance holds also. First
apply a scaling to make the longest (or shortest) edges of the
bi-cells before and after perturbation to have equal length. If
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

(b)

Figure 7: Safe zone computation for infinite bi-cells. (a) A
two-dimensional boundary bi-cell composed of one finite triangle and one infinite triangle; (b) Another two-dimensional
bi-cell composed of two infinite triangles.
A boundary bi-cell has at least one cell adjacent to infinite point. There are two types of boundary bi-cells in two
dimensions. Figure 7 (a) shows a boundary bi-cell composed
of one finite triangle p1 p2 p3 and one infinite triangle
p1 p3 ∞. Figure 7 (b) shows another type boundary bi-cell
composed of two infinite triangles p1 p2 ∞ and p2 p3 ∞.
Delaunay condition of the boundary bi-cell shown in Figure 7 (a) (resp. (b)) is that the determinant of the matrix below is positive (resp. negative):


x1 y1 1
 x2 y2 1  .
x3 y3 1
The matrix above is called the corresponding matrix M of
a boundary bi-cell. ∆M of a boundary bi-cell is


δx1 δy1 0
 δx2 δy2 0  .
δx3 δy3 0
4. Bi-cell Filtering Algorithm
The input of the bi-cell filtering algorithm is a point set S,
its Delaunay triangulation DT (S) in which the safe zone
of each bi-cell is precomputed and the perturbed point set
S . The output of the algorithm is the Delaunay triangulation of the perturbed set S , DT (S ). Our algorithm extends
the potential of flipping algorithm by using a new method
to first filter most bi-cells which are Delaunay. We construct

2238

Y. Zhou et al. / Fast Updating of Delaunay Triangulation of Moving Points by Bi-cell Filtering

and maintain a bi-cell list for DT (S) denoted as bc_list. For
each bi-cell ♦B, we store a number for bi-cell’s tolerance: ω,
and reference positions for the vertices. In two dimensions,
nine double variables (one for ω and eight for coordinates
of four vertices) and four int variables (indices of four vertices) are stored for each bi-cell. Our algorithm is shown in
Algorithm 1.
Remark: In the bi-cell filtering algorithm, if the triangulation is not embedded, that is, some cells are reversed (the
related vertices are also called reversed vertices), Delaunay
triangulation cannot be obtained by flipping. So we check
orientations of all the cells of the triangulation before bi-cell
filtering. If one cell fails the checking, we call rebuilding to
construct Delaunay triangulation.

Algorithm 1 Updating Delaunay triangulation by bi-cell
filtering
update all vertices of DT (S) with perturbed points.
check the orientations of all cells in DT (S).
if the triangulation is embedded then
for all bi-cells {♦B} ∈ bc_list do
if ♦B is out of its safe zone ω then
insert ♦B into a list Q;
repeat
popup ♦Bt from the top of Q;
if ♦Bt is not Delaunay then
if ♦Bt is flippable then
flip ♦Bt ;
update the affected bi-cells Σ♦Bn of ♦Bh
due to the flipping;
insert Σ♦Bn into Q;
ωt ← new tolerance of ♦Bt ;
end if
else
ωt ← new tolerance of ♦Bt ;
end if
until Q is EMPTY
end if
end for
else
call rebuilding algorithm to update DT (S);
update bc_list;
exit Algorithm 1;
end if

5. Implementation and Experiments
In this section, we give the implementation details of the bicell filtering algorithm and show experiments to compare it
with the vertex filtering method [dCTAD09] and the rebuilding method [CGA].

5.1. Implementation Details
Our implementation uses Triangulation_3 in CGAL version
3.4 [CGA] and exact predicates inexact constructions kernel [BFG∗ 08] to compute Delaunay triangulation in rebuilding method. In vertex filtering and bi-cell filtering methods,
we use double precision in safe zone computation and use
exact predicate supplied by CGAL to check the Delaunay
condition in our algorithm. All experiments are run on a
workstation with an Intel Xeon 3.16 GHz CPU, 8GB memory. The operating system is 64-bit Windows 7, Visual Studio 2008 (in release mode with “-O2” option). Note that we
only collect timing data on computing Delaunay triangulations, without including the time spent updating data points,
which is application specific, such as using Lloyd’s iteration
in CVT computation.
5.2. Experiments
5.2.1. Data Sets
To compare the performance of the chosen methods, we generate several data sets from typical applications of Delaunay triangulation, that is, variational mesh generation and
remeshing [YLL∗ 09,LWL∗ 09,YWLL10]. The energy function of centroidal Voronoi tessellation (CVT) [DFG99] is defined as:
n

F(X) =

∑

i=1 Vi

ρ(x) x − xi

2

dσ,

where ρ(x) is a density function over the domain. In these
applications, minimizing the CVT function distributes points
evenly in a two- or three-dimensional domain and restricted
Voronoi diagram [ES97] is computed to find connectivities
of these points. As reported in [YLL∗ 09, LWL∗ 09], the step
to build Delaunay triangulation is often the bottleneck in
computation. The Lloyd method [Llo82] is a common approach to computing CVT. We use several sets of points
generated by the Lloyd method to set up experiments for
comparison.
5.2.2. Comparison on Two-dimensional Meshing
We choose a regular 32-sided polygon as the domain with
two different density functions, ρ(x) = 1 and ρ(x) = x2 .
The comparison is shown in Figure 8. With uniform density,
vertex filtering is the fastest. With nonuniform density, bicell filtering is better than vertex filtering. Rebuilding is the
slowest one. We observe that the performance of both vertex filtering and bi-cell filtering is approximately inversely
proportional to the percentage of filtering failure. Overall,
the bi-cell filtering method and the vertex filtering method
have comparable performances. When the density function
is nonuniform and the initialization is bad, large displacement of points slows down the vertex filtering algorithm due
to the high percentage of filtering failure. However, in this
case, benefiting from the translation invariance property 1,
bi-cell filtering performs better.
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

Y. Zhou et al. / Fast Updating of Delaunay Triangulation of Moving Points by Bi-cell Filtering

(a) Initialization

(b) Result
(a) Meshing result

(c) Accumulated time

2239

(b)Accumulated time

(d) Filter failure percentage
(c) Filter failure percentage

(d) Speed-up factor

Figure 9: Comparison on the kitten model with 15,000
points and 3,000 Lloyd iterations. Rebuilding is triggered
146 times in 3,000 iterations by bi-cell filtering.
5.2.3. Comparison on Surface Remeshing
(e) Initialization

(f) Result

(g) Accumulated time

(h) Filter failure percentage

The data is generated with the remeshing algorithm
in [YLL∗ 09]. Note that, our algorithm returns the threedimensional Delaunay triangulation of the data points, the
restricted Delaunay triangulation (RDT) [ES97] is extracted
for surface remeshing. The result is shown in Figure 9. Bicell filtering is the fastest. Speed up factor records the speedup achieved over the rebuilding algorithm. When reversed
cells occur, we call rebuilding to update Delaunay triangulation, then, the time cost is higher than rebuilding in that
iteration since the bi-cell list is rebuilt.
5.2.4. Comparison on Three-dimensional Meshing

(i) Initialization

(j) Result

All data of three-dimensional meshing are generated by the
framework in [YWLL10]. Figure 10 and 11 compare three
algorithms on two models. Bi-cell filtering is the fastest on
both models. In the converging stage, the percentage of bicells failing the filtering test is typically 1% to 5%.
We also compare these approaches with different initialization on the same model. See Figure 12. One initialization
is uniform and the other is nonuniform. With nonuniform
initialization, bi-cell filtering outperforms rebuilding after
300 iterations. Vertex filtering outperforms rebuilding after
several thousand iterations.

(k) Accumulated time

(l) Filter failure percentage

Figure 8: 5,000 points in a two-dimensional regular 32-gon
domain with 5,000 Lloyd iterations. (a)∼(d) are of uniform
density. (e)∼(l) are of density ρ = x2 .

c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

All these three methods are scalable with different number of points, as shown in Figure 13. On the bunny model,
the comparison of vertex filtering and bi-cell filtering is similar with different number of points, from 10,000 to 30,000,
increased by 5,000 each time. The statistics of the average
time of each iteration can be found in Table 1.

2240

Y. Zhou et al. / Fast Updating of Delaunay Triangulation of Moving Points by Bi-cell Filtering

(a) Meshing result

(b)Accumulated time
(a) Initialization

(c) Filter failure percentage

(d) Speed-up factor

(b) Accumulated time

Figure 10: Comparison on the triceratops model with
25,000 points and 2,000 Lloyd iterations. Rebuilding is triggered 298 times in 2,000 iterations by bi-cell filtering.

(c) Speed-up factor
Figure 12: Comparison on the bunny model with uniform
and non-uniform sampling with 5,000 points and 2,000
Lloyd iterations. Left: Uniform; Right: Nonuniform.
(a) Meshing result

(b)Accumulated time
#seeds
10k
15k
20k
25k
30k

(c) Filter failure percentage

rebuilding
0.2009s
0.2817s
0.4308s
0.5380s
0.6592s

vertex filtering
0.2755s
0.3445s
0.5167s
0.6863s
0.9293s

bi-cell filtering
0.0767s
0.1272s
0.1731s
0.2160s
0.2695s

(d) Speed-up factor

Figure 11: Comparison on the genus3 model with 13,000
points and 4,000 Lloyd iterations. Rebuilding is triggered
187 times in 4,000 iterations by bi-cell filtering.

Remark: In two dimensions, the vertex filtering approach [dCTAD09] is accelerated by flipping if the movement of one vertex does not cause its adjacent cell reversed.
The bi-cell filtering method takes the advantage of the efficiency of flipping in both two and three dimensions. Experiments show that bi-cell filtering method always outperforms
vertex filtering method in three dimensions. Compared with
vertex filtering, the bi-cell filtering is recommended especially for practical applications involving three-dimensional
Delaunay triangulations. In some applications in which most
of the points are fixed but only a few ones, vertex filtering is
still a good choice because its safe zone is defined on the
vertex directly. Overall, bi-cell filtering will trigger rebuild-

Table 1: Average speed comparison: bunny model, 2,000
Lloyd iterations.

ing frequently in the beginning iterations. So we can run rebuilding directly for the first few iterations then switch to bicell filtering algorithm. Experimentally, one can count the
number of reversed cells, when the percentage of reversed
cells drops below 10%, one can switch to bi-cell filtering algorithm for updating. The time of our algorithm comprises
reverse checking of all cells, bi-cell filtering checking, bi-cell
Delaunay checking, bi-cell flipping and bi-cell updating. We
show in Figure 14 the time breakdown of our algorithm and
compare it with the time of checking the Delaunay conditions of all bi-cells. From this comparison, one can see the
efficiency and effectiveness of the bi-cell filtering.
c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

Y. Zhou et al. / Fast Updating of Delaunay Triangulation of Moving Points by Bi-cell Filtering

2241

(a) 10,000 points

(a) Breakdown of running time (kitten model)

(b) 15,000 points

(c) 20,000 points
(b) Breakdown of running time (triceratops model)
Figure 14: Comparison on running time of bi-cell filtering
algorithm and Delaunay checking time without filtering.

(d) 25,000 points

gered to construct Delaunay triangulation. In the future, we
will investigate this problem further by trying to use more
efficient local repairs to modify the triangulation to make it
embedded.
Whether flipping works for constructing Delaunay triangulations in three and four dimensions is still open [San00].
We are interested in studying this open problem and extending our bi-cell filtering algorithm to update four-dimensional
Delaunay triangulation.

(e) 30,000 points
Figure 13: Comparison on bunny model with different numbers of seeds with 2,000 Lloyd iterations. Left: Speed-up factor; Right: Accumulated time.
6. Conclusion and Future Work
We address the problem of updating Delaunay triangulations
of moving points from an algebraic point of view and present
an efficient algorithm. An effective tolerance is defined on
bi-cell with theoretical foundation in matric theory. The new
algorithm filters most Delaunay bi-cells and uses flipping to
amend non-Delaunay bi-cells, and enjoys a nice property:
translation invariance.
When a triangulation is not embedded, rebuilding is trigc 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

Acknowledgements
We thank AIM@SHAPE Project [Aim] for kindly providing three-dimensional models used in this paper. We would
like to thank Pedro Machado for providing the code of vertex filtering algorithm. We thank Dong-ming Yan for the
mesh generation and remeshing programs and many helpful discussions during this work. We also thank the reviewers for constructive and detailed comments. The work
of W. Wang is partially supported by the Research Grant
Council of Hong Kong (project no.: 718209 and 718010).
The work of C. Zhang is partially supported by the National Basic Research Program of China(973 Program)
(2006CB303102), the State Key Program of NSFC project
(60933008), and the National 863 High-Tech Program of
China (2009AA01Z304).

2242

Y. Zhou et al. / Fast Updating of Delaunay Triangulation of Moving Points by Bi-cell Filtering

References
[ACSYD05] A LLIEZ P., C OHEN -S TEINER D., Y VINEC M.,
D ESBRUN M.: Variational tetrahedral meshing. In SIGGRAPH
’05: ACM SIGGRAPH 2005 Courses (New York, NY, USA,
2005), ACM, p. 10. 1
[AdVDI05] A LLIEZ P., DE V ERDIÈRE E. C., D EVILLERS O.,
I SENBURG M.: Centroidal Voronoi diagrams for isotropic surface remeshing. Graph. Models 67, 3 (2005), 204–231. 1
[Aim] Shape
repository
of
http://shapes.aimatshape.net. 9

AIM@SHAPE

project.

[BDP∗ 02] B OISSONNAT J.-D., D EVILLERS O., P ION S., T EIL LAUD M., Y VINEC M.: Triangulations in CGAL. Computational Geometry 22, 1-3 (2002), 5 – 19. 1
[BFG∗ 08] B RONNIMANN H., FABRI A., G IEZEMAN G.-J.,
H ERT S., H OFFMMANN M., H ETTNER L., S CHIRRA S., P ION
S.: 2D and 3D geometry kernel, 2008. In CGAL User and Reference Manual. 6
[CG04] C AZALS F., G IESEN J.: Delaunay Triangulation Based
Surface Reconstruction: Ideas and Algorithms. Tech. Rep. RR5393, INRIA, 11 2004. 1
[CGA] C GAL, Computational Geometry Algorithms Library.
http://www.cgal.org. 1, 2, 6
[DBC07] D EBARD J.-B., BALP R., C HAINE R.: Dynamic Delaunay tetrahedralisation of a deforming surface. Vis. Comput.
23, 12 (2007), 975–986. 1
[dBvKOS97] DE B ERG M., VAN K REVELD M., OVERMARS M.,
S CHWARZKOPF O.: Computational Geometry: Algorithms and
Applications, 1 ed. Springer, July 1997. 2, 4
[dCTAD09] DE C ASTRO P. M. M., T OURNOIS J., A LLIEZ P.,
D EVILLERS O.: Filtering relocations on a Delaunay triangulation. Computer Graphics Forum 28, 5 (July 2009), 1465–1474.
2, 3, 5, 6, 8
[Dev02] D EVILLERS O.: The Delaunay hierarchy. International
Journal of Foundations of Computer Science 13 (2002), 163–180.
2
[DFG99] D U Q., FABER V., G UNZBURGER M.: Centroidal
Voronoi tessellations: applications and algorithms. SIAM Review
41 (1999), 637–676. 6
[EAD∗ 06]

E DELSBRUNNER H., A BLOWITZ M. J., DAVIS S. H.,
H INCH E. J., I SERLES A., O CKENDON J., O LVER P. J.: Geometry and Topology for Mesh Generation (Cambridge Monographs
on Applied and Computational Mathematics). Cambridge University Press, New York, NY, USA, 2006. 1

[ES97] E DELSBRUNNER H., S HAH N.: Triangulating topological spaces. International Journal of Computational Geometry
Applications 7, 4 (1997), 365–378. 6, 7
[For86] F ORTUNE S.: A sweepline algorithm for Voronoi diagrams. In SCG ’86: Proceedings of the second annual symposium on Computational geometry (New York, NY, USA, 1986),
ACM, pp. 313–322. 2
[GR04] G UIBAS L., RUSSEL D.: An empirical comparison of
techniques for updating Delaunay triangulations. In SCG ’04:
Proceedings of the twentieth annual symposium on Computational geometry (New York, NY, USA, 2004), ACM, pp. 170–
179. 3

algorithmic foundations of robotics on Robotics : the algorithmic perspective (Natick, MA, USA, 1998), A. K. Peters, Ltd.,
pp. 191–209. 3
[GVL96] G OLUB G. H., VAN L OAN C. F.: Matrix computations
(3rd ed.). Johns Hopkins University Press, Baltimore, MD, USA,
1996. 4
[Joe89] J OE B.: Three-dimensional triangulations from local
transformations. SIAM J. Sci. Stat. Comput. 10, 4 (1989), 718–
741. 2
[LJ05] L IU Y., JACK S.: A comparison of five implementations of
3D Delaunay tessellation. In Combinatorial and Computational
Geometry, Jacob E. G., Janos P., Emo W., (Eds.). Cambridge University Press, 2005, pp. 439–458. 2
[Llo82] L LOYD S. P.: Least squares quantization in PCM. IEEE
Transactions on Information Theory 28, 2 (1982), 129–137. 6
[LWL∗ 09] L IU Y., WANG W., L ÉVY B., S UN F., YAN D.-M.,
L U L., YANG C.: On centroidal Voronoi tessellation—energy
smoothness and fast computation. ACM Trans. Graph. 28, 4
(2009), 1–17. 1, 6
[Mun93] M UNKRES J. R.: Elements of Algebraic Topology.
Westview Press, December 1993. 2
[PS93] P REPARATA F. P., S HAMOS M. I.: Computational Geometry: An Introduction (Monographs in Computer Science).
Springer, August 1993. 2
[Rus07] RUSSELL D.: Kinetic data structures in practice. PhD
thesis, Stanford University, Stanford, CA, USA, 2007. AdviserGuibas, Leonidas. 3
[San00] S ANTOS F.: A point set whose space of triangulations is
disconnected. J. Amer. Math. Soc 13, 3 (2000), 611–637. 9
[Sch07] S CHAAP W. E.: DTFE: the Delaunay Tessellation Field
Estimator. PhD thesis, University of Groningen, 2007. 1
[She96] S HEWCHUK J. R.: Triangle: Engineering a 2D quality
mesh generator and Delaunay triangulator. In Applied Computational Geometry: Towards Geometric Engineering, Lin M. C.,
Manocha D., (Eds.), vol. 1148 of Lecture Notes in Computer Science. Springer-Verlag, May 1996, pp. 203–222. From the First
ACM Workshop on Applied Computational Geometry. 1
[She05] S HEWCHUK R.: Star splaying: an algorithm for repairing delaunay triangulations and convex hulls. In SCG ’05: Proceedings of the twenty-first annual symposium on Computational
geometry (New York, NY, USA, 2005), ACM, pp. 237–246. 3
[TWAD09] T OURNOIS J., W ORMSER C., A LLIEZ P., D ESBRUN
M.: Interleaving Delaunay refinement and optimization for practical isotropic tetrahedron mesh generation. ACM Trans. Graph.
28, 3 (2009), 1–9. 1
[Wag36] WAGNER K.: Bemerkungen zum vierfarbenproblem.
Jber. Deutsch. Math.-Verein. 46 (1936), 26–32. 2
[YLL∗ 09] YAN D.-M., L ÉVY B., L IU Y., S UN F., WANG W.:
Isotropic remeshing with fast and exact computation of restricted
Voronoi diagram. Comput. Graph. Forum 28, 5 (2009), 1445–
1454. 1, 6, 7
[YWLL10] YAN D.-M., WANG W., L ÉVY B., L IU Y.: Efficient
computation of 3d clipped Voronoi diagram. In Geometric Modeling and Processing (GMP 2010) (2010), pp. 269–282. 1, 6,
7

[GS85] G UIBAS L., S TOLFI J.: Primitives for the manipulation
of general subdivisions and the computation of Voronoi. ACM
Trans. Graph. 4, 2 (1985), 74–123. 4
[Gui98] G UIBAS L. J.: Kinetic data structures: a state of the art
report. In WAFR ’98: Proceedings of the third workshop on the

c 2010 The Author(s)
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

