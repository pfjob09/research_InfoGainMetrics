DOI: 10.1111/j.1467-8659.2010.01712.x

COMPUTER GRAPHICS

forum

Volume 29 (2010), number 6 pp. 1981–1992

Binary Shading Using Appearance and Geometry
Bert Buchholz1 , Tamy Boubekeur1 , Doug DeCarlo2,3 and Marc Alexa2
1 Telecom

ParisTech – CNRS LTCI, Paris, France
2 TU Berlin, Germany
3 Rutgers University, USA

Abstract
In the style of binary shading, shape and illumination are depicted using two colours, typically black and white,
which form coherent lines and regions in the image. We formulate the problem of assigning colours in the rendered
image as an energy minimization, computed using graph cut on the image grid. The terms of this energy come
from two sources: appearance (shading) and geometry (depth and curvature). Our contributions are in the use of
geometric information in determining colours, and how this information is incorporated into a graph cut approach.
This optimization yields boundaries between black and white regions that tend towards being shorter and to run
along geometric features like creases. We show a range of results, and demonstrate that this approach produces
more coherent images than simpler approaches that make local decisions when assigning colours, or that do not
use geometry.
Keywords: non photorealistic rendering, binary shading, two-colors shading, black and white pictures, graph cut,
variational rendering
ACM CCS: I.3.3 [Computer Graphics]: Picture/Image Generation; I.3.7 [Computer Graphics]: ThreeDimensional Graphics and Realism: Color, shading, shadowing, and texture.

1. Introduction
Depiction of an object requires at least one foreground and
one background colour. Oftentimes it is desirable or necessary to restrict the depiction to just two colours; examples are
artistic black-and-white illustrations and images generated
from stencils. In technical terms, such images are commonly
referred to as bi-level or binary images. We consider the
problem of generating binary images by means of rendering
a 3D shape.
There are several ways of conveying tone using just two
colours, notably half-toning [FS76, Uli87], which can also
be used for the creation of artistic images [OH95, OH99]. We
are rather concerned with depictions that mostly assign black
colour to dark regions and white colour to bright regions of
the image, inspired by the popular black and white style of
several graphic novels, and recent graffiti art.
The black and white illustration by comic book artist Alex
Ross displayed in Figure 1 is a quintessential example of
c 2010 The Authors
Journal compilation c 2010 The Eurographics Association and
Blackwell Publishing Ltd. Published by Blackwell Publishing,
9600 Garsington Road, Oxford OX4 2DQ, UK and 350 Main
Street, Malden, MA 02148, USA.

this style. In analysing drawings such as these, we find that
the composition combines aspects of tone reproduction with
rendering of geometric features. As expected, large black or
white regions in the drawing correspond to low and high
levels of illumination, respectively. Furthermore, high local
contrast in illumination can override the absolute illumination levels. For instance, a coherent area which is darker
than surrounding regions might be depicted in black, even
when the illumination levels are all fairly high. Finer details are often depicted this way, such as the musculature on
the arms and torso in the image on the right. At the same
time, the particular boundaries between black and white are
selected to effectively convey the shape. These boundaries
might run along surface features such as ridges and valleys,
such as along the ridge of the nose or the boundary of the
brow. Or they might run along occluding contours (discontinuities in depth), such as on the cape. They also appear to
be as short as possible, given these constraints. Thin lines,
which are often haloed, may also be used to further delineate
parts of the shape. In many situations, including such lines is

1981

1982

B. Buchholz et al. / Binary Shading Using Appearance and Geometry

optimization problem that takes into account both appearance and geometry.

Figure 1: Hand drawn illustration of the Batman comic
(DC) by Alex Ross. Note that assignment of white and black
colour combines aspects of tone reproduction with rendering
of geometric features (see main text).

crucial – the bottom of the cape is drawn in white so it is easily separated from the black background, but the lines along
the occlusions on the bottom of the cape are what clearly
convey its wing-like nature. In other work, the effects of
highlights or shadows can be largely discounted when artists
make these decisions.

The optimization problem to be solved is essentially a
segmentation of the image into black and white pixels. As in
other recent approaches, we model the image as an undirected
graph and determine the solution using graph cut energy minimization [BVZ01]. Although the form of the function being
optimized is restricted, these restrictions allow for efficient
algorithms for its solution. (Note that because of its connection to the maximum flow problem, the typical terminology
used for parts of the graph are related to flows. Here, instead,
we use terms related to colours and pixels, and note the flow
terms parenthetically.) In this framework, there is a node
in the graph for each of the pixels in the image. There are
also two additional nodes in the graph (terminal nodes) that
represent the colour white (the source node) and the colour
black (the sink node). The edges in the graph are either connections between neighbouring pixels, connections from a
pixel to the white node, or connections from a pixel to the
black node. Each edge has a non-negative weight (capacity)
that signals the strength of the connection. Initially, edges
connect pixels to each of their neighbours, and to both the
white and black nodes. Any cut in the graph that separates
the white and black nodes (the source from the sink) is a possible depiction in black and white. An appropriate depiction
in a binary style is determined by computing the minimal
cut – the globally minimal set of edges (by summing their
weights) that when removed separates the white from the
black pixels. An overview of this approach is diagrammed in
Figure 2.
The main contributions of our work are the use of geometric information in this style of depiction, and further,
modelling the separate influence of appearance and geometry elegantly as weights on the two different types of edges
in the graph:
• appearance defines the weights of edges connecting pixels
to the white and black nodes, and specifies the tendency
for pixels to be black or white,

In terms of rendering, a pixel may be black or white because of the illumination of the shape, or because the contrast
between neighbouring pixels of different colour helps to better convey the geometric structure of the shape, regardless
of the shading. These goals are often contradictory, meaning
that taking into account only appearance or only geometry
is insufficient. Here, appearance refers to various terms that
are commonly used in realistic shading (Section 4), whereas
geometry refers to geometric properties of the shape relative
to screen coordinates (Section 5). Note that a binary image
could be generated from the appearance of the shape alone by
thresholding [KZ93, LL98, MG08, XK08] or from geometry
using only toon-shaders [Dec96, BTM06].

The primary challenge here is to assign weights to edges
so that the resulting minimal cut represents a coherent binary image. After an overview in Section 3, we describe
how weights are assigned using appearance (Section 4) and
geometry (Section 5).

An artist would need to make a range of decisions to arrive at a successful depiction using only black and white,
balancing the two contradictory goals. Thus, we model the
process of assigning black or white to the pixels as an

We show a range of results in Section 6. In particular,
we argue that with our approach it is possible to generate results that cannot be produced with simpler approaches
such as thresholding or using local decisions. Following this,

• geometry defines the weights of edges connecting neighbouring nodes in the image, and specifies the tendency
for pixels to be different colours because of geometric
structures.

c 2010 The Authors
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

B. Buchholz et al. / Binary Shading Using Appearance and Geometry

1983

Figure 2: Several sources of information about the appearance and geometry of the scene influence the edge weights in a graph
representing the image. The black and white assignment is computed by finding the minimum cut in the graph. Thus, the output
respects geometric features, and not only appearance.

we discuss the effects of using our method in animation in
Section 7.

2. Background and Previous Work
We view the generation of binary images as a segmentation
problem, that is assigning regions in the image to foreground
or background. Several instances of this problem have lately
been modelled as a max-flow/min-cut problem – the so-called
graph cut approach [BVZ01, BK04, RKB04].
Our goal is to create large regions of black and white
pixels that convey the essential features of the shape. Perhaps
the simplest such operation on images that works towards
this goal is thresholding. For most inputs, a global threshold
(see Lee et al. [LCP90] for an overview) will not preserve
important features, which is why thresholds are typically
adapted locally [KI86, YB89].
Recently, algorithms for the binarization of photographs
have been considered for the purpose of creating artistic or
abstract images. In particular, Mould and Grant [MG08] as
well as Xu and Kaplan [XK08] are considering the same
problem we do, albeit starting from an image and not a 3D
scene. In both approaches, desirable properties of a binarization are described using an energy function that is a weighted
sum of terms. This energy function is optimized to yield the
image. While the approaches differ in how the energies are
defined, their general strategy is similar: there are terms for
encouraging similarity to the input (in terms of absolute and
local contrasts), preservation of image features (i.e. as region boundaries), and smoothness of regions in the result.
Mould and Grant optimize the energy by casting it as a mincut problem, while Xu and Kaplan use simulated annealing
[KGV83].
A closely related problem to binary shading is the creation
of a papercutting [XKM07] or stencil [BRO08]. In this case,
regions of black and white are replaced with where material
is cut out, and where it is retained. However, there is an
additional constraint, which has been the main focus of the

research: ensuring the result is a single connected piece of
material. The binarization step is performed using simple
thresholding, and the pieces are connected with lines that
minimize particular cost measures.
Performing binarization in a 3D rendering pipeline has
also been studied in the context of real-time stylized shading. Spindler et al. [SDM06] combine a simple toon-shader
with haloed lines. Stylized forms of shading that are exaggerated or expressive [RBD06, VBGS08, VPB∗ 09] combine
enhancements for increasing contrast locally with adjustments of illumination based on the surface geometry. However, these decisions are made locally – each point is shaded
independently, and thresholded. As a consequence, boundaries between regions will not necessarily run along surface
features, and thus lack an element of coherence that our approach provides (see Section 6 for comparisons).
Artistic black and white rendering is quite well studied
for other styles than the one we are considering here. In
particular, drawing feature lines in black or white [DFRS03,
LMLH07, JDA07] results in informative renderings, which
might be combined with toon-shaders to produce a different
black and white rendering style [DR07].

3. Overview
We model the problem of assigning black or white to each
pixel in the image as a graph cut: each pixel is a node in a
graph; all pixels are connected to two nodes that separately
represent white and black (the terminal nodes – source and
sink). In addition, each node is connected to a set of nodes
representing neighbours in the image. We define the weights
(capacities) of the edges in this graph using the full data available from the 3D scene, namely appearance and geometric
surface properties. Finding a cut that disconnects the white
from the black node effectively assigns the pixel nodes to either black or white. Our goal is to find the cut with minimum
total edge weight, and we do this using existing optimization
methods [BVZ01].

c 2010 The Authors
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

1984

B. Buchholz et al. / Binary Shading Using Appearance and Geometry

pixels to white or black, based on the two connected
components: one contains the white node and one contains the black node.
The approximation of the minimum cut is fast enough to
enable the user to iteratively improve the result by adjusting parameters used to combine the various appearance and
geometry terms.
Figure 3: The effect of changing weights w on edges connecting pixels to white. Throughout these changes, b = 0.5.
Assume we wish to compute a binary image of m × n
pixels in size. Our shading technique proceeds in three steps
(summarized in Figure 2) as follows:
1 Rendering: Generate arrays Ai ∈ [0, 1]m×n capturing
different channels of the appearance of the object and
Gi ∈ [0, 1]m×n capturing geometric properties of the
shape relative to screen space. The arrays can be generated using any rendering technique. We choose raytracing for the flexibility it offers during experiments.
2 Graph construction: Edge weights from pixel nodes
are defined based on the values in the arrays Ai and Gi .
• Appearance – edges to white and black: For pixel (x, y)
in the image, let W [x, y] and B[x, y] be the weights of
edges that connect its node to the white and black nodes,
respectively. These are defined as the linear combination
of Wi [x, y] and Bi [x, y] (using wi and bi ), where i is the
index of the appearance component Ai
W [x, y] =

4. Appearance Contributions to the Graph
The appearance of an object depends on many material and
illumination parameters and it is beyond the scope of this paper to attempt a systematic exploration. We demonstrate our
approach to binary shading using simple appearance components.
Diffuse: The diffuse component is computed using a
Lambertian reflection model: its value is the cosine
of the angle between the surface normal and lighting
direction. It is independent of the viewpoint.
Specular: The specular component takes into account
the viewing position, the light source and the surface
normal. The Beckmann distribution is used to calculate
the specularity of a point.
Head-lamp: By placing a light at the camera, and using
a Lambertian model, we shade based on surface orientation with respect to the camera. This term helps separate
the object from the background by being darkest along
the silhouette (on smooth parts of the surface).

wi Wi [x, y],
i

B[x, y] =

(1)
bi Bi [x, y].

i

The derivation of Wi and Bi from Ai is explained in Section 4. The values wi and bi manage the relative influence
of these different appearance components (Figure 3).
• Geometry – edges to neighbours: Let N [x0 , y0 , x1 , y1 ]
be the weight of edges connecting pixel (x0 , y0 ) to
(x1 , y1 ). These weights are the product of a positive constant N˜ and factors Nj that are derived from the geometric
components Gj
N [x0 , y0 , x1 , y1 ] = N˜

Nj [x0 , y0 , x1 , y1 ].

(2)

j

The details of deriving Nj from Gj are discussed in
Section 5. N˜ controls the relative weight of these edges
compared to edges connected to white and black.
3 Minimal cut: Based on assignment of weights, a
minimal cut is approximated following Boykov et al.
[BVZ01]. This minimum cut defines an assignment of

Although our approach is not limited to this list of appearance attributes, we have found that it generates enough
variability for different binary rendering styles. We generate all values by ray-tracing and remap them onto the range
[0, 1] into arrays Ai [x, y]. We show the influence of different
appearance components (upper row) on the weighted binary
shading (lower row) in Figure 4.
The assignment of weights based on the Ai [x, y] alone
will only consider global features. We know from previous
work that we must consider local contrasts as well. Consequently, we model both global and local features explicitly.
For the global contribution of each component we simply
use Ai [x, y] and 1 − Ai [x, y] as contributions to the weights
Wi [x, y] and Bi [x, y], respectively.
For modelling the local contribution to the weights we
relate the values in Ai to spatial averages of Ai . Let the
average value Ai [x, y] be based on a neighbourhood in image
space, that is
2
2
− (x−u) +(y−v)
2

Ai [x, y] =

Ai [u, v]e

hi

(3)

u,v

c 2010 The Authors
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

B. Buchholz et al. / Binary Shading Using Appearance and Geometry

1985

Figure 5: Global (left) versus local (right) thresholding.

Figure 4: Top panel: Appearance arrays rendered from the
3D model. Bottom panel: Influence of these arrays on binary
shading; diffuse (left panel), diffuse and head-lamp (right
panel).
where hi is a parameter to control the size of the neighbourhood. For practical purposes we cut off the Gaussian weight
function by only considering pixels within a square window.
We consider the difference of appearance attributes and
their local averages
Ai [x, y] = Ai [x, y] − Ai [x, y].

(4)

The sign of Ai [x, y] determines whether pixel (x, y) is locally
brighter or darker, and thus whether it should tend towards
white or black. Thus, we weight white as max(0, Ai [x, y])
and black as max(0, −Ai [x, y]), thereby only increasing one
of the weights (the other is zero). These local terms are
combined with the global measure so that

Figure 6: Influence of edge weights. In these examples, the
maximum neighbour weight N˜ is modulated. Note that small
disconnected regions are successively connected when increasing weight. The left image has zero neighbour weight,
and is equivalent to thresholding.

5. Geometry Contribution to the Graph
Nodes in the graph are connected to their 8-neighbourhood.
These connections result in a tendency of neighbouring pixels to be assigned to the same terminal, despite potentially
varying bias towards white or black based on the terminal
weights. This yields the desired large black and white regions as well as smoothness of region boundaries.

Bi [x, y] = gi (1 − Ai [x, y]) + (1 − gi ) max(0, −Ai [x, y]),
(5)

We set the maximum neighbour edge weight to N˜ . Larger
values for N˜ lead to smoother and fewer regions in the final
result (Figure 6). This value is then modulated (i.e. multiplied
with factors between zero and one) to account for naturally
connected or disconnected regions in the image based on the
geometry. Here we consider as geometric features the depth
and normal variation (i.e. curvature) relative to screen space.

where the parameter gi ∈ [0, 1] controls the balance between
global and local features. Figure 5 shows the difference between thresholding globally and locally. Beyond this, we
ensure that the weights W and B are strictly positive by
adding a small fixed value, which prevents pixels from being
permanently bound to either white or black.

Occluding contours are important cues for shape understanding. However, the local geometry of the shape could
lead to similar appearance across contours. In such situations, the coherence enforced by the minimum cut would
enforce the same color for pixels across contours. Consequently, we modulate the neighbour edge weights with the

Wi [x, y] = gi Ai [x, y] + (1 − gi ) max(0, Ai [x, y]),

c 2010 The Authors
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

1986

B. Buchholz et al. / Binary Shading Using Appearance and Geometry

factor
N0 [x0 , y0 , x1 , y1 ] = e

−

(z[x0 ,y0 ]−z[x1 ,y1 ])2
d2

,

(6)

where z[x, y] is the distance to the camera for pixel (x, y),
and the parameter d encourages cuts to be along depth discontinuities as it approaches zero.
It is also important to convey important features on the
shape. Following the works of Lee et al. [LVJ05] and Gal
and Cohen-Or [GCO06] we understand features as high local
variation of curvature. Consequently, we assume that coherent regions on the shape have the property that the curvature
at a point is similar to an average over the curvatures in
a neighbourhood of the point. Such regions meet in points
whose curvatures greatly differ from the average curvature.
Rather than estimating curvatures on the shape, we follow
the idea of Judd et al. [JDA07] and consider the derivatives
of normals relative to screen space directions. Let n[x, y] be
the unit vector normal gathered from the 3D scene at pixel
(x, y). Then we assign a directional curvature measure to
pairs of neighbouring pixels [x0 , y0 ], [x1 , y1 ] as
κ[x0 , y0 , x1 , y1 ] = dS2 (n[x0 , y0 ], n[x1 , y1 ]),

Based on this measure, we modulate the weight of edges
by relating this curvature measure to the average curvature
1 y0 +y1
, 2 ]
measure in the neighbourhood [x, y] = [ x0 +x
2
2
2
− (x−u) +(y−v)
2

κ [x, y, u, v] e

c

(κ[x0 ,y0 ,x1 ,y1 ]−κ[x0 ,y0 ,x1 ,y1 ])2
k2

,

Nodes/pixels
Ray-tracing
Graph (fill)
Graph (cut)
Overall

2290
0.74
0.076
0.0022
0.82

17493
1.76
0.33
0.007
2.10

48272
2.50
0.74
0.011
3.25

Caesar model (774164 triangles)

where c controls the neighbourhood size. This yields the edge
weight modulation
−

Torus model (4096 triangles)

, (8)

[u,v]

N1 [x0 , y0 , x1 , y1 ] = e

Table 1: Timings (in s) for different numbers of triangles and filled
pixels.

(7)

where dS2 is the geodesic distance on the Gauss sphere.

κ[x0 , y0 , x1 , y1 ] =

Figure 7: The left-most image shows a segmentation with
neighbour weights equal to zero which results in mere thresholding. In the middle image the neighbour weights are set to
a constant value of N˜ = 0.5, whereas the right image has
the same base N˜ but uses the geometry terms to modulate
the neighbour weight.

Nodes/pixels
Ray-tracing
Graph (fill)
Graph (cut)
Overall

5404
1.81
0.18
0.0067
2.00

37030
2.40
0.60
0.019
3.02

118173
3.67
1.70
0.056
5.43

(9)

where k is a user parameter to attenuate the effect of feature
lines. The effect of considering curvature for attenuating edge
weights is demonstrated in Figure 7.

When rendering performance is of higher concern, GPU rasterization may be used instead.

6. Performance and Comparisons

In the remainder of this section, we compare our technique
to different families of binary image creation methods.

We have implemented our approach on the CPU, using the
graph cut code of Boykov and Kolmogorov [BK04]. Table 1
shows rendering times for a laptop with a 1.83 GHz Core
2 Duo over different input mesh sizes and different viewpoints. Note that the times are good enough for interactive
optimization of the results even on this platform.
The time required to fill the graph and generate the minimum cut, as well as the ray-tracing time, depend mostly
on the number of pixels covered by the object, while being
largely independent from the geometric complexity (i.e. by
using a kD-Tree). Note that we use ray-tracing as a simple
way to evaluate and explore various appearance properties.

6.1. Uniform image thresholding and local
binary shading
Our approach to binary shading achieves better results than
direct uniform image thresholding because it exploits more
information about the scene. In particular, the contributions and influence of appearance components and geometric
structure are taken into consideration explicitly. To visualize
the difference this makes we compare thresholding, a shaded
image as well as a smoothed version of the shaded image. For
the Ninja model, smoothing removes important geometric
features and the result without smoothing looks better, while

c 2010 The Authors
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

B. Buchholz et al. / Binary Shading Using Appearance and Geometry

1987

our approach can make more coherent decisions across significant parts of the image and shape, albeit at the price of
not running at interactive rates. Figure 9(a) shows results
with clearly visible coherent decisions, such as the shading
boundaries that run roughly along the ridges on the head
of the chameleon – these particular results can be compared directly to the black and white results from [VBGS08]
(Figure 9(b)), which lack this coherence.
Of course, these advantages come at the price of computation time, and even if our implementation can be significantly
improved using rasterization (Table 1), local binary shading
methods are still methods of choice for applications such as
games.

Figure 8: Comparison to thresholding (a) diffuse input, (b)
direct uniform thresholding, (c) uniform thresholding over
a Gaussian blurred input (10 × 10 kernel) and (d) our approach using the unblurred diffuse input for setting the terminal weights, but adding neighbour weights from geometry.
This effects homogeneous regions where geometry is smooth,
while still conveying features – without searching for a compromise among Gaussian kernels.

for the Caesar model the geometric details make smoothing
necessary. For a fair comparison, we use the same input for
setting the terminal weights in our approach (i.e. using only
global information from the diffuse component). While preserving features, we can still achieve homogeneity in smooth
regions, and the result automatically adapts to the necessary
amount of detail. Figure 8 shows the results.
Real-time binary shaders are often similarly based on
thresholding a mix of appearance properties (or other quantities such as normals), implemented on the GPU for performance reasons [VBGS08]. Although the context is different
from image thresholding, the results are necessarily the same,
as the assignment of pixel colour is based on thresholding
local information. Our use of global optimization here means

6.2. Variational image binarization
Although the advantage over simple image thresholding
might be rather obvious, it is important to point out that even
global variational techniques for thresholding are less convincing if they are based on a single shaded depiction of the
object. The reason is, again, that geometric structures might
be lost in the shaded image, and no thresholding technique
could ever revive them.
We have used our approach to implement an artistic image thresholding approach similar to the one of Mould and
Grant [MG08] (which is also based on graph cut). In particular, we derive neighbour weights from the input images
by comparing neighbouring pixels (for details see [MG08]).
We apply this thresholding implementation to a diffuse rendering and compare to the result of our approach, which
has been similarly limited to use only the diffuse channel
as an appearance attribute. Thus, both approaches start from
the same appearance information, but only our technique
uses geometric information for the modulation of neighbour
weights. Figure 10 shows the effect of the additional information, emphasizing surface structures that are hard to derive
from the diffuse shading.

Figure 9: (a) Our approach. Left and centre: Global terms only (gi = 1). Left: Head-lamp and specular terms, with the
head-lamp term giving the basic sink and source weights and the specular term only adding to the source. N˜ = 0.8, c = 0.07.
Centre: Diffuse term combined with haloed occluding contours. N˜ = 1.1, c = 0.1. Right: Mix between local and global diffuse
term, gi = 0.1, N˜ = 0.15, c = 0.07. When the local term is used, the terminal weights are smaller as compared to the global
term, thus N˜ is set lower. (b) Results obtained by Vergne et al. [VBGS08].
c 2010 The Authors
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

1988

B. Buchholz et al. / Binary Shading Using Appearance and Geometry

Figure 10: Comparison to an image-based binarization approach. All results are generated with the same input for terminal
weights, namely only global information from a diffuse shading, seen in (a) and (d). For the image-based approach ((b) and
(e)), neighbour weights are derived from the diffuse shading only (therefore being similar to what can be achieved with imagespace only approaches like Mould and Grant [MG08]), while we use geometric information in our approach ((c) and (f)). The
neighbour weights are visualized on the left side of each pair as the normalized sum of all neighbour weights of each node
(black meaning no edge weight at the corresponding pixel) while the segmentation result is displayed on the right side of each
pair.
On the other hand, using ‘invisible information’ suggests
our binary images differ more from realistic shading. One
might argue that the restriction to only two levels makes it
harder to convey both appearance and structure, and in our
approach we specifically opt for conveying structure rather
than appearance.

6.3. Line drawing
Finally, it is interesting to compare the results of binary shading to line drawings (Figure 11). Line drawings implicitly
define the regions that we try to assign constant colours;
conversely, binary shading implicitly defines feature lines
as boundaries between regions. In this sense, the two approaches are dual.
However, we feel that concavities can be communicated
more clearly using larger black regions (as can be seen in
the golf ball example in Figure 11). A combination of toon
shading and line art rendering [DR07] that includes suggestive contours and suggestive highlights produces results that
bear some similarity to our style.
As is obvious from the dual relationship, the fundamental
idea of optimizing the result in image space could also be
applied to line art rendering, potentially helping to connect

Figure 11: Depictions of a golf ball: line art rendering using suggestive contours [DFRS03] as well as a toon shader
combined with suggestive contours and suggestive highlights
[DR07], and our black and white results.

otherwise disconnected feature lines or help to fill empty
spaces – something artists report doing [CGL∗ 08]. Similarly,
global optimization could help combining different types of
lines [DR07].
7. Conclusions and Discussion
Our approach to binary shading offers a flexible framework
to control the effects of appearance and geometry on the
shape and placement of black and white regions in a binary
rendering. The geometry term controls how regions partition the surface, with boundaries that often run along surface

c 2010 The Authors
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

B. Buchholz et al. / Binary Shading Using Appearance and Geometry

1989

Figure 12: Binary shading applied to animation, showing every other frame of a sequence. Top row: regions appear and
disappear progressively, and coherently. Bottom row: failure case with tangential regions (circled in red), where the incoherence
is easily perceptible.

Figure 13: Top and bottom-left: Results using only the local diffuse term (gi = 0 for diffuse with neighbourhood size radius
of four pixels) combined with haloed occluding contours. The base neighbour weight is N˜ = 0.2 and modulated using our
curvature geometry term. The respective neighbourhood size control is c = 0.2 for the images on the top and c = 0.1 for the
image on the bottom-left. Right-bottom: Our method applied to RGBN data [TFFR06]; in this case, contours are drawn on top
using the provided discontinuity map, after median filtering and thresholding.
features. Changing the underlying rendering procedures allows for different styles.
User interaction might help in reaching visually pleasing
results with less effort. We have implemented a user interface

based on learning the component statistics of regions that
the user suggests to be white or black (similar in spirit and
design to Rother et al. [RKB04]). However, we find that the
control of style is comparable to adjusting the parameters
directly using sliders – at least for us. As we lack conclusive

c 2010 The Authors
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

1990

B. Buchholz et al. / Binary Shading Using Appearance and Geometry

information on the usability of this interface for other users,
we leave this for future work. A similar strategy based on
deriving probability distributions could be used for learning
a model from a large collection of artist data. However, no
such data set is available at present.
We have also conducted experiments on the degree of temporal coherence achieved by our technique, when applied to
each frame separately. The notion of temporal coherence
for styles such as binary shading is hard to define, since
jumps must happen on occasion – fading in and out is not
possible with just black and white. In typical situations, we
found that, apart from visibility changes, large regions do
not drastically change from one frame to the other. Thus, the
algorithm often gives acceptable results when performed on
a per-frame basis (Figure 12 (top panel)). This comes from
the fact that the energy implicitly defined on the graph is
strongly attached to object space quantities (from geometry
and appearance), while the particular screen-space local connectivity has a minor impact on the graph flow and perceived
region boundaries. However, this general observation fails on
regions which, during the animation, quickly become viewed
edge-on. In such cases, the screen-space projection effects
significant differences from frame-to-frame. This appears as
a sudden large change between black and white (Figure 12
(bottom panel)). Inspired by work such as [WXSC04], we
seek to improve temporal coherence through the analysis of
a spatiotemporal volume of images, where each image in the
stack represents a particular moment in time. In our case, the
graph can be constructed to correspond to this volume. We
experimented with different approaches for the weights and
the connectivity of the nodes between the frames, but none
delivered more coherent but still visually satisfactory results.
Temporal coherence of this style presents a significant challenge and is left for future work.
We feel that the idea of using different appearance attributes could be exploited further: mirror or glossy reflections would aid the depiction of plastic or metallic surfaces,
a style often used in manga drawings. More appearance and
geometry channels might also enable or improve the success
of learning attribute statistics from user data.
We have focused on generating binary images. Clearly, extending the approach towards more colours, a set of dithering
or hatching styles, or other sets of attributes is possible. The
main idea is to render appearance attributes into channels
and to compute the screen space properties from the different attributes, rather than combining the attributes before
rendering. This basic idea clearly has applications in a variety
of rendering techniques.
Acknowledgements
Figure 14: Input models used in Figures 9 and 13.

This work has been partially supported by an Institut Telecom’s Futur&Rupture Grant. D. DeCarlo acknowledges

c 2010 The Authors
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

B. Buchholz et al. / Binary Shading Using Appearance and Geometry

support from the Alexander von Humboldt Foundation and
the National Science Foundation under grant CCF-0541185.
References
[BK04] BOYKOV Y., KOLMOGOROV V.: An experimental comparison of min-cut/max-flow algorithms for energy minimization in vision. IEEE Transactions on PAMI 26, 9
(Sept. 2004), 1124–1137.
[BRO08] BRONSON J., RHEINGANS P., OLANO M.: Semiautomatic stencil creation through error minimization. In
Proc. NPAR (2008), pp. 31–37.
[BTM06] BARLA P., THOLLOT J., MARKOSIAN L.: X-toon: An
extended toon shader. In Proc. NPAR. D. DeCarlo and L.
Markosian (Eds.). ACM (2006), pp. 127–132.
[BVZ01] BOYKOV Y., VEKSLER O., ZABIH R.: Fast approximate energy minimization via graph cuts. IEEE Transactions on Pattern Analysis and Machine Intelligence 23, 11
(2001), 1222–1239.
[CGL*08] COLE F., GOLOVINSKIY A., LIMPAECHER A., BARROS
H. S., FINKELSTEIN A., FUNKHOUSER T., RUSINKIEWICZ S.:
Where do people draw lines? ACM Transactions on
Graphics 27, 3 (Aug. 2008), 88:1–88:11.
[Dec96] DECAUDIN P.: Cartoon-Looking Rendering of 3DScenes. Technical Report 2919, INRIA, 1996.
[DFRS03] DECARLO D., FINKELSTEIN A., RUSINKIEWICZ S.,
SANTELLA A.: Suggestive contours for conveying shape.
ACM Transactions on Graphics 22, 3 (2003), 848–855.
[DR07] DECARLO D., RUSINKIEWICZ S.: Highlight lines for
conveying shape. In Proc. NPAR (2007), pp. 63–70.
[FS76] FLOYD R. W., STEINBERG L.: An adaptive algorithm
for spatial greyscale. In Proceedings of the Society for
Information Display 17, 2 (1976), 75–77.
[GCO06] GAL R., COHEN-OR D.: Salient geometric features
for partial shape matching and similarity. ACM Transactions on Graphics 25, 1 (Jan. 2006), 130–150.
[JDA07] JUDD T., DURAND F., ADELSON E. H.: Apparent
ridges for line drawing. ACM Transactions on Graphics
26, 3 (2007), 19.1–19.7.
[KGV83] KIRKPATRICK S., GELATT C. D., VECCHI M. P.: Optimization by simulated annealing. Science 220 (1983),
671–680.
[KI86] KITTLER J., ILLINGWORTH J.: Minimum error thresholding. Pattern Recognition 19, 1 (1986), 41–47.

1991

[KZ93] KAMEL M., ZHAO A.: Extraction of binary character/graphics images from grayscale document images.
Graphical Models and Image Processing 55, 3 (May
1993), 203–217.
[LCP90] LEE S. U., CHUNG S. Y., PARK R. H.: A comparitive
performance study of several global thresholding techniques for segmentation. Computer Visualization, Graphics, and Image Processing 52 (1990), 171–190.
[LL98] LEUNG C. K., LAM F. K.: Maximum segmented image
information thresholding. GMIP 60, 1 (Jan. 1998), 57–76.
[LMLH07] LEE Y., MARKOSIAN L., LEE S., HUGHES J. F.: Line
drawings via abstracted shading. ACM Transactions on
Graphics 26, 3 (July 2007), 18:1–18:5.
[LVJ05] LEE C. H., VARSHNEY A., JACOBS D. W.: Mesh
saliency. ACM Transactions on Graphics 24, 3 (Aug.
2005), 659–666.
[MG08] MOULD D., GRANT K.: Stylized black and white images from photographs. In Proc. NPAR (2008), pp. 49–58.
[OH95] OSTROMOUKHOV V., HERSCH R. D.: Artistic screening.
In Proc. SIGGRAPH (1995), pp. 219–228.
[OH99] OSTROMOUKHOV V., HERSCH R. D.: Multi-color
and artistic dithering. In Proc. SIGGRAPH (1999), pp.
425–432.
[RBD06] RUSINKIEWICZ S., BURNS M., DECARLO D.: Exaggerated shading for depicting shape and detail. ACM Transactions on Graphics 25, 3 (July 2006), 1199–1205.
[RKB04] ROTHER C., KOLMOGOROV V., BLAKE A.: “Grabcut”:
Interactive foreground extraction using iterated graph
cuts. ACM Transactions on Graphics 23, 3 (2004), 309–
314.
[SDM06] SPINDLER M., D¨EE¸ HRING N. R. R., MASUCH M.: Enhanced cartoon and comic rendering. In Proceedings of
Eurographics Short Papers (2006), pp. 141–144.
[TFFR06] TOLER-FRANKLIN C., FINKELSTEIN A., RUSINKIEWICZ
S.: Illustration of complex real-world objects using images
with normals. In NPAR (2006), pp. 111–119.
[Uli87] ULICHNEY R.: Digital Halftoning. MIT Press, 1987.
[VBGS08] VERGNE R., BARLA P., GRANIER X., SCHLICK C.:
Apparent relief: A shape descriptor for stylized shading.
In Proc. NPAR (2008), ACM, pp. 23–29.
[VPB∗ 09] VERGNE R., PACANOWSKI R., BARLA P., GRANIER X.,
SCHLICK C.: Light warping for enhanced surface depiction.
ACM Transactions on Graphics 28, 3 (2009), 1–8.

c 2010 The Authors
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

1992

B. Buchholz et al. / Binary Shading Using Appearance and Geometry

[WXSC04] WANG J., XU Y., SHUM H.-Y., COHEN M. F.: Video
tooning. ACM Transactions on Graphics 23, 3 (2004),
574–583.
[XK08] XU J., KAPLAN C. S.: Artistic thresholding. In Proc.
NPAR (2008), pp. 39–47.

[XKM07] XU J., KAPLAN C. S., MI X.: Computer-generated
papercutting. In Pacific Graphics (2007), pp. 343–350.
[YB89] YANOWITZ S. D., BRUCKSTEIN A. M.: A new method
for image segmentation. Computer Visualization, Graphics, and Image Processing 46, 1 (1989), 82–95.

c 2010 The Authors
Journal compilation c 2010 The Eurographics Association and Blackwell Publishing Ltd.

