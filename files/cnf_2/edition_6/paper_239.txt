DOI: 10.1111/j.1467-8659.2010.01756.x

COMPUTER GRAPHICS

forum

Volume 29 (2010), number 8 pp. 2447–2455

Teaching Quaternions is not Complex
J. McDonald
DePaul University, Chicago, IL, USA
jmcdonald@cs.depaul.edu

Abstract
Quaternions are used in many fields of science and computing, but teaching them remains challenging. Students
can have a great deal of trouble understanding essentially what quaternions are and how they can represent
rotation matrices. In particular, the similarity transform qvq −1 which actually achieves rotation, can often be
baffling even after students have seen a full derivation. This paper outlines a constructive method for teaching
quaternions, which allows students to build intuition about what quaternions are, and why simple multiplication
is not adequate to represent a rotation. Through a set of examples, it demonstrates exactly how quaternions relate
to rotation matrices, what goes wrong when qv is naively used to rotate vectors, and how the similarity transform
fixes the problem.
Keywords: computer graphics, quaternions, rotation, education, teaching techniques
ACM CCS: G.0.0 [Mathematics of Computing]: General; I.3.5 [Computer Graphics]: Hierarchy and geometric
transformations; K.3.2 [Computers and Education]: Computer Science Education

1. Introduction
Since their initial introduction in 1866 by Hamilton [Ham86],
quaternions have found applications in many scientific fields
including quantum mechanics, electrodynamics, special relativity and computer graphics [dLe96, Hor97, Ima76, Sho85].
Their compact representation of concepts like rotation in
three dimensions, and the fact that we can conveniently build
smooth interpolation curves between quaternions, make them
an important technique for students in many areas of science
and computation.
In computer graphics they give us a powerful tool for representing the orientation of an object. Many graphics packages
use quaternions for interpolating orientations smoothly to
create animations of rotating objects. In addition, such packages often provide extensive scripting tools to allow users to
manipulate them programmatically [Sof09, Max09, May09].
Quaternions are also a key tool used in many types of interactive software to control camera movement [Bob03].
Quaternions, therefore, figure prominently in quite a few
courses, and teaching them is a challenge that every instructor
c 2010 The Author
Computer Graphics Forum c 2010 The Eurographics
Association and Blackwell Publishing Ltd. Published by
Blackwell Publishing, 9600 Garsington Road, Oxford OX4
2DQ, UK and 350 Main Street, Malden, MA 02148, USA.

for such a course has struggled with. Though their arithmetic
rules are quite simple and some tools exist to help students
visualize quaternions [HFK94], quaternions themselves are
often not truly understood until students have worked with
them for quite a while. There are several reasons for this:
1. The multiplication rules, while simple, can seem quite
abstract and arbitrary to first time students.
2. The method for using quaternions to rotate vectors in
3D is very different from matrix multiplication.
3. Exponential notation, while powerful, can be difficult
for graphics students to grasp even if they have had a
course covering Taylor series.
Part of the problem is that quaternions live in four dimensions. This is just one dimension more than students are
used to dealing with, and it is compelling, though difficult, to
try to visualize them. Compare this to the fact that students
rarely attempt to visualize 4 × 4 matrices as they live in a 16
dimensional space!

2447

2448

J. McDonald / Teaching Quaternions is not Complex

This paper presents a method for introducing students to
quaternions that maintains a firm connection to prior knowledge. It assumes that the students are adept in working with
rotation matrices, and uses them to motivate the discussion.
Finally, the method lays out a series of geometric examples
that bring students to discover why vector rotation requires a
similarity transform rather than a simple multiplication.

2. Teaching Quaternions
Though much work has gone into helping students visualize quaternions and quaternion curves in four dimensions
[HFK94], their initial presentation in most texts generally
follows the following pattern:
1. Review the basics of complex numbers.
2. Define three different roots of −1, called i, j, and k, and
define quaternions as a sum q = w + xi + yj + zk.
3. Present the rules for multiplication, conjugation, etc.
Many texts also point out the relationship between the
multiplication of i, j, and k, and cross products.
4. Demonstrate that if q = cos (θ/2) + sin (θ/2) a then
qvq −1 gives rotation of v by θ about the axis a.
This last step is accomplished by calculating the expression for qvq −1 through and equating the final result to the
arbitrary rotation matrix, for example, see [Ang03, Par07,
vVe04, War97, Wat92].
This is fine for the most adept students, especially if they
have had a course in abstract algebra, but many students in
graphics have a rough time with the fact that the only time
this is tied back to something they know is right at the end.
Further, the matrix that it is tied to is the most complicated
of rotation matrices, that is about an arbitrary axis. Many
students are left wondering why rotation requires such a
complicated operation when, with matrices, it is simply Mv.
Some texts have tried to tie quaternions to matrix multiplication earlier in the development. For example, several texts
note that a quaternion w + xi + yj + zk can be represented
by a matrix like
⎤
⎡
w −z y
x
⎥
⎢
⎢ z
w −x y ⎥
⎥
⎢
⎥.
⎢
⎥
⎢ −y x
w
z
⎦
⎣
−x

−y

−z

w

The main problem with jumping immediately to this representation is that, though helpful in allowing students to tie a
quaternion to a specific matrix, this matrix is not one of the
fundamental transformations that students are used to working with. In addition, there are several such matrices, which
all produce valid matrix representations of quaternions, and

there is no consensus for a canonical form; each text presents
a different matrix representation [Mar05, vVe04]. These correspond to different embeddings of the space of quaternions
in the space of 4 × 4 matrices. For more discussion on this,
see Appendix.
Others have suggested that replacing quaternions with rotors from the Geometric Algebra, can be a good approach
[DFM08], and it is true that rotors do solve some of the
problems that arise in the development of quaternions and
in how it is used to achieve rotation. However, to use this
method effectively, one would need to couch the entire graphics curriculum in terms of this algebra, something that many
programs are not willing to do, partially because of the fact
that it is not yet widely used in industry. One of the major
complaints, though, from the Geometric Algebra camp is
that quaternions are not “geometric” [DFM08]. This paper
addresses this by demonstrating, from the beginning of the
construction, the geometric meanings and effects of these
objects.
The technique presented in this paper makes the connection between matrices and quaternions earlier by defining
the primitive elements, i, j and k in terms of matrices, and
allows students to see clearly how rotations about coordinate
axes are built. These matrices are far simpler than their more
general cousin above, and students have a better opportunity
to build intuition. Further, we will see that it is possible to
visualize geometrically how quaternions work in the formula
qvq −1 . To help build student intuition from the ground up,
however, we begin the story with 2D rotations and complex
numbers. Other texts have done this as well, though they did
not carry the connection to rotation matrices nearly as far as
we will here [War97].
3. i is not Imaginary
By the time graphics students get to courses that cover quaternions, they will have encountered complex numbers, if only
in an algebra course covering the quadratic formula. The
problem is that very often the seed for confusion about quaternions is already laid in this foundation with the use of the
other name for complex numbers: “imaginary.” This name
implies that this object i doesn’t really exist, but that “we’ll
go ahead and define it as the square-root of −1 anyway.”
Many authors have written about the inappropriateness of
this name, and I would not go through a complete rundown of
why this is unfortunate. In laying the groundwork for computer graphics, however, we have a wonderful opportunity
to clear up this confusion since our students have a lot of
experience with matrices. Finding a meaning for i that students can relate to is often a matter of embedding the field
of complex numbers into some other set that has meaning
for students. In our case we are relating 2D rotations to the
unit complex numbers, and so, the logical choice is to use
matrices to build this connection.

c 2010 The Author
Computer Graphics Forum c 2010 The Eurographics Association and Blackwell Publishing Ltd.

2449

J. McDonald / Teaching Quaternions is not Complex

3.1. Giving meaning to i for graphics students
In the set of 2 × 2 matrices, we have a subset that act just
like the real numbers. These matrices are of the form
a

0

0

a

.

Students will quickly recognize these as scale matrices, but
it is worth pointing out that both addition and subtraction
work exactly the same for these matrices as for real numbers.
Thus, these matrices are a nice copy of the real numbers
sitting inside this larger set.
If the students then square the following matrix, they will
make a nice discovery:
0 −1
1

0

complex numbers to vectors? If we are only thinking about
complex numbers, we interpret a vector (or a point) in 2D
space as a complex number, and then we multiply using complex arithmetic. This will be a little unusual for the students
because they are thinking of matrices at this point, and thus
about
cos θ

− sin θ

x

sin θ

cos θ

y

The quickest students may recognize this matrix as a rotation
by 90◦ , but in any case, they will discover that its square is the
scale matrix
√ -1. Therefore, this matrix, in this new number
system is −1. For them, this matrix is the i that was so
mysteriously called imaginary. One can quickly work out
the usual properties for complex numbers from here, but
now they have a physical meaning to attach to i: Rotation by
90◦ .
It is worth pointing out here that this version of i assumes
that we are dealing with matrices that act on vectors on the
left. That is

x sin θ + y cos θ

(1)

but if we think about the vector as a complex number the
product becomes
cos θ

− sin θ

x

−y

sin θ

cos θ

y

x

=

.

x cos θ − y sin θ

=

x cos θ − y sin θ

−y cos θ + x sin θ

y cos θ + x sin θ

x cos θ − y sin θ

which is the same thing as (x cos θ − y sin θ ) +
i (y cos θ + x sin θ ). And so the product works out the same
either way.
The best students may not get confused by this, but usually
this discussion is best left to a later time, and simply appeal
to the fact that complex multiplication (in it usual notation)
gives the same answer as the rotation matrix. Students will
generally accept this here. It is important for instructors to
be aware of this issue, however, because one of the sticking
points of the quaternion construction is interpreting vectors
as a quaternion. It will be analogous to what we have done
in this section.

Mv
and thus the above matrix represents a right-handed rotation.
If the students are used to working with vM, then one can
create the same development by taking the transpose of our
i matrix.
Of course, the most immediate fact we get is that a unit
complex number, cos θ + i sin θ , is then equal to
cos θ

0

0

cos θ

+

0

− sin θ

sin θ

0

which when summed equals the standard matrix for rotation
that they know. This makes the connection between rotations
and unit complex numbers quite evident, and lays the foundation for quaternions. It is also important to point out at this
point the fact that the inverse of this matrix is its complex
conjugate cos θ − i sin θ , since negating the coefficient on i
simply flips the off-diagonal elements giving us the transpose
of the matrix.

4. Quaternions
When we pass to the discussion of quaternions, the question
becomes, can we build an analogue of the complex numbers
that will allow us to represent rotations in 3D? The development of quaternions can proceed in the same manner as
for complex numbers, by building roots of a diagonal matrix
of −1’s, but with several important differences that need to
be treated delicately. The most important thing is to keep
connecting new ideas to ones students already know. In the
case of graphics students: matrices.
4.1. 4 × 4 matrices and roots of −1

3.2. Applying unit complex numbers to vectors

When building roots of −1 for rotations in 3D there are two
possibilities, 3 × 3 matrices or 4 × 4 homogeneous matrices. Because the students have usually been working with
homogeneous matrices for a while, they may accept without question using them at this point. However, the brighter
students may question whether 3 × 3 matrices would not be
easier and more compact.

It is at this point that we run into a subtle point that will
carry over into quaternions. How are we going to apply these

One can eliminate this possibility quite easily by appealing to the determinant. The determinant of a 3 × 3 diagonal

c 2010 The Author
Computer Graphics Forum c 2010 The Eurographics Association and Blackwell Publishing Ltd.

2450

J. McDonald / Teaching Quaternions is not Complex

matrix with −1’s on the diagonal√is −1, and so a root for this
matrix would have determinant −1. Because our matrices
have real entries, their determinants are real, and of course,
there is no real number whose square is −1. If we use 4 × 4
matrices, we do not have this problem because the determinant would be +1. In any case, we know that homogeneous
matrices are needed in general for transformations in 3D, and
so it is not a big stretch for students to accept them here.
We begin the story of quaternions in the same way as
complex numbers, by considering a copy of the real numbers
in the collection of 4 × 4 matrices
⎡

a
⎢
⎢0
⎢
[a] = ⎢
⎢0
⎣
0

0

0

a

0

0

a

0

0

⎤

⎥
0⎥
⎥
⎥.
0⎥
⎦
a

0

(3)
i = j = k = −1
2

Such homogeneous matrices are a bit unusual, but the students can quickly grasp what they do, and can easily discover
that they obey the same rules as the real numbers under matrix
arithmetic. The sum and product of two diagonal matrices [a]
and [b] are [a + b] and [ab], respectively.
When trying to find a root of the diagonal matrix [−1], we
find that there is more than one possibility, unlike in 2D. In
fact, the following three matrices are all roots of [−1]:
0

0

0

⎢
⎢ 0 0 −1
⎢
i=⎢
⎢ 0 1 0
⎣
−1 0 0
⎡
0
0 1
⎢
⎢ 0
0 0
⎢
j =⎢
⎢ −1 0 0
⎣
0 −1 0
⎡
0 −1 0
⎢
⎢1 0
0
⎢
k=⎢
⎢0 0
0
⎣
0 0 −1

1

⎤

⎥
0⎥
⎥
⎥,
0⎥
⎦
0
⎤
0
⎥
1⎥
⎥
⎥,
0⎥
⎦
0
0

In any case, it is easy for the students to check that a simple
set of rules governs multiplication of these special matrices,
namely the usual quaternion product rules
ij = k, j k = i, ki = j

Students should note that these are not scale matrices for 3D,
though they are for 4D space. This is one place in which
the development differs from the 2D case. In 3D, they will
scale vectors, whose homogeneous coordinate w is 0, but
with points, they will multiply all four coordinates by a,
including w. When we return the point to its canonical form,
w = 1, the a divides out and we get exactly the same point
we started out with. This observation contains the beginning
of why qvq −1 is necessary for rotation.

⎡

Each of these matrices is analogous to the matrix i from complex numbers, and can be built by choosing pairs of columns
(coordinates) to reverse, and one of each pair to negate. These
are not all of the different roots of [−1], however, and in fact
the others correspond to negating one of the columns in each
pair in different ways. The other roots correspond to different ways to embed quaternions in the space of matrices. The
three in Equation (2) have been chosen so that they match
the corresponding rotation matrices most closely. Appendix
explores this more fully.

(2)

2

2

and the fact that the product rules for i, j and k follow the
same rules as the cross product. So, we define a quaternion
as the sum q = w + xi + yj + zk, where w, x, y and z are
real numbers. At this point, we can note what some other
texts do, that this quaternion corresponds to the matrix
⎤
⎡
w −z y
x
⎥
⎢
⎢ z
w −x y ⎥
⎥
⎢
(4)
q=⎢
⎥.
⎥
⎢ −y x
w
z
⎦
⎣
−x −y −z w
Though in this case, students get a clear view of exactly
where this matrix comes from.
Among the various properties of quaternions that are usually discussed at this point, it is worth tying conjugation back
to this matrix. Because q = w − xi − yj − zk, a modicum
of inspection will show the students that the corresponding
matrix is the transpose of q’s matrix. Because the inverse of
a rotation matrix is its transpose, this will help reinforce the
idea that for unit quaternions, which will represent rotations,
q −1 = q.
Note, that as described in Appendix, the specific form of
matrix 4 will depend on our choices of i, j and k. The specific
choices of these matrices here were made to strengthen the
analogy between i, j and k and rotation matrices. It is at this
point, though, that we begin to leave matrix notation and
work exclusively with quaternion notation. We will however
tie it back to matrices from time to time to reinforce intuition
when building rotations.

⎤

⎥
0⎥
⎥
⎥.
1⎥
⎦
0

4.2. Quaternions and rotations
Before we get to general quaternion multiplication, it is useful
to investigate rotations with some simple examples. This
not only gets the students used to the rules for quaternion

c 2010 The Author
Computer Graphics Forum c 2010 The Eurographics Association and Blackwell Publishing Ltd.

J. McDonald / Teaching Quaternions is not Complex

2451

multiplication, but it also allows the students to discover, on
their own, the rules that will govern quaternion rotations.
The first two examples investigate what happens with the
naive attempt to use the direct analogue of complex rotation
in Section 3.2, only this time in the context of quaternions.
Of course, the effort will fail, but it is in how it fails that
the students will build their intuition for the real formula:
q = cos (θ/2) + sin (θ/2) a and its application to a vector
qvq −1 .

Figure 1: The first rotation.

The first thing to note, is that just like we converted vectors in the 2D case to complex numbers, we will do the
same here. The only difference is that a quaternion has four
dimensions and a vector only 3. But appealing to homogeneous coordinates, and looking at the form of a quaternion q = w + xi + yj + zk = w + v gives us the answer.
We will let a vector be represented by a quaternion with
w = 0. So, 2, 3, 1 = 0 + 2i + 3j + k. With this method
of representing vectors as quaternions we are ready to give
rotation a try.
Figure 2: The second rotation.
4.2.1. Example 1, first attempt
For the first example, we begin with the simplest of quaternion rotations, and we apply it to a very simple vector. Consider a rotation of by an angle θ about the z-axis. If we follow
the pattern suggested to us by complex numbers, we might
take a guess at trying the quaternion
q = cos θ + sin θ 0, 0, 1 = cos θ + k sin θ.
The first vector we will attempt to rotate is a simple one as
well v = 1, 0, 0 , which when converted to a quaternion by
attaching w = 0, simply becomes i. Clearly, when rotated
by an angle of θ about the z-axis, this vector should be
transformed to cos θ, sin θ, 0 .
In the complex case, we could rotate a vector by simply
multiplying, so we try it here and see what we get.
q ∗ v = (cos θ + k sin θ ) ∗ i

for rotation gives us
q ∗ v = (cos θ + k sin θ ) ∗ (i + k)
= i cos θ + ki sin θ + k cos θ + k 2 sin θ
= i cos θ + j sin θ + k cos θ − sin θ
Here we have run into a problem! First, the result does
not correspond to a vector because the real part w is not
zero, it is − sin θ. Secondly, when we analyse the terms in
the result, we see that we did get part of the rotation that
we wanted, namely i cos θ + j sin θ. The problem is that we
got more than we wanted. The k component of v was transformed into k cos θ − sin θ, which is a rotation of k by −θ
towards the −w-axis! The effect of this in 3D is to shorten the
z-coordinate.

Just as expected. So for the moment quaternions are following exactly in the footsteps of the complex case, see Figure 1
where the case of θ = π/2 is shown.

The case of θ = π/2 is shown in Figure 2, where we
have broken out the two components of the vector v and have
shown the effect of the rotation on each. The diagram projects
4D space into 3D by choosing a direction in 3D for the waxis. This does not cause confusion in this case, since v, its
projections to the coordinate axes, and the rotation qi all have
w = 0. The only vector that has a non-zero w-coordinate is
qk = −w.

We continue exploring with this example, to see if this
naive approach continues to work, by rotating a more general vector, such as v = 1, 0, 1 , if the rotation is working
properly, we should get cos θ, sin θ, 1 . In this case, when
we convert v to a quaternion we get i + k, and so, the product

As the figure clearly shows, the quaternion multiplication
gave us an unexpected ‘extra’ rotation that we do not want.
We can even get a hint as to where this comes from if we look
back at the matrix for k, and build the matrix that corresponds
to cos θ + k sin θ as a quaternion

= i cos θ + ki sin θ
= i cos θ + j sin θ = cos θ, sin θ, 0

c 2010 The Author
Computer Graphics Forum c 2010 The Eurographics Association and Blackwell Publishing Ltd.

2452

J. McDonald / Teaching Quaternions is not Complex

⎡

cos θ
⎢
⎢ sin θ
⎢
cos θ + k sin θ = ⎢
⎢ 0
⎣
0

− sin θ

0

cos θ

0

0

cos θ

0

− sin θ

0

⎤

⎥
0 ⎥
⎥
⎥.
sin θ ⎥
⎦
cos θ

This matrix has two 2 × 2 sub-matrices. In the upper left,
we have precisely the terms for the rotation by θ about z.
In the lower right-hand corner, we have a rotation by −θ in
the z,w-plane, exactly as we are getting in the quaternion
multiplication, which is caused directly by the form of k as
a 4 × 4 root of -1. The next example will explore how to fix
this.

4.2.2. Example 2, fixing the extra rotation
The example in the last section shows students that simple
quaternion multiplication with a unit quaternion came close
to giving us the desired rotation, but also gave us an extra
unwanted factor. The examples in this section will allow
them to explore and find a way to fix this extra factor. The
key is in discovering what the order of the multiplication
does to the result, and also why the inverse is necessary. Of
course we are leading them to the true method of qvq −1 , but
these examples will show what the q −1 on the right is doing
geometrically.
We begin by looking at what happens when we reverse the
order of the multiplication. After all, quaternion multiplication is not commutative, just like matrix multiplication. As it
turns out, the result is quite instructive. We will use the same
example before that was causing problems
vq = (i + k) ∗ (cos θ + k sin θ )
= i cos θ + ik sin θ + k cos θ + k 2 sin θ
= i cos θ − j sin θ + k cos θ − sin θ.
Taking a close look at what this did, we see that it reversed the
desired rotation: i → i cos θ − j sin θ , but the extra rotation
stayed the same!
With this, many students can probably guess what we have
to do. Inverting q will now reverse both of the rotations.
vq −1 = (i + k) ∗ (cos θ − k sin θ )
= i cos θ − ik sin θ + k cos θ − k 2 sin θ
= i cos θ + j sin θ + k cos θ + sin θ.
Now, the extra rotation is by positive θ , and the desired
rotation is in the same direction as before.
So, we can fix the unwanted rotation that occurs in qv
by multiplying on the right by q −1 . The first multiplication
gives us the desired rotation plus an unwanted rotation, the
second rotates again by the desired rotation and then undoes
the unwanted one in the z,w-plane. The only problem is that

Figure 3: Tool for exploring quaternion rotation.
now we have rotated by 2θ, but this is easy to correct if we
change our quaternion to
q = cos

θ
2

+ k sin

θ
.
2

4.2.3. An interactive demonstration
It is far easier for students to grasp the geometric meaning of
the last example if they are provided with an interactive tool
that allows them to experiment with the different possibilities.
Figure 3 shows just such a tool, that allows students to vary
the angle of rotation for the quaternion in the above example.
This interactive demo uses a projection from 4D to 3D
much like the one in Figure 2. It provides an interactive means
of exploring
the
√
√spherical linear interpolation from q0 = 1 to
q1 = 2/2 + 2/2k, and allows students to choose some
of the different methods of multiplying the vector 1, 0, 0
by q. The last one in the list is, of course, the full rotation,
which is the only one in which the component of the vector
along the rotation axis does not move.
By trying out the different possibilities, and using the
animation controls provided, the user can explore the effect of both left and right multiplication by both q and
its inverse. This tool helps reinforce the geometric meaning of the rotation. The Windows executable for this
tool will be provided for use at the following address:
http://facweb.cdm.depaul.edu/mcdonald/quat.
4.3. Quaternion multiplication
Now that the students have built up some solid intuition
about quaternion multiplication and rotation, we can proceed

c 2010 The Author
Computer Graphics Forum c 2010 The Eurographics Association and Blackwell Publishing Ltd.

J. McDonald / Teaching Quaternions is not Complex

in the same manner as most texts in presenting some of
the other operations of quaternions. Of primary interest is
multiplication. The rules in Equation (2) can be used to derive
the general rule for the quaternion product. It is most elegant
in vector notation: by writing qn = wn + vn , where vn =
xn i + yn j + zn k for n = 0, 1, we can derive as usual,
q0 q1 = (w0 w1 −v0 • v1 ) + (w0 v1 + w1 v0 + v0 × v1 ).
(5)
It can be interesting for students to discuss the fact that the
product of two matrices like Equation (2) can be decomposed
into familiar operations with a highly geometric interpretation.
More importantly, this expression for multiplication allows
us to derive the final form of quaternion rotation. To rotate
a vector by an angle θ about an axis a, we use the quaternion q = cos (θ/2) + sin (θ/2) a, just like in the simpler case
above. We then apply it to the vector by the similarity transform qvq −1 . The first thing to note here is that q has the
same effect as we saw earlier with our simple example. It
rotates the part of v that is perpendicular to a correctly by
θ/2, but at the same time it rotates the component of v that is
parallel to a towards the −w axis. Therefore, multiplying on
the other side by q −1 finishes the desired rotation and undoes
the unwanted rotation of the component parallel to a.
Thus, we can derive the equality
qvq −1 = v⊥ cos θ + (v⊥ × a) sin θ + v ,
where v = (v • a) a, is the component of v parallel to a,
and v⊥ = v − (v • a) a, is the component perpendicular to
a. This derivation can proceed in the usual manner, using
Equation (2) with a good dose of trigonometry and linear
algebra, see [vVe04]. With the developments earlier, the students will have far better intuition to help them understand
this derivation.

5. Results and Conclusion
The techniques presented here provide an introductory path
to quaternions that reinforces their geometric nature, and allows students to visualize their functionality at each step.
By connecting quaternions to matrices early in the development, it is easier for graphics students to grasp the geometric
meaning of the operations. Also, breaking the derivation of
the quaternion rotation formula into a series of elementary
examples, students can gain a better understanding of how
this formula actually accomplishes its job.
The author has used this method for teaching quaternions
over the past several years and can report informally on the
effectiveness of this method. A formal study is, however, impractical, at this point due to small population sample sizes
in the courses that teach quaternions at this level, that is gen-

2453

erally fewer than 15 students. In spite of this, several results
have been readily apparent in teaching with this method:
1. Reinforcing the connection between matrices and the
complex i, and then carrying those ideas through to the
definitions of the root matrices in the 4 × 4 case, has
consistently reduced student resistance to the definition
of three roots of −1 in the quaternion case. In particular,
students seem far more willing to accept the notion that
3D rotations are based on three complex roots yielding
a four dimensional quaternion. Further, their reactions
and questions in class and their performance on the
homework strongly suggest that they now find the roots’
definitions much less arbitrary.
2. The fact that they can use the matrices to derive the
multiplication rules for i, j and k has made a great
difference in their ability to understand and apply these
rules. Again it makes the definitions less arbitrary, and
students have responded well.
3. The elementary examples in Section 4.2 serve three
very valuable functions. First they reinforce the bridge
between complex numbers and quaternions by demonstrating the connection between the rotation methods
in the two systems. Secondly, they give students some
very practical exercises in quaternion multiplication, in
which the product has a clear geometric meaning and a
clear purpose. Finally, they demonstrate the geometric
reason behind, and necessity for, the half-angle representation and the similarity transform qvq −1 . Having
taught this material over the last ten years, the author is
confident in stating that students both understand and
remember the rotation formula better using this method,
and they have been less likely to make mistakes in coding quaternion rotation.
In general, the benefits in student understanding outweigh
the fact that the method can take a bit longer to present during
lecture and in-class exercises than more traditional methods.
Quaternions are an extremely abstract representation that require care when presented to application-oriented graphics
students. The fact that these students are visually oriented
and have had a great deal of prior experience in matrix algebra provide an important opportunity when presenting these
subtle concepts, and we as teachers should exploit these opportunities as much as possible.
There are several directions that we can pursue in the future to extend the methods presented in this paper. Certainly,
there are opportunities for building better visualizations of
the operations outlined here. The interactive demo discussed
in Section 4.2.3 is a first step, but extending it to visualization of arbitrary quaternion rotation would be helpful.
Quaternions remain an important part of many fields, and the
techniques that use them are varied and often quite subtle. It
may be possible to find simple geometric insights into more

c 2010 The Author
Computer Graphics Forum c 2010 The Eurographics Association and Blackwell Publishing Ltd.

2454

J. McDonald / Teaching Quaternions is not Complex

subtle quaternion processes such as quaternion exponentiation and quaternion calculus that will help students more
readily accept them and use them effectively. Quaternion
splines are used in many graphics packages to smoothly interpolate 3D orientation, and these subtle concepts are essential
for understanding quaternion Bezier spines [Sho85].
Appendix
One of the confusing points of quaternions is that they have
several different possible representations in the matrix ring.
This is not something that needs to be discussed in an initial
introduction to quaternions, but it is something that may arise,
especially when inquisitive students begin exploring multiple
texts on the subject. This appendix gives a brief outline of
the different representations, and why we have chosen the
one in Equation (2).
For example, in [vVe04] and [Arv91] they use, as we have
done here,
⎤
⎡
w −z y
x
⎥
⎢
⎢ z
w −x y ⎥
⎥
⎢
(A1)
q=⎢
⎥.
⎢ −y x
w z⎥
⎦
⎣
−x

−y

−z

w

However, in [Mar05] and [Wei08] they use what seems to be
a bit more popular representation
⎤T
⎡
w −x −y −z
⎥
⎢
⎢ x w −z y ⎥
⎥
⎢
q=⎢
⎥ .
⎢y
z
w −x ⎥
⎦
⎣
z

−y

x

w

The transpose is because they are using post-matrix multiplication for vectors and points, that is vM. Notice that one of
the main differences here is the swapping of the x’s and z’s. It
is important to note however, that even with the coordinates
in the same place some representations will use a different
pattern of negative signs.
The specific form of the quaternion matrix is determined
by the choice of matrices for Equation (2), and as we mentioned in Section 4.1 a matrix representation begins with a
choice of three compatible roots of the 4 × 4 matrix [ − 1].
There are three factors that determine the form of the matrices for i, j and k. We build the root by starting with the
identity matrix:
1. In the identity matrix, we need to choose two of the
three coordinates x, y and z to swap, the remaining
coordinate will be swapped with w. This will suffice,
since to be a root of [ − 1], Rowm • Coln must equal −1
if n = m, or 0 otherwise. To keep these roots simple,
we do this by letting (m, i) and (i, m) be ±1 or vice

versa. We eliminate w from our consideration since it
does not correspond to a coordinate in the 3D space of
vectors. This choice determines an axis for a 3D rotation
and an ‘axis’ for the ‘extraneous’ rotation discussed
earlier. There are three ways to choose this pair, these
correspond to the three elements i, j and k.
2. In each of the two pairs of coordinates that were
swapped in (1), we choose one to negate. This chooses
a direction for each rotation. There are four ways to
choose these two negations.
3. Once we do this, we need to identify each of the three
roots with one of the primitive quaternion elements i, j
and k.
It is the third of these that causes the swap of x and z above,
and which also causes the most confusion when looking at
different embeddings. Because in these two matrices we have
two very different choices for i:
⎤
⎤
⎡
⎡
0 0 0 1
0 −1 0 0
⎥
⎥
⎢
⎢
⎢ 0 0 −1 0 ⎥
⎢1 0 0 0 ⎥
⎥
⎥
⎢
⎢
i1 = ⎢
⎥, i = ⎢
⎥.
⎢ 0 1 0 0 ⎥ 2 ⎢ 0 0 0 −1 ⎥
⎦
⎦
⎣
⎣
−1

0

0

0

0

0

1

0

These correspond to different choices in both steps 2 and 3.
Curiously, if we look at the upper left 3 × 3 submatrix, the
first seems to correspond to rotation about the x-axis, whereas
the second seems to correspond to rotation around the zaxis. How could both of them serve as i in a representation
of quaternions? The answer lies in looking more closely at
how quaternions are multiplied with vectors. We all know
that we interpret the vector as a quaternion with w = 0, but
when talking about multiplication and the matrix form of the
quaternion, many texts, for example [Arv91], multiply the
quaternion matrix and the vector
⎤⎡ ⎤
⎡
x
qw −qz qy
qx
⎥⎢ ⎥
⎢
⎢
⎥
⎢ qz
qw −qx qy ⎥ ⎢ y ⎥
⎥
⎢
⎥⎢ ⎥.
⎢
⎥⎢ z ⎥
⎢ −qy qx
q
q
w
z
⎦⎣ ⎦
⎣
−qx

−qy

−qz

qw

0

This, however, is incorrect, because the vector has been converted into a quaternion. So, it should be
⎡
⎤
⎤⎡
qw −qz qy
0 −z y x
qx
⎢
⎥
⎥⎢
⎢ qz
⎢
0 −x y ⎥
qw −qx qy ⎥
⎢
⎥
⎥⎢ z
⎢
⎥.
⎥⎢
⎢ −qy qx
⎥
⎢
⎥
−y
x
0
z
q
q
w
z ⎦⎣
⎣
⎦
−x −y −z 0
−qx −qy −qz qw
And so, when we swap coordinates in the representation for
the quaternion, they also get swapped in the quaternion form
of the vector! The first of these will only produce the desired

c 2010 The Author
Computer Graphics Forum c 2010 The Eurographics Association and Blackwell Publishing Ltd.

J. McDonald / Teaching Quaternions is not Complex

result if the representation in Equation (2) is used, where they
match the corresponding transform matrices.

2455

[Hor97] HORN B. K. P.: Closed-form solution of absolute
orientation using unit quaternions. Journal of the Optical
Society of America, 4 (1997), 629–642.

Note also that this is also the only way that qvq −1 makes
sense in matrix form. For if v is a column vector, then it is
a 4 × 1 matrix, and we cannot multiply a 4 × 1 matrix on
the right by a 4 × 4 matrix q −1 . This is not something we
necessarily want to point out to students at the beginning as
it is a subtle point, and the intuitive idea in most texts has
value for building intuition, but only if the matrices for i, j
and k match the desired rotations. This is precisely why we
chose the matrices we did in Equation (2).

[Max09] 3DS Max 2009. Software by Autodesk Corp.,
2009.

References

[May09] AUTODESK MAYA 2009. Software by Autodesk
Corp., 2009.

[Ang03] ANGEL E.: Interactive Computer Graphics, A TopDown Approach with OpenGL (3rd edition). AddisonWesley, New York, NY, 2003.

[Par07] PARENT R.: Computer Animation, Algorithms and
Techniques (2nd edition). Morgan Kaufmann, San Francisco, CA, 2007.

[Arv91] ARVO J.: Graphics Gems II. Academic Press, New
York, NY, 1991.

[Sho85] SHOEMAKE K.: Animating rotation with quaternion
curves. Computer Graphics, ACM SIGGRAPH, 19, 3
(1985), 245–254.

[Bob03] BOBICK N., Rotating Objects Using Quaternions.
Gamasutra, 2003. http://www.gamasutra.com/features/
19980703/quaternions_01.htm. Accessed 9 December
2008.
[dLe96] DE LEO S.: Quaternions and special relativity. Journal of Mathematical Physics, 37 (1996), 2955–2968.
[DFM08] DORST L., FONTIJNE D., MANN S.: Geometric Algebra for Computer Science, An Object Oriented Approach to Geometry. Morgan Kaufmann, San Francisco,
CA, 2008.

[Ima76] IMAEDA K.: A new formulation of classical electrodynamics. Il Nuovo Cimento, 32, 1 (1976), 138–162.
[Mar05] MARSH D.: Applied Geometry for Computer Graphics and CAD (2nd edition). Springer, London, 2005.

[Sof09] SOFTIMAGE XSI. Software by Autodesk Corp.,
2009.
[vVe04] VAN VERTH J. M.: Essential Mathematics for Games
and Interactive Applications. Morgan Kaufmann, San
Francisco, CA, 2004.
[War97] WARD J. P.: From complex numbers to quaternions.
Teaching Mathematics and its Applications, 16, 2 (1997),
79–84.

[Ham86] HAMILTON W. R.: Elements of Quaternions. Longmans, Green & Co., London, 1886.

[Wat92] WATT A., WATT M.: Advanced Animation and
Rendering Techniques. ACM Press, New York, NY,
1992.

[HFK94] HART J. C., FRANCIS G. K., KAUFFMAN L. H.: Visualizing quaternion rotation. ACM Transactions on Graphics,
13, 3 (1994), 256–276.

[Wei08] WEISSTEIN E. W.: Quaternion, MathWorld – A
Wolfram Web Resource, 2008. http://mathworld.wolfram.
com/Quaternion.html. Accessed 28 July 2010.

c 2010 The Author
Computer Graphics Forum c 2010 The Eurographics Association and Blackwell Publishing Ltd.

