DOI: 10.1111/j.1467-8659.2007.01096.x

COMPUTER GRAPHICS

forum

Volume 27 (2008), number 1 pp. 63–72

Point-Based Rendering of Non-Manifold Surfaces
Ron J. Balsys1 , K. G. Suffern1,2 and Huw Jones3
1 Faculty

of Business & Informatics, Central Queensland University, Rockhampton M. C., Qld. 4702, Australia
balsys@cqu.edu.au
2 Faculty of Information Technology, University of Technology Sydney, Broadway NSW 2007, Australia
3 Retired

Abstract
We are concerned with producing high-quality images of parametric and implicit surfaces, in particular those with
non-manifold features. We present a point-based technique for rendering implicit surfaces that uses octree spatial
subdivision with a natural interval exclusion test that guarantees that no parts of the surface are missed. This
allows us to render non-manifold implicit surfaces at speeds comparable to parametric surfaces. We also derive
criteria that guarantee complete pixel coverage of the surface. The point-based method allows for hidden surface
elimination using a z-buffer, and shadow casting using a shadow buffer. We illustrate the technique with a number
of surfaces, and discuss its advantages and disadvantages.
Keywords: point rendering, non-manifold surface, octrees, intervals
ACM CCS: I.3.3 [Computer Graphics] Display algorithms

[FvDF∗ 90]. However, the presence of singularities, and nonmanifold features can create difficulties. For example, regions
of arbitrarily large curvature may require large numbers of
polygons for accurate representation.

1. Introduction
There are two common methods for representing surfaces
mathematically in 3 . One is parametrically with equations
of the form
x = x(u, v), y = y(u, v), z = z(u, v),

Regular implicit surfaces can also be polygonised for rendering, but the process is not as straightforward as it is for
parametric surfaces. A large number of papers have been
published on the polygonisation of implicit surfaces. Relevant examples include: Wyvill et al. [WMW86], Lorenson
and Cline[LC87], Bloomenthal [BIo88], Schmidt [Smi90]
and Balsys and Suffern [BS01]. Thin sections, even if they
are regular parts of surfaces, can also be difficult to polygonise, as discussed in Balsys and Suffern [BS01]. The surfaces
in Figures 10 and 11 are in this category.

(1)

where u and v are the parameters and x, y and z is a point in
3
. The other is implicitly with a single equation of the form
f (x, y, z) = 0.

(2)

Surfaces can be regular, singular or non-manifold. Singular
surfaces include those that self intersect, and non-manifold
surfaces have regions where they are locally non-Euclidean,
for example, points of infinite curvature.
There are a number of techniques in common use for
rendering surfaces, the main ones being polygonisation,
scan line, ray tracing and point-based techniques. They all
have their advantages, disadvantages and limitations. Regular parametric surfaces are usually straightforward to polygonise to arbitrary precision, enabling them to be rendered
by standard polygon rendering techniques, see Foley et al.

Scan line techniques can render parametric and implicit
surfaces with singularities and non-manifold features, but
can be complex to program, see for example Foley et al.
[FvDF∗ 90] and Sederberg and Zundel [SZ89]. Ray casting
can also render parametric and implicit surfaces with singularities and non-manifold features, but the ray-surface intersection equation has to be solved for each surface rendered. Algebraic implicit surfaces can be ray traced if a robust

c 2007 The Authors
Journal compilation c 2007 The Eurographics Association and
Blackwell Publishing Ltd. Published by Blackwell Publishing,
9600 Garsington Road, Oxford OX4 2DQ, UK and 350 Main
Street, Malden, MA 02148, USA.

Submitted June 2004
Revised May 2006
Accepted January 2007

63

64

R. J. Balsys et al. / Point-Based Rendering of Non-Manifold Surfaces

polygon solver is available, Hanrahan [Han83], but for nonalgebraic surfaces it can be difficult to solve the ray-surface
intersection equation.
Point-based rendering techniques use points, or objects
such as discs, as rendering primitives. Levoy and Whitted
[LW85], and Rockwood [Roc87] are early papers on rendering parametric surfaces using points. Witkin and Heckbert
[WH94] used repulsive particles called floaters that can slide
over implicit surfaces for their modelling and rendering. The
repulsion creates uniform distributions of particles on the
surface which are rendered as discs.
De Figueiredo and Gomes [dFG96] used physically based
particles that obey Newtonian equations of motion to render differentiable implicit surfaces. They used points for
rendering, but did not produce shaded images. R¨osche
et al. [RRS97] used large discs to interactively render selfintersecting, singular, algebraic implicit surfaces with nonmanifold points (cusps).

report rendering speeds that allow for real time processing
and rendering of complex scenes.
Botsch et al. [BWK02] use octrees in their work on efficient rendering of point geometry. They report that their
algorithm is up to 10 times faster than previous methods and
can produce images in real time. Co et al. [CHJ03] develop
an algorithm for rendering iso-surfaces using a point-based
method. As their first step they generate points in the domain of the sample space. In the second step these points are
projected onto the iso-surface of interest in the domain. The
resulting point set is then rendering using a point splatting
approach.
Kalaiah and Varshney [KV03] reconstruct an image from
a sparse set of data points using statistical profiling. One feature of their work of interest here is that they do a principle
component analysis of the points in an octree node to approximate the points in the node by an ellipsoid. They report a
number of benefits to their approach.

Work by Tanaka et al. [TMNF∗ 00], [TSYK01] used particles that obey stochastic differential equations to render twice
differentiable implicit surfaces. The points are evenly distributed over the surfaces, and surface intersections can also
be rendered. These are nice features of their work, but the
method is complex, and would be a lot of work to implement
from scratch. Shaded images of single surfaces are produced
by splatting with discs.

Stolte et al. [SK98], [Sto03] uses interval arithmetic for
voxelising implicit surfaces as we do in this work. As well
as the use of interval methods with rectangular coordinates, Stolte discusses how interval spherical, cylindrical and
helical coordinate systems can be used and demonstrates
these with examples. The voxel space has a resolution of
5123 , and the painter’s algorithm is used in rendering the
voxels.

Pfister et al. [PZvBG00] introduced the concept of the
surface element or surfel, and developed algorithms to render geometries based on these elements, and used surface
splatting for visibility testing. Similarly, Rusinkiewicz and
Levoy [RL00] developed an algorithm that speeds up rendering of point-based objects based on splatting. Zwicker et al.
[ZPvBG01] used the elliptical weighted average filter, EWA,
of Heckbert [Hec89], to avoid aliasing problems with textures
when using splatting to render point clouds.

The simplest technique for rendering implicit surfaces is
‘brute force’ where the points are generated in a three dimensional (3D) volume. Algorithms that improve on this must
more tightly fit the volume of space that points are generated
in to the space the surface is contained within. At the limit
we would expect to be able to generate a point on the surface each time we generate a point. This is the situation for
parametric surfaces and so we seek algorithms whose render
times are comparable to equivalent parametric surfaces. We
discuss this in Sections 2.

More recently, Botsch et al. [BSK04] based the lighting
of a splat on a linearly varying normal field and showed
the resulting Phong splats are superior to that of previous
work. They give a simple and effective method of constructing the Phong splats for given input data sets. Zwicker et al.
[ZRBD∗ 04] use homogenous coordinate systems to produce
perspective accurate splats which provides high-image quality with anisotropic texture filtering. They also present an extension of their rendering primitive to deal with sharp edges
and corners, such as those that occur in non-manifold surfaces.
Wand et al. [WFPH∗ 01] discuss a randomised z buffer
point-based algorithm for rendering triangular meshes of
complex scenes. They use a probability density proportional
to the projected area of the triangular mesh to choose the
points to render. They also use splatting and an octree data
structure to store and classify triangles for rendering. They

To develop a better algorithm for rendering implicit surfaces, we developed a sampling technique that uses octree
space subdivision with a natural interval exclusion test which
is used to minimise the octree subdivision process. We used a
similar technique for polygonising implicit surfaces in Balsys
and Suffern [BS01]. With this technique, we can render implicit surfaces with times comparable to parametric surfaces.
Our intention is to produce high quality images where their is
no possibility that portions of the surface are either rendered
incorrectly or are missed and the use of interval techniques
is ideal for this purpose.
We also present criteria for the complete pixel coverage
of implicit surfaces in Section 2. This algorithm is the major contribution of this paper. We give examples of surfaces successfully rendered and discuss problems with the
method in Section 3. Other than stopping the rendering, our

c 2007 The Authors
Journal compilation c 2007 The Eurographics Association and Blackwell Publishing Ltd.

R. J. Balsys et al. / Point-Based Rendering of Non-Manifold Surfaces

65

technique runs automatically with no user intervention. It
also has the following advantages over previous point-based
rendering algorithms for implicit surfaces; it’s simple, in
the case of implicit surfaces much faster, it will not miss
small surface sections in the plotting volume, and if rendered
to the required plot depth will have no rendering artifacts
(holes).

2. Point Rendering of Implicit Surfaces Using an Octree
and Interval Arithmetic
We briefly consider parametric surface rendering for completeness, and for timing comparisons with implicit surfaces,
even though we make no contribution in this area. For parametric surfaces we generate points in the two dimensional
(2D) parameter space (u, v) which gives 3D points, (x, y, z),
on the surface through Equation (1). The point’s z value is
checked against the current z buffer value, and if the point has
a smaller z, in viewing coordinates, it’s shaded using Phong
shading. A shadow buffer can be incorporated so that the
surfaces can self shadow. The technique uses rand() from
stdlib.h to generate random (u, v) coordinates within specified ranges. Figure 1(a) shows a test sphere partially rendered
with this technique. This is only partially rendered because
there are gaps between the points. This allows Figure 1(a)
to show the stochastic distribution of points on the surface.
We don’t use more sophisticated sampling techniques such
as n rooks or multi-jittered, Chui et al. [CWS94], because we
need to generate many millions of points on the fly to fully
render the surfaces.
Figure 1(b) shows the parametrically defined sphere fully
rendered with no visible holes in the image, a task that requires approximately five million points on the surface for a
600 × 600 pixel image. Admittedly, this is oversampled, but
in this work we are mainly concerned with comparing the
comparative timings of point generation methods for rendering implicit and parametrically defined surfaces. This oversampling is evident in Figure 1(a) around the poles of the
parametrically defined sphere where there is clearly a greater
point density. This is a consequence of generating points
evenly over [0, 2π ]. It would be far more efficient to divide
this domain into subdomains and generate different numbers
of points in these domains based on an analysis of the trigonometric functions used to generate the surface. However this
was not done in this work as we were not concerned with the
time it takes to generate the surface but we where concerned
with the correctness (accuracy) and quality of the resultant
images.
From our previous work on the polygonal rendering of implicit surfaces, Balsys and Suffern [BS01] and Suffern and
Balsys [SB03], we know that octree-based volume decomposition with a subdivision criteria based on an interval exclusion test, converges to nodes clustered about the implicit
surfaces. We tested this approach by rendering a point within

Figure 1: Distribution of points on the surface of a sphere
generated on a randomely distribute (u, v) points, (a) partial
random, (b) rendered with five million (u, v) points. Front
surface colour of sphere is Cyan, inside sphere surface colour
is magenta.

the plotting nodes of an octree recursively subdivided using
an interval exclusion test.
An interval I = [a, b], a ≤ b is a set of real numbers defined
by [a, b] = {x | a ≤ x ≤ b}. The natural interval extension of
a rational function f (x1 , . . . xn ) : m → denoted by F(X 1 , . . .
X n ), is obtained by replacing the xi ’s by the intervals X i and
evaluating the resultant interval expressions according to the
rules of interval arithmetic. See Moore [Moo96], Suffern and
Fackerell [SF91] and Synder [Syn92]. We have implemented
interval arithmetic as a C + + class. Algorithm 1 details the
octree subdivision where the natural interval extension of the
function is used in the subdivision process.

c 2007 The Authors
Journal compilation c 2007 The Eurographics Association and Blackwell Publishing Ltd.

66

R. J. Balsys et al. / Point-Based Rendering of Non-Manifold Surfaces

Algorithm 1. Algorithm for adaptive subdivision of a viewing volume with a natural interval extension test.

void SubDivide (short depth, double x, double y,
double z, double d) {
for (int j = 0; j <= 1; j + +)
for (int k = 0; k <= 1; k + +)
for (int l = 0; l <= 1; l + +)
CreateNodes(depth + 1, x + j ∗ d/2, y + k ∗ d/2,
z + l ∗ d/2, d/2);
}
void CreateNodes (short depth, double x, double y,
double z, double d){
//intervaltest
int surfacePresent = SurfacePresent ( f , x, y, z, d);
if (!surfacePresent)
; //Discard current node if surface is not present
else {
if (depth == plotDepth) {
if (surfacePresent) {
RenderPointsInNode( f , x, y, z, d);
}
}
else
Subdivide(depth, x, y, z, d);
}
}
}

The main reason for using intervals in this context comes from
the property that the natural interval extension of a function
provides bounds on the variation of the function. The bounds
may not be very tight, but the values of the function f are
guaranteed not to be outside of this interval. For this reason
interval analysis will correctly determine that the function
may be present in the cases shown in Figure 2, where point
sampling will fail. Our interval arithmetic package includes
infinite intervals, to extend the range of functions that we can
render. Infinite intervals result from the division of intervals
where 0 ∈ [c, d] for the interval [a, b]/[c, d]. Hansen [Han80]
gives formulae for infinite intervals and the computer implementation of infinite intervals is given in Ratschek and Rokne
[RR88].
The function SurfacePresent(f , x, y, z, d) is used to test
whether the surface may be in an octree node, see Algorithm
2. This function calculates the natural interval extension of
the surface function and determines whether 0 is an element
of the interval. If it is, the surface may be present in the node.
Algorithm 2. Algorithm that implements a natural interval
extension test. The in interval( ) method tests if the real number 0.0 is in the natural interval extension of the function and

Figure 2: Intersection of surface projections with plotting
node faces that point sampling will miss. (a) Highly curved
contour segment crosses an edge twice, (b) small closed surface does not cross any edges, (c) two contour segments cross
edges of plotting node, (d) long thin contours in adjacent plotting nodes.

if so returns a non zero integer.
int SurfacePresent(functPtr IntFunct, double x,
double y, double z, double d) {
interval A(x − d/2, x + d/2), B(y − d/2, y + d/2),
C(z − d/2, z + d/2);
interval intervalTemp = (∗IntFunct)(A, B, C);
return (intervalTemp.in {interval(0.0));
}
Algorithm 1 subdivides the view volume (defined as an axis
aligned cube of 3D space) into eight subnodes, and checks
each node to see if it may contain part of the surface. If this is
true, the node is recursively subdivided. The recursion proceeds to a fixed maximum depth in the octree, which we call
the plotDepth. At the plot depth, a point is generated within
the node and we call such nodes plotting nodes. The coordinate of this point is used in the shading algorithm to render the
surface. Although the interval test in SurfacePresent() does
not guarantee that the surface exists in any plotting node, it
does guarantee that any node of the octree that is discarded
does not contain the surface.
A single parameter controls the time it takes to generate
the surface: the plot depth. We can estimate the plot depth
required for complete coverage of the surface as follows for
orthographic projection. If d is the length of an edge of the
view volume, the size of a plotting node at the plot depth
is d/2plotDepth , where the undivided view volume is at depth
zero. Allowing for all viewing angles, a plotting node will
be projected onto the view plane in a square no larger than

c 2007 The Authors
Journal compilation c 2007 The Eurographics Association and Blackwell Publishing Ltd.

R. J. Balsys et al. / Point-Based Rendering of Non-Manifold Surfaces

67

s
one pixel
projection of bounding
box of plotting node

s

Figure 3: Figure showing subdivisions on the face of the
search cube.

1e+06
100000

Time

10000
1000
100
10
1000

10000

100000

1e+06

1e+07

Number of Points on Surface
Implicit, Random

Parametric, Random

Octree, Random

Figure 4: Comparison of timing for implicit, octree interval
implicit and parametric surface rendering of a sphere.

√
3d/2 plot Depth . Let the size of a (square) pixel be s. This can
be calculated from the height h, and width w, of the image
plane and the number of pixels horizontally and vertically. For
complete coverage there must always be at least one complete plotting cell outline projected inside each pixel, (see
Figure 3). This occurs when the size of the plotting
node at the plot depth is at least half the pixel width so
that
√
3d
s
(3)
≤ ,
2 plot Depth
2
and hence
plotDepth ≥

√
ln (2 3d/s)
.
ln 2

(4)

For example, a unit cube orthographically projected onto a
1
unit window of 512 × 512 pixels (d = 1, s = 512
), would
require a plot depth of at least 11. Complete coverage may
be obtained at lesser recursion depths so (4) gives the worst
case result.
Figure 4 is a composite graph that shows the timings for
randomly choosing points to generate implicit and parametric
spheres on the one graph. As expected, the brute force implicit

Figure 5: Two views of the Ram’s horn surface (5).

approach takes far longer than the parametric approach to
render the sphere. On the graph we also have timing using
our octree with interval exclusion to generate points in the
plotting node of the octree. This approach performs closer
to the parametric timings as the plot depth increases. This
is to be expected as the plotting nodes in the octree converge to
the surface when adaptively subdividing using intervals. The
timings given all apply to a spherical surface and are used to
give a relative indication of performance of the parametric and
implicit methods. These results generally are also indicative
of the relative timings we achieved for other surfaces. Nonmanifold implicit surfaces are also readily rendered by this
method.

3. Surface Examples
We present here a number of example surfaces to illustrate the
utility of our point-based rendering algorithms, in particularly
for surfaces with non-manifold features. Figure 5 shows the
shell or ram’s horn surface [Nor01] given by the parametric

c 2007 The Authors
Journal compilation c 2007 The Eurographics Association and Blackwell Publishing Ltd.

68

R. J. Balsys et al. / Point-Based Rendering of Non-Manifold Surfaces

Figure 6: Dini’s surface (6).

Figure 7: The Super-toroid surface (7) with a = b = c = 5,
d = 20, ε1 = 2 and ε2 = 3.

equations
v
cos(nv)(1 + cos(u)) + c cos(nv),
2π
v
y = a 1−
sin(nv) (1 + cos(u)) + c sin(nv),
2π
v
v
(5)
+a 1−
sin(u),
z =b
2π
2π
x = a 1−

with a = 0.2, b = 1, c = 0.1, n = 2, 0 ≤ u ≤ 2π and 0 ≤ v ≤
2π. Dini’s surface [35] in Figure 6 has parametric form

implicit surface is Boy’s Surface [Ape96] in Figure 8 whose
implicit equation is
f (x, y, z) = 64(1 − z)3 z 3 − 48(1 − z 2 )z 2 (3x 2 + 3y 2 + 2z 2 )
+ 12(1 − z)z(27(x 2 + y 2 )2 − 24z 2 (x 2 + y 2 )
√
+ 36 2yz(y 2 − 3x 2 ) + 4z 2 )
+ (9x 2 + 9y 2 − 2z 2 )(−81(x 2 + y 2 )2
√
− 72z 2 (x 2 + y 2 ) + 108 2x z(x 2 − 3y 2 ) + 4z 2 ).

x = acos(u)sin(v),
y = asin(u)sin(v),
z = cos(v) + log tan (v/2) + 0.2u.

(6)

(8)

As with the tip of the horn of Figure 5, the thin pointed stem
is difficult to render as these are non-manifold features, but
point-based rendering copes well with these elegant structures. For Dini’s surface, the parameter limits are (0 < u ≤
4π) and (0 < v ≤ 2).

Both of these surfaces contain non-manifold features that
make them difficult to render with other methods. The charges
surface

An example of an implicit surface that is difficult to polygonise is the super-toroid [Tau94]. This surface can be represented implicitly by
f (x, y, z) =
+

2
2

x
a
z
c

2
1

,

y
+
b

2
2

2
2

d

2
1

−√
a 2 + b2
(7)

and is C0 when ε1 = 2 and ε 2 = 3 due to the existence of
ridges. Figure 7 shows an example of this surface with a =
b = c = 5, d = 20, ε1 = 2 and ε2 = 3. Another interesting

i=n

f (x, y, z) =
i=1

qi
− c,
(x − xi )2 + (y − yi )2 + (z − z i )2
(9)

is an example of an implicit surface that is non-algebraic.
This represents the equi-potential surface of n point charges
qi with centres (xi , yi , zi ) and is shown in Figure 9 for 60
charges. Such surfaces are difficult to ray trace because the
ray-intersections equation is non-polynomial. The charges
surface also requires the use of infinite intervals, for a discussion of infinite intervals see Suffern and Fackerell [SF91].
Implicit surfaces with very thin sections or singularities can
create problems for point-based methods. Consider the spiky

c 2007 The Authors
Journal compilation c 2007 The Eurographics Association and Blackwell Publishing Ltd.

R. J. Balsys et al. / Point-Based Rendering of Non-Manifold Surfaces

69

Figure 9: Point charges surface (9) with 60 point charges,
based on the buckyball, C60 , rendered at depth 9 with 20
points in each plotting node.

Figure 8: (a) Boy’s surface (8) and (b) cut by front of plotting
volume to reveal inner structure.
surface
f (x, y, z) = x 2n + y 2n + z 2n − x n y n − x n z n − y n z n ,
(10)
as shown in Figure 10 for n = 4. The thickness of the spikes
go to zero as their distance from the centre becomes infinite.
As we stop subdividing our octree at a given plot depth and
we use interval subdivision, an error in rendering the surface
occurs. The interval method guarantees that we will not reject
a plotting node that may contain a surface section, but we
may have a number of plotting nodes that do not actually
contain a surface section in the plotting node. This results
in pixels being erroneously rendered with the surface colour
even though the surface does not lie in the plotting node
represented by that pixel. As a result, thin sections of diameter
less than the plot depth will be rendered as thin tubes. The
situation is worse for Steiner’s Roman surface,

Figure 10: Spiky surface (10).

(11)

with a minimum radius, the fact that they are singularities has
confused the technique so that it has rendered them with an
increasing radius as they approach the surface. This gives the
misleading impression that the Steiner’s Roman surface exists outside a sphere of radius 1 centred on the origin, which
it does not.

which has three (infinitely thin) double lines along the coordinate axes, see Figure 11(a). Our technique renders these

We can improve the appearance by increasing the plot
depth, as Figure 11(b) shows, but this does not solve the

x 2 y 2 + y 2 z 2 + x 2 z 2 + x yz = 0,

c 2007 The Authors
Journal compilation c 2007 The Eurographics Association and Blackwell Publishing Ltd.

70

R. J. Balsys et al. / Point-Based Rendering of Non-Manifold Surfaces

r
r

cover the rendered surfaces. With this technique, we can
render implicit surfaces with timings comparable to those
of parametric surfaces. This algorithm is similar to that
presented in Stolte et al. [SK98] and Stolte [Sto03], but
includes an analysis of the plot depth required for complete surface coverage.
rendered various non-manifold parametric and implicit
surfaces that show the wide applicability of the techniques.
discussed problems and limitations of point based techniques when rendering implicitly defined surfaces.

Our algorithms can successfully render many nonmanifold surfaces, and are much simpler than scan-line techniques. Their simplicity lies in the fact that they only require
surface interval function evaluations to generate the points,
and gradient expressions to shade them. They can also render surfaces that can’t be rendered with traditional ray casting
techniques due to difficulties in solving the ray-surface intersection equation. Recently however, Stolte [Sto05] discussed
a recursive space subdivision based ray casting technique that
renders implicit surfaces without having to do any ray-surface
intersections. His algorithm does this by subdividing space
into voxels that are as small as floating-point arithmetic allows. This is an important technique for ray tracing arbitrary
implicit surfaces.
5. Future Work

Figure 11: Steiner’s Roman surface (11) with (a) plot
depth = 9 and (b) plot depth = 10, showing how the tubes
converge to lines.
problem. Sederberg and Zundal [SZ89] successfully rendered
the singular lines with a scan-line algorithm but it’s much
more complicated than our point-based algorithm. Balsys and
Suffern [BS05] successfully rendered the singular lines with
degenerate polygons, but again, our polygonisation algorithm
is much more complicated, than the point-based technique
used here.
4. Summary
In this work we have

r

presented a new point-based technique that renders nonmanifold implicit surfaces. This technique uses an octree
spatial subdivision based on the natural interval extension of the surface’s function, and thereby only generates points close to the surface. The use of interval techniques also guarantees that no parts of the surfaces are
missed in the view volume. Furthermore, we have derived a condition that guarantees that points completely

A number of useful techniques can be incorporated into the
current techniques. For example, the modulation of surface
colour by functions has a number of applications. This can
be used to visualize intrinsic properties of surfaces, such as
curvature as contour lines or gradient maps. In addition, the
contour lines that result from intersecting a surface with the
level surfaces of a scalar field can be used to help visualise
the surface (see Balsys and Suffern [BS04]).
It would be useful to incorporate the use of probability
distributions and splatting as given in Wand et al. [WFPH∗ 01]
as this would be fairly straightforward. There are many other
surfaces to explore with the octree technique that can’t be
successfully polygonised or ray traced.
It should be possible to improve the accuracy of the rendering by doing some simple tests on the plotting node to
determine whether the surface is likely to be in the node.
Elimination of plotting nodes that do not contain surface
elements should improve the rendering of surfaces such as
Steiner’s Roman surface. We are also considering if the use
of stochastic sampling in the plotting node can be used for
anti-aliasing the colour of pixels on the surface.
Acknowledgment
We would like to thank the referees whose comments have
significantly improved the presentation of this paper. We are

c 2007 The Authors
Journal compilation c 2007 The Eurographics Association and Blackwell Publishing Ltd.

R. J. Balsys et al. / Point-Based Rendering of Non-Manifold Surfaces

particularly grateful to one of the referees for pointing out
Stolte’s work to us.
References
[APe96] APERY F.: The Boy Surface. Advances in Mathematics, 61,: 185–266. 1996.
[BS01] BALSYS, R. J., SUFFERN, K. G.: Visualisation of
implicit surfaces, Computers and Graphics, 25,:89–107.
2001.
[BS04] BALSYS, R. J., SUFFERN K. G.: Point Based
Rendering of Non-Manifold Surfaces With Contours.
ACM/GRAPHITE2004, 15–19 June 2004, Singapore. 7–
14, 2004.
[BS05] BALSYS, R. J., SUFFERN K. G.: Adaptive Polygonisation of Non-Manifold Implicit Surfaces. International
Conference on Computer Graphics, Imaging and Vision,
26–29 July 2005, Beijing. 257–263, 2005.

71

[Hec89] HECKBERT P.: Fundamentals of texture mapping
and image warping. Masters thesis, University of California at Berkeley, Dept. of Elec. Eng. and Computer Science,
1989.
[KV09] KALAIAH, A., VARSHNEY A.: Statistical Point Geometry Eurographics Symposium on Geometrical Processing, 371–378. 2003.
[LW85] LEVOY, M., WHITTED T.: The Use of Points as
a Display Primitive, Technical Report 85-022, Computer Science Department, University of North Carolina
at Chapel Hill, http://graphics.stanford.edu/papers/points.
1985.
[LC87] LORENSON, W. E., CLINE.H. E.: Marching cubes: a
high resolution 3D surface construction algorithm. Computer Graphics, 21,:163–170. 1987.
[Moo96] MOORE R. E.: Interval analysis. Prentice-Hall,
Englewood Cliffs, NJ.1996.

[BIo88] BLOOMENTHAL J.: Polygonization of implicit surfaces. Computer Aided Geometric Design, 5,:341–355.
1988.

[Nor01] NORDSTRAND T.: 2001. http://www.uib.no/
People/nfytn/mathgal.htm, visited December 2001.

[BSK04] BOTSCH, M., SPERNAT, M., KOBBELT L.: Phong
Splatting. Eurographics Symposium on Point-Based
Graphics, 25–32.2004.

[PZvBG00] PfiSTER, H., ZWICKER, M., VAN BAAR,
J., GROSS M.: Surfels: Surface elements as rendering primitives. In SIGGRAPH 2000, 335–342.
2000.

[BWK02] BOTSCH, M., WIRATANAYA, A., KOBBELT L.:
Efficient High Quality Rendering of Point Sampled Geometry. Proceedings 13th Eurographics Workshop on Rendering, 53–64. 2002.

[RR88] RATSCHEK, H., ROKNE J.: New Computer Methods
for Global Optimisation. Ellis Horwood, London. 1988.

[CWS94] CHIU K., WANG C., SHIRLEY P.: Multi-Jittered
Sampling, In Heckbert P. S. Ed., Graphics Gems IV, AP
Professional, Boston, MA, 138–148. 1994.
[CHJ03] CO, C. S., HAMANN, B., JOY K. I.: Iso-splatting:
A point-based Alternative to Isosurface Visualization. In
Proceedings of the 11th Pacific Conference on Computer
Graphics and Applications, 325–334.2003.
[dFG96] DE fiGUEIREDO L. H. GOMES J.: Sampling implicit
surfaces with physically-based particle systems, Computers and Graphics, 20,:3:365–375. 1996.
[FvDF∗ 90] FOLEY, J. D., VAN DAM, A., FEINER, S. K.,
HUGHES J. F.: Computer graphics: principles and practice (2 ed.), Addison-Wesley, Reading, MA. 1990.
[Han83] HANRAHAN P.: Ray tracing algebraic surfaces,
Computer Graphics (SIGGRAPH 83 Conference Proceedings), 83–90. 1983.
[Han80] HANSEN E. R.: Global optimisation using interval analysis N∼ the multidimensional case.Numerische
Mathematik, 34,:247–270. 1980.

[Roc87] ROCKWOOD A.: A Generalised Scanning Technique for Display of Parametrically Defined Surfaces,
IEEE Computer Graphics and Applications, 7,:8:15–26.
1987.
¨
[RRS97] ROSCHE
, A., RUHLE, M., SAUPE D.: Interactive
Visualization of Implicit Surfaces with Singularities, Computer Graphics Forum, 16,:5:295–306. 1997.
[RL00] RUSINKIEWICZ, S., LEVOY M.: QSplat: A multiresolution point rendering system for large meshes. In SIGGRAPH 2000, 343–352. 2000.
[Smi90] SCHMIDT M. F. W.: Cutting cubes - visualizing
implicit surfaces by adaptive polygonization.The Visual
Computer, 10,:101–115. 1990.
[SZ89] SEDERBURG, T. W., ZUNDEL A. K.: Scan Line Display of Algebraic Surfaces. Computer Graphics (SIGGRAPH 89 Conference Proceedings),147–156. 1989.
[SK98] STOLTE, N., KAUFMAN A.: Parallel Spatial Enumeration of Implicit Surfaces using Interval Arithmetic
for Octree Generation and its direct Visualization. In Implicit Surfaces’98, 81–87, Seattle, 1998.

c 2007 The Authors
Journal compilation c 2007 The Eurographics Association and Blackwell Publishing Ltd.

72

R. J. Balsys et al. / Point-Based Rendering of Non-Manifold Surfaces

[Sto03] STOLTE N.: Graphics using Implicit Surfaces with
Interval Arithmetic based Recursive Voxelization Proceedings Computer Graphics and Imaging, Honolulu,
USA. 200–205. 2003.
[Sto05] STOLTE N.: Arbitrary 3D Resolution Discrete Ray
Tracing of Implicit Surfaces, DGCI 2005, LNCS 3429,
414–426, 2005.
[SF91] SUFFERN, K. G., FACKERELL E. D.: Interval methods in computer graphics. Computers and Graphics,
15,:331–40. 1991.
[SB03] SUFFERN, K. G. BALSYS R. J.: Rendering the Intersections of implicit surfaces, IEEE Computer Graphics
and Applications, 23,:5:70–77. 2003.

[TSYK01] TANAKA, S., SHIBATA, A., YAMAMOTO, H.,
KOTSURU H.: Generalized Stochastic Sampling Method
for Visualization and Investigating of Implicit Surfaces,
Proc. Eurographics 2001, Computer Graphics Forum,
20,:3:359–367. 2001.
[Tau94] TAUBIN G.: Rasterizing algebraic curves and surfaces. IEEE Computer Graphics and Applications, 14,:14–
23. 1994.
[WFPH∗ 01] WAND, M., FISCHER, M., PETER, I., HEIDE,
F. M., STRAβ ER W.: In SIGGRAPH 2001, 361–370.
2001.

[Syn92] SYNDER J. M.: Generative modelling for computer
graphics and CAD, Boston, Academic Press, 1992.

[WH94] WITKIN A. P., HECKBIRD P. S.: Using Particles to Sample and Control Implicit Surfaces. Proceedings of SIGGRAPH 94. In Computer Graphics Proceedings, Annual Conference Series, 269–277.
1994.

[WMW86] WYVILL, C. G., MCPHEETERS, C., WYVILL B.:
Data structures for soft objects. The Visual Computer,
2,:227–234. 1986.

[ZPvBG01] ZWICKER, M., PfiSTER, H., VAN BAAR, J.,
GROSS M.: Surface splatting In SIGGRAPH 2001, 371–
378. 2001.

[TMNF∗ 00] TANAKA S., MORISAKI A., NAKATA S,
FUKUDA Y., YAMAMOTO H.: Sampling implicit surfaces
based on stochastic differential equations with converging
constraint, Computers & Graphics, 24,:419–431. 2000.

[ZRBD∗ 04] ZWICKER, M., RASANEN, J., BOTSCH, M.,
DACHSBACHER, C., PAULY M.: Perspective Accurate
Splatting. Eurographics Symposium on Point-Based
Graphics, 247–254. 2004.

c 2007 The Authors
Journal compilation c 2007 The Eurographics Association and Blackwell Publishing Ltd.

