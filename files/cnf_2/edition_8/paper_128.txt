Eurographics Symposium on Rendering 2008
Steve Marschner and Michael Wimmer
(Guest Editors)

Volume 27 (2008), Number 4

Rendering Trees with Indirect Lighting in Real Time
K. Boulanger1,2 , K. Bouatouch1 and S. Pattanaik2
1 INRIA,
2 University

University of Rennes I, France
of Central Florida, United States

Abstract
High quality lighting is one of the challenges for interactive tree rendering. To this end, this paper presents a
lighting model allowing real-time rendering of trees with convincing indirect lighting. Rather than defining an
empirical model to mimic lighting of real trees, we work at a lower level by modeling the spatial distribution
of leaves and by assigning them probabilistic properties. We focus mainly on precise low-frequency lighting that
our eyes are more sensitive to and we add high-frequency details afterwards. The resulting model is efficient and
simple to implement on a GPU.
Categories and Subject Descriptors (according to ACM CCS): I.3.7 [Computer Graphics]: Color, shading, shadowing, and texture

1. Introduction
Real-time rendering of trees has already been studied due to
its frequent use in video games, flight simulators, ecosystem
simulations, etc. However, the computational complexity of
tree rendering has always been an obstacle. Geometric complexity is due to the large number of leaves in a tree. Lighting complexity is due to the numerous interactions between
leaves and branches, and to the simulation of reflectance
properties of leaves that are constituted of multiple layers.
Multiple approaches have been used to increase the rendering speed, thereby reducing the overall quality of the rendered images.
Our goal is to design a lighting model that allows realtime rendering of trees with convincing indirect lighting
(Figure 1). Rendering trees with direct lighting only is subject to undesirable noise, which can be drastically reduced
by adding indirect lighting, whose computation is an expensive process. Our contribution consists in proposing approximations that minimally affect the overall quality of low frequency lighting but increase the rendering speed. High frequency details are added afterwards to enhance realism.
Rather than defining a model to mimic lighting of real
trees, we work at a lower level by modeling the spatial distribution of leaves and by assigning them probabilistic properties. Using this model, we derive simple equations that are
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.
Published by Blackwell Publishing, 9600 Garsington Road, Oxford OX4 2DQ, UK and
350 Main Street, Malden, MA 02148, USA.

(a)

(b)

Figure 1: (a) Photograph of a tree. (b) Rendering with our
method.
efficient to be processed on graphics hardware and that allow
real-time rendering.
2. Previous Work
Visualizing trees using computer graphics requires several
steps: modeling, rendering and lighting. Our paper focuses
mainly on their accurate lighting.
L-systems [PL90] are often employed to model trees. We
use this method in this paper.
Rendering trees can be performed several ways: using geometry for highly detailed trees or image-based methods

1190

K. Boulanger & K. Bouatouch & S. Pattanaik / Rendering Trees with Indirect Lighting in Real Time

such as sets of billboards [Jak00], images with multi-layer
Z-buffers [Max96] or volume images [DN04]. We use geometry to perform high quality rendering, although our method
can be extended to other approaches.
Three lighting methods have been proposed: offline high
quality radiosity-based lighting [CAB98,SSBD03], precomputed radiance transfer (PRT) [SKS02, NRH03, WWD∗ 05]
and real-time low quality lighting. Note that PRT techniques
allow interactive rendering but at the cost of high preprocessing times. Among the real-time techniques, ambient occlusion has been used to approximate the attenuation of light
within trees. It can be pre-computed or generated on the fly
but with coarse empirical models: a simple function of the
leaf depth [Ree83], a more complex function of position in a
sphere enclosing the tree [HPAD06]. Another approach uses
the aggregation of leaf normals to smooth the overall distribution of leaf orientation for the purpose of lighting with
reduced noise [LBD07, PL06]. However, these real-time approaches are ad hoc and do not handle indirect lighting.
We are not concerned with detailed rendering of individual leaves, as done in [WWD∗ 05, HKW07] where a
physically-based translucency model is used for leaves. Instead, our approach considers the overall tree, proposing a
solution that simulates interactions between leaves. Even
though our method models trees similarly to [Pat93] in
which foliage is considered as a participating medium where
particles represent leaves, it differs in the sense that it handles indirect lighting and operates in real-time.

smax(P,ω5)
Tree envelope
for leaf P
NP
smax(P,ω4)
smax(P,ω0)
ω5 ω0
Ω ω4
P ω1
ω3 ω2
smax(P,ω1)
smax(P,ω3)

smax(P,ω5)
V5
smax(P,ω4)

NP
ω5 ω0

V4
Ω ω4

ω3 Pω2
smax(P,ω3)

ω1

V3

smax(P,ω0)
V0
V1
smax(P,ω1)

V2

smax(P,ω2)

smax(P,ω2)

(a)

(b)

Figure 2: (a) Parametrization of the envelope of a tree from
a leaf’s center point P. (b) Equivalent set of volumes V j .
how we evaluate these distances from the input tree mesh
in Section 6. The set of sample directions ω j is the same
for all leaves rather than being relative to the leaf orientations. This allows the evaluation of incoming radiance per
tree rather than per leaf, and is more efficient at runtime.
With each direction ω j is associated a sub-volume V j of the
volume V , with a solid angle Ω j , having a pyramidal shape
starting from P and directed by ω j (Figure 2(b)). We have
dir
V = ∑Nj=1
V j . The number of leaves present in each volume
V j is
Nleaves j = ρV j = ρ

4π smax (P, ω j )
Ndir
3

3

(1)

3.2. Lighting environment
3. Overview
Our method considers the leaves of a tree as spatially distributed and oriented according to probabilistic laws, these
leaves being contained in an envelope defined by a discrete function of direction. It allows the computation of one
bounce diffuse inter-reflection within trees, direct sun and
sky lighting, while fully exploiting the performances of the
GPU to achieve interactivity. In this section, we detail the
construction of the envelope and then present the considered lighting environment. Next, we present the materials
assigned to the leaves as well as a function giving the attenuation of light through leaf layers.
3.1. Constructing the tree envelope
We model a tree with an envelope of volume V that encloses its leaves. This envelope contains a set of uniformly
distributed leaves with a density ρ, a constant area A and
uniformly distributed normals. Rather than defining the envelope shape once for the whole tree, we use a leaf specific approximation of this envelope by assigning distances
smax (P, ω j ) between each leaf’s center point P and the envelope for Ndir sample directions ω j (Figure 2(a)) uniformly
distributed over the unit sphere Ω. Interpolating these distances defines the shape of the whole envelope. We detail

Trees are most of the time present outdoors. We then define
the lighting environment as follows: an environment light
source (sky and reflection of sky light off the ground) and
a directional light source (sun). Our approach is totally dynamic: radiance from the sky and the sun, and position of the
sun can be modified as desired.
Given a leaf centered at P, its front side normal is NP .
ωo is the normalized vector from the leaf to the viewer.
Lo (P, ωo ) is the radiance reaching the viewer and is equal
to the following sum (Figure 3):
Lo (P, ωo ) = Losky (P, ωo ) + Losun (P, ωo ) + Loind (P, ωo )

(2)

Losky is the outgoing radiance due to direct lighting from the
sky and the reflection of skylight off the ground (Section
4.1). Losun is the outgoing radiance due to direct sun lighting
(Section 4.2). Finally, Loind is the outgoing radiance due to
indirect lighting from the sun, after one bounce off neighbor
leaves (Section 5).
3.3. Leaf materials
When computing low-frequency lighting, we assume the
leaf reflectance properties to be Lambertian for both sides.
Therefore, we perform lighting computations for each leaf
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

K. Boulanger & K. Bouatouch & S. Pattanaik / Rendering Trees with Indirect Lighting in Real Time

1191

Figure 3: The different lighting components. From left to right: direct lighting due to the sky and the light reflected off the
ground (Losky ), direct lighting due to the sun (Losun ), indirect lighting due to the sun (Loind ) and sum of all components (Lo ).
rather than each pixel as we consider the variation of irradiance along a leaf as negligible. We then introduce variations
along the leaf using a texture that modulates the reflectance.
We make use of a normal map to model a per-pixel specular
component and a thickness map to modulate the transmitted light. We consider four parameters for the leaf material
model: the reflectance ρr f of the front face (the same side as
NP ), the reflectance ρrb of the back face, the transmittance
ρt f for light entering the front face, and the transmittance ρtb
for light entering the back face. When observing real trees,
their front face is often reflective with a darker color, their
back face being matte with a lighter color.
The outgoing radiance Lo in direction ωo from the current
leaf centered at P, due to the incident radiance L, is given by
Ndir

Lo (P, ωo ) =

∑

j=1 Ω j

F(P, ωo , ω)L(P, ω) dω

(3)

L(P, ω j ) at point P as follows:
A
ρ
(5)
2
This function is similar to the one derived by Max [Max95]
for a beam of light traversing a medium containing a high
number of spherical particles. However, we replace the
spherical particles with randomly oriented leaves of area A
with uniform distribution of orientation. Therefore our optical thickness τ uses the average projected area A/2 rather
than A.
L(P, ω j ) = e−τ.smax (P,ω j ) L(ω j )

with τ =

4. Direct Lighting
In this section, we present how to adapt the traditional rendering equations expressing direct lighting to our probabilistic representation of trees.
4.1. Light from the sky and the ground

F(P, ωo , ω) =
 ρr
ρt
f

M(NP · ω) + b M(−NP · ω)
π
π
 ρt f M(NP · ω) + ρrb M(−NP · ω)
π
π

if NP · ωo ≥ 0
if NP · ωo < 0

(4)

F being the cosine-weighted BSDF and M(x) = max(x, 0).
3.4. Attenuation function
Leaves of a tree are occluded by other leaves. This results in
an attenuated outgoing radiance from each leaf. These shadows can be characterized as high frequency since they are
sharp and numerous inside a tree. We use a function that
gives the average attenuation of light to smooth the high frequency shadows, which reduces the aliasing effects for distant trees. Our hypothesis of leaf uniform spatial distribution
results in an attenuation function that only depends on the
thickness smax (P, ω j ) of the leaf layer between a lit point P
and the light source of radiance L(ω j ) in direction ω j . Based
on the density of leaves ρ and the area of each leaf A, we can
find the optical thickness τ and define the attenuated radiance
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

We propose a simple method to compute direct lighting of
leaves due to the sky light and its reflection off the ground.
Rather than using an ambient occlusion approach, which
considers the radiance from the environment constant for
every direction, we handle variable radiance from a lowfrequency environment. We make use of numerical integration as follows:
Losky (P, ωo ) ≈

4π
Ndir

Ndir

∑ F(P, ωo, ω j ) e−τ.s

max (P,ω j )

Lsky (ω j )

j=1

(6)
Lsky (ω j ) is the radiance from the sky in direction ω j . This radiance is attenuated by the function of Equation 5. Lsky (ω j )
has to be determined for each direction ω j of each tree. To
this end, we average the pixels belonging to the solid angle
Ω j from a low resolution sky environment map. This process
is fast and has to be performed only when lighting conditions
change. We compute the radiance for the lower hemisphere
(reflection of the sky light off the ground) by modulating
the radiance of the higher hemisphere with the average reflectance of the ground. By modulating the incoming radiance, it is possible to simulate the occlusions by other trees,

1192

K. Boulanger & K. Bouatouch & S. Pattanaik / Rendering Trees with Indirect Lighting in Real Time

by buildings or any other large objects. Animating the leaves
by rotating their normal is made possible by the cosine terms
present in the F function that smooth the variations of outgoing radiance.
4.2. Directional Light Source
We define the sun as a directional light source of direction
ωl and irradiance Esun . In most real-time rendering methods, the outgoing radiance relies only on the angle between
the light incidence direction and the normal to the lit surface.
The visibility term can be handled using different shadowing
techniques. However, we are interested in the overall shadowing of the tree that can be seen at any distance without
aliasing. We then use the attenuation function of Section 3.4
to estimate the overall behavior of shadows and we add high
frequency shadows afterwards. The distance smax (P, ωl ) for
an arbitrary light direction ωl is unknown as Equation 5 can
be evaluated only for the sample directions ω j . We can get
an estimate of the shape of the tree for any direction ωl by
interpolating the smax (P, ω j ) values. Alternatively, any direction ωl can be assigned the distance smax (P, ω j ) where
ω j is the closest sample direction to ωl . This results in a
very coarse approximation (Figure 4(a)), even when modulating the smax distance by (ω j · ωl ) (Figure 4(b)). These two
functions are subject to discontinuities that result in sudden
changes of lighting when the sun moves. Choosing the maximum of (ω j · ωl ).smax (P, ω j ) among all j removes the discontinuities (Figure 4(c)). However, this function presents
important variations of lighting when the sun moves. We finally retain the function of Figure 4(d), defined as follows:
N

smax (P, ωl ) =

dir
M(ωl · ω j ).smax (P, ω j )
∑ j=1

N

dir
M(ωl · ω j )
∑ j=1

(7)

This function approximates the envelope shape using a set
of cosine lobes contained in the hemisphere directed by ωl
(non linear due to the M function). This approximation is robust even for leaves close to the tree envelope. Splines could
be used as well, however they would increase drastically
the computation time. Spherical harmonics would provide
a smooth function for smax , but would require the evaluation
of polynomials and cosine functions, which is time consuming for real-time applications.
The final equation of outgoing radiance due to the sun
light becomes
Losun (P, ωo ) = F(P, ωo , ωl ) e−τ.smax (P,ωl ) Esun

(8)

5. Indirect Lighting
The contribution of indirect lighting is of high importance
within a set of leaves due to the large number of reflections
and transmissions of light that take place in this set (Figure

(a)

(b)

(c)

(d)

Figure 4: Four possible functions to estimate the shape
of the tree envelope for a leaf centered at P. The
(red,green,blue) lines represent the coordinate frame of the
leaf. The cyan lines are the vectors ω j scaled by smax (P, ω j )
with Ndir = 8. The distance of the gray surface from P represents the smax (P, ωl ) distances for all possible ωl .

5). Our approach is based on probabilistic models to get an
estimate of indirect lighting due to one bounce of sun light
that occurs in the neighborhood of a leaf. We do not manage
more bounces due to the high extra processing time and the
low difference in result. We also ignore indirect lighting due
to sky light. Its contribution is low (6% in the case of Figure 7(c)), is almost uniform, and would require expensive
computation. We can add an offset to the resulting outgoing
radiance to approximate this component but it is not necessary. When there is no sunlight during overcast days, light is
still reaching the bottom of the set of leaves since the ground
reflects light from the sky.
For each leaf, we want to compute the lighting contribution of all neighbor leaves. The naive approach would be a
simple sum of the outgoing radiance of each neighbor leaf.
Unfortunately, it requires a large amount of computation,
particularly due to the occlusions between the currently lit
leaf and the neighbor leaves, and the occlusions between
the neighbor leaves and the environment. To overcome this
problem, we look for some invariants that make our equations simpler and thereby faster to compute.
We first present our integration scheme that isolates some
invariants. We then show how some parts of the equations
can have analytical solutions or estimations. We finally express the estimation of incoming radiance onto neighbor
leaves due to the sun.
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

K. Boulanger & K. Bouatouch & S. Pattanaik / Rendering Trees with Indirect Lighting in Real Time

1193

and transmission of sun light by neighbor leaves becomes:
Ndir Ns j

Loind (P, ωo ) = A ∑

∑ ∑

j=1 i=1 P′ ∈V j,i

F(P, ωo , PP′ )Losun (P′ , −PP′ )V (P, P′ )

(a)

(b)

Figure 5: Tree rendering (a) without indirect lighting, (b)
with indirect lighting.
ωl
αj

ωj

P’

PP’

Nk

ωj

ωl

P’

PP’

PP′ is the normalized PP′ vector. NP′ is the normal to the
leaf centered at P′ . The number of leaves contained in the
slice V j,i (such that P′ ∈ V j,i ) is
Nleaves j,i = ρ

4π 2
s ∆s j
Ndir i

Vj

Nk

As presented earlier, the solid angles Ω j are small enough
to consider PP′ as similar to ω j . We also consider the slices
V j,i as very thin, hence ||PP′ || = si . We can then approximate the visibility function V (P, P′ ) by the attenuation term
e−τ.si . By applying the last three properties, we can rewrite
Equation 9 as follows:
Ndir

Loind (P, ωo ) = A ∑ F(P, ωo , ω j )Losample (P, j)
NP

(10)

where ∆s j is small.

ωl

αj

|NP′ · (−PP′ )|
||PP′ ||2
(9)

(11)

j=1

ωj

Ns j

Losample (P, j) =

P
si

Δsj

smax(P,ωj)

e−τ.si
Loslice (P, j, i)
2
i=1 si

∑

Loslice (P, j, i) =

∑

P′ ∈V j,i

Losun (P′ , −ω j ) |NP′ · (−ω j )|

(12)
(13)

Figure 6: Subdivision of a volume V j into slices of radius
si and of thickness ∆s j . The blue line is an example of reflected ray on a leaf of the slice (left inset), the red dashed
line is an example of transmitted ray through a leaf of the
slice (right inset). For all leaves inside V j , α j is the constant
angle between ωl and ω j .

Losample (P, j) corresponds to the outgoing radiance of all
leaves inside V j . Loslice (P, j, i) represents the outgoing radiance of all leaves inside the slice V j,i . Losun is the total outgoing radiance from neighbor leaves when illuminated by the
attenuated irradiance of the sun Esun (P′ ):

5.1. Integration Scheme

5.2. Evaluation of the sums

For lighting purposes, we consider the solid angles Ω j of the
volumes V j (Figure 2(b)) small enough to place all neighbor
leaf centers P′ contained in V j on the rays originating at P
and of direction ω j . The attenuation term between the current leaf and a neighbor leaf depends only on the distance between the leaves (Section 3.4). Therefore we subdivide each
volume V j into a large number Ns j of thin concentric slices
V j,i of radius si and of thickness ∆s j = smax (P, ω j )/Ns j with
si = i.∆s j (Figure 6). The attenuation term is supposed to be
constant inside these slices.

The previous equations cannot be efficiently computed at
runtime. We want to remove as many sums as possible.
Given a leaf centered at P′ ∈ V j,i , we define its relative position as PP′ = si .ω j . Rewriting Equation 13 using the latter
expression, Equation 4, and developing Equation 14 gives

Equation 3 uses an integral over the incidence directions
ω. We start by transforming it to a sum of integrals over the
leaf surfaces, each leaf having the same area A. We consider
the leaves small compared to the distance PP′ . The integrand
is then considered to be constant for each point of a neighbor
leaf centered at P′ . The outgoing radiance due to reflection
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

Losun (P′ , −ω j ) = F(P′ , −ω j , ωl ) Esun (P′ )

(14)

Loslice (P, j,i) = Esun (P + si .ω j ) ×
ρr f
M(NP′ · ωl ) . M(NP′ · (−ω j ))
π P′∑
∈V j,i
+
+
+

ρt f
π
ρtb
π
ρrb
π

∑

M(NP′ · ωl ) . M(−NP′ · (−ω j ))

∑

M(−NP′ · ωl ) . M(NP′ · (−ω j ))

∑

M(−NP′ · ωl ) . M(−NP′ · (−ω j ))

P′ ∈V j,i

P′ ∈V j,i

P′ ∈V j,i

(15)

K. Boulanger & K. Bouatouch & S. Pattanaik / Rendering Trees with Indirect Lighting in Real Time

1194

Only the normal NP′ is variable inside each of the sum. The
Appendix gives details on the estimation of these sums using
the hypothesis of uniform distribution of leaf orientation. We
can use this estimation to rewrite Equation 15 as follows:

integrable and offering a good fit of the tree envelope:
smax (P + s.ω j , ωl ) =
N
∑ j′dir
=1 M(ωl · ω j′ ). smax (P, ω j′ ) − (ω j · ω j′ ).s
N

∑ j′dir
=1 M(ωl · ω j′ )

Loslice (P, j, i) = Esun (P + si .ω j )Nleaves j,i ×
ρr f + ρr b
π
ρt f + ρtb
+
π

1
− α j cos α j + sin α j
6π

1
(π − α j ) cos α j + sin α j
6π

(16)

with α j ∈ [0, π] as the angle between ω j and ωl . Substituting
Equation 16 into Equation 12 yields
Ns j

Losample (P, j) = G1 ( j, ωl ) ∑ e−τ.si Esun (P+si .ω j ) ∆s j (17)

This function follows the same approach as Equation 7 except that it has an additional term to account for the new origin of the distances smax . We use this function in Equation
21 and solve the integral of Equation 20. We finally get the
following expression for the contribution of indirect lighting
due to the leaves in V j :
Losample (P, j) =

G1 ( j, ωl )
Esun ×
G3 ( j, ωl )

i=1

Ndir

exp −G2 (ωl ).

with
¯
2ρ ρ(sin
α j − α j cos α j ) + π(ρt f + ρtb ) cos α j
3π Ndir
(18)
and ρ¯ = ρr f + ρrb + ρt f + ρtb .
Ns j has to be large to guarantee an accurate value of
Losample (Equation 17). ∆s j is inversely proportional to Ns j .
Therefore, by using the following relation,
I(P, j) = lim

∑e

Ns j →∞ i=1

smax (P,ω j )

=

0

Esun (P + si .ω j ) ∆s j

e−τ.s Esun (P + s.ω j ) ds

(19)

we can get a good approximation for Losample by using the
integral rather than the discrete sum:
Losample (P, j) ≈ G1 ( j, ωl ).I(P, j)

′

×
(23)

G2 (ωl ) =

τ
N
∑ j′dir
=1 M(ωl

· ω j′ )

(24)

N

∑ j′dir
=1 M(ωl · ω j′ ).(ω j · ω j′ )
N

∑ j′dir
=1 M(ωl · ω j′ )

(25)

Equation 23 can be finally substituted into Equation 11 to
evaluate the outgoing radiance at the leaf centered at P due
to indirect lighting. The three above equations represent the
main contribution of this paper. The saving that these equations bring to the whole computation will be shown in Section 7.

(20)
6. Implementation

5.3. Evaluation of the irradiance on neighbor leaves
The last step to compute indirect lighting on a leaf P is to
evaluate the irradiance Esun (P+s.ω j ) that reaches the neighbor leaves centered at P′ = P + s.ω j . This irradiance is attenuated by the layer of leaves separating the neighbor leaf
from the direct illumination of the sun. Using the attenuation
function of Section 3.4, we can write
Esun (P + s.ω j ) = e−τ.smax (P+s.ω j ,ωl ) Esun

′

with

G3 ( j, ωl ) = τ 1 −

Ns j

∑ M(ωl · ω j ).smax (P, ω j )

j′ =1

1 − exp −G3 ( j, ωl ).smax (P, ω j )

G1 ( j, ωl ) =

−τ.si

(22)

(21)

However, we cannot afford to evaluate smax (P+s.ω j , ωl ) using Equation 7 because this evaluation has to be done inside
the integral of Equation 20. We need an easily integrable
function. We cannot use a simple primitive such as a sphere
to approximate the tree envelope to easily compute smax . The
sphere does not fit well an arbitrary tree and the resulting
integral is not analytically solvable. We rather propose the
following function, more complex in appearance but easily

Any data structure that can store Ndir values of smax for each
leaf can be used for rendering trees with our model. Our implementation uses a billboard per leaf or per small cluster
of leaves to render highly detailed trees. Our model results
in low frequency lighting hence trees do not flicker when
far from the viewer. Therefore it can also be applied to trees
represented as one billboard, a set of billboards or a volume.
Each texel or voxel would be assigned the smax values corresponding to the leaf it represents.
Equations from previous sections seem expensive at first
for a GPU implementation. However, many subsets of those
equations are constant per tree, hence can be computed on
the CPU. The resulting shaders are very light and offer fast
rendering of trees in real-time applications. Our lighting
model can be evaluated in a vertex shader since most equations are defined per leaf. Only high-frequency shadows and
the specular component are evaluated in the fragment shader.
Direct lighting due to the sky light and to the sun light is
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

K. Boulanger & K. Bouatouch & S. Pattanaik / Rendering Trees with Indirect Lighting in Real Time

(a)

(b)

(c)

(d)

1195

(e)

Figure 7: Comparing our method to Monte-Carlo rendering. Light comes from the top right corner. Top row: our rendering.
Bottom row: Monte-Carlo rendering with 256 rays per intersection point. (a) Direct lighting from the sky. (b) Direct lighting
from the sun. (c) Indirect lighting from the sky, ignored in our case. (d) Indirect lighting from the sun. These four light components represent 24%, 48%, 6% and 22% respectively of the total radiance value. (e) Sphere of leaves with false colors for
indirect lighting due to the sun, red for reflected light and green for transmitted light.
evaluated using Equations 6 and 8 on the GPU. Only the
smax (P, ω j ) parameter changes per leaf. Indirect lighting is
evaluated on the GPU using Equation 23. At rendering time,
for each tree, G1 , G2 and G3 are computed on the CPU using Equations 18, 24 and 25 and can stay constant as long as
lighting conditions do not change.
Our implementation uses Ndir = 8. Even though it seems
low, it reveals to be enough in practice: Figure 7 shows that
our results are close to high-quality Monte-Carlo rendering.
This low number of samples is very convenient for a GPU
implementation. We can store the smax parameters into two
4D vectors per vertex using texture coordinate sets, which
represents only a small memory overhead. Note that the
same sets are used when evaluating the three light components, which reduces the overall memory storage. The uniform distribution of sample directions allows us to store only
the directions of the first four samples and recover the others
by symmetry as follows:

√
ξ = 3/3



ω1 = ( ξ, −ξ, −ξ)
ω0 = (−ξ, −ξ, −ξ)
ω3 = ( ξ, −ξ, ξ)
 ω2 = (−ξ, −ξ, ξ)


j ∈ {4..7}
ω j = −ω7− j
(26)
We now deal with the precomputation of the smax values.
With each leaf centered at P, we associate a bin with each
sample direction ω j . We then classify each neighbor leaf
into one of the bins. Next, we sort the leaves of each bin
by increasing order of distance from P. For each bin, we
evaluate the solid angle whose apex is P and subtended by
the closest neighbor leaf. This solid angle divided by the asc 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

sociated bin’s solid angle gives an occlusion value in ]0, 1].
By subtracting this value from 1, we get the remaining visibility term. We multiply this term by the occlusion value
of the second leaf, compute the new remaining visibility
term, and so on for the subsequent leaves. Finally, this results in an attenuation term that asymptotically converges to
e−τ.smax (P,ω j ) . We use this term in Equations 6 and 23. However, the smax values are necessary in Equation 7. Therefore,
we need to find the value of τ. For each leaf and each associated bin, we first set smax to the distance of the farthest
leaf within the bin and use the attenuation term to compute
a value of τ. The resulting τ values are averaged to get the
final value of τ for the whole tree. We can then compute the
final smax values for each leaf and each sample direction using τ and the attenuation terms. This precomputation has to
be done only once, the resulting attenuation terms are stored
in the data structure representing the tree mesh.
7. Results
Our model can be easily applied to different kinds of tree and
to scenes containing many trees (Figure 9). It can be easily
embedded into existing shaders. Our model handles dynamic
lighting (Figure 10) and can be applied to trees animated under the effect of gusts of wind (that modify the leaf normals),
as the attenuation terms remain the same as long as the tree
branches do not break. Indeed, the lighting updates due to
leaf normal changes are fast since they are implemented
on the GPU. Unlike our model, PRT methods require the
computation of projection coefficients (spherical harmonics,
wavelets) for each frame of a sequence of animated trees,

1196

K. Boulanger & K. Bouatouch & S. Pattanaik / Rendering Trees with Indirect Lighting in Real Time

which is computationally expensive. Indirect lighting provides an important contribution in situations such as the left
image of Figure 11 where the sun light goes through the
leaves and illuminates neighbor leaves indirectly.

use of uniform distribution of leaf positions and normals.
Using non-uniform distributions could increase the accuracy
of the computations and can be subject to future work.

We measured the impact of our lighting model on rendering speed by rendering a set of trees (right image of Figure
11) with different sets of light components (see the following
table). We tested our algorithm on a nVidia GeForce 8800
GTX using HDR lighting. We recall that each rendered tree
is highly detailed (about 98, 000 triangles).

Appendix

Light components
direct sky
direct sky + sun
all

1 tree
788 fps
700 fps
667 fps

4 trees
418 fps
349 fps
326 fps

100 trees
36 fps
29 fps
27 fps

We remark that the addition of the indirect lighting component has a small impact on performances (less than 7%).
As shown in Figure 7, our results are close to Monte-Carlo
rendering (an average error of 5%, 7.5%, 6% for Figures
7(a), 7(b) and 7(d) respectively). This latter takes 50 minutes
to render the image of Figure 7 with all light components
combined, while our method only takes 0.4 to 1.5 millisecond per tree depending on the total number of trees.
The precomputation time using a non-optimized implementation is 2 and 40 seconds for trees of 1, 500 and 40, 000
leaves respectively. This is relatively fast compared to a PRT
approach that requires several minutes to several hours of
precomputation for a similar amount of vertices [SKS02].
Moreover, our approach is capable of tuning the BSDF while
achieving real-time rendering.
8. Conclusion and Future Work
We presented a lighting model for trees that allows real-time
rendering with indirect illumination. Our goal was to overcome the lighting complexity without defining an empirical
model based only on observations of real trees. To this end,
we presented an approach based on the fact that human vision is more sensitive to the overall aspect of objects rather
than precise details. We approximated the scattering of light
inside sets of leaves by giving them probabilistic properties,
and thus derived an analytical solution for low-frequency
lighting. We achieved high speedups by reducing the computation load on parameters that have the least influence on
the appearance.
The implementation of our model on the GPU is straightforward. Furthermore, many parameters can be quickly computed per tree instance on the CPU, allowing short and efficient shaders.
Extending our model to point light sources can be a subject of future work. This would allow to render trees close to
street lamps or trees on fire. Another extension is to account
for the illumination of the ground and trees by other trees
through reflection and transmission. Our approach makes

Y
NP’
θ
P’
αj

φ

X = ωj

ωl

Z

Figure 8: NP′ , ω j and ωl in spherical coordinates.
The evaluation of the outgoing radiance Loslice from all
neighbor leaves centered at P′ inside the slice V j,i requires
many expensive sums (Equation 15). However, we want a
computationally inexpensive analytical model for Loslice . The
four sums have similar expressions, hence we will calculate
the second one and find the others by symmetry. The number
of leaves Nleaves j,i in a slice V j,i is considered as high and the
distribution of normals NP′ is uniform. Therefore, the sums
are close to their corresponding integrals as follows:

∑

P′ ∈V j,i

M(NP′ · ωl ).M(NP′ · ω j )

Nleaves j,i
M(NP′ · ωl ).M(NP′ · ω j ) dNP′
4π
Ω
= Nleaves j,i . Avt (ωl , ω j )

≈

(27)

with Avt (ωl , ω j ) the average of M(NP′ · ωl ).M(NP′ · ω j )
given ωl and ω j .
Avt (ωl , ω j ) =
1
H(NP′ · ωl ).(NP′ · ωl ).H(NP′ · ω j ).(NP′ · ω j ) dNP′
4π Ω
(28)
where H(x) is the Heaviside step function, equal to 1 if
x ≥ 0, 0 otherwise. The uniform distribution of NP′ makes
Avt (ωl , ω j ) depending only on the angle α j between ωl and
ω j . We now express the average as Avt (α j ). As shown in
Figure 8, we define ω j = X and ωl in the (O, X, Z) plane with
an angle α j with ω j . We express NP′ = (ϕ, θ) with spherical
coordinates and obtain the following expression for Avt (α j ):
Avt (α j ) =

1
4π

2π

π

ϕ=0 θ=0

H(sin θ(cos α j cos ϕ + sin α j sin ϕ)) .
(sin θ(cos α j cos ϕ + sin α j sin ϕ)) .
H(cos ϕ sin θ).(cos ϕ sin θ) . sin θ dθdϕ

(29)

To find an analytical form to this integral, we first need to
remove the step functions by modifying the bounds of the
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

K. Boulanger & K. Bouatouch & S. Pattanaik / Rendering Trees with Indirect Lighting in Real Time

integrals. With θ ∈]0, π[, sin θ > 0. We also have cos ϕ > 0
if ϕ ∈]0, π/2[ ]3π/2, 2π[. With these properties, the second
step function can be removed and the integrals split into
two parts. To remove the first step function, we need two
cases: α j ∈]0, π/2[ and α j ∈]π/2, π[. In the first case, we
have cos α j > 0 and sin α j > 0. If ϕ ∈]0, π/2[, the first step
function is always equal to 1. If ϕ ∈]3π/2, 2π[, the first step
function is equal to 1 only if ϕ > 3π/2 + α j . We then get
cos α j
4π
cos α j
+
4π

Avt (α j ) =

sin α j
4π
sin α j
+
4π

+

π
2

π

0
0
2π
3π
2 +α j
π
π
2

0

0

cos2 ϕ sin3 θ dθdϕ
π
0

cos ϕ sin ϕ sin3 θ dθdϕ

2π
3π
2 +α j

cos2 ϕ sin3 θ dθdϕ

π
0

cos ϕ sin ϕ sin3 θ dθdϕ (30)

Solving this equation gives the expression of Avt (α j ) for
α j ∈]0, π/2[:

1
(π − α j ) cos α j + sin α j
(31)
6π
The α j ∈]π/2, π[ case can be calculated in a similar way and
actually gives exactly the same result as Equation 31. We
prolong by continuity to have Avt (α j ) for α j ∈ [0, π].
Avt (α j ) =

Due to the uniform distribution of NP′ , the number of
leaves for which light goes through from the front face to the
back face is the same as the number of leaves for which light
goes through from the back face to the front face. Therefore,
the third sum of Equation 15 can be expressed exactly as the
second sum using Equations 27 and 31.

To get the expressions of the first and fourth sums, we apply a symmetry to the problem and use α′j = π − α j . We use
α′j in place of α j for all previous equations of this section.
We finally get Avr that replaces Avt in Equation 27:
Avr (α j ) =

1
− α j cos α j + sin α j
6π

α j ∈ [0, π] (32)

Acknowledgment
Thanks go to Jonathan Brouillat for generating the MonteCarlo images and Guillaume François for the helpful discussion about the manuscript. This work has been partially supported by Florida High-Tech research, Electronic Arts and
INRIA.
References
[CAB98] C HELLE M., A NDRIEU B., B OUATOUCH K.:
Nested radiosity for plant canopies. The Visual Computer
14, 3 (1998), 109–125.
[DN04] D ECAUDIN P., N EYRET F.: Rendering forest
scenes in real-time. In Rendering Techniques (Proceedings of EGSR) (June 2004), pp. 93–102.
c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

1197

[HKW07] H ABEL R., K USTERNIG A., W IMMER M.:
Physically based real-time translucency for leaves. In
Rendering Techniques (Proceedings of EGSR) (June
2007), pp. 253–263.
[HPAD06] H EGEMAN K., P REMOŽE S., A SHIKHMIN
M., D RETTAKIS G.: Approximate ambient occlusion for
trees. In Proceedings of I3D ’06 (2006), pp. 87–92.
[Jak00] JAKULIN A.: Interactive vegetation rendering
with slicing and blending. In Proceedings of Eurographics (Short Presentations) (August 2000).
[LBD07] L UFT T., BALZER M., D EUSSEN O.: Expressive illumination of foliage based on implicit surfaces. In
Eurographics Workshop on Natural Phenomena (2007).
[Max95] M AX N.: Optical models for direct volume rendering. IEEE Transactions on Visualization and Computer Graphics 1, 2 (1995), 99–108.
[Max96] M AX N.: Hierarchical rendering of trees from
precomputed multi-layer z-buffers. In Rendering Techniques (Proceedings of 7th Eurographics Workshop on
Rendering) (1996).
[NRH03] N G R., R AMAMOORTHI R., H ANRAHAN P.:
All-frequency shadows using non-linear wavelet lighting
approximation. ACM Transactions on Graphics 22, 3
(2003), 376–381.
[Pat93] PATMORE C.: Illumination in dense foliage models. In Proceedings of the Fourth Eurographics Workshop
on Rendering (1993), pp. 63–71.
[PL90] P RUSINKIEWICZ P., L INDENMAYER A.: The algorithmic beauty of plants. Springer-Verlag New York,
Inc., New York, NY, USA, 1990.
[PL06] P ETERSON S., L EE L.: Simplified tree lighting
using aggregate normals. In SIGGRAPH ’06: ACM SIGGRAPH 2006 Sketches (2006), p. 47.
[Ree83] R EEVES W. T.: Particle systems – a technique for
modeling a class of fuzzy objects. In Computer Graphics
(Proceedings of SIGGRAPH 83) (July 1983), vol. 17(3),
pp. 359–376.
[SKS02] S LOAN P.-P., K AUTZ J., S NYDER J.: Precomputed radiance transfer for real-time rendering in dynamic, low-frequency lighting environments. In ACM
Transactions On Graphics (Proceedings of SIGGRAPH
2002) (2002), pp. 527–536.
[SSBD03] S OLER C., S ILLION F., B LAISE F., D ER EFFYE P.: An efficient instantiation algorithm for simulating radiant energy transfer in plant models. ACM Transactions On Graphics 22, 2 (April 2003).
[WWD∗ 05] WANG L., WANG W., D ORSEY J., YANG
X., G UO B., S HUM H.-Y.: Real-time rendering of plant
leaves. In ACM Transactions On Graphics (Proceedings
of SIGGRAPH 2005) (2005), pp. 712–719.

1198

K. Boulanger & K. Bouatouch & S. Pattanaik / Rendering Trees with Indirect Lighting in Real Time

Figure 9: The same scene in two different lighting conditions.

Figure 10: Our lighting method is dynamic, allowing real-time changes of lighting conditions.

Figure 11: Left: The appearance of trees depends mainly on translucency, attenuation and indirect lighting. Right: 100 trees
rendered at 27 fps with indirect lighting and shadows.

c 2008 The Author(s)
Journal compilation c 2008 The Eurographics Association and Blackwell Publishing Ltd.

