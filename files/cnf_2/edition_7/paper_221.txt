DOI: 10.1111/j.1467-8659.2009.01437.x

COMPUTER GRAPHICS

forum

Volume 28 (2009), number 8 pp. 2244–2254

GIzMOs: Genuine Image Mosaics with Adaptive Tiling
D. Pavi´c, U. Ceumern and L. Kobbelt
RWTH Aachen University

Abstract
We present a method that splits an input image into a set of tiles. Each tile is then replaced by another image from
a large database such that, when viewed from a distance, the original image is reproduced as well as possible.
While the general concept of image mosaics is not new, we consider our results as ‘genuine image mosaics’ (or
short GIzMOs) in the sense that the images from the database are not modified in any way. This is different from
previous work, where the image tiles are usually colour shifted or overlaid with the high-frequency content of the
input image. Besides the regular alignment of the tiles we propose a greedy approach for adaptive tiling where
larger tiles are placed in homogenous image regions. By this we avoid the visual periodicity, which is induced
by the equal spacing of the image tiles in the completely regular setting. Our overall system addresses also the
cleaning of the image database by removing all unwanted images with no meaningful content. We apply differently
sophisticated image descriptors to find the best matching image for each tile. For aesthetic and artistic reasons
we classify each tile as ‘feature’ or ‘non-feature’ and then apply a suitable image descriptor. In a user study we
have verified that our descriptors lead to mosaics that are significantly better recognizable than just taking, e.g.
average colour values.
Keywords: image mosaic, photomosaic, polynomial descriptor, adaptive tiling
ACM CCS: I.3.3 [Computer Graphics]: Picture/Image Generation

1. Introduction
The term mosaic is generally used in fine arts and refers
to a decoration technique. For example in the interiors of
ancient buildings like churches, large patterns or pictures are
composed of a number of small fragments or tiles. These
tiles are usually made of pottery or coloured glass.
In fact, a mosaic can be understood as a collection of tiles,
where each tile can be an image. It is a kind of artistic recursion. For example, painters of the impressionist movement
like Monet or Renoir used visible brushstrokes (tiles) to create the final painting (mosaic). We can also find mosaicing
technique in the modern art. Chuck Close created portraits
based on photographs by first dividing the original photograph into smaller pieces (tiles) and then painting each piece
separately in order to create the final, photorealistic painting
(mosaic).
This paper presents a method for creating an image mosaic,
which is a simple collection and arrangement of so-called
c 2009 The Authors
Journal compilation c 2009 The Eurographics Association and
Blackwell Publishing Ltd. Published by Blackwell Publishing,
9600 Garsington Road, Oxford OX4 2DQ, UK and 350 Main
Street, Malden, MA 02148, USA.

tile images. When viewing an image mosaic from a close
distance, the individual tile images are recognized, but when
viewed from a large distance a completely different image,
the image mosaic, appears. Such a technique can be used
in advertisement in order to emphasize the connotation, e.g.
one could imagine creating a logo of a sports brand out of tile
images that show different products this brand is producing
or players, which are using these products, etc.
Our work in this paper was motivated on the one hand
by the versatility of the image mosaics: they can be used for
artistic as well as for commercial purposes. On the other hand
there is a huge number of images available over the Internet,
a large resource that can be used for creating high-quality
image mosaics of arbitrary input images without the need for
any kind of image modification or retouch.
The most important properties of our algorithm that
distinguish our work from previous approaches are as
follows:

2244

D. Pavi´c et al. / GIzMOs

2245

• Image mosaics for arbitrary input images are generated by
using a huge database of source images downloaded from
the Internet. Previous approaches have used databases of
a few hundreds or a few thousands images. Our database
consists of more than a million images. Such a huge
database requires very compact descriptors to be used
for image matching.
• We sort out all so-called void images in a preprocessing
step. These are images that do not contain sufficient visual information in order to contribute to a satisfying final
mosaic and have a compromising effect on the aesthetic
appearance.
• The source images are used without applying any kind
of image modification. The final genuine image mosaic
(we call it short GIzMO) is simply obtained by copying
the original images. Although such mosaics were also
presented before, in our case the approximation quality
of the output mosaics is clearly improved by using polynomial descriptors in connection with our huge database.
• We propose a simple segmentation method for classification of the tile images into ‘feature’ and ‘non-feature’
regions. In other words by this classification the input
image is separated into regions with high and low local
contrast.
• We use polynomial descriptors for image matching. By
varying the polynomial degree we automatically vary the
approximation level and hence the visual faithfulness of
the image mosaic. When appropriately combined, the
different degrees of approximation allow for capturing
important image features while preserving the overall
artistic, mosaicing effect [see Figure 1(e)].
• We propose an approach for adaptive tiling which allows
for creating a new kind of irregular image mosaics [see
Figure 1(f)]. We avoid the visual periodicity, which is
induced by the equal spacing of the image tiles in the regular mosaics. As a side-effect the approximation quality
can be increased while keeping the same number of tile
images. In contrary to the previous work, where adaptive tilings are created in a top-down manner we present
a bottom-up approach, which introduces more irregular
tilings while better preserving the visually dominant features.
2. Related Work
Mosaicing is a popular topic in computer graphics. In computer vision the term mosaicing is used for stitching together
images or videos [Sze96] in order to create higher resolutions
or a wide field of view. Often the term panorama images or
panorama mosaicing is used [BL03]. This kind of mosaicing
is not directly related to our approach.
The image mosaicing methods related to our work can be
split roughly in two types of approaches. A nice overview
of these approaches was recently presented by Battiato et al.

Figure 1: Comparison of the simulated decorative mosaic
[Hau01] (b), JIM [KP02] (c) and GIzMO (d) and (e) for
the given input image (a). For all results roughly 400 tiles
were used. The images (a)–(c) were taken from [KP02]. The
solution when using matching with average colours (d) is
still very aliased and blocky. When using an appropriate
combination of feature and non-feature descriptors we get
the result in (e) which provides sufficient approximation while
still preserving the artistic mosaicing effect. Our method goes
even further and allows for higher approximation by using an
adaptive mosaicing approach which avoids the periodicity of
the regular tiling (f).

[BBFG07]. The one group of approaches considers the problem of how to arrange the individual tiles in the image mosaic.
Hausner introduced a method for simulating decorative mosaics [Hau01]. His work aims at arranging tiles of constant
colour by using a centroidal Voronoi diagram and a distance
field derived from user-given contours. Kim and Pellacini
have introduced a general framework for creating so-called
Jigsaw image mosaics (JIM), where arbitrarily shaped container images are tightly packed with other also arbitrarily
shaped source images [KP02]. This is achieved by minimizing an appropriate mosaicing energy function. The work
of Smith et al. [SLK05] extends the two above approaches
[Hau01], [KP02] by additionally handling temporal coherence and allowing for creating animated mosaics. Lai et al.
[LHM06] have shown how to create decorative mosaics on
3D surfaces. Kim et al. [KEA06] use mosaic representation
for video navigation and they are mainly addressing the problem of packing and appropriate labelling of the given video
frames in pre-segmented input images. Our method uses simple axis-aligned arrangements of the tiles. However with our
simple matching descriptors the visually important feature
lines are also well captured (see Figure 1).
The second group of approaches, which are closer in spirit
to our work, uses a regular arrangement of tile images and is
more focused on how to select them. Mostly these approaches
use a kind of colour correction in order to preserve the high

c 2009 The Authors
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

2246

D. Pavi´c et al. / GIzMOs

frequency information in the final image [FR98] or video mosaic [KGFC02]. Finkelstein and Range apply simple colour
shifting and scaling on the final image mosaic [FR98]. The
same colour adjustment was used for creating video mosaics
out of source videos [KGFC02]. One of the main aspects of
our method is that the original colours remain unperturbed in
the final image mosaic such that the look of individual tiles
is not compromised.
Very recently, Orchard and Kaplan [OK08] introduced
Cut-Out Image Mosaics where arbitrarily shaped image parts
are chosen to assemble the final mosaic. The method presented there is computationally very intensive. Already for
very small image databases (several hundreds of images) several hours of computation are needed for creating the final
mosaic. We use a huge image database of more than a million
images and our method generates image mosaics after just a
few minutes of processing time.
Our approach is probably most similar to Photomosaics of
Silvers [Sil97]. However a proper comparison with his work
is not possible because his technique remains proprietary.
As far as we can judge from the examples available online,
Silvers uses also a large database of images and creates very
good mosaicing results without colour correction just like
our method. Di Blasi et al. [dBGP06] have also introduced a
very practical mosaicing method where no colour correction
is applied. There each image is partitioned into a 3 × 3 grid
and for each grid cell the average RGB colour is computed.
This leads to a 27-dimensional image descriptor. We use
also a 27-dimensional descriptor, but instead of a piecewise
constant function, our descriptor is a quadratic polynomial
and therefore more faithfully approximates the image colour
functions. Di Blasi et al. [dBGP06] first introduced adaptive
mosaics where instead of a regular tiling an adaptive quadtree
cell structure was used. Our adaptive tiling method is based
on a greedy procedure and allows for arbitrarily sized rectangular tiles and hence aviods the visual periodicity in the
final image mosaic even more effectively.
There is also a number of tools available on the Internet
for creating image mosaics. Most of these tools apply colour
modifications to the source images in order to produce the
final result. We have picked one which does not apply colour
correction: the Patchworkr [Yav], and show a comparison
with our method in Figure 2. There we see that our method
captures the overall appearance much better (e.g. the eyes or
the Mona Lisa’s smile).
Our search for the best matching image in a large database
can be understood as a variant of content-based image retrieval [VT00], where the content we are searching for is
the colour distribution in the image. In our case we are using polynomial descriptors [Far02] in order to compactly
approximate the colour information. For each image or tile
we compute a polynomial f : [0, 1]2 → R3 whose components are least squares approximations to the red, green and

Figure 2: Comparison of our method with a solution created
with the Patchworkr tool [Yav]. (a) input image, (b) Patchworkr solution, (c) our regular solution and (d) our solution
with adaptive tiling. Notice that our solutions better preserve
the information from the input image. T = 2, 700 in (b) and
(c). For (d) only T = 1,180 tiles were used.
blue image channels, respectively (see Section 4.1). Alternatively, other approximation or compression schemes to
build a descriptor could be based on, e.g. wavelet-schemes
[JFS95]. However our experiments showed that the simpler
least squares approximant served our purpose well.
In recent years many works like ours were inspired by
the fact that nowadays we have a large number of images
available on the Internet. Two well-known examples for such
resources are Google-Images and Flickr.com where billions
of images are stored. Torralba et al. [TFF07] have created a
huge database of 80 millions tiny images (resolution 32 ×
32) using it mainly for object recognition. Hays and Efros
[HE07] use about 2.3 millions of images from Flickr.com for
their scene completion method. Lalonde et al. [LHE∗ 07] have
created an image-based object library using the online tool
LabelMe [RTMF07]. We have used Flickr.com for creating
our image database, resulting in a searching space of over
one million images.
In the following we will first give an overview of our
mosaicing algorithm for a regular tiling of the input image
in Section 3. Then we will explain our matching and segmentation descriptors in more detail in Section 4. Finally in
Section 5, we will explain how to extend our regular approach
to an adaptive one.
3. Algorithm Overview
The input to our method is a background image I of arbitrary
resolution H × W and the total number of tiles T to be used.

c 2009 The Authors
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

D. Pavi´c et al. / GIzMOs

2247

We are using square tiles, a restriction which is done only for
convenience and which can be easily relaxed. The tiles are
arranged in a T h × T w grid where T h defines the number of
tiles to be placed in each column and T w defines the number
of tiles to be placed in each row of the final mosaic. In order
to compute T h and T w from T we use the aspect-ratio of the
background image I. From H /W =! Th /Tw we get:
Th =

T ·H
W

,

Tw =

T ·W
H

Now we can either rescale I or simply crop the inner part
of I in order to exactly match the tiling resolution. The final
image mosaic of I is created by replacing each of the T h · T w
tile images I i,j (where i ∈ {0, . . . , T h − 1} and j ∈ {0, . . . ,
T w − 1}) with the best matching source image from a large
database.
Our image database contains over one million square
RGB-images. The source images were downloaded from
random groups on Flickr.com without specific focus, e.g.
landscape, building, portraits, animals, snow, Japan, Niagara
falls, etc. All the images were scaled while preserving the
original aspect ratio and then cropped to a square of 600 ×
of almost one
600 pixels. For images having aspect ratio W
H
we took only the central square part of the image. Other> 1) or top and bottom
wise, additionally left and right ( W
H
<
1)
square
image
parts
were
taken.
Besides the RGB
(W
H
colour information for each image the polynomial descriptors are also precomputed and stored (see Section 4.1).
The workflow of our mosaicing algorithm is depicted in
Figure 3. For each tile, we first compute a feature classification, where intuitively each tile image is classified as a
‘feature’ or as a ‘non-feature’ tile (see Section 4.2). Then for
each tile image we are searching for the best matching source
image in our image database. Depending on the classification
different descriptors are used for the matching.

4. Matching
The core of our algorithm is the searching and matching procedure applied for each tile image I i,j . Because we are using
a huge database of images, we need simple descriptors which
on the one hand have a very compact representation, but on
the other hand are sufficiently well capturing the characteristics of the tile image.

Figure 3: Workflow of our mosaicing method. For a given
input image I and a tiling size T we first apply feature classification based on our segmentation metaphor. Then for each
tile either average colour matching or bi-quadratic descriptor matching is performed in order to create the final result
(here only the polynomial descriptor of the green colour
channel is shown). The used tiling here was T = 2, 028.

4.1. Image descriptor
An image descriptor is a k-dimensional vector that describes
the content of an image as faithfully as possible. In the
k-dimensional descriptor space, we can then define a norm
that allows us to measure the similarity of images. In our
setup we always use the Euclidian norm in Rk .

Our system uses polynomial descriptors, which means we
are considering an image (or tile) as a surface patch in RGBspace and then compute a polynomial patch that minimizes
the approximation error in the least squares sense. This can
be also understood as computing one least squares fit per

c 2009 The Authors
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

2248

D. Pavi´c et al. / GIzMOs

copies of the same 9 × 9 linear system with different righthand sides
Mb = r
where the entries of M and r are of the form
b

d

m3p+q,3p +q =

Bp2 (u) Bq2 (v) Bp2 (u) Bq2 (v)
i=a j =c

Figure 4: The approximation quality of our image descriptors on two examples. From left to right: original image,
constant, bi-linear and bi-quadratic approximation. In all
cases 8 · 11 tiles were used.
channel in RGB-space resulting in three polynomial functions. We have also tested our method in other colour spaces
like L∗ a∗ b∗ , which is adapted to human colour perception
[KP92], but this did not result in a visually perceivable improvement of the results.
Let I be a m × m square image with RGB-pixels I (i, j ) ∈
R 3 . A polynomial descriptor D n of bi-degree n is represented
in tensor-product B´ezier form as
n

n

Dn (u, v) =

bpq Bpn (u) Bqn (v).
p=0 q=0

and the corresponding descriptor vector is given by the k =
3(n + 1)2 coordinates of the B´ezier coefficients. The descriptor for an arbitrary sub-image [a, b] × [c, d] of the image I
is computed by minimizing the quadratic functional
b

d

E(Dn ) =

Dn (u, v) − I (i, j )

2

b

d

r3p+q =

Bp2 (u) Bq2 (v) I (i, j )
i=a j =c

respectively. Notice that the entries of M only depend on the
resolution (b − a) × (d − c) of the sub-image. Hence M is
pre-computed once and can be reused for every tile that has
the same size. Since we still have to evaluate the right-hand
side for every image and solve the 9 × 9 system, we precompute the descriptors offline for all images in the database
and only generate the descriptors for the tiles on the fly.
The polynomial degree n of the descriptor D n determines
its approximation power and hence D n can capture more
and more features of an image with increasing n. In our
system we compute descriptors of degree n = 0 (=average
colour, k = 3), n = 1 (≈ colour gradient, k = 12), and
n = 2 (≈ edge orientation and characteristics, k = 27). For
higher degrees we did not observe any visual improvements.
In Figure 4, we visualize the approximation power of the
polynomial descriptors. The higher the polynomial degree
the higher is the approximation quality. In Figure 5, we show
some GIzMOs with different descriptors in comparison.

,

i=a j =c

i−a
u :=
,
b−a

and

4.2. Feature classification
j −c
v :=
.
d −c

In the case of bi-quadratic polynomials (n = 2), the normal equation for this least squares problem consists of three

When creating image mosaics based on polynomial descriptors we observe that with increasing degree n the reproductions of the input images become more and more faithful.
While this is a positive result from the approximation point

Figure 5: Solutions when using different descriptors. Given an input image (a), we generate a GIzMO either by using matching
with average colours (b), which is still very aliased and blocky or by using higher order descriptors which creates much
better approximation (c). Finally, an appropriate combination of these two solutions that takes into account feature information
provides good approximation in high contrast regions while still generating the artistic mosaicing effect in homogenous regions
as shown in (d). In all three GIzMOs we have used T = 2,120 tiles.
c 2009 The Authors
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

2249

D. Pavi´c et al. / GIzMOs

and
C− =

1
n−

I (i, j )
nT (i j )T <d

where n + and n − are the number of pixels on both sides of
the line, respectively. The approximation error is defined as
E(I ,L) =

I (i,j ) − C+

nT (i j )T ≥d

Figure 6: From top left to bottom right visualized feature
classifier for roughly 1, 50, 100, 300, 1,000 and 5,000 tiles.
This kind of visualization provides a nice non-photorealistic
effect as a side-effect.
of view, we find that from the artistic point of view it is not
desired because in fairly homogeneous regions of the input
image, the faithful reproduction implies that images with
very little detail and contrast are picked. By this we lose the
characteristic appearance of image mosaics [see Figure 5(c)].
On the other hand, by using constant or bi-linear descriptors, we can preserve the mosaic appearance but we lose many
image features due to the quite limited descriptive power of
the low-degree polynomials [see Figure 5(b)].
In order to obtain the best of both worlds, we run a classification procedure on each tile. If a tile is classified as
‘feature’ we use bi-quadratic descriptors in order to find the
best matching image that recovers the local image detail. If a
tile is classified as non-feature, we switch to constant or bilinear descriptors. The reduced approximation is acceptable
because the non-feature tiles do not contain significant local
detail anyway [see Figure 5(d)].
A very simple classifier could be based on the difference between the bi-quadratic descriptor D 2 and the (degreeelevated) bi-linear descriptor D 1 . However we found that a
more sophisticated edge-detection classifier leads to superior results (and in addition generates very nice intermediate
non-photorealistic effect as shown in Figure 6).
The motivation for this classifier is to be able to rate the
significance of an edge (feature) in the image independently
from its orientation and location within a tile. Hence our
classifier computes a line that splits the tile into two regions
and computes the average colour in each. The difference
between these two colours measures the significance and is
used for the feature/non-feature classification.
Let L: nT x = d be a line in the index space of the image
I. Then the two average colours C + and C − are defined as
follows:
C+ =

1
n+

I (i, j )
nT (i j )T ≥d

2

+

I (i,j ) − C− 2 .

nT (i j )T <d

Our classifier tries to find the line L for which E(I, L) is
minimal and then uses C + − C − 2 as a feature measure by
comparing it to some user-defined threshold θ.
Due to the non-smoothness of the function I, the optimal
separating line is difficult to compute. Hence we simply define a finite set of candidate lines and explicitly check E(I,
L) for each candidate separately.
Let p 0 , . . . , p n−1 be a set of samples equidistantly distributed along the boundary of the image I with one sample
placed at every corner. Our set of candidate lines is defined
as the set of n2 (n − 1) lines connecting any pair of samples
p i and p j .
For every sample p i the lines connecting it to the other
samples define a triangle fan that covers the entire image. If
we compute the sum of the pixel colours within each triangle
plus the number of pixels then we can easily find the optimal
separating line starting at p i . By repeating this procedure for
each sample p i we eventually find the optimal rating line.
Notice that we intentionally do not take the relative image
areas n + and n i into account when computing the optimal
separating line. This is important because we want to capture
global image features, hence also small local parts of the
global features should be preserved.

4.3. Image mosaic generation
Figure 3 depicts the workflow of our image mosaicing technique. The binary classification is based on the classifier
described in Section 4.2. For each of the T h · T w tiles in
the input background image I we compute the corresponding
descriptor and then find the closest descriptor in the image
database. In practice we can allow the user to control the feature threshold θ manually and so create the subjectively best
solution. First, by computing both, feature and non-feature
descriptors for each tile we generate two GIzMOs. Then the
user can interactively adjust the feature threshold θ and so
generate from her point of view the best looking final GIzMO.
To make the mosaic generation fast, we use the efficient Approximate Nearest Neighbor (ANN) library [MA06]
that quickly finds the nearest descriptors in 3-, 12-, or 27dimensional space (corresponding to constant, bi-linear, or
bi-quadratic descriptors).

c 2009 The Authors
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

2250

D. Pavi´c et al. / GIzMOs

periodicity, which is induced by the equal spacing of the
image tiles, we can apply a greedy coarsification procedure,
which merges neighbouring tiles into one and then replaces a
whole group of small tiles with one image from the database
(see Figures 1, 2, 9, 10 for some examples). As a side effect,
we can build an image mosaic by fewer images often without
a significant decrease in quality.

Figure 7: Void Images. A number of images with too low
entropy are shown here: (a) too dark, (b) too bright, (c) not
enough details or (d) broken (cancelled download). In the
lower row we see the difference between a result created
with (e) and without (f) void images (for both T = 400).
Notice the much higher variability in the homogenous areas
in (f).
In order to prevent the repetition of the same image tile
in homogeneous regions we have tried error diffusion techniques known from classical dithering schemes like FloydSteinberg. The effect of error diffusion, however, is very
minor because due to our large image database the average
colour of the tile usually matches the retrieved image very
well. This is why we decided to search for the n closest neighbours and simply pick the best candidate that has not been
used yet.
All images are treated the same when downloaded from
the Internet although for the generation of image mosaics
not all of them are appropriate. Those images that do not
contain significant visual information are visually disturbing
because they strongly reduce the mosaicing effect. We call
these images simply void images and remove them from the
database in a preprocessing step. We have tested a number
of different image statistics [GW01] like statistical moments
or image uniformity, and among those finally decided to use
average entropy of the grey-level histogram of each image.
Because entropy is a measure of variability it is exactly the
measure we need. In our current implementation all images
having entropy below 6.0 were removed from the database.
This threshold was chosen empirically. In Figure 7 a number
of void images is shown and also a comparison between a
GIzMO with (e) and without (f) void images.
5. Adaptive Tiling
So far we have considered only the generation of image mosaics with a regular tiling pattern. In order to avoid the visual

Our adaptive tiling idea originates from the area of incremental mesh decimation [GGK02], which is a bottom-up
approach: starting from a fine input mesh a coarse output
mesh is generated. During the decimation one is in general
interested in preserving feature regions: in the case of meshes
these are edge or corner features. The parallels to our case
of tile coarsification are obvious: we want to preserve the
feature tiles and to decimate the non-feature tiles. In contrast to top-down adaptive mosaicing approaches as the one
proposed by Di Blasi et al. [dBGP06], our adaptive tiling
introduces more irregularity by merging neighboring nonfeature tiles while preserving the visually dominant features.
As a consequence our coarse tiles are not restricted to dyadic
locations and sizes.
We start with a regular grid of T h × T w square tiles and
do the feature classification first. Then, each pair of horizontally or vertically neighboring non-feature tiles is an initial
candidate for the next merging operation. We rate the visual
quality of each candidate by computing the approximation
error of the best fitting image from the database after the
merge. Since only non-feature tiles are merged we use the
constant descriptor as similarity metric. Finally, we run a
simple greedy procedure which applies the best horizontal
and vertical merge operation in each step. Notice that we
possibly compare rectangular parts of the input image with
square images from the database. This does not cause a large
bias because in the non-feature regions the colour variation
is naturally very low.
During the greedy coarsification, neighboring tiles are allowed to be merged only if the resulting tile is still rectangular. This implies a number of constraints on the size and
configuration of the tiles that qualify for a merge operation.
Figure 8 shows a few examples when merging is not permitted. In general, a merge between a large tile and one or several
(smaller) neigboring tiles is not permitted if the smaller tiles
not all have the same depth (cf. Figure 8(e)) or the sum of
their lengths does not add up to the larger tile’s side lengths
(cf. Figure 8(f,g)). For aesthetical reasons we further restrict
the maximum aspect ratio of the tiles to be maximally 2:1.
Optionally we may also restrict the maximal tile size.
5.1. Adaptive GIzMO generation
The image mosaic generation is now done just as in the
previous regular case (see Section 4.3). The only difference
is that for large tiles, which are in general rectangular and not
square, we now crop the inner part of the best (square) image

c 2009 The Authors
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

D. Pavi´c et al. / GIzMOs

2251

tion, still all important features are sufficiently well captured.
Since we are able to appropriately adjust the degree of noisiness by changing the feature threshold, we can easily vary
between the pure artistic and pure approximative image mosaics. For more insight into this please see the accompanying
video.
6.1. User study

Figure 8: Adaptive tiling. Starting from the regular grid in
(a) a number of successive merging operations are shown
(b)–(d) where the newly merged tiles are yellow. The lower
row shows some examples where another collapse of the
large blue tile in the upper direction is not possible because
of the red tiles.

match from the database. The larger the ratio of the tile the
larger is the error we are making because the average colour
of the cropped region might differ from the average colour of
the entire image. Since the large tiles are non-feature regions
anyway this error is in general negligible.

6. Results
All our experiments were performed on a AMD64 2,2GHz
PC with 2GB RAM. Computing GIzMOs never took more
than a few minutes for high-resolution input images and
high tiling resolutions of several thousand tiles. In order to
speed-up the computation process we cache all precomputed
descriptor data from the database in the main memory. This
caching process takes about 1 min.
Figures 9 and 10 show that our method is able to handle
all kinds of input images. Although we restrict our method
to axis-aligned tiling and do not apply any colour correc-

In order to evaluate the quality of the proposed shape descriptors we have made a user study with 62 testing persons
(31 females and 31 males). During the test each subject was
shown the same 15 mosaicing examples, but with randomly
chosen descriptors: either constant or bi-linear or bi-quadratic
B´ezier patches, in each case 5 examples. No binary classification (Section 4.2) was done.
In Figures 2, 3, 5, 9, 10 some of the examples used in
the study are shown. We have created for each example and
for each metric image mosaics in 11 different tiling sizes
T = 500, 700, . . . ,2,500, resulting in a total of 15 · 11 · 3 =
495 GIzMOs used for the study.
The procedure of the test was as follows: First, each subject was asked a question like ‘Which animal/famous person/object is shown in the mosaic?’. Then the mosaics were
shown with increasing resolution, each resolution for the duration of 2s. The used metric, the time as well as the tiling resolution the testing person needed in order to answer the given
question were logged. The same question had to be answered
also for the original image in order to be able to differentiate
between wrong cognition and wrong knowledge.
The evaluation of this study is shown in Table 1. We have
used the same number of images for each descriptor (i.e.
62 subjects ∗ 15 examples/3 metrics = 310 images). The
columns ‘correct’, ‘wrong’ and ‘timeout’ show the percentage of images that were recognized correctly, wrongly or
not at all, respectively. In Figure 11, we see the number of
given correct answers against the needed number of tiles. The
higher degrees polynomials obviously lead to better perception, i.e. not only that more subjects were able to answer the

Figure 9: Adaptive Tiling. From left to right: input image (the visualization of the binary classification shown as inset), a
regular GIzMO (T = 2,120) and then two adaptive GIzMOs created by restricting the max. tile size to be two (T = 1,208) or
five (T = 979) times the minimal tile size, respectively. The approximation of important features remains unperturbed by the
adaptive tiling process while the number of tiles is reduced considerably.
c 2009 The Authors
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

2252

D. Pavi´c et al. / GIzMOs

Figure 10: More GIzMOs. Here we see in each row from left to right the original image (binary classification shown as inset),
a regular GIzMO and an adaptive GIzMO. The tilings were: building regular T = 2,120 and adaptive T = 1,146, giraffe regular
T = 2,120 and adaptive T = 1,274, airplane regular T = 972 and adaptive T = 571, gizmo regular T = 2,961 and adaptive
T = 1,469.
given question, but also they needed significantly less tiles
(time) in average for the answer.
A very interesting result is shown in the last column of
Table 1. After each example we have shown the original image as well as all the three final (T = 2,500 tiles) mosaicing

solutions asking for the subjectively best solution. The majority of the subjects (80%) preferred the bi-quadratic degree
descriptors and explained that they were judging the best approximation quality, i.e. the best perceptibility. However the
subjects who have chosen the lower degree descriptors (20%)
explained their decision by saying that they were judging

c 2009 The Authors
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

D. Pavi´c et al. / GIzMOs
Table 1: Statistics of our user study for the three polynomial
descriptors.

Descriptor

2253

out of regular ones and hence allowing for reducing the number of tiles in the mosaic without losing the approximation
power of the important parts in the scene.

Correct (%) Wrong (%) Timeout (%) Best (%)

References
Constant
Bi-linear
Bi-quadratic

32
63
79

9
15
8

59
22
13

6
14
80

[BBFG07] BATTIATO S., BLASSI G. D., FARINELLA G. M.,
GALLO G.: Digital mosaic frameworks - an overview. In
Computer Graphics Forum (2007), pp. 794–812.
[BL03] BROWN M., LOWE D. G.: Recognising panoramas.
In ICCV ’03: Proceedings of the Ninth IEEE International
Conference on Computer Vision (2003), p. 1218.
[dBGP06] DI BLASI G., GALLO G., PETRALIA M. P.: Smart
ideas for photomosaic rendering. In Eurographics Italian
Chapter Conference (2006), pp. 267–272.
[Far02] FARIN G.: Curves and Surfaces for CAGD: A
Practical Guide, Morgan Kaufmann Publishers Inc., 2002.

Figure 11: This chart shows the number of correct answers
given during our study. The curves show significant domination of the bi-quadratic descriptor especially for the small
tiling resolutions.

the artistic impression, i.e. the more pronounced mosaicing
effect. This is the reason why we introduced our binary classification in order to satisfy both, high approximation quality
as well as artistic mosaicing appearance.

7. Conclusion
In this paper we have presented a method for creating genuine image mosaics (GIzMOs), axis-aligned arrangements
of images without applying any kind of colour correction.
The source images were downloaded from the Internet and
used to create our image database. By using only appropriate
images from the database we improve the mosaicing quality
of the final results. For arbitrary input background images
we are able to create GIzMOs in only a few minutes even for
high tiling resolutions and this is in particular due to our very
simple shape descriptors which were used for the matching.
In order to achieve high approximation quality and to preserve the mosaicing effect in our results, we have applied
binary classification of the tiles, distinguishing between low
and high contrast regions and using different strategies for
both types. Our mosaicing method was evaluated in the context of a user study, which has proven the suitability of our
shape descriptors as well as the fact that image mosaics are
judged either with respect to the approximation quality or
with respect to the artistic appearance. Finally we have introduced a simple greedy approach for creating adaptive tilings

[FR98] FINKELSTEIN A., RANGE M.: Image mosaics. In EP
’98/RIDT ’98: Proceedings of the 7th International Conference on Electronic Publishing, Held Jointly with the 4th
International Conference on Raster Imaging and Digital
Typography (1998), pp. 11–22.
[GGK02]
GOTSMAN C., GUMHOLD S., KOBBELT L.: Simplification and compression of 3d-meshes. In Tutorials on
Multiresolution in Geometric Modelling. Springer-Verlag,
Berlin, 2002.
[GW01]
GONZALEZ R. C., WOODS R. E.: Digital Image
Processing. Addison-Wesley Longman Publishing Co.,
Inc., Boston, MA, USA, 2001.
[Hau01]
HAUSNER A.: Simulating decorative mosaics. In
Proceedings of the 28th Annual Conference on Computer Graphics and Interactive Techniques SIGGRAPH
’01 (2001), pp. 573–580.
[HE07] HAYS J., EFROS A. A.: Scene completion using
millions of photographs. ACM Transactions on Graphics
(SIGGRAPH ’07) 26, 3 (2007).
[JFS95] JACOBS C. E., FINKELSTEIN A., SALESIN D. H.: Fast
multiresolution image querying. In SIGGRAPH ’95: Proceedings of the 22nd Annual Conference on Computer
Graphics and Interactive Techniques (1995), pp. 277–286.
[KEA06] KIM K., ESSA I., ABOWD G. D.: Interactive mosaic generation for video navigation. In MULTIMEDIA
’06: Proceedings of the 14th Annual ACM International
Conference on Multimedia (New York, NY, USA, 2006),
ACM, pp. 655–658.
[KGFC02] KLEIN A. W., GRANT T., FINKELSTEIN A., COHEN
M. F.: Video mosaics. In NPAR ’02: Proceedings of the

c 2009 The Authors
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

2254

D. Pavi´c et al. / GIzMOs

2nd International Symposium on Non-Photorealistic Animation and Rendering (2002).
[KP92]
KASSON J. M., PLOUFFE W.: An analysis of selected
computer interchange colour spaces. ACM Trans. Graph.
11, 4 (1992), 373–405.
[KP02]
KIM J., PELLACINI F.: Jigsaw image mosaics. In
SIGGRAPH ’02: Proceedings of the 29th Annual Conference on Computer Graphics and Interactive Techniques
(2002).
LALONDE J.-F., HOIEM D., EFROS A. A.,
[LHE∗ 07]
ROTHER C., WINN J., CRIMINISI A.: Photo clip art.
ACM Transactions on Graphics (SIGGRAPH ’07) 26, 3
(2007).
[LHM06] LAI Y.-K., HU S.-M., MARTIN R. R.: Surface
mosaics. Vis. Comput. 22, 9 (2006), 604–611.
[MA06] MOUNT D. D., ARYA S.: Approximate nearest
neighbor library, 2006.
[OK08]
ORCHARD J., KAPLAN C. S.: Cut-out image mosaics. In NPAR ’08 (2008), pp. 79–87.

[RTMF07] RUSSELL B. C., TORRALBA A., MURPHY K. P.,
FREEMAN W. T.: Labelme: a database and Web-based tool
for image annotation. International Journal of Computer
Vision (2007).
[Sil97] SILVERS R.: Photomosaics. Henry Holt and Co.,
Inc., 1997.
[SLK05] SMITH K., LIU Y., KLEIN A.: Animosaics.
In SCA ’05: Proceedings of the 2005 ACM SIGGRAPH/Eurographics Symposium on Computer animation (2005), pp. 201–208.
[Sze96]
SZELISKI R.: Video mosaics for virtual environments. IEEE Computer Graphics and Applications 16, 2
(1996), 22–30.
[TFF07] TORRALBA A., FERGUS R., FREEMAN W. T.: Tiny
Images. Tech. rep., Computer Science and Artificial Intelligence Lab, Massachusetts Institute of Technology, 2007.
[VT00] VELTKAMP R., TANASE M.: Content-based image
retrieval systems: A survey, 2000.
[Yav]

YAVARI A.: Patchworkr: www.fumpf.de/patchwork/.

c 2009 The Authors
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

