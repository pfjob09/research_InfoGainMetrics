DOI: 10.1111/j.1467-8659.2008.01314.x

COMPUTER GRAPHICS

forum

Volume 28 (2009), number 6 pp. 1561–1571

A Time Model for Time-Varying Visualization
M. Wolter, I. Assenmacher, B. Hentschel, M. Schirski and T. Kuhlen
Virtual Reality Group, RWTH Aachen University, Aachen, Germany

Abstract
The analysis of unsteady phenomena is an important topic for scientific visualization. Several time-dependent
visualization techniques exist, as well as solutions for dealing with the enormous size of time-varying data in
interactive visualization. Many current visualization toolkits support displaying time-varying data sets. However,
for the interactive exploration of time-varying data in scientific visualization, no common time model that describes
the temporal properties which occur in the visualization process has been established. In this work, we propose a
general time model which classifies the time frames of simulation phenomena and the connections between different
time scales in the analysis process. This model is designed for intuitive interaction with time in visualization
applications for the domain expert as well as for the developer of visualization tools. We demonstrate the benefits
of our model by applying it to two use cases with different temporal properties.
Keywords: time model, time-varying data, scientific visualization
ACM CCS: I.3.6 [Computer Graphics]: Methodology and Techniques; I.6.6 [Simulation and Modelling]: Simulation Output Analysis

1. Introduction
Today’s large data sets are typically time-varying. While the
complexity of data for single time instants grows, the temporal resolution grows even larger. To deal with this problem,
several algorithms and systems for analysing time-varying
scientific data exist. This includes time-dependent visualization techniques such as pathlines or 4D-isosurfaces as well as
the efficient application of originally time-independent techniques to the discrete time steps of large, time-varying data
(e.g. 3D-isosurfaces or cutplanes).
The visualization task we refer to is the interactive analysis
of scientific data by domain experts in contrast to the use of
visualizations for presentation purposes. Therefore, we put
a focus on interaction with time-varying data in our work.
In order to combine time-dependent and time-independent
visualizations in an interactive exploration process, to the
best of our knowledge, no common time model describing the
time frames and temporal relations in scientific visualization
exists.
The contribution of this paper is a time model which classifies and correlates the different time frames occurring in
scientific visualization. The model is independent from a
c 2009 The Authors
Journal compilation c 2009 The Eurographics Association and
Blackwell Publishing Ltd. Published by Blackwell Publishing,
9600 Garsington Road, Oxford OX4 2DQ, UK and 350 Main
Street, Malden, MA 02148, USA.

specific implementation. We identify three major benefits.
First, a vocabulary of concepts is established. Second, the
time model is beneficial as a design help for software solutions for time-varying problems. By allowing non-uniform
relations between data and observed animation, and by exploiting temporal recurrence, an efficient description of timevarying data is made possible. This is particularly useful for
more complex use cases, where different simulations or visualization objects have to be combined into one visualization.
Third, for the user of such a system, an easy and intuitive
interaction with temporal properties in the user’s domain is
possible, which is based on consistent operations.
This work starts with a discussion of requirements for
time-varying visualization in Section 2. In the Section 3, we
introduce and explain our time model in detail. This model
is compared to related work in the field of visualization of
time-varying data in Section 4. Section 5 defines consistent
operations on the time model, which are applied to two use
cases in Section 6.
2. Requirements
In order to allow for an interactive exploration of timedependent data, a number of requirements have to be

1561

1562

M. Wolter et al. / A Time Model for Time-Varying Visualization

satisfied. While it is certainly possible to comply with a suitable subset of these on a case-by-case basis, only a universal
solution provides enough flexibility for coping with arbitrary
use cases or even combinations thereof. Along with ensuring the correctness of the depiction of a given phenomenon,
the efficiency of the visualization process can be drastically
increased by sophisticated data reuse schemes. Thus, especially when considering the increasing size and complexity
of contemporary data sets, the potential for data reuse is to
be utilized wherever possible.
As simulated and/or measured, data can stem from time
spans of very different orders of magnitude; a mapping to
time as perceived by the user has to be performed. Thus,
depending on the context of the phenomenon under investigation, centuries and years as well as milliseconds and microseconds are scaled to manageable and perceivable time
intervals of tens of seconds or minutes. Besides granting the
user full control over time and its progression, correct simultaneity is vital, i.e. all data displayed at any given time has
to correspond to the same instant in the original data time
frame [BJ96]. Furthermore, for a natural perception of the
simulated process, the progression of time during visualization is typically governed by a (linear) mapping from the
time frame of the simulation to time as naturally experienced
by the user rather than by a sampling of the resulting data.
In addition, the mapping of data values to time instants or
intervals has to be highly flexible, as different time-dependent
phenomena exhibit a large variety of characteristics. Besides
strictly linear sequences, cyclic and oscillating processes or
combinations thereof are to be supported as well. Examples
for the latter two include applications from mechanical engineering such as rotary pumps or piston engines. As such data
are typically given in the form of discrete time steps, a nonuniform distribution according to importance or dynamics of
their content is desirable as well.
Furthermore, both simulation results and visualization objects can consist of a mixture of static, periodic and aperiodic
components. This comprises, for example, a time-dependent
flow field within a static environment or particle traces over
multiple iterations of a periodic flow phenomenon. Data reuse
by exploiting symmetries, e.g. spatial symmetry in the simulation or temporal recurrence for periodic phenomena, is vital
for minimizing memory consumption. In addition, symmetry
can considerably reduce the computational effort required to
display and compute visualizations.
Finally, in order to combine multiple phenomena into a
single expressive visualization, the results of different simulation runs have to be mapped to a single overall time frame.
In addition, any constraints regarding sampling frequency (or
differences thereof) of individual simulation results have to
be removed. This allows for the comparison of simulation
runs with different boundary conditions as well as the composition of simulation results for different parts of a single

process. In the former case, results of different simulations
can be displayed synchronously for a visual comparison regardless of the respective simulation time frame. An example
is the simultaneous depiction of the flow fields in an internal combustion engine for varying revolutions per minute. In
the latter case, multiple simulation results corresponding to
different stages of a given process can be combined into a
single meaningful visualization. Examples include the concatenation of the four phases of operation for a four-stroke
engine, i.e. air intake, compression, combustion and exhaust
stroke, which are typically simulated separately due to being
focused on different physical phenomena. The same applies
to multi-scale visualizations combining simulations for the
same process on different scales, e.g. a microstructure simulation for a gear wheel embedded in a large-scale welding
simulation.
3. Time Model
In order to satisfy these requirements, our time model incorporates the notion of different time frames and mutual
conversion schemes, as well as flexible means for mapping
instants and intervals from such time frames to specific data
values. We have chosen the term time frame in favour over
time scale or time perspective as we understand it as a frame
of reference rather than a scale of measurement.
Different time frames are necessary, as data have different temporal properties. For example, the time frame used
to simulate atmospheric processes will be different from the
amount of time needed to visualize this process. In the following, we will use the word ‘simulation’ interchangeably
for all kinds of scientific data, simulated or measured.
Three time frames are fundamental for the time model
and implicitly exist in most works concerning time-varying
visualization:
1. Of capital importance, but rarely named, is the user
time, that is, the real-time we live in and that we perceive. It is also the time in which user reactions, interactions and run times are measured.
2. For all time-dependent processes, a simulation time is
defined to describe the change of time in the simulated
process.
3. Most simulations produce data in form of discrete time
steps, which are time instants of the simulated process.
Therefore, each time step has a single simulation time
for which it is valid.
Later, we will augment these three fundamental time
frames by two auxiliary time frames which help modelling
certain relations. According to the classification for information visualization by Aigner et al. [AMM∗ 07], user time
and simulation time are both continuous and linear, but not

c 2009 The Authors
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

M. Wolter et al. / A Time Model for Time-Varying Visualization

1563

Figure 1: Illustration of our time model, classified in continuous and discrete time frames. Half-loop arrows indicate a cyclic
time frame. Each simulation has its own simulation time frame and discrete time frames, while visualization time and user time
are global.

ordinal. Simulation time may even be cyclic, as some processes are cyclic in nature and can be consecutively repeated.
In addition, we assume an ordered time without branching.
If we have a simulation with branching time, that is several
variants are simulated, we treat these variants as independent
simulations. We further assume a dynamic representation of
time, which means that the time dependency of data is conveyed directly by the user time.
Figure 1 depicts the time frames and their dependencies
in our proposed time model. While the three time frames
listed above form the basis of the model, two additional time
frames (i.e. the visualization and time index time frame) are
used for flexible interaction with the time model. This allows
for mixing continuous and discrete time as well as cyclic
and acyclic processes in a consistent model. If all data to be
visualized are continuous (as it has an analytical description
or it can be interpolated efficiently based on existing data),
the discrete frames of our model may be left out.
In the following sections, we will explain the time frames
from top (continuous user time) to bottom (discrete time
steps) (see Figure 1).

3.1. Continuous time frames
Continuous data d is defined as a function of time, that is
d = f (t) for some time-dependent function f and a time
instant t.
The first time frame is the user time frame U ⊂ R+ . Like
natural human perception, this time frame is linear, continuous and does not allow cycles nor running backwards. In this
time frame, rendering speed, interaction responses and computation run times are measured. Although time in computer
systems is always discrete in nature, it can be perceived as
continuous due to a high discrete resolution. However, im-

ages are drawn with a frequency depending on the display
device. Visualizations which change time steps faster than
the display frequency will not be shown correctly, as only a
non-sufficient temporal resolution is available on the display.
The visualization time frame V = [0, 1] ⊂ R is a normalized time frame describing the complete time-dependent process. As the visualization time may be cyclic, that is the
process is displayed in a cyclic way, we have to store the
start point u 0 and end point u 1 (with u 0 , u 1 ∈ U ) of the visualization interval [0, 1] in user time. We will denote the
interval [u 0 , u 1 ] as the user window. Using these time in0
ˆ
,
stants, a mapping uˆ : U → V is defined as u(u)
= uu−u
1 −u0
with a time instant u ∈ [u 0 , u 1 ]. The time instants u 0 and u 1
change with every repetition of the visualization time, as a
cyclic time frame is unrolled on the strictly non-cyclic user
time frame. The length of the user window determines the
time required to show the process once in a dynamic representation. The visualization time frame allows to combine
different simulations with different temporal properties in a
single visualization, as we will see below. In addition, it enables abstract interaction with the process without knowing
the simulation details (see Section 5.2).
The continuous simulation time frame S = [sstart , send ] ⊂
R is the time frame used in the simulation. That means,
this time frame determines the units of time used for timedependent scalar, vector or tensor data (e.g. time-gradients,
velocity or acceleration). All data derived from a simulation,
for instance, context geometry or annotations, are defined
with respect to this time frame. It is obvious that the simulation time frame may be quite different from the user time
frame in terms of measurement scale.
For each distinct simulation k, the simulation time S (k)
is associated with an interval of visualization time [v (k)
0 ,
ˆ (k) : V → S (k) with
v (k)
1 ] ⊆ V with a mapping function v
(k)
(k)
and vˆ (k) (v1(k) ) = send
. Several simulations or
vˆ (k) (v0(k) ) = sstart

c 2009 The Authors
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

1564

M. Wolter et al. / A Time Model for Time-Varying Visualization
Visualization time

(a)

Single
simulation

(b)

Concatenated
simulations

(c)

Overlapping
simulations

0.0
s (0) start
s (0) start
s (0) start

1.0

s (1) start
s

(0)

s

end

s
s

(1)

s

end

(2)
end

(0)
end

s

(1)
start

s (0) end

s (2) start

s

(2)
start

(1)
end

s (2) end

Figure 2: Examples for possible relations between different simulations S (0) , S (1) , S (2) in a common visualization time frame.
(a) In most cases, only a single simulation is examined. Different simulations may describe parts of a single process and are
concatenated (b),if they specify consecutive stages, or overlapping (c), if they describe multiple scales.

visualization objects with different simulation time frames
can be combined together in the shared visualization time
frame. This allows for concatenated simulations or overlapping simulations (see Figure 2). Examples for these combinations of simulations are stated in Section 2.
Other names used in the literature for the simulation time
frame are solution time (e.g. EnSight [CEII]) or data time
[BJ96]. The simulation time may have an optional associated
domain time frame, which describes the simulation not with
a time value, but a domain specific value or function. This
value or function may be more intuitive for the scientist,
for instance, degrees crank angle for an engine piston or
a date for weather simulations. In addition, granularities to
describe conceptual units [ABM∗ 07] can be interpreted as
a domain time frame. A domain time frame is especially
useful for communication with experts from other fields than
the simulation experts, as these typically do not have indepth knowledge about the simulation specific data such as
simulation time.
3.2. Discrete time frames
Discrete data D is only defined at discrete time instants t i :
D = {(t 0 , d 0 ), (t 1 , d 1 ), . . . , (t n−1 , d n−1 )}. Scientific simulation data often comes in this form, where the discrete data
d i are simulation data at specific, possibly non-uniformly
distributed time instants t i of a simulation with a finer time
resolution. We assume different discrete data D (k) for each
simulation time frame S (k) . Therefore, as each discrete simulation has its own discrete time frames, we will use the
notation without the index k to distinguish different simulations from now on.
To provide a more flexible handling of time steps (see
Sections 5.1 and 5.2), we introduce an additional time index
frame of discrete time indices I, with I = (i0 , . . . , im−1 ) :
ij ∈ N0 . The number of time indices m may be different
from the number of available time steps n. The additional
indirection allows for easier reuse and reordering of time step

data. This technique is often used in databases, as changing
indices avoid moving or rearranging data in memory at the
cost of one indirection in main memory.
Mapping the simulation time to time indices closes the
gap between continuous and discrete time frames. The simulation mapping sˆ : S → I is a mapping with sˆ (sstart ) = i0
and sˆ (send ) = im−1 . It is surjective, as all time indices need a
valid simulation time, and monotonically increasing, as both
time frames proceed forward in time.
The reversed (not mathematically inverse) function sˆ −1
assigns to each time index an interval of simulation time for
which the time index is valid. The co-domain of sˆ −1 is a set of
time intervals which form a partition of the complete interval
[s start , s end ]. This function is a bijection, such that all time
indices span the whole simulation range, and each interval is
only valid for a single time index.
One example is to use a nearest neighbour mapping, that
is a time index for a time step with simulation time s i is valid
for [ si +s2i−1 , si +s2i+1 ). For the first and last indices i 0 and i m−1
no predecessor or successor exists, and at the same time, the
interval is invalid before s start or after s end , respectively. This
m−1
1
) and [ sm−2 +s
, sm−1 ]
results in half-sized intervals [s0 , s0 +s
2
2
for the first and last time index, as we have m time indices,
but m − 1 simulation intervals in between.
The time step frame is composed of the simulation data
output in the form of a set of discrete time steps P =
{p0 , . . . , pn−1 } : pi ∈ N0 . Each time step p i is valid at a
specific time instant s i , which results in the complete discrete data D = {(s 0 , p 0 ), . . . , (s n−1 , p n−1 )}. Time indices
are assigned to time steps by a mapping function iˆ : I → P .
This mapping is neither injective, as different indices may
point to the same time step, nor surjective, as not all time
steps have be covered. The number of time steps determines
the necessary size needed on secondary storage and in main
memory. For all time-independent visualization techniques
(e.g. isosurfaces, cutplanes or dynamic geometries), typically
one result is produced for each time step. Therefore, the

c 2009 The Authors
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

M. Wolter et al. / A Time Model for Time-Varying Visualization
Table 1: Summary of the time frame notation with notation and
numeric domain of the five time frames and the corresponding mappings between time frames (denoted with a hat).
Continuous time frames
User time
↓ uˆ
Visualization time
↓ vˆ
Simulation time
↓ sˆ

U ⊂ R+
0
ˆ
u(u)
= uu−u
1 −u0
V = [0, 1] ⊂ R
(k)
(k)
(k)
(k)
vˆ (k) (v0 ) = sstart , vˆ (k) (v1 ) = send
+
S = [sstart , send ] ⊂ R
sˆ (sstart ) = i0 , sˆ (send ) = im−1
Discrete time frames

Time indices
↓ iˆ
Time steps

I = (i0 , . . . , im−1 ) : ij ∈ N0
iˆ : I → P
P = {p0 , . . . , pn−1 } : pi ∈ N0

number of physical time steps n, i.e. the time steps which exist on a file system, determines the necessary size of buffers
for different discrete visualization data.
The introduced notation is summarized in Table 1.

4. Related Work
Several time-dependent visualization techniques exist, as
well as visualization toolkits which support displaying timevarying data sets. We will list and discuss selected workings
we consider closely related and we will compare them to our
time model proposed in the previous section. In addition, different time models exist in other disciplines, some of which
we relate to our time model for scientific visualization.
Recently, Biddiscombe et al. [BGM∗ 07] described the
support of temporal information in the pipeline-based
visualization toolkit (VTK). Time-dependent data are supported as discrete and continuous data, with the possibility
to use interpolation to transform a set of discrete time steps
into a continuous source of data. Special components allow caching of already requested time steps. Adaptation of
different pieces of timing information is possible with a shiftand-scale operator. While the authors describe an implementation for time-varying data structures and algorithms in a
specific toolkit, we introduce a semantic model to use such an
implementation.
The ParaView software [KSNLC], which is based on VTK,
supports interaction with an animation of all time steps in the
form of VCR-like controls. Three different animation modes
are provided, a sequence of a defined number of frames, an
animation of a specific duration and a sequence of all time
steps. As in most other toolkits, the focus lies on a sequence
of discrete time steps and images, but not on the temporal

1565

correlation of the analysed data. Additionally, no interaction
is possible during animation.
The commercial EnSight software [CEII] provides a user
interface for mixing continuous and discrete data, as well as
visualization of data objects with different timing information, so called timesets, on a composite timeline. Using these
timesets, several simulation objects can be integrated in a
single visualization session. However, as the technical realization is embedded in a commercial system, the underlying
model is not applicable to other systems.
Concerning time-varying visualization, two main streams
can be identified. First, time-dependent visualization techniques such as particle tracing [EGM04] or time-varying
isosurfaces [WB98]. Second, algorithms and systems which
are able to cope with the enormous amount of data
which are necessary to apply time-independent visualization
techniques to time-varying simulations, for instance, volume rendering [MC00]. In publications from both streams
we have found no explicit time model underlying the
algorithm.
Bryson et al. [BJ96] discussed time management in the
context of Virtual Reality applications for scientific visualization. Their time management structure is deeply related
to their software structure and therefore not applicable as a
general model. Nonetheless, as they address the problem of
visualizing unsteady data in a consistent way, it is closely
related to our own work.
In the field of information visualization, Aigner
et al. [AMM∗ 07] recently described a taxonomy for timedependent visualization. They demand more effort in the research related to interaction with time-oriented data, a topic
we contribute to here.
Concepts to design Visual Analytics systems for timeoriented data were also proposed by Aigner et al. [ABM∗ 07].
They identify three main tasks to create time-oriented Visual
Analytics systems: (1) modelling of time and data structures
for time-oriented data, (2) computational analysis of timeoriented data and (3) visualization and interaction on timeoriented data. Related to the described design concepts, we
propose a more specific solution to the first identified task
for scientific visualization. Our time model serves as a basis
for visualization, interaction and computation tasks and is
therefore designed to support these components.
In other scientific areas, models describing the temporal
relations exist. For instance, Jensen et al. [JS96] propose a
time model which uses sets of bitemporal chronons (i.e. time
instants) to describe the two different time intervals of a fact
in a database: the time interval in which a fact is really true
in the modelled reality (valid time) and the time interval in
which this fact is current in the database (transaction time).
While a similar problem can emerge in visualization systems,
when visualized data do not match the last parameter change

c 2009 The Authors
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

1566

M. Wolter et al. / A Time Model for Time-Varying Visualization

Figure 3: Two of the basic operations on the time model. The time indices in the depicted model cover twice the physical
time steps using an embedding operation. Left: selecting a sub-range of visualization time selects from each simulation the
appropriate sub-parts. Right: a stride of two for a single simulation excludes every second time step and therefore reduces
computational effort.
(e.g. as the parameter change is currently computed), we do
not discuss this problem here.
Frank [Fra98] discusses different types of times and relates different time scales with algebras, which consist of a
set of objects and operations defined on these sets. He hypothesizes that multiple non-compatible time models exist,
as each is linked to specific processes and the corresponding
space models. While we do not define our time frames as
strict algebra, the sets defined by the time frames and the
operations defined on these sets (see Section 5) follow the
idea of defining operations which maintain consistency when
used on a time frame.
5. Time Operations
Based on the proposed model, several consistent operations
with the time-varying visualization are rendered possible.
Consistency is important to maintain coherence between different visualizations of the same data. Therefore, we define
a set of time operations on our proposed model which does
not invalidate the produced visualizations. The operations
are divided into two categories, modelling operations and
interaction operations.
5.1. Modelling operations
Modelling operations aid in the design and the setup of
visualization applications for specific simulations. From a
visualization point of view, most simulation data can be partitioned into static and dynamic components. For instance,
the casing of a pump usually defines a non-moving context
for the viewer, whereas impellers or screws change over time,
defining the dynamic parts of an animation. Much of the simulation topology can be exploited for visualization in order to
structure and to speed up the rendering process. For example,
a surface mesh can be extracted from the simulation grid and
is afterward decimated to a fraction of its original size.

Two of the modelling operations we propose target a low
memory footprint and the possibility to use optimized or
cached geometries for rendering. We describe three modelling operations which have proven useful for several of our
applications. However, for other problem cases, there may
be other operations to optimize the visualization setup.

5.1.1. Embedding
One property of the index mapping that is defined by iˆ is
that it allows the embedding of few discrete time steps into
a larger index scale (see Figure 3). For example, when iˆ
is chosen as iˆmod (ij ) = p(j mod m) with m = P , ij ∈ I , a
smaller number of physical time steps can be mapped to a
larger index range, for example to exploit recurrences in the
data set for cyclic processes. Increasing the number of time
steps by interpolating data as proposed by Biddiscombe et al.
[BGM∗ 07] is achieved by insertion of time indices directing
to the new time steps and adaption of sˆ and sˆ −1 to the new
discrete simulation time values.

5.1.2. Movement
In order to describe the animation of static and dynamic
objects, their visualization state has to be related to the simulation time. To provide a proper mapping for the visualization state for a given time instant from S, we have to
modify sˆ to sˆ ∗ : S → (I , M), M ∈ R4×4 . This is achieved by
ˆ : S → M that
an additional auxiliary transform function tr
takes as input a value of S and outputs a transformation matrix, which can then be applied to the visualization object.
Static components are mapped by sˆ ∗ to a constant index tuple
I = (i 0 ) and the identity matrix M = I4×4 . Basically the same
accounts for dynamic components; however, the tuple I may
ˆ is
consist of a number of elements and a more complex tr
needed in order to specify the state of the visualization for a
specific time instant in S.

c 2009 The Authors
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

M. Wolter et al. / A Time Model for Time-Varying Visualization

A general approach is to use a key frame mapping that
uses discrete key frames from the simulation data. Other
approaches can take knowledge of the domain expert into
account, for instance, the specification of a rotational axis
and angular velocity.

5.1.3. Events
Time instants, which describe the time an event happened
(e.g. a topological event or an annotation by the user), belong
to the simulation time frame, as they describe events related
to the simulated process. However, time instants do not have
a duration, like Euclidian points do not have a spatial size.
To be observable by a user, events are modelled by small
intervals of S enclosing the time instant of the event, with the
size of the interval chosen by the user.

5.2. Interaction operations
Interaction operations allow to describe interactions of the
user with the different time frames. This interaction with simulations and visualization objects should be possible during
the time-varying visualization, to enable the user to interact
with the visualized process, not only to examine it.
We restrict ourselves to basic interactions with the time
model only, which can then be used in specific applications.
Higher level interactions such as ‘browse for a time step in
any granularity’ can be constructed with the basic interactions. To be useable by a domain expert, these interactions
must be provided by a user interface, which is a problem not
addressed here.

5.2.1. Control
The most common time operation is changing the flow of
time [BJ96]. The user can stop the flow, speed it up or slow
it down. As this just changes the user’s perception of the
simulated data, all these operations can be performed by
ˆ If uˆ returns a constant
changing the user time mapping u.
value, the flow of time is stopped. By changing the user
window length u 1 − u 0 , the process is displayed slower or
faster.
Displaying a process backwards is possible by just changing the mapping uˆ to proceed backwards from visualization
time 1 to 0.

5.2.2. Selection
For the selection of specific time instants, two time frames
are recommended. Domain specialists can select a point in
time by a simulation time value s ∈ S, or, if available, by the
corresponding value from the domain mapping (e.g. crank
degrees). By using the normalized visualization time v ∈ [0,

1567

1], a more fuzzy time query is realized (e.g. ‘somewhere in
the first quarter of the process’).

5.2.3. Range
To investigate a sub-interval of the whole process, the displayed visualization time may be restricted to a subset of
[0,1], which is the length of the overall process. This implies
that only a subset of the whole process is displayed, which affects all different simulation data (see Figure 3, left). The user
time mapping uˆ must be adapted, as its co-domain changes.
By multiplying the length of the user window with the length
of the sub-interval in visualization time, the process is displayed in its original speed.
5.2.4. Subset
Operations on the time index frame modify the temporal
properties of all time-discrete visualization objects using this
specific mapping. By reducing the set of time indices, a subset of the original data is displayed. In contrast to the previous
sub-interval operation, this does not have to be a contiguous
subset, but may be some sort of strided subset (see Figure 3,
right). In addition, this operation affects a single discrete simulation or visualization object only. It produces a coarser time
resolution, as each time index spans a larger simulation time
interval, but at the same time fewer time steps are required to
be computed. By employing a non-uniform striding, ‘unimportant’ parts of the process require less computing power.

6. Application
In this section, we will show the benefits of the proposed
time model and operations for two specific use cases. We
have chosen two applications for different aspects of the design consequences. The blood pump application first shows
how temporal recurrence can be used to dramatically reduce
the memory footprint of an unsteady visualization. Moreover, it illustrates how visualization primitives with different
temporal resolutions can be integrated in one consistent depiction. The nasal airflow application shows how the model
helps to efficiently navigate through data sets consisting of
several thousands of time steps.
6.1. Blood pump
As an illustrating example for the operations mentioned in
Section 5.1, we describe the visualization of the MicroMed
Debakey VAD (Ventricular Assist Device) (MicroMed Cardiovascular Inc., Houston, TX, USA). The device consists of
three components: the straightener, the diffusor and the impeller, as shown in Figure 4. These components are integrated
into a cylindrical casing, which is not shown in the figure.
The pump is used to transport blood at desired flow rates
between 2 and 5 L/min. For the simulation described in this

c 2009 The Authors
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

1568

M. Wolter et al. / A Time Model for Time-Varying Visualization

Figure 4: Configuration of the MicroMed Debakey VAD . It is an example for a visualization that comprises different
geometries, exploits temporal recurrence of the simulation, and mixes different types of data. (a) The impeller is realized as a
single, analytically animated geometry. (b) Particle traces with history information are rendered over a continuous time frame.
(c) Static geometries are valid over the total time frame. (d) Discrete isosurfaces are extracted, visualized and embedded in the
total simulation time frame.
section, the impeller was set to a constant rate of rotation of
7500 rpm, yielding a flow rate of 2 L/min. All other parts of
the geometry remained static.
One impeller rotation is described by 200 time steps, i.e.
the impeller rotates by 1.8 degree between every two time
steps. The simulation step size is t = 4 · 10−5 s. The simulation was solved on an unstructured mesh consisting of
approximately four million tetrahedral cells for each time
step. The full data set size for a single rotation is 30 GB.
Empirical measurements show a mean velocity of about
0.4414 m/s which results in a mean residence time of 0.288 s.
Consequently, a portion of blood will be transported from
start to end in average in 36 full rotations.
As a first visualization technique, we used particle traces,
seeded at the device’s inlet. Assuming symmetry in the
flow field after a single rotation of the impeller, the traces
were calculated for a total run time of 40 rotations as an
off-line process (see Figure 4b). This results in a simulation
time interval of S = [ s start , s end ] = [ 0.0 s, . . . , 0.32 s ] for
the particle visualization.
As an additional, discrete visualization, we included an
isosurface over low pressure. The isosurface was computed
for a single rotation (i.e. 200 time steps) and then mapped using iˆmod to 8000 time indices for the entire 40 revolutions (see
Figure 4d) using the embedding operation from Section 5.1.
Without an additional indirection iˆmod from time indices to
time steps as described in Section 3.2, single time steps could
not be valid for multiple simulation time intervals, which
would lead to a blow-up of the data size by factor 40.

Using the operations from Section 5.1, the data set’s context information can be reduced to single geometries. On the
one hand, casing, straightener and diffusor are static pieces of
geometry. Therefore, they can be modelled with a single nonmoving geometry time step using the embedding operation.
On the other hand, the impeller is modelled as a continuously
rotating single geometry time step using the movement operation. This is implemented by an auxiliary transformation
ˆ which calculates a rotation along the central axis for a
tr,
given time instant of S based on the impeller’s angular velocity. Using these mappings, only 3.3 MB of geometry are
necessary in contrast to 670 MB, if the full geometry were
duplicated for each of the 200 time steps.
Table 2 summarizes the application of the time model
for this use case. The user window U = [ u 0 , u 1 ] is set
to [ 0, 0.32 s ], which corresponds to the original speed of
rotation. However, in the analysis process, the flow of time
is typically slowed down for a detailed investigation by the
user.
Using interpolation, the particle data can easily be extended to a quasi-continuous representation. Therefore, the
visualization contains continuous data (particle traces, impeller) as well as discrete data (isosurface). The mixing of
these types during the visualization can cause noticeable visual artefacts. Namely, small jumps in the isosurface display
are noticeable whenever the display switches to the next
time index. Therefore, the continuously animated impeller
will work very well in combination with particle visualization, but will lag after isosurfaces that are displayed using

c 2009 The Authors
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

1569

M. Wolter et al. / A Time Model for Time-Varying Visualization
Table 2: Time frames used in the blood pump application: Particles
are continuous, isosurfaces are available for 200 time steps which
repeat 40 times, geometry is either static or can analytically be
rotated.
Continuous time frames
u 1 − u 0 = 0.32 s
V = [0,1]
S = [0,0.32]

User time
Visualization time
Simulation time

Continuous time frames

Discrete time frames

Time indices
↓ iˆ
Time steps

Table 3: Time frames used in the nasal airflow visualization. A
single static geometry suffices for all 4000 time steps. Because the
simulation exhibits non-periodic behaviour, no other mappings apply. However, the user frequently changes the content of the time
index frame I and the corresponding mapping iˆ to reduce the number of physical time steps displayed. The user window U = [u 0 , u 1 ]
is set to 20 s, a value chosen by the user.

Part.

Isosurfaces

Geometry

–
–
–

I = (i 0 , . . . , i 7999 )
iˆmod (j ) = p(j mod 200)
P = {p 0 , . . . , p 199 }

I = i0
ˆ ) = p0
i(j
P = p0

User time
Visualisation time
Simulation time

Discrete time frames
Isosurfaces
Time indices
↓ iˆ
Time steps

a nearest neighbour mapping for a short time as outlined in
Section 3.2. One solution to this problem is to implement
ˆ to respect a nearest
the auxiliary transformation function tr
neighbour mapping as well, but this will in turn cause visual
artefacts with the particle visualization.
We implemented an interactive switching between differˆ based on user preference. Additionally, we
ent modes of tr
consider the visual artefacts that result from the mismatch between interpolated particles and nearest neighbour mapped
context geometry to be worse compared to the ‘jump’ artefact
from time discrete data such as isosurfaces with an interpolated rotating context geometry.
The simulation of the Debakey pump is a good example for
mid-sized data sets where temporal recurrence in simulation
and visualization must be used in order to work with and
analyse the data. Naive approaches, such as loading all data
for all rotations into main memory are bound to fail or do
not provide real-time interaction even for this moderate data
size.

6.2. Nasal airflow
In this section, we will discuss the time model’s application
to a simulation of the unsteady flow of nasal respiration. The
simulation results are discussed in-depth in [HSM06]. The
data set resolves a respiration cycle, i.e. one full inhalation
and exhalation period, with a high temporal resolution. For
the analysis, the second out of four such cycles was chosen,
resulting in 4000 discrete time steps and 120 GB of raw data.
With a simulation time step of t = 0.0925 in dimensionless
representation, this in turn results in a simulation time frame
of s start = 360.8425 and s end = 730.8425. Throughout the
entire cycle, the grid geometry remains fixed. Thus, it is
handled in the same way as the static geometry in the blood
pump example. Table 3 summarizes the formal notation of
the time model for the nasal airflow simulation.

u 1 − u 0 = 20 s
V = [0,1]
S = [360.8425, 730.8425]
Geometry

I = (i 0 , . . . , i 3999 )
I = i0
I and iˆ changed by user navigation
P = {p 0 , . . . , p 3999 }
P = p0

We selected this use case in order to describe navigation
through a large number of time steps for the interactive analysis of an evolving process. Straightforward visualizing every
single time step even with ten time steps per second would
result in a user window of several minutes. In addition, it
requires enormous computing resources for each update of
a visualization object, a topic not addressed here but, e.g. in
[MC00].
The visualization of this simulation is used in a collaborative research project. Therefore, not only fluid-mechanics
engineers but also physicians should be able to analyse the
simulated process. The example application’s user interface
provides the interaction operations described in Section 5.2.
A first benefit of the time model becomes clear when the
non-simulation experts, in this case physicians, interact with
the system. Using the respiration cycle as domain time frame,
they can, for instance, argument about what happens ‘at the
beginning of exhalation’ instead about specific time steps
unknown to them.
Figure 5 illustrates an example exploration of the respiration process. First, an overview of the entire cycle is given
by displaying the full range, but only at a low temporal resolution using the subset operation with a stride of 150 time
steps as shown in Figure 5 (top). This suffices to distinguish
inhalation from exhalation phase, and the transition in between. Here, subsetting not only makes the data viewable in
a reasonable amount of (user) time but also serves to reduce
the resource footprint of the corresponding visualization.
A region of high pressure is identified at the lower
turbinate. To investigate its evolution, the user confines the visualization to interesting sub-intervals by applying the range
operation in combination with a higher temporal resolution.
Both these tasks are executed iteratively, until eventually the

c 2009 The Authors
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

1570

M. Wolter et al. / A Time Model for Time-Varying Visualization

Figure 5: Overview and temporal zooming on the nasal airflow visualization. The images are screenshots together with their
simulation time value from the animated view. From a coarse overview of the time-varying respiration process two interesting
temporal regions are identified on the tip of the lower turbinate. For a more detailed analysis, a smaller range of simulation
time is selected and displayed with a finer temporal resolution.
desired sub-range is extracted at a sufficiently high resolution (see Figure 5 (bottom), using a stride of 25 time steps).
At the same time, the user refines the isosurface’s pressure
value. During this process, the computational effort does not
significantly increase, because an almost constant number of
discrete time steps is visualized at any given time. Figure 5
(bottom) shows the final outcomes of two user navigation
procedures: the first region [403.0, 404.0] ⊂ S shows a splitting of the pressure isosurface which merges again in the
second region at [523.9, 524.9] ⊂ S.
Analyzing simulations with a high temporal resolution,
such as the nasal airflow simulation, is a time-consuming task
without the aid of an appropriate time interaction. Consistent
operations on different time frames and intuitive interaction
help simulation experts as well as scientist from other fields
to explore the process under investigation.

The consistent mixture of discrete and continuous visualization in a single process visualization remains an open
question. Whether visual inconsistencies disturb the user and
if an interpolation of the underlying discrete data to continuous data is feasible must be decided depending on the process
under investigation.
In this work, we discussed the model without any dependency to a specific implementation. However, in order to
apply this model for visualizations with a large number of
time steps, at least two components should be elaborated in
the future: a user interface to navigate in the different time
frames and the coupling to algorithms or systems which are
able to cope with the required computational tasks imposed
by such a navigation.
Acknowledgements

7. Conclusion
In this work, we propose a time model for defining temporal
properties in scientific visualization. The components of the
model form a vocabulary for different temporal aspects of
visualization objects. Based on this model, several consistent
time operations for efficiency and navigation are discussed.
The proposed model is applied in several projects, of which
we have described two applications as use cases.
Regarding the requirements listed in Section 2, time control, non-uniformity, mixing of simulations and visualization objects with different temporal properties are possible
with the proposed model. Consistent operations on the time
frames were defined, some of which allow for data reuse for
certain temporal properties. The blood pump study shows
the ability to mix different time frames, from static geometry
to aperiodic and periodic visualizations of different temporal resolution. The nasal airflow study focuses on interaction
with a large number of time steps by user-guided selection of
certain time steps to explore time-varying simulation data.

This work has been partially funded by the German Research
Foundation (DFG) under grant WE 2186/5 and as part of the
Cluster of Excellence ‘Integrative Production Technology for
High-Wage Countries’. The authors would like to thank the
Institute of Aerodynamics (AIA) and the Chair for Computational Analysis of Technical Systems (CATS) at RWTH
Aachen University for the simulation data sets kindly made
available. We thank Irene Tedjo for the usage of the blood
pump prototype.

References
[ABM∗ 07] AIGNER W., BERTONE A., MIKSCH S., SCHUMANN
H., TOMINSKI C.: Towards a conceptual framework for visual analytics of time and time-oriented data. In Proceedings of the 2007 Winter Simulation Conference (2007),
pp. 721–729.
[AMM∗ 07] AIGNER W., MIKSCH S., M¨ULLER W., SCHUMANN
H., TOMINSKI C.: Visualizing time-oriented data – a systematic view. Computers & Graphics, 31, 3 (2007), 401–409.

c 2009 The Authors
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

M. Wolter et al. / A Time Model for Time-Varying Visualization
∗

[BGM 07] BIDDISCOMBE J., GEVECI B., MARTIN K.,
MORELAND K., THOMPSON D.: Time dependent processing in a parallel pipeline architecture. IEEE Transactions
on Visualization and Computer Graphics, 13, 6 (2007),
1376–1383.
[BJ96] BRYSON S., JOHAN S.: Time management, simultaneity and time-critical computation in interactive unsteady
visualization environments. In Proceedings of IEEE Visualization ‘96 (1996), pp. 255–261.
[CEII] COMPUTATIONAL ENGINEERING INTERNATIONAL INC.:
EnSight 8.2. Information available online at http//www.
ensight.com (last visited 2008–10-05).

1571

[HSM06] H¨ORSCHLER I., SCHRO¨ DER W., MEINKE M.: Comparison of steady and unsteady nasal cavity flow solutions
for the complete respiration cycle. Computational Fluid
Dynamics Journal, 15, 3 (2006), 354–377.
[JS96] JENSEN C. S., SNODGRASS R. T.: Semantics of timevarying information. Information Systems, 21, 4 (1996),
311–352.
[KSNLC] KITWARE, SANDIA NATIONAL LABS, CSIM-SOFT:
ParaView 3.0 – parallel visualization application. Available online at http//www.paraview.org (last visited 2008–
10-05).

[EGM04] ELLSWORTH D., GREEN B., MORAN P.: Interactive
terascale particle visualization. In Proceedings of IEEE
Visualization ‘04 (2004), pp. 353–360.

[MC00] MA K.-L., CAMP D. M.: High performance visualization of time-varying volume data over a wide-area
network. In Proceedings of the ACM/IEEE Conference on
Supercomputing (CDROM) (2000), p. 29.

[Fra98] FRANK A. U.: Spatial and Temporal Reasoning in
Geographic Information Systems (Chapter on ‘Different
Types of Times in GIS’). New York, Oxford University
Press, 1998, pp. 40–62.

[WB98] WEIGLE C., BANKS D.: Extracting iso-valued features in 4-dimensional scalar fields. In Proceedings
of IEEE Symposium on Volume Visualization (1998),
pp. 103–110.

c 2009 The Authors
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

