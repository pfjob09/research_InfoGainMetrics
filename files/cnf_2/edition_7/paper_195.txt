Paciﬁc Graphics 2009
S. Lee, D. Lischinski, and Y. Yu
(Guest Editors)

Volume 28 (2009), Number 7

Textures on Rank-1 Lattices
Sabrina Dammertz1

Holger Dammertz1

Alexander Keller2

Hendrik P. A. Lensch1

1 Ulm
2 mental

University, Germany
images GmbH, Germany

Figure 1: Comparison of standard textures with rank-1 lattice textures where each image contains the same number of picture elements
(64 × 64). Rank-1 lattices can very closely approximate the hexagonal lattice. This reduces aliasing and results, among other things, in
an improved reproduction of non axis-parallel lines as can be seen clearly in the middle image.

Abstract
Storing textures on orthogonal tensor product lattices is predominant in computer graphics, although it is known
that their sampling efﬁciency is not optimal. In two dimensions, the hexagonal lattice provides the maximum
sampling efﬁciency. However, handling these lattices is difﬁcult, because they are not able to tile an arbitrary
rectangular region and have an irrational basis. By storing textures on rank-1 lattices, we resolve both problems:
Rank-1 lattices can closely approximate hexagonal lattices, while all coordinates of the lattice points remain
integer. At identical memory footprint texture quality is improved as compared to traditional orthogonal tensor
product lattices due to the higher sampling efﬁciency. We introduce the basic theory of rank-1 lattice textures and
present an algorithmic framework which easily can be integrated into existing off-line and real-time rendering
systems.
Categories and Subject Descriptors (according to ACM CCS): Computer Graphics [I.3.7]: Three-Dimensional
Graphics and Realism - Color, shading, shadowing, and texture

1. Introduction
The traditional orthogonal equidistant lattice with its square
texture elements is far from optimal for storing and displaying general images. In the context of sampling for signal
processing this has been recognized already very early by
Petersen et al. [PM62]. They quantify the quality of a sampling lattice by its sampling efﬁciency
η :=

R
,
P

where R is the area of the in-circle of the fundamental
Voronoi cell and P denotes the volume of the fundamental
Voronoi cell itself in the dual lattice. The sampling efﬁciency
measures how well the sampling points of a given lattice
capture the isotropic spectrum of a band-limited function. In
this context a sampling efﬁciency of 100% would allow to
c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.
Published by Blackwell Publishing, 9600 Garsington Road, Oxford OX4 2DQ, UK and
350 Main Street, Malden, MA 02148, USA.

perfectly represent the band-limited function. Petersen et al.
derive the optimal sampling lattices for up to 8 dimensions.
While in 2D the optimal lattice is the well known hexagonal
lattice with η = 90.7%, the 2D square lattice has a sampling
efﬁciency of only η = 78.5%.
Hexagonal sampling lattices have been investigated for
more than 40 years, giving rise to the ﬁeld of hexagonal image processing. With applications in medicine, cameras, or
hexagonal displays, hexagonal image processing (HIP) is an
active ﬁeld in computer vision. Middleton et al. [MS05] give
a comprehensive survey of research on this topic and present
a framework for hexagonal image processing based on hierarchical aggregates.
Both, square and hexagonal texture elements have the
property of tiling the plane. Thus hexagonally and square

1946

S. Dammertz & H. Dammertz & A. Keller & H. P. A. Lensch / Textures on Rank-1 Lattices

5

resolution is achieved as there are more nearest neighbors,
i.e. adjacent lattice cells.

5

2

2
7
4

1

4

1

1
6

g

6

b1

3
0

0

2. Previous Work

3
0

b2

Figure 2: Generating a rank-1 lattice with n = 8 points and
the generator vector g = (1, 3). For each image the multiple
{ 8i · g}1 , i = 1, 6, 7 of the generator vector g is plotted. The
rightmost image depicts the whole lattice L8,(1,3) including
the Voronoi cells and the Delaunay triangulation.

sampled images can be considered as a periodic monohedral tiling [MS05]. These tiles represent the Voronoi cells
of the sampling points.√The basis of a hexagonal lattice is
BH = ((1, 0) , 0.5 · (1, 3) ), with the ﬁrst basis vector being parallel to the x-axis and the second one being rotated by
60◦ from the ﬁrst. Due to the irrational basis the points of
a hexagonal lattice cannot be represented exactly on a computer and it is impossible to tile the unit square. Generally,
for both the square and hexagonal lattice there are numbers
n of texture elements, for which the unit square I = [0, 1)2
cannot be tiled, e.g. for n being prime numbers.
In this paper we introduce rank-1 lattices for texturing with
the following advantages:
• An arbitrary number of texture elements can be used in
contrast to square and hexagonal lattices where the number of texture elements is always a product of x- and yresolution.
• All computations on rank-1 textures can be performed using fast integer arithmetic.
• The new texture scheme provides a close rational approximation to hexagonal textures for any resolution (even
power of 2). We also show the equivalence of hexagonal
and rank-1 textures for a subset of rank-1 lattices.
• We provide the necessary theory and algorithms to efﬁciently implement rank-1 textures into any rendering system.
Figure 2 conceptually illustrates the construction of a rank-1
lattice from a single generator vector (hence rank 1). Looking at the geometry of such lattices, a rank-1 lattice tiles the
plane by its Delaunay triangulation and Voronoi diagram.
Thus we can structure the pixel layout by the Voronoi cells of
a rank-1 lattice. Contrary to the hexagonal and square lattice,
rank-1 lattices perfectly tile the unit square I = [0, 1)2 periodically for any number n of points. Therefore more ﬂexibility is offered with respect to the shape of the image domain
and the number of pixels can be chosen freely. As shown
in Figure 3 for n = 56, rank-1 lattices can be chosen such
that they approximate the hexagonal grid. This results in a
sampling efﬁciency close to the optimum [MS05, PM62].
Compared to the traditional square lattice a better angular

A lot of research has been performed with respect to generating hexagonally sampled images. For example [MS05,
VVPL02, CVF08] address the problem of resampling between orthogonal and hexagonal images. However, hexagonal images have not been used as textures in rendering so
far.
In three dimensions, non-Cartesian lattices have been
studied with respect to the visualization of volumetric data.
[EVM08] use box splines in order to efﬁciently reconstruct
volumetric data sampled on the Body Centered Cubic (BCC)
lattice, taking advantage of its optimal spectral sphere packing property. In [NM02], 4D BCC grids are examined in the
context of visualizing 4D data sets. [Csb05] proposes a novel
high-quality reconstruction scheme to reconstruct volumetric data sampled on an optimal BCC grid.
Rank-1 lattice rules were ﬁrst proposed by Korobov
[Kor59] and have been widely examined since then [Nie92,
HW81]. Sloan and Joe [SJ94] give a mathematical survey on
rank-1 lattices. The basic theory of 2D rank-1 lattices with
maximized sampling efﬁciency is described in [DK08]. In
this paper the use of rank-1 lattices for anti-aliasing is analyzed and the idea of using rank-1 lattices for storage of images and building displays is ﬁrst mentioned without further
investigation. Here we develop the necessary data-layout,
neighborhood computation and addressing scheme for an efﬁcient use of rank-1 lattices for texturing. Additionally, we
provide numerical evidence for the improved texturing quality.
3. Rank-1 Lattices
In this section we give a theoretical overview of rank-1 lattices and how to approximate the hexagonal lattice.
The points xi of an s-dimensional rank-1 lattice [Nie92,
SJ94] in the unit cube I s = [0, 1)s
Ln,g := xi :=

i
g
n

i = 0, . . . , n − 1

(1)

1

are generated by using one suitable integer generator vector
g ∈ Ns for a ﬁxed number n ∈ N of points, where {x}1 denotes the fractional part of a vector x, i.e. {x}1 := x mod 1.
The mod 1 operation restricts the lattice to the unit square
resulting in a one-periodic pattern. In two dimensions the
generator vector corresponds to g = (g1 , g2 ) with g1 , g2 ∈
{0, . . . , n − 1} due to the modulo operation.
Generally, a lattice L in Rs is a discrete subset of Rs which
is closed under addition and subtraction and consequently always contains the origin. Lattices can be classiﬁed by their
c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

1947

S. Dammertz & H. Dammertz & A. Keller & H. P. A. Lensch / Textures on Rank-1 Lattices
1

square, η = 78.5%

g=

3
11

, η = 44.9%

g=

1
9

, η = 56.1%

1

1

1

1

1

1

1

1

1

1

g=

1
21

, η = 81.3%

g=

4
7

, η = 89.8%

1

hex., η = 90.7%

Figure 3: In the sequence of rank-1 lattices L56,g the sampling efﬁciency increases from left to right. For comparison the square
lattice is added to the left, whereas the hexagonal lattice is plotted to the right of the image sequence, each having n = 7 · 8 = 56
points. For this number of points both the square and hexagonal lattice do not tile the unit square.

rank r, which corresponds to the minimum number of vectors being necessary to generate L [SJ94]. Examples for lattices of rank 2 are the well known square and hexagonal lattice, for which the dimension coincides with the rank. Contrary, an s-dimensional rank-1 lattice is deﬁned by only one
generator vector g.
Figure 2 visualizes the geometric properties of rank-1 lattices. The solid lines depict the Voronoi diagram. Each cell is
generated by a lattice point and contains the points of the unit
torus, which are closer to this lattice point than to any other.
In addition, the lattice points are the centroids of the Voronoi
cells. The dashed lines represent the dual graph, i.e. the Delaunay tessellation, which can be generated by dividing the
fundamental parallelepiped along its shorter diagonal.
Note that even though for easier explanation we only show
rank-1 lattices on square regions in this paper, they are not
restricted to the unit square, but can be constructed for any
rectangular region for any number of lattice points by means
of weighted norms. This is illustrated in Figure 4.

g

g

Figure 4: Rank-1 lattices on a square and non-square region, having the same number of n = 30 lattice points. Note
that the left lattice is not a scaled version of the right one, as
the almost hexagonal Voronoi cells show.

only represents a valid basis for L if its determinant equals
det(L) [Kan87]. For example the vectors (b1 , b2 ), (b1 , g), as
well as (g, b2 ) or (g + b2 , b2 ) are bases of the rank-1 lattice plotted in the rightmost image of Figure 2. Contrary, the
vectors (b1 , 2 · b2 ) do not constitute a basis of L8,(1,3) . In the
following we will use a Minkowski reduced basis, as visualized by the vectors b1 and b2 in Figure 2. Such a basis
contains the s shortest linearly independent vectors and can
be computed by either a so-called basis reduction or a linear
search over all lattice points [Kan87, AG85, Hel85].

3.1. Lattice Bases
The basis of a lattice L is an s × s matrix B = (b1 , . . . , bs )
if every point in the lattice can be generated by an integer
linear combination of the basis vectors b1 , . . . , bs .
s

L = {x = B · l : l ∈ Z }

(2)

The number s of basis vectors is said to be the dimension of
L. The basis vectors and the origin span the so-called fundamental parallelepiped which induces a partition of Rs into
lattice cells of the same volume and orientation, as illustrated
by the red parallelogram Λ in the rightmost image of Figure
2.
Λ = Λ(b1 , . . . , bs )
= {γ1 b1 + . . . + γs bs : 0 ≤ γi ≤ 1, 1 ≤ i ≤ s},

(3)

A lattice has inﬁnitely many different bases which all share
the same determinant, i.e. the volume of the fundamental
parallelepiped. This means that det(L) := | det(B)| is invariant for each lattice L, therefore being called the lattice determinant. Hence, a matrix B of linear independent vectors
c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

3.2. Approximating the Hexagonal Lattice
We now investigate how to choose a 2D generator vector
to approximate the hexagonal structure by a rank-1 lattice.
This is related to densest sphere packing in two dimensions (circle packing) which has been studied for a long
time [CSB87,Mar03,Sie89] and is connected to constructing
lattices with longest possible shortest nonzero vectors for a
given lattice density det(L). This is equivalent to maximizing the minimum mutual distance in the sampling pattern
using the L2 norm on the unit torus. In computer graphics
this concept appears for example in Lloyd’s relaxation algorithm [Llo82], which yields sampling patterns with blue
noise properties when applied to an initially random point
set.
Similarly we can select rank-1 lattice generator vectors
such that the minimum distance in the lattice is maximized: From all possible generator vectors g = (g1 , g2 ) ∈
{1, . . . , n − 1}2 for given n, we choose one for which the cor-

1948

S. Dammertz & H. Dammertz & A. Keller & H. P. A. Lensch / Textures on Rank-1 Lattices
n

g

indexb1

indexb2

η

16384
30976
50176
135424
147456
160000
262144

(137, 13)
(188, 17)
(211, 116)
(13, 395)
(413, 27)
(430, 17)
(1, 1990)

2511
1
4756
52112
54627
65860
527

2512
1813
4757
52113
54626
65861
395

90.4%
90.3%
90.2%
90.6%
90.4%
90.5%
90.3%

Table 1: Lattice parameters for some maximized minimum
distance lattices used in the results section, including the indices of the basis vectors indexb1 and indexb2 , and the sampling efﬁciency.

responding rank-1 lattice Ln,g has the maximum minimum
distance [DK08]. As illustrated in the two rightmost images
of Figure 3, these so-called maximized minimum distance
rank-1 lattices closely approximate the hexagonal lattice.
A direct construction scheme for maximized minimum distance lattices is only known for n = 2Fm Mm points [CR97]
Fm
with FM and Mm given by the relation M
=
m
2 5 7 19
1 , 3 , 4 , 11 , . . .,

m=1...∞

which is the sequence of convergents of the
√
continued fraction equal to 3. In this context a convergent is a rational approximation of the irrational number,
which is represented by the continued fraction, with the oddnumbered ones being larger and the even-numbered ones being smaller than this number. In Appendix B we prove the
following theorem:
Theorem 1 Using a hexagonal lattice for texturing on [0, 1)2
with n = 2Fm Mm points is equivalent to using the maximized
minimum distance rank-1 lattice with n = 2Fm Mm points.
For other n the generator vector can be determined by computer search [DK08] to maximize the sampling efﬁciency.
Table 1 lists the lattice parameters and the sampling efﬁciency for some maximized minimum distance lattices
which are used in the results section. The sampling efﬁciency for those lattices is very close to the sampling efﬁciency of the hexagonal lattice. Thus maximized minimum
lattices can hardly be visually distinguished from the hexagonal lattice.
4. Rank-1 Lattice Texture Storage and Access
Contrary to the square lattice the points of a rank-1 lattice
cannot easily be addressed by 2-dimensional integer Cartesian coordinates, since they are not aligned in two orthogonal
directions. In this section we show how data on a rank-1 lattice can be stored as a linear (1D) array and how to compute
the address from 2D texture coordinates. In the following we
perform all computations on [0, n)2 by multiplying the original deﬁnition of Equation 1 by n. This allows computations
to use only integer arithmetic.
In order to store a complete rank-1 lattice texture we need

the number of texture elements n, a generator vector g and
the corresponding Minkowski reduced basis along with the
indices of the basis vectors being necessary for address computations. These indices can be acquired during the linear
search over all lattice points in the process of computing the
lattice basis. The image data is organized as a linear array
of size 3 · n (RGB color model). Exploiting the property that
every lattice point xi can be generated by a single generator
vector g allows for a very simple addressing scheme. As
xi = {i · g}n ,

{·}n := · mod n

is uniquely deﬁned by i, this index can be used for accessing
the data array.

4.1. Nearest Neighbor Look-Up
The simplest texture look-up strategy uses the color of the
texture element closest to the texture coordinate. This means
to compute the nearest lattice point to (u, v) ∈ [0, 1)2 in
Cartesian coordinates. For this purpose the texture coordinate (u, v) has to be transformed into the lattice basis B,
yielding the lattice coordinates (s,t) = B−1 (u, v)T . Then
(d1 , d2 ) = s,t is the anchor point of the lattice cell induced by the fundamental parallelepiped (in lattice coordinates) in which the point (u, v) lies in [0, 1)2 . The nearest lattice point to (u, v) is contained in the set M = {(d1 , d2 ), (d1 +
1, d2 ), (d1 , d2 + 1), (d1 + 1, d2 + 1)} representing the vertices
of the lattice cell. Hence it results as the vertex v ∈ M with
the shortest Euclidean distance to (u, v). Note that the distance computation has to be performed in the Cartesian coordinate system, as the Voronoi cell is distorted in the rank-1
lattice coordinate system. Since the lattice coordinates of v
are known, its index can simply be computed according to
the addressing scheme described in the next section.

4.2. Address Computation
Let B = (b1 , b2 ) be a Minkowski-reduced basis of the lattice
Ln,g and let k = indexb1 and l = indexb2 be the indices of the
lattice points corresponding to b1 and b2 . Given any lattice
point xi , the ﬁrst step in computing its point index i consists
in transforming xi into the lattice basis, i.e. its coordinates
xi,B = (s,t) in the lattice basis have to be computed, such
that xi can be expressed as
xi = s · b1 + t · b2 ,

s,t ∈ Z.

Then the index i of a lattice point xi can be computed according to the following theorem.
Theorem 2 Let xi,B = (s,t) be the representation of the lattice point xi in the Minkowski reduced basis B of Ln,g and
let k = indexb1 and l = indexb2 be the indices of the basis
vectors b1 and b2 . Then the index i of xi results as
i = {s · k + t · l}n
c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

S. Dammertz & H. Dammertz & A. Keller & H. P. A. Lensch / Textures on Rank-1 Lattices

15

14

31

30

29

28

45

43

b2 16

6

4

2

7

5

3

b1 1

0

46

44

42

47

21

19

17

13

12

11

10

9

8

54

52

50

55

53

51

49

48

38

36

34

39

37

35

33

32

22

20

18

23

27

26

25

24

41

1949

ties regarding texture interpolation. Additionally to the commonly used bilinear interpolation, the geometric structure of
rank-1 lattices also implies interpolation on the Delaunay triangles. In the following we describe both interpolation methods.
Bilinear Interpolation on Lattice Cells Induced by the
Fundamental Parallelepiped: A bilinear interpolation is
performed on the lattice cell xi +Λ (see Equation 3) in which
the texture coordinate lies. The anchor point of the lattice
cell (in lattice coordinates) is given by (d1 , d1 ) = s,t , with
(s,t) representing the lattice coordinates of (u, v). Hence
the parallelepiped is spanned by the vertices {(d1 , d2 ), (d1 +
1, d2 ), (d1 , d2 + 1), (d1 + 1, d2 + 1)} and the colors of the associated r1-texels are interpolated.

40

Figure 5: Example for computing the index of an arbitrary
lattice point for the lattice L56,(4,7) with indexb1 = 1 and
indexb2 = 16.

The proof can be found in Appendix A.
Figure 5 illustrates the address computation for the lattice
L56,(4,7) with the basis ((4, 7)T , (8, 0)T ) and the base indices
k = 1, l = 16. Consider the lattice point x = (4, 21) = 3 · b1 +
(−1) · b2 . Then i = {3 · 1 + (−1) · 16}56 = {−13}56 = 43.
Similarly, for the point x = (52, 35) we have x = 5 · b1 + 4 ·
b2 , yielding i = {5 · 1 + 4 · 16}56 = {69}56 = 13. x43 and x13
are highlighted in Figure 5.
Neighborhood Computation. The indices of neighboring
lattice points are simply computed by addition or subtraction of the indices k, l and m = {l − k}n modulo n, where m
corresponds to the index of the vector b2 − b1 . This means
that the neighborhood of a lattice point xi is deﬁned by
the set of indices N(i) = {i, {i + k}n , {i + l}n , {i + m}n , {i −
k}n , {i − l}n , {i − m}n }. These are the six closest neighboring lattice points and form a hexagonal structure. For example N(35) = {35, 36, 51, 50, 34, 19, 20} with k = 1, l = 16
and m = {16 − 1}56 = 15.

Barycentric Interpolation on Delaunay Triangle: After
the lattice cell xi + Λ in which (u, v) lies has been determined, the texel colors of both Delaunay triangles are
weighted using barycentric interpolation. That way the triangle in which the texture coordinate lies is detected automatically. This means that the texture coordinate is located
in that triangle for which the sum of the barycentric coordinates is less or equal to one and the coordinates themselves
are greater or equal to zero.

Nearest neighbor.

Bilinear.

Barycentric.

Figure 6: Visual comparison of texture look-up schemes on
rank-1 lattices.
Comparison. Figure 6 compares close-ups of the nearest
neighbor look-up and the two linear interpolation methods.
While parallelepipeds become visible in the case of the bilinear interpolation, the Delaunay triangles appear in the
barycentric interpolation scheme. These structures only become visible for signiﬁcant magniﬁcation. The bilinear interpolation needs four array accesses while the barycentric
interpolation only uses three values. It is also possible to use
the higher order interpolation methods deﬁned on lattices.

5. Implementation
Here we provide the necessary details to integrate the rank-1
lattice textures into a rendering system.
5.1. Linear Interpolation
For texture magniﬁcation some form of interpolation is
needed. This is also an important issue in real-time applications where textures are often only available in lower resolutions. As for the square lattice there are several possibilic 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

5.2. Tiling and Multi-Resolution
In order to use large textures efﬁciently it is necessary to support tiling and cached access. Peachy [Pea90] proposed the
textures on demand (TOD) approach, a technique designed
to structure and efﬁciently access large amounts of stored
texture data such that the I/O and CPU cost of access is minimized. The key elements of the system are texture tiles (i.e.
the texture is tiled in square units adapted to ﬁxed I/O size)
and preﬁltered textures provided by means of resolution sets.

1950

S. Dammertz & H. Dammertz & A. Keller & H. P. A. Lensch / Textures on Rank-1 Lattices

Due to their periodicity rank-1 lattices are suited very
well to tiled texture layout. Tiled rank-1 lattice resolution
sets (rank-1 lattice r-sets) are built following the example
of [Pea90] and by taking advantage of the rank-1 lattice
structure. The tile size n, i.e. number of lattice points per tile,
can be chosen freely, and thus is independent of source image resolution. For example n can always be chosen as any
integer power of 2, as a rank-1 lattice image can be generated for any target resolution with arbitrary width-to-height
ratio. This is not always possible for images on square lattices, where the resolution is given as the product of the xand y-resolution. A tiled image on a rank-1 lattice is composed of S × T tiles, denoted by [S, T ]n . Therefore, the image
resolution corresponds to S · T · n.
The size of the rank-1 lattice r-set is determined by the
number of tiles [S0 , T0 ]n in the highest resolution. The resolution of the images in the rank-1 lattice r-set is set to be [S, T ]
where S and T are integers with S0 ≥ S ≥ 0 and T0 ≥ T ≥ 0.
One possibility to deﬁne a complete rank-1 lattice r-set is to
demand the rank-1 lattice r-set to consist of all downsampled
versions of the source image, where the parameters S and T
are determined by consecutive integer bisection so that there
are log(S0 ) + 1 × log(T0 ) + 1 elements in the rank-1 lattice r-set. An example for a complete rank-1 lattice r-set according to this scheme is shown in Figure 7. If S0 and T0
are a power of 2 the storage cost for a complete rank-1 lattice r-set can be computed in the same way as in [Pea90] and
therefore is at most four times the storage cost of the original
image [S0 , T0 ].
The TOD implementation based on rank-1 lattices principally follows the structure of [Pea90]. The only difference
consists in the rank-1 lattice r-set member identiﬁcation,
which is performed in two steps. At ﬁrst we determine the
rank-1 lattice r-set members satisfying the width-to-height
ratio of the texture region (swidth ,twidth ) with center (s,t) of
which the renderer requests a ﬁltered value. Among those
1
candidates we select the one with n·S·T
≥ swidth · twidth , i.e.
we choose the resolution for which the pixel area corresponds to the area of the required texture region. Given a
suitable member of the rank-1 lattice r-set, the tile number, which is necessary to build the tile key, is obtained by
s · S , t · T . In order to fulﬁll the texture pixel demand of
the renderer the tile itself is indexed as described in Section 4.1. The use of rank-1 lattices allows for a much more
ﬂexible and easier implementation of a TOD system than
possible with hexagonal lattices.
5.3. Acquisition and Resampling
Similar to hexagonally sampled images there are two methods to acquire images on rank-1 lattices. The ﬁrst one is to
use specialized hardware for image acquisition, (in [MS05] a
survey is given in the context of hexagonal sensors, also being apparent in medical imaging and remote sensing), but up
to now there exists no rank-1 lattice hardware like displays

Figure 7: Tiled rank-1 lattice r-set with [S0 , T0 ] = [4, 4] and
Ltile
2048,(31,39) . The rank-1 lattice r-set thus consists of the
following tiled images [4, 4]n , [4, 2]n , [4, 1]n , [2, 4]n , [1, 4]n ,
[2, 2, ]n , [2, 1]n , [1, 2]n , [1, 1]n , n = 2048.

or acquisition devices. The second approach works by using
software conversion of regularly acquired images. Converting an image represented in one lattice to another lattice representation is called resampling. The typical procedure is to
ﬁrst reconstruct a continuous image from the original samples by using an interpolation function. This reconstructed
image is then resampled with the new lattice. In an implementation reconstruction and resampling are usually combined in a single step.
Middleton et al. generate hexagonally sampled images according to this interpolation scheme and compare nearest
neighbor, bilinear and bicubic interpolation [MS05]. They
conclude that a bilinear ﬁlter kernel is sufﬁcient for the purpose of generating hexagonally sampled images when the
source material has a similar resolution to the target lattice.
In [VVPL02] the authors propose an algorithm for image
resampling between orthogonal and hexagonal images with
similar sampling resolutions, which is based on the least
squares approach, thus minimizing loss of information by incorporating a spline transform. [CVF08] present a new grid
conversion approach in order to resample between hexagonal and Cartesian lattices with the same sampling density.
This method allows for recovering the initial data exactly,
when the same algorithm is applied for the converse operation. All these methods can be directly applied to resampling
on rank-1 lattices when using the associated basis vectors.
To compute rank-1 lattice textures for the experiments in
the result section we have chosen the very simple generation
c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

S. Dammertz & H. Dammertz & A. Keller & H. P. A. Lensch / Textures on Rank-1 Lattices

approach of downsampling a very high resolution source im1
age to a rank-1 lattice image of maximal 16
of the source
image resolution. This corresponds to the “box-ﬁlter” interpolation and therefore facilitates the comparison of rank-1 to
square lattice textures, since both kinds of textures are computed using the same algorithm.

f t . x∗b . s + ( f t . y + 1 . 0 ) ∗ b . p ) , L . x ) ;
/ / corner points in Cartesian coordinates
v e c 4 px = i d x / L . x ;
v e c 4 py = mod ( ( i d x ∗L . z ) / L . x , 1 . 0 ) ;
/ / s q u a r e d d i s t a n c e t o t h e 2d t e x t u r e c o o r d i n a t e
v e c 4 dp = ( px−uv . x ) ∗ ( px−uv . x ) + ( py−uv . y ) ∗ ( py−uv . y ) ;
/ / g e t t h e i n d e x b a s e d on t h e h o r i z o n t a l minimum mm;
f l o a t mm = min ( min ( dp . x , dp . y ) , min ( dp . z , dp . w ) ) ;
f l o a t i = (mm==dp . y ) ? i d x . y :
( (mm==dp . z ) ? i d x . z : ( (mm==dp . w) ? i d x . w: i d x . x ) ) ;

5.4. Optimizations
The structure of rank-1 lattices allows for further optimizations. The number of lattice points can be chosen to ﬁt for
example the caching structure of the target system. The optimal size is usually a power of 2. Having n = 2K allows
then to additionally replace the costly modulo operation in
the lattice computations by a simple binary AND.
Another optimization is to use only rank-1 lattices in Korobov form. Korobov lattices Ln,a are a special class of rank1-lattices. In two dimensions, their generator vector has the
form g = (1, a), thus being uniquely determined by the tuple
(n, a). While this restricts the possible choice of generator
vectors, maximized minimum distance rank-1 lattices can always be represented in Korobov form for n being a power of
2. Now the x-coordinate of each lattice points xi = i · gn is
directly the index i.
For a given lattice L there exists more than one generator
vector g producing the same lattice. For n = 2k there are
2k−1 different g for the identical lattice. As the generator
vector is responsible for the data layout in the texture array
this allows for some freedom in choosing this layout. For
example it can be optimized for higher locality for ﬁltered
texture access.
5.5. GLSL Example
The concept of rank-1 lattice textures can be used in real
time rendering using OpenGL or DirectX for example.
Therefore, the pixel shaders used in the rendering engine
have to be extended by the addressing scheme from Section 4.1. A GLSL example for rank-1 texture access in Korobov form is given below. This code is written to illustrate
an implementation and could be further optimized. In many
shaders the memory access is the bottleneck and the additional address computation can be neglected. For n = 2k the
computations are even more simpliﬁed and an efﬁcient hardware implementation would be possible.
varying
uniform
uniform
uniform

v e c 4 uv ;
/ / 2d t e x t u r e c o o r d i n a t e
s a m p l e r 1 D r 1 d a t a ; / / image on t h e rank−1 l a t t i c e
vec4 L ;
/ / l a t t i c e p a r a m e t e r s ( n , − ,a , d )
vec4 b ;
/ / t h e tow b a s i s v e c t o r s f o r L

v o i d main ( v o i d ) {
/ / P r o j e c t uv i n t o l a t t i c e b a s i s
v e c 2 f t = f l o o r ( v e c 2 ( uv . x ∗ b . q − uv . y ∗ b . p ,
uv . y ∗ b . s − uv . x ∗ b . t )∗L . w ) ;
/ / 4 indices of the 4 corner points
v e c 4 i d x = mod ( v e c 4 ( f t . x∗b . s + f t . y∗b . p ,
( f t . x + 1 . 0 ) ∗ b . s + f t . y∗b . p ,
( f t . x +1.0)∗ b . s +( f t . y +1.0)∗ b . p ,

c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

1951

gl_FragColor = texture1D ( r1data , i ) ;
}

6. Results
We have implemented textures on rank-1 lattices in a ray
tracing system and compare them both visually and numerically to textures using square pixels. For the numerical comparison we use the L2 -norm, which has been shown to yield
similar results as visually motivated error metrics [Edw07].
To show the advantage of these textures compared to
square lattices we use four different textures at different resolutions. The rendering system creates high dynamic range
images and the comparison computes the mean square error
between the reference image and the downsampled texture
images. The reference image was computed using 1024 random samples per pixel at a resolution of 512 × 512 pixels
(using a high resolution texture on the square lattice). The
comparison images were computed with 128 random samples per pixel.
The resolution of the source image was 2048 × 2048 and
we vary the target resolution from 128 × 128 to 512 × 512
in steps of 16 × 16. The target texture is always a downsampled version of the source image using a box ﬁlter in both
cases. The rank-1 lattice texture contains exactly the same
number of points as the square lattice texture. For a direct
visual comparison see Figure 1, which contains example textures for n = 64 × 64 texture elements. Figure 8 shows the
results of the numerical comparison. Except for the checker
board texture, rank-1 lattice textures consistently outperform
the square lattice textures for any resolution as expected
due to the increased sampling efﬁciency. The checker board
is the worst-case comparison for maximized minimum distance rank-1 lattice textures to square lattices as the checker
board itself can be perfectly represented by a square lattice.
Nevertheless, the rank-1 lattice shows a consistent behavior
and outperforms the square lattice when the resampled resolution is not a divider of the source resolution.
The addressing on rank-1 lattices is slightly more expensive than the addressing of square lattice textures. In our rendering system the performance drop was about 5% for all
tested scenes. Since these scenes contain only simple geometry and lighting calculations the relative performance cost
is even less when a more complex scene is rendered.
Using rank-1 lattices for texture storage non-axis aligned

1952

S. Dammertz & H. Dammertz & A. Keller & H. P. A. Lensch / Textures on Rank-1 Lattices

structures are visually more pleasing when the textures are
magniﬁed and due to the good isotropic properties of MMD
rank-1 lattices the quality does not depend largely on the orientation of the basis vectors. Nevertheless the basis vectors
deﬁne the preferred directions for straight lines as in any lattice. For texture miniﬁcation our numerical results clearly
show the improved sampling efﬁciency over regular lattices.

Acknowledgements
The ﬁrst two authors would like to thank mental images
GmbH for funding and support of this work. This work has
been partially funded by the DFG Emmy Noether fellowship
(Le 1341/1-1).
Appendix A: Proof for the rank-1 lattice addressing
scheme.

7. Conclusions and Future Work
Due to the periodicity of the lattice
We have presented a new image and texture representation,
which easily can be integrated in ray tracing and real-time
rendering systems. For that purpose we have introduced an
addressing scheme based on the lattice point indices, as apparent in the rank-1 lattice deﬁnition. Thereby the natural
structure of rank-1 lattices is exploited. The periodicity of
rank-1 lattice allows for a simple tiled image representation,
with the number n of lattice points per tile being independent of the original image resolution. Therefore n always
can be chosen freely, according to the application need, as
a prime number or a power of 2 for example. Note that even
though most of the examples were on square regions maximized minimum distance rank-1 lattices can be constructed
for any aspect ratio and thus used for non-square textures as
well without changing any of the computations.
Thanks to a higher sampling efﬁciency rank-1 lattice images provide a better image quality than images on the
square lattice at same storage cost. In fact, the sampling efﬁciency of maximized minimum distance rank-1 lattices very
closely approximates the one of the hexagonal lattice. We
showed that for a subset of the rank-1 lattices they are in fact
equal to the hexagonal lattice for texturing.
Using the proposed addressing scheme neighboring lattice
points are not necessarily neighbors in the image array on
disk, which can inﬂuence cache performance. In Section 5.4
we already indicated beneﬁcial choices of generator vectors,
however, an investigation with respect to cache performance
still needs to be performed.
While for general isotropic textures the rank-1 lattices
outperform the traditional square lattice, textures containing
mostly vertical and horizontal lines can not be represented
smoothly. In this case the rendering system should allow for
traditional texturing. We have not yet investigated embedded lattices that would allow for classical image pyramids.
Thus our multiresolution textures need to be always computed from the full resolution source image.
As rank-1 lattices are not restricted to the isotropic spectrum, they are also able to catch anisotropic structures by
choice of a different generator vector, which could be taken
advantage of for anisotropic textures. In the future we would
like to study texture synthesis based on Fourier transform
and the implementation of image processing algorithms,
such as edge detection, using the rank-1 texture framework.

b1, j =

k ·gj
k ·gj

n

if k · g j n ≤ n − k · g j
otherwise

b2, j =

l ·gj
l ·gj

n

if l · g j n ≤ n − l · g j
otherwise

−n
n
−n
n

n

n

(4)
(5)

holds for the basis vectors for j ∈ {1, 2}. We ﬁrst consider
the case for k · g j n ≤ n − k · g j n and l · g j n ≤ n −
l · g j n in equations (4) and (5). Then for the basis vectors
b1 and b2 we have
b1 = xk = {k · g}n

(6)

b2 = xl = {l · g}n .

(7)

Writing xi as a linear combination of the basis vectors and
inserting equations (6) and (7) for b1 and b2 yields
xi = (s · b1 + t · b2 ) = {s · xk + t · xl }n
= {s · {k · g}n + t · {l · g}n }n

(8)

= {s · k · g + t · l · g}n
= {(s · k + t · l) · g}n = {{(s · k + t · l)}n · {g}n }n ,
where we use the rules from modular arithmetic that
{a + b}n = {{a}n + {b}n }n and {a · b}n = {{a}n · {b}n }n
[Ste01]. Finally, by comparison of coefﬁcients we have i =
{s · k + t · l}n , as xi = {i · g}n . Now let
b1 = {k · g}n − n and b2 = {l · g}n − n.

(9)

In this case
xi · n = (s · b1 + t · b2 )
= {s · ({k · g}n − n) + t · ({l · g}n − n)}n
= {s · {k · g}n − s · n + t · {l · g}n − t · n}n (10)
= {s · {k · g}n + t · {l · g}n }n .

(11)

As −s · n mod n = 0 and −t · n mod n = 0, equation (10)
yields in equation (11), which already has been covered in
equation (8).
The remaining two cases for
b1 = {k · g}n ,

b2 = {l · g}n − n

(12)

and
b1 = {k · g}n − n,

b2 = {l · g}n

(13)

can be shown in a similar way.
c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

1953

S. Dammertz & H. Dammertz & A. Keller & H. P. A. Lensch / Textures on Rank-1 Lattices

7.6

9.5

Square Lattice
Rank-1 Lattice

7.5

8.6

Square Lattice
Rank-1 Lattice

26

Square Lattice
Rank-1 Lattice

8.4

9

8.2

22

7.1

8.5

8

7.5

8

Mean-Square Error * 10e4

7.2

Mean-Square Error * 10e4

Mean-Square Error * 10e4

Mean-Square Error * 10e4

7.4
7.3

7.8
7.6
7.4
7.2

7
6.9
6.8

200

250

300
350
Resolution

400

450

6.5

500

150

200

Salad

250

300
350
Resolution

400

450

Sign

500

6.6

18
16
14

10

6.8
150

20

12

7

7

Square Lattice
Rank-1 Lattice

24

150

200

250

300
350
Resolution

Cactus

400

450

500

8

150

200

250

300
350
Resolution

400

450

500

Checker

Figure 8: Results of the comparison of square lattice textures to rank-1 lattice textures. The top row shows the reference images
and the bottom row the scaled mean square error at different resolutions.

Appendix B: Proof of Equivalence of Hexagonal Lattices
and Rank-1 Lattices for Texturing when n = 2Mm Fm .
Lattices used for texturing have to tile [0, 1)2 . The hexagonal
lattice tiles the plane, but not [0, 1)2 for any uniform scaling factor s due to its irrational basis BH =

1
0

1
2
√

3

. As-

2

suming nx hexagonal elements in x-direction (i.e. the basis
2nx
hexagonal elements
is scaled by n1x BH ) at most ny = √
3
in y-direction ﬁt. Non-uniform rescaling in y-direction with
a factor sy =

2nx
√
3
2nx
√
3

allows for perfect tiling. The basis scal1

ing factor is S = n0x s0y . This factor in fact removes the
irrational value from the basis (S · BH ).
of
√ For the lattices constructed from the continued fraction
m
3 (see Section 3.2), the generator vector is g = M
Fm for
2

a lattice with n = 2Mm Fm points. Computing on [0, n) , we
construct a basis from the generator vector by the following
observation: On the x- (i.e. y = 0) axis we have Fm points at a
distance of 2Mm , because yi = (iFm ) mod (2Mm Fm ) = 0 ⇔
i = 2Mm . Now we select as the ﬁrst basis vector b1 = 2M0 m .
As the second basis vector we choose the point with index
m
i = 1 : b2 = M
Fm . This is surly a basis of the rank-1 lattice
because b1 × b2 = 2Mm Fm = n.
This rank-1 lattice has a basis of the form BL =

Sr

1
0

1
2

1

, with Sr =

1
nx

0

0

1
ny

, and is equivalent to a

hexagonal lattice scaled to tile the square with nx = Fm and
ny = 2Mm . This is true for all lattices with n = 2Fm Mm .

[CR97] C OOLS R., R EZTSOV A.: Different Quality Indexes for Lattice Rules. J. Complex. 13, 2 (1997), 235–
258.
[CSB87] C ONWAY J., S LOANE N., BANNAI E.: Spherepackings, Lattices, and Groups. Springer-Verlag New
York, Inc., 1987.
[Csb05] C SBFALVI B.: Preﬁltered Gaussian reconstruction for high-quality rendering of volumetric data sampled on a body-centered cubic grid. In IEEE Visualization
(2005), IEEE Computer Society, p. 40.
[CVF08] C ONDAT L., VAN D E V ILLE D., F ORSTER H EINLEIN B.: Reversible, fast, and high-quality grid conversions. IEEE Transactions on Image Processing 17, 5
(May 2008), 679–693.
[DK08] DAMMERTZ S., K ELLER A.: Image Synthesis
by Rank-1 Lattices. In Monte Carlo and Quasi-Monte
Carlo Methods 2006, Keller A., Heinrich S., Niederreiter
H., (Eds.). Springer, 2008, pp. 217–236.
[Edw07] E DWARDS D.: Practical Sampling for RayBased Rendering. PhD thesis, University of Utah, 2007.
[EVM08] E NTEZARI A., V ILLE D. V. D., M ÖLLER T.:
Practical box splines for reconstruction on the body centered cubic lattice. IEEE Transactions on Visualization
and Computer Graphics 14, 2 (2008), 313–328.
[Hel85] H ELFRICH B.:
Algorithms to construct
Minkowski-reduced and Hermite-reduced lattice bases.
Theor. Comput. Sci. 41, 2-3 (1985), 125–139.

References

[HW81] H UA L., WANG Y.: Applications of Number Theory to Numerical Analysis. Springer-Verlag and Science
Press, Berlin-New York, and Beijing, 1981.

[AG85] A FFLERBACH L., G ROTHE H.: Calculation of
Minkowski-reduced Lattice Bases. Computing 35, 3-4
(1985), 269–276.

[Kan87] K ANNAN R.: Algorithmic Geometry of Numbers. Annual Reviews in Computer Science 2 (1987), 231–
267.

c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

1954

S. Dammertz & H. Dammertz & A. Keller & H. P. A. Lensch / Textures on Rank-1 Lattices

[Kor59] KOROBOV N.: The Approximate Computation of
Multiple Integrals. Dokl. Akad. Nauk SSR 124 (1959),
1207–1210 (in Russian).
[Llo82] L LOYD S.: Least Squares Quantization in PCM.
IEEE Transactions on Information Theory 28, 2 (1982),
129–137.
[Mar03] M ARTINET J.: Perfect Lattices in Euclidean
Spaces. Springer-Verlag, 2003.
[MS05] M IDDLETON L., S IVASWAMY J.: Hexagonal Image Processing: A Practical Approach (Advances in Pattern Recognition). Springer-Verlag New York, Inc., 2005.
[Nie92] N IEDERREITER H.: Random Number Generation
and Quasi-Monte Carlo Methods. SIAM, Philadelphia,
1992.
[NM02] N EOPHYTOU N., M UELLER K.: Space-time
points: 4d splatting on efﬁcient grids. In VVS ’02: Proceedings of the 2002 IEEE symposium on Volume visualization and graphics (Piscataway, NJ, USA, 2002), IEEE
Press, pp. 97–106.
[Pea90] P EACHY D.: Texture On Demand. Pixar technical
memo 07-06, Pixar, 1990.
[PM62] P ETERSEN D. P., M IDDLETON D.: Sampling
and Reconstruction of Wave-Number-Limited Functions
in N-Dimensional Euclidean Spaces. Information and
Control 5, 4 (1962), 279–323.
[Sie89] S IEGEL C.: Lectures on Geometry of Numbers.
Springer-Verlag, 1989.
[SJ94] S LOAN I., J OE S.: Lattice Methods for Multiple
Integration. Clarendon Press, Oxford, 1994.
Diskrete Strukturen (Band 1).
[Ste01] S TEGER A.:
Springer-Verlag, 2001.
[VVPL02] VAN D E V ILLE D., VAN D E WALLE R.,
P HILIPS W., L EMAHIEU I.: Image Resampling Between
Orthogonal and Hexagonal Lattices. In Proceedings of
the 2002 IEEE International Conference on Image Processing (2002), vol. III, pp. 389–392.

c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

