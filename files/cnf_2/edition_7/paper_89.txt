Eurographics/ IEEE-VGTC Symposium on Visualization 2009
H.-C. Hege, I. Hotz, and T. Munzner
(Guest Editors)

Volume 28 (2009), Number 3

Smooth Stream Surfaces of Fourth Order Precision
Dominic Schneider 1 , Alexander Wiebel 1 and Gerik Scheuermann 1
1

University of Leipzig

Abstract
We introduce a novel technique for the construction of smooth stream surfaces of 4th order precision. While
common stream surface techniques use linear interpolation for generating seed points for new streamlines in the
refinement phase, we use Hermite interpolation. The derivatives needed for Hermite interpolation are obtained by
integration along the streamlines. This yields stream surfaces of 4th order precision. Additionally, we analyse the
accuracy of the well known Hultquist approach and our new algorithm and proof that Hultquist’s method is exact
for linear vector fields. We compare both methods using the well known distance based and a novel error based
refinement strategy. Our resulting surface is C1 -continuous, enabling improved rendering among other benefits.
Categories and Subject Descriptors (according to ACM CCS): Computer Graphics [I.3.3]: flow visualisation, error
analysis, stream surface—

1. Introduction
The analysis of flow data often relies on flow visualisation.
The most common technique in this context are integral lines
and in particular stream lines. They are an intuitive and well
understood technique in flow visualisation. Stream lines are
tangent to the velocity vector of steady flow, meaning that
they represent the path of particles through the flow field.
Despite their illustrative and intuitive power, they can suffer
from visual complexity and clutter, mainly because of missing depth cues. Stream surfaces are the natural generalisation of stream lines as they represent a continuum of stream
lines started from a predefined curve. Thus, they are as intuitive as stream lines but possess the visual power of an actual
surface, enhancing depth perception greatly.
However, there is an asymmetry in existing stream surface
computation schemes. Namely, stream surfaces are computed using fourth and higher order stream line integration
schemes in time, but for interpolation between stream lines
only linear interpolation is used. As an analysis will show,
linear interpolation is C0 continuous and the interpolation
error is only of order two. Therefore, we present a novel
algorithm which uses Hermite interpolation. Hermite interpolation has an interpolation error of order four and is C1 continuous alleviating the mentioned asymmetry. More precisely, we compute bicubic patches forming the stream surface. Thus, the resulting surface is smooth (C1 -continuous)
and of fourth order precision.
c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.
Published by Blackwell Publishing, 9600 Garsington Road, Oxford OX4 2DQ, UK and
350 Main Street, Malden, MA 02148, USA.

2. Previous Work
An efficient algorithm for stream surface computation in visualisation was first described by Hultquist [Hul92]. In order to seed stream lines, the start curve is discretised into a
finite number of points from which stream lines are started.
The surface is constructed by advancing a front of positions
approximating a line on the surface. The front is a polyline
consisting of linear segments connecting the ends of neighbouring stream lines. Together with the stream lines, these
segments form ribbons which are advanced recursively by
considering the two diagonals in a quad, formed by the current and the next point on the two integral lines of the ribbon.
The shorter of the two diagonals is chosen in order to avoid
thin, long triangles. Adjacent ribbons are advanced following a recursive scheme. The integral lines are advanced one
fixed step at a time. The recursion stops once all integral
lines have reached their defined integration length.
To be able to deal with diverging flow, Hultquist used a
distance based refinement scheme. If the distance between
two integral lines exceeds a predefined threshold, a new integral line is started in the middle of the segment between
the current end points of adjacent integral lines. The current
ribbon is split into two. Moreover, if the angle between the
tangents of two neighbouring integral lines exceeds a given
threshold, this ribbon is not advanced any further and thus
terminated. The stream surface is split into two parts which

872

D. Schneider, A. Wiebel and G. Scheuermann / Smooth Stream Surfaces of 4th Order Precision

3. Stream Surfaces
This section introduces some theoretical aspects about
stream surfaces: Let v be a Lipschitz continuous vector field
defined over a domain Ω ⊂ R3 , then a stream line or integral line φ(t;t0 , x0 ) is a solution to the ordinary differential
equation:
Figure 1: Parameterisation of stream surfaces.

d
φ(t; t0 , x0 ) = v(φ(t; t0 , x0 )) φ(t0 ; t0 , x0 ) = x0
dt
From the definition we see that stream lines are tangent to
the vector field at every point of the stream line.

are advanced separately. This is to prevent exponential overhead near critical points or obstacles.
This refinement scheme accounts for the stretching of the
stream surface in regions with flow divergence, but does
not perform very well in regions with intricate flow. In particular folding, twisting, or shearing of the surface yield
problems. Garth et al. [GTS∗ 04] presented an approach improving on Hultquist’s work and showed how to obtain
surfaces with higher accuracy, especially in regions with
complex flow structures by using higher order integration
schemes combined with arc length parameterisation. Recently, Garth et al. [GKT∗ 08] presented a scheme on computing accurate path surfaces in large time-varying datasets
by separating integral surface approximation from generation of a graphical representation.
Scheuermann et al. [SBH∗ 01] presented a method for
stream surface construction that exploits the fact that, in a
tetrahedron, the stream surface is given in closed form assuming linear interpolation throughout the cell. Thus the
stream surface can be computed analytically on a per tetrahedron basis. While being elegant, obviously the resolution
of the resulting surface is tied very strictly to the resolution
of the underlying grid.
In contrast to the methods mentioned above which compute stream surfaces explicitly, van Wijk [vW93] presented
an algorithm to compute stream surfaces implicitly by defining a scalar function on the boundary of the grid. In a second step, the scalar values are advected from the boundary
through the flow domain. Then it is possible to construct
stream surfaces by means of standard isosurface extraction
algorithms. Unfortunately, van Wijk’s approach is not able to
extract all possible stream surfaces of a flow which prevents
it from being generally applicable.
A technique presented by Schafhitzel [STWE07], relies
on the integration of particles on the GPU, which are rendered using a splatting method. Despite the fast surface integration, a problem arising from such an approach is that no
explicit mesh is produced. It would have to be reconstructed
from a set of points. Stream surfaces can also be used for a
topological segmentation of the vector field [MBS∗ 04] dividing it into regions of similar flow behaviour.

A stream surface ψ : [t0 ,tmax ] × [0, 1] → R3 can be described as a 2D parametric surface embedded in a 3D flow.
A natural parameterisation is to use a parameter t ∈ [t0 ,tmax ]
along every stream line parameterising the surface in time
and a parameter s ∈ [0, 1] which parameterises the stream
lines according to their starting point positions along a space
curve c(s) in Ω:
ψ(t, s) = φ(t; t0 , c(s)) ψ(t0 , s) = c(s)
where curves of constant s are called stream lines whereas
curves of constant t are called time lines (see Fig. 1).
A stream surface approximation is constructed by seeding stream lines from the space curve c which is given as a
polyline connecting a finite set of points. In our approach,
the exact stream lines φ are numerically approximated by
stream lines φˆ using the DoPri5 [PD81] integration scheme.
Similar to [GKT∗ 08] time lines are approximated at equally
spaced time values tn = n · ∆t covering the interval [t0 ,tmax ]
with n ∈ N. The user needs to specify the ∆t parameter to
determine the spacing. This is necessary to compute a well
defined bicubic patch bounded by time and stream lines. The
ˆ
approximated stream surface is denoted by ψ.

4. C1 -continuous Stream Surfaces
In the following, we present a novel method for the construction of a fourth order C1 -continuous stream surface, meaning that the interpolation error of the surface is of order four.
This is achieved by using Hermite interpolation in t and in
s-direction, generating bicubic patches.

4.1. Hermite Interpolation
The cubic Hermite interpolation on the interval [si , si+1 ] with
s−si
r = si+1
−si for a fixed time t is defined as follows:
H(r) = H0 (r)ψ(t, si ) + H1 (r)ψ(t, si+1 )
d
d
+ (si+1 − si ) H2 (r) ψ(t, si ) + H3 (r) ψ(t, si+1 )
ds
ds
c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

873

D. Schneider, A. Wiebel and G. Scheuermann / Smooth Stream Surfaces of 4th Order Precision

two-stage Runge-Kutta method:
k1 = v(tn , yn )
2
2
k2 = v tn + h, yn + h k1
3
3
1
yn+1 = yn + h (k1 + 3k2 )
4
1
Θ(tn , hn , yn ) = (k1 + 3k2 ) .
4
Figure 2: Hermite interpolation.

d
As mentioned, differentiating this formula with ds
yields
equation (2). By propagating the differential further into the
Runge-Kutta formula and applying the chain rule, we obtain:

d
d
k1 = ∇v (tn , yn ) yn
ds
ds
d
2
2
k2 = ∇v tn + h, yn + h k1
ds
3
3

with the following Hermite polynomials
H0 (r) = 2r3 − 3r2 + 1
H1 (r) = −2r3 + 3r2
H2 (r) = r3 − 2r2 + r
3

H3 (r) = r − r

d
d
1
yn+1 =
yn + h
ds
ds
4

2

Figure 2 shows a schematic drawing of the Hermite interpolation between two points ψ(t, si ) and ψ(t, si+1 ) along a
time line (constant t) on the stream surface. The points are
located on two neighbouring streamlines.

4.2. Approximation of the Covariant Derivative
As we have seen in the previous section, Hermite interpolation along stream and time lines requires the covariant
derivatives with respect to t and s. Therefore, we describe the
calculation of these derivatives in the following: The derivative with respect to t can be obtained by evaluating the vector
field at the desired positions, e.g. on the stream line. Thus,
Hermite interpolation along stream lines is always possible.
More effort needs to be spent in order to obtain the covariant
derivatives with respect to s. The general idea is to define
the derivatives on the well known seed curve and then integrate them along every stream line with the same numerical
scheme that is used for stream line integration. We will refer
to this process in the following as derivative integration.
First, for derivative integration any numerical integration
scheme based on a Runge-Kutta formula, represented by Θ,
can serve as a basis:
yn+1 = yn + hn Θ(tn , hn , yn )

(1)

ˆ n ; t0 , x0 ) to avoid notational clutter.
where yn denotes φ(t
We use formula (1) to obtain a numerical scheme integrating
the derivative by differentiating it with respect to s, yielding
d
d
d
yn+1 = yn + hn Θ(xn , hn , yn ).
ds
ds
ds

(2)

Since the above description is very abstract, we give a
practical example in the following, where Θ represents a
c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

d
2 d
yn + h
k1
ds
3 ds

d
d
k1 + 3 k2
ds
ds

where ∇ denotes the gradient operator. ∇v is the matrix
of the partial derivatives, also known as Jacobian matrix. A
more detailed example of a three stage Runge-Kutta method
can be found in the supplemental material on the conference
DVD. By comparing the original Runge-Kutta formulas with
the ones we obtained for the covariant derivative we find that
the Jacobian must be evaluated at exactly the same positions
as the Runge-Kutta scheme. This means that the two methods are firmly tied together.

4.3. Coarsening and Refinement
In order to refine or coarsen a stream surface, stream lines
need to be inserted or terminated. For a C0 -continuous
stream surface, this process has been described in the work
of Hultquist [Hul92]. In the case of a C1 -continuous stream
surface, the algorithm needs some modification. For refinement, the algorithm remains basically the same. If the necessity of refinement is detected by the refinement scheme,
a new stream line is inserted at an interpolated position using
Hermite interpolation (see Fig. 2). Therefore, the transition
of the derivative at constant s from time tn−1 to tn is continuous and the surface remains C1 -continous.
The case of coarsening is a bit more complicated because
the end point of the terminated stream line does not lie on the
Hermite interpolation curve if only the left and right neighbouring stream line is considered. Thus, the order of precision drops locally since an interpolation point is removed
from the front. Globally the front curve is still of fourth
order. This is not a special problem of the algoithm but a
general phenomenon of Hultquist like algorithms caused by
coarsening. However, to maintain C1 continuity the derivative must be linearly interpolated from the integration endpoint of the terminated stream line at time tn−1 to the corresponding point on the Hermite interpolation curve at time tn .

874

D. Schneider, A. Wiebel and G. Scheuermann / Smooth Stream Surfaces of 4th Order Precision

which, explicitly written, yields
εH (t, s) = ψ(tn , s) − H0 (r)ψ(tn , si ) − H1 (r)ψ(tn , si+1 )
d
d
−(si+1 − si ) H2 (r) ψ(tn , si ) + H3 (r) ψ(tn , si+1 )
ds
ds
(a) Linear

(b) Hermite

Figure 3: Interpolation Schemes.

4.4. Error Analysis
Stream surface generation algorithms, among them
Hultquist’s method, so far are assuming linear interpolation
between integral curves, whereas our method uses Hermite
interpolation. In the following, we analyse the local interpolation error of linear and Hermite interpolation between two
time lines to obtain the order of accuracy in s-direction. As
a result, we show that linear interpolation is exact for linear
vector fields and Hermite interpolation for cubic vector
fields.

Again, the local error εH at time tn−1 is zero. Now the term
ψ(tn , s) is expanded in t around tn−1 up to fourth order. The
remaining terms are first expanded in time around tn−1 and
then in space around s (see Fig. 3(b) ), both up to fourth
order. The resulting terms of up to third order vanish, meaning that the cubic Hermite approximation error is of order
O(∆s4 ). Thus, this type of interpolation is exact for cubic
vector fields. A more detailed derivation can be found in the
supplemental material.

4.4.1. Analysis of Hultquist’s Method
The linear interpolation error can be expressed as the difference between the correct solution ψ(tn , s) and the linear
interpolated solution Lψ(tn , s):
εL (tn , s) = ψ(tn , s) − Lψ(tn , s)

(3)

Let si < s < si+1 , then equation (3) can be expressed as follows:
s −s
s − si
ψ(tn , si ) −
ψ(t, si+1 )
εL (tn , s) = ψ(tn , s) − i+1
si+1 − si
si+1 − si
(4)
In order to analyse the linear local interpolation error as it is
transported from one time line ψ(tn−1 , s) to the next ψ(tn , s),
we need to reformulate equation (4), which is written in
terms of time tn , with terms of time tn−1 . Therefore, we apply Taylor expansion in time around tn−1 to all terms and
additionally in space to the terms belonging to linear interpolation. By doing so we rephrase equation (4) in terms of time
tn−1 . Since we are analysing the local error, a precondition is
that the local error at time tn−1 is zero, i.e. εL (tn−1 ) = 0 (see
Fig. 3(a)). Comparing the terms of the Taylor expansions we
find that the linear approximation error of the surface in sdirection is of order O(∆s2 ), meaning that Hultquist’s algorithm interpolates correctly in linear vector fields. A more
detailed derivation can be found in the supplemental material.
4.4.2. Analysis of Our New Algorithm
In order to analyse the local interpolation error of our new algorithm, again first the correct solution ψ(tn , s) is compared,
in this case, to Hermite interpolation Hψ(tn , s):
εH (tn , s) = ψ(tn , s) − Hψ(tn , s)

Figure 4: Refinement of stream surface near a linear saddle
point using distance based refinement.

5. Refinement Strategies
In order to obtain a good approximation, an acceptable sampling density of the front must be maintained. Therefore,
stream surface construction algorithms provide adaptivity
towards refinement and coarsening. In the following sections, we analyse the distance based and a novel error based
refinement scheme which allows to prescribe a local error
bound that is maintained through stream surface construction. We describe the algorithms for inserting and removing
stream lines, i.e. points on the front, for each scheme.

5.1. Distance Based Strategies
Distance based refinement strategies split a ribbon and seed
a new integral curve if the distance at time tn between two
neighbouring stream lines, with parameter values si and si+1 ,
exceeds a given threshold. Thus, the front is refined when
it is stretched in s-direction, which is the case in the presence of diverging flow. The seeded stream line is inserted
at time tn at parameter value s = 12 (si + si+1 ). The position
is interpolated using either linear interpolation, which is the
classical method, or by using Hermite interpolation which is
proposed in this work.
c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

D. Schneider, A. Wiebel and G. Scheuermann / Smooth Stream Surfaces of 4th Order Precision

(a) Delta Wing

875

(b) Cuboid

Figure 5: Overview of computed stream surfaces for the numerical experiments

In order to coarsen the stream surface, three neighbouring stream lines, i.e. three neighbouring points on the front,
are considered. If the sum of the distance between any two
of them falls below a second prescribed distance threshold,
the stream line in the middle is removed. The threshold for
coarsening should of course be lower than the threshold for
refinement.
Despite their popularity and robustness, distance based refinement strategies have some shortcomings. The approximation error of the front is measured only in an indirect
way by means of a geometric property of the surface (distance between stream lines). Thus, the surface might be refined in regions where the approximation error is low, e.g. in
the presence of a linear saddle point (see Fig. 4) where the
distance based refinement causes exponential overhead. On
the contrary, it cannot account for e.g. folding or twisting,
which leads to undersampling in such areas. However, we
seek to resolve this issue by introducing error based refinement strategies in the next section.
5.2. Error Based Strategies
Error based refinement strategies split a ribbon when the local interpolation error exceeds a given bound. This error is
estimated directly by seeding a new short stream line from
a position interpolated between neighbouring stream lines at
time tn−1 integrating it to time tn . The estimated error is the
difference between the interpolation of the position at time tn
and the integration endpoint of the inserted stream line (see
Fig. 3(a) and 3(b)):
ˆ n ; tn−1 , F(t
ˆ n−1 , s)) − F(t
ˆ n , s)
ε(tn , s) = φ(t
where Fˆ is a piecewise interpolant, interpolating between
two neighbouring stream lines. This means that the front
is only refined in regions where the underlying flow is of
higher order than the piecewise interpolant. For example, error based strategies with linear interpolation do not refine
c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

the front in a linear vector field, since linear interpolation is
exact for linear vector fields (see Sec. 4.4.1).
For coarsening, again three neighbouring stream lines, i.e.
three neighbouring points on the front, are considered. If the
local interpolation error for two abutting segments on the
front falls below a second prescribed error bound the stream
line connecting both segments is removed forming one segment.
However, error based strategies of this type basically double the cost for stream surface computation. For every ribbon
a short streamline from time tn−1 to time tn needs to be calculated for every time step tn . In return, they allow to specify
an error bound for the local error of the surface. Thus, error
based strategies refine the surface only when it is necessary,
i.e. where the error bound is exceeded.
6. Results
In this section, we describe the datasets we have used for
conducting our numerical experiments, discuss the performance of the different refinement schemes and present the
improved rendering that has become possible by Hermite interpolation along time lines.
6.1. Datasets
To compare the different stream surface techniques we applied them to the following application datasets.
Delta Wing This dataset is a study of an unsteady vortex
breakdown above a delta wing given on an unstructured grid.
The angle of attack increases during the simulation. The grid
consists of around 3 million vertices and 11 million cells. We
have chosen time step 65 out of a total of 86 time steps to run
our numerical experiment. The vortex breakdown bubbles
are fully developed at this time. We started integration in
front of the delta wing where the surface is drawn into one of

876

D. Schneider, A. Wiebel and G. Scheuermann / Smooth Stream Surfaces of 4th Order Precision
1

0.01
Distance Linear
Distance Hermite
Local Error Linear
Local Error Hermite

Distance Linear
Distance Hermite
Local Error Linear
Local Error Hermite

0.1
0.001

avgerage error

avgerage error

0.01

0.001

0.0001

0.0001
1e-05
1e-05

1e-06
1e+06

1e+07

1e+08
field evaluations

1e+09

1e-06
1e+07

1e+10

1e+08

1e+09

1e+10

field evaluations

(a) Cuboid

(b) Delta Wing

Figure 6: Numerical comparison of accuracy and field evaluations.
100000

100000
Distance Linear
Distance Hermite
Local Error Linear
Local Error Hermite

Distance Linear
Distance Hermite
Local Error Linear
Local Error Hermite

10000
resolution of last time line

resolution of last time line

10000

1000

100

10
1e-06

1000

100

1e-05

0.0001

0.001
precision

0.01

0.1

1

10
1e-06

1e-05

(a) Cuboid

0.0001
precision

0.001

0.01

(b) Delta Wing

Figure 7: The diagrams show the resolution of the last time line for a given precision.

the main vortices and curls up against the breakdown bubble
later on (see Fig. 5(a)).
Cuboid The Cuboid dataset stems from an unsteady numerical simulation of fluid flow around a cuboid. The simulation
was carried out with the NaSt3DGP† flow solver. The data is
given on a rectilinear 100 × 100 × 100 grid. We computed a
stream surface starting near one of the corners of the cuboid
for our numerical experiments (see Fig. 5(b)).

6.2. Results of the numerical experiments
In this section, we present the results of numerical experiments with the datasets introduced in the previous section.
The refinement schemes are compared on the basis of the
number of function evaluations of the underlying vector field

† NaSt3DGP was developed by the research group in the Division
of Scientific Computing and Numerical Simulation at the University
of Bonn. It is essentially based on the code described in a book by
Griebel et al. [GDN98].

as this is the computationally most expensive operation in
the stream surface integration algorithm.
In order to evaluate our new algorithm and the different refinement schemes, we conducted a number of numercial experiments with different datasets. For each dataset we
chose a start curve c(s) and a time interval [t0 , tN ] for which
the stream surfaces are computed. First, a highly resolved
stream surface, representing the ground truth, is computed.
For the ground truth surface a large number of M stream
lines, equidistantly seeded on c(s), are integrated. We comˆ
pare the last time line ψ(s,
tN ) of each computed stream
surface with the last time line of the ground truth surface
ˆ GT (s, tN ) using the following error measure:
ψ
e(tN ) =

1 M
ˆ k , tN ) − ψ
ˆ GT (sk , tN )
∑ ψ(s
M k=1

2

Despite the graph for each refinement scheme being displayed in one diagram for each dataset, distance and error
based methods should not be compared directly, since their
refinement behaviour is fundamentally different. The issue
preventing direct comparison is that for distance based methc 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

D. Schneider, A. Wiebel and G. Scheuermann / Smooth Stream Surfaces of 4th Order Precision
8e+07

877

an additional hurdle, because it is given on an unstructured
grid, where the Jacobian is discontinuous at cell boundaries
of a tetrahedron.

Local Error Linear

7.9e+07

field evaluations

7.8e+07

One confinement of the algorithm is, that the ∆tparameter must be chosen small enough such that refinement
can occur frequently enough, which applies to both, distance
and error based methods. This problem has been addressed
by Garth et al. [GKT∗ 08] by examining the number of integration steps the numerical scheme takes.

7.7e+07

7.6e+07

7.5e+07

7.4e+07

7.3e+07
10

20

30
40
number of starting stream lines

50

60

Figure 8: The diagram shows the number of starting stream
lines versus the number of field evaluations for a constant
local error bound of 0.00002.

ods the start curve c(s) (see Sec. 3) needs to be refined
to a certain level according to the distance threshold (see
Sec. 5.1). Otherwise, refinement will occur in the first steps
until the distance between points on the front falls below this
threshold. Thus, the initial start curve discretisation depends
on the distance threshold.
In contrast, error based methods do not exhibit this behaviour. The initial discretisation of the start curve can be
chosen freely because refinement occurs on the basis of the
local interpolation error. On the other hand, the initial start
curve discretisation, i.e. the number of starting stream lines,
is a crucial parameter because the dependency between the
number of starting stream lines and the computational effort
to compute the stream surface is non-monotonic. There exists a start curve discretisation, for a fixed error bound, for
which the computational effort is minimal (see Fig. 8). This
is, because the starting stream lines are the most accurate
ones, meaning the more starting stream lines are used, the
more accurate the resulting surface will be. This applies to
distance based schemes as well. On the other hand, the more
starting stream lines there are, the less refinement is needed.
Thus, the issue whether the error based scheme is more efficient than the distance based scheme is a question of finding the optimal start curve discretisation, which is yet an unsolved task and part of future work. Therefore, the number
of starting stream lines for the error based methods has been
arbitrarily chosen to be eight to underline the incomparability.
From Figures 6(a), 6(b) and 9 it can be seen that refinement schemes using Hermite interpolation are always significantly more accurate for a given computational effort. Both
refinement schemes benefit from the more accurate interpolation.
Despite the non-smooth surface of the delta wing and the
Cuboid with their sharp edges and pointy corners, resulting
in a very volatile Jacobian, the algorithms using Hermite interpolation perform quite well. The delta wing dataset poses
c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

A disadvantage of the error based scheme, as presented
in section 5.2, is the usually higher computational effort in
comparison to distance based methods if a non-optimal start
curve discretisation is used (see Fig. 8). On the contrary, Figure 7(b) and 7(a) show that for a fixed precision and type
of interpolation, error based methods mostly insert fewer
ˆ
stream lines, i.e. the resolution of the last time line ψ(s,
tN )
is lower, than distance based methods. This is especially apparent for the delta wing dataset where the stream surface
undergoes a large amount of twisting (see Fig. 6(b)).
However, the value of error based methods as such, is not
solely a matter of computation time (see Fig. 6 and 7). They
rather allow to specify a local error bound in s-direction,
which is maintained through the stream surface computation. Moreover, since the local error is guiding refinement,
a sparse initial discretisation of the start curve has little influence on the final discretisation of the front. However, it
does have an influence on the accuracy, i.e. the average error.
Namely, the finer the initial discretisation, the more accurate
the surface will be.
6.3. Improved rendering
Naturally, we employ Hermite interpolation not only for
inserting new streamlines in the refinement process but
also when rendering the surfaces. The derivatives computed
along the streamlines allow us to get a smooth approximation of the stream lines and time lines on the surface by
means of the Hermite interpolation. Both smooth curves
build up a bicubic patch providing the information we need
to produce renderings superior to those possible with the
standard approach (see e.g. Fig. 10).
Additionally, the smoothness of the surface allows to
compute continuously varying normals over the whole surface. This is important for advanced shading, e.g. ray tracing,
if high quality images are needed.
7. Conclusion
We have presented a new algorithm for constructing stream
surfaces of fourth order precision in every direction by computing bicubic patches producing a smooth C1 -continuous
surface. The smooth surface allows for a much better rendering improving the visual quality of the surface. Furthermore, the smoothness enables methods requiring continuous

878

D. Schneider, A. Wiebel and G. Scheuermann / Smooth Stream Surfaces of 4th Order Precision

Figure 9: Comparison of accuracy of stream surfaces in car
dataset constructed using 10 stream lines. The left image
shows the surface for the Hultquist like method, the right image shows the surface constructed using the new Hermite interpolation based technique. The green lines represent time
lines of the approximated surfaces. The red line is a time line
from a high quality surface representing the ground truth for
comparison. The comparison shows the greatly improved accuracy of the new method.

derivatives on the surface. FTLE fields [GWT∗ 08] on stream
surfaces indicating converging or diverging behaviour are
only one idea in this direction. Finally, we have presented
an error based refinement scheme which represents a first
step towards an error controlled stream surface construction.
Although we have shown the usefulness and feasibility
of computing stream surfaces using Hermite interpolation,
there is much room for further work on the topic. First, we
plan to increase the performance of the error based refinement scheme. Second, we want to extend the error based
refinement scheme to work on the basis of one global error
bound for the whole surface.
Acknowledgements
We wish to thank Markus Rütten from German Aerospace
Center (DLR) in Göttingen for providing the delta wing data
set and BMW for providing the BMW dataset. This work
was partially supported by DFG grant DFG SCHE 663/3-8.
References
[GDN98] G RIEBEL M., D ORNSEIFER T., N EUNHOEFFER T.:
Numerical Simulation in Fluid Dynamics, a Practical Introduction. SIAM, Philadelphia, 1998.
[GKT∗ 08] G ARTH C., K RISHNAN H., T RICOCHE X., B OBACH
T., J OY K. I.: Generation of accurate integral surfaces in timedependent vector fields. In VIS ’08: Proceedings of the conference on Visualization ’08 (October 2008).
[GTS∗ 04] G ARTH C., T RICOCHE X., S ALZBRUNN T., B OBACH
T., S CHEUERMANN G.: Surface techniques for vortex visualization. In Proceedings of Joint Eurographics - IEEE TCVG Symposium on Visualization (May 2004), pp. 155–164.

Figure 10: Stream surfaces in car dataset constructed using
10 stream lines. The upper image shows a surface obtained
with linear interpolation. The lower image shows a surface
obtained with Hermite interpolation. The difference in the
visual quality is striking.

[Hul92] H ULTQUIST J. P. M.: Constructing stream surfaces in
steady 3d vector fields. In VIS ’92: Proceedings of the 3rd conference on Visualization ’92 (Los Alamitos, CA, USA, 1992),
IEEE Computer Society Press, pp. 171–178.
[MBS∗ 04] M AHROUS K., B ENNETT J., S CHEUERMANN G.,
H AMANN B., J OY K. I.: Topological segmentation in threedimensional vector fields. IEEE Transactions on Visualization
and Computer Graphics 10, 2 (2004), 198–205.
[PD81] P RINCE P. J., D ORMAND J. R.: High order embedded
runge-kutta formulae. Journal of Computational and Applied
Mathematics 7(1) (1981).
[SBH∗ 01] S CHEUERMANN G., B OBACH T., H AGEN H.,
M AHROUS K., H AMANN B., J OY K. I., KOLLMANN W.: A
tetrahedra-based stream surface algorithm. In VIS ’01: Proceedings of the conference on Visualization ’01 (Washington, DC,
USA, 2001), IEEE Computer Society, pp. 151–158.
[STWE07] S CHAFHITZEL T., T EJADA E., W EISKOPF D., E RTL
T.: Point-based stream surfaces and path surfaces. In GI ’07:
Proceedings of Graphics Interface 2007 (New York, NY, USA,
2007), ACM, pp. 289–296.
[vW93] VAN W IJK J. J.: Implicit stream surfaces. In VIS ’93:
Proceedings of the 4th conference on Visualization ’93 (1993),
pp. 245–252.

[GWT∗ 08] G ARTH C., W IEBEL A., T RICOCHE X., J OY K.,
S CHEUERMANN G.: Lagrangian visualization of flow-embedded
surface structures. Computer Graphics Forum 27, 3 (May 2008),
1007–1014.

c 2009 The Author(s)
Journal compilation c 2009 The Eurographics Association and Blackwell Publishing Ltd.

