Crossing-Free Many-to-One Boundary Labeling with Hyperleaders
Chun-Cheng Lin∗
Dept. of Computer Science and Information Engineering
National Kaohsiung University of Applied Sciences, Kaohsiung, Taiwan 807, R.O.C.

A BSTRACT

PS2 Port

8 DIMMs

In boundary labeling, each point site is uniquely connected to a label placed on the boundary of an enclosing rectangle by a leader,
which may be a rectilinear or straight line segment. Most of the
results reported in the literature for boundary labeling deal with
the so-called one-to-one boundary labeling, i.e., different sites are
labelled differently. In certain applications of boundary labeling,
however, more than one site may be required to be connected to
a common label. In this case, the presence of crossings among
leaders often becomes inevitable such that the labeling often has a
high degree of confusion in visualization. In this paper, for multisite-to-one-label boundary labeling, crossings among leaders are
avoided by substituting hyperleaders for leaders and by applying
dummy labels (i.e., copies/duplicates of labels). Minimizing the
number of dummy labels becomes a critical design issue as dummy
labels are not required in the initial setting. Therefore, we consider
the problem of minimizing the number of dummy labels for multisite-to-one-label boundary labeling, i.e., finding the placements of
labels and hyperleaders such that the total number of dummy labels is minimized and there are no crossings among hyperleaders.
Furthermore, after the number of dummy labels is determined, minimizing the total hyperleader length as well as the bends of hyperleaders is also concerned in postprocessing procedure. In this paper,
we present polynomial time algorithms for the above one-side and
two-side labeling schemes, and show their correctness from a theoretical point of view. In addition, we provide a simulated annealing
algorithm for the four-side labeling schemes with objective to minimize the total number of dummy labels as well as the total leader
length. Experimental results show that our four-side solutions look
promising, as compared to the optimal solutions.

USB Port

ATX Power Supply

COM Port

2 LAN Ports

VGA Port

Battery

Keywords: Automatic label placement, boundary labeling, map
labeling, information visualization.
1

I NTRODUCTION

Most of the research on map labeling [10, 11] has primarily focused
on labeling point features on a map, and the basic requirement in
this case is that all the labels should be pairwise disjoint. It is clear
that such a requirement is difficult to be achieved in the case where
large labels are placed on dense points. In practice, large labels are
usually used in technical drawings or medical atlases where certain site-features are explained with blocks of texts. To address this
problem, Bekos et al. proposed the so-called boundary labeling
[3, 4], in which all labels are attached to the boundary (four sides)
of a rectangle enclosing all sites, and each site is connected to a
unique label by a leader, which may be a rectilinear or straight line
segment. In such a setting, they investigated how to place the labels
and leaders in a drawing such that there are no crossings among
leaders and either the total leader length or the total number of
leader bends is minimized under a variety of constraints. Bekos
∗ Research partially supported by NSC Grant 98-2218-E-151-004-MY3.
E-mail: cclin321@gmail.com

IEEE Pacific Visualisation Symposium 2010
2 - 5 March, Taipei, Taiwan
978-1-4244-6686-3/10/$26.00 ©2010 IEEE

4 CPUs

BIOS

6 Expansion Slots

2 Chipsets

IDE Slot

6 SATA Connectors

(a) Many-to-one boundary labeling [9].
2 CPUs

6 DIMMs

PS2 Port

2 CPUs

USB Port

2 DIMMs

COM Port

ATX Power Supply

VGA Port

Battery

2 LAN Ports

BIOS

6 Expansion Slots

2 Chipsets

IDE Slot

6 SATA Connecters

(b) Many-to-one boundary labeling using hyperleaders and
dummy labels.
Figure 1: An example for labeling a server motherboard.

et al. [2] investigated a similar problem for labeling polygonal sites
under the framework of boundary labeling.
For the work reported in [1, 2, 3, 4, 5, 1] regarding boundary
labeling, each label is uniquely associated with a site (point feature). In practice, however, it is not uncommon to see more than
one site to be associated with the same label. Such examples include labeling the religion distribution in each state of a country,
the language distribution of the world, or the association or organization composed of some countries in the world, etc. In view of
the above, in this paper we investigate the multi-site-to-one-label
boundary labeling (a.k.a., many-to-one boundary labeling) [9] in
which the mapping from sites to labels is a many-to-one function,
i.e., more than one site is allowed to be connected to a common label, and each site is connected only by a leader. For instance, in a
motherboard there may exist more than one occurrence of the same
component, e.g., especially, a motherboard for servers or parallel
computers usually contains more than one CPU, such that this case
is suited for many-to-one boundary labeling. Figure 1(a) gives an
example of the many-to-one labeling for some key components of
a server motherboard (ASUS KFN5-Q/SAS), e.g., CPUs, chipsets,
memory DIMMs, I/O ports, expansion slots, and so on. Figure 1(a)
displays clear and readable text labels on such a dense motherboard
[9], as compared to one-to-one boundary labeling.
In the conventional setting [4], boundary labeling is identified
as k-side labeling with type-t leaders (where k ∈ {1, 2, 4} and
t ∈ {opo, po, s}) if the labels are allowed to be attached to the k
sides of the enclosing rectangle R by only type-t leaders. The parameter t specifies the way a leader is drawn to connect a site to a
label. The opo, po, and s stand for orthogonal-parallel-orthogonal,
parallel-orthogonal and straight-line, respectively, which can easily be understood from the examples given in Figures 2 (a), (b) and

185

in the initial setting. Therefore, in this paper, we investigate how
to find the placements of hyperleaders, labels and dummy labels in
MLHD such that the number of dummy labels is minimized and
there are no crossings among hyperleaders. We present polynomial
time algorithms for some labeling schemes. Aside from minimizing the total number of dummy labels, we also consider the issues
of minimizing the total leader length as well as the total number of
leader bends under the framework of MLHD in this paper. An example of MLHD for a server motherboard is shown in Figure 1(b).
In comparison to Figure 1(a), the labeling in Figure 1(b) has the
merit of displaying the relationship between sites and labels more
clearly, though it applies two additional (dummy) labels.
Both the previous results and our main theoretical contributions
are given in Table 1.

(c) (i.e., those axis-parallel segments are either parallel (‘p’) or orthogonal (‘o’) to the side of map R to which the label is attached).
For each type-opo leader, we further assume that the parallel (i.e,
‘p’) segment lies immediately outside R in the so-called track routing area, as shown in Figure 2(a). In order to improve the quality
of one-to-one boundary labeling, recent studies [1, 5] introduced
new types of leaders, i.e., type-od, type-pd and type-do leaders (in
which the d stands for diagonal; the ‘d’ segment has a fixed angle
with repect to the side of map R to which the label is attached).
More general type of leaders (referred to as octilinear leaders) was
discussed in [1].
Track Routing Area
l1

l1

l1

l2

l3

l3

l3

l2
R

l4

R

(a) Type-opo leaders

l4

(b) Type-po leaders

l2
R

Table 1: The time complexity of the problems for the boundary labeling subject to the constraints where the locations of ports of each
labels are fixed; the labels along the same side are of uniform (maximum) size.

l4

(c) Type-s leaders

Figure 2: Illustration of leaders.

R

l1

l1

l3

l3

l2

l2

l4

R

l4

R

l1

l1

l2

l2

l3

l3

l2’

l4

l4

R

l2’

(a) opo-hyperleaders (b) po-hyperleaders (c) opo-hyperleaders (d) po-hyperleaders
& dummy labels
& dummy labels

objective
number leader
time
(minimization)
of sides type
complexity reference
one
opo
O(n log n)
[4]
total leader length∗
total leader length∗
1-to-1:
two
opo
O(n2 )
[4]
total leader length∗
four
opo
O(n2 log3 n)
[3, 4]
leader crossing number one, two opo NP-Complete
[9]
many-to-1:
total leader length
any
opo
P
[9]
dummy label number∗
one
opo
O(n log n)
Thm 1
MLHD:
dummy label number∗
two
opo
O(n2 )
Thm 2
type

∗
Each of the marked problems considers one more constraint where there are no
crossings of (hyper-) leaders.

Figure 3: Illustration of boundary labeling with hyperleaders and
dummy labels.

Unlike one-to-one boundary labeling, many-to-one boundary labeling inevitably leads to a high possibility of confusing crossings
among leaders in the drawing. Therefore, Lin et al. [9] investigated how to find the placements of labels and leaders under various setting of many-to-one boundary labeling such that the total
number of crossings among leaders is minimized. Since most of
the problems of minimizing the number of crossings among leaders
are NP-complete, they presented some approximation algorithms
and heuristics. Figure 1(a) is an example produced by one of their
approaches. However, as shown in Figure 1(a), any crossing among
leaders still leads to the difficulty in tracing the information of the
two endpoints of leaders. As a result, in this paper, we consider
the multi-site-to-one-label labeling using hyperleaders and dummy
labels (MLHD for short), where the crossings among leaders can
be avoided by substituting hyperleaders for leaders and applying
dummy labels (i.e., copies/duplicates of labels), as shown in Figure 1(b).
As shown in Figure 3(a) (resp., Figure 3(b)) in comparison to
Figure 2(a) (resp., Figure 2(b)), a type-opo (resp., type-po) hyperleader consisting of axis-parallel segments connects its adjacent
label and a certain number of its adjacent sites such that the segment from each of the connected sites to the label is orthogonalparallel-orthogonal (parallel-orthogonal) to the borderline of R to
which the label is attached. Note that (part of) the p- and the second o-segments of the type-opo leaders that form the hyperleader
are merged. From Figures 3(a) and 3(b), we observe that the utilization of hyperleaders still may not guarantee the absence of all the
crossings among hyperleaders. Hence, we further apply dummy labels to removing any possibility of crossings among hyperleaders,
as shown in Figure 3(c) (resp., Figure 3(d)) where a dummy label
l2 , which is a copy of label l2 , is added such that the lower site of
those adjacent to l2 in Figure 3(a) (resp., Figure 3(b)) is altered to
be connected to label l2 . However, dummy labels are not required

186

2

P RELIMINARIES

A k-side type-t-hyperleader many-to-one boundary labelled map
(or k-side type-t-hyperleader map, for short), where k ∈ {1, 2, 4}
and t ∈ {opo, po}, is a triple M = (P, L, f ) where
• P = {p1 , p2 , ..., pn }, pi ∈ R2 , 1 ≤ i ≤ n, is the set of sites
(points) on the plane enclosed in a axis-parallel rectangle R,
• L is the set of axis-parallel rectangular labels with |L| = m,
where each label is placed to the East, West, South, or North
side of rectangle R,
• f : P → L is an onto function which assigns each site in P to
a label in L. Note that f is a many-to-one function in general.
W.l.o.g., we assume that for k = 1 (resp., 2), labels are only placed
on the East side (resp., East and West sides) of rectangle R. On the
other hand, labels can be placed on the four sides of the rectangle
when k = 4. The parameter t, t ∈ {opo, po}, refers to the type of
hyperleaders allowed for connecting sites to labels. For notational
convenience, we refer to the East, West, South, and North sides to
be the 1st, 2nd, 3rd, and 4th sides throughout the rest of this paper.
Every label l ∈ L is required to be connected with | f −1 (l)| sites
(noticing that dummy labels are not defined in a given k-side typet-hyperleader map), and l has a port to which the sites in f −1 (l)
are connected by a hyperleader. Although f −1 is not a function, the
slight abuse of notation is simply for convenience of understanding.
In order to avoid leader overlaps, we assume that there are no two
sites with the same x- or y-coordinates. For simplicity, we further
assume that the locations of the ports of each label are predefined
(generally, the position of port of each label is the midpoint of the
label’s side attached to the boundary of R, as shown in Figure 3).

If part of a hyperleader is overlapped with a certain other hyperleader in a boundary labeling, then the overlap can be removed by
slightly adjusting the location of port of one of the two hyperleaders (see also the hyperleaders incident to l2 and l3 in Figure 3 (a)).
Therefore, it is reasonable to assume that hyperleaders never overlap. Note that, though only fixed ports are concerned in this paper,
our approaches can easily be extended to flexible ports, referred to
the previous results.
Given a map M , a many-to-one boundary labeling using
hyperleaders and dummy labels (MLHD for short) for M is a sequence of labels (l11 , ..., l1m1 , l21 , ..., l2m2 , l31 , ..., l3m3 , l41 , ..., l4m4 ) such
j
that ∀1 ≤ i ≤ 4, label li ∈ L ∪ Δ is placed along the i-th side of rectangle R, where Δ is a set of dummy labels; m1 + m2 + m3 + m4 =
m + |Δ|. Simply speaking, a dummy label is a duplicate of a label l
in L such that the sites in f −1 (l) can be connected to either label l
or a dummy label of l. In our setting, more than one dummy label
is allowed. W.l.o.g., we assume that all the labels in L are different.
Intuitively speaking, li1 , ..., limi is the sequence of labels along the
i-th side. W.l.o.g., for i = 1 and 2 (i.e., East and West sides, resp.)
a top-down ordering is assumed; for i = 3 and 4 (i.e., South and
North sides, resp.) a left-to-right ordering is assumed. Figure 3(c)
(resp., 3(d)) illustrates an MLHD for a 1-side type-opo-hyperleader
(resp., 1-side type-po-hyperleader) map. For simplicity, we assume
labels along the same side to be of uniform maximum size; hence,
the ordering of labels along each side is sufficient to determine the
exact positions of the labels.
The optimization problem considered in this paper is stated as
follows:
The D UMMY L ABEL P ROBLEM FOR k-S IDE M ANY- TO -O NE L A BELING U SING T YPE -t H YPERLEADERS AND D UMMY L ABELS
(kMLHD-t, for short): Given a k-side type-t-hyperleader map M ,
determine an MLHD for M so that the number of dummy labels is
minimized and there are no crossings among hyperleaders.
Furthermore, after the number and the positions of dummy labels
are determined, it is required that both the total hyperleader length
and the total number of leader bends are as small as possible. For
measuring the total type-opo hyperleader length, we assume that
the p-segments of two type-opo hyperleaders that occupy consecutive tracks within the track routing area are separated by ε where
ε > 0. For convenience, the y-coordinate of an object s is denoted
by y(s).
3

O NE -S IDE AND T WO -S IDE C ASES

In this section, we solve 1MLHD-opo and 2MLHD-opo.
Initially, we present the algorithm for solving the 1MLHD-opo
in Algorithm 1.
In order to illustrate how Algorithm 1 is executed, the output
of each step of an example are given in Figure 5, in which, for
convenience, each site is characterized by a nonzero-sized shape
(including stars, circles, and hearts), though they should be of zero
size; the sites with the same shapes are assumed to be connected to
the same label (note that the deeply shaded labels in Figure 5(d) are
dummy labels). We say that two sites are y-coordinate-adjacent if
there are no other sites with y-coordinates between them. In Step 1
of Algorithm 1, y-coordinate-adjacent sites in f −1 (l) for each label
l ∈ L form a group (which can be viewed as an analogy of set), and
then a site to which no site is y-coordinate-adjacent is also viewed
as a single group (Figure 5(b)). Next, Step 2 constructs a label
corresponding to each group on the East side of R (Figure 5(c)).
Step 3 routes the hyperleaders between groups and labels such that
there are no crossings among hyperleaders and the total hyperleader
length is as small as possible (Figure 5(d)). In fact, assuming that
the positions of ports are fixed and the sizes of labels are uniform
maximal, the routing in Step 3 also guarantees that the total number
of leader bends is minimized after the number and the positions of

Algorithm 1 S OLVE 1MLHD-opo
Input: A one-side type-opo-hyperleader map M .
Output: An MLHD for map M so that the number of dummy
labels is minimized.
1: The sites in P are sorted in y-coordinate decreasing order as

p1 , p2 , · · · , pn . Initially, each site forms a single group. For
i = 2, 3, · · · , n, if pi−1 and pi are in f −1 (l) for a certain label
l ∈ L, then their corresponding groups are merged into a group.
After this step, we assume that there are m1 groups, which are
sorted in y-coordinate decreasing order as g1 , g2 , · · · , gm1 .
2: In a top-down fashion, we construct m1 labels, say
l1 , l2 , · · · , lm1 , with uniform maximum height h on the East
side of R, where label li corresponds to group gi for each
i ∈ {1, 2, · · · , m1 }. Recall that the positions of ports are also
determined simultaneously, i.e., the y-coordinate y p (li ) of the
port of label li is yb (li ) + h/2, where yb (li ) is the y-coordinate
of the bottom side of label li .
3: For i ∈ {1, 2, · · · , m1 }, the y-coordinate of the highest (resp.,
lowest) site in group gi is denoted by yTgi (resp., yBgi ). Initialize
an empty stack S. For i = 1, 2, · · · , m1 , if y p (li ) ≤ yTgi+1 , then
push i to stack S (because in this case routing the hyperleader
incident to li needs to know how the hyperleader incident to li+1
is routed, as shown in the following Figure 4(i)); otherwise, do
the following:
(a) route the hyperleader from the sites in group gi to label li
so that the hyperleader length is as small as possible (see
the following Figures 4(ii) – 4(v)), and
(b) pop all elements from stack S, and for each popped element j the hyperleader from the sites in group g j to label
l j is routed so that the hyperleader length is as small as
possible.

dummy labels are determined. Note that the total leader length is
indirectly minimized by minimizing the width of the track routing
area.
Therefore, by Algorithm 1, we have the following theorem.
Theorem 1 1MLHD-opo can be solved in O(n log n) time.
The time complexity of Algorithm 1 is based on the sorting of
the sites, and the remaining operations can be implemented in linear
time. The number of dummy labels must be minimum; otherwise,
the labeling would not be crossing free. The detailed proof is omitted due to page limitation.
Now we turn our attention to solving the 2MLHD-opo. Before
introducing our algorithm, we define the so-called two-layered network G = (L , Lr , E), where L and Lr are two disjoint sets of
nodes; E ⊆ L × L ∪ Lr × Lr is a set of edges. Assume that the
nodes in L and Lr appear in the vertical lines x = 0 and x = 1, respectively. For La , Lb ∈ {L , Lr } and La = Lb , note that the movement of a node v from layer La to layer Lb implies that La = La \{v},
Lb = Lb ∪ {v}, and y(v) is not altered.
The algorithm for solving the 2MLHD-opo is given in Algorithm 2.
In what follows, we use the example shown in Figure 6 to explain how Algorithm 2 is executed. Initially, we are given a map
shown in Figure 6(a). We require that any two sites with different
shapes in Figure 6(a) not be connected to the same label. As shown
in Figure 6(b), Step 1 in Algorithm 2 constructs a two-layered network G = (L , Lr , E), where L = 0;
/ E = 0;
/ Lr = {g1 , g2 , · · · , g8 }
(for i ∈ {1, 2, · · · , 8}, gi corresponds to a group of sites produced

187

ygBi1

ygBi1
gi

yTgi1

yp(li) li

Push i to stack S.

gi

(the routing of gi is determined after the
routing of gi+1 is determined)

yTgi1

li+1

R

H

li
li+1

R

(i) when y p (li ) d yTgi1

yTgi1

H

yp(li) li

li

yTgi1

li+1

R

gi

y

R

gi

yp(li)

li

li

gi

yTgi1

yTgi1

R

R

gi

li

T
gi1

R

H
ygBi1

li-1

yp(li)

li+1

R

(iii) when ygBi d y p (li ) d yTgi

(ii) when yTgi1  y p (li )  y gBi
H
ygBi1

ygBi1

gi

gi

1: By Step 1 of Algorithm 1, we assume that there are η groups of

H

ygBi1

ygBi1

ygBi1

li-1
li

gi

H

li-1
yp(li) li

ygBi1
gi

R

(iv) when yTgi  y p (li )  ygBi1

li-1
li

R

(v) when y p (li ) t ygBi1

Figure 4: Illustration of routing hyperleaders.
g1
g3
g6

g3

g4
g5

g6

g7

R

g4
g5
g7

g8

g8

R

(a) Input

l2

g2

l3
l4
l5

(b) otherwise, node gi moves to layer L or Lr depending on
which layer has fewer connected components consisting
of {g1 , g2 , · · · , gi−1 }.

l6
l7
l8

R

(b) Step 1

(c) Step 2

R

(d) Step 3

Figure 5: The outputs of an example for each step in Algorithm 1.

by Step 1 of Algorithm 1). Next, for i = 1, 2, · · · , 8, each iteration of Step 2 in Algorithm 2 considers node gi , the recently
shown node g j of node gi in f −1 (( f (gi )) ∩ {g1 , g2 , · · · , gi−1 }, and
a set L( j,i) of the nodes in L ∪ Lr with y-coordinates between
y(gi ) and y(g j ), where the recently shown node g j of node gi
can be viewed as a node with the smallest y-coordinate among
f −1 (( f (gi )) ∩ {g1 , g2 , · · · , gi−1 }.
g1
g2
g3
g4
g5
g6
g7
g8
R

LL LR

LL LR LL LR LL LR LL LR
(i)
(ii) (iii) (iv)

(a) Input (b) Step 1

LL LR LL LR LL LR LL LR
(v) (vi) (vii) (viii)

(c) Step 2

R

3: We apply Step 3 of Algorithm 1 to routing hyperleaders be-

tween each label and the sites in the groups represented by the
connected components in Lr (resp., L ) corresponding to the
label on the East (resp., West) side of map M .

i.e., the movement of node g3 to layer Lr is implemented, node g2
moves to layer L , and the edge g2 g4 is added to E, as shown in
Figure 6(c)(iv). Next, for i = 5 (the recently shown node of g5 is
g1 ), since the movements of the nodes in L(1,5) lead to a crossing between node g3 and edge g2 g4 , thus Step 2(b) is adopted – node g5 is
placed in L because the number of connected components formed
by the nodes in {g1 , · · · , g4 }∩L is less, as shown in Figure 6(c)(v).
In a similar way, the outputs after nodes g6 – g8 are considered are
shown in Figures 6(c)(vi) – 6(c)(viii). Finally, according to the information of Figure 6(c)(viii), Step 3 in Algorithm 2 constructs a
label for each connected component in Figure 6(c)(viii), and then
applies Step 3 in Algorithm 1 to routing the hyperleaders on the two
sides of the map, as shown in Figure 6(d).
By making use of Algorithm 2, we have the following theorem.
Theorem 2 2MLHD-opo can be solved in O(n2 ) time.

(d) Step 3

Figure 6: The outputs of an example for each step in Algorithm 2.

For example, in Figure 6(c)(iv), f −1 ( f (g4 )) = {g2 , g4 , g7 }, the
recently shown node of g4 is g2 , and L(2,4) = {g3 }. For i = 1, 2, 3,
since node gi has no recently shown node g j , Step 2(b) is adopted
so that nodes g1 –g3 are placed as shown in Figure 6(c)(iii). Next,
for i = 4, we considers node g4 , the recently shown node g2 of g4 ,
and L2,4 = {g3 }. Since the movement of node g3 to layer Lr does
not lead to a crossing with any edge in E, thus Step 2(a) is adopted,

188

sites in the map instance M , which are sorted in y-coordinate
decreasing order as g1 , g2 , · · · , gη . Construct a two-layer network G = (L , Lr , E) corresponding to M in which L = 0;
/
E = 0;
/ Lr = {g1 , g2 , · · · , gη } with y(g1 ) > y(g2 ) > · · · > y(gη )
(i.e., for each i ∈ {1, 2, · · · , η }, node gi in Lr corresponds to
group gi in M , for convenience).
2: For i ∈ {1, 2, · · · , η }, the recently shown node in f −1 ( f (gi )) ∩
{g1 , g2 , · · · , gi−1 } is denoted by g j for a certain j ∈
{1, 2, · · · , η }, where the recently shown node g j of node gi
can be viewed as a node with the smallest y-coordinate among
f −1 (( f (gi )) ∩ {g1 , g2 , · · · , gi−1 }; the layer in which g j resides
is denoted by La ; the set of nodes in L ∪Lr with y-coordinates
between y(gi ) and y(g j ) is denoted by L( j,i) (i.e., L( j,i) =
{gt | j < t < i}). For i = 1, 2, · · · , η , do the following:
(a) if g j exists and the movements of the nodes in L( j,i) to the
other layer of La do not lead to any crossing between a
node in L( j,i) and an edge in E, then the movements of the
nodes in L( j,i) to the other layer of La are implemented,
node gi moves to layer La , and an edge between gi and g j
to is added to E;

l1

g1

g2

Algorithm 2 S OLVE 2MLHD-opo
Input: A two-side type-opo-hyperleader map M .
Output: An MLHD for map M so that the number of dummy
labels is minimized.

Proof. Since finding the minimum number of dummy labels is
equivalent to finding the minimum number of labels (= the minimum number of dummy labels + |L|), we equivalently show that
the labeling with the minimum number of labels is produced by
Algorithm 2 in O(n2 ) time.
Similar to Theorem 1, it is easy to see that the number of labels is
only affected by the y-coordinate order of sites, while routing typeopo hyperleaders in the two-side case. Thus, the number of labels
in Algorithm 2 can be obtained by a two-layer network. Initially, we
assume that the sites in a map instance are classified into η groups,
which are sorted in y-coordinate decreasing order as g1 , g2 , · · · , gη ,

opt

produced by Step 1 in Algorithm 1. For i ∈ N, let Si (resp., Si )
denote the solution produced by Algorithm 2 (resp., a solution with
the minimum number of dummy labels) for the map instance with
groups g1 , g2 , · · · , gi ; let ψi (resp., δi ) be the number of labels in Si
opt
(resp., Si ). A group is said to be connected to a label if the sites
in the group are connected to a label by a hyperleader. We have the
following properties:
1. ψi+1 equals to either ψi or ψi + 1, implying that ψi+1 ≤ ψi +
1;
2. δi+1 ≥ δi .
In the above first property, the case where ψi+1 = ψi is because
Step 2(a) in Algorithm 2 adds to E an edge incident to gi+1 (recalling in Algorithm 2 that the groups (nodes) connected by a
common edge in E are connected to a common label, group gi+1
which is connected to its recently shown group does not need a
new label different from the ones originally used in solution Si
for the map instance with g1 , g2 , · · · , gi ); contrarily, the case where
ψi+1 = ψi + 1 is due to Step 2(b) (i.e., group gi+1 needs a new label
to be connected). The above second property must hold; otherwise,
δi+1 < δi , then the number of labels in the solution for a map inopt
stance with i groups that is almost the same as Si+1 except for the
opt
absence of gi+1 is ≤ δi+1 < δi (the label number of Si ), leading
to contradiction.
For the correctness of this theorem, we show that ψη = δη by induction on the number η of groups in a map instance, for η ≥ 1. For
η = 1, ψ1 = δ1 holds trivially. Suppose that ψη = δη holds when
η ≤ k. For η = k + 1, we show that ψk+1 = δk+1 as follows. Conopt
sider two cases depending upon whether in solution Sk+1 the sites in
group gk+1 are connected with those in some other groups. Suppose
opt
that in Sk+1 the sites in gk+1 are not connected with those in other
groups. It implies that gk+1 needs a new label (different from the
opt
ones originally used in Sk for the map instance with g1 , g2 , · · · , gk )
opt
in Sk+1 , so δk+1 = δk + 1. Since ψk = δk by the inductive hypothesis, thus ψk+1 ≤ ψk + 1 = δk + 1 = δk+1 . But also ψk+1 ≥ δk+1 .
Hence, ψk+1 = δk+1 holds.
opt
Suppose that in Sk+1 the sites in gk+1 are connected with those
in some other groups. We assume that the group with the smallest
y-coordinate among those other groups connected with gk+1 is g j
opt
in Sk+1 , and the set of groups with y-coordinates between y(gk+1 )
and y(g j ) is L( j,k+1) (excluding g j and gk+1 ). If L( j,k+1) = 0,
/ then
Step 2(a) must be adopted in solution Sk+1 , i.e., group gk+1 does not
need a new label different from those in Sk . That is, ψk+1 = ψk =
δk ≤ δk+1 . But also ψk+1 ≥ δk+1 . Thus, ψk+1 = δk+1 . Otherwise
(i.e., L( j,k+1) = 0),
/ we further consider two subcases: ψk+1 = ψk
(i.e., gk+1 moves due to Step 2(a)); ψk+1 = ψk + 1 (i.e., gk+1 moves
due to Step 2(b)). In the case where ψk+1 = ψk , in a similarly way
we observe that ψk+1 = ψk = δk ≤ δk+1 . But also ψk+1 ≥ δk+1 .
Thus, ψk+1 = δk+1 .
In the case where ψk+1 = ψk + 1, we contrarily suppose that
δk+1 < ψk+1 . By the inductive hypothesis, ψk = δk ≤ δk+1 <
ψk+1 = ψk + 1. But also δk+1 is an integer. Hence, δk+1 = ψk .
For the map instance with groups g1 , g2 , · · · , gk , consider a new soopt
lution Sk that is almost the same as solution Sk+1
except that group
gk+1 is omitted and the groups in L( j,k+1) are altered to be connected as those in solution Sk . Since the case where ψk+1 = ψk + 1
is due to Step 2(b), the movements of the groups in L( j,k+1) to the
same side lead to at least one crossing between a group (node) in
L( j,k+1) and an edge in E. Note that such a crossing in Algorithm 2
implies that a new label for the groups in L( j,k+1) (different from
those in solution Sk ) is required if gk+1 is connected with g j and all
the groups in L( j,k+1) move to the same side. Thus, if the groups in

L( j,k+1) are altered to be connected as those in Sk , then the crossings between the groups in L( j,k+1) and edges in E are removed,
opt
and hence the number of labels in Sk must be less than that in Sk+1
by at least one, because the number of those crossings is at least
one. Therefore, the number of labels in solution Sk for the map inopt
stance with k groups (derived from solution Sk+1 with δk+1 labels)
must be no more than δk+1 − 1. But δk+1 − 1 = ψk − 1 = δk − 1,
opt
which is less than the number of labels in the optimal solution Sk ,
which is the desired contradiction.
The time complexity of Algorithm 2 is discussed as follows. The
movements of the sites in L( j,i) in Step 2 take at most O(n) time.
Besides, in a layer of G, any crossing between a node and an edge
in E can be detected along the layer (line) in O(n) time. Since the
total number of iterations in Step 2 is O(n), Step 2 runs in O(n2 )
time. But also it is clear that Step 1 runs in O(n log n) time and
Step 3 runs in O(n) time. As a result, Algorithm 2 runs in O(n2 )
time.
4

F OUR -S IDE C ASE

In this section, we investigate how to generate the boundary labeling for a four-side type-opo-hyperleader map, with objective of
minimizing the total number of dummy labels as well as the total
hyperleader length. However, as far as the four-side case is concerned, Bekos. et al. [4] mentioned that determining which sites are
connected to one of the four sides so that the objective is achieved
leads to the NP-hard PARTITION problem [7]. As a consequence,
they proposed a classification approach to determine the orientations of sites, and then solved some single-objective optimization
problems. In this section, we provide a simulated annealing algorithm coupled with a classification approach tailored from Bekos
et al. [4] to generate the boundary labeling for four-side type-opohyperleader maps.
Simulated annealing (SA) [8] is a generalization of the Monte
Carlo method for examining the equations of states and frozen
states of N-body systems. This method simulates the freezing of
liquids or the recrystallization of metals in the process of annealing. At the beginning the system is at high temperature and disordered. As the process proceeds, the temperature cools down and the
system becomes ordered. SA is flexible and has successfully been
applied to solving various combinational optimization problems. It
allows “uphill” moves, i.e., moves that spoil, rather than improve,
the temporary solution. This unique feature allows SA to escape
from a local minimal solution, though there is no guarantee that a
global minimum can be reached eventually.
Note that the differences of our approach to the four-side problem from that in [4] are stated as follows: 1) Our labeling is manyto-one; theirs is one-to-one. 2) We apply hyperleaders and dummy
labels; they did not. 3) Our problem is multi-objective; theirs is not.
That is, our objective is to minimize the total number of dummy labels as well as the total hyperleader length; theirs is to minimize
either the total leader length or the total number of leader bends.
Our approach to the four-side problem is based on SA. In this
section, we first define configuration, energy cost function and cooling schedule, and then propose our SA algorithm. Finally, we give
some experimental results and analysis.
4.1 Configuration
Given a four-side type-opo-hyperleader map M , a so-called configuration based on site p ∈ P is denoted C(p) = (A1 , A2 , A3 , A4 )
where A1 ∪ A2 ∪ A3 ∪ A4 = P. See also Figure 7 for illustration.
Consider a selected site p in map M . t1 , t4 , t2 and t3 denote the
lines emanating from p through the bottom-right, top-right, top-left
and bottom-left corners, respectively. Subsets A1 , · · · , A4 are defined as follows: A1 includes the sites between t1 and t4 and those
on t1 , but excludes site p; A2 includes the sites between t2 and t3

189

and those on t2 , but excludes site p; A3 includes the sites between
t3 and t1 and those on t3 ; A4 includes the sites between t4 and t2 and
those on t4 but excludes site p. Note that site p can be assigned to be
included in any of A1 –A4 , but we suggest to assign it to be included
in A3 (or A4 ) here because the width of a map is usually greater than
the height (i.e., in principle, the width should accommodate more
labels).
t2

t4
A4
A2

p
A3

t3

A1
t1

Figure 7: Configuration C(p), which partitions all the sites in the map
into four subsets A1 – A4 according to the location of site p.

In our SA approach, we do not apply a random configuration
as our initial configuration. Instead, our initial configuration is the
configuration C(p) = (A1 , A2 , A3 , A4 ) so that
||A1 | − H κ | + ||A2 | − H κ | + ||A3 | − 1 −W κ | + ||A4 | −W κ |
is the minimal, where κ = (n − 1)/(2H + 2W ); H and W are the
width and height of the map, respectively. That is, we find a site
p such that the ratios of the numbers of sites in A1 –A4 in C(p)
are H : H : W : W . This is because we consider that each set of
sites might be proportional to the length of the side to which it is
attached.
In SA, the selection of the neighborhood of a configuration C(p)
is crucial. In our SA approach, the neighborhood of C(p) is selected
as follows. Initially, we select one of t1 –t4 , randomly. W.l.o.g., t1 is
selected. Then we select either clockwise or counterclockwise direction randomly. W.l.o.g., counterclockwise direction is selected.
Then we turn line t1 around the bottom-right corner of R in counterclockwise direction. Find a random integer r within a small range
[0, ξ ], where ξ is an integer. The r-th site scanned by the turning
line t1 is denoted p . Then configuration C(p ) is defined as the
neighborhood of C(p).
Note that the selection of our configurations does not cover the
full search space, for the simplicity of the approach.
4.2 Energy Cost Function
The energy cost function constitutes the most important part of
SA, upon which the efficiency of the algorithm highly depends.
A good energy cost function should reflect the properties of the
nice-looking drawings. Intuitively, all desired features of the final
labeling must contribute to this function, in accordance with their
relative importance. The energy cost function used in our SA algorithm is given as follows:

φ (C(p)) = λ1

Δ
n

+ λ2

T HL
n(W + H)

where Δ is the number of dummy labels; T HL is the total hyperleader length; n is the number of sites; W and H are the width and
height of the map, respectively; λ1 and λ2 control the weights attributed to the first and the second measures, respectively; λ1 + λ2 =
1. Note that the denominators in the above function are used to
make any term not exceed one.
4.3 Cooling Schedule
The cooling schedule is one of the key parts of the simulated annealing method. Most applications follow the basic geometric schedule
described in [8].

190

1. Initial temperature: Generally, we set the initial temperature
high enough to accept almost every move at the beginning, in
order for any configuration to work as the starting point of the
algorithm. In some situations, however, when the initial configuration is known to have some resemblance to the desired
final result, a lower initial temperature can be chosen at the
beginning.
2. Temperature reduction: The temperature reduction stage determines when to change the temperature and how to change
it. This stage affects the number of moves at each temperature and the range of each move. Typical applications set the
number of trials at each temperature to be polynomial in the
size of the input. Noting that the number of sites is denoted n,
we set the moves at each temperature to be 30n, which the algorithm in [6] (a classical simulated-annealing graph drawing
algorithm) suggested. The cooling schedule rule is geometric.
If Ti is the temperature at the i-th stage, then the temperature
at the next stage is Ti+1 = γ Ti , with γ is a real number between 0.6 and 0.95. We set γ = 0.75, which the algorithm in
[6] suggested. The range of each move decreases when the
temperature reduces. Given that the range of movement at the
i-th stage is R; the range of movement serving for the next
temperature is γ R, which accelerates the convergence of the
algorithm.
3. Termination condition: This is to decide when to stop the
algorithm. Commonly used termination conditions include:
stopping the algorithm when the solution is not modified after
several consecutive stages, or fixing the number of stages to
be a constant. All of our experimental results are obtained by
running ten stages of our algorithm, in which the number of
stages used is the same as that used in [6]. Experimental results have shown that, in many cases, substantial changes only
happen in some of the former stages, and the following stages
yield marginal improvement.
4.4 Our SA Algorithm
Based on the setting in previous subsection, our SA-based algorithm is given in Algorithm 3.
Algorithm 3 D RAW 4MLHD-opo
Input: A four-side type-opo-hyperleader map M .
Output: An MLHD for map M so that the number of dummy
labels as well as the total hyperleader length is as small as possible.
1: select an initial configuration C(p) = (A1 , · · · , A4 ) based on site

p so that ||A1 | − H κ | + ||A2| − H κ | + ||A3| − 1 −W κ | + ||A4 | −
W κ | is the minimal; in addition, set an initial temperature T0 ;
2: for i-th stage, denote the temperature as Ti , and repeat the following for 30n times until the termination condition is satisfied:
(a) find the neighborhood C(p ) of C(p) by the method described in Subsection 4.1;
(b) if
φ (C(p )) − φ (C(p)) < 0
or
random <
e−(φ (C(p ))−φ (C(p)))/Ti , where random is a random
value in [0, 1], then set C(p) ← C(p );
3: Ti+1 = γ Ti ;
4: if the termination condition is satisfied, stop; otherwise, go to

step 2.

4.5 Experimental Results
Based on the algorithm detailed in the previous subsections, we developed a prototype system, which was tested on an Intel CoreTM 2

Duo CPU E8400 @ 3.00 GHz PC with 2 GB memory. The statistics of energy costs (including the total dummy label number Δ
and the total hyperleader length T HL) under three combinations
of (λ1 , λ2 ) (i.e., (0.5, 0.5), (1, 0), and (0, 1)) and different numbers
of label groups (i.e., m = 2, 4, 6, 8, 12) by using our algorithm compared to the optimal solutions is given in Figure 9(a). Considering
(λ1 , λ2 ) = (0.5, 0.5) (i.e., Δ and T HL are crucial equivalently), in
Figure 9(a), although our results perform worse on Δ (2.6 > 0.8
in average), some of our total hyperleader lengths perform better
than the optimal solutions (2015.7 < 2173.5 in average). As for
(λ1 , λ2 ) = (1, 0) and (0, 1), it is not unexpected that our algorithm
performs worse than the optimal solutions, but we can see that the
gaps seems not too large. Hence, it is concluded that our algorithm
has the capacity of generating four-side labeling of good quality, as
compared to the optimal solutions.
As for the running time, we plot the running time versus the
number of sites in Figure 9(b). Although the slope of the curve in
the plot seems to have an increasing tendency, the running time is
still little (it takes less than two seconds to handle a map with 100
sites). From our experimental results, it took 238.344 sec to handle
a map with 1,000 sites. That is, our algorithm is executed efficiently
enough to handle a moderate-size map. In addition, we ever plotted the running time versus the number m of label groups, but we
observed that there was no difference in running time, regardless of
any setting of m.
Since our algorithm is based on the SA algorithm, which aims at
handling the local minimal problems, the plot in Figure 9(c) shows
the ability. Figure 9(c) gives the plot of the energy costs versus
the number of stages by using our algorithm. We observe from
Figure 9(c) that some ‘uphill’ moves can escape from some local
minimal solutions successfully by our SA algorithm.
In what follows, we show a variety of labeling for the same map
instance with n = 12 and m = 4 in Figure 10, in which (a), (b) and
(c) are generated by our algorithm under (λ1 , λ2 ) = (0.5, 0.5), (1, 0)
and (0, 1), respectively; (d), (e) and (f) are their corresponding optimal solutions. We observe from Figures 10(a)(b)(d)(e) (i.e., considering to minimize the dummy label number) that our experimental
results has the advantage that the sites connected to the same side
can be observed more easily (specifically, see Figure 10(a) compared to Figure 10(d), in which hyperleaders interlace each other).
Note that such a characteristic results from the setting of configurations illustrated in Figure 7. In addition, we observe from Figures 10(c) and (f) (i.e., considering only to minimize the total hyperleader length) that our solution performs well, as compared to
the optimal solution in (f).
We also demonstrate the labeling for the maps with 20, 40, 60
and 1000 sites in Figure 11. From those figures, it should be noticed that large number of sites would lead to too dense hyperleader
placements, which make it not easy to observe those labeling. As a
consequence, we suggest that the four-side labeling should be suitable for moderate-sized maps, even though our algorithm may handle larger-sized maps.
In order to show the applications of our four-side method, an
experimental result for labeling a server motherboard is given in
Figure 8, where hyperleaders are distributed clearly on the four side
of the map without any crossing.
5

C ONCLUSION

We have presented polynomial time algorithms for solving the
problems of minimizing the number of dummy labels under both
the one-side and two-side many-to-one boundary labeling using
type-opo hyperleaders and dummy labels. Since the four-side problem is correlated with the NP-hard problem PARTITION, we provided an algorithm based on simulated annealing (SA) scheme to
generate the four-side many-to-one boundary labeling using typeopo hyperleaders and dummy labels with objective to minimize the

Figure 8: Experimental result for labeling a server motherboard.

total dummy label number as well as the total leader length. Some
experimental results for our SA algorithm are analyzed in this paper. From our experimental results, we observe that our SA algorithm can efficiently generate labeling of good quality, as compared
to the optimal solutions. Our generated labeling enjoys the merit
of having a clear visualization of classifying sites connected to four
sides into four regions.
As far as type-po hyperleaders are concerned, the dummy label
number minimization problems becomes difficult because not only
y-coordinates but also x-coordinates of sites affect the number of
dummy labels; besides, hyperleaders adjacent to at least one site
make it complicated to remove the crossings among hyperleaders.
Therefore, solving the dummy label number minimization problems under the basic setting for type-po hyperleaders (1MLHD-po
and 2MLHD-po) remains open.
R EFERENCES
[1] M. Bekos, M. Kaufmann, M. N¨ollenburg, and A. Symvonis. Boundary
labeling with octilinear leaders. Algorithmica. to appear.
[2] M. Bekos, M. Kaufmann, K. Potika, and A. Symvonis. Area-feature
boundary labeling. The Computer Journal. to appear.
[3] M. Bekos, M. Kaufmann, K. Potika, and A. Symvonis. Boundary
labelling of optimal total leader length. In PCI 2005, volume 3746 of
LNCS, pages 80–89, 2005.
[4] M. Bekos, M. Kaufmann, A. Symvonis, and A. Wolff. Boundary labeling: Models and efficient algorithms for rectangular maps. Computational Geometry: Theory and Applications, 36(3):215–236, 2007.
[5] M. Benkert, H. Haverkort, M. Kroll, and M. N¨ollenburg. Algorithms
for multi-criteria boundary labeling. Journal of Graph Algorithms and
Applications, 13(3):289–317, 2009.
[6] R. Davidson and D. Harel. Drawing graphs nicely using simulated
annealing. ACM Transactions on Graphics, 15(4):301–331, 1996.
[7] M. R. Garey and D. S. Johnson. Computers and Interactability. A
Guide to the Theory of NP-Completeness. A Series of Books in the
Mathematical Sciences. Freemann And Company, 1979.
[8] S. Kirkpatrick, C. D. Gelatt Jr., and M. P. Vecchi. Optimization by
simulated annealing. Science, 220:671–680, 1983.
[9] C.-C. Lin, H.-J. Kao, and H.-C. Yen. Many-to-one boundary labeling.
Journal of Graph Algorithms and Applications, 13(3):319–356, 2008.
[10] G. Neyer. Map labeling with application to graph drawing. In
M. Kaufman and D. Wagner, editors, Drawing graphs: Methods and
models, volume 2025 of LNCS, pages 247–273. 2001.
[11] A. Wolff and T. Strijk. The map-labeling bibliography.
http://i11www.ira.uka.de/map-labeling/bibliography/,
maintained
since 1996.

191

time (sec.)

˄ˁˋˈˌ

1.5

˄ˁˇˉˌ
˄ˁ˅˃ˇ

1

˃ˁˌ˅˄
˃ˁˉˋˉ

0.5

˃ˁˇˌ˅

0
0

(a) n = 12.

˃ˁ˃ˆ˄

˃ˁ˃ˌˇ

10

20

˃ˁˆ˅ˋ
˃ˁ˄ˋˋ

30

40

50

60

number of sites

70

80

90 100

0.19
0.18
0.17
0.16
0.15
0.14
0.13
0.12
0.11
0.1

energy cost

2

0

5

10

15

20

number of stages

(b)

25

30

(c)

Figure 9: (a) Statistics of energy costs of our experimental results compared with the optimal solutions. (b) Chart of time vs. number of sites. (c)
Chart of energy costs vs. number of stages.

(a) Our result ((λ1 , λ2 ) = (0.5, 0.5)).

(d) Optimal solution ((λ1 , λ2 ) = (0.5, 0.5)).

(b) Our result ((λ1 , λ2 ) = (1, 0)).

(e) Optimal solution ((λ1 , λ2 ) = (1, 0)).

(c) Our result ((λ1 , λ2 ) = (0, 1)).

(f) Optimal solution ((λ1 , λ2 ) = (0, 1)).

Figure 10: Comparison between our experimental results and the optimal solutions for labeling a four-side type-opo-hyperleader map where
n = 12 and m = 4, under three different combinations of (λ1 , λ2 ).

(a) n = 20, m = 5.

(b) n = 40, m = 5.

(c) n = 60, m = 5.

(d) n = 1000, m = 5.

Figure 11: Comparison of our experimental results under different numbers of sites ((λ1 , λ2 ) = (0.5,0.5)).

192

