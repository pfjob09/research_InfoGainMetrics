Force-Directed Drawing Method for
Intersecting Clustered Graphs
Hiroki Omote*1 and Kozo Sugiyama*2
School of Knowledge Science, Japan Advanced Institute of Science and Technology

ABSTRACT
We present a novel force-directed method for drawing an
intersecting clustered graph. This is based upon simulation of a
virtual physical system. The graph can express complicated
structures such as inclusion and intersection between
vertices/clusters as well as adjacency, and it is used in diverse
fields such as creativity support, software engineering, and
semantic web. We describe definitions, aesthetics, model,
algorithm, performance evaluation, and applications.
• Keywords: Graph Drawing, Intersecting Clustered Graph,
Force-directed method
1

INTRODUCTION

The classical methods for graph drawing so far have been
developed to nicely draw rather simple classes of graphs such as
trees, planar graphs, directed graphs, and undirected graphs [1].
One of the recent research directions in this area is to draw more
complicated graphs, such as compound graphs [2], clustered
graphs [3, 4, 5], and intersecting clustered graphs [6] that consist
of nesting and intersecting of vertices as well as adjacency.
These graphs can express more complicated information and
knowledge structures.
As drawn objects become more complicated, drawing
techniques also become more complicated. Theoretical
algorithms (e.g. orthogonal drawing [1]) can attain aesthetic
criteria exactly, but it is often difficult to understand and
implement them. On the contrary, heuristic algorithms (e.g.
force-directed drawing [1]) cannot attain aesthetic criteria
precisely, but are relatively easier to understand and implement.
This ease of use is especially important for users who want to
develop a drawing tool and improve it by themselves.
In this paper, we develop a heuristic method to draw a graph
called an intersecting clustered graph, where inclusions and
intersection are allowed for vertices as well as adjacencies. Our
previous study presented in [6] treats a graph where nesting is
limited to one level. We extend it to allow nesting more than one
level. We adopt force-directed placement techniques to develop
a method for drawing an intersecting clustered graph.
Our method is based on simulation of a virtual physical system.
As one early work, Eades proposed the spring embedder [7] for
drawing an undirected graph, though similar idea was previously
discovered in [8, 9] and this closely relates to statistical
multidimensional scaling [10]. We extend the spring embedder
into a new method by introducing several types of forces to treat
*1e-mail: h_omote@jaist.ac.jp
*2e-mail: sugi@jaist.ac.jp
Asia-Pacific Symposium on Visualisation 2007
5 - 7 February, Sydney, NSW, Australia
1-4244-0809-1/07/$20.00 © 2007 IEEE

a more complicated structure. It looks very complicated but
actually we can easily implement and modify the method. Our
method is characterized by:
• Unified simplification of layout problem for a given
complicated graph by transforming it into layout problem for
an undirected graph,
• Parameter tuning for coping with the increase in the number
of parameters controlling forces due to transformation, and
• Scheduling so as to switch the exertion of forces on/off.
Intersections can express elements with several attributes, and
clusters can express groupings of similar elements. Intersecting
clustered graphs can be used as tools to foster human thought in
a variety of fields. Examples include the KJ method [11] in
creativity science, the Higraph [12] in software engineering, and
the conceptual graph [13] in knowledge engineering.
In the subsequent sections, we describe definitions, aesthetics,
model and algorithm, performance evaluation, and applications.
2

PRELIMINARIES

2.1
Intersecting Clustered Graph
According to Eades, Feng and Lin [3], a clustered graph C=(G,
T) consists of an undirected graph G and a rooted tree T such
that the leaves of T are exactly the vertices of G. Each node v of
T represents a cluster Γ (v) of the vertices of G that are leaves of
the subtree rooted at v. Note that tree T describes an inclusion
relation between clusters.
We introduce a new class of graphs. An intersecting clustered
graph CI=(G, D) consists of an undirected graph G and a multilevel digraph D that is an extension of a rooted tree T. D is a
rooted tree except that it allows sharing of leaves between
clusters (or intersections between clusters).
2.2
Aesthetics
Aesthetics is a set of drawing conventions and rules. Drawing
conventions are conditions that should be satisfied, and drawing
rules are conditions that are satisfied as much as possible. We
adopt the following two simple conventions:
• Rectangle (C1): a leaf and a cluster are drawn as a rectangle or
an ellipse (i.e. leaf/cluster area);
• Straight-line (C2): an edge is drawn as a segment of a straight
line;
In addition, we adopt nine rather complicated rules to draw an
intersecting clustered graph nicely as follows:
• Leaf-inclusion (R1): a leaf belonging to a cluster is drawn
within the area of the cluster;

85

• Cluster-nesting (R2): a daughter cluster is drawn within the
area of its mother cluster;
• Inside-intersection (R3): only a leaf shared by clusters should
be drawn within the respective areas (i.e. intersection area) of
the clusters;
• Outside-cluster (R4): a leaf not belonging to any cluster is
drawn outside the clusters;
• Cluster-overlap-reduction (R5): overlapping of clusters
(except intersecting clusters) is reduced as much as possible;
• Cluster-even-distribution (R6): Clusters are distributed evenly;
• Leaf-closeness (R7): adjacent leaves are placed as close as
possible;
• Leaf-overlap-reduction (R8): overlapping of leaves is reduced
as much as possible; and
• Edge-crossing-reduction (R9): crossings of edges are reduced
as much as possible.
We investigate the satisfaction of these drawing rules,
developing a force model where many forces between pairs of
leaves and/or clusters are specified in a unified manner. Fig. 1
shows a diagram of an intersecting clustered graph where small
circles represent leaves and rectangles clusters.

vertices and dummy edges can transfer our layout problem for
an intersecting clustered graph into a unified force-directed
drawing method for an undirected graph.

dummy vertex for a cluster

vertical
side

dummy vertex for a side

horizontal
side

Fig. 2: Three types of dummy vertices.

dummy
edge

intersection
(2) HS

(1) VS

cluster
leaf

Fig. 1: A diagram of an intersecting clustered graph.

3
3.1

DRAWING METHOD
Force Model

3.1.1
Transformation of layout problem
In order to develop a force model for drawing an intersecting
clustered graph, first, we introduce three kinds of dummy
vertices. Each cluster except the root is replaced with a dummy
vertex that is placed at the center of a cluster area. Each side of a
rectangle corresponding to a cluster is replaced with a dummy
vertex for a vertical side or horizontal side (see Fig. 2).
Second, we introduce four kinds of dummy edges. Dummy
edges are added (1) between dummy vertices for horizontal
sides of a cluster, (2) between dummy vertices for vertical sides
of a cluster, (3) between dummy vertices for clusters that have
an inclusion relation, and (4) between a leaf shared by clusters
and dummy vertices of the clusters (see Fig. 3). As the result,
we have a new undirected graph Ω(CI ) = (V, E) for given
intersecting clustered graph CI, where V is called a set of
elements (i.e. a union of a set of leaves and a set of dummy
vertices) and E a set of links (i.e. a union of a set of edges
between leaves, and dummy edges). This introduction of dummy

86

(4) IS

(3) IC

(1) VS: between dummy vertices of vertical sides of a cluster,
(2) HS: between dummy vertices of horizontal sides of a cluster
(3) IC: between a dummy vertex for a cluster and a dummy vertex for a
side of another cluster that includes the former cluster
(4) IS: between a dummy vertex for a cluster and a dummy vertex for a
side of another cluster that includes the former cluster

Fig. 3: Four types of dummy edges (relations).
3.1.2
Forces
Next, we introduce three types of forces fs, fa, and fr exerted on a
pair of elements. If these forces are positive, they are repulsive,
and if negative, they are attractive. These forces are defined by
f s = −C s log(d / l s )

(1)

f a = −C d

(2)

⎧C d
fr = ⎨
⎩ 0

if
if

d < lr
d ≥ lr

(3)

where Cs, and C are positive coefficients, and d is the distance
between paired elements on which force is exerted. Force fs is

similar to a spring-type force, since there exists the concept of
ideal distance ls between paired elements. Force fs is repulsive
when d < lr, and attractive when d ≥ lr. Thus, this force can
control the distance between paired elements, approaching the
ideal distance. Force fa is always attractive (i.e. negative), and
varies linearly according to d. Similarly, force fr is a linear
function of d, but it is repulsive (i.e. positive) when d < lr or zero
when d ≥ lr .

We define the force exerted on every pair of elements according
to the specification of pairs presented in Table 1, where drawing
rules to be attained by the force also are shown. Lacking any of
these forces reduces the quality of results.
Table 1: Forces utilized in the force model.

Specification of pairs
p = （e1, e2 | R）

Type
of
force

Drawing
rule

Force
ID

The type of force that is defined for a pair of elements depends
on the kinds of the paired elements (i.e. leaves, clusters, and/or
dummy vertices) and the relations between them: for example,
force fs is exerted between adjacent leaves. Of course, no force
is defined for some pairs of elements: for example, between a
cluster (i.e. dummy vertex) and its sides (i.e. dummy vertices).

（Le, Le | LL or AS）

R7

S1

（Le, Le | SA）

R1,R5

S2

（Le, Le | LS or SI）

R3, R4

S3

（Le, Le | II）

R3 , R8

S4

Let p = (e1, e2 | R) be a pair of elements where e1 and e2 specify
one kind of element and R a kind of relation. We can distinguish
four kinds of elements (see Fig. 3):
Le: leaf,
Dc: dummy vertex for a cluster,
Dv: dummy vertex for a vertical side of a cluster, and
Dh: dummy vertex for a horizontal side of a cluster.

（Le, Dc | LI）

R1

S5

（Dc,Dc | IN）

R1

S6

（Dv, Dv | VS）

R1

S7

（Dh, Dh | HS）

R1

S8

R1

A1

R2

A2

R6, R8

R1

R5

R2

-

-

Further, we can identify fifteen kinds of relations between
elements (see Fig. 4).

adjacent relation

non-adjacent

（Le, Dv or Dh | IS）
（Dc, Dv or Dh | IC）
（Le, Le | NA） or
（Le, Dc | NI）
（Dc, Dc | SS）
others

(1) NA
(3) LS

(2) LL

(7) II

(6) SI

(9) LI

(4) AS

(10) SS

(5) SA

(8) NI

(11) IN

(1) NA: between non-adjacent leaves,
(2) LL: between adjacent leaves,
(3) LS: between a leaf included in a cluster and a leaf not included in the
cluster,
(4) AS: between leaves included in a cluster
(5) SA: between a leaf included in a cluster and a leaf included in
another cluster
(6) SI: between a leaf included in a cluster and a leaf included in another
cluster, when both of these leaves are not shared even though other
leaves are shared
(7) II: between leaves shared by two clusters (i.e. intersecting clusters),
(8) NI: between a leaf and a dummy vertex of a cluster, when both are
non-adjacent
(9) LI: between a leaf and a dummy vertex of a cluster, when the leaf is
included in the cluster
(10) SS: between dummy vertices of two clusters, when both are nonadjacent
(11) IN: between dummy vertices of two clusters, both are intersecting

Fig. 4: Relations other than those shown in Fig.3.

fs

fa
fr
-

3.2
Algorithm
Our algorithm is based on the standard force-directed method
[5], where a physical system is simulated. First, the given
intersecting clustered graph CI is transformed into an undirected
graph Ω(CI )= (V, E). Second, a force is defined for each pair of
elements according to Table 1. It should be noted that each force
has own parameters used in any one of the force equations
(1)~(3)., which is one of the characteristics of our method.
Though the number of parameters increases, controlling the
positions of the elements becomes more flexible and easier.
Next, the direction and magnitude of the total force exerted at
each element is calculated, and the position of the element is
moved according to its direction and magnitude. Then, the
original graph CI is drawn on the screen. The computational
complexity of the algorithm is O(|V|2) or higher because the
number of iterations n tends to become larger as (|V| becomes
larger. But this relationship is not evaluated yet.
algorithm DRAW-ICG (CI=(G, D): an intersecting clustered
graph, n: the number of repetitions);
1. Transform CI into Ω(CI ) and define forces on each pair
of elements;
2. Place elements of Ω(CI ) in random;
3. Repeat n times
3-1) Calculate the force exerted on each element by
combining forces based upon force specification F and
phase specification Σ;
3-2) Move each element by δ×(force on the element);
4. Revive CI from Ω(CI );

87

5. Draw the graph on a screen.
3.3
Parameter Tuning
Parameter tuning is an important mechanism for calculation in
our force-directed graph drawing method. When the number of
elements is expressed as m, there exist m2 (=N) pairs of
elements: P = {p1, p2, … , PN}. Finite set P is partitioned by the
specification shown in Table 1, where each partition is identified
with the force ID. In our method, a force is defined on every pair
of elements. Therefore, we need to treat many parameters for Cs,
C, ls, and lr.

efficient. For example, while it is important to attain the
distributed layout of clusters in the initial stage, the fine-tuning
of layout such as adjusting the size of clusters becomes more
important in the final stage. Based upon this idea, we schedule
the on/off switching of forces: when and which force should be
exerted or not exerted during the computation. Fig.5 shows how
forces are scheduled empirically.
stop locating clusters

Phase I
S1
S2

Parameters Cs, C, ls, and lr are empirically determined, which is
shown in Table 2. The values of Cs and C for forces S5, S6, A1,
A2, R1, and R2 are set as 0.3 initially, and increased gradually
up to 1.0 in the algorithm, while drawing rules corresponding to
these forces were not well satisfied. For example, for a relation
between a leaf and a cluster that includes the leaf (see Fig. 4(9)),
if the leaf is not within the cluster area, parameter Cs of the force
exerted on the paired elements is increased (this is the case for
S5 in Table 1). For a relation of nesting of clusters (see Fig.3(3)),
if the relation is not satisfied, parameter C is increased (this is
the case for A2 in Table 1).

Cs
0.3
0.3

ls
LENGTH×2
LENGTH×3

S3

0.3

LENGTH×3/4

S4
S5
S6

0.3
0.3~1.0
0.3~1.0

S7
S8

0.3
0.3

LENGTH×2
LENGTH×1/3
LENGTH×3/4
WIDTH
HEIGHT

ID
A1

C
0.3~1.0

A2
ID
R1

0.3~1.0
C
0.3~1.0

R2

0.3~1.0

lr
LENGTH/2 (within intersection)
or LENGTH×2 (others)
LENGTH×2

3.4
Scheduling
Scheduling for switching on/off of forces is another important
mechanism to control the process, to get successful drawings by
synchronizing many various forces or by eliminating unwanted
mutual influences among forces. This can make calculation

88

V

VI

VII

VIII

time

S4
S5

cluster leaves

S6
S7

form intersection area
adjust
cluster
size

S8
A1
A2

locate leaves in an
intersection area

nest clusters

R1
R2

distribute clusters

avoid overlaps

Fig. 4: Scheduling of forces and their purposes.
4

EVALUATION

We have made experiments to evaluate the performance of our
method in terms of the following three criteria:

• Undesirable placements of vertices that should be placed
within cluster areas and intersection areas (error rate %)
• Undesirable overlapping of clusters (error rate %)
• Undesirable overlapping of vertices (error rate %)

Table 2: Parameter tuning.
ID
S1
S2

IV

III

locate leaves

S3

The width and height of every leaf is given initially, which
define the area for labeling the leaf. The width and height of
every cluster is calculated in the algorithm as the lengths of
dummy edges shown in Figs. 1(1) and 1(2), respectively.
In Table 2, SIZE is defined as the maximum value among widths
and heights of paired elements, and is used for adjusting
parameter ls. WIDTH and HEIGHT of a cluster are the width and
height of the cluster, which are determined so that the cluster
area can include all the areas for leaves and clusters of its
subtree.

II

In the experiments, we have randomly generated fifty samples of
an intersecting clustered graph CI=(G, D) for various
specifications under the conditions such as:

•
•
•
•
•
•

G is connected.
The number of vertices in G is 100.
The mean degree for each vertex is approximately 3.
The number of clusters is 2~20.
The number of intersections is 1~10.
We have evaluation results after 500 steps in runtime.

Results of evaluation experiments are shown in Figs. 5, 6, and 7.
Effects of increase in the number of clusters are evaluated in
Experiment 1 (see Fig. 5), effects of increase in the number of
intersections without nested clusters are evaluated in Experiment
2 (see Fig. 6), and effects of increase in the number of
intersections with nested clusters in experiment 3 (see Fig. 7).
From the computation results, we have the followings:

•
•
•

The values of the three criteria all are satisfactorily low.
In all experiments, the overlap of clusters is always zero.
We can find increasing tendencies in overlaps of leaves in
Experiments 1 and 2, and placements of leaves in

•

Experiment 3.
Overall average error rates for the three criteria are
summarized in Table 3. All values are very small, which
means that our method shows satisfactory performance.

2.0

Placement of leaves
Overlap of leaves
Overlap of clusters

1.8
1.6

•

+
•
∗

•

•
•

•

1.4

Error rate (%)

Spec
ID

# of
leaves

# of
clusters

# of
intersections

# of
nested
clusters

#　of
leaves not
included

1

100

2

1

0

90

2

100

4

1

0

80

0.4

3

100

6

1

0

70

0.2

4

100

8

1

0

60

5

100

10

1

0

50

6

100

12

1

0

40

7

100

14

1

0

30

8

100

16

1

0

20

9

100

18

1

0

10

10

100

20

1

0

0

•

1.2

•

1.0

•

0.8

•

0.6 •

+
+∗

0.0 ∗
1

+
∗

∗

3

2

+
∗

5

4

+
∗

6

+

+
∗

∗

7

8

+

+
+

∗

∗

9

10

Spec ID

(2) Computation results
Fig. 6: Results of evaluation for Experiment 2.

Spec
ID

# of
leaves

# of
clusters

# of
intersections

# of
nested
clusters

#of
leaves
not
included

1

100

20

1

2

0

2

100

20

2

2

0

3

100

20

3

2

0

4

100

20

4

2

0

5

100

20

5

2

0

6

100

20

6

2

0

0.3

7

100

20

7

2

0

0.2

8

100

20

8

2

0

9

100

20

9

2

0

10

100

20

10

2

0

(1) Data specification
0.8
0.7

•

•

+
•
∗

Placement of leaves
Overlap of leaves
Overlap of clusters

•

0.6

Error rate (%)

0.5

•

0.4

0.1
.0

•

•
+
∗

1

∗

∗

3

2

•
+
∗
4

•
+
∗

∗

5

6

+
∗

+
∗

7

8

+
∗

∗

9

10

Spec ID

(1) Data specification

(2) Computation results
5.0

Fig. 5: Results of evaluation for Experiment 1.

4.0

1

# of
leaves
100

# of
clusters
20

# of
intersections

# of
nested
clusters

#of
leaves
not
included

1

0

0

+

3.5

Error rate (%)

Spec
ID

+
•
∗

Placement of leaves
Overlap of leaves
Overlap of clusters

4.5

+
+

+

+
+

+

•

•

+
+

3.0
2.5
8.4
2.0
1.5

•

2

100

20

2

0

0

3

100

20

3

0

0

4

100

20

4

0

0

0.5

5

100

20

5

0

0

0.0 ∗
1

6

100

20

6

0

0

7

100

20

7

0

0

8

100

20

8

0

0

9

100

20

9

0

0

10

100

20

10

0

0

•

•

•

•

•

•

•

1.0

∗

2

∗

3

∗

4

∗

5

∗

6

∗

7

∗

8

∗

9

∗

10

Spec ID

(2) Computation results
Fig. 7: Results of evaluation for Experiment 3.

(1) Data specification

89

Table 3: Average error rates for the three criteria.

Experiment 1
Experiment 2
Experiment 3

5

Placement
of
leaves
[%]
0.04
0.12
3.83

Criterion
Overlap
of
clusters
[%]
0
0
0

Overlap
of
vertices
[%]
0.33
1.30
1.70

DRAWING EXAMPLES

Drawing examples are shown in Figs. 8, 9, 10, and 11. In Fig.8,
leaves are drawn as small circles, and clusters rectangles. The
centered cluster includes three subclusters that share two leaves.
The inclusion relations between clusters and the relations for
sharing both are well drawn in the figure.

Fig. 9: Drawing example 2.
Note that when a circle is included by a square, an
inscribed circle is used, and when a circle includes a
square, a circumscribed circle is used.

Fig. 10: Drawing example 3.
Note that intersections including no element are possible.

Figure 8: Drawing example 1.
In Fig. 9, all clusters except the centered cluster are drawn as
circles. The three subclusters can be included in their mother
cluster successfully. They share two leaves successfully.
Fig. 10 shows that clusters intersect but they do not include
leaves. This type of intersections is allowed in our method.

90

Fig. 11 shows a drawing of a more complicated graph where two
leaves are shared by five clusters. In this case, the intersection is
separated as a cluster and the cluster is connected to its each
mother cluster with a undirected edge. Thus, it should be noted
that the strategy of unified simplification is keeping in this
transformation. (See the upper left part of Fig. 11.)
Fig. 12 shows a snapshot of the screen of our tool. Each leaf and
cluster is labeled with texts. We can make leaves and clusters,
and remove them smoothly anytime without disturbing the
mental map because drawing programs are always running.

Fig. 11: Drawing example 4.

Fig. 12: Snapshot of the screen of our drawing tool for intersecting clustered graphs.

91

6

CONCLUSION

In this paper, we have developed a heuristic method for drawing
an intersecting clustered graph where inclusions and
intersections are allowed, as well as adjacencies. Our previous
study presented a graph where nesting is limited to one level.
We extend it to allow nesting more than once. We adopt forcedirected placement techniques to develop this method.
Our method is based on simulation of a virtual physical system.
It looks very complicated, but actually we can easily implement
and modify the method. Our method is characterized by:

• Unified simplification of layout problem for a given
complicated graph by transforming it into a layout problem for
an undirected graph,
• Parameter tuning for coping with the increase in the number
of parameters controlling forces due to transformation, and
• Scheduling so as to switch the exertion of forces on/off.
Intersections can express elements with several attributes, and
clusters can express groupings of similar elements. Intersecting
clustered graphs can be used as tools to foster human thought in
a variety of fields.
We have described definitions, aesthetics, model and algorithm,
performance evaluation, and applications. Specially, we have
explained the details of techniques for parameter tuning and
scheduling. Results of performance tests show that the values of
the three criteria (error rate %) are satisfactorily low. This means
that the techniques of our method efficiently perform to create
aesthetic drawings for an intersecting clustered graph.
In the future, we will apply our method to real situations. Thus
our software must be improved in functional usability, for
example a provision of an editable graph viewer etc. We will
upgrade performance and functional aspects through developing
a system.

92

REFERERNCE
Sugiyama, K. (2002): Graph drawing and applications for
software and knowledge engineers, World Scientific.
[2] Sugiyama, K. and Misue, K. (1991): Visualization of
structural information: Automatic drawing of compound
digraphs, IEEE Trans. on Systems, Man, and Cybernetics,
vol.24, no.4, pp.876-892.
[3] Eades, P., Feng, Q. and Lin, X. (1996): Straight-Line
Drawing Algorithms for Hierarchical Graphs and Clustered
Graphs, LNCS 1027, Springer-Verlag, pp.113-128. (Proc.
GD ’95 Graph Drawing)
[4] Brokenauer, R. and Cornelsen, S. (2001): 8. drawing
clusters and hierarchies, Springer LNCS 2025, pp.193-227.
[5] Frishman, Y. and Tal, A. (2004): Dynamic drawing of
clustered graphs, Proc. IEEE Sysmposium on Information
Visualization 2004 (InfoVis 2004), pp.191-198.
[6] Omote, H. and Sugiyama, K. (2006): Method for drawing
intersecting clustered graphs and its application to Web
Ontology Language, Proc. Asia-Pacific Symposium on
Information Visualization 2006 (APVIS2006), Feb. 1-3,
Tokyo, pp.89-92.
[7] Eades, P. (1984): A heuristic for graph drawing,
Congressus Numerantium, vol. 42, 149-160.
[8] Fisk, C. J., Caskey, D. L. and West, L. E. (1967): ACCEL:
Automated circuit card etching layout, Proc. the IEEE,
pp.1971-1982.
[9] Kruskal, J. B. and Seery, J. (1980): Designing network
diagrams, Proc. 1st General Conf. On Social Graphics, U. S.
Dept. of the Census, pp.22-50.
[10] Borg, I. and Groenen, P. J. F. (2005): Modern
multidimensional scaling: Theory and applications, Springer
Series in Statistics.
[11] Kawakita, J. (1986): The KJ method. Tokyo, Chuo-koronsha. (in Japanese)
[12] Harel, D. (1972): On visual formalism. Comm. ACM 31(5):
514-530.
[13] Sowa, J. F. (1984): Conceptual structures. AddisonWesley.
[1]

