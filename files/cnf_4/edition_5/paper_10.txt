Many-to-One Boundary Labeling
Hao-Jen Kao∗

Chun-Cheng Lin†

Hsu-Chun Yen‡

Department of Electrical Engineering, National Taiwan University, Taipei, Taiwan 106, R.O.C.

A BSTRACT
In boundary labeling, each point site is uniquely connected to a label placed on the boundary of an enclosing rectangle by a leader,
which may be a rectilinear or straight line segment. To our knowledge, all the results reported in the literature for boundary labeling
deal with the so-called one-to-one boundary labeling, i.e., different
sites are labelled differently. In certain applications of boundary
labeling, however, more than one site may be required to be connected to a common label. In this case, the presence of crossings
among leaders often becomes inevitable. Minimizing the total number of crossings in boundary labeling becomes a critical design issue as crossing is often regarded as the main source of confusion in
visualization. In this paper, we consider the crossing minimization
problem for multi-site-to-one-label boundary labeling, i.e., finding
the placements of labels and leaders such that the total number
of crossings among leaders is minimized. We show the crossing
minimization problem to be NP-complete under certain one-side
and two-side labeling schemes. Subsequently, approximation algorithms are derived for the above intractable problems. We also
present an O(n2 log3 n)-time algorithm for the problem of minimizing the total leader length for multi-site-to-one-label boundary labeling, where n is the number of labels.
Keywords: Map labeling, boundary labeling.
Index Terms: H.5.2 [Information Interfaces and Presentation]:
User Interfaces—Graphical user interfaces ; D.2.2 [Software Engineering]: Design Tools and Techniques—User interfaces
1

I NTRODUCTION

In information visualization, cartography, geographic information
systems (GIS), and graph drawing, map labeling is an important
task which is concerned with efficiently placing extra information,
in the form of text labels, next to features (such as points, lines, or
area) in a drawing (map). In order to ensure readability, unambiguity and legibility, it is suggested that the labels be pairwise disjoint
and close to the features to which they belong [7]. A detailed bibliography and survey on map labeling can be found in [14, 10], and
the ACM Computational Geometry Impact Task Force [5] has identified label placement as an important area of research. The majority of map labeling problems are known to be NP-complete [1, 8]
in general. (The interested reader is also referred to [7, 12, 13] for
various approximations and heuristics for map labeling.)
Map labeling problems are classified by the following three
kinds of graphical features according to their dimensions, namely,
point features, line features, and area features. For example, in a
geographical map, a city (resp. river and lake) is typically represented by a point (resp. line and area) feature. Note that a point or a
∗ E-mail:

khr@cobra.ee.ntu.edu.tw
sanlin@cobra.ee.ntu.edu.tw
‡ Corresponding author. Research supported in part by NSC Grant
95-2221-E-002-074 and Grant 94EC17A02S1049, Taiwan.
E-mail:
yen@cc.ee.ntu.edu.tw
† E-mail:

Asia-Pacific Symposium on Visualisation 2007
5 - 7 February, Sydney, NSW, Australia
1-4244-0809-1/07/$20.00 © 2007 IEEE

line feature label is normally located next to the associated object,
while an area feature label is usually placed within the boundary of
the feature to be labeled.
Most of the research on map labeling has primarily focused on
labeling point features, and the basic requirement in this case is
that all the labels should be pairwise disjoint. It is clear that such a
requirement is difficult to be achieved in the case when large labels
are placed on dense points. In practice, large labels are usually used
in technical drawings or medical atlases where certain site-features
are explained with blocks of texts. To address this problem, Bekos
et al. proposed the so-called boundary labeling [4, 2], in which
all labels are attached to the boundary (four sides) of a rectangle R
enclosing all sites, and each site is connected to a unique label by
a leader, which may be a rectilinear or straight line segment. In
such a setting, they investigated how to place the labels and leaders
in a drawing such that there are no crossings among leaders and
either the total leader length or the bends of leaders are minimized
under a variety of constraints. In a recent article, Bekos et al. [3]
investigated a similar problem for labeling polygonal sites under
the framework of boundary labeling.
For the work reported in [4, 2, 3] regarding boundary labeling,
each label is uniquely associated with a site (point feature). In practice, however, it is not uncommon to see more than one site to be
associated with the same label. Such examples include the religion distribution in each state of a country, the language distribution of the world, or the association or organization composed of
some countries in the world, etc. In view of the above, in this paper
we investigate the multi-site-to-one-label boundary labeling (a.k.a.
many-to-one boundary labeling) in which the mapping from sites to
labels is a many-to-one function, i.e., more than one site is allowed
to be connected to a common label and each site is connected only
by an edge. Unlike the conventional boundary labeling, this kind
of labeling inevitably leads to a high possibility of crossings among
leaders in the drawing. Therefore, an important objective for this
kind of many-to-one boundary labeling is to find the placements of
labels and leaders such that the total number of crossings among
leaders is minimized. Aside from minimizing the total number of
crossing, we also consider the issue of minimizing the total leader
length under the framework of many-to-one boundary labeling in
this paper.
Conventionally, boundary labeling is identified as k-side labeling
with type-t leaders (where k ∈ {1, 2, 4} and t ∈ {opo, po, s}) if the
labels are allowed to be attached to the k sides of the bounding
rectangle R by only type-t leaders. The parameter t specifies the
way a leader is drawn to connect a site to a label. The opo, po, and s
stand for orthogonal-parallel-orthogonal, parallel-orthogonal and
straight-line, respectively, which can easily be understood from the
examples given in Figures 1 (a), (b) and (c). For each type-opo
leader, we further assume that the parallel (i.e, ‘p’) segment lies
immediately outside R in the so-called track routing area, as shown
in Figure 1 (a).
The main contributions of this paper include:
1. Crossing minimization problems for both one-side and twoside many-to-one labeling with type-opo leaders are proved to
be NP-complete (Sections 3 and 4). We also design approximation algorithms to cope with such intractable problems.

65

Track Routing Area
l1
l2
l3

l1

l4
R

l1
l2
l3

l2
l3
l4
R

l5
(a) Type-opo leaders

l5
(b) Type-po leaders

l4
R

l5
(c) Type-s leaders

Figure 1: Illustration of leaders.

2. Crossing minimization problem for one-side many-to-one labeling with type-po leaders is proved to be NP-complete (Section 5). A heuristic algorithm with satisfactory experimental
results is also given for this problem.
3. In Section 6, we show the many-to-one labeling with the objective to minimize the total leader length to be solvable in
polynomial time.
n4
l7

l3

l12
l10
l8
l4

l9
n2

R

n1

l2

l1

l5
l6

l11
n3

Figure 2: A 4-side many-to-one labeling with type-s leaders.

2 P RELIMINARIES
A k-side type-t many-to-one boundary labelled map (or k-side typet map, for short), where k ∈ {1, 2, 4} and t ∈ {opo, po, s}, is M =
(P, L, n1 , n2 , n3 , n4 , f ) where
• P = {p1 , p2 , ..., pN }, pi ∈ R2 , 1 ≤ i ≤ N, is the set of sites
(points) on the plane enclosed in a rectangle,
• L is the set of labels with |L|=n1 + n2 + n3 + n4 ,
• n1 , n2 , n3 , n4 ∈ N are the numbers of labels to the East, West,
South, and North, respectively, of the axis-parallel rectangle
enclosing all sites in P,
• f : P → L is an onto function which assigns each site in P to
a label in L. Note that f is a many-one function in general.
W.l.o.g., we assume that for k=1 (resp., 2), labels are only placed on
the east side (resp., east and west sides) of the enclosing rectangle
of P. Hence, n2 + n3 + n4 = 0 for k = 1 and n3 + n4 = 0 for k =
2. On the other hand, labels can be placed on the four sides of
the rectangle when k = 4. The parameter t, t ∈ {opo, po, s}, refers
to the type of leaders allowed for connecting sites to labels. The
opo, po, and s stand for orthogonal-parallel-orthogonal, parallelorthogonal and straight-line, respectively. See Figure 1 for these

66

three types of leaders. For notational convenience, we refer to the
East, West, South, and North sides to be the 1st, 2nd, 3rd, and 4th
sides throughout the rest of this paper. One should also note that
every label l is connected with | f −1 (l)| sites; hence, l has to have
| f −1 (l)| ports to which the sites are connected. Here we assume
that the locations of ports of each label are predefined (see label l3
with three ports in Figure 1 (a)). In addition, the leader connecting
site u to label l is denoted by ul.
A boundary labeling of a map M is a sequence of labels
(l1,1 , ..., l1,n1 , l2,1 , ..., l2,n2 , l3,1 , ..., l3,n3 , l4,1 , ..., l4,n4 ) such that ∀1 ≤
i ≤ 4, 0 ≤ j ≤ ni , li, j ∈ L. Intuitively speaking, li,1 , ..., l1,ni is the
sequence of labels along the i-th side. W.l.o.g., for i = 1 and 2
(i.e., east and west sides, resp.) a top-down ordering is assumed;
for i = 3 and 4 (i.e., south and north sides, resp.) a left-to-right
ordering is assumed. Figure 2 illustrates a 4-side type-s boundary
labeling. Note that we assume labels (drawn as rectangles) along
the same side to be of uniform size; hence, the ordering of labels
along each side is sufficient to determine the exact positions of the
labels. As f is a many-one function in general, there might be several sites connecting to the same label. For example, three sites are
connected to label l3 in Figure 1(a). It is easy to observe that to
minimize the number of crossings (or the total leader length), the
ordering of ports at which the three leaders touch label l3 (drawn as
a rectangle) must respect the ordering (in increasing order) of the ycoordinates of the three sides. The crossing number is the number
of crossings among leaders in a drawing.
One of the optimization problems considered in this paper is as
follows:
The C ROSSING P ROBLEM FOR k-S IDE M ANY- TO -O NE L ABEL ING WITH T YPE -t (CPkML-t, for short): Given a k-side type-t map
M , determine a boundary labeling for M so that the crossing number is minimized.
Before deriving our main results, we first recall two NP-complete
problems, namely, the Decision Crossing Problem (DCP) [6] and
the Max-Bisection Problem [15] that are closely related to our problems.
Consider a two-layered network G = (L0 , L1 , E) consisting of
disjoint sets L0 and L1 of nodes and a set E ⊆ L0 × L1 of edges.
Assume that the nodes in L0 and L1 appear on the vertical lines
x = 0 and x = 1, respectively, and the edges in E are straight line
segments joining two nodes from L0 and L1 respectively. A drawing
of G is generated by assigning each node v ∈ Li , i = 0, 1, to a ycoordinate yi (v). Hence, two edges uv and tw cross in the drawing
if and only if (y0 (u) − y0 (t))(y1 (v) − y1 (w)) < 0. Let the number
of crossings in a drawing of G specified by y0 and y1 be denoted by
cross(G, y0 , y1 ). In fact, the crossing number is affected only by the
ordering of the nodes of L0 and L1 , not by their precise positions;
so y0 and y1 are said the ordering of L0 and L1 , respectively. The
DCP is stated as follows:

The D ECISION C ROSSING P ROBLEM (DCP)
Instance: A two-layered network G = (L0 , L1 , E), an ordering y0 of
L0 , and an integer M.
Question: Is there an ordering y1 of L1 , so that cross(G, y0 , y1 ) ≤
M?

nodes, say Pi = {pi1 , pi2 , ..., pi(2k) }, in L0 , where pi j has the j-th
maximal y-coordinate among all. Then for j = 1 to k, we connect
pi j and pi(2k− j+1) to ni j . That is, we connect pi1 and pi(2k) to ni1 ,
pi2 and pi(2k−1) to ni2 , ... , and pik and pi(k+1) to nik . An example
is illustrated in Figure 3.

The Max-Bisection problem is stated as follows. So far the best
approximation ratio for the Max-Bisection problem is 1.431 [15].
The M AX -B ISECTION P ROBLEM: Given an undirected graph G =
(V, E) with non-negative weights wi j for each edge in E (and wi j =
0 if (i, j) ∈ E), partition the nodes in V into two sets S and V \ S of
equal cardinality so that
w(S) :=

∑

wi j

i∈S, j∈V \S

p11
p12
p13
p14
p21
p22
p31
p32
p33
p34

p1
p2
p3
p4

p41
p42
p43
p44
p45
p46

is maximized.
3

T HE C ROSSING P ROBLEM FOR O NE -S IDE M ANY - TO O NE L ABELING WITH T YPE -opo L EADERS
In this section, we show that the crossing problem for one-side
many-to-one labeling with type-opo leaders (CP1ML-opo) is NPcomplete (Subsection 3.1). We also give an approximation algorithm guaranteed to yield a solution which is less than or equal to
three times the optimal solution (Subsection 3.2). Note that for a restricted case in which at most two sites are connected to a common
label, the above approximation algorithm turns out to be optimal
[9].
3.1 CP1ML-opo is NP-complete
Consider the case when all the labels are placed on the East side of
rectangle R which encloses all the sites in the given map. Recall
that we assume that there are no two sites with the same x- or ycoordinates. Since we can arbitrarily adjust the x-coordinate of the
two bends of every type-opo leader in the track routing area (see
Figure 1 (a)), two leaders cross only when the y-coordinate order
of their corresponding sites are different from that of their corresponding labels. That is, the crossing number is affected only by
the y-coordinate orders of sites and labels, not by their x-coordinate
orders. As a result, our concerned problem is similar to the DCP
except our problem allows that more than one site is connected to a
common label. In what follows, we show that our concerned problem is NP-complete. The decision version of the problem can be
captured by the decision many-to-one crossing problem (DMCP)
as follows:
The D ECISION M ANY- TO -O NE C ROSSING P ROBLEM (DMCP)
Instance: A two-layered network G = (L0 , L1 , E) where the mapping from nodes in L0 to nodes in L1 is a many-to-one function, an
ordering y0 of L0 , an integer M.
Question: Is there an ordering y1 of L1 , so that cross(G, y0 , y1 ) ≤
M?
Theorem 1 DMCP is NP-complete.
Proof It is clear that DMCP is in NP because we can guess an
ordering of L1 and then check if the crossing number is no more
than M in polynomial time. It remains to show the NP-hardness,
which is established by a reduction from DCP as follows.
DCP differs from DMCP only in the restriction that each node
in L0 is connected only by an edge. From a DCP instance G =
(L0 , L1 , E), M, we construct a DMCP instance G = (L0 , L1 , E ), M
as follows. Let L1 = L1 . We denote the node with the i-th maximal
y-coordinate in L0 by pi , and {li1 , li2 , ..., lik } is the set of the nodes
in L1 to which pi is connected, i.e., there are k edges connecting
pi to k nodes in L1 . For each node pi in L0 , we create a set of 2k

G (L0, L1, E)

G' (L0', L1', E')

Figure 3: An example reducing from DCP to DMCP.

pis
pit

qs

pi (2| pi |− t +1)
pi (2| pi |− s +1)

qt
in G'

Figure 4: The first category of crossings.

pik
pi

qs

pj

qt

pi (2| pi |− k +1)
pjl

qs
qt

pi (2| pi |− l +1)
1 crossing in G

4 crossings in G'

Figure 5: The second category of crossings.

Denote the cardinality of Pi by |Pi | and the number of the nodes
in L0 by |L0 |. Let M be
|L0 |

∑2

i=1

|Pi |
+ 4M
2

We show that there exists an ordering y1 of L1 such that
cross(G , y0 , y1 ) ≤ M if and only if there exists an ordering y1 of
L1 such that cross(G, y0 , y1 ) ≤ M.
The crossings in G can be divided into the following two categories: the edge incident to node in Pi crosses the edge incident to
node 1) in the same Pi or 2) in Pj for i = j. For the first category of
crossings, as shown in Figure 4, for i = 1, ..., |L0 |, for any two pairs
of nodes in Pi , (pis , pi(2|pi |−s+1) ) and (pit , pi(2|pi |−t+1) ), s = t, there
are two crossings regardless of the order of qs and qt , and hence

67

there are 2 |P2i | crossings for all permutations of selecting 2 from
{pi1 , pi2 , ..., pi|Pi | }. So the crossing number for the first category is
|L |

0
2 |P2i | .
∑i=1
For the second category of crossings, as shown in Figure 5, the
edge pi qt crosses the edge p j qs in G if and only if there are the
four crossings shown in the right of Figure 5 in G , regardless of
the order of qs and qt . Therefore, there are 4M crossings for the
second category in G if and only if G has M crossings.

4

T HE C ROSSING P ROBLEM FOR T WO -S IDE M ANY - TO O NE L ABELING WITH T YPE -opo L EADERS
From our previous result that the crossing problem is NP-complete
for CP1ML-opo, the intractability result clearly holds for CP2MLopo as well. (CP1ML-opo is a special case of CP2ML-opo with
n2 = 0.) In this section, we consider CP2ML-opo under the restriction that n1 = n2 (i.e., the East and West sides contain the same
number of labels). We first show the crossing problem to be NPcomplete, then an approximation algorithm is given.

Corollary 2 CP1ML-opo is NP-complete.
3.2 An Approximation Algorithm
Our approximation algorithm is similar to the so-called median algorithm proposed by Eades and Wormald in [6]. The idea of the
median algorithm is to place the labels in “median order”. For
convenience and simplicity, we view the labeling problem as finding an ordering y1 of L1 in a two-layered network G = (L0 , L1 , E)
such that the crossing number is as small as possible. Define Nu
of u ∈ L1 as the nodes {v1 , v2 , ..., v j } ∈ L0 incident to u. The median order is, for each node u ∈ L1 , to choose the median of the
y-coordinates of the neighbors of u as the y-coordinate of u. Precisely, if Nu = {v1 , v2 , ..., v j } with y0 (v1 ) < y0 (v2 ) < y0 (v3 ) < ... <
y0 (v j ), then define med(u) = y0 (v j/2 ). The median algorithm sets
y1 (u) = med(u) for each node u ∈ L1 , and separates the two nodes
with the same median by an infinitesimal amount.
The crossing number in the output of the median algorithm is
denoted by med(G, y0 ), while the crossing number in the output of
the optimal labeling is denoted by opt(G, y0 ).
Theorem 3 For all two-layered networks G where the mapping
from L0 to L1 is a many-to-one function and for all orderings y0 ,
med(G, y0 ) ≤ 3opt(G, y0 ).
Proof The proof is along a similar line of that of [6]. See [6] for
details.

Brown
booby

The D ECISION T HREE -L AYERED M ANY- TO -O NE C ROSSING
P ROBLEM WITH |LL | = |LR | (D3MCP)
Instance: A three-layered network G = (L0 , LL , LR , E) with |LL | =
|LR | where the mapping from the nodes in L0 to the nodes in LR ∪LL
is a many-to-one function, an ordering y0 of L0 , an integer M.
Question: Can we find the orderings yL of LL and yR of LR and swap
some nodes in LR with those in LL , so that the crossing number is
no more than M?
Theorem 4 D3MCP is NP-complete.

Figure 6: The distribution of some animals in Taiwan, which is represented by one-side many-to-one labeling with type-opo leaders.

Proof It is clear that D3MCP is in NP; to prove its NP-hardness,
we establish the reduction from the DMCP mentioned in Theorem
1 as follow. Starting with a DMCP instance G = (L0 , L1 , E), y0 ,
M, we construct a D3MCP instance G = (L0 , LL , LR , E ), y0 , M .
Denote |L0 | by N and |L1 | by n. Since the mapping from L0 to L1 is
many-to-one, N ≥ n. Assume L0 = {p1 , p2 , ..., pN } with y0 (p1 ) >
y0 (p2 ) > ... > y0 (pN ). Let L0 be L0 and LR be L1 , so |LR | = n. Then
create n nodes, say l1 , l2 , ..., ln with y0 (l1 ) > y0 (l2 ) > ... > y0 (ln ),
in LL , i.e., |LL | = n. For each node li in LL , we add 2 N2 + 2 nodes
connected to li into L0 , i.e., |L0 | = N + n(2 N2 + 2), as follows.
For each node li in {l1 , l2 , ..., ln−1 }, we add N2 + 1 nodes between
y0 (pi−1 ) and y0 (pi ) in L0 and N2 + 1 nodes between y0 (pi ) and
y0 (pi+1 ) in L0 , and then connect those nodes to li . For the node ln ,
we add N2 + 1 nodes between the y0 (pn−1 ) and y0 (pn ) in L0 and
N
2 + 1 nodes below y0 (pN ) in L0 , and then connect those nodes to
ln . The illustration is given in Figure 7. Let M = M. Notice that
M ≤ N2 .
A node u in LR (resp. LL ) is said to be swapped with a node v
in LL (resp. LR ) if u and v are placed at yL (v) in LL and yR (u) in
LR , respectively. We claim that no matter what the order of LR is,
the crossing number will not decrease while we swap α nodes in
LR with α nodes in LL , where α is any integer no more than n.

An experimental result of the approximation algorithm is given
in Figure 6, which illustrates the distribution of some wildlife animals in Taiwan.

Proof of Claim See also Figure 7. For i < n, if li is swapped with
the node in LR that is not adjacent with pi , then the crossing number
is increase by at least N2 + 1 > M. For example, if we swap l3

Taiwan hill
partridge

Masked
palm civet

Hawk

Melogale
moschata

Bamboo
partridge

Chinese
pangolin

Mallard

68

4.1 CP2ML-opo is NP-complete even when n1 = n2
Since the labeling in this section also applies opo-leaders, the same
as the previous section, hence the crossing number is influenced
only by the y-coordinate orderings of sites, the labels in the right
side, and the labels in the left side, respectively, and hence the problem can modeled as an analogy of three-layered network. A threelayered network G = (L0 , LL , LR , E) consists of disjoint sets L0 , LL ,
and LR of nodes and a set E ⊆ L0 × LL ∪ L0 × LR of edges. Assume
that the nodes in L0 , LL , and LR appear in the vertical lines x = 0,
x = −1, and x = 1, respectively. Similar to the definition of twolayered network, y0 , yL , yR can be defined. Notice that the crossing
number in a three-layered network is influenced by not only altering the orderings yL and yR but also swapping the nodes in LR with
those in LL . In what follows, we show that our concerned labeling
problem is NP-complete. The decision version of the problem can
be stated as follows:

l1

l2

p1

§N·
¨ ¸
©2¹

+1

§N·
¨ ¸
©2¹

+1

side and then move them to the West side such that the crossing
number is as small as possible. In what follows, we construct a
complete weighted graph G in Step 2, and hence our problem can
be explained as partitioning the nodes in V into two sets S and V \ S
of equal cardinality so that

r1

p2

r2

w(S) :=
l3

p3

l4

p4

r4

ln

pn

rn

wi j +

N
2

+ 2) = N + 5(2

∑

wi j

i, j∈V \S

r3

is minimized. We obviously see that such a problem is equivalent to
the Max-Bisection problem. We know that the Max-Bisection problem has a 1.431-approximation algorithm [15], but we cannot apply
the algorithm to our problem directly as discussing the approximation ratio. This is because the computation of the approximation
ratio in the case when w(S) is zero is wrong. As a result, the algorithm needs to check in advance whether there exists a partition
such that w(S) is zero in Step 3.

pN

Figure 7: G (L0 , LL , LR , E ) with |L0 | = N + n(2
2), |LL | = 5, and LR = L1 .

∑

i, j∈S

N
2

+

with r3 rather than r1 in Figure 7, then the edge r3 p4 and the edges
incident to l4 will cause N2 + 1 crossings. Therefore, each li = ln
of the α nodes in LL only can be swapped with the node in LR that is
adjacent with pi . Based on the same reason, ln only can be swapped
with the node in LR that is adjacent with one of {pn , pn+1 , ..., pN }.
If the α nodes originally in LR cross one of the other n − α nodes
in LR , then the edges incident to the α nodes originally LL and the
edges incident to the n − α nodes in LR will cause at least N2 + 1
crossings, which is not allowed. Similarly, it is not allowed that
the edges incident to the α nodes originally in LR cross one of the
edges incident to the other n − α nodes in LL . According to the
above, swapping nodes causes either 0 crossing or at least N2 + 1
crossings, as claimed.
With this claim, we can prove that G(L0 , L1 , E) has at most M
crossings if and only if G (L0 , LL , LR , E ) has at most M = M crossings. We can observe that any crossing number of G can be achievable by changing the ordering yR of LR once and then swapping α
nodes in LR with α nodes in LL once. From the proof of claim,
we know that the swapping operation causes either 0 crossing or
at least N2 + 1 > M crossings. Hence, any crossing number of G
relies on how to change the ordering yR of LR . That is, the crossing
problem for G is equivalent to that for G.

Algorithm 1 A PPROX -CP2ML-opo
1: Put all the n labels in the median order on the East side of R.
2: Construct a complete weighted graph G = (V, E) where each
node in V corresponds to a label, and the weight wi j of edge
(i, j) equals the number of crossings of edges incident to nodes
i and j (in the median order on the East side).
3: Check if w(S) is zero. If so, output w(S) = 0, otherwise do the
next step. (The details of this step are given in Appendix)
4: Using G as the input, run the 1.431-approximation algorithm
of the Max-Bisection problem. Output w(S).

Theorem 6 For the CP2ML-opo in the case when n1 = n2 , there
exists a 3(1 + 0.301
c−1 )-approximation algorithm, where c is defined
as folows:
2
∑i, j∈V wi, j
if ∑i, j∈V ;wi j >0 1 ≤ n4 , then c = ∑ w −min{w
|w >0} .
i, j∈V

if ∑i, j∈V ;wi j >0 1 >

n2
4,

then c =

i, j

ij

ij

∑i, j∈V wi, j
n2 /4
∑k=1 wk

where {wk } is the sort of {wi j |i, j ∈ V }, from maximum to minimum.
Proof In Algorithm 1, since Step 3 outputs zero if and only if the
optimal crossing number is zero, it suffice to show that the output
of Step 4 is as required. Let MSOPT denote the optimal solution
of the Max-Bisection problem. As the optimal crossing number is
nonzero, we discuss the following two cases:
1. If the number of edges with positive weights is less than or
equal to the number of edges of a complete bipartite graph
consisting of two disjoint sets with equal cardinality n/2, i.e.,
∑i, j∈V ;wi, j >0 1 ≤ ( n2 )2 , then MSOPT is not able to partition
all the edges with positive weights since the optimal crossing
number is nonzero. Therefore,
MSOPT ≤

∑

wi j − min{wi j |wi j > 0}

i, j∈V

Corollary 5 CP2ML-opo is NP-complete even when n1 = n2 .
4.2

Approximation Algorithm with Equal Number of Labels on Two Sides
In this subsection, we propose an approximation algorithm for the
CP2ML-opo in the case when the number of labels on the East side
is equal to that on the West side, i.e., n1 = n2 = n/2, n is even.
The approximation algorithm is given in Algorithm 1. In Step
1, all the n labels are placed in the median order on the East side
of R. When we say that a label moves to the West side, it means
that the label is placed on the West side of R and do not change
its original y-coordinate, i.e., the median of y-coordinates of its adjacent nodes. Our objective is to choose n2 labels from the East

=⇒

∑i, j∈V wi j
∑i, j∈V wi j
≥
=c
MSOPT
∑i, j∈V wi j − min{wi j |wi j > 0}

2. In the case when ∑i, j∈V ;wi, j >0 1 > ( n2 )2 , MSOPT only can cut
at most ( 2n )2 edges, so
n2 /4

MSOPT ≤

∑ wk
k=1

=⇒

∑i, j∈V wi j
∑i, j∈V wi j
≥ n2 /4
=c
MSOPT
∑k=1 wk

69

where {wk } is the sort of {wi j |i, j ∈ V }, from maximum to
minimum.
Obviously, c > 1. Denote the output of Step 4 of Algorithm 1 by
cAPX , and the minimal crossing number by cOPT . Then

5.1 CP1ML-po is NP-complete
Different from Section 3, the x-coordinate ordering of sites plays an
important role in the problem discussed in this section, and hence
the problem cannot be represented as a two-layered network. The
decision version of this problem is stated as follows:

MS

OPT
∑i, j∈V wi j − 1.431
cAPX
≤
cOPT
∑i, j∈V wi j − MSOPT
0.301
= 1+ ∑ w
i, j∈V i j
MSOPT − 1

≤ 1+

The D ECISION C ROSSING P ROBLEM FOR O NE -S IDE M ANY- TO O NE L ABELING WITH po-L EADERS (DCP1ML-po)
Instance: A one-side type-po map M = (P, L, n, 0, 0, 0, f ), an integer M.
Question: Is there a boundary labeling for M such that the crossing
number is no larger than M?

0.301
c−1

Recall that we place all the labels in the median order on the East
side in Step 1 of Algorithm 1. Since the median algorithm is a
3-approximation algorithm for one-side many-to-one labeling with
opo-leaders, we get a 3(1 + 0.301
c−1 )-approximation algorithm.
With respect to the Taiwan map with the same sites and labels as
in Figure 6, we consider the CP2ML-opo in the case when n1 = n2 ,
i.e., we require that the numbers of labels on both sides be the same.
The experimental result of Algorithm 1 is given in Figure 8, which
gives us a higher degree of balance in visibility in comparison with
Figure 6.

l1
l2
l3

Brown
booby

Melogale
moschata

Masked
palm civet

Figure 9: A special case of DCP1ML-po where the y-coordinate of
any site is less than that of the top border of the lowest label. Note
that some of the edges are not shown in the figure.

Bamboo
partridge

Hawk

Mallard

Chinese
pangolin

In this case, two leaders cross only when the x-coordinate order
of any two sites is different from the y-coordinate order of their
corresponding labels (recall that in Section 2 once the position of
label is decided, the port position also can be decided such that the
crossing number is the smallest). Recall that in DMCP, two edges
cross only when the y-coordinate order of any two nodes in L0 is
different from the y-coordinate order of their corresponding nodes
in L1 . Obviously, the special case of DCP1ML-po and DMCP are
equivalent as counting the crossing number. Therefore, DCP1MLpo is NP-hard.

4.3 A Greedy Heuristic
A greedy heuristic for CP2ML-opo is proposed but the approximation ratio is not yet known. The greedy heuristic is given in
Algorithm 2.
Algorithm 2 G REEDY-CP2ML-opo(G)
– Put all the labels on the East side in the median order. The label
with i-th larger y-coordinate in the East side is denoted by li
– For i = 1, 2, ..., n, if li moves to the West side such that the
number of crossings on the two sides is fewer, then li moves to
the West side.
C ROSSING P ROBLEM FOR O NE -S IDE M ANY - TO -O NE L A BELING WITH T YPE - po L EADERS
In this section, we investigate the crossing problem for one-side
many-to-one labeling with type-po leaders (CP1ML-po).

70

Proof Obviously this problem is in NP because we can guess an
ordering of labels and then check if the crossing number is no more
than M. Next we show that this problem is NP-hard. We can reduce
the DMCP mentioned in Section 3 to a special case of DCP1MLpo where the y-coordinate of any site is smaller than that of the top
borderline of the lowest label, as illustrated in Figure 9.

Taiwan hill
partridge

Figure 8: The distribution of some animals in Taiwan, which is represented by two-side many-to-one labeling with type-opo leaders.

5

Theorem 7 DCP1ML-po is NP-complete.

lm

5.2 A Heuristic
We give a polynomial time heuristic for the labeling problem of
this section (CP1ML-po). The heuristic is stated as follows. Consider a one-side type-po map M = (P, L, n, 0, 0, 0, E, f ), where we
let L = {l1 , l2 , ..., ln } and note that f −1 (li ) is the set of the sites connected to the common label li . Our heuristic is stated in Algorithm
3, which runs in O(n log n) time. We implement the algorithm and
give some experimental results to compare the minimal crossing
number and the output of Algorithm 3 in Figure 10, which shows
that the algorithm gives a good quality.
6 T HE L EADER L ENGTH P ROBLEM
As investigating many-to-one labeling, besides to minimize the
crossing number, the alternative objective can be to minimize the
total leader length. In this section, we give an algorithm to minimize
the total leader length, which can be suitable for all cases, i.e., regardless of opo-leader or po-leader and regardless of one-side, twoside, or four-side. As far as leader length is concerned, the length
of a type-opo or type-po leader can be measured by Manhattan distance, i.e., the distance between site and label measured along axes
at right angles. For example, in a plane with site u at (x1 , y1 ) and

Algorithm 3 H EURISTIC -CP1ML- po(G)
– For i = 1 to n, the sites in f −1 (li ) are sorted according to their xcoordinates, and let pi1 be the site with the smallest x-coordinate
in f −1 (li ).
– {p11 , p21 , ..., pn1 } are sorted according to their x-coordinates,
and rewritten as {p11 , p21 , ..., pn1 } with x(p11 ) < x(p21 ) <
x(pn1 ). Let li denote the label to which pi1 is connected.
– Assume that the order π j of {l1 , l2 , ..., l j } has been determined
for some j < n. For i = j + 1 to n, l j+1 is placed ahead or behind
π j according to which case leads to fewer crossings.

Number of labels: 8
1400
1200
1000

crossings

optimal

800

our
ALG

600
400
200
0
23 26 28 28 36 40 44 45 53 53 54 55 57 60 90

sites

label l at (x2 , y2 ), the length of lader ul is |x1 − x2 | + |y1 − y2 |. Our
concerned problem can be stated as follows:
The
L EADER
L ENGTH
P ROBLEM
FOR
M ANY- TO O NE L ABELING (LLPML): Given a k-side type-t map
M = (P, L, n1 , n2 , n3 , n4 , f ), find a boundary labeling for M
such that the total leader length is as small as possible.

Number of labels: 9
1000
800
600

optimal

crossings

our
ALG

400
200

In what follows, we show how the above problem can be reduced
to minimum weight matching in a bipartite graph. A matching M on
a graph G is a set of edges of G such that any two edges in M shares
no common node. A maximum matching of G is a matching of the
maximum cardinality. The largest possible matching on a graph
with 2n nodes consists of n edges, and such a matching is called
a perfect matching. Consider a 2n-node complete weighted graph
G where every node is a point on the plane and the weight of an
edge between any two points is the Manhattan distance between
the points. The minimum weight matching of G for points in the
plane under the Manhattan metric is the perfect matching of G that
has the minimum sum of the matched edge weights. It is known
that the minimum weight matching problem for points in the plane
under the Manhattan metric in bipartite graphs with 2n nodes can
be found in O(n2 log3 n) time by applying Vaidya’s algorithm [11].

0

26 31 33 33 37 49 55 56 58 60 61 63 64 65 83
sites

Number of labels: 10
1800
1600
1400
1200

crossings

optimal
our
ALG

1000
800
600
400
200
0
29 34 36 38 47 54 56 59 66 68 69 73 73 74 108

Theorem 8 LLPML can be solved in O(n2 log3 n) time.
Proof A label without text inside is called a blank label. In fact,
given a map, we know the number of labels placed on each side
and hence the precise positions of blank labels on each side. As a
result, we only need to decide which label text is stuck on certain
blank label, called label slot. Recall that f −1 (l) is the set of sites
connected to label l. The map in LLPML can be modeled as a
complete weighted bipartite graph G = ((U,W ), E) where U is the
set of nodes each of which represents a f −1 (l); W is the set of nodes
representing label slots; E is the set of edges representing leaders;
the weight w(els ) of each edge els between f −1 (l) and label slot s
is equal to the sum of the Manhattan distances between each sites
in f −1 (l) and certain port of s (recall that in Section 2 once the
position of label is decided, the port position also can be decided
such that the leader length is the smallest). It is easy to see that G
has a minimum weight matching if and only if M has a labeling
such the minimal total leader length.
7 C ONCLUSIONS AND F UTURE W ORK
We have shown the crossing problems for both one-side and twoside many-to-one labeling with type-opo leaders as well as one-side
many-to-one labeling with type-po to be NP-complete. For such intractable problems, we have also given approximation algorithms or
heuristics with satisfactory performances. In the future, we plan to
investigate the crossing problems for four-side many-to-one labeling with either type-opo or type-po leaders. It is also interesting to
investigate the case when sites are of more complicated shape (such
as lines, rectangles) and size, which tend to cause a large number of
crossings.

sites

Figure 10: The experimental results for the special case of DCP1MLpo where the y-coordinate of any site is less than that of the top
border of the lowest label.

R EFERENCES
[1] P. Agarwal, M. van Kreveld, and S. Suri. Label placement by maximum independent set in rectangles. In Proceedings of the 9th Canadian Conference on Computaional Geometry (CCCG’97), pages 233–
238, 1997.
[2] M. Bekos, M. Kaufmann, K. Potika, and A. Symvonis. Boundary
labelling of optimal total leader length. In Proceedings of Panhellenic Conference on Informatics, volume 3746 of LNCS, pages 80–89,
2005.
[3] M. Bekos, M. Kaufmann, K. Potika, and A. Symvonis. Polygons labelling of minimum leader length. In Proceedings of Asia Pacific Symposium on Information Visualisation 2006 (APVIS2006), pages 15–21,
2006.
[4] M. Bekos, M. Kaufmann, A. Symvonis, and A. Wolff. Boundary labeling: Models and efficient algorithms for rectangular maps. Computational Geometry: Theory and Applications. To appear.
[5] B. Chazelle and 36 co-authors. The computational geometry impact
task force report. In B. Chazelle, J. E. Goodman, and R. Pollack,
editors, Advances in Discrete and Computational Geometry, volume
223, pages 407–463. AMS, 1999.
[6] P. Eades and N. C. Wormald. Edge crossings in drawings of bipartite
graphs. Algorithmica, 11:379–403, 1994.

71

[7] E. Imhof. Positioning names on maps. The American Cartographer,
2:128–144, 1975.
[8] C. Iturriaga and A. Lubiw. NP-hardness of some map labeling problems. Technical Report CS-97-18, University of Waterloo, 1997.
[9] M. Newton, M. U˘zovi˘c, and I. Vrt’o. One sided crossing minimization
is NP-hard for sparse graphs. In Proceedings of the 9th Int. Symposium
on Graph Drawing (GD 2001), volume 2265 of LNCS, pages 115–
123, 2004.
[10] G. Neyer. Map labeling with application to graph drawing. In
M. Kaufman and D. Wagner, editors, Drawing graphs: Methods and
models, volume 2025 of LNCS, pages 247–273. 2001.
[11] P. M. Vaidya. Geometry helps in matching. SIAM Journal on Computing, 18:1201–1225, 1989.
[12] F. Wagner. Approximate map labeling is in ω(n log n). Technical
Report B 93-18, Fachbereich Mathematik und Informatik, Freie Universitate Berlin, 1993.
[13] F. Wagner and A. Wolff. Map labeling heuristics: Provably good and
practically useful. In Proceedings of the 11 th Annual ACM Symposium on Computational Geometry, pages 109–118, 1995.
[14] A. Wolff and T. Strijk.
The map-labeling bibliography.
http://i11www.ira.uka.de/map-labeling/bibliography/, 1993.
[15] Y. Ye.
A .699-approximation algorithm for max-bisection.
Manuscript, 1999.

Procedure 5 BIPART(k, D) //D is L or R. If D is L, then D is R.
for i := 1 to n do
if ((i, k) ∈ E and mark[i] is true) then
if (i ∈ D) then
return f alse;
else
mark[i] := true;
L := {i} ∪ D;
if (BIPART(i, D) is f alse) then return f alse;
end if
end if
end for
return true;

APPENDIX
• Details of Step 3 of Algorithm 1
In this step, we checks if there exists a partition such that w(S) =
∑i, j∈S wi j + ∑i, j∈V \S wi j is zero. First, we delete the edges with
wi j = 0 in G, and then executes Algorithm 4 by using the new G
as the input. If Algorithm 4 returns true, it means that the new G
can be decomposed into m bipartite graphs, otherwise the crossing
number is nonzero. Then Algorithm 6 uses dynamic programming
to combine the m bipartite graphs to construct a new bipartite graph
consisting of two disjoint sets with equal cardinality n/2. If the
output of Algorithm 6 is true, then the crossing number is zero,
otherwise nonzero.

Algorithm 4 FIND BIPARTITE(G)
m := 1;
for i := 1 to n do // there are n nodes in our transformed problem.
mark[i] := f alse; // if the i-th node is put to bipartite graphs.
end for
L := 0,
/ R := 0;
/ // L and R initially empty.
L := {1} ∪ L; // {1} is put to L
if (BIPART(1, L) is true) then // by calling Procedure 5
nR [m] := |R|; // record the sizes of each bipartite graphs for
nL [m] := |L|; // using dynamic programming.
else
return f alse;
end if
for i := 2 to n do
if (mark[i] is f alse) then
m := m + 1, L := 0,
/ R := 0;
/
if (BIPART(2, L) is f alse) then
return f alse;
else
nR [m] := |R|, nL [m] := |L|;
end if
end if
end for
return true;

72

Algorithm 6 COMBINE BIPARTITE(G)
1: We construct a n × n × m table where m is the number of bipartite graphs generated by Algorithm 4. At first, all entries of the
table is initially assigned to zero. Note that each entry only can
be 1 or 0.
2: Recall that each bipartite graph records nL [i] and nR [i],
i ∈ {1, ..., m}. In the table, entries (nL [1], nR [1], 1) and
(nR [1], nL [1], 1) are assigned to 1.
3: For the j-th bipartite graph, if entry (p − nL [ j], p − nR [ j], j − 1)
or (p − nR [ j], p − nL [ j], j − 1) is 1, then (p, q, j) is assigned to
1.
4: If entry (n/2, n/2, m) is 1, then return true, otherwise false.

