Visual Cluster Exploration of Web Clickstream Data
Jishang Wei∗

Zeqian Shen†

Neel Sundaresan‡

Kwan-Liu Ma§

University of California, Davis

eBay Research Labs

eBay Research Labs

University of California, Davis

A BSTRACT
Web clickstream data are routinely collected to study how users
browse the web or use a service. It is clear that the ability to recognize and summarize user behavior patterns from such data is valuable to e-commerce companies. In this paper, we introduce a visual
analytics system to explore the various user behavior patterns reflected by distinct clickstream clusters. In a practical analysis scenario, the system first presents an overview of clickstream clusters
using a Self-Organizing Map with Markov chain models. Then the
analyst can interactively explore the clusters through an intuitive
user interface. He can either obtain summarization of a selected
group of data or further refine the clustering result. We evaluated
our system using two different datasets from eBay. Analysts who
were working on the same data have confirmed the system’s effectiveness in extracting user behavior patterns from complex datasets
and enhancing their ability to reason.
1

I NTRODUCTION

Clickstreams record user clicking actions on the web. Analyzing clickstream data provides insights into user behavior patterns,
which are extremely valuable for e-commerce businesses like eBay.
For example, knowing different user behavior patterns helps conduct market segmentations in order to develop marketing strategies,
or enhance personalized shopping experience. In practice, however, learning the various user behavior patterns is nontrivial. Analysts often have little knowledge but many questions about what
user behaviors are hidden in a clickstream dataset. By interviewing
analysts at eBay, we found the following questions are frequently
asked.
- What are the most frequent user behavior patterns?
- What are the demographics of the users who follow a specific
behavior pattern?
- How do the behavior patterns correlate with the performance
of the online service?
An interactive data exploration environment provides a fairly effective way of finding answers to these questions. In our work, we
design a visual analytics system to support such an answer-seeking
process. This visual analytics system enables analysts to inspect
different user behavior patterns and examine the associated pattern
profiles.
Nevertheless, clickstream data have a number of characteristics [5] that make the visual analysis task challenging. For example, clickstreams are inherently heterogeneous, and uncertainty
naturally arises during automatic clustering which makes it indeterminate to partition the data. In addition, it is uneasy to visually
∗ e-mail:

jswei@ucdavis.edu
zeqshen@ebay.com
‡ e-mail:nsundaresan@ebay.com
§ e-mail:ma@cs.ucdavis.edu
† e-mail:

IEEE Symposium on Visual Analytics Science and Technology 2012
October 14 - 19, Seattle, WA, USA
978-1-4673-4753-2/12/$31.00 ©2012 IEEE

summarize a cluster of clickstreams. It might be easy to describe
the group behavior verbally, but difficult to present visually.
To handle these challenges, in our work, we utilize a derived
Self-Organizing Map(SOM) to map and cluster the clickstreams;
design an enlightening visualization from which analysts can see
the clear cluster structure; and provide intuitive interaction tools to
enable detailed data examination and cluster structure refinement.
The major contributions of our work include:
- An SOM with Markov chain models is derived to map clickstreams to a 2D space.
- A 2D layout algorithm is introduced to reduce visual clutter.
- An interactive cluster exploration process is designed to enable user-guided clustering.
We have used real clickstream data to test and evaluate our
method with assistance from analysts and product managers at
eBay. Our method proves to be helpful in discovering user behavior
patterns and the corresponding demographics.
2 R ELATED W ORK
The visual cluster exploration of clickstreams is related to data clustering, visualization and interactive exploration.
Clustering web clickstream data to discover user behavior patterns has drawn great attention in web usage mining [22, 24]. The
algorithms for clickstream data clustering mainly fall into two categories: similarity-based and model-based methods. Similaritybased methods define and utilize similarity metrics to group similar clickstreams. An appropriate similarity metric is the core of
this type of methods. The edit distance, related longest common
subsequence and their variations are the most frequently used metrics [2,7,9,13]. Model-based clustering employs probabilistic models to cluster and describe clickstream data [5, 17]. This method
assumes that user behaviors are generated by a set of probabilistic
models and each model corresponds to a cluster. The clustering
process is to recover the model parameters and assign clickstreams
to the cluster where the model best describes them. Choosing an application suitable model is critical. There have been many models
proposed to describe user behaviors [5, 17, 19, 21, 28], and Markov
models (e.g. first order Markov models, or Hidden Markov models) are the most commonly utilized ones. Compared to similaritybased methods, model-based methods offer better interpretability
since the resulting model of each cluster directly characterizes that
cluster. Moreover, model-based clustering algorithms often have
a computational complexity that is “linear” to the number of data
objects under certain practical assumptions.
A proper visualization of clickstream clusters reveals data patterns. One direct strategy is to use separate windows with each
showing one cluster. For example, Cadez et al [5] and Manavoglu
et al. [17] visualized the clusters of clickstreams with multiple windows. Each window shows the clickstream traces of one kind. This
method emphasizes individual clickstream patterns, but cuts the
connections among clusters. Space-filling approaches are a widely
used type of visualization technique, which arrange and display the
data in a constrained space. The treemap one popular example
among them. For instance, Xu et al. [27] applied treemap to display large digital collections. The treemap was improved through

3

pixel-based rendering and glyph-based techniques to show additional information dimensions. Wattenberg presented four generally desirable properties of a “perfect” layout for the space-filling
visualization [26]. He then constructed such a layout, jigsaw map,
and visualized real-world data with this map.
Interactive, visually-aided cluster analysis has been studied to
handle clickstream data. Makanju et al. [16] introduced a visual
analysis tool, LogView, to cluster server log event sequences and
visualize the clustering result by treemaps [10]. LogView provides
interaction tools to enable searching, filtering and selection of data
based on the treemaps. Lee and Podlaseck [15] described an interactive visualization system that supports interpreting and exploring
clickstream data of online stores. Their system includes interaction
tools such as zooming, filtering, color coding, dynamic querying,
and data sampling, in addition to visualization options such as parallel coordinates and scatter plot. Takada and Koike [23] developed
a highly interactive visual log browser named MieLog. MieLog
uses interactive visualization and statistical analysis for manual log
inspection tasks. Lam et al. [14] built Session Viewer, a visualization tool to facilitate statistical and detailed analysis of web session
data and bridge gaps between them. Shen and Sundaresan [20] introduced TrailExplorer to analyze temporal user behavior patterns
in webpage flows. TrailExplorer is particularly tailored to assist
visual analysis of preprocessed web session data.
3

DATA AND A PPROACH OVERVIEW

A clickstream is an ordered sequence of predefined actions. For
example, consider a seller listing items for sale on eBay, they need
to complete the Sell-Your-Item page. The page requests extensive
selling related information, which are categorized into eight sections: Category: select a category where the item will appear; Title:
write a title for the item; Picture: select or upload pictures of the
item; Description: describe the item; Pricing: set a price for the
item; Payment: set the payment options; Shipping: choose shipping
methods and set the shipping cost; OtherOptions: set other information about the listing, such as tax and return policy. The clickstream
data from the Sell-Your-Item page captures user actions in terms of
the sections they edit. A sample of the data is shown in Figure 1,
where each row represents one clickstream. We can see that users
edited the sections in different ordering, skipped some sections and
revisit some in the same clickstream. User demographics and other
selling related information are collected as well for understanding
their correlations with user behaviors.
Figure 2 shows the general visual cluster exploration process using our system. First, clickstreams are mapped to a 2D plane, while
the topological relations among data are preserved. Second, the
clickstreams are visually encoded, and their placement are adjusted
to reduce visual clutter. This 2D visualization makes it possible to
both observe an overview of the cluster structure and perceive individual clickstream patterns. Third, analysts interpret the visual
representation, interact with data to obtain detailed information and
select representative clickstreams as cluster prototypes. Fourth, the
selected groups can be either shown with statistical summarization
or used to refine the clustering result. Users can iterate between
the third and fourth steps until a satisfactory result is achieved. The
rest of the paper is organized as follows. Our methods for data
mapping and visualization are introduced in Section 4 and Section
5, respectively. Section 6 addresses how our system supports interactive cluster exploration. Finally, two case studies are presented to
demonstrate how the system is used in practice.
4

DATA M APPING AND C LUSTERING

Practically speaking, it is intuitive for people to perceive and interact with data in a lower dimensional space. In our work, we
choose to map the clickstreams on a 2D plane to facilitate data
perception. Meanwhile, we hope to partition data into clusters

4

Figure 1: A sample of the clickstream data on the Sell-Your-Item
page of the eBay website. There are eight predefined actions based
on the eight sections on the page, including Category, Title, Picture,
Description, Pricing, Payment, Shipping and OtherOptions. Each row
represents one clickstream.

so as to reveal different behavior patterns. The Self-Organizing
Maps (SOM) [11, 12] is such a method that can achieve our goal.
However, the conventional SOM is designed to handle data of the
same dimensionality, which are quite different from clickstreams
of different lengths. To solve this problem, we utilize probabilistic models within the SOM framework to accommodate the clickstream data mapping and clustering. In this section, we will first
give a brief introduction to SOM and then elaborate on how probabilistic models are integrated into the SOM framework.
4.1

Self-Organizing Map

The Self-Organizing Map is a well-known neural network model
for high-dimensional data mapping and clustering. It consists of
components called nodes or neurons which are usually arranged on
a regular 2D grid. One node is associated with a vector prototype
representing a cluster of input data, and nearby nodes contain similar vector prototypes. A trained SOM can map high-dimensional
data into a 2D space while maintaining topological relations among
data objects.
The SOM is usually trained by the competitive learning method,
which iteratively updates the vector prototypes. For instance, a
batch algorithm trains SOM iteratively by applying the following
two steps,
• Matching: for each prototype m, collect a list of clickstreams,
whose best matching (most similar) prototype is within the
neighborhood of m;
• Adjusting: adjust the prototypes using their respective collections of matching clickstreams.
During the training process, the neighborhood size decreases at
each iteration. The neighborhood relation h(i, j) between two prototypes i and j are determined by the geometric relations of their
corresponding grid points oi (xi , yi ) and o j (x j , y j ). The commonly
used neighborhood relation is the Gaussian function, i.e.,
h(i, j) = √

||oi − o j ||2
1
exp(−
)
2×δ2
2πδ

(1)

After the SOM training, a set of vector prototypes are obtained
representing the input data, with similar prototypes staying closer.
The input data are also projected into a low-dimensional space, i.e.,
a 2D regular grid.
4.2 SOM with Markov Chain Models
Regarding the conventional SOM, the vector prototypes have the
same dimensionality as input data. At the matching step, the similarity between an input data item and a prototype is measured by a

Figure 2: The major steps of our system for visual cluster exploration of clickstream data include data mapping, data visualization, interactive
cluster exploration, and clusters verification and validation.

pre-defined similarity metric, such as Euclidean distance. At the adjusting step, the prototypes are simply updated by taking the mean
value over their respective lists of matching data items. However,
because the clickstream data are heterogeneous and of different
lengths, it is not trivial to design a feasible similarity metric and
to use specific vectors to represent clickstreams. To deal with this
issue, we take advantage of the probability models as prototypes to
describe the clickstreams. The “similarity” between a clickstream
and a probability model is measured by the probability at which
the clickstream fits in the model. As such, SOM with probability
models can be applied to map the clickstream data onto a 2D plane.
In the literature, there have been many models proposed to describe clickstreams [5, 17, 19, 21, 28]. We use a first-order Markov
chain as in [5] since the Markov chain is a simple but efficient
model to describe user behaviors. Other models can also be adapted
in the SOM framework provided that the model can capture the data
characteristics well. Regarding clickstreams, the set of M predefined actions, A = {a1 , . . . , am , . . . , aM }, corresponds to the set
of states of the Markov chain model. We define a dataset of N clickstreams as U, where U = {u1 , . . . , un , . . . , uN }. A clickstream un
is an ordered sequence with ln actions: (un,1 , . . . , un,i , . . . , un,ln ),
where un,i ∈ A. The set of K Markov chain models across the
SOM grid points is represented as Θ = {θ1 , · · · , θk , · · · , θK }.
A Markov chain model is determined by its parameters, θk =
{θkI (un,1 = am ), θkT (un,i = as |un,i−1 = am )}, where θkI (un,1 = am )
denotes the probability of a clickstream starting with an action am
and θkT (un,i = as |un,i−1 = am ) denotes the transition probability of
two consecutive actions am and as .
The training method for SOM with Markov chain models is similar to that of training a conventional SOM with vector prototypes.
Nevertheless, at each SOM training iteration, rather than simply
finding the best matching data points and calculating a mean vector, the Expectation-Maximization (EM) algorithm [18] is applied
to recover the optimal parameters of SOM with Markov chain models. Algorithm 1 gives an overview of the competitive learning algorithm for training SOM with Markov chain models.
Specifically speaking, at each iteration of the SOM training, the
EM algorithm searches the domain of model parameters and updates Θ in order to maximize the coupling likelihood Lc (Θ|U) [6],
which measures how well the models fit the dataset.
N

Lc (Θ|U) =

∑

n=1

K

log ∑
k=1

1
pc (un |θk )
K

(2)

pc (un |θk ) = p(un |θk )

∏ p(un |θr )

r=k

where p(un |θk ) represents the probability of one clickstream un
fitting in a Markov model θk , i.e.,
p(un |θk ) = θkI (un,1 )

ln

∏ θkT (un,i |un,i−1 )

(4)

i=2

Once the objective likelihood function is defined, the EM algorithm iterates between two key steps, E-step and M-step, to find the
optimal Markov chain parameters.
• E-step: Calculate the posterior probability pc (un |θkold ) that
gives the probability of the n-th data object fitting in the model
k with parameters θkold calculated in the last iteration. The
posterior expectation of Lc , the so-called Q-function, is calculated as follows,
Q(Θ; Θold ) =

K

N

K

∑ ∑ ∑ pc (un |θkold )h(k, l)logp(un |θl )

(5)

l=1 n=1 k=1

• M-step: Maximize the Q-function with respect to each subset
of parameters Θ. The update rules for each set of parameters
are shown below, and it guarantees to increase the couplinglikelihood Lc :
Initial state probability,

θkI (un,1 = am )

pc (un |θk ) represents the coupling likelihood between a clickstream un and a model θk . It is defined as the joint probability
of un fitting in θk and models in its neighborhood, which is defined
by h(k, r).
h(k,r)

Algorithm 1 Competitive Learning Algorithm for Training SOM
with Markov Chains
Input: a clickstream dataset U; the number of SOM grid points K;
a minimum neighborhood size δmin and a decreasing factor δt .
1: while the neighborhood size is bigger than δmin do
2:
Decrease the neighborhood size by δt ;
3:
// EM Algorithm
4:
while the likelihood calculated by function 2 increases do
5:
E-Step: calculate the expectation value using function
5, update the probabilities according to functions 4 and
3;
6:
M-Step: update Markov chain model parameters using
functions 6 and 7;
7:
end while
8: end while

(3)

=

K
old
∑N
n=1 ∑l=1 pc (un |θk )h(k, l)δ (un,1 , am )
M [ N
K p (u |θ old )h(k, l)δ (u , a )]
∑r=1 ∑n=1 ∑l=1 c n k
n,1 r

(6)

where δ (un,1 , am ) is an indicator function that is equal to 1 if
un,1 = am and 0 otherwise.
Transition probability,

5

Title
Picture
Description
Pricing
Shipping

Figure 4: The spiral path along which each clickstream is looking for
a position to stay without overlap. The starting point is in the center
and the clickstream rectangle marches to the outer end.

OtherOptions

Figure 3: Visualization of an example clickstream from the Sell-YourItem page on eBay website. Different colors denote different actions.
In this example, a user first edits the title for the item to sell, uploads
pictures, writes descriptions, and then sets the prices, shipping methods and other options.

θkT (un,i = as |un,i−1 = am )
=

K
old
∑N
n=1 ∑l=1 pc (un |θk )h(k, l)β (un,i = as |un,i−1 = am )
M [ N
K p (u |θ old )h(k, l)β (u = a |u
∑r=1 ∑n=1 ∑l=1 c n k
r n,i−1 = am )]
n,i

(7)

where β (un,i = ar |un,i−1 = am ) is an indicator function that
equals to 1 if action ar follows right after action am in the
clickstream un and 0 otherwise.
After the SOM with a set of Markov chain models is trained,
each clickstream is then mapped to a 2D position pn determined
by the coordinates of a model, ok (xk , yk ) and the probabilities
p(un |θk ) of that clickstream fitting into the respective models,
K

pn =

∑ ok p(un |θk )

(8)

k=1

In other words, a clickstream is placed close to the models that it
fits better.
5

V ISUALIZATION

Although the clickstreams are successfully projected onto a 2D
space after the data mapping step, creating a visualization that can
clearly present the clickstream clusters is yet to be resolved. In this
section, we address this problem by introducing a self-illustrative
visual representation of clickstreams and an effective layout algorithm.
5.1

Visual Representation of Clickstreams

Clickstreams are sequences of user actions, which are of various
lengths. We encode each click action as a rectangle, and color each
action differently. Thus, one clickstream is represented by a sequence of colored rectangles. Take Sell-Your-Item for example: a
seller lists an item for sale on eBay and carries out a series of actions: “edit title, upload pictures, write description, set prices, select
shipping methods, set other options”. The corresponding visualization is shown in Figure 3. In order to help users identify the most
frequent behavior patterns, the size of a rectangle is proportional to
the frequency of the clickstream pattern’s existence in the data set.
5.2

Clickstreams Placement

Considering that visual metaphors take up space unlike mapped
data points, it would cause a serious overlapping problem if we
naively place visual rectangles of all clickstreams where they are

6

Algorithm 2 Layout Generation by Randomized Greedy Algorithm
Input: clickstream rectangles V = {v1 , . . . , vN }, the corresponding
mapped positions P = {p1 , . . . , pN }, the associated significance
measure S = {s1 , . . . , sN }, and the flag signs F = { f1 , . . . , fN }
to indicate whether a clickstream is representative.
1: Sort rectangles according to S, and move the ordered representative clickstreams to the beginning of the list;
2: for each rectangle vn in the sorted list do
3:
while vn doesn’t reach the outer end of the spiral do
4:
Move vn a bit along the spiral path and try to place it;
5:
if vn doesn’t intersect with other placed rectangles then
6:
Place vn ;
7:
break;
8:
end if
9:
end while
10:
if vn is representative, but did’t find a placement then
11:
Place vn at pn ;
12:
end if
13: end for

mapped (See Figure 5(a)). Although we can see the cluster structure in the visualization, it is impossible to tell the representative
behavior patterns of each cluster because of the overlapping. Thus,
the layout has to be adjusted to reduce visual clutter. In addition,
it is unscalable and unnecessary to display all clickstreams on a
limited screen, especially when the data size is large. A proper
placement strategy is expected to satisfy the following principles:
- Uncluttered, the clutter ought to be at a low level which
doesn’t affect visual pattern perception;
- Consistent, the topological relations among the mapped clickstreams should be preserved;
- Representative, important clickstream patterns should be
guaranteed to be presented.
We fully considered the above three principles during the placement strategy design. First, we move clickstreams to avoid overlapping as much as possible. Second, regarding the consistency
principle, when moving a clickstream, we constrain the placement
in its surrounding area. Lastly, we employ a significance factor to
measure the representativeness of each clickstream. For important
clickstreams, we guarantee that they have higher priorities so that
they are placed first. The significance factor of each clickstream un
contributing to a model k is defined as
sn,k = fn p(un |θk )

(9)

where fn represents the frequency of a clickstream pattern un ’s existence, and p(un |θk ) is the probability of un fitting in model k.
We define the associated significance of one clickstream as,
sn = max sn,k
k

(10)

(a)

(b)

Figure 5: Comparison of the visualization before and after the clickstream layout is adjusted. (a) presents the visualization of clickstreams by
placing them where they are mapped on the 2D plane; (b) presents the visualization of clickstreams after the data has been sorted according to
significance measure and then placed by searching along the spiral path.

The layout algorithm is illustrated in Algorithm 2. All clickstreams are first sorted in a descending order according to their
maximum significance values across all models. Then, a randomized greedy algorithm is applied to place the clickstream rectangles. Every clickstream rectangle is trying to be placed along a
spiral path starting at the clickstream’s mapped position, as shown
in Figure 4. After a limited number of trials, the rectangle is either
placed or discarded finally. However, a set of clickstreams that best
fit each model based on the significance values are selected as representative clickstreams. They are guaranteed to be placed even if
overlapping cannot be avoided. We use a Boolean sign b to indicate
whether one clickstream is representative, B = {b1 , . . . , bN }, for all
clickstreams. A little clutter would not prohibit the patterns perception because human eyes are “low-pass” filters [4]. When similar
data objects are grouped and form a significant pattern to attract
users’ attention, they can discover the clustered patterns and ignore
high-frequency “noise”.
This layout generation approach is straightforward, and the final
visualization shows distinct patterns with little clutter. Additionally, we evaluate the completeness of placement of significant clickof the placed clickstreams
streams by the factor CoS = ∑ significance
. Fig∑ significance of all clickstreams
ure 5 shows the comparison between the visualizations before and
after our placement method is applied to the Sell-Your-Item dataset.
In Figure 5(b), the CoS value is 93.2%, which means the majority
of the clickstream patterns are displayed.
6

I NTERACTIVE E XPLORATION

Interaction is the key to exploratory data analysis. It provides the
opportunity for people to communicate with data. Our system enables examining details about one clickstream or any chosen group
of clickstreams. Based on the visualization, analysts may want to
divide the whole clickstream dataset into a number of clusters based
on their perception. Our system supports interactive cluster analysis
under the analysts’ supervision.
6.1

Data Profile Exploration

Visualization is a way of communicating messages from data. Analysts observe, interpret and make sense of what they see to understand the clickstreams. Figure 6 shows the system interface for
data visualization and exploration. The clickstreams are visualized
on the left side (Figure 6(a)) with the legends of actions displayed

at the upper-right corner (Figure 6(b)). The analyst can move the
mouse over one interesting clickstream pattern to check the data
profile. For example, the clickstream “I” highlighted in Figure 6(a)
is an interesting clickstream. Figure 6(c) shows the visual pattern of
clickstream “I” and the existence frequency of this clickstream pattern in the dataset. Figure 6(d) presents the demographic information and statistical summary about the corresponding clickstream
pattern by using histograms. The blue histograms indicate the statistical distribution of each data attribute for the specific clickstream
pattern, while the background grey histograms show the overall distribution of the entire dataset. The analyst can also freely select a
group of clickstreams (the highlighted group “G” in Figure 6(a)) to
check the group statistical information. This intuitive exploration
approach assists analysts to learn about data details from multiple
aspects and at different scales.
6.2

Interactive Cluster Analysis

Although SOM projects clickstreams onto the 2D plane with similar data staying together, deciding which clickstreams belong to
the same group still depends on domain knowledge. Since the displayed clickstreams are only representative samples, it is also necessary to support cluster analysis of the whole dataset in order to
obtain a thorough statistical summary. We introduce an interactive
cluster analysis approach, the semi-supervised K-means, to meet
this need. The analyst can specify distinct groups of clickstreams on
the visualization and then cluster the whole dataset using the specified groups. During the process of cluster analysis, the clickstreams
are represented by their 2D mapped coordinates. Because the original inter-clickstream topological relations are preserved while data
mapping, it is reasonable to use the 2D coordinates to cluster clickstreams.
People can easily perceive and verify clickstream patterns by using the provided visualization and interaction tools. We introduce
an interactive cluster analysis method by combining the automatic
K-means algorithm [8] and experts’ domain knowledge through
interactive visualization. We utilize the analyst’s input as initialization and constraints in the K-means algorithm. Considering Kmeans has one drawback that it is only feasible for searching hyperspherical-shaped clusters [1, 3, 25], we adopt a centroid chain technique to deal with this problem. In our method, each cluster is represented by a centroid chain instead of a centroid as in the standard

7

Figure 6: The interface for clickstream pattern exploration. (a) Clickstreams visualization; (b) action legends; (c) the selected clickstream; (d)
data profile of one single clickstream or a data group. Whenever the analyst selects a single clickstream(indicated as “I”) or a group(indicated as
“G”) in area (a), the corresponding information summary is shown in area (b).

Algorithm 3 Semi-supervised K-means Using Centroid Chains
Input: A set of labeled clickstreams by the analyst and unlabeled
ones. K groups of centroid chains C = ∪K
k=1 Ck .
1: Initialize the cluster number as K, and Ck as the centroid chain
of the cluster k;
2: while WCSS is reducing do
3:
// Clickstreams assignment
4:
for each clickstream pn do
5:
if pn was labeled then
6:
Assign pn to the user specified cluster;
7:
else
8:
Assign pn to the cluster that has pn ’s closest centroid chain using the distance measure as Equation
12, record the closest clickstreams to each centroid
chain nodes;
9:
end if
10:
end for
11:
// Centroid chains updating
12:
Update centroid chains by taking the mean over each centroid chain node and its corresponding closest clickstreams;
13:
Calculate within-cluster sum of squares (WCSS);
14: end while

K-means algorithm.
When the analyst starts the interactive cluster analysis, she
sketches loops to include clickstreams. All clickstreams in one loop
belong to a group. The clickstreams lying on the loop are connected
as a centroid chain. After the interaction, the semi-supervised Kmeans algorithm initializes the number of clusters as K, the number of clickstream groups, and extracts the centroid chain from each
group to represent the cluster. Then the algorithm proceeds by alternating between two steps, the assignment step and the updating
step, until the within-cluster sum of squares (WCSS) is minimized.
The WCSS is defined as,
K

WCSS =

∑ ∑

Dist(pn , Ck )

(11)

k=1 pn ∈Sk

where Sk corresponds to the cluster set K and pn is a data sample within Sk , Ck is the centroid chain of cluster K with Ck =
{p1 , . . . , pm , . . . , pM }. The distance Dist(pn , Ck ) between a data
point and a centroid chain is defined as,

8

Dist(pn , Ck ) = Min ||pn − pm ||
pm ∈Ck

(12)

In each iteration of the K-means algorithm, at the assignment
step, the selected clickstreams by the analyst are assigned to the
specified group, and the unselected data are assigned to its closest cluster. Meanwhile, each centroid pm along the centroid chain
records a collection of data points that are most close to it. At the
updating step, the centroid chain of each cluster is updated by taking the mean over pm and its associated collection of close points
recorded at the assignment step. Details of our semi-supervised Kmeans algorithm are shown in Algorithm 3. The final clustering
results not only are presented in the visualization immediately but
also can be exported to files for further analysis.
7

C ASE S TUDIES

Understanding how people use the website is critical to the success
of an e-commerce business like eBay. As mentioned earlier, our
work was motivated by the fact that analysts and product managers
at eBay have difficulties in obtaining insights into user behavior
patterns from the clickstream data. We invited some of them to use
our system, explore data in their domains, and give feedback. In
this section, we present our observations of how the system was
used in two case studies.
7.1

Understanding Behavior Patterns on Sell-Your-Item
Page

For the eBay marketplace, listing items for sale is the beginning of
all seller activities. Thus, making the listing process intuitive and
efficient is important. As described in Section 3, sellers are required
to fill eight sections on the Sell-Your-Item page. From our collaboration with the product team we learned that the layout and ordering
of these sections are critical to the website usability. Currently, the
sections are laid out in a sequential order from top down, which was
designed and evaluated by user experience designers based on user
studies conducted in usability labs. They would like to understand
how users interact with the page in real-world scenarios. The two
analysts who were invited to this study would like to seek answers
particularly to the following questions:
Do users fill all the information requested on the page?
Do they follow the pre-defined order to fill in information?

Figure 7: Clickstream patterns with pictures uploaded first. Compared to the average category distribution in the data, these activities are more likely to happen in the Fashion category. One possible
explanation is that pictures are very important for selling clothes or
shoes.

Figure 8: Clickstream patterns that do not include uploading a picture. Most likely these activities happen in the Media category, which
has a complete catalog, and default pictures of products are often
provided to users during listing.

What are the scenarios when the answers to the questions above
are ”No”?
In preparing the data, we sampled from one day clickstream data
on the Sell-Your-Item page of eBay US site. Each visit is a sequence
of actions in terms of the sections they edit as described in Section
3. In order to answer the last question, the following selling related
information is collected based on the analysts’ recommendations.
• Seller segment
• User gender
• Years being an eBay user
• Selling category
Figure 5 (b) shows the generated visualization. As the participants expected, most users follow the default ordering and fill most
of the sections on the Sell-Your-Item page. Although no cluster with
very distinct patterns stands out, the visualization effectively shows
the variation in the data. The participants pointed out interesting
behavior patterns as outlined in the figure. For example, the patterns included in the red box show that users start filling the page
by uploading pictures rather than editing the title. There are also

Figure 9: Clickstream patterns without uploading a picture or writing
a description. The corresponding users are less experienced, and
might not understand the importance of the item descriptions for selling on eBay.

patterns in which certain actions are not performed. For example,
in the green box users do not upload pictures, and those in the blue
box do not write a description. The participants then would like
to investigate in what scenarios such behaviors happen in order to
infer potential causes. They conducted such analysis by selecting
the patterns of interests one by one and investigating corresponding
summary statistics.
First, the participants noticed in the visualization that a significant number of clickstreams start by uploading pictures rather than
editing the title. They considered this interesting, because the title is one of the most critical parts of a listing on eBay, and the
title input box is placed at the beginning of the page. By selecting
these clickstreams, they can inspect related demographics and selling information on the side (See Figure 7). Please note that due to
the paper space limitation, in Figure 7, Figure 8 and Figure 9, we
choose to show only part of the visualization that contains the clickstreams of interest and the statistics summary panel for illustration
purposes. The statistical information on the side reveals that such
activities are more likely to happen in the Fashion category and less
likely in the Tech category compared to the selling category distribution of the entire dataset. They considered this to be reasonable
because pictures are generally more effective than text in describing
clothes and shoes.
Next, the analysts investigated the scenario where users do not
upload a picture (See Figure 8). It turned out that the majority
of this behavior happens in the Media category, which includes
books, CDs, DVDs, and etc. For such products, a pre-filled SellYour-Item page with standard product pictures are often provided
by eBay, while others are not, e.g., clothes in the Fashion category
and antiques in the Collectibles category. Therefore, most users use
the provided product pictures instead of uploading their own. Before the study, the analysts thought that user behavior during listing
could correlate with various characteristics of the users and listings.
Therefore, they recommended that we include seller segments, gender, years being a eBay user, and selling category for study. These
findings suggest that among these factors, the selling category is
most correlated to user behavior.
The participants continue to examine other clickstream patterns
that do not contain picture uploads. They noticed that a large number of users not only do not upload a picture, but also skip the description section (See Figure 9). For a listing on eBay, users are
encouraged to write a detailed description of the items they are
selling. The participants mentioned that previous studies showed
that the quality of the description plays a critical role in the buyer’s
purchase decision. These listings are also more likely to belong

9

Figure 10: Interactive clustering of clickstream patterns in eBay shopping cart. The analyst groups similar patterns using the interactive lasso
tool. The result shows strong correlation between user behavior and cart drop-offs. The histograms show corresponding statistical information
of the clusters. Red bars denote the drop-offs, and blue ones denote the successful visits.

to the Media category. However, the analysts observed that the
distribution of years being an eBay user is different from that of
the group selected in Figure 8. These users are less experienced.
The analysts’ intuition was that these inexperienced users have not
learned the importance of descriptions in selling. Based on this
observation, they considered providing more explicit messaging on
the Sell-Your-Item page to encourage especially the inexperienced
users to write a description.
Overall, the analysts from the selling team liked the system,
which enabled them to explore the data interactively. They expected more diverse behavior patterns on the Sell-Your-Item page.
After the study, they realized that most users followed the designed
process, except several unique categories, e.g., Media and Fashion.
This was a significant finding for them. They considered investigating the feasibility of providing customized listing processes for
these categories.
7.2

Finding Factors That Correlate to Drop-offs in Shopping Cart

When users make purchases at eBay, items are first added into the
shopping cart. Users can view their items in the cart, add more
items, remove items, update item quantities and save items for future purchase. When users finally decide to buy the items in the
cart, they proceed to checkout, which is considered a successful
cart visit. When users end their visit without proceeding to checkout, we call it a drop-off. The performance of the cart is measured
by the drop-off rate, which is defined as the percentage of drop-offs
in all cart visits. The lower the drop-off rate, the better the shopping
cart performs. As the shopping cart is considered the most critical
step in the buying process, optimizing user experience in the cart
and reducing drop-off rate will greatly benefit eBay. Furthermore,
predicting cart drop-offs provides opportunities for eBay to prevent
drop-offs and boost sales. For example, alternative merchandise
that might suit users’ demands and incentives can be offered to encourage users to checkout when users’ intentions to drop-off are
detected by eBay. Understanding factors that correlate with cart
drop-offs is the key to all of the above. Knowing that we had developed the visual analytics system, an analyst and a production
manager from the cart team reached out for help. Based on their
definitions, a user behavior in the cart is composed of any of the 5
possible actions mentioned above. In addition, other factors, such
as users’ buyer segment, gender, years being an eBay user, time of
the day when the visit happens, and the number of items in the cart,

10

are also captured based on their recommendations.
After a simple walkthrough demo of the system, we let them
explore by themselves. Their goal was to investigate the correlation
between cart drop-offs and various factors, including user behavior
patterns in the clickstream data. Since the visualization provides
a clear overview of the clickstream data, they immediately spotted
groups of different patterns. They then started to circle these groups
and investigate summary statistics of them. We noticed that the
participants quickly went through many iterations of merging and
splitting the groups. Finally, six groups were created, as illustrated
in Figure 10. We can see that clickstreams in the same group have
similar patterns. The overall drop-off rate varies among groups,
which suggests a strong correlation between user behavior and cart
drop-offs. The number of items in the cart also shows correlation
with the behavior pattern and drop-off rate. Group F has the lowest
drop-off rate. Most clickstreams in this group have only one item
in the cart. As the overall drop-off rate increases, the distribution of
the cart size shows a larger variance.
In Figure 10, irregular circles were drawn to group clickstreams
that were not spatially close to each other, e.g., group B. In other
words, our automatic data mapping algorithm did not consider them
to be similar patterns. We asked the participants their reasons for
such groupings and which criteria they used to evaluate similarity.
They demonstrated their reasoning as illustrated in Figure 11. Our
model-based SOM did a good job in mapping clickstreams in group
B and those in group A together, because they both have patterns of
alternating between View and Remove. The difference is that group
B starts with an Add while group A does not. Clickstreams in group
C also start with Add, but do not have the alternating pattern. However, when the analysts investigated the statistics of these groups,
they found that the drop-off rate of group B was almost twice that
of group A, but was close to group C. Based on their knowledge
of the shopping cart, the participants knew that when users enter
the shopping cart, their intentions are very different depending on
whether they added an item before. Therefore, they chose to group
B and C together. Such domain knowledge is hard to summarize
and implement directly in the clustering algorithm. It is most effective to capture it through interacting with a visual analytics system.
Finally, our system performed a semi-supervised clustering
based on the grouping in Figure 10, and the results are illustrated
in Figure 12. Six clusters with different patterns were created. The
results were exported and used by the analysts in further statistical
analysis. Both participants appreciated the insights they obtained

Figure 12: Final clustering results obtained by semi-supervised clustering based on input from the analysts. Different colors indicate different clusters. Six clusters were created, and each cluster of clickstreams showed its own distinct behavior patterns. The results were
also exported and used by the analysts in further statistical analysis.

Most participants found the interactions of the system intuitive.
Some of them even started to select groups of patterns by circling
without being told. They really liked that they could investigate the
summary statistics of the selected groups. One analyst said, “This
totally enables us to correlate users’ behavior with their demographics. More important, I can do it interactively.” The interactivity of
our system enables very effective data exploration and reasoning.

Figure 11: Interactive exploration of clickstream patterns in eBay
shopping carts. The analyst groups similar patterns using the interactive lasso tool. The result shows strong correlations between user
behavior and cart drop-offs. The histograms show corresponding
statistical information about the clusters. Red bars denote drop-offs,
and blue ones denote successful visits.

through the study. The analyst learned that user behavior and the
number of items in the cart can be good features for predicting cart
drop-offs. She said that this definitely will help her develop better
prediction models. The production manager considered developing
a user segmentation based on the clustering results.
7.3

Feedback

All the participants, including analysts and product managers, had
little experience with information visualization besides basic charts.
Therefore, we conducted short training sessions before they started
to use the system in both studies. In the training, we explained the
visual encoding of patterns and the layout. They were able to understand the visualization and identify clusters of similar patterns
after the training. However, one product manager did mention that
he would have difficulties interpreting the visualization by himself.
One participant who considered the visualization intuitive said that
the analogy between this and tag clouds helped. After the initial
learning period, the participants all found the visualization very
useful. One analyst said, “Being able to see all the user actions is
so powerful. I now immediately know not only the most common
behavior patterns but also the outliers.”

8

C ONCLUSIONS AND F UTURE W ORK

We present a visual cluster exploration approach to analyze valuable web clickstream data. Our approach maps the heterogeneous
clickstreams in a 2D space, visualizes representative data samples,
and enables user-guided data exploration and clustering. The visual
exploration approach helps analysts uncover user behavior patterns,
learn the pattern demographics and make sense of the interrelationships between the patterns and their demographics. This knowledge
will help managers make better business strategies, leading to better services. More importantly, our problem solving framework is
not constrained to analyzing the web clickstream data. It can be
extended to deal with a broader class of categorical sequences data
in many other fields.
While our approach is effective, there are a few aspects to improve. For instance, the current visual encoding is suitable for clickstreams with a small number of predefined action options. When
the number of action options increases to tens or hundreds, the visual encoding method should be reconsidered. Because there is
always a mismatch between the ever increasing data size and the
limited display screen space, we need to investigate how to take
advantage of level-of-detail layout techniques to handle very large
datasets.
ACKNOWLEDGEMENTS
The first author was a summer intern at eBay Research Labs while
this work was done. This work has also been supported in part
by the U.S. National Science Foundation through grants CCF0811422, IIS-1147363, CCF-0808896, and CCF-1025269.

11

R EFERENCES
[1] D. Arthur and S. Vassilvitskii. k-means++: the advantages of careful
seeding. In Proceedings of the eighteenth annual ACM-SIAM symposium on Discrete algorithms, SODA ’07, pages 1027–1035, Philadelphia, PA, USA, 2007. Society for Industrial and Applied Mathematics.
[2] A. Banerjee and J. Ghosh. Clickstream clustering using weighted
longest common subsequences. In In Proceedings of the Web Mining
Workshop at the 1st SIAM Conference on Data Mining, pages 33–40,
2001.
[3] S. Basu, A. Banerjee, and R. J. Mooney. Semi-supervised clustering
by seeding. In Proceedings of the Nineteenth International Conference on Machine Learning, ICML ’02, pages 27–34, San Francisco,
CA, USA, 2002. Morgan Kaufmann Publishers Inc.
[4] W. L. Braje, B. S. Tjan, and G. E. Legge. Human-efficiency for recognizing and detecting low-pass filtered objects. Vision Research,
35(21):2955–2966, 1995.
[5] I. Cadez, D. Heckerman, C. Meek, P. Smyth, and S. White. Visualization of navigation patterns on a web site using model-based clustering.
In Proceedings of the sixth ACM SIGKDD international conference
on Knowledge discovery and data mining, KDD ’00, pages 280–284,
New York, NY, USA, 2000. ACM.
[6] S.-S. Cheng, H.-C. Fu, and H.-M. Wang. Model-based clustering by
probabilistic self-organizing maps. IEEE Transactions on Neural Networks, 20(5):805–826, 2009.
[7] Y. Fu, K. Sandhu, and M.-Y. Shih. Clustering of web users based on
access patterns. In In Proceedings of the 1999 KDD Workshop on Web
Mining. Springer-Verlag, 1999.
[8] J. A. Hartigan and M. A. Wong. A k-means clustering algorithm.
JSTOR: Applied Statistics, 28(1):100–108, 1979.
[9] B. Hay, G. Wets, and K. Vanhoof. Clustering navigation patterns on
a website using a sequence alignment method. In In Proceedings of
17th International Joint Conference on Artificial Intelligence, pages
1–6, 2001.
[10] B. Johnson and B. Shneiderman. Tree-maps: a space-filling approach
to the visualization of hierarchical information structures. In Proceedings of the 2nd conference on Visualization ’91, VIS ’91, pages 284–
291, Los Alamitos, CA, USA, 1991. IEEE Computer Society Press.
[11] T. Kohonen. The self-organizing map. Neurocomputing, 21(1-3):1–6,
1998.
[12] T. Kohonen, M. R. Schroeder, and T. S. Huang, editors. SelfOrganizing Maps. Springer-Verlag New York, Inc., Secaucus, NJ,
USA, 3rd edition, 2001.
[13] R. Kothari, P. A. Mittal, V. Jain, and M. K. Mohania. On using page
cooccurrences for computing clickstream similarity. In SDM, 2003.
[14] H. Lam, D. Russell, D. Tang, and T. Munzner. Session viewer: Visual
exploratory analysis of web session logs. In Proceedings of the 2007
IEEE Symposium on Visual Analytics Science and Technology, pages
147–154, Washington, DC, USA, 2007. IEEE Computer Society.
[15] J. Lee, M. Podlaseck, E. Schonberg, and R. Hoch. Visualization and
analysis of clickstream data of online stores for understanding web
merchandising. Data Min. Knowl. Discov., 5:59–84, January 2001.
[16] A. Makanju, S. Brooks, A. N. Zincir-Heywood, and E. E. Milios.
Logview: Visualizing event log clusters. In Proceedings of the 2008
Sixth Annual Conference on Privacy, Security and Trust, pages 99–
108, Washington, DC, USA, 2008. IEEE Computer Society.
[17] E. Manavoglu, D. Pavlov, and C. Giles. Probabilistic user behavior
models. In Data Mining, 2003. ICDM 2003. Third IEEE International
Conference on, pages 203 – 210, nov. 2003.
[18] G. J. McLachlan and T. Krishnan. The EM Algorithm and Extensions
(Wiley Series in Probability and Statistics). Wiley-Interscience, 2 edition, Mar. 2008.
[19] A. L. Montgomery, S. Li, K. Srinivasan, and J. C. Liechty. Modeling
online browsing and path analysis using clickstream data. Marketing
Science, 23:579–595, September 2004.
[20] Z. Shen and N. Sundaresan. Trail explorer: Understanding user experience in webpage flows. In IEEE VisWeek Discovery Exhibition, Salt
Lake City, Utah, USA, 2010.
[21] P. Smyth. Clustering sequences with hidden markov models. In Advances in Neural Information Processing Systems, pages 648–654.

12

MIT Press, 1997.
[22] J. Srivastava, R. Cooley, M. Deshpande, and P.-N. Tan. Web usage
mining: discovery and applications of usage patterns from web data.
SIGKDD Explor. Newsl., 1:12–23, January 2000.
[23] T. Takada and H. Koike. Mielog: A highly interactive visual log
browser using information visualization and statistical analysis. In
Proceedings of the 16th USENIX conference on System administration, pages 133–144, Berkeley, CA, USA, 2002. USENIX Association.
[24] A. Vakali, J. Pokorn´y, and T. Dalamagas. An overview of web data
clustering practices. In EDBT Workshops, pages 597–606, 2004.
[25] K. Wagstaff, C. Cardie, S. Rogers, and S. Schr¨odl. Constrained kmeans clustering with background knowledge. In Proceedings of
the Eighteenth International Conference on Machine Learning, ICML
’01, pages 577–584, San Francisco, CA, USA, 2001. Morgan Kaufmann Publishers Inc.
[26] M. Wattenberg. A note on space-filling visualizations and space-filling
curves. In Proceedings of the Proceedings of the 2005 IEEE Symposium on Information Visualization, INFOVIS ’05, pages 24–, Washington, DC, USA, 2005. IEEE Computer Society.
[27] W. Xu, M. Esteva, S. D. Jain, and V. Jain. Analysis of large digital
collections with interactive visualization. In IEEE VAST, pages 241–
250, 2011.
[28] A. Ypma and T. Heskes. Automatic categorization of web pages and
user clustering with mixtures of hidden markov models. In WEBKDD,
pages 35–49, 2002.

