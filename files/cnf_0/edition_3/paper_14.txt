Visualizing Biosequence data using Texture Mapping
Praveen R. Thiagarajan, Guang R. Gao
Delaware Biotechnology Institute
University of Delaware
15 Innovation Way, Newark DE 19711
praveen@dbi.udel.edu, ggao@ee.udel.edu

Abstract
Data-mining of information by the process of pattern
discovery in protein sequences has been predominantly algorithm based. In this paper we discuss a visualization
approach, which uses texture mapping and blending techniques to perform visual data-mining on text data obtained
from discovering patterns in protein sequences. This visual
approach, investigates the possibilities of representing text
data in three dimensions and provides new possibilities of
representing more dimensions of information in text data visualization and analysis. We also present a generic framework derived from this visualization approach to visualize
text in biosequence data.

1

Introduction

Data-mining is the non-trivial process of identifying
valid, novel, potentially useful, and ultimately understandable information in data. Data-mining approaches can be
classified as algorithm driven or visualization driven[9]. In
some cases the data-mining process is a combination of both
algorithmic and visualization approaches.
One of the interesting problems in biological data analysis is the discovery and analysis of sub-sequences known
as patterns common to a given collection of related biosequences (protein or DNA). Discovering patterns common
to a given set of sequences is an NP-Hard problem[13]. Recently, there have been efficient algorithms (Teiresias[15],
Splash[7] and Tuppleware[1]) developed for discovering
patterns in sequence datasets. These algorithms use intelligent heuristics to discover patterns of interest in computationally efficient time. A review of these algorithms and the
current trends are presented in [16]. Once the patterns are
discovered, they can be used to search for their occurrence
in un-annotated sequences to annotate them[5] or perform
structural studies to understand their possible significance
in the chemical structure[6].

Proceedings of the IEEE Symposium on Information Visualization 2002 (InfoVis’02)
1522-404X/02 $17.00 © 2002 IEEE

Analyzing the distribution of patterns in a sequence with
respect to other sequences, can give valuable insights into
the underlying sequence. At present we are not aware of
a precise definition to this problem of identifying outliers
in a distribution of patterns. Developing algorithms to perform data-mining without such a precise definition is not
possible. Applications like MAST[3] and PATMATCH[19]
use 2D visualization approaches to solve this problem and
present the data to a user for visual analysis.
In this paper we demonstrate the use of a simple, yet
powerful 3D model for visualizing pattern discovery data in
protein sequences. Section 2 describes the nature of the data
related to pattern discovery and presents more information
on the related applications and the motivation for our design. Section 3 presents our visualization model and associated interaction techniques. Section 4 presents the implementation details. Section 5 presents some analysis related
issues and results. Section 6 presents several observations
about the properties of biosequences and the motivation behind designing a framework for visualizing biosequences.
Section 7 presents a framework for presenting biosequence
data in three dimensions. Finally, we present our conclusions and directions for future work.

2

Pattern Discovery Data

In general a biological sequence S (amino acid or nucleic
acid) of length n(n > 0) is typically of the form
S = [A1 , A2 ...An ]
where Ai belongs to a finite size alphabet set. In the case of
proteins the alphabet set size is 20, representing the different amino acids, and in the case of DNA or RNA sequences,
it is 4, representing the different base pairs. Two short DNA
sequences with alphabet set [A, T, G, C] are
S1
S2

=
=

AT GGGACT CCT T CC
GAT GT GAT AT T CT CC

2.1

Figure 1. Typical 2D representation

Depending on the algorithm, the syntax of the pattern obtained can vary. One general syntax as given in [15] of a
pattern P of biological interest is
P = [A ∪ ’.’ ]∗ A
where, A is one of the symbols belonging to the alphabet
set and ’.’ represents a don’t care condition, which means
any single alphabet symbol can occur in that position. Patterns should occur in two or more sequences and should be
of length at least two alphabets long. They may also overlap one another. Two examples of patterns occurring in the
above set of example sequences are
P1
P2

=
=

T G..A.T
CT CC

The input to a pattern discovery algorithm is a set of sequences Si . The output obtained is a set of patterns Pi .
Some algorithms provide the offsets of the occurrence of
patterns in the set of sequences. In cases where it does not,
we can use simple string matching algorithms[11] to generate the offset locations. The offset list Li for a pattern Pi ,
discovered in a set of k sequences and offset lists for the
patterns P1 and P2 are
L[Pi ] = [(Sj ,offsetij ), (Sj , offsetij ) ... ] where j ∈ [1..k]
L[P1 ]
L[P2 ]

=
=

[(S1 , 2), (S2 , 5)]
[(S1 , 8), (S1 , 12), (S2 , 11), (S2 , 13)]

The number of unique sequences in which a pattern occurs
is called the level of support of the pattern in the given sequence set. The subset of the sequence which matches a
given pattern is called the matching sub-sequence element.
Pattern discovery data is therefore, a set of sequences Sj ,
a set of patterns Pi and an offset list Li for each pattern.
This data is the input for our visual data-mining application
– PATTVision.

Proceedings of the IEEE Symposium on Information Visualization 2002 (InfoVis’02)
1522-404X/02 $17.00 © 2002 IEEE

Related Visualization applications

As mentioned before, there are simple applications like
MAST and PATMATCH to visualize pattern discovery data.
Typically, these applications use simple visualization models such as rectangular color bars representing a sequence
and sub-rectangles of different colors showing different patterns as shown in Figure 1 (patterns shown in the figure follow different grammar than discussed).
These applications are based on 2D and have some disadvantages. Due to the nature of these models, the user needs
to spend some time in referencing the color legends showing the patterns. Some of these models do not allow the
text symbols to be shown, often a requirement when studying proteins. These models do not support global+local
magnification[12], thereby resulting in more navigational
difficulties. Manipulation of the data representation based
on real-time user interactions is also not possible. An example of data manipulation would be aligning the sequences
based on a single pattern to observe the distribution of other
patterns across different sequences (Figure 2, which is explained in detail in Sections 3 & 5).
The applications discussed so far are developed to be
light weight processes, with the objective of presenting a
quick visual representation of the data at the end of a pattern discovery process. Therefore, they have the mentioned
disadvantages. Once the patterns are available, most datamining approaches attempt to use automatic methods to
solve large scale sequence annotation problems[10]. An
analyst interested to study specific problems or families
of proteins needs a much more versatile platform for their
study of pattern discovery data. PATTVision has been developed to addresses this need to perform interactive visualization and data manipulations on pattern discovery data.

3

Visualization Model

The basic visualization model used for data mining in
PATTVision is shown in Figure 21 . The model consists of
a horizontal plane of amino acid sequences. Each sequence
is rendered in a straight line along the length of the plane
(X-axis). Individual sequences are parallel to each other
on the plane (Y-axis). The model represents a rectangular
grid across the plane with different sequences on one axis
and the sequence represented by its alphabets on the other.
Pattern match sites on the sequences in the plane are highlighted using different colors. They show the matching subsequence element of the sequence, which matches the given
pattern. Each pattern is represented by a different color.
1 Figure 2 represents the model in perspective projection. The axis information shown is drawn on the image for description purposes only and
is not part of the original model.

L . . . . . D R
Sequence
Overlaps

L . . . . . D R Y
Pattern
Overlaps

D R Y

Z-Axis

Y-Axis

X-Axis

Figure 2. Visualization Model of PATTVision

Figure 3. Overlapping Patterns

The number of patterns shown is limited to a selected set of
patterns, which can be changed interactively.
The default coloring of the alphabets in a sequence is set
to grey with alpha values making them semi-transparent.
This allows the user to visualize the characters behind one
another when they overlap at different points after projection (Figure 3). The pattern locations need to be highlighted in the data so their alpha values are set to make them
opaque. This gives the effect of fading out the regions in
which patterns do not occur and highlighting the more important pattern match sites. For all viewing transformations
applied on the plane of sequences, each sequence face (X &
Z-axis) is rotated to remain parallel to the view plane. This
results in the alphabets always facing the user in a readable
manner irrespective of the point of projection.

sequences individually along their X-axes so that the pattern
match site of the sequences occurs along the same crosssection of the grid. Sequences that do not contain the pattern
are left undisturbed. This is useful to study the distribution
of other patterns across the sequence set with respect to a
single pattern.
Often two or more patterns overlap in a part of a sequence. Blending planes are useful in showing these patterns which overlap. Figure 3 shows the overlap of three
patterns in the same part of a sequence in the dataset.

3.1

Blending Planes

An important part of the model is the use of blending
planes to highlight information. They are placed above the
pattern locations with additional information as their height.
Currently their height represents their level of support in the
dataset. This can also be used to represent other dimensions such as search scores. The blending planes appears
as quads because the value of level of support, is constant
across the length of the matching sub-sequence. At the top
of the blending plane, the pattern matching at that site below
the blending plane is displayed. This eliminates the need to
refer to color indexes to find the pattern. Optionally, this
display can also be turned off, showing only the blending
plane (Figure 3).
The model in Figure 2 shows the data set aligned on a
single pattern. The align operation on a pattern shifts the

Proceedings of the IEEE Symposium on Information Visualization 2002 (InfoVis’02)
1522-404X/02 $17.00 © 2002 IEEE

3.2

Interaction

The navigation is similar to a track-ball interface with
zoom and pan control. The perspective projection+zoom
option provides a bird’s eye view of the dataset and helps
the user to locate interesting characteristics shown by the
data. The zoom interface is continuous in nature allowing
the user to shrink and expand the model as necessary. In
the bird’s eye view the user is looking for the distribution
of colors across the plane. In this view, the rendering of
the blending planes is turned off to facilitate the view of the
pattern distribution based only on color. Though the data
shrinks to incomphrenhensible levels when showing a bird’s
eye view, we still continue to maintain the rendering in text
form because it is more natural to see the text appear more
clearer when zooming out. We also experimented using
level-of-detail reduction operators such as bounding boxes
with colored regions to replace the text when some point
in the bird’s eye view was reached. The feedback from the
users suggested the use of the first approach. Optionally,
the user can also switch to orthogonal projection and use
clipping planes to slice through data.

Figure 4. PATTVision screen-shot

4

Implementation

The rendering engine in PATTVision was developed
using OpenGL. The widgets were generated using the
XForms[20] library. The complete screen-shot of the application is shown in Figure 4. The design and components
used in the development were targeted to be portable across
multiple platforms. We currently have successful implementations in Solaris, IRIX and Linux.

4.1

Texture Mapping

We use texture mapping for rendering the large set of
text data. The use of stroked fonts was not considered due
to the excessive geometry it adds to the scene. Bitmaps are
a possible way for rendering text in a scene, but since graphics API’s like OpenGL do not scale and process bitmaps in
the same way as the other primitives, they were not used.
To achieve the text rendering, one or more quads are drawn
along the length of a sequence and textures drawn with text
are pasted on the quads. This drastically reduced the geometry in the scene and allowed for the drawing of large
sets of text. The textures were generated using a 8x13 font
definition set. Texture Mapping also allows for the graphics hardware to do the expensive operations of blending and
anti-aliasing, thus aiding in real-time visuals.
The interaction with the model requires turning on/off
specific pattern coloring. This can be achieved only by
changing the texture contents. If a pattern is turned off, the

Proceedings of the IEEE Symposium on Information Visualization 2002 (InfoVis’02)
1522-404X/02 $17.00 © 2002 IEEE

color of the text in the texture needs to be grey, and alpha
values need to be semi-transparent. If a pattern is turned
on, the text in the texture needs to be colored to the appropriate texture color, and alpha values need to be changed to
make it appear opaque. This has been implemented using
OpenGL’s sub-texture replacement functions.
Currently, commodity graphics cards have around 16MB
or more of texture memory. The available OpenGL features and extensions enable these cards to render in realtime large datasets of around 50 sequences or more with
each sequences around 1KB long. Most of the development
and testing was carried out on a PC equipped with Nvidia
Geforce class graphics card having 32MB texture memory.

4.2

Blending

For blending purposes, the color properties of the texture image completely replaces the color properties of the
underlying polygon. This method is similar to drawing a
bitmap. The final blended image was accomplished by sorting the primitives back to front and drawing them using the
blending available in hardware using OpenGL calls. Since
currently available generic systems have graphics hardware
which support blending and texture mapping directly, our
implementation provides real-time performance on most
systems. When compiled for software based rendering,
there was significant reduction in frame-rate because of the
expensive operations associated with texture mapping and
blending.

5

Visual Analysis and Related Issues

PATTVision is used to visually guide users to areas of
interest in the dataset. The operation of aligning sequences
based on a pattern is novel and useful, as it provides a visual
of the relative distribution of other patterns. The aligning
problem is non-trivial because of two issues. First, in sequences that do contain the exact pattern it may be better to
align based on a different pattern which is similar. But, the
problem of defining what is similar complicates the issue.
Second, in cases where more than one occurrence of the pattern occurs in a given sequence, it is again complicated to
determine which one is biologically significant and should
be used. In spite of these issues the trivial solution we use,
which is aligning based only on the pattern presence and
first occurrence in the sequence works well for most cases.
We have made an assumption in the basic visual model
of PATTVision that the regions of interest are shown by patterns discovered. There are cases where this is not true, for
example a divergent motif that covers non-contiguous bases
or amino acids may be critical for function. In order to address some part of this problem and perform further analysis of pattern distributions we are working on developing a
theory of meta-patterns[17].
The concept of meta-pattern works by visually identifying and forming a complex pattern using the discovered
patterns and relationships between them. The relationship
can be a particular order : P1 follows P2 , fixed distance :
P1 is separated from P2 by a fixed number of amino acids
and variable distance : P1 is separated from P2 by a range
of amino acids. For our discussion let us assume the relationship of fixed distance. In this case the syntax of the
meta-pattern M will be,
M = [Pi ∪ ’.’]∗ Pj

(i, j ∈ 1..n)

where, n is the number of discovered patterns in the sequence dataset. An example of a meta-pattern M1 formed
by using two patterns related by a fixed distance of 4 base
pairs in sequences S1 and S2 is
S1
S2

=
=

AT GGGACT CCT T T CC
GAT GT GAT AT T T ACCT CC
M1 = T G..A.T . . . . T CC

where, T G..A.T and T CC are individual patterns. For
this particular case of fixed distance relationship, the metapattern is essentially a pattern which can be automatically
discovered by Teiresias. The concept of meta-pattern in this
case may appear to be redundant but, in case studies developed by us the fixed distance is sometimes quite large
(30 or more). The change in parameters (number of amino

Proceedings of the IEEE Symposium on Information Visualization 2002 (InfoVis’02)
1522-404X/02 $17.00 © 2002 IEEE

L-A-X(1)-A-D-I-L-V-A-T-L-X(38)-L-C-A-I-S-L-D-R-Y

LA....L...L
A....L...L

L.....DR
DRY

Figure 5. Meta-Pattern present in Alpha-2
Adrenergic receptors

acids and the width) required to discover such long patterns results in a large increase in the polynomial[14] computational complexity required to discover them in the first
place. Visually identifying them is more practical. Thus we
make a distinction between the fixed distance relationship
meta-pattern and the generic pattern.
Currently meta-patterns can be only discovered visually.
Hidden Markov Models (HMMs) have been used in the
past to model protein families based on patterns discovered in them[2]. Similarly, HMMs can be used to model
some properties of meta-patterns. This is a possible future study. In our studies, we were able to generate metapatterns that have been shown to produce accurate query
results in searches to protein sequence databases. For example, in one of our study, we used Teiresias to generate
patterns from a protein sequence dataset of 44 G-Protein
coupled receptors (GPCRs) containing the different subfamilies. Among the discovered patterns we were able to
visually identify two pairs of patterns separated by a fixed
distance of 38 amino acids from each other in a subset of
4 sequences that belonged to Alpha-2 adrenergic receptors.
We used this information along with some visual filling in
of don’t cares forming a simple meta-pattern shown in Figure 5. This meta-pattern matched exactly 29 of 31 Alpha-2
adrenergic receptors in SWISSPROT[4], out of more than
90,000 total amino acid sequences. However, the metapattern theory is still in early stages of development and
cannot yet be applied to general datasets.
One additional functionality in the visualization model is
the use of color encoding combined with alphabets to show
substitution groups. The different groups; acid, base, polar, aromatic and hydrophobic can be represented by encoding color on amino acids as shown in the Figure 6. When
used in conjunction with the align operation, it is useful to
observe how amino acid replacements occur across the sequence family under study.
It is possible to develop a 2D viewer that can perform
most of the operations of PATTVision. But, the real advantage in PATTVision is the interactivity it provides and
the more possibilities to show other dimensions of interest clearly by modifying blending planes or adding other
primitives. One other issue we need to discuss is the use of

7

Framework for biosequence visualization

The framework for visual representation of sequence
data consists of two basic parts, building the dataset and interacting with the dataset. We divide the framework into
two modules Data Preprocessing Module and Rendering
Module.

7.1
Figure 6. Substitution Mode

symbolic character encoding schemes to represent the text
dataset. While this is standard in information visualization
models, the current problem we are addressing requires 20
symbols to be presented in a manner that the user can grasp
quickly. Symbolic encoding schemes aim to visually compress the data and can make the model more complicated
to use. So we decided to use direct text rendering, which
keeps the visuals simple and adequately serves our purpose.

6

Discussion

Biosequences can be divided into two types, amino acid
sequences and nucleic acid sequences. Typically, scientists
do not visualize information in textual form in the case of
genomic (or nuclei acid) sequences. Large and direct visualization of genomic sequences is not required in most
cases. A more typical method is to represent data in different regions than in individual residues. Examples of genomic visual data mining models can be found in [18]. Currently available genome viewers (with different visualization models) use 2D to represent the data. The main drawback is that the visualization models used in these viewers
make representing more dimensions of information difficult. For these problems, a 3D visualization model offers
much more possibilities in data representation as shown.
For a biosequence or a set of biosequences, the associated data is predominantly static. The sequence datasets
are large and each sequence has a number of variables of
interest associated with it. Typical analysis methods include forming hypotheses based on observation and queries
to databases to refine or verify them. Given this nature of
data and analysis, we can build visual datamining models
based on building texture datasets to represent the static sequence data and use other primitives to add other calculated
or queried data. Most approaches to biosequence visualization have not taken advantage of the advanced rendering
features available in hardware today. We believe that by exploiting these features we can obtain better analysis models.

Proceedings of the IEEE Symposium on Information Visualization 2002 (InfoVis’02)
1522-404X/02 $17.00 © 2002 IEEE

Data Preprocessing Module

The objective of the Data Preprocessing Module is to
build the dataset to be rendered. An analogy for this module is processing architectural information to obtain display primitive data for building a walk-through. In case of
PATTVision (and models based on amino acids), this processing step does not take much time and can be run when
the application starts. In the case of handling genomic information, this step will typically take a longer time and
therefore needs to be run once offline to generate the display
dataset, consisting of the texture data and primitive data.
Figure 7 shows a functional block diagram of the data
preprocessing module. The input to the module is basically the biosequence dataset and related data/information
like sequence annotations. In case of PATTVision, this data
is the patterns obtained from the pattern discovery process.
This input is processed to obtain display primitive information (blending planes) and texture dataset. The procedure
for processing and building the output is determined by the
visualization model implemented in the rendering module.

7.2

Rendering Module

The rendering module performs functions associated
with displaying the visual model and handling interactions
from the user. Figure 8 shows a functional block diagram
of the rendering module. The Rendering Engine performs
the task of drawing into the frame buffer. The Texture Engine performs texture management functions. In our case,
sophisticated texture management schemes were not necessary. While handling genomic datasets, texture data handling techniques as discussed by D. Cline et al [8] might
need to be implemented to handle texture swapping in memory. Queries form an important part of analyzing biosequences and they are sometimes not real time operations.
Sub-modules handling the queries and non-realtime operations are required.

8

Conclusions and Future Work

This paper has two important contributions. We have
presented a visual datamining model for analysis of data

Static Texture Dataset
Builder

Bio-Sequence
Dataset
Data Analyzer/
Processor

Texture +
Preprocessed data
Input

Related Data
Annotation
etc.

Figure 7. Data Preprocessing Module

Rendering Engine

Texture +
Preprocessed data
Input

Texture
Engine

I/O & User Interaction
Processor

USER

Real Time Rendering

Queries / Non-Realtime
Operations

Figure 8. Rendering Module

from pattern discovery. This visualization model of representing textual information in three dimensions demonstrates the flexibility and additional advantages offered over
conventional 2D sequence viewers. Our discussion about
the different aspects of biosequence data and its associated
analysis, thereby developing a framework for implementing visual datamining applications opens new possibilities
to biosequence visualization problems. Extending metapattern theory and addressing genomic visualization problems based on the framework discussed will be objectives
of our future work.

9

Acknowledgements

We would like to thank Allan Moser, Wade Rogers and
Karen Bloch of Dupont Pharmaceuticals and Wellington
Martins and Shubhra Misra of University of Delaware for
the discussions and feedback during this work. We also
thank Delaware Biotechnology Institute for their support of
our work.

References
[1] D. Argenta, K. Bloch, H. Holyst, A. Moser, W. Rogers,
D. Underwood, A. Vaidyanathan, and J. van Scekelenborg.
Tuples, tables & trees : A new approach to the discovery of
patterns in biological sequences. In Poster ISMB 2000.

Proceedings of the IEEE Symposium on Information Visualization 2002 (InfoVis’02)
1522-404X/02 $17.00 © 2002 IEEE

[2] T. L. Bailey and C. Elkan. Fitting a mixture model by expectation maximization to discover motifs in biopolymers.
In Proceedings of the Second International Conference on
Intelligent Systems for Molecular Biology, pages 28–36.
AAAI Press, 1994.
[3] T. L. Bailey and M. Gribskov. Combining evidence using pvalues: application to sequence homology searches. Bioinformatics, 14:48–54, 1998.
[4] A. Bairoch and R. Apweiler. The swiss-prot protein sequence database and its supplement trembl in 2000. Nucleic
Acids Research, 28:45–48, 2000.
[5] A. Bairoch, L. Falquet, P. Bucher, and K. Hofmann. The
prosite database, it’s status in 1999. Nucleic Acids Research,
27:215–219, 1999.
[6] H. M. Berman, J. Westbrook, Z. Feng, G. Gilliand, H. W.
T. N. Bhat, I. N. Shindyalo, and P. Bourne. The protein data
bank. Nucleic Acids Research, 28:235–242, 2000.
[7] A. Califano. Splash: structural pattern localization analysis
by sequential histograms. Bioinformatics, 16(4):341–357,
2000.
[8] D. Cline and P. K. Egbert. Interactive display of very large
textures. In Proceedings of IEEE Visualization 1998, pages
343–350.
[9] U. M. Fayyad, G. P. Shapiro, P. Smyth, and R. Uthuruswamy, editors. Advances in Knowledge discovery and
Data Mining. MIT Press, 1996.
[10] A. Floratos, I. Rigoutsos, L. Parida, G. Stolovitzky, and
Y. Gao. Sequence homology detection through large-scale
pattern discovery. In Proceedings Third Annual ACM International Conference on Computational Molecular Biology,
1999.
[11] D. Gusfield, editor. Algorithms on String, Trees, and Sequences: Computer Science and Computational Biology.
Cambridge University Press, 1997.
[12] T. A. Keahey. Getting along : Composition of visualization
paradigms. In Proceedings of IEEE InfoVis 2001.
[13] D. Maier. The complexity of some problems on subsequences and super sequences. Journal of ACM, 25:322–
336, 1978.
[14] L. Parida, I. Rigoutsos, A. Floratos, D. E. Platt, and Y. Gao.
Pattern discovery on character sets and real valued data: Linear bound on irredundant motifs and an efficient polynomial
time algorithm. In Proceedings 11th Annual ACM/SIAM
Symposium on Discrete Algorithms, January 2000.
[15] I. Rigoutsos and A. Floratos. Combinatorial pattern piscovery in biological sequences: The teiresias algorithm. Bioinformatics, 14(1), 1998.
[16] I. Rigoutsos, A. Floratos, Y. G. L. Parida, and D. Platt. The
emergence of pattern discovery techniques in computational
biology. Metabolic Engineering, 2:159–177, 2000.
[17] P. Thiagarajan. Visual perspective to motif/pattern analysis.
Master’s thesis, University of Delaware, 2001.
[18] J. C. Venter and et al. The sequence of human genome. SCIENCE, 291:1304–1351, February 2001.
[19] S. Weng. PATMATCH, pattern matching software for
saccharomyces genome database and arabidopsis thaliana
database. URL : http://genome-www2.stanford.edu/cgibin/AtDB/PATMATCH/nph-patmatch, 1998.
[20] T. Zhao. Xforms : A graphical user interface toolkit for X.
URL : http://world.std.com/∼xforms/.

