RecMap : Rectangular Map Approximations
Roland Heilmann∗

Daniel A. Keim†

Christian Panse‡

Mike Sips§

Bayer Technology

University of Konstanz

University of Konstanz

University of Konstanz

(a) U.S. states

(b) U.S. states

(c) U.S. counties

(d) U.S. counties

(e) Texas

Figure 1: Results of RecMap — The area of each region corresponds to the number of people living there. The cartograms of Figures 1(a) and
1(c) contain no area error and no empty space error whereas in Figures 1(b), 1(d), and 1(e) no area error occurs and the shapes of the regions
are preserved. The colormap indicates the number of people (yellow: high; brown: low).

A BSTRACT
In many application domains, data is collected and referenced by its
geo–spatial location. Nowadays, different kinds of maps are used
to emphasize the spatial distribution of one or more geo–spatial attributes. The nature of geo–spatial statistical data is the highly non–
uniform distribution in the real world data sets. This has several
impacts on the resulting map visualizations. Classical area maps
tend to highlight patterns in large areas, which may, however, be of
low importance. Cartographers and geographers used cartograms
or value–by–area maps to address this problem long before computers were available. Although many automatic techniques have
been developed, most of the value–by–area cartograms are generated manually via human interaction.
In this paper, we propose a novel visualization technique for geo–
spatial data sets called RecMap. Our technique approximates a
rectangular partition of the (rectangular) display area into a number of map regions preserving important geo–spatial constraints. It
is a fully automatic technique with explicit user control over all exploration constraints within the exploration process. Experiments
show that our technique produces visualizations of geo–spatial data
sets, which enhance the discovery of global and local correlations,
and demonstrate its performance in a variety of applications.
Keywords: Geographic Visualization, Information Visualization,
Database and Data Mining Visualization

1

I NTRODUCTION

The information revolution is creating and publishing vast data sets,
such as records of business transactions, environmental data, and
census demographics. In many application domains, this data is
∗ roland.heilmann@bayertechnology.com
† keim@inf.uni-konstanz.de

‡ panse@inf.uni-konstanz.de
§ sips@inf.uni-konstanz.de

collected and indexed by geo–spatial locations. The discovery of
interesting patterns in geo–spatial databases is a key to turn this
data into valuable information. Nowadays, different kinds of maps
are used to emphasize the spatial distribution of one or more geo–
spatial attributes. The nature of geo–spatial data is the highly non–
uniform distribution in real world data sets which has several impacts on the resulting map visualizations. Imagine a data analyst
who uses a traditional map, for example the U.S. map, and who
wants to ﬁnd very quickly potentially valuable information. The
problem of using classical area maps is that they tend to highlight
patterns in large areas, which may, however, be of low importance.
It is mostly impossible for the data analyst to understand the presented geo–spatial information quickly, since this visual model does
not address the human perception skills.
Cartographers and geographers used cartograms or value–by–area
maps to address this problem long before computers were available. The basic idea of a cartogram is to distort a map by resizing
its regions according to some external geography–related parameter. First hand–made cartograms can be found in [12, pp. 216–217].
Here, the area of a region corresponds to its population in 1958.
(A detailed description of how to construct rectangular cartograms
manually can be found in [12].) However, the manual construction
of cartograms is a very difﬁcult task because, on the one hand, we
have to resize the regions according to their geo–spatial statistical
values and, on the other hand, we have to take into account that the
(original) shapes of the regions and their neighborhood relationships (topology) are preserved as much as possible.
Consequently, the study of automated methods for drawing cartograms is of considerable interest. In the meantime, many automatic cartogram generation techniques have been developed (for an
overview see [5, 7]). Circular cartograms [1] (see Figure 2(a)) ignore the shape of the input polygons completely and represent them
as circles. In many cases, the area and topology constraints have to
be relaxed, too. The general applicability of this technique is open
to question. TreeMaps [6], which are a well–known information
visualization technique, are an appropriate method to display data
with a given hierarchic order. They divide the display area into
rectangles such that the area of each rectangle corresponds to its
statistical value. Figure 2(b) displays an example where TreeMaps
are used for visualizing U.S. census data. To the best of our knowledge there do not exist any automatic procedures which compute
the split hierarchy of the map. This work has to be done by the user

IEEE Symposium on Information Visualization 2004
October 10-12, Austin, Texas, USA
0-7803-8779-1/04/$20.00 ©2004 IEEE

33

Figure 3: The Figures show the adjacency graphs of the U.S. map
(left) and a corresponding map partition (right). The red colored segments indicate the topology error.

cartogram is proportional to its area within the map. The difference between these heuristics is that the ﬁrst method does not allow
empty space, whereas the second one preserves the shapes of the
polygons.

(a) A screen capture of Dorling’s Circle Cartograms [1] using the
2000 U.S. population data and the cdv-tool. [2]

The remainder of this paper is organized as follows: Section 3 is
devoted to a formal description of the (variants of the) map partition problem or cartogram problem. In Section 4, we present two
heuristic solution procedures. The efﬁciency of our new approach
as well as some application examples are shown in Section 5.

3

P ROBLEM D EFINITION

In this section, we give a formulation of the problem of determining
a near–optimal cartogram P = {p1 , . . . , pR } for a given map P =
{p1 , . . . , pR } consisting of R polygons or regions and vector Z =
(zr )r=1,...,R of spatial data values zr ≥ 0 with ∑Rr=1 zr = 1. For this,
we ﬁrst refer to the constraints which have to be met during the
optimization process. Hereafter, we turn to the single components
of the objective function.

3.1 Constraints

(b) Treemap — interactively controlled method based on
TreeMaps [10] – Visualizations of the presidential race in 2000.
Figure 2: Related work on RecMap

When determining P we can choose among several possibilities of
representing the regions of P. We have decided to use rectangular
polygons as in this way the expressiveness of P is not impaired
by insigniﬁcant details of the shapes of the polygons of P. As
indicated before, we name this type of cartogram rectangular map.
Hence, we have to meet the following constraints in any case:
• P is planar,

via interaction. Most of the techniques which have been presented
so far do not take the shape and the topology of the map into account, e.g. [1], or the area error on continuous cartograms cannot
be eliminated completely, e.g. [7].

2

O UR C ONTRIBUTION

The idea of this work is to approximate familiar land covering map
region shapes by rectangles and to ﬁnd a partition of the available
screen space where the areas of these rectangular regions are proportional to given statistical values. In order to support the understanding of the information represented by a cartogram we try to
place the rectangles as close as possible to their original positions
and as close as possible to their neighbors. We deﬁne two variants of this optimization problem and present two corresponding
(heuristic) algorithms which generate space ﬁlling partitions of the
screen space with respect to the given geo–locations. Both algorithms construct cartograms where the area of each rectangle of the

34

• each polygon p ∈ P is a rectangle, and
• each polygon p ∈ P is neighbor of at least one different polygon p ∈ P.
A cartogram P obeying these constraints is called feasible. The set
of feasible cartograms is denoted by M .

3.2 Objective function
The quality of P depends on two aspects: First, we have to evaluate
whether the polygons of P can be easily recognized in P. Second, the areas of the polygons of P have to reﬂect the geo–spatial
data values given by Z. In general, these requirements represent
conﬂicting goals. Based on these aspects, we use ﬁve criteria in order to evaluate the quality of P. These criteria, which correspond
to the components of the objective function, are presented in the
following.

Area The quality of P w.r.t. the criterion “area” is measured
by the area error A(P) = A(P, Z) with
A(P) :=

1 R |εr − zr |
.
·∑
R r=1
zr

(1)

A(P) equals the average relative deviation of the actual share εr :=
a(pr )/A f (P) of the area a(pr ) of a polygon pr in the ﬁlled space
or ﬁlled area A f (P) := ∑Rr=1 a(pr ) of P from its desired share zr
in A f (P).
Shape The shape error S(P) = S(P, P) reﬂects the average
relative deviation of the shape of a polygon pr ∈ P from that of its
corresponding polygon pr ∈ P and is determined as follows:
S(P) :=

1 R |s(pr ) − s(pr )|
·∑
.
R r=1
s(pr )

(2)

The shape s(pr ) or s(pr ) of a polygon pr ∈ P or pr ∈ P is measured by the ratio of its maximum extension in horizontal direction
and its maximum extension in vertical direction, respectively.
Topology The topology error T (P) is an indicator of the deviation of the neighborhood relationships given by P from those
given by P. To obtain T (P), we ﬁrst have to compute the adjacency graphs or pseudo dual graphs Ga and Ga of P and P,
respectively. An adjacency graph reﬂects the neighborhood relationships between the polygons of a polygon mesh (cf. [9], p. 267).
To obtain that graph, we ﬁrst introduce a vertex for each polygon of
the polygon mesh. Next, for each pair of neighbored polygons, we
add an edge between the corresponding vertices.

|E a \Ea | + |Ea \E a |
,
|E a ∪ Ea |

Relative polygon positions An important criterion for the
recognizability of the polygons in P are their relative positions.
But since they are only partially reﬂected by the adjacency graph
we use the (relative) position error R(P) = R(P, P) with
1 R−1 R
2
·
· ∑ ∑ αr,ρ ,
R · (R − 1) 180◦ r=1
ρ =r+1

(4)

which is normalized to the interval [0, 1]. αr,ρ := arccos(ur,ρ ·
ur,ρ )/(|ur,ρ | · |ur,ρ |) measures the deviation of the relative positions
of polygons pr and pρ from those of pr and pρ with the help of
vectors ur,ρ = c(pρ ) − c(pr ) and ur,ρ = c(pρ ) − c(pr ) where c(pr )
and c(pr ) stand for the centers of gravity of pr and pr , respectively.
Empty space As we make use of rectangular maps it might
happen that P contains “holes” or empty space which comprises
those areas which are completely surrounded by ﬁlled space, i.e. by
polygons of P. Consequently, we also measure the quality of P
by the empty space error E(P) with
At (P) − A f (P)
,
E(P) :=
At (P)

To give the user full control over the visualization goals we have
developed two variants of the map partition problem each of them
focussing on different components of objective function F(P) =
(A(P), S(P), T(P), R(P), E(P)).
Variant 1 (MP1) Since one of the most important aspects w.r.t.
the expressiveness of cartograms is that spatial data is represented
by area, we require that A(P) equals zero. In order to use the
full screen space, we demand that E(P) equals zero, too. Hence,
using the constraints and the components of F which have been introduced above, we can state the ﬁrst variant of the map partition
problem being considered in this paper as the following vector minimum problem:
Min.
s.t.

F(P)
P ∈ M , A(P) = 0, and E(P) = 0.

(6)
(7)

Variant 2 (MP2) Like for (MP1), we demand that no area error occurs. Second, in order to take the recognizability of the polygons into account, we do not allow any shape error. Consequently,
we obtain the following optimization problem:
Min.
s.t.

F(P)
P ∈ M , A(P) = 0, and S(P) = 0.

(8)
(9)

(3)

where E a and Ea denote the set of edges of Ga and Ga , respectively,
reﬂects the number of neighborhood relationships being solely contained in one of both polygon meshes and is normalized to the interval [0, 1]. An example for the calculation of T (P) is given by
Figure 3.

R(P) :=

3.3 Formulation of the optimization problem

It is likely that (MP1) and (MP2) represent N P–hard optimization problems.

T (P) = T (P, P) with
T (P) :=

which equals the share of empty area in the total area At (P) of P.
At (P) stands for the space being enclosed by the boundary of P.
Again, E(P) is normalized to the interval [0, 1].

(5)

4

T HE RecMap A LGORITHM

In the following, we are going to present heuristic solution procedures for both variants of the map partition problem. First, we refer
to a heuristic for (MP1). Hereafter, we present a method which
computes a near–optimal solution for (MP2).
To obtain cartograms of high quality, we repeat the construction of
cartograms using a genetic algorithm (cf. [4], 2000) which guides
the optimization process. In each iteration of this meta heuristic,
a set or generation of cartograms or individuals is generated. An
individual is characterized by three aspects: the genotype, the construction algorithm, and the phenotype. The genotype stands for the
information needed to generate the corresponding phenotype using
a certain construction algorithm. In our context, the genotype corresponds to an array of nonnegative integers and the phenotype to a
(feasible) cartogram.
The individuals of a generation are evaluated by means of a
weighted objective function F which is derived from F. Then,
we select a predeﬁned number of best individuals and determine
the next generation out of their genotypes by applying replication
and mutation. This process is repeated until a predeﬁned number
of generations has been generated or a given amount of time has
elapsed. The best cartogram which has been found so far is returned.
The weights of F can be set by the user according to her or his
visualization goals. In this way, the user gains control over the visualization process and result. The effect of different weights on the

35

this way, we construct a sequence of partial cartograms P with no
empty space error. Each p ∈ P represents the aggregation of those
polygons of P which correspond to the centers of gravity c(pr ) being contained in p (i.e. c(pr ) ∈ p). The main step ends, when each
rectangle contains exactly one
(a) Graph topology constraint

(c) Empty space constraint

(b) Relative position constraint

(d) A combination of all constraints

Figure 4: Cartograms P resulting from different weights for the components of F

center of gravity and hence no further split can be done. Consequently, after R − 1 splits we obtain a partial cartogram P with
R polygons. This ﬁnal (partial) cartogram corresponds to a (complete) cartogram: P := P. The polygons of P have to be re–
numbered because, as indicated before, a rectangle p ∈ P represents that polygon pr ∈ P which corresponds to the single center
of gravity being included in p. Therefore, p gets the index r.
We differ between two types of splits: a horizontal split and a vertical split. A horizontal (vertical) split introduces a horizontal (vertical) splitting line into the rectangle p ∈ P to be split, which results
in two new polygons p and p with p being below (left) of p .
Splitting is done in such a way that, after each split, we have for the
current partial cartogram P
a(pr )
|P|

=

∑ a(pρ )

∑

c(pr )∈p

zr

(r = 1, . . . , |P|),

(10)

ρ =1

resulting cartograms is demonstrated in Figure 4 w.r.t. our heuristic
for (MP2). For example, Figure 4(a) shows the cartogram which is
obtained if the weight for T (P) is set to one and the other weights
are set to zero. (Figures 4(b) and 4(c) have to be interpreted in an
analogous manner.) The cartogram of Figure 4(d) is obtained if all
weights are set to one.
4.1 Variant 1

i.e. the area of pr ∈ P is proportional to the sum ∑c(pr )∈p zr of the
spatial data values of the polygons pr ∈ P being associated with
c(pr ) ∈ p (r = 1, . . . , |P|).
We try to split a polygon p ∈ P as equally as possible: If we do a
horizontal (vertical) split, we scan the points c(pr ) ∈ p from bottom
to top (left to right), and add them to p until we have

∑

4.1.1 Basic idea
In order to achieve E(P) = 0, our heuristic is based on the procedure of [8] which — starting with a single rectangle — computes
a sequence of partial cartograms P by adding a rectangle in each
step in such a way that no empty space can occur. In the following,
we ﬁrst give a detailed description of this basic procedure which
serves as the construction algorithm within our genetic algorithm.
4.1.2 Initialization step
In the initialization step, we ﬁrst draw the initial partial cartogram
which consists of a rectangle, denoted by p1 , with an horizontal
extension of maxr=1,...,R maxi=1,...,nr xri − minr=1,...,R mini=1,...,nr xri
and a vertical extension of maxr=1,...,R maxi=1,...,nr yri −
minr=1,...,R mini=1,...,nr yri . (nr stands for the number of nodes of
pr and (xri , yri ) for the position of the ith vertex of pr in clockwise
order.) Second, we compute the center of gravity c(pr ) for each
polygon p ∈ P and plot this point into the starting rectangle. In
the following, the polygons of P are represented by their centers
of gravity.
4.1.3 Main step
In the main step, we perform a sequence of so–called splits. Each
split refers to a rectangular polygon p ∈ P, which contains at least
two centers of gravity, and divides it into two new rectangular polygons, each of them containing at least one center of gravity. In

36

c(pr )∈p

zr ≥

1
zr .
·
2 c(p∑)∈p

(11)

r

Those centers of gravity of p which have not been added to p are
added to p . If p contains two centers of gravity, we stop after
having scanned the ﬁrst. Provided that we perform a horizontal or
vertical split of pr ∈ P, the splitting line is placed into pr such that
the height or the breadth of p equals
∑c(pr )∈p zr
· (yr3 − yr1 )
∑c(pr )∈p zr

or

∑c(pr )∈p zr
· (xr3 − xr1 ) ,
∑c(pr )∈p zr

(12)

respectively.
4.1.4 The RecMap –algorithm for Variant 1
A major drawback of the procedure described in the previous section is its rigidity. This means, that the polygons resulting from
a horizontal split have to be split vertically in any case and vice
versa. But in this way, no special attention is paid to the shapes
of the polygons and the neighborhood relationships between them.
For example, if the majority of the polygons p ∈ P possesses a
longish shape (i.e. s(p) < 1) the procedure might lead to seriously
deformed cartograms, i.e. cartograms P with high values for S(P)
and T (P). In such a case, it would have been indicated to prefer
vertical splits.
This drawback can be avoided by using split sequences. For example, let a cartogram P be obtained by performing a horizontal split
and two vertical splits afterwards. If we associate a horizontal split

with 0 and a vertical split with 1, we get the split sequence (0, 1, 1).
This split sequence can be conceived as the genotype of P. In
general, the genotype of a cartogram is a vector (Iλ )λ =1,...,R−1 of
(binary) values Iλ ∈ {0, 1}.
To use the construction algorithm described above w.r.t. a given
split sequence (Iλ )λ =1,...,R−1 , it has to be adapted accordingly. For
this, we introduce variable λ which stands for the split position
which is currently considered. Iλ represents the splitting type to be
chosen for the λ th split. At the end of the algorithm, λ equals R−1.
The adapted construction algorithm is given by Algorithm 1.

STEP 1 (initialization step)
P := {p1 }; S := {p1 }; λ := 1
STEP 2 (main step)
WHILE S = 0/ DO
Remove p from S
IF |{pr ∈ P|c(pr ) ∈ p}| > 1 THEN
IF Iλ = 0 THEN
Split p horizontally into p and p
ELSE
Split p vertically into p and p
S := S ∪ {p }; S := S ∪ {p }

RETURN P

P := P\{p}; P := P ∪ {p , p }
λ := λ + 1

Algorithm 1: Construction procedure for the MP1 heuristic

4.2 Variant 2
4.2.1 Basic idea
In literature, we ﬁnd an optimization problem in the context of
inner–plant layout planning (cf. [9], pp. 255) which shows certain
similarities to (MP2). This layout problem can be roughly stated
as follows: We are given a rectangular site, a set of machines (being described by their ground plans), and the amounts of material
which have to be transported between them. The objective is to ﬁnd
a layout, i.e. a plan with the positions of the machines on the site,
such that the transportation costs are minimized, i.e. that machines
with a high transportation intensity in between are located as close
as possible. The map partition problem considered here is similar
to the layout problem in so far as we are also given a set of rectangular areas (i.e. polygons) which have to be placed such that the
distances between them are taken into consideration.
The construction algorithm of our heuristic for (MP2) relies on two
ideas of the procedure of [3] which is derived from a graph theoretical model of the layout problem. First, in the initialization step,
we choose a speciﬁc polygon, called the core polygon pc , to be
the center of the layout or cartogram. Second, in the main step,
we construct a sequence of partial layouts or partial cartograms
P, i.e. starting with pc , the remaining R − 1 polygons are placed
around it one after the other until we have found a (complete) cartogram P := P.

4.2.2 Initialization step
As the area error and the shape error ought to be zero, the
breadth b(pr ) and height h(pr ) of each polygon pr ∈ P are given
by
R

b(pr )

:=

zr · ∑r=1 a(pr ) · s(pr ) and

(13)

h(pr )

:=

zr · ∑Rr=1 a(pr )
,
s(pr )

(14)

respectively. The core polygon pc is determined with the help of an
extension Gax of Ga which is obtained by introducing an additional
node R + 1 for the outer region of P. pc corresponds to a polygon
pr which has the maximum distance dr,R+1 from the outer region
pR+1 where the distance between two polygons is measured by the
minimum number of edges between their corresponding nodes in
Gax .
4.2.3 Main step
As indicated before, the main step consists of R − 1 partial steps.
In each of these steps, we choose an index r among the set of indices of those polygons which have not yet been created and added
to P. Let Q denote the set of indices of the polygons pr ∈ P.
Then, the index of the newly created polygon has to be taken from
{1, . . . , R}\Q. Since the maintenance of the neighborhood relationships of P is of high importance w.r.t. the recognizability of the
polygons of P, we have a look at Ga in order to determine the
index r of the polygon to be added next. We demand that the corresponding polygon pr ∈ P is a neighbor of at least one of those
polygons pr ∈ P the indices of which are contained in Q because
otherwise, the adjacency graph of the resulting partial cartogram P
would not be connected and we could no longer guarantee P ∈ M
for the ﬁnal cartogram P. Let N (pr ) denote the set of neighbors
of pr in P, i.e. N (pr ) = {pρ |(r, ρ ) ∈ E a }. If there are several
indices which could be selected, we choose the lowest one. Thus,
we set
r

:=

min{r ∈ {1, . . . , R}\Q|pr ∈

ρ ∈Q

N (pρ )}. (15)

After the determination of r we have to decide where to place the
corresponding polygon pr . In general, there exists an inﬁnite number of possible positions for pr . In order to keep the computational
time low, we have to restrict ourselves to a ﬁnite subset.
Pretests have revealed that the following procedure is favorable: We
scan the edges e of the boundary E of P and determine a set Πe
of possible positions for pr w.r.t. e. For example, we add the end
points and the middle point of e to Πe as possible positions of the
lower left corner of pr . To keep the number of possible positions
low and to exclude infeasible positions, each position (x, y) ∈ Πe is
checked within a multi–stage test. For instance, we remove those
positions from Πe which cause a violation of the planarity or which
could lead to unacceptable high values of T (P) or R(P).
Subsequent to the determination of the sets Πe we select the best
position (x , y ) and create pr at that position. (x , y ) is found as
follows: Let Π denote the set of all feasible positions which have
been found so far. For each position (x, y) ∈ Π, we temporarily
extend P by adding the newly created polygon pr at (x, y) and
compute a weighted sum F(P) of the values of the components
of F. The position associated with the minimum value of F equals
(x , y ).

37

4.2.4 The RecMap –algorithm for Variant 2
As the order in which the polygons are added to P is of high importance we have to encode this information by the genotype of P
which equals a vector (Iλ )λ =1,...,R of values Iλ ∈ {1, . . . , R} with
Iλ = Iλ for λ = λ (λ , λ ∈ {1, . . . , R}). For the use within our
genetic algorithm–based heuristic, we have to adapt the choice of
r accordingly. This means, that among the set of indices of those
polygons which are neighbors of polygons pr with r ∈ Q, we select
that index r which is the ﬁrst of them in I. Hence, (15) has to be
modiﬁed as follows:
r

:=

Figure 5: This Figure demonstrates the continuous improvement of
the feasible solutions for (MP2) with increasing number of generations. The computation time for each iteration equals 5 seconds.

min{λ ∈ {1, . . . , R}|Iλ ∈ {1, . . . , R}\Q and
pIλ ∈

ρ ∈Q

N (pρ )}.

(16)

The construction algorithm is given by Algorithm 2.

STEP 1 (initialization step)
Create Gax
r := min{r ∈ {1, . . . , R}|dr,R+1 = maxρ =1,...,R dρ ,R+1 }
Create pr at (0, 0); P := {pr }; Q := {r }; pc := pr
STEP 2 (main step)
WHILE Q = {1, . . . , R} DO
r := min{r ∈ {1, . . . , R}\Q|pr ∈ ρ ∈Q N (pρ )}
Q := Q ∪ {r }
Π := 0/
FOR e ∈ E DO
Determine Πe ; Π := Π ∪ Πe
F := ∞
FOR (x, y) ∈ Π DO
Create pr at (x, y); P := P ∪ {pr }
IF F(P) < F THEN
(x , y ) := (x, y); F := F(P)
P := P\{pr }
Create pr at (x , y ); P := P ∪ {pr }
RETURN P
Algorithm 2: Construction procedure for the MP2 heuristic

5

E FFICIENCY & A PPLICATION

The algorithms described above were implemented in ANSI–C using the O4 compiler option and run on the operating systems
Microsoft Windows and UNIX. The tests were performed on a
1.5 GHz Intel Xeon server with 4 GB main memory under Linux
(only 1 MB was needed by the algorithms). In this section, we will
show some applications using the U.S. census data base and U.S.
election data.
Efﬁciency Figure 5 shows, for each generation, the best cartogram which has been found so far by the heuristic for (MP2) and
Figure 6 illustrates the respective values of the errors. The values
for the (MP1) approach are illustrated, too. From these scatterplots we can conclude that the heuristic for (MP2) is more time

38

Figure 6: The scatterplots display the errors over time yielded by
the (MP1) and (MP2) heuristics for U.S. state level. Note that the
time axes are logarithmically scaled. The whole computation time
for 10 iterations equals 0.33 seconds for (MP1) and 55 seconds for
(MP2).

consuming than that for (MP1). Since RecMap gives us a useful
visualization even after the ﬁrst iteration the interactive exploration
of the data is guaranteed (see the cartogram yielded after Step 1 in
Figure 5).
U.S. election analysis We ran the algorithms on a number
of example data sets. Figures 7(b) and 7(c) show the U.S. electoral
voters corresponding to the presidential election result in 2000.
U.S. census analysis We have applied RecMap to the population data of the U.S. census data set. In Figure 8(a) we show the
original map on state and county level. On all maps of Figure 8 a
unipolar colormap (see Figure 8(h)) is used to indicate the number
of people. In Figures 8(b) and 8(c), highly populated regions, e.g.
L.A. and Chicago, are made clearly visible. Figures 8(d)–8(g) show
rectangular maps for California, New York state, and Texas using
RecMap for Variants 1 and 2. Please note that for all rectangular
cartograms the area error is zero.
RecMap has been integrated into our CartoView–System together
with other information visualization techniques for geo–spatial data
which have been introduced in the past [7, 8]. The interaction allows us to make the exploration process more efﬁcient and effective.
6

C ONCLUSION & F UTURE W ORK

In this study we have analyzed and discussed the problem of efﬁcient map partitioning and have proposed two automatic, scalable,

and ﬂexible algorithms called RecMap for generating rectangular
map partitions. Here, the user has an explicit control of all visualization constraints. Our approach is novel because its features (no
area error, explicit control of shape, topology, empty space, and relative position constraints) are not provided by previous approaches.
This new technique enables interactive views of detail at various
levels to ﬁnd very fast interesting patterns or subsets.
The experiments show that our algorithms offer good results for
a variety of applications, and their speed even allows an interactive display. Further research could comprise the combination
of our approach and other visualization techniques such as pixel–
oriented techniques (where the pixels could be placed directly into
their corresponding map partitions). Such a combination would allow to visualize areas with high information density. Additional
material (e.g. an executable ﬁle) and ongoing work can be found
on our web site http://dbvis.inf.uni-konstanz.de/
projects/RecMap.

(a) Traditional map which can be accessed at [11]

Acknowledgment We thank Stephen C. North from the
AT&T Shannon Laboratory in Florham Park, New Jersey, U.S., for
encouraging this research. We thank Catherin Plaisant for preparing the Treemap picture in Figure 2(b). This work was partially
funded by the Information Society Technologies program of the
European Commission, Future and Emerging Technologies under
the IST–2001–33058 PANDA project (2001–2004).
R EFERENCES
[1] Daniel Dorling. Area Cartograms: Their Use and Creation. Department of Geography, University of Bristol, England, 1st edition, 1996.
[2] J.A. Dykes. Cartographic visualization: Exploratory spatial data analysis with local indicators of spatial association using tcl/tk and cdv.
The Statistician, 47(3):485–497, 1998.
[3] L.R. Foulds. Graph Theory Applications. Springer, Berlin, 1992.
[4] M. Gen and R. Cheng. Genetic Algorithm and Engineering Optimization. Wiley, New York, 2000.
[5] Donald H. House and Christopher J. Kocmoud. Continuous cartogram
construction. In IEEE Visualization, Research Triangle Park, NC,
pages 197–204, 1998.
[6] B. Johnson and B. Shneiderman. Treemaps: A space-ﬁlling approach
to the visualization of hierarchical information. In Proc. Visualization
’91 Conf, pages 284–291, 1991.
[7] Daniel A. Keim, Stephen C. North, and Christian Panse. CartoDraw:
A fast algorithm for generating contiguous cartograms. Transactions on Visualization and Computer Graphics, 10(1):95–110, January/February 2004.
[8] Daniel A. Keim, Stephen C. North, Christian Panse, and J¨orn Schneidewind. Efﬁcient cartogram generation: A comparison. In InfoVis
2002, IEEE Symposium on Information Visualization, Boston, Massachusetts, pages 33–36, October 2002.
[9] K. Neumann. Produktions– und Operations–Management. Springer,
Berlin, 1996.
[10] Kent Norman, Ben Shneiderman, Catherine Plaisant, Evan Golub,
Chris North, Gunjan Dang, Egemen Tanin, , and Haixia Zhao. User
interfaces for the u.s. bureau of census online survey interfaces and
data visualization, Mar, 30th 2004. http://www.cs.umd.edu/
projects/hcil/census/.
[11] The New York Times on the Web.
The 2000 election,
Mar, 30th 2004. http://www.nytimes.com/specials/
election2000/results-pres.html.
[12] Erwin Raisz. Principles of Cartography. McGraw-Hill, New York,
1962.
[13] Marc van Kreveld and Bettina Speckmann. On rectangular cartograms.
In 20th European Workshop on Computational Geometry, Seville, March 2004. http://www.us.es/ewcg04/
Articulos/Speckmann.ps.

(b) RecMap for (MP1)

(c) RecMap for (MP2)

Figure 7: Visualizations of the presidential race in 2000. The areas of
Figures 7(b) and 7(c) correspond to the numbers of electoral voters.
The red and the blue color depict which candidate has won each
state. The candidate who covers most of the area of all polygons in
Figures 7(b) and 7(c) has won the election.

39

(a) Traditional U.S. map on state and county level

(b) Results of RecMap (Variant 1) using U.S. census population data on U.S. state and county level

(c) Results of RecMap (Variant 2) using U.S. census population data on U.S. state and county level

(d) CA using Variant 2

(e) NY using Variant 2

(f) TX using Variant 1

(g) TX using Variant 2

(h) Colormap

Figure 8: Population data from U.S. Census Bureau on various levels for the year 2000 – The area of each map partition corresponds to the
number of people living there. The colormap of Figure 8(h) indicates the number of people living in each region (yellow: high population; brown:
low population) and is a link from the traditional map to the corresponding map partitions.

40

