A GraphXML Description of QueryMaps 1
M. Angelaccio, B. Buttarazzi
Dipartimento di Informatica, Sistemi e Produzione - Università degli Studi di Roma "Tor Vergata"
Via del Politecnico 1, 00133 - ROMA (Italy)
angelaccio@info.uniroma2.it buttarazzi@info.uniroma2.it

Abstract
Website maps are becoming one of the most important
applications of graph drawing and information
visualization techniques. However, the user has often
struggled with web graphs returned from web search
agents. To efficiently manage the visualization of these
graphs it also occurs to take advantage from the
flexibility of XML language. GraphXML format is a
standard proposed for the information visualization of
generic graphs. In this work, we focuse on query graphs
in the sense of web graphs that are the semantics of
WebSQL query language. In particular, we give a
GraphXML description of query graphs in a way that
visual properties like colouring scheme for node
relevance visualization (“hot pages”) can be included. As
application we show some example of query maps
returned by our web search tool VSEARCH that are
obtained in an easy way via a Javascript view program.

1. Introduction
Web Maps are widely used to enhance the perception
of the content of a web site. In some cases these tools are
also used in conjunction of search engines or search
agents in order to give a view of the structure of the
underlying graph (see Mappuccino [5] and WebSphinx
[6]). However it is hard for the user to interact with the
visualization strategy due to a lackness of a proper graph
description language ([9], [10]). To overcome this we
adopt a suitable subset with modifications of GraphXML
that is a graph description language in XML [1,2,3]. The
goal of GraphXML is to provide a general interchange
format for graph drawing and visualization systems, and
to connect those systems to other applications ([3]).
Although GraphXML can be used for the description of
purely mathematical graphs, restricted to the set of nodes
and edges, information visualization applications like
Web Maps require more features. For example, it should
be possible to label graphs, nodes, and edges. It should

also be possible to attach application-dependent data and
external references. Applications might produce not just a
single graph, but also a whole series of graphs, possibly
ordered in time. We might want to control the visual
appearance of the graphs, such as the colour of the edges.
The interchange format should be able to cope with these
demands as well.
In this paper we briefly describe the main expected
features for web graphs that could arise from a local
searching tool. This type of graphs (called query graphs)
has some peculiarities that make them hard to be
described in GraphXML without changes. We propose a
different XML language named QueryGraphXML for
which a brief description together a discussion is given.
Furthermore, an example of application is given to
evidence the advantages of QueryGraphXML.

2. Query Graphs
GraphXML implements graph definitions ranging
from purely mathematical graphs to graphs with external
data references like the web graphs. In the case of links
answered from the web
by searching tools, the
corresponding graph structure visualization require some
attentions.
For example Figure 1 and Figure 2 show two
examples of tree structures that visualize the outputs of a
web search This has been obtained by using our local
searching tool VSEARCH ([4]) after the user has
submitted a query with keywords and starting from a site
(home of our university). A ranking function is applied on
each linked document.
The main issues of such a visualization system are the
following ones:
• Search results are organized following a graph
structure called query graph and defined as a tree
structure with external data references (node
label, link reference and rank value).
• A colouring scheme is applied to each node in
order to give a relevance view of “hot” nodes.

1

The work described in this paper has been carried out under the financial support of the Italian Ministero
dell'Università e della Ricerca Scientifica e Tecnologica (MURST)

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

•

Each query graph is dynamically generated as
HTML document thus allowing a modular and
easy to interact visualization system.

For instance, in figure 1 the first query graph is
displayed after that search engine has returned a search
tree of depth 2 and width 2 in correspondence of the
query with keyword “Ingegneria Informatica”. The
second query graph instead shows the completion of the
search. Each document is displayed with a node of
different colour that depends on the itself document
ranking value returned from the search engine
architecture.

To obtain these objectives we have defined a XML
format
description
for
query
maps
named
QueryGraphXML. Starting from such a query map
description and by using a XSL transformation to extract
node elements, we have implemented a complete
visualization system easy to integrate and that works in
the same way as graphical tree-menu program. In the rest
of the paper we outline the characteristics of
QueryGraphXML and the visualization applications by
comparing its syntax with the GraphXML syntax.

3. QueryGraphXML Definition
In this section we present a brief description of
QueryGraphXML syntax with emphasis on the changes
and differences with respect to GraphXML.

3.1 The node element
GraphXML adopts the rule that the name of a node
must be unique within the graph statement that contains it
(although not necessarily within a full GraphXML file).
In such a way edges can be defined by using such names.
In QueryGraphXML, instead, we want to adopt a different
naming definition that avoids the need to use edges. This
is motivated by the fact that a tree-menu layout follows a
preorder strategy for the visualization sytem tha can be
implemented in accord to bidimensional naming
associated to each node given by the pair of attributes
without edge definitions. In particular it holds that
Figure 1. Query Graph visualisation at first time

•

Level number is the depth level (from level 0 to
max level –1) of each node

•

Order number is the order number of each node
at each level.

Figure 3 shows the tree structure of the query graph
given in figure 1 by evidencing the bidimensional node
naming associated to a preorder visit of the tree

Figure 2. Query Graph visualisation at a second
time

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

Level
0 1 2

3

Order

that might be associated with a graph. QueryGraphXML
uses the following application data that are inherited from
GraphXML:

0

1.

Labels (<label> tag): whereas the name
attribute is used for identification, which means
that it must be unique within one graph
description, the label can contain any kind of text
and does not have to be unique. Applications can
use these to label nodes and edges, or as a title in
the window.

2.

Data (<data> tag): application-dependent data
represented by a node, or even the full graph.
The <data> tag can contain any kind of
information that can be described in XML2.

3.

Data references (<dataref> tag): application
dependent data, which, instead of being directly
incorporated into the graph files, is referred to
through external references.

0
0
0
1
1
0
1
1
0
0
1
1
Figure 3. Tree structure

The format of external references (within the
<dataref> tag) follows the specification of a separate

document of the World Wide Web consortium, called
Xlink[7]. For our purposes it is sufficient to say that the
format of the references is virtually identical to the URL
formats used in HTML.
In addition a fourth tag is included to explicitly
describe the rank value associated to each node:
4.

A more detailed syntax is given by the following DTD
description.
<!ELEMENT node (%common-elements;)*>
<!ATTLIST node
level
CDATA
#REQUIRED
order
CDATA
#REQUIRED
xlink:role
CDATA
#IMPLIED
xlink:href
CDATA
#IMPLIED

>
The xlink:href is used when the node is a
metanode (i.e. the value of isMetanode is true) in
which case it should refer to the id of a graph. As with
the edit element, the xlink:role can be a useful hint to
the application, but it does not have any predefined
semantics.

Rank value (<rank> tag): searching tool
dependent data, which corresponds to a rank
value computed during search process.

Here we give a detailed syntax for the specification of
application dependent data.
<!ELEMENT label (#PCDATA)>
<!ATTLIST label
class
CDATA
#IMPLIED
<!ELEMENT data (#PCDATA)>
<!ATTLIST data
class
CDATA
#IMPLIED
>
<!ELEMENT rank (#PCDATA)>
<!ATTLIST rank
value
CDATA
#IMPLIED
>
<!ELEMENT dataref (ref*)>

3.2 Application dependent data
Application data can be added to different levels of the
query graph description through a series of additional
elements defined in the same way as GraphXML. These
elements are meant to represent the different types of data

2

Although XML describes everything in terms of
strings, it has its own formalism, called entities and
notations, which can be used to include binary data, too.
However, using external references, through the
<dataref> tag, may be more appropriate for this.

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

The following example describes a fragment of the
QueryGraphXML definition for the query graph given in
Figure 1. The fragment will correspond to the node at
level 2 and order 1 with rank value = 58. You can see
evidenced all the elements and attributes that characterize
the syntax of QueryGraphXML different from
GraphXML.

<query-graph>
...
<node level = “2” order = “1” >
<label>
Sede di via eudossiana
</label>
<rank value = “58” /rank>
<dataref>
<link xlink:role="original
xlink:
"href="www.uniroma1.it/dis.html"/>
<link xlink:role="local”
xlink:
"href="localhost/
www.uniroma1.it/dis.html"/>
</dataref>
</node>
...

particular its colour. The introduction of rank values data
in the description of query graphs, makes difficult to
directly define a visualization strategy by using <style>
tag. In fact we cannot associate a colour attribute to each
node or via class attribute to a category of nodes. The
problem is that in absence of other mechanism it is
impossible to modify the XML description as a function
of rank values. A solution to this problem can be given by
means of XSLT mechanism [12] to dynamically
transform a QueryGraphXML file into, for example, an
HTML file, resulting in some pretty printing format of a
graph specification. Moreover, it will be possible to
obtain a direct interpretation of the geometric attributes
and to give a visual representation of the query graphs
through a web browser.

4. References

</query-graph>

Figure 4. A fragment of QueryGraphXML
definition
Note the use of the local value in the attribute role
that is used to manage interact with cached copies of the
answered documents.
GraphXML allows other structural elements definition
(hierarchies and dynamic graphs). Moreover, other
aspects that we do not treat in detail are the elements for
storing the geometric positions of the nodes and the edges
(see GraphXML). If this information is available, the
visualization system might decide to use those instead of
calculating new layout positions, thereby saving a
significant amount of time. Furthermore, the graph
description can become a real interchange file between
different visualization systems, preserving not only
structure but also geometry.

3.3. Node Visual Properties
In GraphXML, the simplest way of controlling node
colouring properties and other visual properties is to use
the <style> tag as a direct descendent of a node. A style
can include the tags <line> or <fill>. For each node,
the line tag controls the border of the symbol drawn for
the node, whereas the fill tag controls the interior and in

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

[1] “Extensible Markup Language (XML) 1.0”,
World Wide Web Consortium, (eds. T. Bray, J.
Paoli,
C.M.
Sperberg–McQueen),
Recommendation
February
1998,
http://www.w3.org/TR/REC-xml.
[2] N. Bradley, The XML Companion,. Harlow:
Addison Wesley Longman, 1998.
[3] Herman and M. S. Marshall, GraphXML - a
graph description language, Proceedings of the
Symposium on Graph Drawing (GD 2000),
Springer Verlag, LNCS 1984, pp. 52-62, 2000.
[4] M. Angelaccio, B. Buttarazzi, A Visualisation
System for Web local search, Proceeding of IEEE
Conference IV2000, London, July 2000.
[5] I. Ben-Shaul, M. Herscovici and others, Adding
support for Dynamic and Focused Search with
Fetuccino,
http://www8.org/w8-papers/5asearch-query/adding/adding.html .
[6] R. C. Miller and K. Bharat. SPHINX: A
Framework for Creating Personal, Site-Specific
Web Crawlers. In Proceedings of WWW7,
Brisbane Australia, April 1998.
[7] “XML Linking Language (XLink)”, World Wide
Web Consortium, (eds. S. DeRose, D. Orchard,
B. Trafford), Working Draft July 1999,
http://www.w3.org/TR/WD-xlink.
[8] P. Eades and Q.-W. Feng, “Multilevel
Visualization of Clustered Graphs”, in
Proceedings of Symposium on Graph Drawing
GD '96, Berlin, 1997.

[9] D. Schaffer, Z. Zuo, S. Greenberg, L. Bartram, J.
Dill, S. Dubs, and M. Roseman, “Navigating
Hierarchically Clustered Networks through
Fisheye and Full–zoom Methods”, ACM
Transactions on Computer–Human Interaction,
vol. 3, pp. 162–188, 1996.
[10] Herman, S. Marshall, and G. Melançon, “Graph
Visualisation and Navigation in Information
Visualisation: a Survey”, To be published in:
IEEE Transactions on Visualization and
Computer Graphics, vol. 6, 2000. An earlier
version is also available in: Proceedings of
Eurographics '99 State–of–the–Art Reports,
Milano,Italy,1999,
http://www.cwi.nl/InfoVisu/Survey/StarGraphVi
suInInfoVis.pdf.
[11] “XML Pointer language (XPointer)”, World
Wide Web Consortium, (eds. S. DeRose and R.
Daniel Jr.), Working Draft July 1999,
http://www.w3.org/TR/WD-xptr.
[12] “XSL Transformations”, World Wide Web
Consortium, (ed. J. Clark), Recommendation
November, 1999, http://www.w3.org/TR/xslt.

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

