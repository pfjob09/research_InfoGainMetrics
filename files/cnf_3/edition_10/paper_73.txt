+LJK 3HUIRUPDQFH 9LUWXDO 5HDOLW\ 'LVWULEXWHG (OHFWURQLF &RPPHUFH
$SSOLFDWLRQ IRU WKH )XUQLWXUH DQG &HUDPLFV ,QGXVWULHV
M. Caballer, D. Guerrero, V. Hernández, J. E. Román
Grupo de Redes y Computación de Altas Prestaciones, Universidad Politécnica de Valencia (Spain)

M. Alcañiz, J. A. Gil
Grupo de Aplicaciones Gráficas Avanzadas, Universidad Politécnica de Valencia (Spain)

J. M. Rubio
Ingeniería de Software Avanzado (Spain)

$EVWUDFW

7KLV SDSHU SUHVHQWV DQ HFRPPHUFH WRRO WKDW H[WHQGV
WKH FRQYHQWLRQDO RQOLQH VWRUH ZLWK D QHZ VHFWLRQ FDOOHG
URRP SODQQHU D ZHE DSSOLFDWLRQ ZKLFK LV HPEHGGHG LQ
WKH YLUWXDO VWRUH ,W DOORZV WKH VSHFLILFDWLRQ RI WKH
JHRPHWU\ RI WKH URRP SODFHPHQW RI WKH REMHFWV DQG
VHOHFWLRQ RI WKH SRLQW RI YLHZ 7KHQ D UHDOLVWLF SLFWXUH RI
WKH VFHQH FDQ EH REWDLQHG 7KLV IXQFWLRQDOLW\ LV YHU\
VXLWDEOH IRU WKH IXUQLWXUH DQG FHUDPLFV VHFWRUV ,Q RUGHU WR
JHQHUDWH WKH LPDJHV D SDUDOOHO UDGLRVLW\ LOOXPLQDWLRQ
DOJRULWKP KDV EHHQ LPSOHPHQWHG ZKLFK FDQ EH XVHG LQ
ORZFRVW SODWIRUPV VXFK DV D FOXVWHU RI 3&V VR WKDW WKHVH
WHFKQRORJLHV DUH DIIRUGDEOH DOVR IRU 60(V

 ,QWURGXFWLRQ
This paper describes the results of the VRECommerce project, which aims at developing all the
necessary technology for the integration of low-cost fast
synthetic image generation in electronic commerce
applications. The main goal of the project is the
development of two model virtual stores focused on the
sectors of furniture and ceramics, respectively. The
technology developed in the project addresses these two
sectors because of their specific needs.
The project aims at promoting the development of
electronic commerce at European level, specially in small
and medium sized enterprises (SMEs), and introducing
these technologies in sectors in which the use of that type
of tools is not usual, in this case the furniture and
ceramics industries. In order to accomplish this, it is
necessary to incorporate innovative added-value features
by integrating advanced technologies.
The basic functionality that is added in the VRECommerce system is the possibility of creating virtual
ambients, by means of a room planner. The room planner

is an intuitive and easy-to-use tool which enables the
customer to design a virtual ambient with a standard
Internet browser. With this tool the client can design a
scene at will, then navigate inside it to choose a point of
view and finally request the generation of a picture.
The other extra functionality is the realistic image
generation, for the visualisation of the virtual ambient.
The radiosity illumination algorithm has been used to
generate the images. It generates very realistic images and
the calculations are only made once per scene although
the point of view changes. In order to use the radiosity
image generation algorithm in an e-commerce
application, it is highly recommended to have a response
time of not more than one or two minutes. This restriction
makes the use of parallel computing necessary to reduce
the response time. This may not be enough to achieve a
very fast response due to the high computational cost of
the image generation algorithms. So in addition
simplifications to the algorithm are required, always
trying to minimise the loss of quality.
To promote the use of this tool the parallel code
should run efficiently in platforms that are affordable for
SMEs. By this reason a cluster of PCs has been used for
the image generation stage. This platform provides a great
computational power at a reasonable price.
Some previous works have addressed this
application, such as the one described in [5]. Our solution
focuses on business-to-consumer situations in which all
the system (including the parallel platform for rendering)
is owned and maintained by the company which offers the
products. However, other operation models are also
possible. Also, low cost is emphasised so that SMEs can
also benefit from this technology.
VRE-Commerce is an 18-month project funded by
the IST European research programme. The participants
in the project are Universidad Politécnica de Valencia

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

(technology expert), Ingeniería de Software Avanzada
and Ingegrafic (technology providers), and Muebles
Ramis and Cerypsa (end user SMEs, from furniture and
ceramics sectors, respectively).

 'HVFULSWLRQ RI WKH V\VWHP
The VRE-Commerce system is made up of the
following 3 parts:
- The client’s computer, from which he will be able to
access the electronic commerce store by means of an
Internet browser.
- The electronic commerce system installed in the web
server, which is connected to the products data base and
other information resources in the company.
- Computational server: machine(s) with great computing
power, in charge of generating the realistic threedimensional view that will be shown to the user.
The operation of the VRE-Commerce system is
illustrated in Figure 1. The client will connect through his
browser to the web server of the supplier company, where
he will find the products catalogue and will choose those
in which he is interested. After that he will go to the 2-D
design area (room planner), where he will be able to place
the selected objects, as well as other objects provided to
complete the scene and produce better realism.
Once the scene has been designed in 2-D, it is
possible to choose the point of view from which the
picture of the scene is to be generated. Then he will make
the request of generation of the 3-D image that will be
sent to a CGI program located in the web server. That
CGI program will contact the computational server and
run the parallel image generation program. Once the
image is generated, it will be returned back to the CGI
program of the web server which displays it in the client’s
browser.

Fig. 1 – Operation scheme

 9LUWXDO VWRUHV
The two virtual stores have been developed using
WebSphere Commerce Suite 5.1, WebSphere Application
Server and other related tools from IBM. WebSphere
Commerce Suite uses an open architecture based on a

Java programming model that allows developers to
modify and add commands to customise the behaviour of
their sites, using accepted industry standards like Java,
JavaServer Pages (JSP), Enterprise JavaBeans (EJB) and
XML. WebSphere Application Server allows the
programmer to combine JSP, servlets and EJB easily, and
provides a flexible development environment.
The following elements are typically included in a
virtual store:
3URGXFW &DWDORJXH. Navigation through the store allows
the visitor to browse the product catalogue organised by
categories and subcategories, select the wished products and add
them to the shopping cart. It is also possible to find the desired
products by means of an integrated search tool.
6KRSSLQJ &DUW. It contains the list of selected products.
After the wished products have been added to the shopping
cart, it is possible to access the room planner to obtain a
representation of the selected products. It is also possible to
formalize an order by filling up the appropriate forms. In the
accomplishment of orders, there are no payment processes.
Instead these orders are gathered in the centres of distribution or
sent by mail services.
8VHU $FFRXQW. Each registered user can access his personal
information in order to modify it and to edit his address book.
*HQHUDO LQIRUPDWLRQ. The store also shows general
information related to it, such as contact information, help for
the purchase process, policy of privacy, etc.

 5RRP SODQQHU
The room planner is a web application, embedded in
the virtual stores, that allows the client to specify the
geometry of the room, place the objects and select the
point of view.
For the creation of the scene the user must be able to
select the elements that will appear on it. Apart from
standard elements that will be available for all the
environments, such as pillars, lights, furniture
complements, etc., the user is mainly interested in
visualising some of the products of the shop. These
elements will be chosen from the catalogue of the virtual
shop, being accumulated in the shopping cart, in order to
be used later during the design of the ambient.
When entering the room planner, all the products
contained in the shopping cart are imported automatically
so that they are available for being placed in the scene.
The information which is imported includes dimensions
of the bounding box, geometric model of the object and
other information relevant for the visualisation process.
It is not necessary to include in the scene all the
products contained in the shopping cart, only those that
the user wants to use at any moment. In this way, for
example, the user could put one bed of 90 cm and another

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

of 100 cm in the shopping cart, although he only wants
one of them. So that a scene can be visualised with one
bed and later with the other one, in order to choose the
one which best fits his ambient.
The first step in the composition of the scene is the
selection of the type of room and its dimensions, so that it
corresponds with the client’s room. In order to make it as
easy as possible to define the geometry of a room, the
system offers the user a reduced set of rooms as a basis,
whose dimensions can be adjusted. Although this strategy
does not cover all the possibilities in the geometry of
rooms, most of the cases are included.

Fig. 2 – Placing elements in the room

Once the geometry of the room has been defined, the
next step consists in placing the elements in it. Figure 2
shows the tool while the user is in the phase of placing
elements in the room. The following groups of elements
are considered:
(OHPHQWV VHOHFWHG IURP WKH YLUWXDO VKRS FDWDORJXH
The user will be able to choose those elements brought
from the virtual shop by means of the shopping cart to
place them in the ambient. For this, an easy and intuitive
interface has been designed, through which the user can
change the position of an element at any time simply by
dragging it around the scene. Moreover, operations such
as rotation are allowed just by double clicking the mouse
over the object. Thus the work of placing the elements in
the ambient is comfortable and easy, which can also be
done in a short time.
&RPPRQ HOHPHQWV One of the features that the tool
must incorporate is the fidelity of the representation. To
help get it, some extra elements, apart from those chosen
in the virtual shop, are available to the user. This allows
to complete the ambient in a way as close to the reality as
possible. Some of them are pillars (squared and circular)
and standard complements, such as doors, windows, etc.

The interface to handle these elements is the same used to
handle those imported from the shopping cart, so no extra
complexity is added to the system.
/LJKWV. Another important thing in the construction
of the scene is the number and position of the lights. The
interface used to place them is similar to the used for
other elements. In this case the room planner allows the
user to choose among a number of different types of light
appliances with different dimensions and light intensity.
6SHFLILF HOHPHQWV IRU FHUDPLFV. Apart from the
placement of elements such as furniture and columns, the
system gives the user the possibility of trying different
designs for the walls and floor by combining ceramic
tiles. As in the case of furniture, the source for the tiles is
the shopping cart coming from the virtual shop catalogue.
In the way the user can choose the tiles to be shown later
in the floor of the scene as well as the composition to be
used in the walls. The FRPSRVLWLRQ of the walls receives
this name because the tool allows to place different tiles
for different zones of the walls, depending on the distance
to the floor. It is possible to use up to five different areas:
lower skirting board, lower zone, separator, upper zone
and upper skirting board. Definition of simple patterns
such as checkerboard is also possible.
Once the user has made the environment that
matches his needs, it can be visualised in three
dimensions. The system performs a virtual reconstruction
of the room using the user defined elements, so that the
user can navigate through the room inspecting how the
scene results with the chosen furniture elements.
To achieve more realistic results, at any time the user
can obtain a high quality image of the scene, from the
viewpoint chosen during navigation in the ambient. In this
way, the users, that can be final clients or resellers, have
the possibility of making collections of pictures of the
room with different furniture elements or tiles and from
different viewpoints, thus easing the selection of products.
In the navigation stage, all the necessary tools are
incorporated to allow the user to have complete freedom
of movements, in order to inspect the result on his own
and to be able to choose more appropriate viewpoints
from which to obtain realistic images, if desired. For this,
the user will be able to perform movements in the
up/down and left/right directions, rotations and zoom-in,
zoom-out movements, in a way that the navigation can be
handled in a short time without difficulties. A snapshot of
the system during navigation is shown in figure 3.
Apart from the movements mentioned above, the
system provides the user with several predefined
viewpoints with the most usual views. Among these
predefined viewpoints outstands the “floor view”, which
places the viewpoint at the top of the room pointing down
in a way that all the ambient is contained in the view. This

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

has been one of the most frequently used views during the
testing of the system carried out until now. This is mainly
due to the fact that it offers a perspective of the room
which is very good for showing the remaining free spaces
and the distribution of the elements.

Fig. 3 – Navigation through an ambient

 *HQHUDWLRQ RI UHDOLVWLF LPDJHV
One of the most important things to attract users is to
be able to obtain realistic images in a relatively short
period of time. In order to get this realism, the radiosity
method is used, but adapted to be faster without a
significant loss of visual quality. This method has been
chosen for the generation of the images due to the fact
that it produces high quality images, although it implies a
high computational cost. High performance computing
techniques can be applied to reduce this high cost.
Another advantage of the radiosity method for image
generation is that the required computation must be
performed only once for each scene, even when the
viewpoint changes. Thus, once an image of the ambient
has been obtained, generating new images from other
viewpoints is straightforward.
There are several strategies to solve the radiosity
problem (see for example [3] for a general description of
radiosity algorithms). For this project, hierarchical
radiosity has been chosen. This approach provides good
quality images without involving an excessive amount of
memory or a very high computation cost.
The implemented algorithm for the generation of
images can be decomposed in the following general steps:
1. First, the scene is loaded. It consists in a mesh of
polygons with their respective characteristics, such as
diffuse reflection indices, emitted light (0 in the case
of regular polygons not belonging to a light) and, in

some cases, the associated texture.
2. Then, the form factor between pairs of polygons is
computed. Determination of the visibility level
between each polygon and the rest of polygons in the
scene is included in this computation. In the
algorithm, one LQWHUDFWLRQ is created for each pair of
polygons with a significant form factor (so they are
visible to each other, at least partially). This
interaction implies a possible interchange of energy, to
be considered.
3. Finally the radiosity of each polygon is adjusted
iteratively. The process iterates until the level of
energy in the scene does not grow more than an
specified value or until a maximum number of
iterations is reached. During this iterative process, the
tasks performed are oriented to distribute the energy
of a polygon to the others using those interactions
created in step 2, if some of the involved polygons has
energy to reflect to the other.
As stated before, some changes have been
incorporated to the basic hierarchical radiosity algorithm
in order to accelerate it and adapt it to the type of
environments that are going to be treated typically.
Firstly, the following simplification has been applied: in
the radiosity process the three visible bands are usually
considered (those corresponding to each of the
components of colours: red, green and blue bands),
whereas in this solution only one component is
considered, that will represent the intensity of the
illumination.
The main drawback of this simplification is that it
does not allow the user to see the colour when interpreting
the illumination. Colour lights will not be able to be
represented and the same will occur with reflections
which depend on the colour of the reflecting surface. In
this system, all represented lights are white. The fact of
not considering the colour of the reflecting surfaces in the
reflections produces very slight changes that are not
usually perceived and that do not subtract realism from
the scene. Therefore, the mentioned inconvenience is not
very relevant.
However, advantages obtained due to this
simplification are important: firstly, requirements of the
algorithm will be decreased, both in computational cost
and in resources consumption, which will reduce the time
needed to obtain the images. The second advantage is
given by the fact that once the scene is computed, the user
will be able to modify the textures (furniture elements,
walls, ...) without having to rerun the algorithm to get the
images, since the values of the computed diffuse
reflections do not have a colour component. This is also
accomplished due to the assumption that changing
textures in different portions of the scene is not going to

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

produce a significant variation in the original indices used
for the diffuse reflections in the surfaces.
We have also made another important simplification.
The code only carries out the first iteration of the radiosity
algorithm to generate the image. That implies that only
the interactions with the light polygons are processed,
decreasing the total amount of light of the scene. Some
ambient light is introduced to compensate this effect.
With this simplification we obtain a great reduction of the
response time while maintaining very good visual results.
The ambient light is also useful for the following
reason. In the case that the value used as a bound for the
creation of interactions is too high or when the algorithm
is stopped too soon, it is possible that some zones of the
scene are not illuminated as they should. Ambient light
improves visualisation in this case by simulating the
energy that has not been distributed yet.
Another possibility incorporated in the algorithm is
refinement. Those polygons which have a certain ratio of
accumulated energy with respect to size are divided into
smaller ones. The same occurs for those that are in semidarkness zones, i.e. those that have portions to which light
arrives directly but other portions to which light does not
arrive. Thanks to this incorporation it is possible to make
better shadows, thus enhancing the realism of the scene.
An added problem could be the appearance of socalled T-vertices that produce unexpected sudden changes
in the illumination. However, including in the algorithm
techniques to detect and correct these errors, can avoid
this undesired effect.

Fig. 4 – Image generated by the algorithm

 3DUDOOHOLVDWLRQ
A parallel implementation of the radiosity algorithm
has been carried out. It enforces two levels of
parallelisation: a coarse-grain level implemented with the
message-passing interface (MPI) standard [4], and a finegrain level attained by the use of threads.
There are several possible parallelisation approaches
for the hierarchical radiosity rendering method. Most of
the coarse grain strategies are based on distributing in
some way the scene across the available processors and
then performing the different iterations of the method in a
distributed fashion. They vary in the way they perform the
flux of radiosity among sub-scenes owned by different
processors.
The option of replicating or not the complete scene
in all the processors is an important factor, too. If the
scene is not replicated, only a subset of the scene is stored
in each processor thus requiring less amount of memory
and allowing to work with larger scenes, but more
communications will be necessary when accessing data of
the scene which is stored in other processors’ memory.
The replication of the scene data makes this
communication unnecessary, but requires a larger amount
of memory in each processor.
With respect to this aspect, a hybrid solution has
been implemented. The initial scene is replicated in all the
processors thus allowing each of them to know all the
information about the scene required for the first steps of
the algorithm. However the refinements produced by the
hierarchical algorithm are stored only in the processors
who own the interaction being refined. We use this
approach because the initial geometrical data use much
less memory compared to the data produced by the
hierarchical algorithm due to refinements.
In this scenery, achieving a good load balancing is
not as simple as distributing a similar number of patches
for every processor. Since the solution is an adaptive
scheme which modifies the number of patches in every
iteration, the quantity of work to perform is not always
proportional to the number of initial distributed patches.
To solve this problem a Manager-Worker approach
has been used in order to distribute the polygons and
patches to the processing nodes dynamically. This is
similar to other solutions proposed by some authors (see
for example [1]). The manager process is in charge of
distributing the load in a balanced way among the
different worker processes. These processes ask the
manager for a polygon to process it. Since the geometrical
data are already distributed in all the nodes, sending the
index of the polygon in the scene is enough. Once the
index has been received, the worker processes it, then
requests a new polygon and so on. In this way, a balanced

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

distribution of the processing between the different nodes
is obtained, with very few data exchange. This
distribution makes it possible to use the algorithm
efficiently in a network with processors of different
speed, obtaining nearly 100% utilization in all the nodes.
This strategy can be difficult to deploy if there are
few large polygons. In order to improve the distribution in
this case, initially the largest polygons of the scene are
divided. This is done to avoid that the work of a single
polygon is so great that the distribution of the load is
unbalanced.
This solution can only be used in the first iteration of
the radiosity algorithm, because when this iteration
finishes the geometrical data loaded in each processor is
different because of the refinements produced by the
hierarchical algorithm. In order to use the same approach
in the other iterations, it would have been necessary to
send all the new geometrical data of each polygon, and
communication cost would increase too much.
In order to distribute the data to the processors in a
shared memory computer a different approach has been
used, which is compatible with the coarse grain
parallelisation described above. This approach is based on
a global queue for all processors (a similar approach is
used in [2]). This queue is used to store the subpolygons
to be processed. Initially the original polygons of the
scene are placed in the queue. Then, due to the
refinements produced by the hierarchical algorithm, each
polygon is divided into smaller subpolygons. Each
subpolygon generated in that way is stored at the tail of
that queue. The process ends when this queue is empty.
This scheme yields a balanced distribution. Mutual
exclusion must be guaranteed in order to avoid problems
when some processors add or remove elements of this
queue at the same time.
The implemented algorithm has been tested in a
distributed memory multiprocessor with shared memory
nodes. In particular, it is a PC cluster with 12 biprocessor
nodes. Each node has two Pentium III processors at 866
MHz, with 512 MB of memory, two Fast Ethernet
interfaces and one Gigabit Ethernet card. The operating
system is Red Hat Linux.
The code has been tested exhaustively with many
different scenes. To illustrate the performance of the
parallel algorithm, some time measurements are presented
corresponding to a typical bedroom example. This
example has 1.566 polygons which become 123.222 at the
end of the execution.
Table 1 shows the speed-up and efficiency obtained
in the execution of the bedroom scene when using only
one or both of the processors in each node. A good speedup is obtained, for example 14 with 16 processors (88%
efficiency). As expected, the efficiency decreases when

increasing the number of processors. Up to 16 processors,
the efficiency is more than acceptable.
Nodes
1
2
4
8
1
2
4
8

Procs
1
1
1
1
2
2
2
2

Time (secs)
544.1
274.5
143.4
74.4
275
138.9
72.5
38.1

Speed Up
1
1.98
3.79
7.31
1.98
3.92
7.51
14

Table 1 – Execution times and speed-up

 &RQFOXVLRQV
In this project, several tools have been developed
that enhance e-commerce applications with visualisation
capabilities. This increase the possibilities of selling in
some industrial areas, like furniture or ceramics, whose
products are not easy to sell with a conventional online
store.
With the room planner the clients can design their
own scenes, choose the point of view, and see the image
of the chosen products in their browsers.
The image generation program is designed to be used
in low-cost platforms, like a cluster of PCs. The aim is to
promote the use of these technologies not only in large
companies but also in SMEs.
The parallel code, which combines the two types of
parallelisation, can be used in a multiprocessor machine
or in a cluster of computers. The dynamic load balancing
makes possible to use machines with different number of
processors and different speed achieving good efficiency
with up to 16 processors.

5HIHUHQFHV
[1]
[2]

[3]
[4]
[5]

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

T. Funkhouser, Coarse-Grained
Parallelism for
Hierarchical Radiosity Using Group Iterative Methods,
Computer Graphics (SIGGRAPH 96), August 1996.
François Sillion and J.-M. Hasenfratz. Efficient Parallel
Refinement for Hierarchical Radiosity on a DSM
Computer. Proceedings of the Third Eurographics
Workshop on Parallel Graphics and Visualisation,
September 2000.
James D. Foley, Andries van Dam, Steven K. Feiner and
John F. Hughes. Computer Graphics: Principles and
Practice. 2nd ed. Addison-Wesley, 1996.
Marc Snir, Steve Otto, Steven Huss-Lederman, David
Walker and Jack Dongarra. MPI: The complete reference.
The MIT Press, 1996.
R. Lüling and O. Schmidt. HiPEC: High performance
computing visualization system supporting networked
electronic commerce applications. In EURO-PAR'98
Parallel Processing Proceedings, Lecture Notes in
Computer Science 1470, p. 1149-1152. Springer, 1998.

