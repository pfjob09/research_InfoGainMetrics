On the Notion of Compliance in Critiquing

Intelligent

Representing Duty and Contrary-to-Duty

Design Assistants:

Statements

Marian Florin Ursu and Robert Zirnmer
Department of Mathematical and Computing Sciences
Goldsmiths College, University of London,
SE14 6NW; London, UK
m.ursu@gold. ac.uk and r.zimmer@gold.ac.uk

Abstract
This paper

is part

of an investigation

into formal

and

operational models of the notion of compliance between a
design and a body of regulatory design knowledge. Design
compliance is defined here on the basis of database
integrity. The paper provides a formal model of design
compliance, based on the assumption that designs are
representable as Horn clauses with negation in the body
and design rules are representable as denials in first order
logic (FOL). This model has been implemented in aiDA, a
prototype
of a critiquing
intelligent
design assistant
developed for this research. Unfortunately, FOL does not
provide adequate representational
support for all the
statement structures that occur in real bodies of regulatory
design knowledge. Some statements require different logic
forms and, for these, the definition of compliance has to be
reconsidered.
This paper presents a motivation for
formalising design regulations, an overview of what has so
far been done by using First Order Logic, and a new
extension of the mechanism to duty and contrary-to-duty
statements. The results presented here draw on results in
database systems and normative reasoning.

I. Introduction
Design, in many application areas, is governed by
codes, standardsand regulations; these make up the bulk of
what is referred to (in this paper and elsewhere) as
regulatory design knowledge. Attempts to provide
computer support for reasoning with such knowledge has
been targeted at three distinct goals: support for preparing
codes and standards, support for the identification of
relevant provisions (among potentially many applicable
ones) to particular designs, and automatic or semiautomatic evaluation of design regulations [I]. These

targets can make different demands on representation
systems;for the purposes of this paper, we concentrate only
on the third goal, namely on providing formal support for
the development of critiquing intelligent design assistants
(for a survey of such systems refer to [2]).
It has been the goal of some of the work in this
direction to express regulatory design knowledge
declaratively in a formal language and interpret it in the
context of each particular design since 1981 [3]. However,
the state of the art in critiquing intelligent design assistants
is still far from this ideal. Over the last several years, there
has been a fair amount of consideration given to the
requirements put on formal languagesfor the expression of
regulatory design knowledge (see, for example [1], [4], [5],
[6], [7] and [8]). However, certain classes of sentence
structures, which are extensively used in real bodies of
regulatory design knowledge, still remain beyond the scope
of existing solutions. Furthermore, the notion of compliance
between a design and a body of regulatory design
knowledge received little attention.
This paper presents a formal model for design
compliance in fIrst order logic (FOL) and its operational
counterpart in aiDA. aiDA, significantly influenced by
RaPiD [9], is a prototype critiquing intelligent design
assistant built for this research. Two classes of sentence
structures often employed in statements of regulatory
design knowledge are: general norms and exceptions and
duty and contrary-t()-duty statements. Such structures are
not conveniently representable in FOL and, in each case,
the notion of design compliance has to be revisited. The
case of general norms and exceptions is dealt with in [10].
This paper focuses on duty and contrary-to-duty statements.
A duty and contrary-to-duty pair of statementsworks
as follows. The duty statement is a standard requirement
and the contrary-to-duty statement specifies what should
happen if the requirement isn't met. For example, the duty
statementmay be:

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

You

must

not

eat meat.

This is a rule that is easily expressed and implemented.
contrary-to-duty rule may then be added to the effect:
If you

do eat meat,

you

must

eat

lean

A

meat.

This rule, by itself, is also fairly easily expressed and
implemented. However, the representation of the two rules
as a pair presents difficulties. Prakken and Sergot have
studied the use of these kinds of rules in legal reasoning
[11, 12]. In this paper, we discuss the representation of
such rules in conjunction with the notion of design
compliance.
In order to simplify the argument, the notion of design
compliance is discussedhere on the assumption of complete
designs and complete/exactstatementsof regulatory design
knowledge (i.e., free of ambiguities, vaguenessand opentexture). We are currently working towards the definition of
compliance in the context of incomplete designs and
incomplete and/or inexact statements of regulatory design
knowledge.

2. Background
From a perspective similar to that adopted in [13), a
design process consists of: (i) problem definition, (ii)
synthesis or construction and (iii) analysis or verification.
The knowledge considered during design verification can
have two forms: it can be "embedded" in the experts'
minds, representing the experience acquired throughout
their profession; or it can be "explicitly" stated, i.e. elicited
and published, and available for consultation. The part of
the explicitly stated knowledge that was deliberately
formulated to restrict unacceptabledesign and/or to enforce
best design practice is denoted here by "regulatory design
knowledge". A body of statements that restricts designs
must be published and endorsed in order to be considered
as regulatory design knowledge and, commonly, its unity is
given by a specific application area, a specific purpose for
which it is developed and a certain degree of compliance
required from designs. Examples of bodies of regulatory
design knowledge include:
building guidelines (e.g.

14],

(15],

(16D

internal company standards(e.g., [17], [18], [19]);
design codes in health care (e.g., [20]); and
informal guidelines (e.g., [21], [22])
For further details refer to [8] and [5]. The examples in
the following sections are extracted from these bodies of
knowledge.

The part of design analysis/verification based on
regulatory design knowledge is denoted here by compliance
checking. A set of inter-linked computer-based tools or
systems, that together support the process of design
development represent an environment for semi-automatic
design development. Such an computer-basedenvironment
is viewed here as including at least two systems:
.one
for design synthesis or construction; this could
be a traditional CAD system, such as AutoCAD or
CAllA;
.one

for compliance checking

A computer-based system that can check/evaluate designs
against some bodies of regulatory design knowledge,
possibly requiring the intervention of human agents, is
called here a semi-automatic compliance checker or,
simply, a compliance checker. The architecture that is best
suited for a compliance checker is that of a knowledge
based system -embodying regulatory design knowledge
expressed declaratively -acting as a critic [23]. Such a
system is called a critiquing intelligent design assistant [8].
A body of regulatory design knowledge certainly
contains design rules and may also include domain
definitions. Design rules are provisions that constrain
particular designs. Informally, a design rule states that any
design that meets some specific design characterisation, is
required to satisfy some conditions. Hence they are clearly
ripe to be expressed as entailment in a logic. Domain
definitions are provisions that explicitly introduce design
characteristics or language elements (commonly domain
specific) necessary for the definition of design
characteristics. Not all the design characteristics employed
in the design rules of a body of regulatory design
knowledge are introduced by the body's domain
definitions; some are the subject of scientific, comrnonsenseor other domain knowledge. For simplicity, in the rest
of this paper, all the definitions required by a body of
design rules are denoted by the term "domain definitions".
For automatic compliance checking, the reasoning
carried out by experienced designers during compliance
checking must have an operational model, preferably based
on a formal model. The basic model of design compliance
adopted in this paper is that of a constrained database.
Given a body of design rules, a design together with the
required domain definitions is regarded or represented as a
database (DB) and the body of design rules as integrity
constraints on the respective database (IC). The design
complies with the design rules if and only if its
representation as DB satisfies IC. Accordingly, two
interrelated issues ought to be discussed in this context:
representation formalisms for DB and IC (or, designs and
regulatory design knowledge) and the definition of an
integrity constraint.

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

A body of regulatory design knowledge may be
represented in different knowledge representation
formalisms. However, this paper subscribes to the view
according to which "isomorphism" (e.g., refer to [24)) is a
crucial criterion in knowledge representation. Informally,
this criterion should be understood as requiring the
structures of the formal representations to be as close as
possible to the corresponding structures of the original
expressions. This provides for both better validation and
better maintenance of resulting knowledge bases [25] and
also for the reusability of the expressed/represented
regulatory design knowledge [8].

3. A Formal Model of Design Compliance in
FOL and its Operationalisation in "aiDA "
Consider a body of regulatory design knowledge R.
We will represent R in FOL as a union A=puO, where
P={Pl'...'Pn} represents a set of rules and 0 the required set
of domain definitions. A design D, from the area targeted
by R, will also be represented in FOL by r. Consider that
DB=r u 0. Assume that:

.negation is permitted in both the statementsof DE and
p -i.e., DE is a Datalog-' database[26] and each Pi
(l$i$n) is a POL denial. We will interpret negation
according to the closed world assumption (CW A) [29],
in which the negation of a ground atom a is accepted
as true if a cannot be inferred from the database).
Despite the fact that the cw A is beyond FOL, the above
two fonnal definitions are still maintained, becausemost of
the flfst-order framework of logic databases is still
applicable [30]. Moreover, they remain equivalent. The
CW A is a reasonableassumption for complete designs, but
it may generate a logical cacophony for incomplete
(developing) designs.
This fonnal framework can accommodate a large
variety of designs, design rules and domain definitions. For
example, consider the following design rules:
(1)

"The

stair

.each Pi (l~i~n) is a function-free and negation-free
denial, interpreted as an integrity constraint for OB.

complies with Pi iff
"logical entailment"

DBI=pj

be enclosed

..."

saddles

should

have a clasp at least at one

f-

stair(S)

" ground-storey(G)

A object(O)

" in(S,

A in(H, 0) A material(O,

recommended-wall-thickness(M,
-,((thickness-of-in(O,

f-

bounded-saddle(S)

G) " -,enclosed(S)

H) -length(O»

M) A

T) A
< T)

A

A positioned-at-end-of(S,

C)

(where "1=" denotes

in POL);

r complies with pj iff

should

Their respective representation in the form of denials is
given below:

-,(clasp(C)

.r

storey

end"

f- blind-hole(H)

Following the two standard definitions of an integrity
constraint on a logic database-via consistency [27] and via
entailment [28] -two definitions for the notion of design
consistency can be given. They are, respectively:

ground

(2) "Blind holes must leave at least the minimum
recommended wall thickness for the respective material
(3) "Bounded

DB is a Datalog database [26] (i.e., DB is a logic
databasewhose statementsare function-free Horn
clauses; recall that negation is not used within Horn
clauses);

in the

DBvpj is consistent.

They are equivalent under the above assumptions.
Obviously, in both cases,r complies with p iff r complies
with each Pi.
The assumptions made above are too restrictive for
the representation of regulatory design knowledge. Both
rules and definitions require both functions and negation.
Assume that:

where the definitions of the employed predicates were
assumedresolved in the set of domain definitions (recall the
simplifying assumption made for this paper that regulatory
design knowledge is free of ambiguities, vagueness and
open-texture). Note that the second rule uses functions
("thickness-of-in", "length" and "-") and the function "-"
(minus) and predicate "<" are used in their "natural" infix
notation.
The logic model introduced above leads to the
following definition basedon provability:
.rcomplies

.functions
are permitted in both DB and p, but they
have attached correct evaluation procedures (from the
point of view of the logical model, this is equivalent to
not using functions at all);

with

Pi iffDBuCWA(DB)

1- Pi

or, alternatively:
.r

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

violates

Pi iff

DBuCW

A(DB)

1- -'Pi

where "I-" denotes "deduction" in a sound and complete
formal deduction system of FOL (e.g., refer to [31)). This
definition provides a method for computing design
compliance. Accordingly, a design may violate a design
rule becauseof the existence of some false facts in DB or
due to the lack of some true facts from DB (the latter cause
is due to the CW A).
Prolog (e.g., refer to [32)) provides an implementation
for "I-", under the above representationassumptionsfor DB
and p, by operationalising negation as negation as finite
failure [33] and, thus, provides a readily available
operational model for the above definition of compliance.
aiDA usesProlog facts, rules and queries for the operational
representations of designs, domain knowledge and design
rules, respectively.
The above definitions clearly specify the notion of
compliance for completed designs. However, they provide
no guidance for what to do in case of violations and/or how
to enforce compliance. Moreover, verification tasks have to
be performed as early in the design process as possible, so
that potential errors or inconsistencies are discovered and
eradicated promptly [34]. Consequently, the notion of
compliance must be defined for partial/developing designs,
too. Aspects such as when to check for compliance during
the process of design development, how to react to
violations and how to enforce compliance are strongly
inter-linked. For the sake of completion, they were
mentioned here, but they are not further discussed in this
paper, but form the basis for a paper now in progress.
According to the view presented in this section,
design rules, regarded as equivalent to integrity constraints,
have the statusof true information about the design domain
(world). Any particular design together with the domain
knowledge, represented as a logic database,has the status
of a set of beliefs. Design rules are used to remove
situations where designs contain wrong beliefs or where
some true beliefs are missing from designs.
According to the definitions discussed here, all the
design rules are regarded as statementsof obligation -i.e.,
each design rule must be satisfied by a correct design. They
can be denoted as "hard'. However, many design rules of
real bodies of regulatory design knowledge are inherently
" soft" .One such class of structures is discussedbelow.

4. Duty and Contrary-to-Duty Design Rules
Following [11] a duty statement structure of a design
rule describes a primary obligation and a contrary-to-duty
(CTD) statementstructure describesa secondary obligation,
which comes into effect when the primary obligation is
violated. A brief set of examples of such structures is given
below.

(4) "Preferred design: uniform wall thickness should be used
...[However] When unavoidable [i. e. when walls must have
a different thickness] transition from one wall thickness to
another should always be as smooth as possible ..."
(5) "There must be an alternative
parts

of the building.

single

However,

route is acceptable

escape

routes

should

escape

route from all

in the following

[although,

ideally,

exist from all parts

situations

a

altemative

of the building]

..."

(6) '~ rest on a lower canine should be placed on the incisal
edge. " 'Tin circumstances
where the previous rule cannot be
satisfied]
cingulum

A rest on a lower canine should be placed
rest seat produced in composite. "

on a

The essentialduty and contrary-to-duty structure is:
5#1 : IF Condition1

s#2:

IF Condition1
Constraint1

THEN-SHOULD

[AND

Condition2]

THEN-SHOULD

Con5traint1

AND

NOT

Constraint2

where the text included in square brackets is optional and
Constraint] and Constrain~ are inconsistent.
In the context of nonns and exceptions [10], the nonn
is disregarded when an exception is applicable; the design
is "equally" compliant whether it is with respect to the
nonn or with an exception. However, in the context of a
CTD design rules, both the primary and the secondary
statementsare regarded as being applicable -i.e., intended
to hold -at the same time. The apparent conflict between
them is resolved by regarding the CTD rule as representing
a less desired or less ideal situation. For example (see (4)
above), a primary rule may state that "the walls of an object
have to have a unifonn thickness", on the basis of an ideal
machining requirement, whilst a secondary rule may
require that "if the walls ought to have different thickness,
then the transition between them should be smooth", on the
basis of a necessary, but " less ideal" safety requirement. If
a design violates the primary rule, it still pays the penalties
for the ignored machining principle behind it, even in the
case when it satisfies the secondary (safety) rule.
Conflicting primary and secondary obligations are
consistent only if the "belong together"; secondary
obligations may be inconsistent with conflicting
"unrelated" primary obligations [11].
CTD structures that "belong together" may express
different levels of ideality. They may be stated explicitly,
via qualifiers such as "excellent", "good" and
"satisfactory", or implicitly, via contrary-to-duty to
contrary-to-duty statements. An isomorphic fonnal
representation of such structures require some sort of
deontic logic. Standard deontic logic can accommodate the
representation of "one level" of CTD statements -i.e.
structures that do not contain CTD to CTD statements.

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

However, it cannot distinguish between various levels of
ideality [12]. A formal framework for the representation of
such structures is suggestedin [12]. The remainder of this
section outlines an operational model for the representation
of CTD design rules.
Consider that P={P1' P2' ..., P.} represents a set of
related cm rules (with PI as the primary statement and Pi
representing a CTD for Pi-t (l<i~n». The compliance of a
design r with P is here defined as follows.
In general, r complies with p if and only if it
complies with any pie p;
A more refined definition may be given in terms of a
measure or level of compliance, denoted here by ~.
Suppose that LI represents a set of values for levels of
ideality; e.g., LI can be { satisfactory , good, excellent }
The values of LI are ordered and the associated ..<"
operator reads .'less ideal". A mapping between P and
LI can be devised, say <p,such that for all i, 1<i~n,
-'{<P<Pi-J< <P<pJ).
Consider the following definition for ~:
~(r, p) = E, EELI, iff E=<p(pJand r is compliant
with Pi but not with Pi-l.
Then, r complies with p to the level of E iff
~(r, p)=E.
A "global" measure or level of compliance, i.e. for a
whole body of design rules, may be defined on the
basis of ~, based on some qualitative computations.
The measure of compliance may be employed in
determining the behaviour of critiquing intelligent design
assistants. For examples, different levels of interactions
between users and design assistantscan be associatedwith
different levels of compliance. Also, the measure of
compliance may be employed in the specification of design
requirements; e.g., "the design should be at least ideal with
respect to fire safety, good with respect to structure and
satisfactory with respect to sound protection.

Contrary-to-duty statementsact as back-ups to be applied
when it is impossible, or very inconvenient, to satisfy one
of the ordinary/ideal design rules. To deal with such
statements we have introduced notions of measures of
compliance. We believe that this representation framework
will prove fruitful in semi-automating the process of
dealing with contrary-to-duty statements in a multitude of
design applications. Towards this end we are presently
incorporating reasoning based on this formalisation in an
A!-based design assistant-aiDA.
A parallel paper [ 10] deals with another class of
difficult to represent sentence structures, namely that of
general rules and exceptions. In order to simplify the
arguments in the discussion of compliance, the present
paper and [10] assumed that designs are complete and
regulatory design knowledge consists of exact statements.
We are currently working on extending the notion of
compliance to incomplete/developing designs and also to
bodies of regulatory design knowledge which contain
ambiguities, vaguenessand open-texture. In this context we
are also considering issues such as when to check for
compliance, how to react to violations, how to enforce
compliance and, moreover, how to do all these in an
efficient manner.

6. References
[1 ]

[2]

[3]

[4]

5. Conclusions
In this paper we have discussed the problem of
incorporating reasoning about design rule compliance
within intelligent CAD tools. The general mechanism
involves representing both Designs and Regulatory Design
Knowledge in First Order Logic, and then to apply database
consistency checking techniques to ensure that the design
does not break any rules. Unfortunately, not all regulatory
knowledge fits easily into this framework. One of the
principal contributions of this paper was a discussion on the
representationof one class of difficult to represent sentence
structures that occur frequently in real-world regulatory
design knowledge: that of contrary-to-duty statements.

[5]

[6]

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

Fenves, S.J., et al., Computer Representations of
Design Standards and Building Codes: US
Perspective, 1995. The International Journal of
Construction Information Technology. 3(1): p. 13-34.
Robbins, J.E., Design Critiquing Systems. Technical
Report, UCI-98-41, Information and Computer
Science Department, University of California, Irvine,
1998.
Rehak, D.R. and L.A. Lopez, Computer Aided
Engineering Problems and Prospects. Technical
Report, SRS8 -Civil Engineering Standards,
Department of Civil Engineering, University of Illinois
at Urbana-Champaign, Urbana-Champaign, Illinois,
USA,1981.
Hammond, P. and J. C. Davenport. Eliciting and
modelling the design knowledge of multiple experts.
In Proceedings of Modelling languages for KBS.
Vrieje Universiteit, Amsterdam, 1995.
Ursu, M.F. and P. Hammond. Representing
Expressed Design Knowledge. In Proceedings of
Association for Information Systems 1998 Americas
Conference, AIS98. Baltimore, USA, 1998, p. 393395.
Ursu, M.F. Towards the Standardisation of Intelligent
Design Assistants. In Proceedings of 13th European
Conference on Artificial Intelligence -ECAI98.
Brighton, Sussex, UK: John Wiley & Sons, 1998, p.
104-105.

[7]

[8]

Kiliccote, H. and J.H. Garrett Jr, Standards Modelling
Language, 1998. Journal of Computing in Civil
Engineering. 12(3): p. 129-135.
Ursu, M. and P. Hammond, Expressing Regulatory

Design Knoweldge for Critiquing Intelligent Design
Assistants -Spatial Representations, in Artificial
Intelligence in Design 2000- AIDOO, J. Gero, Editor.
Kluwer Academic Publishers: Worcester, MA, USA,
2000. p. 103- 126.
[9]
Hammond, P. and J.C. Davenport. The RaPiD
Computer Aided Design of Dental Prostheses. In
Proceedings of AAAI '96, Spring Symposium Series,
AI in Medicine, 1996, p. 64 -68.
[10] Ursu, M.F. and R. Zimmer. Compliance in Critiquing

[23]

[24]

[25]

Intelligent Design Assistants: Isomorphic
Representation of General Norms and Exceptions.
Submitted to the Sixth International Conference on

[11]
[12]

[13]
[14]

[15]

[16]

[17]

[18]

[19]

[20]

[21]

[22]

Knowledge-Based Intelligent Information and
Engineering Systems. Crema, Italy, 2002.
Prakken, H. and M.J. Sergot, Contrary-to-Duty
Obligations, 1996.Studia Logica. 57(1/2): p. 91-115.
Prakken, H. and M. Sergot, Dyadic Deontic Logic
and Contrary-to-Duty Obligations, in Defeasible
Deontic Logic: Essays in Non-Monotonic Normative
Reasoning, D. Nute, Editor. Synthese Lybrary No
263, Kluwer Academic Publishers, 1997.
Suh, N.P., The Principles of Design: Oxford
University Press. 1990.
Building Regulations, Manual to the Building
Regulations, .1999, Her Majesty's Stationery Office:
London, UK.
Building Guidelines, Approved Document B -Fire
Safety, in The 1991 Building Regulations. 1992, Her
Majesty's Stationery Office: London, UK.
Building Guidelines, Approved Document M -Access
Facilities for Disabled People, in The 1991 Building
Regulations. 1992, Her Majesty's Stationery Office:
London, UK.
Xerox Standards, Design Handbook, in Multinational
Preferred. 1984, Xerox -internal document: New
York.
Xerox Standards, Metric Design -Metal Parts
Formed From Flat Stock, in Multinational
Producibility. 1982, Xerox -internal document: New
York.
Xerox Standards, Plastic Molded Parts, in
Multinational Producibility. 1987, Xerox -internal
document: New York.
Davenport, J.C., P. Hammond, and M.G.d. Mattos,
The Acquisition and Validation of Removable Partial
Denture Design Knowledge. II. Design Rules and
Expert Reaction, 1996. Journal of Oral Rehabilitation.
23: p. 811- 824.
Building Research Council, Kitchen Planning
Satndards. Council Notes -Circular Series, Index
No. C5 32, Vol. 12, No.1, College of Fine and
Applied Arts -University of Illinois, USA, 1994.
Glaze, G., J. Johnson, and N. Cross, Elicitation of
Rules for Graphic Design Evaluation, in Artificial
Intelligence in Design '96, J.S. Gero and F.

[26]

[27]

[28]

[29]

[30]

[31]

[32]
[33]

[34]

Proceedings of the Sixth International Conference on Information Visualisation (IV’02)
1093-9547/02 $17.00 © 2002 IEEE

Sudweeks, Editors. Kluwer Academic Publishers:
Dordrecht, The Netherlands, 1996. p. 527-540.
Fischer, G. and A. Morch. CRACK: A Critiquing
Approach to Cooperative Kitchen Design. In
Proceedings of ITS-88. Montreal, 1988, p.176.
Bench-Capon, T.J.M. and Coenen. Exploiting
Isomorphism: Development of a KBS to Suppott
British Coal Insurance Claims. In Proceedings of The
Third International Conference on Artificial
Intelligence and Law: ACM Press, Oxford, 1991, p.
62-68.
Prakken, H. and J. Schrickx, Isomorphic Models for
Rules and Exceptions in Legislation, in Legal
Knowledge Based Systems: Model Based Legal
Reasoning (Proceedings of JURIX'91 ), J.A.P .J.
Breuker, R. V. De Mulder, and J.C. Hage, Editors.
Koninklijke Vermande BV: Lelystad, 1991. p. 17-27.
Ullman, J.D., Principle of Database and KnowledgeBase Systems. Rockville, Maryland: Computer
Science Press, Incorporated. 1988.
Kowalski, R., Logic for Data Description, in Logic
and Data Bases, H.G.J. Minker, Editor. Plenum
Press: New York, 1978. p. 77-102.
Reiter, R., Towards a Logical Reconstruction of
Relational Database Theoty, in On Conceptual
Modelling, M.B.J.M.J. Schmit, Editor. SpringerVerlag: New York, 1984. p. 163-189.
Reiter, R., On Closed World Databases, in Logic and
Databases, H. Gallaire and J. Minker, Editors.
Plenum Press: New York, 1978. p. 55-76.
Godfrey, P., etal., Integrity Constraints: Semantics
and Applications (Chapter 9), in Logics for
Databases and Information Systems, J. Chomicki
and G. Saake, Editors. Kluwer, 1998. p. 265-307.
Scheurer, T., Foundations of Computing -System
Development with Set Theoty and Logic.
Wokingham, England: Addisson Wesley. 1994.
Bratko, I., PROLOG- Programming for Attificial
Intelligence: Addison-Wesley. 2000.
Clark, K.L., Negation as Failure, in Logic and
Databases, H. Gallaire and J. Minker, Editors.
Plenum Press: New York, 1978. p. 293-322.
Pahl, G. and W. Beitz, Engineering Design, a
Systematic Approach. London: Springer-Verlag.
1996.

