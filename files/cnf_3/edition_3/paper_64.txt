2009 13th International Conference Information Visualisation

The Security Aspects in Web-Based Architectural Design using SOA
Asadullah Shaikh
Research Group in Software Engineering
Universitat Oberta de Catalunya (Spain)
ashaikh@uoc.edu
Sheeraz Ali
Cursor Software Solutions (UAE)
sheeraz@cursorsoft.net

Aijaz Soomro
Department of Computer Science
University of Durham (UK)
a.a.soomro@dur.ac.uk

Nasrullah Memon
Maersk Mc-Kinney Moller Institute
University of Southern Denmark (Denmark)
and Hellenic American University Athens (GR)
memon@mmmi.sdu.dk

Abstract

considered as a preliminary stage of a development process,
therefore, if the designing of an architecture for a system is
planned to be secured, then it should not be a major problem to maintain the security during the implementation process. Apart from that, the current telemedicine web-based
applications are being widely used in the e-health care system [1,2], and out of them the majority of applications are
distributed due to the several placement locations. These
applications store the patient’s history, personal details etc,
which are quite confidential data. Nevertheless, there is
less attention paid to the security of these heterogenous
telemedicine web based applications[2]. Figure 1 refers to
a normal structure of a web application interaction based
on web services between the service provider and service
consumer applications.

Distributed web-based applications have been progressively increasing in number and scale over the past decades.
There is an intensification of the need for security frameworks in the era of web-based applications when we refer
to distributed telemedicine interoperability architectures. In
contrast, Service Oriented Architecture (SOA) is gaining
popularity day by day when we specially consider the web
applications. SOA is playing a major role to maintain the
security standards of distributed applications. This paper
proposes a secure web-based architectural design by using
the standards of SOA for distributed web application that
maintains the interoperability and data integration through
certain secure channels. We have created CRUD (Create,
Read, Update, Delete) operations that has an implication
on our own created web services and we propose a secure
architecture that is implemented on CRUD operations.
Keywords: SOA Security, web-based SOA Security,
SOA Security Aspects, SOA in CRUD, CRUD Security

1. Introduction
Service Oriented Architecture is gaining popularity day
by day due to the fact that it is useful for making interoperable web-based applications. The non-secure SOA based applications create many problems for different web based applications especially concerning the security aspects. However, security in enterprise applications has not been addressed consciously. In the present situation, the security
aspects in architectural designs are not considered until a serious problem occurs during the developmental stages that
violates the policy. Architectural designs are always being
978-0-7695-3733-7/09 $25.00 © 2009 IEEE
DOI 10.1109/IV.2009.83

Figure 1: Web Service Interaction

Considering all of above aspects, this paper proposes the
security aspects for our developed architectural design [3]
to address the security issues in order to provide a suitable
467
461

solution. To configure these security aspects correctly, we
took an account of several standards of security implementation of the web for multiple distributed applications and
therefore we decided to design an architecture that covers
the security measures which are necessary in the developmental process and that will also help developers. Our proposed secure architectural design is based on Public Key Infrastructure (PKI) security for authentication and authorization [13]. Furthermore, our security aspects have an implication on CRUD operations which are web-based services
that were implemented previously [3].

Figure 2: WS-Security Structure [4]

1.3. Security Problems

The rest of the paper is structured as follows. Section
1.1 introduces the concept of CRUD operations, section
1.2 defines the security using SOA and section 1.3 outlines
the security problems. Furthermore, Section 2 provides an
overview of web security in CRUD operations. Section
3 presents the proposed architecture. Later on, section 4
explains the experiments and results. Finally, section 5 is
about previous work related to SOA security and section 6
draws on some conclusions and future work.

WS-Security is quite flexible and capable, however, its
configuration in real time examples is difficult for users. So
far and to the best of our knowledge, the security for CRUD
operations used in web services has not been discussed sufficiently. Therefore the security aspects of the following
points are not considered:
• CRUD operations are developed in web services, and
so what should the security measurements be in order
to get patient data?

1.1. CRUD Operations

• CRUD operations are persistent storage functions that
are implemented in the form of web services [1], If the
patient data is updated, how can its authentication be
ensured?

Our previously designed telemedicine architecture is
based on SOA. We have implemented CRUD operations
as a basic application function in order to interact with the
database. These CRUD operations perform database operations such as data retrieval, data creation, data deletion
and data updation at an application level. Figure 3 briefly
describes the mapping of CRUD functions with database
operations.

• In the case of deleting a record, how can somebody be
authorized to do this?
This paper presents security aspects to handle security in
accordance with the CRUD operations that are implemented
and accessible as a web service.

2. WS-Security in CRUD operations

1.2. Security using SOA

CRUD is the combination of four basic operations: Create, Read, Update, and Delete which are used for permanent
storage[1], and are the major components of every computer
software application. Since data is the most important and
valuable in any web-based application, therefore it should
be transmitted securely. In our proposed work, we have
provided the security for our CRUD operations using WSSecurity.

The SOA approach is widely used to develop the several
components of web services. These services contain their
own security techniques [4]. WS-Security provides a communication protocol to apply the security of web services
[5]. It describes Simple Object Access Protocol (SOAP)
messaging to enable security services specially in terms of
integrity, message confidentiality and message authentication, and furthermore, it helps to provide encryption techniques. This kind of security provides a flexible design for
security models such as Secure Sockets Layer (SSL) and
Kerberos. Nevertheless, it provides security tokens, trust
domains, signatures and encryption technologies. In order
to exchange the secured messages using WS-Security, there
will be common tokens which should be shared between requester and provider. Figure 2 describes the general structure of WS-Security.

3. Proposed Architecture
In this section, we describe the proposed architecture of
our web services along with the CRUD security implementation. The major structure of the proposed process of SOA
security for CRUD operations is divided in two external interfaces; one interface is between the nurse and the application and the other interface is between the doctor and the

462
468

3.3. Security Measures for an Intruder
In the worst case scenario, the intruder can also try to attack our telemedicine application, therefore, what will happen initially if the intruder sends the operation message,
the SOAP message without encryption will be sent to a
telemedicine application to access the CRUD operations.
Afterwards, the security handler of a telemedicine application may decrypt the message with the doctor’s public
key but the decryption will fail and the message will be discarded.
Figure 3: List of CRUD Services with Security [1]

3.4. Security Implementation at Nurse’s
End

application. The flow of both interfaces is illustrated in Figure 4.

Authentication and Authorization (AA) at the nurse’s
end is performed in two levels. In the first level of security, the messages sent by nurse can only be accepted from
premium cell phone numbers that are registered in an application. In the second level of security, once the messages
are received, the telemedicine application sends a unique
code to the nurse for verification, and the nurse replies to
the message with the same code. The idea to introduce the
second level security is to ensure that the message was sent
from a premium number through a cell phone as the message can also be sent from Web2SMS or Web2MMS with
any number. Therefore, a nurse needs to send the reply for
verification in order to pass the secure data into CRUD operations.

3.1. Interface between Nurse and Application
Initially, the first operation that needs to be performed is
that the nurse sends the patient record to a telemedicine application from a cell phone with a premium phone number
registered in the application. Premium numbers are the special type of cell phone numbers that are designed especially
for telemedicine applications in order to process secure data
transmission from nurse end to doctor end. Secondly, an application sends a random unique code for verification to the
nurse end. Thirdly, the nurse replies for verification and finally, if the verification is performed successfully, then the
data will be processed (update or create) to CRUD operations.

3.5. Security Implementation at the Doctor’s End

3.2. Interface between Doctor and Application

We have developed the security implementation of
telemedicine system architecture [1] using Apache Axis
[10], which is an open source XML based Web Service
framework. We have used Apache Web Services Security for Java (WSS4J) [11] which is the implementation
of the OASIS Web Services Security (WS-Security) from
the Organization for the Advancement of Structured Information Standards (OASIS) Web Services Security Technical Committee (TC) [12]. WSS4J is used to sign and verify SOAP messages with WS-Security information. Furthermore, WSS4J is used for securing our CRUD web services along with the support of the Apache Axis web service framework. WSS4J generates and processes the SOAP
bindings for XML Security with XML Signature and XML
Encryption. It also provides the Tokens for username, timestamps and Security Assertion Markup Language (SAML)
tokens. The security of CRUD operations is deployed with
username tokens.
The configuration of the security deployment and usage is
described by the implementation given in listing 1 to 4.

In order to maintain the security for our telemedicine application, the following steps are undertaken in the case of
a doctor’s interaction with application.
1. The doctor selects a CRUD operation from the given
User Interface (UI) which will be in the form of a web
service. Afterwards, the running telemedicine application encrypts the message with a private key and then
the secure SOAP message with encryption will be sent
to the telemedicine application.
2. The security handler of a telemedicine application decrypts the message with the doctor’s public key.
3. The security handler checks certain permission given
to a particular doctor in order to select the CRUD operation to be performed.
4. CRUD operation is performed.

463
469

Figure 4: Proposed Security Architectural Design

In listing 1, the WSS4J handlers are added to the service
deployment descriptor in the Web Service Deployment Descriptor (WSDD) file for adding the WS-Security layer to
our telemedicine CRUD services. Afterwards, adding handlers, the server side deployment descriptor also defines the
request and response flows. In the Request Flow, with every
incoming request for a CRUD operation, there are two security handlers that authenticate and authorize the request.
The TeleWoundServiceSecurityHandler decrypts the SOAP
message with a public key of the Doctor using PKI security.
Once the message is decrypted, WSDoAllReceiver verifies
the username and password for authorization. Meanwhile,
in the Response Flow, every response is encrypted with the
doctor’s public key and the message is digitally signed for
authentication with the telemedicine’s private key.
In listing 2, PWCallback class is created by implementing the CallbackHandler interface. This CallbackHandler
is called before every CRUD operation request to check the
authorization of the provided username and password. If the
username and password exist in the application, then there
will be the verification of permission on the selected CRUD
operation. For example, the user has permission to access
the CRUD operation READ the record while CRUD operation UPDATE the record is not permitted, then PWCallback
class will not allow any action on UPDATE operation.
In Listing 3, TeleWoundServiceSecurityHandler class is
securing the message by encryption and decryption using
PKI security. Message is digitally signed to authenticate
the provider of the message. With every incoming CRUD
request, handleRequest() method is called to decrypt the
SOAp message with sender’s public key. Therefore, for every outgoing response, handleResponse() is called for encrypting the SOAP message and to digitally sign the mes-

sage.
In Listing 4, Deployment Description for client side is
provided to handle the Request Flow of a SOAP message.
Client receives the response from TeleWound application as
an encrypted soap message. This encrypted soap message
is decrypted using the public key of TeleWound and after
that the result of the CRUD operations are extracted from
the normal decrypted soap message.
L i s t i n g −1
<d e p l o y m e n t xmlns = h t t p : / / xml . a p a c h e . o r g / a x i s / wsdd / xmlns : j a v a =
” h t t p : / / xml . a p a c h e . o r g / a x i s / wsdd / p r o v i d e r s / j a v a”>
<s e r v i c e name =” TeleWound−wss−01” p r o v i d e r =” j a v a : RPC” s t y l e =
” document ” u s e =” l i t e r a l ”>
<r e q u e s t F l o w>
<h a n d l e r t y p e =” j a v a : o r g . a p a c h e . a x i s . h a n d l e r s . JAXRPCHandler”>
<p a r a m e t e r name =” s c o p e ” v a l u e =” s e s s i o n ”/>
<p a r a m e t e r name =” c l a s s N a m e ” v a l u e =” T e l e W o u n d S e r v i c e S e c u r i t y H a n d l e r ”/>
<p a r a m e t e r name =” k e y S t o r e F i l e ” v a l u e =” c:\\TeleWound\\key\\s e r v e r . k s ”/>
<p a r a m e t e r name =” t r u s t S t o r e F i l e ” v a l u e =” c:\\TeleWound\\key\\s e r v e r . t s ”/>
<p a r a m e t e r name =” c e r t E n t r y A l i a s ” v a l u e =” c l i e n t k e y ”/>
</h a n d l e r>
<h a n d l e r t y p e =” j a v a : o r g . a p a c h e . ws . a x i s . s e c u r i t y . WSDoAllReceiver”>
<p a r a m e t e r name =” p a s s w o r d C a l l b a c k C l a s s ” v a l u e =” PWCallback”/>
<p a r a m e t e r name =” a c t i o n ” v a l u e =” UsernameToken”/>
</h a n d l e r>
</r e q u e s t F l o w>
<r e s p o n s e F l o w>
<h a n d l e r t y p e =” j a v a : o r g . a p a c h e . a x i s . h a n d l e r s . JAXRPCHandler”>
<p a r a m e t e r name =” s c o p e ” v a l u e =” s e s s i o n ”/>
<p a r a m e t e r name =” c l a s s N a m e ” v a l u e =” T e l e W o u n d S e r v i c e S e c u r i t y H a n d l e r ”/>
<p a r a m e t e r name =” k e y S t o r e F i l e ” v a l u e =” c:\\TeleWound\\key\\s e r v e r . k s ”/>
<p a r a m e t e r name =” t r u s t S t o r e F i l e ” v a l u e =” c:\\TeleWound\\key\\s e r v e r . t s ”/>
<p a r a m e t e r name =” c e r t E n t r y A l i a s ” v a l u e =” c l i e n t k e y ”/>
</h a n d l e r>
</r e s p o n s e F l o w>
<p a r a m e t e r name =” s c o p e ” v a l u e =” a p p l i c a t i o n ”/>
<p a r a m e t e r name =” c l a s s N a m e ” v a l u e =” TeleWound”/>
<p a r a m e t e r name =” a l l o w e d M e t h o d s ” v a l u e =” C R U D I n s e r t P a t i e n t R e c o r d ”/>
<p a r a m e t e r name =” a l l o w e d M e t h o d s ” v a l u e =” C R U D U p d a t e P a t i e n t R e c o r d ”/>
<p a r a m e t e r name =” a l l o w e d M e t h o d s ” v a l u e =” C R U D D e l e t e P a t i e n t R e c o r d ”/>
<p a r a m e t e r name =” a l l o w e d M e t h o d s ” v a l u e =” C R U D G e t P a t i e n t R e c o r d ”/>
</ s e r v i c e>
</d e p l o y m e n t>

L i s t i n g −2
p u b l i c c l a s s PWCallback{
public void handle ( Callback [ ] c a l l b a c k s ) throws
IOException , UnsupportedCallbackException {
f o r ( i n t i = 0 ; i < c a l l b a c k s . l e n g t h ; i ++) {
i f ( c a l l b a c k s [ i ] i n s t a n c e o f WSPasswordCallback ) {
W S P a s s w o r d C a l l b a c k pc = ( W S P a s s w o r d C a l l b a c k ) c a l l b a c k s [ i ] ;
/ / s e t t h e password given a username
i f ( ” T e l e M e d i c i n e A d m i n ” . e q u a l s ( pc . g e t I d e n t i f i e r (){
/ / s e t the password
}}
e l s e{

464
470

the column Encryption + Signature describes the encrypted
CRUD data along with the signature, however, the column
Security Type shows the type of security implemented on
prescribed actor depending on permissions. Finally, the column Decryption displays the patient’s decrypted data if and
only if all the security steps become successful and the column Receiving Message(Decode) shows a message once the
decryption has failed or passed. All these results provide an
overview of our developed security over CRUD operations.

t h r o w new U n s u p p o r t e d C a l l b a c k E x c e p t i o n ( c a l l b a c k s [ i ] , ” U n r e c o g n i z e d C a l l b a c k ” ) ;
}}}

L i s t i n g −3
Public c l a s s TeleWoundServiceSecurityHandler implements Handler {
p r i v a t e S t r i n g k e y S t o r e F i l e , keyStoreType , keyStorePassword ,
keyEntryAlias , keyEntryPassword , t r u s t S t o r e F i l e ,
trustStoreType , trustStorePassword , certEntryAlias ;
p u b l i c boolean handleRequest ( MessageContext c o n t e x t ) {
try {
SOAPMessageContext s o a p C o n t e x t = ( SOAPMessageContext ) c o n t e x t ;
SOAPMessage s o a p M e s s a g e = s o a p C o n t e x t . g e t M e s s a g e ( ) ;
Document doc = S O A P U t i l i t y . toDocument ( s o a p M e s s a g e ) ;
U t i l i t y . d e c r y p t ( doc , k e y S t o r e F i l e , k e y S t o r e T y p e ,
keyStorePassword , keyEntryAlias , keyEntryPassword ) ;
U t i l i t y . v e r i f y ( doc , t r u s t S t o r e F i l e , t r u s t S t o r e T y p e ,
trustStorePassword );
U t i l i t y . c l e a n u p ( doc ) ;
s o a p M e s s a g e = S O A P U t i l i t y . toSOAPMessage ( doc ) ;
soapContext . setMessage ( soapMessage ) ;
} c a t c h ( E x c e p t i o n e ){
System . e r r . p r i n t l n ( ” h a n d l e R e q u e s t E x c e p t i o n : ” + e ) ;
return false ;
}
return true ;
}
p u b l i c boolean handleResponse ( MessageContext c o n t e x t ) {
try {
SOAPMessageContext s o a p C o n t e x t = ( SOAPMessageContext ) c o n t e x t ;
SOAPMessage s o a p M e s s a g e = s o a p C o n t e x t . g e t M e s s a g e ( ) ;
Document doc = S O A P U t i l i t y . toDocument ( s o a p M e s s a g e ) ;
U t i l i t y . s i g n ( doc , k e y S t o r e F i l e , k e y S t o r e T y p e ,
keyStorePassword , keyEntryAlias , keyEntryPassword ) ;
U t i l i t y . e n c r y p t ( doc , t r u s t S t o r e F i l e , t r u s t S t o r e T y p e ,
trustStorePassword , certEntryAlias );
s o a p M e s s a g e = S O A P U t i l i t y . toSOAPMessage ( doc ) ;
soapContext . setMessage ( soapMessage ) ;
} c a t c h ( E x c e p t i o n e ){
System . e r r . p r i n t l n ( ” h a n d l e R e s p o n s e E x c e p t i o n : ” + e ) ;
return false ;
}
return true ;
}
p u b l i c boolean h a n d l e F a u l t ( MessageContext c o n t e x t ) {
return true ;
}
public void i n i t ( HandlerInfo config ) {
Map c o n f i g P r o p s = c o n f i g . g e t H a n d l e r C o n f i g ( ) ;
keyStoreFile = ( String ) configProps . get (” keyStoreFile ” ) ;
keyStoreType = ( S t r i n g ) configProps . get (” keyStoreType ” ) ;
keyStorePassword = ( String ) configProps . get (” keyStorePassword ” ) ;
keyEntryAlias = ( String ) configProps . get (” keyEntryAlias ” ) ;
keyEntryPassword = ( S t r i n g ) configProps . get (” keyEntryPassword ” ) ;
t r u s t S t o r e F i l e = ( String ) configProps . get (” t r u s t S t o r e F i l e ” ) ;
trustStoreType = ( String ) configProps . get (” trustStoreType ” ) ;
trustStorePassword = ( String ) configProps . get (” trustStorePassword ” ) ;
certEntryAlias = ( String ) configProps . get (” certEntryAlias ” ) ;
}}

Actor

Nurse
Doctor
Intruder

CRUD
Operations
(Encode)
Create,Update
Patient Record
Update,Delete,Read
Patient Record
Create,Update,Delete
Read,Patient Record

CRUD Data

Encryption +
Signature

Security Type

Decryption

Patient Data

N/A
BN89bOi +
978654
Any Encryption
or Signature

Premium Number
+Verification Code
PKI Encryption+
Digital Signature
Invalid PKI Encryption
+Digital Signature

N/A

Patient Data
Patient Data

Patient Data
No Data Received
due to wrong
Encryption
+ Signature

Receiving
Message
(decode)
1. Patient Record
2. Verification Code
CRUD Operation
Perfomed
CRUD Operation
Failed

Table 1: Results of proposed security Architecture

5. Related Work
In this section, we discuss the existing work on SOA Security. Most of the work in this area is done for SOA security specification. Their goal of implementing the security
is to achieve the authentication, authorization and so on for
web services. However, research work on the CRUD operations using WS-Security is hardly found in the literature.
Phan, Cecilia [6] addressed the security challenges for
SOA. The author described the problems raised from XML
which is not secure enough and causes problems in security protocol. They also presented certain strategies to cope
with vulnerabilities against attacks and other security policy
consideration.
Larrucea[7] proposed an approach describing a holistic view of a SOA environment. In this research, ISOAS
framework allows functionality criterions of security policies with service specification that allows the definition of
functional and non functional components in coherent way
and is dependent on the metamodel. This effort is implemented in Eclipse, and it is due to that, that it is an open
approach. Apart from that, their approach is aligned with
OMG standards.
Satoh F et al. [8] discussed a process of security configuration that defines the responsibilities of developers. In
this end-to-end SOA security configuration, several kinds
of information are needed such as requirements, platform
information and so on. Due to that, they defined the roles
of developers during the development phase. SOA security
is complex therefore the domain federation is considered in
this research. In general, they contribute to the correct configuration to reduce the workload of developers.
Robert Bunge et al. [9] proposed an operational framework of a network administrator using SOA network secu-

L i s t i n g −4
<d e p l o y m e n t xmlns =” h t t p : / / xml . a p a c h e . o r g / a x i s / wsdd / ”
j a v a =” h t t p : / / xml . a p a c h e . o r g / a x i s / wsdd / p r o v i d e r s / j a v a”>
<t r a n s p o r t name =” h t t p ” p i v o t =” j a v a : o r g . a p a c h e . a x i s .
t r a n s p o r t . h t t p . HTTPSender”>
<g l o b a l c o n f i g u r a t i o n>
<r e q u e s t F l o w>
<h a n d l e r t y p e =” j a v a : o r g . a p a c h e . a x i s . h a n d l e r s . JAXRPCHandler”>
<p a r a m e t e r name =” s c o p e ” v a l u e =” s e s s i o n ”/>
<p a r a m e t e r name =” c l a s s N a m e ” v a l u e =” T e l e W o u n d S e r v i c e S e c u r i t y H a n d l e r ”/>
<p a r a m e t e r name =” k e y S t o r e F i l e ” v a l u e =” c:\\TeleWound\\key\\s e r v e r . k s ”/>
<p a r a m e t e r name =” t r u s t S t o r e F i l e ” v a l u e =” c:\\TeleWound\\key\\s e r v e r . t s ”/>
<p a r a m e t e r name =” c e r t E n t r y A l i a s ” v a l u e =” c l i e n t k e y ”/>
</h a n d l e r>
</ g l o b a l c o n f i g u r a t i o n>
</ t r a n s p o r t>
</ t r a n s p o r t>

4. Experiments and Results
In this section, we present the environment in which the
experiment examines the assumptions that are needed to
maintain the consistency and dynamics of the proposed security architecture. Table 1 summarizes the experimental
results obtained by implementation of our proposed technique. Furthermore, the column Actor, represents an actor
which is the user of the telemedicine application, and the
column CRUD Operations(Encode) describes the operation
called by an actor that depends upon certain rights. Similarly, the column CRUD Data shows the patient’s data, and

465
471

rity. In this research, they characterize the steps in SOA network security in order to collect the information regarding
threats and SOA deployments. Furthermore, they collect
the SOA security efforts. As a result, by considering the
factors of SOA network security, they provide recommendations for dealing with the XML network traffic for SOA
applications. The proposed approach is filtered to inspect
XML at the network’s level. Their framework contributes to
secure SOA design by clarifying the duties of network administrators and software engineers using XML-based services.
Yamany H, Capretz M [4] described an intelligent security service that is embedded in a framework to secure
web services in SOA. This framework is designed to interact with authentication to run the authentication process and
it also helps to secure a possible web attack. An SOA environment holds several security environments that interact
through multiple channels. In their work, they have examined the security service layer and message security layer.
All the above work presented so far is not similar to
ours, because of implementing security over CRUD operations. If the CRUD operations are secured enough, then
there is no need to apply high level security which is a definitely a complex task. Our CRUD operations are interacting
with created web services, therefore if we apply the security on CRUD, the web-service will also be secured simultaneously. However, we have designed and implemented a
system architecture that represents the scenario of security
standards by considering CRUD operations along with web
services.

[2] W.M.Omar and A.Taleb-Bendiab, SOA for e-health
support services based on grid computing, Proceedings
of the IEEE International Conference on Services Oriented.
[3] Asadullah Shaikh, Muniba Memon, Muhammad Misbahuddin , Nasrullah Memon. The Role of Service Oriented Architecture in Tele-Medicine Healthcare System. IEEE Computer Society, 2009. s. 208-213. CISIS
2009, IEEE Computer Society, Fukuoka, Japan.
[4] Yamany, H, Capretz, M,. Use of Data Mining to Enhance Security for SOA. 978-0-7695-3407-7 IEEE.
Third International Conference on Convergence and
Hybrid Information Technology, 2008. ICCIT ’08.
[5] Bob Atkinson, Giovanni Della-Libera, Satoshi Hada
et al. Web Services Security (WS-Security). Copyright 2002-2002 International Business Machines
Corporation, Microsoft Corporation. [Online] Available:
http://www.cgisecurity.com/ws/ws-secure.pdf.
[Accessed April. 3, 2009].
[6] Phan, Cecilia. Service Oriented Architecture (SOA) Security Challenges and Mitigation Strategies. 29-31
Oct. 2007 Page(s):1-7 IEEE Computer Society.
[7] Larrucea, X, Alonso, R. ISOAS: Through an independent SOA Security Specification. ICCBSS 2008,
Page(s):92-100 IEEE Computer Society.
[8] Satoh F et al. Methodology and Tools for End-to-End
SOA Security Configurations. 2008. IEEE Congress on
Services - Part I. On page(s): 307-314 IEEE Computer
Society.

6. Conclusions and Future Work

[9] Bunge R, Chung S, Endicott-Popovsky B, McLane D.
An Operational Framework for Service Oriented Architecture Network Security. Proceedings of the 41st Annual Hawaii International Conference on System Sciences, Page(s):312-312 IEEE Computer Society.

In this work, we have proposed an architectural design
by considering the security aspects for our designed CRUD
operations using SOA. We believe that SOA has multiple
solutions of web services. The core use of CRUD operations is to fetch, update, delete, read the data from a perspective database, therefore if CRUD is secure enough, then
there is no such need to implement the high level security. In our designed architecture, communication is done
through SOAP messages and we have implemented WSS4J
and PKI security in order to protect SOAP headers. It creates the efficiency of the security process and prevents web
attacks. As a future work, we would like propose the efficient security techniques using cloud computing.

[10] Apache
Axis,
[Online]
Available:
http://ws.apache.org/axis/. [Accessed April.3,2009].
[11] Apache
WSS4J,
[Online]
Available:
http://ws.apache.org/wss4j/. [Accessed April.3,2009].
[12] Organization
for
the
Advancement
of
Structured
Information
Standards,
[Online]
Available:
http://www.oasisopen.org/committees/tc home.php?wg abbrev=wss.
[Accessed April.3,2009].

References
[1] Asadullah Shaikh, Muniba Memon, Muhammad Misbahuddin, A System Design for a Telemedicine Health
Care System. IMTIC 2008, CCIS 20, pp. 295-305,
2008. Springer-Verlag Berlin Heidelberg 2008.

[13] X.509
Technical
Supplement,
[Online]
Available:
http://msdn.microsoft.com/enus/library/aa480610.aspx. [Accessed April.3,2009].

466
472

