2009 13th International Conference Information Visualisation

The Storage, Retrieval, and Visualization of Biological Pathway Data
Evan P. Boswell1, John T. Wessler1, Urska Cvek1,2, Marjan Trutschl1,2
Department of Computer Science, Louisiana State University Shreveport
2
Center for Molecular and Tumor Virology, Louisiana State University Health Sciences Center
{boswelle60, wesslerj57, ucvek, mtrutsch}@lsus.edu
1

group, and subsequent layers serve to organize the
enzymes into well-defined subgroups. Without additional
preprocessing, this approach can lead to skewed results
for clustering and other data mining algorithms. If, for
example, each of these three layers (dimensions) were
given equal weights as per default scenario, the result
would skew the importance of the first dimension against
the rest of the data of interest. This has to be addressed
during preprocessing and we achieve it by reorganizing
the data thus creating new data sets and displaying them
visually.

Abstract
Biological pathways are key to the existence of all life
forms. They illustrate how organisms can take one or
more molecules and utilize them in such a way that yields
products which can be crucial to it sustaining life. It is
rare that these are one or two step procedures or very
linear mechanisms. Typically, pathways are multi-stepped
occurrences with many key intermediates. This complexity
can make them difficult to read and properly understand.
We present a system in which we store and utilize pathway
data to programmatically create user-friendly and
informative visualizations.

2. Background and Related Work

Keywords---Pathways, visualization, graph.

Our work is based on the data provided by the Kyoto
Encyclopedia of Genes and Genomes (KEGG) [1]. A
number of tools and approaches have utilized KEGG as
the main source of data, such as [2, 3]. The files were
downloaded from the KEGG FTP [4] site in a tabular
(flat) text format. Downloaded files are linked together by
a loose reference assuming a file name and the presence
of an identification number in the referenced file. To
make this data usable for our project, we first familiarized
ourselves with the file structure and the content of
downloaded data files. Later, we selected a subset of data
and created a relational database using MySQL [5]
relational database system.
KEGG is organized into sections covering Compounds
(molecules), Genes, Enzymes (proteins), Drugs,
Reactions, Reactant Pairs, Diseases, Orthologies,
Organisms (bacteria, animals, and plants) and finally,
Pathways. The data is internally linked in a relational
fashion, although the users have access only to tabular,
non-relational data. Pathways are specific to the organism
of interest and are directly made up of reactions. These
reactions use enzymes coded by gene sequences to
catalyze the conversion of molecules into new molecules
and are defined by their reactants and products. The
database offers many relations to be explored. We provide
a subset of its facets that can aid visualization and visual
exploration. Compounds include information on
molecular structure, drawing instructions, and a list of
names associated with the different locales. Enzymes
include data for the compounds that are their cofactors

1. Introduction
In general, pathways are networks of interactions that
take place in biological processes. These interactions are
nearly synonymous with chemical reactions taking place
inside of cells. Information concerning the pathway alone
is very complex and in some instances restricting. It is
difficult to perceive the pathway in its entirety without
some form of visual aid. Typically, visualizations of
biological pathways are static and created manually,
which consumes vast amounts of time. Even then, the user
may also require additional information regarding the
pathway or its members which is not available unless the
system is interactive. Life scientists have been working
with large undirected graphs that contain the interactions
among thousands of nodes. Although several tools exist
that provide visual layout of the pathways, there is still a
need for an acquisition and visualization interface that
would provide the user with optimal amounts of
information interaction and an algorithmically defined
way of creating visualizations “on the fly”.
The Kyoto Encyclopedia of Genes and Genomes
(KEGG) is the leading database containing biological
pathways [1]. The complex data is freely available to
researchers with downloaded data in tabular format
containing a limited hierarchy. For example, enzymes
have been placed into a three-layer classification system,
where the first layer gives the generalized function for the
978-0-7695-3733-7/09 $25.00 © 2009 IEEE
DOI 10.1109/IV.2009.63

301

database to a variety of end-user applications. Our
database approach allows the data to be accessed in a
wide array of methods, exceeding those provided by
KEGG. These methods include the visualization outlined
in this paper, application programming interface, creation
of datasets, and web-enabled applications. Most
importantly, this system allows for enhancement of our
algorithms in the future. Using the toolkit built on top of
the database, we access the data in an object-oriented
manner, making programming for the system rapid as
well as intuitive.
From here, we programmatically download the KEGG
data, parse it, and store it in our relational database
(Figure 1). The underlying mechanism for retrieval calls
Perl scripts, utilizing system command line tools to
retrieve data from the KEGG FTP website and to
uncompress the data into a local file system. Due to it size
(100GB+ of data available), downloading the data may
take a few hours. The scripts then call specially written
command line parsers, which ensure the homogeneity and
insert each data object into the MySQL database by
means of stored procedure calls. The parsers rely on many
factors including network latency, database response time,
and disk read time. Updates in the KEGG database are
reflected in our system by executing the scripts to update
the data.

and associations between organisms and gene motifs
yielding enzymes. Some reactions provide a template in
which a group of compounds could be a candidate for a
substrate. For genes, it provides the amino acid and
nucleotide sequences. Diseases and drugs provide
information about the genes, enzymes, compounds, and
pathways with which they are associated.
Previous pathway visualization systems include
Ingenuity [6], GeneSpring, Cytoscape [7] and VisANT
[8]. Even though these are very powerful systems that can
provide a wealth of information, they are not as intuitive,
interactive and customizable. The systems do not support
automatic positioning of nodes according to the
biomedical metadata and require lots of manual
intervention (Cytoscape). In many cases, visualizations of
larger graphs suffer from data overload, leading to
cluttered visualizations in need of a better data
representation in an easy-to-understand format. While the
information to be conveyed should be maximized, not all
of it has to be immediately visible. Concealing the data or
information hiding is one of the ways to create expressive
visualizations of complex data sets, in addition to the
overview+detail and focus+context techniques [9]. By
displaying parts of the data pertinent to the task, we can
create more informative visual displays and at the same
time provide for access to the underlying data.
The goal of this project is to acquire biological pathway
information from the database and display it in an intuitive
and informative visualization. There is no shortage of
software that attempts to package the information
encapsulated in biological pathways. Each package
provides a unique way of displaying information,
however, majority of them exhibit lack of interactivity and
have limited visualization. Using the application approach,
we use the Web to obtain the data to be stored in a local
database; we create visualizations and interactions with
the data based on the system; and provide for a more
intuitive workflow.

3. Description of the System
Our system comprises of three primary functions:
retrieval of remote (KEGG) data set and its storage in the
local database, retrieval of the data from the local
database, and visual representation of the data.
Figure 1: Program structure diagram

3.1 Database: Creation and Structure

All database interactions are handled through stored
procedures. Stored procedures were chosen because they
minimize bandwidth usage and provide for caching,
increasing response times by the server. Typically, initial
queries of the database yield thousands of data items. We
mitigate this by decreasing database response latencies
between successive function calls. With stored
procedures, we are also able to ensure security and data
integrity
while
minimizing
redundancies
and

We built a local MySQL relational database based on
the data available from KEGG. Database tables are created
with sensible, human-readable names and normalized to
increase the versatility and extensibility of the system.
Entries in the database are arbitrarily integer-indexed, but
provide information, which can be used to link the data to
KEGG or a number of other databases. Figure 1 shows
the structure of the program from accessing the KEGG
302

pathway would contain twenty-three nodes.
Reactants and products define reactions. Graph edges
connect two nodes if at least one product from the
reaction represented by the first node is used as a reactant
in the reaction represented by the second node. Consider
the following two reactions:

inconsistencies. Besides increased response time, using a
system like this allows us to change the structure and
design of the database without any effect on visualization
algorithms.
We wrote a library for accessing the data on top of the
database. The library automates interaction with the
database, making it easier for both novice and seasoned
programmers to adopt this platform. The data retrieved
from the database is used to populate objects, providing
for desired level ob abstraction.

(a) Acetaldehyde + NAD+ + H2O Ù Acetate + NADH + H+
(b) ATP + Acetate + CoA Ù AMP + Pyrophosphate +AcetylCoA

3.2 Accessing the Local Database

If these reactions were visualized, the node
representing the first reaction (a) would have an edge
pointing to the node representing the second reaction (b)
because acetate is a molecule that is a product of the
former and a reactant of the latter. Additionally, the
“ReactionType” attribute included in the dataset indicates
whether or not each reaction is reversible. If it is, we also
have to consider the molecules defined as products to be
potential reactants and for reactants to be potential
products. Thus, we have to look at all possible
combinations of reactants and products if the reactions are
reversible. Because both of these reactions are reversible,
there must also be an edge between nodes (a) and (b),
since acetate could be the product of the second reaction
and a reactant in the first reaction.
The reversibility of reactions is not expressed on the
graph; however, the more important property partially
obtained through the reversibility property (when a
reaction can lead to another reaction) is expressed through
drawing of the edges between nodes. If there is an edge
between two nodes, we get no sense of the order between
the two reactions. To establish this the visualization
utilizes solid and dashed lines for the edges.

Once the program is executed, the user has the option
to open a data file or to acquire the data from the local
database. If the user selects the database option,
credentials have to be entered first, followed by the query
sent to the database. Retrieval of information is possible
through SQL queries and simple search procedures
enabling users to query specific pathways and organisms
without having to have any previous knowledge or
experience with SQL.
After the user performs a query, the text of that query
will appear in a single line in a box beneath the searching
area. If this line is then clicked, an additional window will
appear showing the results of the query. Multiple queries
can be performed, and their results are all selectable from
this box. From here, it is possible to write the results to a
file with a user-specified delimiter or transfer them
directly into the core visualization program. Regardless of
what pathway the user searches, the attribute entitled
“ReactionDefinition” must be included in the results. This
is the key attribute required when building the subsequent
visualization. The attribute titled “ReactionType” is also
heavily desired, but it is not required to create the
visualization. With the simple searching for organisms and
pathways this is not a concern; all fields required for
proper visualization are automatically included in the
search results.

A solid line originating at a node implies that there is
something that is produced in that reaction that can be
used in the reaction represented by the node to which it is
pointing. If the solid line continues all the way to the
second node, it means that the reaction represented by the
second node produces something that the first node's
reaction can use. On the other hand, if the solid line from
the first node is interrupted at its halfway point by a
dashed line that continues to the second node, it means
that the second reaction cannot produce anything for the
first reaction. In other words, a completely solid line
represents a two-way interaction between reactions, and a
half solid and half dashed line means a one-way
interaction.
The positioning of nodes representing reactions is
based on the initially layout on a circle. A force-directed
algorithm is utilized to adjust their positions. The forcedirected placement algorithm [10, 11] is one of the most
common algorithms for the guided placement of data

3.3 Visualization
Queries directed at the database return two-dimensional
datasets, and due to the nature of a query, multiple
organisms and/or pathways could be returned within a
single dataset. Once the dataset is read, it is automatically
searched for the presence of additional pathways and
organisms. If more than one is found, the initial dataset is
partitioned into sub-datasets, one for every pathway for
every organism. Selection of the pathway and organism is
available at anytime through the visual interface.
Pathways are visualized as a series of nodes and edges.
Each node represents an individual reaction within that
pathway. For example, the pathway of glycolysis in the
organism Caenorhabditis elegans contains twenty-three
unique reactions. Thus, the visualization for this particular
303

the visualization with the exception of those connected to
the selected node. As the number of reactions increases,
the number of edges between the reactions’ nodes is
likely increased due to the numerosity principle. It is
expected to find large numbers of edges in large
pathways. While these edges are important, they may
clutter the visualization and have negative impact on
understanding of the pathway being displayed. It is in
these cases that edge-cleanup is most useful since it
reduces the number of edges to those important to what is
currently in focus.
It is also important to note that all biological and
graphical information pertaining to each pathway is stored
in objects. Storing graphical information such as node
positions, size, color, connectivity, etc. allows for quickly
switching between viewed pathways. Switching any of
these properties requires a minimal amount of
computations since nearly everything has already been
precomputed and stored in memory.

nodes and has been utilized in several graph layouts [12].
Such algorithms utilize a “spring force” approach as
specified by Hooke’s law. Our algorithm is similar to this
approach, with some modifications.
Although our initial placement may be somewhat
arbitrary, the nodes are the rearranged so that subsequent
algorithms function properly. If they were all initially in a
straight line, the algorithm would simply rearrange the
nodes, but they would all remain on the line. This is
because the force-directed algorithm considers the vectors
between each pair of nodes. Whenever a force is applied
from one node on another, the same vector is maintained,
but the magnitude of that vector is adjusted.
This visualization also utilizes the number of “hops” it
would take to get from a molecule in one reaction to a
molecule in another reaction to determine how close or far
away two nodes are from each other. A greater number of
“hops” implies that two nodes are not “closely related”
and should therefore be placed far from each other. The
number of hops from one node to all of its neighbors is
also shown by coloring the nodes by a color scale applied
to the total number of “hops.” Our algorithm first places
all nodes and then scales their positions to fit within the
viewing frame.
The node overlap that is obtained is handled through an
intelligent “jittering” algorithm. Every node is looked at
individually after the force-directed algorithm has taken
its course, and the algorithm searches for other nodes
within a predetermined distance from the source node. If
so, the offending nodes are pushed along the same vector
from the source node they were already on to a distance
from the source node outside of the threshold. Since it is
possible to push one node into another node's “space”, the
jittering algorithm is defined recursively. This implies that
as the source node exerts its push onto other nodes, the
other nodes are also treated as source nodes in their own
rights and subsequently exert their own push against those
in their new neighborhood. Thus, everything stabilizes
from the original source node before switching to the next
node.
Node selection displays information about the reactions
to the user. This information can include reaction name,
reaction definition, reversibility, gene ids, and more. The
information is hidden from the user until it is requested
through the visualization. Once the user selects a
particular node, all the nodes are colored based on a color
scale of choice [13]; the color of each non-selected node
represents the number of hops away from the selected
node. Thus, a node that is only one hop away from the
selected node should be colored very similarly to the
selected node. On the other hand, a node that is multiple
hops away will have a color that is on the opposite side of
the color scale while nodes not connected to the selected
node are grayed out.
Additional visualization options include node size and
shape, line width and style, and an edge-cleanup option.
Edge-cleanup allows the user to remove all of the edges in

3.4 Technologies Used
Our interface was built using C++ programming
language and Trolltech’s Qt libraries [14]. Both the
pathway visualization and database querying aspects of
this project have been built into LABiVis, a data
visualization package under development.

4. Evaluation
One of our main goals was to minimize clutter while
maximizing the intrinsic dimensionality of visualizations.
We minimize clutter in our visualizations and provide
interactivity, when compared to other pathway
visualization applications. One should also notice the data
that has been presented by direct and symbolic
representation.
We present examples of the glycolysis pathway in two
organisms and a citrate cycle in Homo sapiens. Figure 2
illustrates the glycolysis pathway found in nematodes,
and Figure 3 represents glycolysis in humans. The single
darkest (blue) node in each is the selected reaction, and
information pertaining to the reaction is displayed in the
bottom left corner of the visualization window. This
information includes the reaction definition, reaction
name, reaction type, pathway name, and organism of
origin. The importance of this data is clear to the
observer; therefore, we thought it to be important to
display it in some fashion, but we cannot simply have this
type of data for every node visible at the same time due to
overcrowding. Simple selection performed through mouse
clicks allows the user to determine exactly what data from
which reaction he or she desires to see while the rest
remains hidden.
In each of these examples, we see the detailed
information about the selected reaction and we discern the

304

the visualizations to provide a frame of reference for the
coloring of the nodes. Test users, who were
predominantly composed of students from the university,
preferred this scale to others.

other reactions to which this one directly connects. It is
possible to display the actual molecular reaction springing
from the selected node (Figure 2). These are image files
originally from KEGG and stored and retrieved from the
local database.
We can compare the same biological pathway for
multiple organisms. From observing glycolysis in Figures
2 and 3, we see that even though the pathway in humans
contains eight additional reactions, they are still very
similar to one another. The visualization shows us that
both pathways have the same “gateway” reaction that is
critical to tie the two halves together. The visualization not
only reveals the reactions, but also the complexity of the
complete pathway.
We offer two labeling options. The first is “classic”
labeling where every node is labeled by the reaction ID
from the database. While this method is informative, it
still introduces clutter when a larger number of reactions
are present in a pathway. We provide “limited” labeling
where labels are displayed only on selected or directly
connected nodes. This is illustrated in Figures 2, 3, and 4.
Additional labeling options include the name of the
reaction and the number of hops from the selected node.

Figure 3: Glycolysis in Homo sapiens
Figure 4 displays the citrate (Krebs) cycle in humans.
This example is displayed using the edge-cleanup option,
which allows for a more focused visualization of the
selected reaction (labeled 312). The limited-labeling
option is also utilized in this case. It is interesting to note
that while the glycolysis pathway appears as two sets of
nodes with a longer middle section linking them, the
nodes in the citrate pathway appear in a more cyclic
fashion. The citrate cycle is cyclic, if we observe
individual reactions. The initial placement of the nodes on
a circle is adjusted by our algorithm (including jitter), but
the vectors representing the reactions make limited
movement from their original positions.

Figure 2: Glycolysis in Caenorhabditis elegans
Figures 2 and 3 are presented with the “limited”
labeling option, and we can compare the same pathway
found in two organisms (Caenorhabditis elegans and
Homo sapiens). We can see that the same pathway is much
more complex in humans than in the nematode. In both
cases, the node labeled “626” is selected and the nodes
immediately connected to it (12 and 181) are labeled as
well. The molecular representation of the reaction for node
626 is displayed expanding from the nodes and again
beneath the visualization of Figure 2 for readability. The
blue to yellow color scale is displayed on the left of all of

Figure 4: Citrate cycle in Homo sapiens

305

represent the official views of the National Center For
Research Resources or the National Institutes of Health.

5. Future Work
We envision a number of projects that will expand the
data in the database, for example databases that include
information on where the reactions take place inside of the
cell, which could prove useful in a visualization scheme.
This type of data is contained in BioCarta [15], which is
accessible to academic researchers. The underlying
database structure provides a wealth of data to create data
subsets for existing algorithms, as well as extend pathwayspecific visualizations. The pathway algorithm and visual
display have been built as part of the LABiVis
visualization system. We are currently building an
interface to connect common visualizations, such as
scatter plots and parallel coordinates, to the biological
pathway data. In the future, we would like to create or
import extensions for viewing molecule and protein
structures inside of the visualization system to provide an
immersive biological interaction environment.
The database is capable of allowing exploration of
generalized systems, but can be extended to compare
specific genes or cases against the normal case. In such a
system, users would visualize genetic data in a high level
manner, as it associates with pathway information. In the
future, we plan to grant users special privileges to the
database. These privileges would allow users to store
clustering information and other algorithmic results with
the pathway information.
We are presently working on the ability to link multiple
pathways together. This will enable us to directly present a
higher-level view consisting of multiple pathways.

References
[1] Kanehisa, M. and Goto, S.; KEGG: Kyoto Encyclopedia of
Genes and Genomes. Nucleic Acids Res. 28, 27-30, 2000.
[2] Kanehisa, M., Araki, M., Goto, S., Hattori, M., Hirakawa,
M., Itoh, M., Katayama, T., Kawashima, S., Okuda, S.,
Tokimatsu, T., and Yamanishi, Y.; KEGG for linking
genomes to life and the environment. Nucleic Acids Res.
36, D480-D484, 2008.
[3] Kanehisa, M., Goto, S., Hattori, M., Aoki-Kinoshita, K.F.,
Itoh, M., Kawashima, S., Katayama, T., Araki, M., and
Hirakawa, M.; From genomics to chemical genomics: new
developments in KEGG. Nucleic Acids Res. 34, D354-357,
2006.
[4] KEGG FTP: ftp://ftp.genome.jp/pub/kegg
[5] MySQL: http://mysql.com
[6] Ingenuity: http://www.ingenuity.com
[7] Shannon, P. et al. Cytoscape: A software environment for
integrated models of biomolecular interaction networks.
Information Visualization 2005, 225-232, 2005.
[8] Hu, Z., Mellor, J., Wu, J., DeLisi, C. VisANT: an online
visualization and analysis tool for biological interaction
data. BMC Bioinformatics, 5(1): 17, 2004.
[9] Spence, R. Information Visualisation: Design for
Interaction. Prentice-Hall, Upper Saddle River, NJ, 2007.
[10] di Battista, G. Eades, P., Tamassia, R., and Tollis, I. G.
Graph Drawing. Prentice-Hall, Upper Saddle River, NJ,
1999.
[11] Fruchtermann and Reingold. Graph-Drawing by ForceDirected Placement. Software – Practice and Experience,
21(11): 1129-1164, 1991.
[12] Hermann, J., Melancon, G., Marshall, M.S. Graph
visualization and navigation in information visualization: A
survey. IEEE Transactions on visualization and Computer
Graphics, 6, 1, 24-43, 2000.
[13] Levkowitz, H. Color Theory and Modeling for Computer
Graphics, Visualization, and Multimedia Applications.
Kluwer Academic Publishers Norwell, MA, 1997.
[14] Trolltech Qt: http://www.trolltech.com
[15] BioCart http://www.biocarta.com
[16] Graphviz – Graph Visualization Software:
http://www.graphviz.org/
[17] GraphML: http://graphml.graphdrawing.org/

6. Conclusions
Our goal was to acquire biological pathway
information and display it visually. We use the KEGG
database with its wealth of information and create a local
relational database. We display graphs of reactions in
pathways, initially positioned on a circle and then
repositioned using the spring-force algorithm and jittering
adjustments. Our visualization displays information in a
manner that is informative and simple to use. We provide
a selection mechanism with edge-cleanup option that
reduces the clutter. We continue working on extending
visual displays and linking them to other classic
visualizations and related data sets. Alternative graph
drawing packages were not implemented due to a lack of
immediate compatibility [16], but we may look into
incorporating such algorithms in the future [16, 17].

Acknowledgments
The project described was supported by Grant Numbers
P20RR016456 and P20RR018724 from the National
Center for Research Resources. The content is solely the
responsibility of the authors and does not necessarily

306

