2009 13th International Conference Information Visualisation

HexBoard: Conveying Pairwise Similarity in an Incremental Visualization Space
Roberto Pinho
Maria Cristina Ferreira de Oliveira
Universidade de S˜ao Paulo
Caixa Postal: 668 - CEP: 13560-970 - S˜ao Carlos - SP
robertopinho@acm.org, cristina@icmc.usp.br

Abstract

on a layout fixed a priori, which would not capture major
changes in data, or (ii) redo the whole map at critical steps,
which might be disturbing to users as new map layouts may
bear little or no resemblance to the original layout.

We introduce the HexBoard space and visualization tool,
that provides an incremental visualization space that conveys pairwise similarity among all neighboring elements
from a dynamic data set. It is a significant evolution on our
previous work, incBoard, a chess board analogy for displaying (projecting) objects from a dynamic set on a 2D space,
considering their similarity in a higher dimensional space.
HexBoard relays on hexagons to represent data items: the
only regular polygons that provide a regular tessellation of
the Euclidean plane and where neighboring elements always share an edge. These edges are then easily manipulated to convey pairwise similarity information, thus overcoming a serious limitation of the previous solution, while
preserving all advantages of incBoard (no occlusion, coherent disposition of elements, inherently incremental solution and low computational cost). This paper introduces
HexBoard, discusses its potential and illustrates its application with examples.

To address such problems, we’ve proposed a third strategy, incBoard, that incrementally positions and re-positions
data items on a chess board-like space as elements are added
and removed while preserving the overall layout configuration [7]. We have built a visualization system that resembles
the way users might layout constantly arriving elements on
a board, based on their content similarity. On the core of
our system is a placement approach that relies on the relative ranking of the displayed elements to position new elements on a partially filled board. Absolute positions or
distances bear little meaning on the resulting visual space,
nonetheless, its layout follows relative ranking relations as
found on the original (or conceptual) space. incBoard is
particularly suitable to display dynamic data sets, as it is incrementally built and provides a built in mechanism for removing elements, while maintaining a compact layout and
low computational cost. Moreover, adding a new element
does not demand a complete re-arrangement of elements.
This is an interesting property, as it allows users to track
layout changes as element positioning gradually progresses.
In addition, the incBoard visualization does not suffer from
occlusion of elements, and allocating a pre-defined screen
space to each cell enables using sophisticated and highly
informative glyphs.

1. Introduction
Multi-dimensional and ever-growing data sets are widely
available. Examining and understanding all these data are
not trivial tasks. Information Visualization methods, tools
and environments can help by making the most of the human ability of making sense of a high load of data. Data
maps are often used to explore high-dimensional data sets
and also to explore data where similarity relations can be
defined.
One option to visualize high-dimensional data sets is to
layout their elements on a 2D space according to the similarity among items. This solution has been adopted to explore
document collections [5, 12], to display thumbnail collections of images [3, 9, 10] and to visualize general multidimensional data stored in databases [2]. However, if one
wishes to visualize a dynamic set where objects are constantly being added and removed, she/he can either (i) rely
978-0-7695-3733-7/09 $25.00 © 2009 IEEE
DOI 10.1109/IV.2009.12

Despite its advantages, incBoard does not convey pairwise similarity among neighboring elements. On other
visualization systems pairwise similarity is typically conveyed by the distance between two elements [2, 5, 12].
However, as incBoard fits elements inside a grid of fixed
size cells, neighbors will always be placed at the same distance from each other, in spite of the fact that not all neighboring elements will be equally similar. For instance, given
elements a, b, c, where b is placed between a and c, i.e., b
is a neighbor of a and c. If a is quite different from c, b
is closely related to a, and to a lesser extent similar to c, an
ideal solution would be to place a and b close together and c
32

further apart, closer to b than to a. This arrangement, when
fitted inside a grid, would simply put a, b and c in three contiguous cells. The information that b is somewhere between
a and c is preserved, but the information on how closely it
relates to the other two elements is lost.
A regular representation of pairwise similarity can better
support investigation and exploration, as users might clearly
identify and ”value” neighbor elements relationships, and
also identify clusters of similar elements.
In addition, incBoard tessellation’s is based on squares,
where the intersection between two neighbors is not uniform: it can be either an edge or a vertex, which makes it an
odd solution for the representation of pairwise similarity. It
could be misleading as users might infer that there are two
different types of neighboring relations, based on whether
an edge or a vertex is shared. One might think that two
neighbors that share an edge would be closer than the one
that share only a vertex, which is not compatible with the
incBoard algorithm, that makes no such distinction among
neighbors.
Building upon incBoard, we proposed HexBoard as an
improved solution, capable of conveying similarity information for each neighboring pair on the board. This new
visualization, by the means of efficiently presenting pairwise similarity information, supports the identification of
clusters and subsets of related elements by users. By doing
so, it can support a better understanding of the underlying
information.
A potential application of such a technique is to track
changes in scientific literature. It would enable users to add
new articles to maps that they are familiar with, maps that
could also have been fine tuned by removing undesired papers. When new articles arrive, their location and impact on
the map could provide these experienced users direct clues
about their content and trends in research. This would not
be possible if the choice is to redo the map or follow earlier
layouts. In any of those scenarios, the arrival of new elements can have an impact on the underlying visual space.
For instance, as a new research topic becomes popular, it
could fill the map, squeezing together some loosely related
articles, thus the meaning of neither absolute positions nor
distances is consistent across different time moments, a fact
that can be very misleading to a human analyst. HexBoard
is specially suited to those scenarios where no classification is available for the given data set and to those scenarios
where the close observation of neighbors of particular elements is needed. For example, when examining a collection
of scientific articles, one might want to take a closer look at
the most similar neighbor of a known relevant article.
In the following section background information is provided on the incremental visualization of dynamic data sets
and on tessellations. Section 3 (i) details the new Hexagon
Board Space and (ii) presents how distances may be calcu-

lated over it. The Hexagon Board visualization is presented
in Section 4 along on examples of its use. Finally, conclusions and further work are discussed in Section 5.

2. Background
Over the past few years, a variety of projection and multidimensional scaling methods and tools have risen to deal
with issues imposed by the nature of high-dimensional dynamic data sets or corpora. Pinho, Lopes and Oliveira [7]
summarize and organize related works that address different and particular issues related to efficiently processing and
displaying dynamic data. In this paper, it is important to describe how incBoard works and also discuss some relevant
properties of tessellations.

2.1

incBoard

The Incremental Board (incBoard) space is a grid-based
2D space with cells arranged in rows and columns. Formally, an element Ei placed on this board space is represented by a point pi with coordinates (xi , yi ), with xi , yi ∈
Z. It is expected that only a single element should occupy
a cell at any given moment, except when adding items. It
assumes two possible states: (i) a stable state, where no two
elements share the same cell coordinates and (ii) an unstable state, where two or more elements share a single cell.
The unstable state requires action in order to bring the board
back to a stable condition.
The distance between two elements over the board is calculated using the Chebyshev distance dc (Ei , Ej ):
dc (Ei , Ej ) = max {|xi − xj |, |yi − yj |}

(1)

The Chebyshev or chessboard distance considers the
number of steps required to move from one cell to another.
The placement of elements on the 2D board should reflect their relative positioning on the original n-dimensional
space or their relative ranking derived from some dissimilarity measure evaluated between elements. The choice os
dissimilarity measure depends on the data set being visualized. For instance, a usual choice for document collections
is to use the cosine distance over a vector space model [11].
For each element Ei on the board an error is calculated to
reflect the difference in the ranking of other elements when
considering their distances on the 2D space dc (Ei , Ej ) as
compared to their dissimilarity δ(Ei , Ej ), defined in the
original n-dimensional or conceptual space.
We weight the error measure both by: (i) the difference from the expected position (Rn i) to the actual position
(Rc i) of each of the other elements, and (ii) the expected
position (Rn i), assigning more weight to errors originating
on the vicinity of the reference element Ei .

33

For a list L of elements, the weighted error Werr (Ei , L)
relative to an element Ei is given by:
|Rci (Ej ) − Rni (Ej )| × (|L| − Rni (Ej ))

right. The option which yields the lowest added weighted
error is chosen. The process is repeated with the newly
emptied cell until all the 3 options are empty cells.
The most costly operation when adding or removing elements is to update the error measures for all the positioning
alternatives considered. To handle this effectively, the process can switch at run time between operating in the full
mode or in the stochastic sampling mode.
The full mode simply uses the currently list of elements
on the board B as the list L to compute weighted errors.
In the stochastic sampling mode, weighted error calculations computed for each element consider a close neighbors
list and a random list of elements, both of fixed size, as indicated by Chalmers et al. [4]. Both lists start empty and are
filled with randomly selected elements, with the ones most
similar to the reference element kept in its close neighbors
list. Whenever an element is a candidate for movement, its
lists are updated, clearing and repopulating the random list.
The neighbors list is updated if any of the newly selected
random elements is closer to the reference element than
those previously on its neighboring list. The list of close
neighbors of a newly added element Ei , LNEi , is also updated using the list of close neighbors of its current closest
neighbor Ej , LNEj . This improvement process is repeated
if a different closest neighbor is found.

(2)

Ej ∈L

A second criterion, adopted when there are ties, is to use
a weighted error count Cerr (Ei , L):

Ej ∈L

2.1.1

|L| − Rni (Ej ) if |Rci (Ej ) − Rni (Ej )| = 0
(3)
0
otherwise
Dynamic Construction

Except for the first element, new elements are always added,
one at a time, at the cell that currently holds its most similar
element. Then, as the chosen cell becomes unstable, a process is started to bring the board back to a stable state. The
first element is simply positioned at any location.
Finding the most similar element can be costly, so the
system operates in two possible modes: (i) full and (ii)
stochastic sampling.
In full mode, the arriving element is compared to every
element on the board, whilst in the stochastic mode a fixed
list of close neighbors is used instead. The stochastic sampling mode is derived from Chalmers et al. [4]. Besides
the list of neighboring elements, we also keep a list of randomly selected elements. Both lists are used to update the
weighted error measure when elements are moved during
the addition or removal processes, detailed below.
For a cell temporarily holding two elements, 16 solutions
are evaluated to bring it back to a stable state. Eight of them
keep the new element at the center cell and move the old
element to one of its 8 neighboring cells, and 8 alternative
solutions keep the old element at the center and move the
new one. The option chosen is the one that introduces the
lowest added error for both elements.
Eventually, the displaced element falls on another already occupied cell, in which case the process is repeated
with the two overlapping elements. In order to avoid undesired loops, we keep a list of already visited cells and these
are not considered again as an option. The process stops
when a moved element falls on an empty cell.
If all neighboring cells of an unstable cell have already
been visited, the disturbing element gets trapped on a cell
and a special greedy procedure is applied to move it until it
finds a suitable cell.
When removing elements, the board layout is adjusted
pursuing two goals:(i) better reflect relative positions once
an element has been removed, and (ii) keep the board as
dense as possible, avoiding scattered elements. If a just
emptied cell is above and to right of the center, we fill it with
an element chosen from one of its 3 cells above or to the

2.2

Tessellation

A regular tiling of polygons (in two dimensions), polyhedra (three dimensions), or polytopes (n dimensions) is
called a tessellation. Such polygons are to fill the plane with
no overlaps and no gaps. Tessellations can be regular or irregular.
A regular tessellation is a highly symmetric tessellation
made up of congruent regular polygons. An irregular tessellation combines polygons of different sizes or shapes.
Our first experiment on using tessellations to arrange
multi-dimensional data on a 2D space was Voromap:
a Voronoi-based tool for visual exploration of multidimensional data [8]. Voronoi diagrams represent each element in a data set by the area of a polygon in which every
point within the polygon is closer to its generating element
than to any other element from the data set. It produces an
irregular tessellation. Evaluation results have shown some
evidence that users may benefit from having polygons from
a tessellation as a representation for data elements, as an
alternative to using vertices.
For our goal of conveying data element similarity, congruent regular polygons are more suitable, as no meaning is
assigned to the size or shape of each element. The placement of elements on the incBoard space behaves similarly
to a chess board and resembles a regular tessellation of
squares that fills the plane with no overlaps (see Section 4

34

Figure 1. Possible regular tessellations of the
plane: using triangles (a), squares (b) and
hexagons (c). Reference element in orange.
Neighbors that share an edge with the reference element in yellow. In red, neighbors that
share a vertex with the reference element.

Figure 2. (x, y, z) coordinates for cells on
HexBoard.

three different axes, each of them perpendicular to a pair of
edges (see Figure 2). Thus, x and y coordinates assigned to
each cell, and an extra z coordinate is derived as y − x.
The distance can then be computed with a 3D version of
the Chebyshev distance equation (Equation 1):

for examples). As elements are free to roam around the
board map as it is incrementally built, it could be misleading
if an element is suddenly represented by a different shape,
simply because it was moved.
Only three regular tessellations of the plane exist, composed of: equilateral triangles, squares, or hexagons. Figure 1 shows these three regular tessellations. incBoard is
based on a tessellation composed of squares (Figure 1(b)),
where each element has eight neighbors. Four of them
share an edge with a particular element (see the four yellow
squares and the orange square in Figure 1(b)). The other
four share only a vertex with the target element (see the
four red squares in Figure 1(b)). This configuration implies
in attributing different representations to the neighbors of a
given element. Likewise, the tessellation composed of equilateral triangles results in an awkward representation for
different triangle neighbors. Three of them share an edge
(see red triangles in Figure 1(a)), while nine of them share
a vertex (yellow triangles). The only regular tessellation
wherein every neighbor relates on the same way to each
other neighbor is the tessellation composed of hexagons
(see Figure 1(c)). Neighbors always share an edge, which
can carry extra information. This very interesting property
caught our attention when searching proper mechanisms to
represent pairwise similarity for neighbors on a 2D plane.
Our solution is further explained in Section 4.
Hexagon tessellations are popular on turn based strategy
games, such as the Steel Panthers – World at War [6].

dh (Ei , Ej ) = max {|xi − xj |, |yi − yj |, |zi − zj |}

(4)

Each cell has now only six neighbors: {(x − 1, y − 1, z),
(x − 1, y, z + 1), (x, y − 1, z − 1), (x, y + 1, z + 1), (x +
1, y, z − 1), (x + 1, y + 1, z)}, which prompts changes on
the original algorithm. Now, twelve solutions are evaluated
when displacing elements, instead of sixteen, and only two
options are available when removing elements, instead of
three.
These changes, however, have no impact in the overall
complexity of the algorithm, which depends on the number
V of elements on the board, and remains at O(V × N ),
or simply O(N ) when displaying a constant number of
elements. Likewise, the algorithm complexity to place a
whole data set on the board, thus making V = N , remains
between {O(N 3/2 ), O(N 2 )}, as discussed in detail elsewhere [7].

4. Hexagon Board Visualization
The HexBoard solution enhances incBoard in two ways:

3. Hexagon Board Space

• displays pairwise similarity or any other relevant pairwise information among neighboring elements;

The dynamic construction of the space follows the same
steps as in incBoard (Section 2.1).
The major distinction is on computing distances over the
board. The goal still is to adopt a distance measure that
considers the number of steps required to move from one
cell to another. Over the HexBoard, movements can follow

• supports the identification of clusters and subsets of
related elements by users.
Visual attributes of edges shared by neighboring
hexagons are manipulated to convey information about any
relevant pairwise information. In the examples presented

35

here, we have adjusted thickness and transparency of reflect
neighbor similarity. Another option, not explored in these
examples, but easly implemented is to change edge color
following a color scale.
To adjust thickness and transparency, a β value in the
range [0, 1] is computed. Final thickness is then β× maximum thickness, while transparency is given by (1 − β)×
maximum α, where α = 0 for transparent edges. To compute β values, three options are available: (i) β is simply
set to match the dissimilarity for two neighbors δ(Ei , Ej ),
(ii) a user set threshold th can be chosen, having β = 1,
if δ(Ei , Ej ) > th, and having β ≈ 0 otherwise, or (iii)
the value of β is adjusted based on the median dissimi˜ having β = δ(Ei , Ej )/(2 × δ)
˜ , if beta < δ,
˜ or
larity δ,
˜
β = δ(Ei , Ej )/[(2 × (max(δ) − δ)], otherwise.

(a)

For any of those options, the final result should present
thicker and darker edges if two neighbors are not similar,
and lighter, thinner ones if they are.
Figure 3 features a portion of a document map of 675
scientific articles manually classified into one of four subject areas: Case-Based Reasoning (CBR), Inductive Logic
Programming (ILP), Information Retrieval (IR) and Sonification (SON). Document content dissimilarity was measured using the cosine distance over a vector space model
of the collection. Stop words were removed and frequencybased Luhn’s cuts applied to select relevant terms. On Figures 3(b) and 3(c), border thickness was adjusted using the
median dissimilarity, whereas transparency is set at two levels, following a user set threshold. Figure 3(b) features two
large areas of similar articles, where borders are mostly thin
and light (around the center of the figure). These two areas
are separated by a series of thicker edges running almost
from top to bottom. The presence of this thicker “wall”
is consistent with the major left/right disposition of ILP and
CBR articles noticed in Figure 3(c). It is also noticeable that
areas where thicker edges are more frequent, often present
elements from more than one class (e.g. top right corner),
which confirms that those are made of more heterogeneous
articles. The identification of those clusters of similar documents and their left/right separating “wall” is not possible
on Figure 3(a).

(b)

(c)

Figure 3. Portion of a map of 675 scientific articles. Simple borders (a), pairwise similarity
borders (b), class as color (c) versions of the
map. Case-Based Reasoning (CBR) articles
are shown in blue, Inductive Logic Programming (ILP) in red, Sonification (SON) in green
and, Information Retrieval (IR) in yellow (not
present in this figure).

Using the well known Iris flower data [1], which has
a total of 150 data items belonging to one of three flower
species, thicker borders (Figure 4) separate the setosa from
the versicolor species and partially separates the versicolor
from the virginica species. The map relays on a Euclidean
distance calculation to evaluate flower similarity. Separation of species versicolor and virginica is not expected using this simple distance calculation.

36

Currently, changes in size and disposition of cells are being investigated as another means to convey pairwise similarity information and support the identification of clusters
of similar elements.
The authors acknowledge the financial support of
FAPESP (Grants 2005/02263-2, 2008/04622-8) and CNPq
(Grant 305861/2006-9).

References
[1] A. Asuncion and D. Newman.
UCI machine learning repository.
University of California, Irvine,
School of Information and Computer Sciences,
http://www.ics.uci.edu/∼mlearn/MLRepository.html,
2007.
[2] M. Barioni, E. Botelho, C. Faloutsos, H. Razente, A. Traina,
and C. J´unior. Data Visualization in RDBMS. In Proc.
IASTED Int. Conf. Information Systems and Databases
ISDB, pages 264–269, 2002.
[3] B. B. Bederson. Photomesa: a zoomable image browser using quantum treemaps and bubblemaps. In UIST ’01: Proc.
of the 14th annual ACM symp. on User interface soft. and
technology, pages 71–80, New York, NY, USA, 2001.
[4] M. Chalmers. A linear iteration time layout algorithm for
visualising high-dimensional data. In VIS ’96: Proc. of the
7th Conf. on Visualization, pages 127–132., Los Alamitos,
CA, USA, 1996. IEEE Comp. Society. Press.
[5] C. Chen. Citespace II: Detecting and visualizing emerging
trends and transient patterns in scientific literature. J. Am.
Soc. Inf. Sci. Technol., 57(3):359–377, 2006.
[6] Matrix Games.
Steel panthers world at war.
http://www.steelpanthersonline.com/, 2009.
[7] R. Pinho, M. C. F. Oliveira, and A. de A. Lopes. Incremental board: a grid-based space for visualizing dynamic data
sets. In SAC ’09: Proceedings of the 2009 ACM symposium
on Applied Computing, pages 1757–1764, New York, NY,
USA, 2009. ACM.
[8] R. Pinho, M. C. F. Oliveira, R. Minghim, and M. G. Andrade. Voromap: A voronoi-based tool for visual exploration
of multi-dimensional data. In Proceedings of Information
Visualization, 2006, pages 39–44, 2006.
[9] K. Rodden, W. Basalaj, D. Sinclair, and K. Wood. Evaluating a visualization of image similarity as a tool for image
browsing. In INFOVIS ’99: Proceedings of the 1999 IEEE
Symposium on Information Visualization, page 36, Washington, DC, USA, 1999. IEEE Computer Society.
[10] K. Rodden, W. Basalaj, D. Sinclair, and K. Wood. Does
organisation by similarity assist image browsing? Proc.
SIGCHI Conf. on Human factors in computing systems,
pages 190–197, 2001.
[11] G. Salton and C. Buckley. Term-weighting approaches in
automatic text retrieval. Information Processing and Management: an International Journal, 24(5):513–523, 1988.
[12] J. A. Wise. The ecological approach to text visualization. J.
Am. Soc. Inf. Sci., 50(13):1224–1233, 1999.

Figure 4. Portion of a map of 150 samples
from the Iris flower data set [1] belonging
to three species: setosa (grey), versicolor
(green) and virginica (light yellow). Thresholds were user selected.

5. Conclusions and Further Work
We introduce the HexBoard space and visualization tool
which provides an incremental visualization space that conveys pairwise similarity among all neighboring elements
from a dynamic data set. HexBoard relays on hexagons to
represent data items: the only regular polygons that provide a regular tessellation of the Euclidean plane and where
neighboring elements always share an edge. These edges
are then easily manipulated to convey pairwise similarity
information or other relevant information.
It is built on top of a visualization system (incBoard) for
dynamic data sets that resembles the way users might layout
constantly arriving elements on a board, based on their content similarity. On the core of our system is a placement approach that relies on the relative ranking of the displayed elements to position new elements on a partially filled board.
Absolute positions or distances bear little meaning on the
resulting visual space, nonetheless, its layout follows relative ranking relations as found on the original (or conceptual) space.
The previous system, however, had no way of presenting pairwise similarity of neighbors. Neighbors are always
placed at the same distance from each other, in spite of the
fact that not all neighboring elements are equally similar.
HexBoard overcomes this serious limitation, while preserving all advantages of incBoard: no occlusion, coherent disposition of elements, inherently incremental solution and
low computational cost.

37

