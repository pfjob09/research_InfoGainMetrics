2009 13th International Conference Information Visualisation

Algebraic Guide Generation
Joseph Cottam∗, Andrew Lumsdaine†
Open Systems Laboratory-Indiana University
Bloomington, IN, USA
Abstract

Visualization reference marks generally fall into two
categories. The first is a guide, which is derived directly
from the data in the visualization and the process used to
transform that data. Guides include axial labeling, sidebar legends, or placement of values directly over points.
The second category of reference marks is an annotation,
which relate a visualization to another data set. Annotations include subjective notes or comments about how data
sets relate to each other in unrepresented ways. By their
very nature, annotations cannot be automatically derived
from the data presented in a visualization.
This paper presents an approach for automatic guide
generation in library-based software. Our approach provides much of the convenience provided by applications,
while retaining the flexibility inherent in libraries. This paper describes the required attributes of analysis operations
and a process to derive guides from those attributes. We
demonstrate a limited set of guide generation in the Stencil
visualization system [6] and outline how this system could
be incorporated into other visualization libraries.

Suitable reference marks are an important part of creating an understandable visualization. The reference marks
create the frame in which the data is understood, thereby
preserving the context of the data and allowing the transition from data to information to be made. However,
reference marks (including legends, axial and point labels) are given insufficient attention in many visualization frameworks. When explicitly present, they often require completely separate specification from the visualization for which they are a reference. This paper presents
a framework independent method for deriving reference
marks from the data analysis pathway. We also describe
how this approach has been implemented in the Stencil library, and how it may be implemented in other libraries.
Keywords— Visualization, Reference Marks, Guides, Annotation, Automatic Generation

1

Introduction

2

Producing sensible, accurate reference marks is an essential part of Information Visualization. Reference marks
provide the context required to interpret a visualization;
without them, a visualization is incomplete. Visualization applications have an advantage over visualization libraries. Applications with visualization components have
predefined (and therefore limited) sets of analysis and visualization styles. They can correspondingly pre-define
the reference marks that are effective for the visualization and analysis selections. Visualization libraries do not
have such constraints, programmers can construct custom
analysis routines and pair them with custom visualizations.
Unfortunately, programmers must also explicitly construct
reference marks separately. If reference marks could be
derived from the analysis, rather than being independently
implemented, visualizations would be improved and programmer effort would be reduced.

Visualization applications tend to provide pre-defined
visualizations, accompanied by predefined guide sets. The
guides are effective for the visualizations provided, but
provided limited customization. This style of guide creation is seen in spreadsheets (e.g., Excel [13].), statistical
packages (e.g., R [7]) and more visualization-focused commercial packages (e.g., Tableau [12].). The ability to create
‘dashboards’ in Tableau that can be repopulated from different data sources allows customization to be reused in a
straightforward manner [2]. However, even when providing good support for the required operations, standalone
software has a major drawback: It is difficult or impossible
to integrate as a component into a larger program. While
standalone software may be able to share a data store, it
cannot directly integrate with custom analysis (either as a
consumer or provider of information).
The basis for automatic guide generation is found at the
heart of analysis-based visualization software. Since the
intrinsic guides are directly related to the analysis process,
systems that address the analysis problem often address

∗ jcottam@cs.indiana.edu
† lums@cs.indiana.edu

978-0-7695-3733-7/09 $25.00 © 2009 IEEE
DOI 10.1109/IV.2009.110

Related Work

68

Data Analysis

the guide problem in part as well. Prior systems that addressed guide creation, automatically or otherwise, that are
exemplars of given styles include the InfoVis Toolkit [8],
Prefuse [11] and The Grammar of Graphics [16].
The InfoVis Toolkit provides a set of widgets with predefined visualization behaviors [8]. The reference mark
generation is similar to that of most spreadsheets. If a programmer accepts the default behavior, the minimal graphic
tweaks available permit some control over the process.
However, creating custom guides displays or assigning
guides based on non-standard entities is difficult. Widgetbased libraries generally suffer from this limitation.
Prefuse takes the level of customization and control
deeper than the InfoVis toolkit. It provides full programmatic control of analysis and visualization [11]. In this
model, legends are created in a two-phase process. Analysis is specified to produce appropriate data explicitly for
the guide. A guide type is then instantiated to consume
that analysis process. This is the model presented by the
’Annotation’ line in Figure 1. In this model, full control
of all process points is retained, but no support is given
for automatic creation or to ensure that the guide-deriving
analysis corresponds to the processing whose results are
being annotated. Good practices can keep the two aligned,
but require explicit attention from the programmer to both
initiate and maintain.
In language-based approaches to analysis, The Grammar of Graphics [16] provides the most complete discussion of reference marks. Wilkinson calls all marks ‘guides’
though, and presents a division between ‘scales’ and ‘annotations’ (in his vocabulary annotations may still be derived
directly from the data, but are not necessarily). Guides in
Wilkinsons language are functionally similar to those described in this paper, and their specification is similar to
that used in the Stencil example. However, their derivation is not well described. More time is spent to unify
the ‘scale’ and ‘annotation’ guides into a single rendering
framework than on how the guides derive their information
from the base program to determine their contents. Without this crucial information, the reference mark subsystem
of The Grammar remains its own peculiar entity. Whether
it could be extended to support dynamic data (as the Stencil
system can) or combined legends is unknown.
The process of creating visualizations from data has
been examined on a number of occasions. The general study of visualization and its relationship to numeric
and symbolic data include works by Bertin [3, 4] and
Tufte [14, 15]. More specific analysis of the transformations from data to visual spaces that may be performed
can be found in Bertin [3], Few [9] and Brewer [5, 10].
These works are concerned both with the types of analysis that can be done on various categories of data (e.g.,

Data

Analysis

Glyphs

Display

Guide
Annotation

Analysis
Descriptor

Guides

Analysis
Guide Creation

Figure 1: The guide and annotation pathways differ in their
ties to the data analysis workflow. Annotations can specify
completely separate analysis data, a common case for visualization libraries. Guides are implicitly tied to the analysis
pipeline (and in our system operate on analysis descriptors
instead of the raw data). The pathways may co-exist, but in
practice rarely do. To simplify the processing of meta-data
and retain display flexibility, all graphic design decisions
are deferred to the ‘Guides’ stage.
continuous or categorical) as well as the properties of visual space that are amenable to representation (e.g., what
can color effectively show, how is size visually compared).
Understanding these concerns is essential both the process
of visualization creation and in creating reference marks to
communicate that analysis.

3

Generation

The process of guide generation is broken into two
parts, a meta-data algebra and a display system (see Figure 1). This division allows the guide system to defer
graphic design concerns until the final stage. It also enables a number of dynamic display capabilities, described
in later sections. We will examine the meta-data algebra
and the display system requirements in this section.

3.1

Algebra

The primary purpose of a guide is to provide the context
mapping between the original data and a visual space. As
such, the abstract representation of a guide is a map from
source data values to visual values: f (d) = v. The precise
representation of this mapping depends upon the type of
mapping that has occurred. Axial mapping is often most
appropriately addressed by labels on the axis while other
types of attributes are represented in a side-bar legend or
as point labels However, during a compound mapping process, it is not possible to know the end result .
To overcome this problem, the process is divided into
two stages: meta-data processing and display (see Figure 1). The meta-data processing stage is the focus of the
automatic processing. This stage determines the content of
a guide: What values and labels are associated through the

69

guide. The display stage makes a final representation of the
meta-data, taking care of elements like exemplar glyphs,
lines, tick-marks, and labels.
During this section, the following notation is used:

values as themselves. Therefore, in a case without a categorization operation, the initial project is replaced with the
following C1(d) → P 1(c1) → · · · .
To limit the amount of recalculation of meta-data, all
operations have an ‘out-of-date’ flag. This flag indicates
that, based on values seen since the last guide generation
pass, the operator will return different results than it did
last time. This typically involves a range expansion (for
projections) or the introduction of a new category (for categorize operations).
To support the generation of guides, all project operations need to have two related methods: Map and Guide.
Map is the standard operation, the on invoked in the analysis workflow. Guide is a special operation, used to query
and optionally control the project operation in the future.
Information passed to Guide is treated as either repetition
or advice. If it has been seen before, it will be treated
as an repetition and should not modify any internal constructs. If it has not been seen before, it should be treated
as advice that such a value is expected to occur in the future. This advice may modify the results returned from the
Map method or the results produced for earlier values seen
by the Guide method. If the Guide method would return
new values, the out-of-date flag should set immediately so
the guide generation system can react, reducing the number of re-calcuations required. This behavior allows the
guide system to calculate fixed-point values without having to constantly update the display.
The final categorization operation needs to be able to
report all categories significant to the data that has been
presented to. At an elementary level, this is all categories
that have been used in the data, but it is not always so.
Some categorization operators may report categories with
a cardinality of zero in the thus-observed input set. Such is
likely the case for categories could be considered ordered
where category Xn was seen but Xn − 1 was not. The
existence of Xn − 1 may need to be reported to properly
contextualize Xn . Another example where categories with
zero-cardinality may be reported is when the number of
categories is finite and know independent of the data (e.g.,
gender or European countries).

P x represents a Projection operation
Cx represents a Categorization operation
px or cx represent the result of operation P x or Cx respectively.
d demotes source data
v denotes a visual value, the end of the conversion process.

3.2

Operation Types

There are two basic mapping operations from the standpoint of guide generation: Categorize and Project. First,
the categorize operation is distinguished because it usually
changes the cardinality of the set of significant values. A
common categorize operation is assigning values to bins,
but includes operations like stopping/stemming in linguistics or applying multiple category tags to an element. Categorizations usually decrease the cardinality of the operational set, but do not necessarily. Typically, the categorize
operations do not clearly move the data elements closer to
the representation space, they instead produce new metadata elements. The second operation type, project, is anything that is not a categorize operation. Project operations
move the data values closer to the actual representation
space. All project operations are mathematical functions.
They may incidentally reduce the cardinality of a set, but
that is not the intention of the operation. Projection does
not conceptually change the number of items being represented, it merely shifts all elements into a new space to
make them more amenable to representation.
The conversion process from data to representation is
typically composed of multiple stages, some categorize
and some project. The division between categorize and
project is significant for guides because the sum of all operations determines the range of values a guide must represent but, only the last categorize can be directly used in
labeling. Earlier categorization steps remain mere exemplars of elements in the final categories. This distinction in
treatment is the crux of automatic guide generation.

3.3

3.4

Meta-Data Analysis

Given a mapping process that conforms to the requirements listed in Section 3.3, the automatic generation of
guides can be approached.
The process is conceptually as follows:

Requirements

In its general form, we need to track the project steps
from the last categorize operation to the visual operation
and present that as meta-data to the glyph-generation module. This immediately introduces a complication if there
has been no categorize operation, as is the case for the process P 1(d) → P 2(p1) → v. To normalize our case, we
trivially introduce an identity operation that categorizes all

70

P 1(d) → C1(p1) → P 2(c1) → P 3(p2) → v

(1)

C1(p1) → P 2(c1) → P 3(p2) → v

(2)

{c11 , c12 , . . .} → {p21 , p12 , . . .} → {v1 , v2 , . . .}

position are not. Such issues can include include sizing,
coloring, exact mark placement, and whether to summarize large sets of discrete values from potentially continuous range (as can happens on the axes). The majority of
these issues need resolution on a case-by-case basis, dictated by the nature of the problem and the available canvas space. However, guide glyphs should be provided with
sensible default behavior and accessible facilities for modification.

(3)

{c11 , c12 , . . .} → {v1 , v2 , . . .}

(4)

{(c11 , v1 ), (c12 , v2 ) . . .}

(5)

An example sequence of mapping operators is defined
in Sequence (1). The raw data values are given to a series
of operators begging with P 1, results are passed to C1 and
so on. Eventually a visual value v is produced for the original input d. The sequence is reduced to start with the lsat
categorizing operator in Sequence (2). After this, collections of values are operated on. Retrieving the significant
set of values from C1, they are presented to P 2 through
its Guide interface. P 2 then produces its values, which are
passed on to P 3 through its guide interface. Since P 3 is
the end of the chain, this gives a collection of vx . Only
the initial cx values and ultimate vx values are required to
produce guides (Sequence (4)). These are set into pairs of
inputs and outputs (Sequence (5). This set of pairs is the
argument for the display portion of the guide generation
system.

3.5

3.6

Analysis and Extensions

One common graphic design issue not addressed by this
system is the difference in category labels commonly employed in display vs. those used in analysis. Analysis labels
are usually terse abbreviations of larger category names,
potentially even numeric proxies. However, the display is
often expected to supply human-readble category labels. In
the presented system, one label is used for both the analysis
and the eventual display. Using separate labels for analysis
(e.g., numeric proxies) and display (e.g. long names) can
be accomplished in two ways. The first option is that the
values returned by the Cx categorization function need to
be human readable, but passed through a P x project operator that produces the more analysis-friendly counterparts.
This requires the programmer to explicitly introduce the
P x operator, but requires no other modifications to the system. The second is that all categorization functions have
an additional ‘pretty-print’ method that allows the analysis version to be converted into a display version. This
‘pretty-print’ method introduces an additional dependency
between the display and meta-data analysis systems, but allows for more straight-forward specification of the analysis
workflow.
For non-location glyph attributes (e.g., axis or point labels), the guides of several variables may be combined in a
single side-bar. For example, size and color may both vary
on different values but have few exemplars in the legend.
Creating a combined scale may be space-advantageous, but
the meta-data process provides no mechanism to deduce or
indicate that such is the case. This can be concisely handled by the display system though, and appropriately so
given that this is fundamentally a graphic design and not a
data analysis issue. Special legend displays that can accept
more than one meta-data pair set can be created. These
legend displays could split or combine meta-data groups
based upon complimentary effected glyph attributes and
complimentary meta-data collection sizes. Similar constructs could be imagined for compound axial labels or
point labels.
In many data analysis systems, the results of user interaction on the data display can influence the appearance of
the guide marks. This can be observed as the highlighting of values by resizing or altering the relative contrast.

Display

The display portion of the guide system is responsible
for the graphic design elements and actual rendering of the
meta-data produced in the prior analysis. It takes as input
the list of pairs produced by the meta-data analysis, a guide
type and the glyph attribute the guide is being created for.
Guide types include axial label, legend or point notation.
The first problem for the display system is to select
which glyph attributes should have reference marks. This
may be automatically identified, or specified in a declarative fashion. The precise manner of specification is left up
to the implementing visualization framework.
The second problem for display is selecting an appropriate representation for a group of meta-data. The correct
guide type depends in part on the type of vx in the metadata pair and on the glyph attribute the guide is to be applied to. Certain combinations are inappropriate (such as
putting a color value on an axial label), while others are
just less common (representing axial expanse in a legend
is done for a compass rose, but rarely otherwise). Selecting a guide representation for a given glyph-attribute can
be done automatically in many cases, but should allow the
programmer to override.
The final problem for display is setting additional
graphic elements. These graphic elements are any visual
attribute not inherent in the guide. For example, if a guide
is being created for fill-color the colors presented on the
guide are dictated by the meta-data, but the font size and

71

If a project operation were introduced into the analysis
chain that took user input and modified its results based
on that input, similar coordinated highlighting could be introduced. If the highlighting is desired on both the main
display and the guide, no modifications to the above described system are required. However, if the highlighting
is only desired on the guide, things are more difficult. To
be entirely effective in the system indicated, the user-input
responsive system needs to be the last item in the analysis sequence. Its Guide method is then free to return values that deviate slightly from those returned by the Map
method without interfering with any down-stream project
(since there are none).
Because of the inherently iterative nature of the described analysis system, it is possible, without modification, to approach both static and dynamic data sets. Static
data sets are entirely present at the beginning of analysis. The full extent of the data is knowable a priori and
can be iterated several times if needed. In this context,
guide generation can be deferred until all data has been
read, though intermediate valued guides could be generated if desired. With dynamic data, the whole data set is
not known and prior seen values are not always re-iterable.
However, since each categorization function is responsible
for maintaining a list of significant items (seen or implied),
and this is likely only a subset of the (potentially infinite)
data items, re-iteration of the subset for the required categorization operators is likely a relatively low cost. Since
the entire guide generation system is only triggered when
a mapping operator indicates it will return differing values,
the guide generation process only executes when needed.
layer Chart
axis : X
axis : Y
stream Values ( Category )
ID : C h a r t ( C a t e g o r y ) −> ID
X : L a y o u t ( C a t e g o r y ) −> X
Y : Count ( C a t e g o r y ) −> VALUE
FILL : c o l o r (BLUE)

Figure 3: Image produced from the Stencil program in Figure 2 with artificial data consisting of the words ”Zero”,
”One”, ”Two” and ”Three” repeated several times.

1
2
3
4
5
6
7
8

Figure 2: Example Stencil program fragment, including
guide production declarations. Support components (e.g.
Layout’s definition) have been omitted from for brevity.

4

Stencil

The guide creation system described in this paper is the
basis of the Stencil guide creation process. Stencil is a
declarative language for specifying data transformations
and visualizations [6]. The Stencil program fragment in
code listing 2 generates the visualization given in Figure 3.

72

The desired guides are indicated on lines 2 and 3. Guides in
Stencil are tied to layers, since layers provide the derivation
of graphic marks from the source data; in this case, the definitions for the X and Y lines 6 and 7 provide the necessary
information to produce the axis labels. Graphic design elements (e.g., text size, color and frequency) can be modified
by setting attributes on the legend through attribute-name
and literal pairs listed under the guide declaration.
The current Stencil system only supports axial labels,
but point and legend guides are currently being implemented. Adding count labels to the points could be
achieved with “PointLegend: X,Y,Y.” Similarly, a color
legend could be added with “ColorLegend: Fill .” All
mapping operators defined in the Stencil language are currently considered categorization operators. However, it appears possible to automatically categorize them as project
or categorization based on the meta-data of their constituent parts. In the long run, providing a linguistic way
to force identification as one type or the other will be required. In this way, Stencil can enjoy near automatic guide
generation.

5

Future Work

As mentioned, the Stencil system currently only supports axial labeling through the described system. Immediate next steps involve implementing the guide glyphs for
legends and point labels. Eventually, to provide guides
with fixed screen positions, regardless of the the portion
of the canvas being displayed (i.e., ‘floating’ axes and legends), Stencil will require display-based coordinates where
right now it only has canvas-based coordinates.
The presented system does treats all analysis as if it
were over categorical spaces. Using values observed to
proxy for a continuous variable provides a safe approximation, but having an explicit representation of continuous variables could expose further useful information to

the guide creation process. Minimally, such a representation could provide a means to work with variables that take
on many hundreds or thousands of values. An implementation of this would require a way to communicate a range
of values and an annotation on incoming data to indicate
which are taken from continuous spaces (only a requirement if no categorize operation is present in the transformation chain).
Implementing this system outside of Stencil appears
plausible but will require distinct techniques depending on
the framework it is implemented in. In Prefuse [11], it
appears possible to create guides automatically for ‘calculated fields’, but less likely with calculations done in ‘actors.’ For VTK [1], implementation may be possible by
wrapping the analysis network creation calls to automatically connect a parallel guide creation network implementing the described algebra. Tools like OverView [17] could
also construct the connections network automatically.
The meta-data algebra defined above is suitable only
for explicit properties of the data and the analysis. As
such, emergent properties are out of its reach. Unfortunately, emergent properties includes common techniques
like alpha-compositing to implicitly create new categories.
How to automatically detect or elegantly indicate the possibility of emergent properties has not yet been addressed.
Detecting and enumerating cases with low cardinality is
one option we are investigating, but is not a general solution. How to address large groups of known emergent cases
or how to detect and provide guides for emergent properties of visualizations is an open research area.

6

[4] Jean Bertin. Graphics and Graphic Information Processing. Walter De Gruyter Inc., Berlin, 1981.
[5] Cyntia A. Brewer. Color use guidelines for data representation. In Proceedings fo the Section on Statistical Graphics, pages 55–60, Alexandria, VA, 1999.
American Statistical Association.
[6] Joseph A. Cottam and Andrew Lumsdaine. Stencil:
A conceptual model for representation and interaction. Information Visualisation, International Conference on, 0:51–56, 2008.
[7] Michael J. Crawley. Statistics: An Introduction using
R. John Wiley & Sons, Inc., 2005.
[8] J Fekete. The InfoVis toolkit. In Proceedings of the
10th IEEE Symposium on Information Visualization,
pages 167–174, Piscataway, New Jersey, 2004. IEEE
Press.
[9] Stephen Few. Show Me the Numbers : Designing
Tables and Graphs to Enlighten. Analytics Press,
September 2004.
[10] M. Harrower and Cyntia A. Brewer.
ColorBrewer.org: An online tool for selecting color
schemes for maps.
The Cartographic Journal,
40(1):27–37, 2003.
[11] Jeffrey Heer, Stuart K. Card, and James A. Landay.
Prefuse: A toolkit for interactive information visualization. In Proceeding of the SIGCHI Conference
on Human Factors in Computing Systems (CHI’05),
pages 421–430, New York, NY, USA, 2005. ACM
Press.

Conclusions

Guides provide essential support to the interpretation of
a visualization. Existing library-based visualization software require programmers to create guides separate from
the creation of the visualization itself. We have presented
a method for automatically constructing guides from the
analysis process. We have a proof of concept in the Stencil
system and it shows promise to be an effective technique
for Stencil and other visualization programming environments. Broad adoption of automatic guide creation techniques will improve the effectiveness of visualization and
more efficiently use programmer time.

[12] Jock Mackinlay, Pat Hanrahan, and Chris Stolte.
Show me: Automatic presentation for visual analysis. In IEEE Symposium on Information Visualization
(INFOVIS’07), 2007.
[13] Reinhold Scheck. Create Dynamic Charts in Microsoft Office Excel 2007. Microsoft Press, 2008.
[14] Edward Tufte. The Visual Display of Quantitative
Information. Graphics Press, Cheshire, Connecticut,
1983.

References

[15] Edward Tufte. Envisioning Information. Graphics
Press, Cheshire, Connecticut, 1990.

[1] The Visualization Toolkit User’s guide. Kitware, Inc.,
2003.

[16] Leland Wilkinson. The Grammar of Graphics.
Springer-Verlag, New York, 1999.

[2] Tableu
software:
Business
dashbaords.
http://www.tableausoftware.com/businessdashboards, March 2008.

[17] Brian Wylie and Jeffrey Baumes. A unified toolkit for
information and scientific visualization. Proceedings
of SPIE, 7243(72430H), January 2009.

[3] Jean Bertin. Semiology of Graphics. Reprinted by
University of Wisconsin Press, 1967.

73

