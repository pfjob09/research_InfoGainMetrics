2009 13th International Conference Information Visualisation

WebPrisma: An Interactive Web-based Tool for Exploratory Visualization Using
Multiple Coordinated Views
Leandro Hernandez Almeida
Rodrigo A. de M. Lourenço
Bianchi Serique Meiguins
Programa de Pós-Graduação em Ciência da Computação – Universidade Federal do Pará
almeida85@gmail.com
rodrigo1503@gmail.com
bianchi.serique@terra.com.br
Aruanda Simões G. Meiguins
Centro Universitário do Pará
aruanda@redeinformatica.com.br

resources of the client computer. The client computer
presents the results of the server processing to the user.
Another advantage is that web applications are easy
to maintain. Business rules and the user interface may be
quickly updated and published with no need to install
new software in each computer.
This work proposes a web application prototype that
satisfies the main demands of a good information
visualization tool. The prototype supports multiple
coordinated views, is highly interactive and is easily
distributed. Standard web development technologies and
patterns like Ajax and Java were applied. Three
visualization techniques are supported: scatter plot,
treemap and parallel coordinates. Additional features
include auxiliary statistic charts, such as bar, pie, line
and dial; and user-generated reports with table data and
data view images.

Abstract
The goal of this paper is to present WebPrisma, a
web information visualization tool still in development.
The application supports multiple coordinated views
including three visualization techniques - scatter plot,
treemap and parallel coordinates – and auxiliary charts.
WebPrisma supports view coordination by color, filter,
selection, brushing and details on-demand. Standard
web technologies and design patterns were applied.

1. Introduction
The current globalized era facilitates the expansion
of companies to different countries and the cooperation
among universities or financial organizations. These
examples have in common the geographic distance
between partners and the importance of data analysis to
support the decision-making process. A powerful pair of
technologies to meet those demands is the combination
of information visualization and the Internet.
Information Visualization (IV) aims to analyze data
quickly, interactively and intuitively. IV takes advantage
of human cognitive capacity to extract information from
data using visual representations [18]. Data grows in
terms of both volume and diversity constantly –
sometimes exponentially [8]. IV techniques are therefore
challenged to cope with larger and larger datasets in
terms of data representation, interaction and
performance. Multiple coordinated views have been
more frequently supported in IV tools as a single view of
the dataset may be unable to present the potentially
interesting relationships between data [1].
A great motivation for the use of Web tools is the
popularization of the Internet. The same web tool may be
accessed by users in any computer connected to the
Internet [13]. Mobility and collaboration are consequent
advantages. In general, web applications do not consume

978-0-7695-3733-7/09 $25.00 © 2009 IEEE
DOI 10.1109/IV.2009.17

2. Information Visualization and Multiple
Coordinated Views
It is consensus among the IV community that a good
Information Visualization tool should minimally support
the following features: overview, zoom, filters and
details-on-demand [2,4,8,16].
Additionally, the tool should provide interactive
mechanisms that allow the user to easily and efficiently
manipulate graphical representations of the data in order
to better understand characteristics and relationships of
the dataset [3,11,8,18].
Multiple coordinated views may considerably
facilitate user perception. This approach allows the user
to perform correlation on different views of the same
dataset [1,9].
Coordination ensures that changes made in one data
view are propagated to all other views keeping the
analyzed data consistent [10]. Coordination options
include data filters, visual attributes and sorting criteria
[12].
651
645

3. Web Visualization

5.1. Main characteristics

According to Dörk & et al. [5], two visualization
techniques are predominant on web environments: tag
clouds and geographic maps (Figure 2). They are applied
isolately or together and sometimes enhanced with
multimedia resources.
The following section presents some related works.
However, web information visualization tools with
multiple coordinated views are still scarce.

Web PRISMA is a client-server application. The
client is the user browser and the server is a set of Java
classes deployed to an application server (Apache
Tomcat 6). One of the initial concerns about this project
was the client-side application. What technologies should
be used? Should the views be processed on the client or
on the server?
The final option was for a thin client. All processing
is performed on the server, including queries,
calculations and rendering. The use of client resources is
very limited even when working with large datasets.
The technologies used for the client application
include simple HTML pages with CSS and Javascript for
manipulation and automatic generation of the interface.
AJAX (Asynchronous Javascript and XML) and JSON
(Javascript Object Notation) were used for client-server
communication. The server generates a view in response
to a user request, converts the view into an image and
transfers the generated image to the client.
The main screen of the prototype presents two
tabbed areas, one for visualization and another for
configuration. In the visualization area, the first tab
presents all available views including visualization
techniques and auxiliary charts in the same viewing area.
The other tabs present each view separately. In the
configuration area, the user interface components are
organized into the following sub-tabs: views, filters,
colors and details (Figure 3). In the lower panel, there is
a status bar and a progress bar to indicate the percentage
of items in the view.
Three visualization techniques were adapted from
Prisma [6] to WebPrisma: scatterplot [18], treemap [14]
and parallel coordinates [7]. Besides these visualization
techniques, the tool includes some of the most popular
auxiliary charts (described in section 5.5). Coordination
among views is supported by filter, color, selection,
brushing and details on-demand.

4. Related Works
Snap-Together [10] is a visualization tool that allows
the user to dynamically mix and match different views
and coordination aspects to build customized exploration
interfaces. Figure 1 presents a coordinated visualization
environment for exploration of census data from regions
of the USA. Users may explore information about U.S.
states using nominal, numeric and geographic
perspectives on the maps, scatterplot and outliner views.
When the user selects a state, detailed information is
presented on the table and the treemap views.

Figure 1: Snap-Together tool with five
coordinated views
VisGets [5] are small information visualization
applications (widgets) that generate queries to a web
search engine (Figure 2). The goal is to obtain an
overview of the results by applying a visual filter
mechanism to different attributes. One form of
coordination is the use of the mouse. When the mouse
hovers over an item the related elements are highlighted
in all views.

Figure 3: WebPrisma main screen.

5.2. Architecture

Figure 2: VisGets with three coordinated views

The client-server architecture of Web PRISMA is
presented in Figure 4.

5. WebPrisma
This section describes Web
characteristics and functionalities.

PRISMA

main

646
652

Figure 4: An overview of the architecture.

user views on the client-side application are restricted to
these pre-specified datasets.

The application client is the web browser on the user
computer and consists of an interactive HTML interface.
The server contains a main Servlet, a session manager, a
configuration manager and the PRISMA application, as
described below.

•

•

•

•

5.3. Automatic Interface Generation
The graphical user interface (GUI) consists of
HTML and CSS dynamically generated using JavaScript
frameworks. When the application is loaded, general
information about the dataset is sent to the client,
including: names, types and distinct values for each
attribute; view configuration options; size, shape and
color models. The client then uses the received
information to automatically create the GUI using
Javascript. Visual components allow the user to further
specify attribute settings for color, shape, size and filters.
Figure 5 presents the Color tab as an example of the
dynamically generated interface.

Main Servlet: class responsible for receiving
and processing client HTTP requests. It includes
an instance of Session Manager, Configuration
Manager and PRISMA.
Session Manager: it is responsible for managing
each user session and validating the active
sessions at each request.
Configuration Manager: saves and restores user
configuration contexts. A context is a set of
options selected by the user to specify a view,
such as filter and color.
PRISMA: classes that build the visualization,
including the data model, the visual attribute
mapping, the data source connection
management, filter processing, view rendering
and coordination, among other necessary
features.

Visualization and interaction are performed on the
browser. We have used two Javascript frameworks to
build the graphical user interfaces: jQuery and ExtJS.
These frameworks provide a good level of abstraction
from the differences between available web browsers.
Requests are sent to the server in an XMLHttpRequest
object, with JSON embedded parameters.
On the server-side, data is loaded, processed and
filtered. Also, the server generates the views, converts
them into images and sends the images to the client-side
application. The response message may also include text
with either detailed information about a user-selected
data item or metadata for the automatic generation of the
user interface.
Data sources, including pre-formatted text and
relational databases, are previously registered in the
server-side application by an administrative user. The

Figure 5: Color configuration interface.
Any interaction with the interface generates an
HTTP request via AJAX to the server. For each request,
the server generates updated views. For example, when
the user changes the selected color attribute, the server
response should include the updated views and the new
color model for the configuration interface.

5.4. Interaction Techniques
This section describes the interaction mechanisms
supported by the application.

647
653

is a coordinated mechanism, so selected items in an area
are also selected in other views [9].

5.4.1. Details on demand
WebPrisma provides on-demand details using mouse
clicks on any item in any view. When the user clicks on
an item, the server sends the values of the corresponding
attribute set. The client then displays this information on
a box over the item. Figure 6 shows the use of this
feature and the attribute configuration interface.

5.4.4. Dynamic Queries
WebPrisma uses dynamic queries [15] in the filter
mechanisms. Two control types are generated according
to the type of data: checkbox and range slider.
Categorical data are mapped to checkboxes, and numeric
data to range sliders (see Figure 8). More details are
provided in the previous work [6].

Figure 6: Details on-demand on a treemap item.
Figure 8: WebPrisma filters configuration and
generated filter interface.

5.4.2. Brushing
When a set of items is selected in a view, the
brushing technique highlights the corresponding items in
all other views [17]. WebPrisma supports brushing by
pressing the CTRL key and clicking on an item or
dragging the mouse over an area (see Figure 7).
Additionally, it is possible to highlight different regions
and groups in a view (increasing brushing). A right
mouse click on the view undoes brushing.

5.5. Auxiliary Charts
WebPrisma supports four types of charts: pie, bar,
line, and dial. The user may simultaneously analyze
different charts (Figure 9). Each chart may be configured
according to the user’s eeds and is coordinated with other
views by the use of filters.

Figure 9: Dial and Pie chart example.

Figure 7: Coordinated brushing with different
regions highlighted.

5.6. Scenarios

5.4.3. Zoom

This section describes an example of the use of
WebPrisma in order to demonstrate how a user should
interact with the software resources to extract
information. The selected dataset contains information
on Brazil elections in 2006. There are 27.825 items and
20 attributes (8 categorical / 12 numeric) including city,
region, political job, and the number of valid, blank and
invalid votes.

The zooming technique allows the user to focus on a
subset of data items for analysis. To zoom in, the user
needs to click and drag an area in the scatterplot or
parallel coordinate views. In treemap, it is possible to
zoom in the hierarchy by double-clicking a group. Zoom

648
654

In the first scenario, we analyzed the number of
invalid votes for state representative by state. A filter
selection removed from the view all other political jobs.
Then, the Y axis in the scatterplot view was associated to
the percentage of invalid votes. In the treemap view, a
two-level hierarchy was defined: region and state. The
brushing mechanism then highlighted the superior area in

the scatterplot view and all the corresponding items on
the treemap view. The data items with higher values for
the Y axis in the scatterplot were therefore easily
identified on the treemap view (Figure 10). Bahia,
Maranhão and Goiás are among the states with largest
percentages of invalid votes.

Figure 10: Brushing done in scatterplot highlighted three groups in treemap.
with the charts is done by filters, displaying only the
average for the selected attribute of the visible items. As
presented in Figure 11, the region with the largest
attendance rate was the South, followed by Southeast,
Northeast, Center-West and North.

The second scenario analyzed the percentage of
electors that voted by region. Five dial charts were
included in the visualization to represent the attendance
rate for each of the existing regions. The coordination

Figure 11: Five dial charts displaying attendance rates by region.
coordinated views. WebPrisma is based on standard web
technologies, such as: Javascript, Ajax, Java etc.
Similarly to Prisma, WebPrisma implements three
information visualization techniques (scatterplot,
treemap, parallel coordinates) and a variety of auxiliary
statistics charts. Coordination is previously defined

6. Final Remarks
This paper presents WebPrisma, an information
visualization web tool. This application is a web edition
of Prisma, a desktop IV tool that supports multiple

649
655

among the data views, including the auxiliary charts. It is
possible to use multiple coordinated views in the same
screen or multiple coordinated views in separated
screens, that is, individual views.
The main challenge that guided the development of
this project was to provide the same interaction level of
Prisma despite the limited resources available to web
applications. Furthermore, the popularity of the Internet
has established the web platform as ideal for the
development of new applications. Web applications
reach a larger number of people, support thin clients and
facilitate
maintenance,
distribution,
information
exchange and collaboration.
WebPrisma
accomplishes
the
minimum
requirements of a good information visualization tool
with support to multiple coordinated views. In spite of its
initial stage of development, it presents some interesting
features:
•
•

•

•
•

References
[1]

[2]
[3]

[4]

[5]

[6]

Creates and manages user context;
Processes requests from different users
according to each context, thus generating
different views to each user;
Maps the user interaction on the browser to the
appropriate server process (ex: zooming or
brushing applied to an item or area);
Automatically generates the interface according
to meta-data;
Builds the customization interface for visual
items: shapes, colors, size. For example, when a
given attribute is selected as shape, it presents a
caption text and associates the attribute value to
a geometric shape.

[7]

[8]

[9]

[10]

6.1. Future Work
We highlight the following potential directions for
future work.
•
•
•
•

•

•
•

[11]

Ergonomic evaluation of the user interface;
Application of usability essays;
New layout configuration options for multiple
coordinated views in the same screen;
Simultaneous visualization of different datasets,
with different interaction mechanisms to
support dataset comparison;
View customization that allows the user to
select the information visualization technique;
the number of views; the coordination
mechanisms among them and the associated
dataset to each of the views;
Performance optimization of data access
algorithms for large dataset support;
New version of the tool including collaborative
support;

[12]

[13]

[14]

[15]
[16]

[17]

[18]

650
656

Baldonado, M. Q. W.; Woodruff, A.; Kuchinsky, A.
Guidelines for using multiple views in information
visualization. Proceedings of the working conference on
Advanced Visual Interfaces, pp. 110 – 119. Palermo.
Italy. 2000.
Berry, B.; Smith, J.; Wahid, S. Visualizing Case Studies.
Technical Report TR-04-12, Virginia Tech, 2003.
Card, S. K.; Mackinlay, J. The structure of the
information visualization design space. In: IEEE
Symposium on Information Visualization, pp 92-100.
IEEE Computer Society Press, Los Alamitos, CA, 1997.
Carr, D. A. Guidelines for Designing Information
Visualization Applications. Proceedings of ECUE'99.
Stockholm, Sweden. December 1999.
Dörk M., Carpendale S., Collins C. and Williamson C.
VisGets: Coordinated Visualizations for Web-based
Information Exploration and Discovery. Proceedings of
IEEE Symposium on Information Visualization, 2008.
Godinho, P. I., Meiguins, B. S., Meiguins, A. S., Casseb
do Carmo, R. M., de Brito Garcia, M., Almeida, L. H.,
and Lourenco, R. PRISMA - A Multidimensional
Information Visualization Tool Using Multiple
Coordinated Views. Proceedings of IEEE Symposium on
Information Visualization, 2007.
Inselberg, A.; Dimsdale, B. Parallel Coordinates: A Tool
for Visualizing Multidimensional Geometry, In
Proceedings of IEEE Visualization’90 (1990), 361-375.
Keim, D. A. Information Visualization and Visual Data
Mining. IEEE Transactions On Visualization And
Computer Graphics, January-March 2002
Kerren, A.; Ebert, A.; Meyer, J. Human-Centered
Visualization Environments. Germany: Springer, 2007.
403 p.
North, Chris; Shneiderman, Ben. Snap-Together
Visualization: A User Interface for Coordinating
Visualizations via Relational Schemata. Proceedings of
the working conference on Advanced visual interfaces,
pp 128-135. Palermo, Italy. 2000.
Oliveira, M. C. F; Levkowitz, H. From Visual Data
Exploration to Visual Data Mining: A Survey. IEEE
Transactions on Visualization and Computer Graphics,
vol. 9, no. 3, pp. 378-393, July-September 2003.
Pillat, R. M.; Freitas, C. D. S. Coordinating Views in the
InfoVis Toolkit. Proceedings of Advanced Visual
Interface. pp. 496-499. Venezia, Italy. 2006.
Rohrer, R. M., Swing E., Web-Based Information
Visualization.
IEEE
Computer
Graphics
and
Applications, vol. 17, no. 4, pp. 52-59, July 1997.
Shneiderman, B. Tree visualization with tree-maps: 2-d
space-filling approach. ACM Transactions on Graphics,
1992.
Shneiderman, B. Dynamic queries for visual information
seeking. IEEE Software, 11(6):70–77, 1994.
Shneiderman, B. The eyes have it: a task by data type
taxonomy for information visualizations. Procedings of
IEEE Visual Language, 336-343. 1996.
Shneiderman, B.; Card, S. K.; Mackinglay, J. Readings
in Information Visualization: Using Vision to Think. 1
ed. Morgan Kaufmann, 1999.
Spence, R. Information Visualization: Design for
Interaction. Barcelona: Acm Press. Second Edition,
2007.

