2009 13th International Conference Information Visualisation

Using Multiple Coordinated Views for Multiple Datasets Analysis
Rafael Veras Guimarães
Faculdade de Computação –
Universidade Federal do Pará

Nikolas Jorge S. Carneiro
Faculdade de Computação –
Universidade Federal do Pará

Leandro Hernandez Almeida
Programa de Pós-Graduação
em Ciência da Computação –
Universidade Federal do Pará

Aruanda Simões G. Meiguins
Centro Universitário do Pará

An information visualization application is by
definition extremely interactive [8] and its web edition
should be able to keep the same characteristic. Therefore,
increasing the processing power on the client-side may
be a good solution for web IV tools. Using a technology
that enables the client application to execute instructions
on the computer of the user significantly reduces the
number of synchronizations and increases the interface
interactivity. This is possible with the use of an
intermediate code layer, called client engine, between the
client and the server. The client engine acts like an
extension of the browser and is responsible for rendering
the user interface of the application and communicating
with the server. This approach is usually referred to as
Rich Internet Applications (RIAs) because it includes
characteristics and functionalities of a desktop
application. RIAs transfer the entire interface processing
to the web browser but keep most data on the application
server.
Among the technologies that support the
development of RIAs, we selected Microsoft Silverlight
for this project. The characteristics that motivated the
choice of this engine are the easiness of development, the
plug-in size and the provided functionalities of the
framework. The goal of this paper is to present the main
features and the conception process of an information
visualization web application based on Silverlight. The
application supports multiple coordinated views,
multiple simultaneously analyzed datasets and the
customization of data view coordination. It includes
three visualization techniques – scatter plot [8], parallel
coordinates [2] and treemap [5] – and auxiliary charts
(pie, bar, line, etc).
Section 2 briefly describes information visualization
fundamental concepts and some related works. Section 3
presents the developed application including its main
characteristics, architecture, applied technologies and
examples. Section 4 presents final considerations and
indicates directions for future work.

Abstract
The goal of this paper is to present a web based
information visualization application with the use of
Silverlight technology. We have chosen this technology
to better use the processing power of the client
application in order to support the use of advanced
interactions and the same interface components of a
desktop application.
Also, the information visualization application uses
multiple coordinated views and multiple simultaneous
datasets. We highlight the application layout
configuration by the user, including the flexibility to
specify the number of data views and to associate
different datasets for each visualization techniques.

1. Introduction
The popularization of the Internet has guided the
development of computer applications to the web
platform. Users want to access software applications
from any computer with minimum specifications. They
also demand high-performance web applications, and
need them to be as interactive as desktop applications.
However, traditional web applications are characterized
by thin clients. The direct consequence is the limitation
of user interactions since each interaction is processed by
the server and returned to the client usually as a static
HTML page.
The use of information visualization tools is
increasing every day and a natural path to these tools is
to migrate to the web platform [12]. However, there are
some challenges to overcome: better interface
components, customizable interfaces, multiple user
support, large dataset support, better management of user
interactions, faster responses to user interactions, among
others. All of these challenges may be amplified by the
geographic distance between client and server
computers, the available bandwidth or the delays on
message exchanging.
978-0-7695-3733-7/09 $25.00 © 2009 IEEE
DOI 10.1109/IV.2009.72

Bianchi Serique Meiguins
Programa de Pós-Graduação
em Ciência da Computação –
Universidade Federal do Pará

633
627

We noticed a lack of web-based general purpose
visualization tools. The few existing commercial tools
presents some web-functionalities but are desktop
dependant. Some of them just publish some features (like
interactive dashboards) of desktop applications. This
includes Tableau Server tool [14], which works
coordinately with the Tableau Desktop, and Spotfire
Web Player [15], which requires Spotfire Enterprise.

2. Information Visualization
The main purpose of using an information
visualization tool is to interact with a dataset, generating
organized images (data graphical representation) by user
previously defined criteria. These images enable the user
to contextualize the data and its relationships and extract
information that will effectively assist him/her to better
perform a task. This process should be fast, easy and
intuitive, using the appropriate techniques, codifications
and representations for data and user tasks[3, 8, 7].
The characteristics of a good visualization tool are:
data overview, zooming, filtering and on-demand details
[6]. An IV tool may support a variety of tasks like
identification, multi-derivative correlation, search,
exploration and communication [8].
In an effort to improve user perception, IV tools
have frequently applied multiple views from data [3].
The user may simultaneously build several different
graphical representations for the same dataset in order to
better analyze the data [1, 4]. This feature is called
multiple coordinated views. The coordination ensures
that all views keep consistent even after many user
interactions with the visualized dataset and the graphical
representations. The main coordination aspects are the
visual attributes (color, shape and size), brushing,
navigation and filters, used to reduce the analyzed
dataset [11].

Figure 1: Silverlight Showcase World Map

4. Architecture and Technologies
The software visualization architecture (Figure 2)
was conceived to present a well-defined distribution of
responsibilities, in order to keep the client as light as
possible without compromising interactivity. The
architecture is based on the client/server model. The
client-side is responsible for rendering tasks. Every user
interaction with the application is processed by browser.
The server-side application holds the business logic.

3. Related Works
3.1. Silverlight Based Works

4.1. Client

In [9] a set of terms was used in a web search at the
SourceForge site (http://www.sourceforge.net/) in order
to measure the popularity of visualization technologies.
There were no results for the terms “Silverlight AND
Visualization”. Recently, in a similar query, there was
only one result. On the other hand, at the CodePlex site
(http://www.codeplex.com), the most popular open
source repository among Microsoft developers, the same
query received 12 results. These results include toolkits
that provide components for data visualization, like
VisiFire [13]. Another toolkit example is the proprietary
Infragistics’ NetAdvantage for Silverlight Data
Visualization [16] for creating data representation like
charts, timelines and gauges.
Among the analyzed Silverlight-based visualization
tools, there was none for general purposes. In the other
hand we found a lot of specific purpose visualizations.
As an example, Microsoft’s Silverlight site includes the
Silverlight
Showcase
World
Map
(http://silverlight.net/world/), where a world map
presents the submissions of Silverlight sites around the
world per year, number of Internet users and other
criteria.

The client is composed of a lightweight browserbased application that runs on the Silverlight plug-in.
Together, plug-in and application are the components of
the “client engine”. The client application exchanges
messages with the server using HTTP requests, URL
parameters and JSON documents. The client receives
messages with drawing information and metadata from
the datasets and is responsible for rendering the
visualization and fulfilling the visual components. These
messages do not contain data from the datasets but only
graphical information previously processed by the server.
Therefore, the processing performed on the client
computer is exclusively for rendering.
One of the factors considered on the choice of the
Silverlight plug-in as a client-side technology was a
study by Holmberg [10]. In order to define a framework
to evaluate the technologies for the development of webbased information visualization tools, the author
analyzed the following criteria:
• Network and communication capability: the
Silverlight platform supports all protocols and
the most used kinds of documents (XML, JSON,
Streaming transfers, etc.) and has native support
to asynchronous communication, which allows
dynamic refresh of UI content, without

3.2. General Visualization Tools

628
634

interrupting the user experience. The prototype
explores these capabilities using the .NET
WebClient to send asynchronous messages with
embedded JSON objects.

The Main Servlet is a class that handles the client’s
requests. The servlet forwards the requests to the Session
Manager or to the Prototype Core Application, according
to the request type. This is the component that starts and
keeps the reference to the other ones.
The Session Manager controls the authentication and
maintains the user sessions.
The Prototype Core Application is a Java application
that holds all the business logic of the tool. The microarchitecture of the Prototype Core Application is formed
by four modules, briefly described below:
• The Database Manager module uses third-party
DBMS (Database Management System) drivers
to connect to a database server, extract a static
view from a dataset and load it into memory
according to the data structure defined on the
Data Manager module.
• The Data Manager, in addition to the previously
mentioned
function,
provides
business
functionalities like filtering.
• The View Manager module uses the set of
operations provided by the Data module to
generate drawing information. This module also
handles the graphical mapping of the
information.
• The
Usage
Manager
processes
the
configurations saved by the user and lists the
interactions made by a user during an active
session.

5. Prototype
The prototype is a general-purpose information
visualization web tool with the following main
characteristics:
• Customizable workspace
• Configurable coordination among views
• Simultaneous use of multiple datasets
• Support to different information visualization
techniques
• Automatic generation of the client interface
according to dataset information;

Figure 2: Prototype Architecture
•

•

2D: the .NET Framework for Silverlight
handles 2D graphical primitives very easily and
efficiently. The use of XAML allows visual
components to resize to almost any screen size,
except very small ones. XAML generates
scalable vector-based graphics, keeping the UI
proportional and consequently improving user
perception.
The .NET Framework for Silverlight also
provides a rich event model, allowing great
possibilities to user interaction. The application
was developed exploring this model not only on
the visual components but also on the
visualization (ex: brushing technique).

5.1 Customizable workspace
The following figures present a sequence of
screenshots
corresponding
to
the
application
configuration steps. These web pages allow the user to
customize the visualization tool for his/her own needs.
The user may create a new configuration in a step-bystep process or load a pre-existent configuration from the
server. It is possible to customize the general view
layout, to select a set of datasets to be used, or to specify
visualization techniques and coordination options for
each view.
Figure 3A presents the first configuration step, when
the user should decide whether to load a set of
configuration options saved during a previous session or
to specify a new configuration. The next step (Figure 3B)
is the layout selection step. The user may interact with up

4.2. Server
The server is composed by the Silverlight
Application Files, a Main Servlet, a Session Manager
and the Prototype Core Application. All the components
are java-based, except the Silverlight Files. The
Silverlight Files are not linked to the other ones. They
are used by the client to get the assemblies and resources
to run the application.

629
635

to four simultaneous views depending on the chosen
layout. Each number on the layout options corresponds
to a view. For example, on the layout with four views,
View1 is on the top left corner.

On Figure 6 the user should specify which visual
properties (size, shape and color) should be coordinated
among the views of the same dataset. For example, if the
same dataset is associated to View1 and View2 the user
may coordinate the color between those views. The filter
is always coordinated among all views of the same
dataset.

New configuration

Load configuration
(A)

(B)

Figure 3: (A) New Configuration or Load
Configuration; (B) Select Layout
Figure 4 presents the screen where the user selects
the datasets. The number of datasets is limited by the
user choice on the previous step. The user should select
from one to N datasets, where N is the number of
selected views.

Figure 6: Coordination Screen, allow user to
create coordination between graphical elements
from a same dataset views
After the configuration steps, the user may save the
configuration for later use or just start the visualizations
with the customized configuration.

5.2 Automatic Generation of the User Interface
The user interface is automatically generated
according to the analysis of the metadata associated to a
dataset (Figure 7). The filter components may be
categorical or continuous and are represented
respectively by checkboxes and range sliders (Figure 8).
The generation process associates the appropriate filter to
each attribute according to its data type and number of
different values. For example, each time the color
property is changed, a new caption should be built to
represent the data values of the chosen attribute.
The number of filter components is proportional to
the number of selected datasets. The generation creates X
sets of filter components, where X is the number of used
datasets.

Figure 4: Select Datasets
Figure 5 presents the interface that allows the user to
select a dataset and a visualization technique for each
view. The datasets should have been previously
registered on the server-side application by an
administrative user. Each dataset should be associated to
a unique identification. The user interface is intuitive, but
the administrative user should be familiar with the
datasets and the visualization techniques in order to
appropriately associate them.

View

Dataset

Figure 7: Example of the filter tab when
more than one dataset is used.

IV Technique

Figure 5: Configuration of Views
630
636

to the attribute “Infant Mortality”. Infant mortality is
defined as the number of deaths of infants (one year of
age or younger) per 1000 live births.
The comparison between these views indicates that
infant mortality in Brazil has decreased from 1991 to
2000. This is pointed out by the decreasing tendency on
the Y axis scale and the reduction on the number of cities
represented at the top of this axis.
Figure 8: Rangeslider and checkbox filter
components example.

5.4.3 Usage scenario 2
Figure 10 presents the data comparison between the
same two datasets from the previous scenario, this time
with a larger number of views: two treemap views and
two parallel coordinate views. Color is coordinated
between view1 and view2, as well as between view 3 and
view4. There are two distinct sets of colors representing
the same attribute in all views: Income HDI. The
Educational HDI attribute was categorized into the
values low, medium-low, medium-high and high and
used in the treemap hierarchy.
Views 1 and 3 (treemaps) present the changes in the
Brazilian educational HDI. Many cities changed from
medium to high. Highlighting only cities with high
educational HDI in the treemap technique, the brushing
feature indicates its correlations with other attributes in
the parallel coordinate technique. Despite the
considerable increase in the educational HDI from 1991
to 2000, the Income HDI was not raised in the same
pace.

5.3 Using Multiple Datasets
The ability to load different data views allows the
user to compare data among similar datasets with
different data values. For example, each view could
contain data associated to a specific time period. The
choice of datasets happens during the workspace
configuration stage. Each dataset is related to a view and,
consequently, an information visualization technique.
Examples of the use of multiple datasets may be seen in
figures 9, 10 and 11.

5.4 Usage examples
5.4.1 Datasets
The used datasets contain data related to a study
performed every ten years by The Brazilian Institute of
Geography and Statistics – IBGE – about the human
development index (HDI) and other social and economic
official indicators. The first dataset (baseAtlas1991)
matches the 1991 study, while the second matches the
study published in 2000 (baseAtlas2000). Dataset 1 and
dataset 2 contain 5507 items, 12 categorical attributes
and 22 continuous attributes.
5.4.2 Usage Scenario 1
Figure 9 shows a scenario where the user chose to
work with two views, using the scatter plot technique in
both of them. Each view is associated to a specific
dataset.

Figure 10: two views for each one of the two
datasets for determinate the educational HDI
changes and point it non-directly relation to
Income HDI
5.4.3 Usage scenario 3
Two datasets were used in this scenario:
baseAtlas2000 and baseAtlas2000(2). The latter is a
replica of the first, which allows a direct comparison of
those datasets. However, each one has its own
independent filters and different configurations.
Three views and two techniques were used: treemap
and pie chart. In view 3, treemap was grouped by region
and had its color mapped by the IDH_Municipal_GPO
attribute. The Northeast region is the one that
proportionally has the lowest number of cities with high

Figure 9: Same information visualization
technique for two different datasets
In this scenario, two charts associate the X axis to
the attribute “Residences with tap water” and the Y axis

631
637

HDI (represented in blue) and the largest number of
cities with low HDI (represented in yellow).
In views 1 and 2, it is possible to analyze the
Northeast region. In View 1 (treemap), items are grouped
by “Number of doctors per 1000 inhabitants” and the
properties size and color are both associated to the
Literacy-Rate attribute (Figure 11).

•
•
•

•

Scalability evaluation including network
transfer performance tests;
Study of others technologies to improve serverside performance.
Study and implementation of interaction
mechanisms with better support to the
association between visualization techniques
and datasets.
Development of a trial edition that allows users
to submit their datasets and evaluate the tool.

References
[1]

[2]

Figure 11: Scenario 3, part/whole analysis of
Northeast region.

[3]

6. Final Remarks

[4]

The motivation for the development of this
application was to contribute to the scenario of webbased information visualization tools using a new
approach and a modern technology for RIA
development. The goal is to provide the user a better
interactive experience in order to achieve the same level
of interaction of desktop applications.
The UI and functionalities were based on some of
the most popular information visualization tools, such as
Spotfire[15] and Snap-Together[4]. Supported features
include multiple views, coordination and web-based
architecture. The application still demands interface
inspections by specialists and usability tests.
The example scenarios were used to present the
potential power of these features on the process of
extracting information of a dataset.
The main challenges were the management of
multiple users with multiple datasets and the automatic
generation of the UI.
It is also important to remark that Silverlight is a
recent technology, so there are still very few resources
available for reuse. Moreover, the documentation is
reduced and the breaking changes in the plug-in updates
have been significant.

[5]

[6]

[7]

[8]

[9]

[10]

[11]

6.2. Future Work

[12]

We highlight the following potential future
developments:
• Application of usability essays;
• Addition of auxiliary charts, such as gauges;
• Deep zoom support on scatter plot, treemap and
parallel coordinate techniques;
• Research and implementation of additional
visualization techniques;

[13]
[14]
[15]
[16]

632
638

Baldonado, M. Q. W.; Woodruff, A.; Kuchinsky, A.
Guidelines for using multiple views in information
visualization. Proceedings of the working conference on
Advanced Visual Interfaces, pp. 110 – 119. Palermo.
Italy. 2000.
Inselberg, A.; Dimsdale, B. Parallel Coordinates: A Tool
for Visualizing Multidimensional Geometry, In
Proceedings of IEEE Visualization’90 (1990), 361-375.
Kerren, A.; Ebert, A.; Meyer, J. Human-Centered
Visualization Environments. Germany: Springer, 2007.
403 p.
North, Chris; Shneiderman, Ben. Snap-Together
Visualization: A User Interface for Coordinating
Visualizations via Relational Schemata. Proceedings of
the working conference on Advanced visual interfaces,
pp 128-135. Palermo, Italy. 2000.
Shneiderman, B. Tree visualization with tree-maps: 2-d
space-filling approach. ACM Transactions on Graphics,
1992.
Shneiderman, B. The eyes have it: a task by data type
taxonomy for information visualizations. Procedings of
IEEE Visual Language, 336-343. 1996.
Shneiderman, B.; Card, S. K.; Mackinglay, J. Readings
in Information Visualization: Using Vision to Think. 1
ed. Morgan Kaufmann, 1999.
Spence, R. Information Visualization: Design for
Interaction. Barcelona: Acm Press. Second Edition,
2007.
Lammarsch, T.; Aigner, W.; Bertone, A.; Miksch, S.;
Turic, T.; Gärtner, J. A Comparision of Programming
Platforms for Interactive Visualization in Web Browser
Based Applications. Proceedings of IEEE Symposium on
Information Visualization. London, UK, 2008.
Holmberg, N.; Wünsche, B.; Tempero, E. A framework
for interactive web-based visualization. Proceedings of
the 7th Australasian User interface conference.
Australian Computer Society, 2006.
Pillat, R. M.; Freitas, C. D. S. Coordinating Views in the
InfoVis Toolkit. Proceedings of Advanced Visual
Interface. pp. 496-499. Venezia, Italy. 2006.
Rohrer, R. M., Swing E., Web-Based Information
Visualization.
IEEE
Computer
Graphics
and
Applications, vol. 17, no. 4, pp. 52-59, July 1997.
VisiFire. http://www.visifire.com
Tableau Software. http://www.tableausoftware.com/
Spotfire. http://spotfire.tibco.com/
http://www.infragistics.com/

