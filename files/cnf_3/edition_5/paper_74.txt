Algorithm Visualization in Teaching Spatial Data Algorithms
Jussi Nikander, Juha Helminen
Helsinki University of Technology
Laboratory of Software Technology
P.O. Box 5400, 02015 TKK, Finland
jtn@cs.hut.fi, jhhelmi2@cs.hut.fi

Abstract
Algorithm visualization is a widely–used tool for teaching data structures and algorithms. Spatial data algorithms
are algorithms that are designed to process multidimensional data. This work introduces a spatial data extension
to the successful TRAKLA2 learning environment, which includes automatically assessed visual algorithm simulation
exercises. First impressions on using the visualizations in
teaching are also described.

1 Introduction
Geographic data sets can be very large, covering whole
countries or, in some cases, like Google Maps1 , the whole
Earth. The number of data items in such sets can reach
millions of items. Operating on such sets requires efficient
data structures and algorithms to keep computation times
reasonable. Furthermore, the data items in geographic data
sets have multidimensional key values. There are always
at least two spatial dimensions, often three, and the data
may also include an additional time dimension. All this imposes many additional requirements on the data structures
and algorithms used. These spatial data structures and algorithms are an integral part of teaching geoinformatics.
The data items stored in a spatial data structure are at
least two–dimensional. Therefore there is no simple order
that the data items can be arranged to, since a pair of coordinates is required for establishing the location of each
data item. Possible approaches for solving the problem are
space filling curves, like used in spatial location code [15],
or generalization of the order of items into two dimensions,
as used in R–Trees [2]. Similarly, spatial data algorithms
must account for the multidimensional data. For example,
comparison operators such as intersection, cut or distance
need to be used instead of “equals” or “less than”.
1 http://maps.google.com/

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

Visualization is an important way of exploring and analyzing geographic data sets. The most obvious and common visualization for geographic data are maps of different
kinds. Such visualizations are typically quite independent
of the data structures used to store the data, but are greatly
affected by the algorithms used to manipulate and visualize
the data. Therefore, it is important for people involved in
the field to know the relevant algorithms in order to be able
to select a correct one for any given situation. And, because
algorithms are closely connected to the data structures they
employ, knowing the data structures is also very important.
Data structures and algorithms are, however, abstract entities and can be hard to learn. One way of helping students is to use of algorithm visualization (AV) [14]. AV uses
graphics and animations to illustrate data structures and the
operations algorithms perform on the structures. Pedagogy
is one of the main uses of AV and numerous systems have
been developed for computer science education. For some
examples, see [3, 9, 10, 13]. The systems vary from simple
research prototypes used at a single university to systems
used in numerous institutions. Most of the systems are used
in teaching basic data structures and algorithms, although
more specialized systems also exist.
Since visualization of geographic data is a natural way
of illustrating such data sets, visualization can also be a
very powerful tool for teaching the data structures and algorithms associated with the manipulation of geographic
data. In this paper we introduce the Spatial TRAKLA2,
a spatial data structure and algorithm extension to the
TRAKLA2 environment [7]. TRAKLA2 is a highly successful learning environment used for teaching basic data
structures and algorithms in several universities [6]. The
system is free software, and currently available on request.
A demo of the system can be found on our webpage at
http://www.cs.hut.fi/Research/TRAKLA2/. We are not aware
of any other learning environment for teaching this topic.
The spatial extension currently includes ten spatial data
structure and algorithm exercises with approximately another dozen under construction. These exercises can be

given as homework for the students, used as lecture examples, or self–study material. So far the exercises have been
used on the spatial data structures course at the Helsinki
University of Technology.
The rest of this paper is organized as follows. In section 2 we describe the TRAKLA2 system and the spatial
data extension. Section 3 contains discussion on the visualizations used, and section 4 some preliminary results gained
from the spring 2007 course. Section 5 concludes the paper.

2 System Description
TRAKLA and its successor TRAKLA2 are learning software developed at the Helsinki University of Technology.
The systems are designed to aid in teaching data structures
and algorithms by means of computerized algorithm simulation. The first version of TRAKLA dates back to 1991 [4]
and the latest incarnation, called TRAKLA2 [7], has been
in use since 2003. TRAKLA2 is built on top of the Matrix
framework, a general purpose framework for building algorithm animations and simulations [5]. Matrix is based upon
the concept of visual algorithm simulation, where algorithm
operations are simulated through a graphical user interface
by performing context-sensitive drag-and-drop operations,
triggering menu commands, operating buttons, and other
GUI components.
The TRAKLA2 system provides a framework for the
creation and publishing of interactive exercises for data
structures and algorithms. The exercises incorporate visual
algorithm simulation functionality and include visual model
solutions. In addition, TRAKLA2 supports automatic assessment in terms of grading and storing submitted simulation sequences. The current basic exercise set includes
assignments on the topics of basic data structures, sorting,
searching, hashing, graph algorithms, and algorithm analysis. TRAKLA2 has been successfully used on many courses
at several universities [6].
From the learner’s point of view TRAKLA2 is a webbased environment, where one can solve exercises from any
place at any time. The set of exercises in a course is organized in rounds with defined publish dates, deadlines, and
pass requirements. Each exercise is on a single web page
that consists of a description of and instructions for solving
the exercise, pseudo-code for the algorithm, an interactive
Java applet and possibly links to other material.
The applet displays visualizations of the data structures
and items used in the algorithm. By interacting with the applet the learner manipulates the visual representations of the
underlying data structures. The purpose is to trace the algorithm by performing the same changes on the data structures
that the real algorithm would do. An example of a simulation sequence can be seen in Figure 1. The simulation is carried out through GUI operations, such as drag-and-dropping

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

items. For instance, the learner might drag an item from a
stack visualization onto a visualization of a search tree and
drop it there, thus inserting the item to the tree. Buttons
and other common GUI components can also be added for
triggering operations where the basic interface of drag-anddropping and clicking isn’t applicable.
The applet allows the learner to review his or her answer
by stepping back and forward in the animation. The learner
can also reset the exercise and get a different randomized
set of inputs. Actually, each learner gets a new personalized input each time he or she tries to solve an exercise.
Furthermore, a learner can get feedback by submitting the
answer and viewing the report given by the automatic assessment. Finally, the learner can view the model answer,
which is a step-by-step algorithm animation equivalent to
the sequence the learner is attempting to create. For obvious
reasons, viewing the model answer disables the submission
functionality until the exercise is reset.
The system has been designed using the constructivistic
learning theory [1] and its aim is to promote the understanding of algorithms on a conceptual level. According to constructivism, a learner gains new knowledge by actively constructing it. As a learner studies a certain topic (in this case,
an algorithm) he or she constructs a mental model [12]. This
mental model presents how the learner believes the algorithm to work, and it evolves as the learner’s understanding
of the algorithm changes. We consider a learner’s mental
model to be viable if, on a given input, the learner can simulate the operations of the algorithm accurately. Thus, the
learner’s mental model needs to be viable on the conceptual
level, and he or she does not need to be able to implement
the algorithm.
The exercises support the construction of viable mental
models. As the learner submits an exercise, his or her mental model of the algorithm is tested against a real algorithm
implementation. After submitting an exercise, the learner
can view the feedback given by the system and the model
answer to the exercise. By comparing his or her mental
model to the feedback and model answer, and by reflecting
on the differences the learner can modify his or her model
to a more viable one. Afterwards, he or she can test the
improved mental model by resubmitting the exercise.
The current set of spatial exercises contains exercises
about line simplification, TIN generation and Voronoi–
diagrams, R– and Quad–trees, line and rotational sweep
methods, polygon maps and some elementary geometric operations.

2.1

Visualization of Spatial Data

A data structure can be presented using many different visualizations that can be divided into several levels of
abstraction depending on their purpose. Most data struc-

Figure 1. An example sequence from the Douglas–Peucker line simplification algorithm. The original
line is drawn in white, and the simplified polyline in solid dark red. The next candidate line for
simplification is shown as dashed line, as is the distance from the candidate to a given vertex. The
buffer around the candidate line is highlighted and its border drawn using dash line. The candidate
line is drawn since the learner has clicked on node 9. Below the lines is the stack used in the
algorithm and below that a list of nodes belonging to the simplified polyline. In the first image, a
candidate line is drawn between nodes 7 and 10. There are, however, nodes between them that
are outside the buffer zone, and therefore the learner adds node 9, which is furthest away from the
candidate line, to the stack by dragging it from the polyline to the stack with the mouse. Then, the
system draws a new candidate line, shown in the second image, between nodes 7 and 9. Since node
8 is inside the buffer, the student adds node 9 to the simplified polyline, as shown in the third image.

tures, however, are based on a small number of basic structures that have widely–accepted visualizations or canonical
views. In TRAKLA2 four basic structures: array, list, tree
and graph, are used. All data structures in the system have
been implemented by combining instances and variations
of these four structure types together. Simple examples of
canonical views are in Figure 2. [11]
The canonical views are the basic building blocks of
data structure visualizations. By modifying, expanding and
combining these views it is possible to visualize any data
structure. In visualizations that use canonical views the
focus is on illustrating the internal connections and hierarchy between parts of the data structure (array indices, graph
nodes, etc.). These visualizations are called data structure
level views.
However, when the data is multidimensional, data structure level visualizations are not adequate for showing the
relationships between data items. If a tree, for example,
stores points in a 2D–space, a tree view is not suited for
showing the relationships between the points. Even if the
coordinates of each data point are shown, it is hard for the
viewer to discern point clusters, or even distances between

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

individual points.
In order to show all the information required for understanding spatial data, more abstract views of data structures than those offered by data structure level visualizations are required. We call these representation level visualizations [11]. For example, a representation level visualization for an R–Tree containing a number of points can be
a plane, where each point is drawn to its coordinates. The
areas covered by the nodes of the tree can be drawn as rectangles in the same visualization. An example can be seen
in Figure 3 a).
Representation views still contain information about the
data structure itself, but are not confined to using variations
of the four canonical visualizations. For data residing in
two–dimensional space a good conceptual visualization is
an area. An area covers some part of the two–dimensional
plane, sufficient for showing all the data items in the structure being visualized. Such a visualization also includes
some information about the data structure. For example, if
each data structure node covers a certain subarea of the area
visualization, this subarea can be visualized as a polygon.
Typically data item visualizations (for example points, lines

Array

List

Tree

Graph

Figure 2. Examples of canonical views

Figure 3. Two visualizations of an R-Tree: a) drawn as an area and b) drawn as a tree
and polygons stored in the visualized data structure) and the
data structure visualizations (node areas, etc.) are differentiated using colors, transparency, or other visual cues. For
instance, in Figure 3 a), data items (polygons) are drawn
using solid lines while the nodes of the data structure (rectangles) are drawn using dash lines.
However, neither data structure visualizations nor representation level visualizations offer a complete picture of the
data structure. As can be seen in Figure 3 a), from the area
visualization it is hard to grasp the internal hierarchy of the
R–Tree being shown. Therefore, in order to truly understand the structure, a simultaneous data structure level view
is required, shown in Figure 3 b). However, as can be seen
from the figure, it is sometimes hard to map the elements
shown in one view into elements in the other view.
Even though all the nodes are labeled in both figures 3
a) and b), it can be hard for learner to grasp what data items
are stored in which node of the tree. The learner is helped
by, for example, emphasizing parts of the structure in both
views. Figure 3 has node R4 emphasized in both views.
However, there are no visual clues in figure a) to indicate
which of data items stored in the node is which.

3 Discussion
TRAKLA2 exercises for the basic data structures and algorithms course typically use only data structure level visualizations. Visualizations of this type are, however, insufficient for most spatial data algorithm exercises. The

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

data is two–dimensional, and the algorithms must take this
into account. Therefore, on the conceptual level, most algorithms work on an area, and therefore area visualizations
are well–suited for promoting conceptual understanding of
many algorithms. However, the implementation of an algorithm still works on data structures, not on areas. Thus,
in order to give a more detailed look on how a given algorithm works, data structure visualizations are also required.
Therefore, in many exercises two simultaneous views must
be utilized. One view is on the data structure level, while the
other is on the representation level, such as in in Figure 3.
When multiple simultaneous views are used, the visualizations should be designed in such a way that the learner
can connect the elements in one view to the same elements
in the other view. In sufficiently simple, static, examples
this can be achieved by using, for example, labeling of all
elements. TRAKLA2 exercises are, however, dynamic and
inputs are randomized, which makes label placement problematic. Therefore, alternative ways of linking visualizations to one other have been used. One method is highlighting, as shown in Figure 3. In the exercises, the learner can
decide which part of a data structure to highlight by positioning the mouse over the given part.
Most algorithms hold the state of the algorithm in a number of variables. For example, the Expanding Wave algorithm for creating a TIN–model [8] has an anchor vertex
and its known neighbour stored in variables. In order to
be able to simulate an algorithm, or know the state of a
model answer animation, these special data elements need

to be visualized somehow. In TRAKLA2 highlighting is
typically used and each variable is indicated by using a different color. This way the data elements currently stored
in a variable can easily be shown in both data structure or
representation level visualizations.
Furthermore, in some exercises the area visualization can
contain “virtual structures”. These are typically conceptual
elements of the algorithm that have no actual counterpart
in the implementation. For example, the buffer zone of the
Douglas–Peucker line simplification algorithm or the sweep
line in line sweep algorithms do not exist as such. The
buffer zone is determined by a given tolerance value, and
the sweep line is a way of conceptualizing the loop invariant of a line sweep algorithm.
The visualizations used in TRAKLA2 are designed for
showing only small example data sets. Typically, the input
of an exercise consists of approximately ten to fifteen data
items. The small number of input elements both helps to
keep the visualizations clear and understandable, and prevents the exercise from becoming large and therefore tedious for the learner to solve.
The data structure visualizations could, however, easily
be used to represent data structures containing a large number of items. In theory, the visualizations can be used to
show arbitrarily large data structures. However, there is a
limit on the size of the data structure that can be shown in
detail. The size of a computer screen is limited, and if the
level of detail is kept the same as in Figure 3, sooner or later
the visualization will not fit the screen. If the structure is too
large to be shown, the level of detail can be reduced. Techniques such as fish–eye–views can then be used to examine
a part of the structure in detail. However, it can be hard to
visualize a large number of data items and the rather complicated data structure required for storing all of them using
an area view. If the data items are clustered on a sufficiently
small area, the view easily becomes too cluttered to be of
any use.
The spatial exercises in TRAKLA2 typically contain
only ten data items or less, and therefore the visualizations
are likely to remain clear and useful. However, if care were
not given to the generation of the random input, the area visualization can easily become a mess. If, for example, an
exercise uses polygons as input data, the polygons should
be generated in such a way that they are approximately uniformly distributed in the area and (in most cases) do not
overlap each other much.

4 Experiences
During spring 2007 the spatial exercises were taken into
use on the Spatial Data Algorithms course at the Helsinki
University Technology. The course is aimed at third year
geoinformatics students. As a prerequisite the students must

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

have completed at least one course in basic programming,
one course on data structures and algorithms and at least
two basic courses in geoinformatics. The spatial exercises
were divided into five rounds in the system, and each round
corresponded to one lecture. There were also some lectures
that did not have a corresponding exercise round. On each
round there were between one and three exercises. Nine
exercises were included in the course, as one of exercises
was deemed not to be ready for use. For each exercise the
maximum points that could be gained were between 6 and
8, depending on how hard the course staff assumed the exercise to be.
In order to pass the course the students had to gain at
least half of the maximum points for each exercise round.
In general, students seemed to be able to solve the exercises. All students who actively participated on the course
(as opposed to merely registering but not doing anything)
were able to pass the TRAKLA2 exercises successfully. For
most exercises the average points gained by students were
well over 75% of the maximum, which is much more than
the 50% required for passing the course. Therefore, it seems
that the students wanted to do better than just the minimum
effort required. However, there was no time to conduct a
complete analysis of the students’ answers before writing
this paper.
Feedback on the exercises was gathered using three
methods. First, during the course the students could send
feedback through email and a web form. The web form
could be submitted anonymously. Second, when students
asked for help during lectures and lab sessions the course
staff tried to find out their impressions on the system. Third,
after the course the students’ impressions were gathered using a feedback form they could fill in the course exam. The
exam also contained exercises that tested the students’ conceptual understanding of some algorithms included in the
TRAKLA2 exercises.
In practice, almost all the feedback gained through the
first two methods consisted of students’ questions about the
details of an exercise or complaints about bugs in the system. The feedback data has not yet been fully analyzed,
but some preliminary results are available. First, a few exercises contained bugs that, in some cases, prevented the
automatic assessment from working correctly. All the bugs
were fixed before the corresponding exercise round closed.
However, the bugs caused some ire among the students.
Second, some exercises apparently had rather complicated
user interfaces, which in turn, turned the students’ attention
from understanding the algorithm being simulated to understanding how the user interface worked. For example, one
line sweep exercises did not include the visualization of the
sweep line. Visualization of the sweep line would probably have helped the students’ conceptual understanding of
the exercise, since many questions about the exercise con-

cerned the state of the algorithm on each given moment.

5 Conclusions

Algorithm visualization can clearly be combined with visualization of spatial data in order to illustrate spatial data
algorithms. These visualizations combine views typically
seen in data structure textbooks with conceptual area representations. Similar illustrations are often used in geoinformatics textbooks. These visualizations can be used as
lecture examples, in self–study material or, as described in
this work, in exercises. However, the effectiveness of spatial data visualizations as teaching aids has not yet been verified. However, good results have been gained from using
TRAKLA2 in teaching other data structures and algorithms.
Creation of good spatial data algorithm exercises is,
however, challenging, mainly because of the multiple simultaneous views required. First, it may be hard to include all the required views in the small space of an applet. This may lead to a cluttered user interface, or force
to use very small problem sizes in order to keep the size
of the visualizations reasonable. Second, it may be challenging to design the views in such a way that they provide
the learner all the necessary information but do not trivialize the exercise. Third, it may be hard to include an easily
learned and understood user interface in the visualizations.
This is especially hard if, in order to solve an exercise, the
learner needs to manipulate the area visualization. For the
data structure visualizations the manipulation of different
elements is well–standardized. No standard semantics for
interacting with the area visualizations has been developed,
since the required functionality is entirely dependent on the
exercise. In one exercise the learner may have to be able
to select elements, in another he or she may need to add or
delete them, and so on. If the user interface becomes too
cluttered or complex most of the learners’ effort goes not
into understanding the algorithm but into coping with the
user interface.
In conclusion, the visualizations should be functional for
the exercise, visualize the data in an accurate and understandable manner, be simple, and include all the relevant
information for the exercise. Designing such visualizations
to be interactive seems to be a very challenging task. However, the first impressions with the Spatial TRAKLA2 exercises have been very encouraging. Students were able to
solve the exercises, and most decided to do more work than
required to pass the exercises. The extra work did not give
any direct benefit to the course grade, and therefore the students seemingly had some other motivation for solving the
extra assignments.

11th International Conference Information Visualization (IV'07)
0-7695-2900-3/07 $20.00 © 2007

References
[1] M. Ben-Ari. Constructivism in computer science education.
Journal of Computers in Mathematics and Science Teaching,
20(1):45–73, 2001.
[2] A. Guttman. R-trees: a dynamic index structure for spatial
searching. In SIGMOD ’84: Proceedings of the 1984 ACM
SIGMOD international conference on Management of data,
pages 47–57, New York, NY, USA, 1984. ACM Press.
[3] C. Hundhausen and S. A. Douglas. SALSA and ALVIS:
A language and system for constructing and presenting low
fidelity algorithm visualizations. In Visual Languages, pages
67–68, 2000.
[4] A. Korhonen and L. Malmi. Algorithm simulation with
automatic assessment. In Proceedings of The 5th Annual
SIGCSE/SIGCUE Conference on Innovation and Technology in Computer Science Education, ITiCSE’00, pages 160–
163, Helsinki, Finland, 2000. ACM Press, New York.
[5] A. Korhonen, J. Nikander, R. Saikkonen, and P. Tenhunen.
Matrix – algorithm simulation and animation tool. Computer program, November 2001.
[6] M.-J. Laakso, T. Salakoski, L. Grandell, X. Qiu, A. Korhonen, and L. Malmi. Multi-perspective study of novice learners adopting the visual algorithm simulation exercise system
TRAKLA2. Informatics in Education, 4(1):49–68, 2005.
[7] L. Malmi, V. Karavirta, A. Korhonen, J. Nikander,
O. Sepp¨al¨a, and P. Silvasti. Visual algorithm simulation exercise system with automatic assessment: TRAKLA2. Informatics in Education, 3(2):267 – 288, 2004.
[8] M. J. McCullagh and C. G. Ross. Delaunay triangulation of
a random data set for isarithmic mapping. The Cartographic
Journal, 17(2), December 1980.
[9] A. Moreno, N. Myller, E. Sutinen, and M. Ben-Ari. Visualizing programs with Jeliot 3. In Proceedings of the International Working Conference on Advanced Visual Interfaces,
pages 373 – 376, Gallipoli (Lecce), Italy, May 2004.
´ An envi[10] T. L. Naps, J. R. Eagan, and L. L. Norton. JHAVE:
ronment to actively engage students in web-based algorithm
visualizations. In Proceedings of the SIGCSE Session, pages
109–113, Austin, Texas, Mar. 2000. ACM Press, New York.
[11] J. Nikander, A. Korhonen, E. Valanto, and K. Virrantaus.
Visualization of spatial data structures on different levels of
abstraction. In G. R¨ossling, editor, Fourth Program Visualization Workshop, Florence, Italy, Awaiting publication.
[12] D. A. Norman. Some observations on mental models. In
D. Gentner and A. Stevens, editors, Mental Models, pages
7–14. Lawrence Erlbaum Associates, 1983.
[13] G. R¨oßling, M. Sch¨uler, and B. Freisleben. The ANIMAL
algorithm animation tool. In Proceedings of the 5th Annual
SIGCSE/SIGCUE Conference on Innovation and Technology in Computer Science Education, ITiCSE’00, pages 37–
40, Helsinki, Finland, 2000. ACM Press, New York.
[14] J. T. Stasko, J. B. Domingue, M. H. Brown, and B. A. Price.
Software Visualization: Programming as a Multimedia Experience. MIT Press, Cambridge, MA, 1998.
[15] P. van Oosterom and T. Vijlbrief. The spatial location code.
In the Seventh International Symposium on Spatial Data
Handling, August 1996.

