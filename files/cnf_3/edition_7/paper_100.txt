Visualizing a Temporal Consistency Checker
Jixin Ma, Brian Knight, Miltos Petridis, Amin Mineh
School of Computing and Mathematical Sciences
The University of Greenwich, SE18 6PF U.K.
j.ma, b.knight, m.petridis, a.mineh@gre.ac.uk

Abstract
The notion of time plays a vital and ubiquitous
role of a common universal reference. In
knowledge-based systems, temporal information
is usually represented in terms of a collection of
statements, together with the corresponding
temporal reference. This paper introduces a
visualized consistency checker for temporal
reference. It allows expression of both absolute
and relative temporal knowledge, and provides
visual representation of temporal references in
terms of directed and partially weighted graphs.
Based on the temporal reference of a given
scenario, the visualized checker can deliver a
verdict to the user as to whether the scenario is
temporally consistent or not, and provide the
corresponding analysis/diagnosis.

1. Introduction
Time is an idea deeply integrated in human temporal
enterprise, playing a fundamental role in modelling
natural phenomena and human activities. In particular,
many information systems need to deal with the
temporal dimension of data, the change of information
over time and the knowledge about how it changes. In
fact, areas in the domain of information systems
requiring temporal representation and temporal
reasoning include Knowledge Management, Decision
Support
and
Intelligent
Systems,
Database
Management, Prediction/Planning, Diagnosis and
Explanation, Historical Reconstruction, etc. For
instance, in database systems, time-dependent data may
be stamped with time elements, denoting the valid time
and/or transaction time of that data [6].
It has been noted that absolute-time-stamping of
temporal data provides an efficient indexing method for
temporal systems, but suffers from the requirement that
precise time values for all temporal data need to be
available. Generally speaking, in many information
systems, temporal knowledge can be uncertain and
incomplete. For instance, we may only know that event
A happened before event B, without knowing their

precise starting and finishing time. Relative temporal
knowledge such as this is typically derived from
humans, where absolute times are rarely remembered,
but relative temporal relationships are often used for
knowledge representation and reasoning. Allen’s intervalbased time theory [1] is a representative example of temporal
systems addressing relative temporal relations including
“Meets”, “Met_by”, “Equal”, “Before”, “After”, “Overlaps”,
“Overlapped_by”,
“Starts”,
“Starts_by”,
“During”,
“Contains”, “Finishes” and “Finished_by”.
It has been claimed in the literature that time
intervals are more suited for expression of common
sense temporal knowledge, especially in the domain of
linguistics and artificial intelligence. In addition,
approaches like that of Allen [1,2] that treat intervals as
primitive temporal elements can successfully
overcome/bypass puzzles like the Dividing Instant
Problem [1,4,5,10,11], which is in fact an ancient
historical puzzle encountered when attempting to
represent what happens at the boundary point that
divides two successive intervals. However, as Galton
shows in his critical examination of Allen's interval
logic [5], a theory of time based only on intervals is not
adequate for reasoning correctly about continuous
change. In fact, many common sense situations suggest
the need for including time points in the temporal
ontology as an entity different from intervals. For
instance, it is intuitive and convenient to say that
instantaneous events such as “The database was
updated at 00:00am”, “The light was automatically
switched on at 8:00pm”, and so on, occur at time points
rather than intervals (no matter how small they are).
Therefore, for general treatments, it is appropriate to
include both points and intervals as primitives in the
underlying time model, for making temporal reference
to instantaneous phenomena with zero duration, and
periodic phenomena which last for some positive
duration, respectively.
The objective of this paper is to present a visualized
consistency checker for temporal reference. In section
2, a time theory accommodating both points and
intervals as primitive is introduced. Section 3 presents a
graphical representation of temporal reference. The
consistency checker and its visualization are presented

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

in section 4 and 5, respectively. Finally, section 6 draws
conclusions.

2. The time structure
In this paper, we shall adopt the general time theory
proposed in [8], which takes a nonempty set of
primitive time elements, with an immediate predecessor
relation, Meets, over time elements, and a duration
assignment function, Dur, from time elements to nonnegative real numbers. If Dur(t) = 0, then t is called a
point; otherwise, that is Dur(t) >0, t is called an interval
(see detailed characterization of such a time structure in
[8]).
Analogous to the 13 relations introduced by Allen for
intervals [1,2], there are 30 exclusive temporal order
relations over time elements including both time points
and time intervals, which can be classified into the
following 4 groups:
• {Equal, Before, After}
which relate points to points;
• {Before, After, Meets, Met_by, Starts, During.
Finishes}
which relate points to intervals;
• {Before, After, Meets, Met_by, Started_by,
Contains, Finished_by}
which relate intervals to points;
• {Equal, Before, After, Meets, Met_by, Overlaps,
Overlapped_by, Starts, Started_by, During,
Contains, Finishes, Finished_by}
which relate intervals to intervals.

3. A graphical representation
In general, the temporal order relation between two
time elements can be any one of those 30 as classified
in section 2. However, as shown in [8], analogous to
Allen and Hayes’s approach [3], all the temporal can be
defined as derived relations in terms of the single
“Meets” relation. In fact, such definitions are
straightforward. For example, “Before” is defined as:
Before(t1, t2) ⇔ ∃t(Meets(t1, t) ∧ Meets(t, t2))
Therefore, for a given scenario s, if the temporal
information is expressed as a collection of statements,
together with the corresponding temporal reference,
such temporal reference can be denoted as a triad (T, M,
D), where T is a collection of time elements, expressing
the knowledge of what time elements are involved with
respect to the corresponding scenario; M is a collection
of Meets relations over T, expressing the knowledge
(possibly incomplete) as to how the time elements in T
are related by means of the primitive immediate
predecessor relationship; and D is a collection of
duration assignments (possibly incomplete) to time
elements in T.
A given temporal reference (T, M, D) can be
intuitively expressed in terms of a directed and partially
weighted graph [7], in which time elements are denoted
as arcs, and the immediate predecessor relationship over
times is denoted by the node structure where Meets(ti,

tj) is represented by ti being an in-arc and an tj being
out-arc to a common node, respectively. For time
elements with known duration, the corresponding arcs
are weighted by their durations respectively. For
example, consider a scenario with a temporal reference
(T, M, D), where
T = {t1, t2, t3, t4, t5, t6, t7, t8, t9};
M = {Meets(t1, t2), Meets(t1, t3), Meets(t2, t5),
Meets(t2, t6), Meets(t3, t4), Meets(t4, t7),
Meets(t5, t8), Meets(t6, t7), Meets(t7, t8);
D = {Dur(t2) = 1, Dur(t4) = 0.5,
Dur(t6) = 0, Dur(t8) = 0.3}
The graphical representation of temporal reference (T,
M, D) is shown in Figure 1:

t4 (0.5)
t7

t3
t1

t6 (0)
t2 (1)

t5

t8 (0.3)

Figure 1

4. Temporal consistency checking
The necessary and sufficient condition for the
consistency of a general temporal reference, (T, M, D),
can be given as below (see details in [7]):
1) For each simple circuit in the graph of (T, M,
D), the directed sum of weights is zero;
2) For any two adjacent time elements, the directed
sum of weights is bigger than zero.
Here, condition 1) guarantees that there exists a valid
duration assignment function Dur to the time elements
in T agreeing upon D; and condition 2) ensures that no
two time points meet each other, that is between any
two time points, there is an interval standing between
them [8].
The consistency checking for a temporal reference
with duration constraints involves searching for simple
circuits, and constructing a numerical constraint for
each circuit. The existence of a solution(s) to this set of
constraints implies the consistency of the system, and
each solution gives a possible case for the
corresponding scenario that can subsume the addressed
temporal reference. Hence, the consistency checker for
a random temporal reference is in fact a linear
programming problem.
In fact, in the graph presented in Figure 1 of section
3, there are two simple circuits as shown in Figure 2
and 3, respectively.
Setting the directed sum of weights in each of these
two circuits as 0, we get 2 independent constraints:
Dur(t2) + Dur(t6) = Dur(t3) + Dur(t4)
Dur(t5) = Dur(t6) + Dur(t7)
We can easily find a solution, for instance: Dur(t3) =
0.5, Dur(t5) = Dur(t7) = 1. Actually, the duration
assignment to t5 and t7 can be any positive real number,
provided that Dur(t5) = Dur(t7).

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

t4 (0.5)

t3

t6 (0)

If t2 is not known to be a time point, then the
corresponding graph shown in Figure 4 is acyclic, and
hence the network is consistent.
However, if t2 is stated to be a point, then the graph
in Figure 4 is reduced to the graph as shown in Figure
5.

t4

t2 (1)
Figure 2

t3

t5

t7

t6 (0)

t1

t6
Figure 5

t5

Now, in the reduced graph in Figure 5, where is a
cycle, i.e., t3 -> t4 -> t5 -> t3, therefore the temporal
reference is inconsistent.

Figure 3

In some special cases where only relative temporal
knowledge are addressed, that is there is no duration
constraint involved, temporal reference (T, M, D) is
reduced to a pair (T, M) and the consistency checking
can be reformulated in a simpler form. In fact, (T, M) is
consistent if and only if:
1)' There are no nodes with at least one point in-arc
and at least one point out-arc;
2)' The associated reduced graph is acyclic, where
the associated reduced graph is formed by means
of removing every point arc in the graph of (T,
D), and merging any two nodes connected by the
point arc.
Here, again, condition 1)' preserves that no two time
points meet each other, while condition 2)' preserves
that time points are not decomposable, and excludes
any circular time structure.
For example, consider a relative temporal reference
(T, M), where
T = {t1, t2, t3, t4, t5, t6}
M = {Meets(t1, t2), Meets(t1, t3), Meets(t2, t6),
Meets(t3, t4), Meets(t4, t5), Meets(t5, t6)}
The graphical representation of temporal reference (T,
M) is shown in Figure 4:

t4

t5

t3

t1

t2
Figure 4

t6

5. Visualization of the consistency checker
Based on the theory, methodology and mechanism
presented in sections 2-4, a visual consistency checker
for temporal systems is implemented. Equivalences
between the Meets relations and other 12 derived
temporal order relations, as well as the corresponding
constraints, are expressed as rules in the inference
engine. Therefore, for a given scenario, the user can
express the temporal reference by a set of time elements
together with the temporal order relations in terms of
any of those 30 classified in section 2, and the
corresponding duration constraints (if any). The system
can provide a visual expression of the temporal
reference in terms of a directed and partially weighted
graph, and check if it is consistent or not. If it is
consistent, the system can list the possible cases for the
corresponding scenario that will subsume the addressed
temporal reference. If it is inconsistent, the systems can
identify the part that leads to the inconsistency.
As an example, consider the scenario where two
persons, Peter and Jack, are suspected of committing a
murder during the daytime. In court, Jack and Peter
gave the following statements, respectively:
• Peter’s statements:
I got home with Jack before 1pm. We had our
lunch, and when Jack left I put on a video. The
video lasts 2 hours. Before it finished, Robert
arrived. When the video finished we went to the
train station and waited until Jack came at 4 pm.
• Jack’s statements:
Peter and me went to his home and arrived there
before 1pm. When we finished our lunch there,
Peter put on a video, and I left and went to the

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

supermarket. I stayed there for between 1 and 2
hours. Then I drove to my home to collect some
mail. It takes between 1.5 to 2 hours to reach my
home, and about the same to the train station. I
arrived at the train station at 4 pm.
• In addition, being a witness, Robert made these
statements:
I left home at 2 pm and went to Peter’s house. He
was playing a video, and we waited till it finished.
Then we went together to the train station and
waited for Jack. Jack got to the train station at
4pm.
The temporal reference of the above scenario
involves the following time elements:
• i1: the time (interval) over which Peter and Jack
went to Peter’s home;
• 1pm: the time (point) before which they arrived at
Peter’s home;
• i2: the time (interval) over which Peter and Jack
had lunch;
• i3: the time (interval) over which Peter played the
video (Dur(i3) = 2);
• i4: the time (interval) over which Jack went to the
supermarket;
• p1: the time (point) when Robert arrived at Peter’s
house;
• i5: the time (interval) over which Peter and Robert
went to the train station;
• i6: the time (interval) over which Peter and Robert
waited for Jack at the train station;
• 4pm: the time (point) when Jack arrived at the train
station;
• i7: the time (interval) over which Jack stayed in the
supermarket (1<Dur(i7)< 2);
• i8: the time (interval) over which Jack drove to his
home (1.5<Dur(i8)< 2);
• i9: the time (interval) over which Jack collected
some post from his home;
• i10: the time (interval) over which Jack drove to the
train station (1.5<Dur(i10)<2);
• 2pm:the time (point) when Robert left home;
• i11: the time (interval) over which Robert went to
Peter's house;
• i12: the time (interval) over which Peter and Robert
watched the video together;
• i13, i14, ..., i27: some extra relative time elements
which are used for expressing the correspondingly
relative duration knowledge, e.g., with i19, i20, i21,
i22, and Dur(i19) = 1.5 and Dur(i21) = 2, we can
express that 1.5 < Dur(i8) < 2 (Picture 3)
The main scenario can be entered into the database as
shown in Picture 1, and the corresponding temporal
reference in terms of Element (time elements), Type
(point or interval), Duration (non-negative real number
or null), Unit (year, month, week, day, hour, minute,
second, …, Not Known, NA), Class (original or
relative) and Description entered into the system is
shown as in Picture 2.

Picture 1 (Scenario Screen)

Picture 2 (Temporal Reference Screen)

The following picture shows the corresponding
graphical representation:

Picture 3 (Graph Screen)

From Picture 3, we see that there are three time
elements (i.e., two intervals, i11 and i12, and one points,
p1) standing between 2pm and 4pm. Since each interval
has a positive duration and each point has a nonnegative duration, we can infer that:

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

(5.1) Dur(i5) + Dur(i6) < 2
in addition, since Dur(i3) = 2, hence
(5.2) Dur(i3) + Dur(i5) + Dur(i6) < 2 + 2 = 4
However,
(5.3) Dur(i4) + Dur(i7) + Dur(i8) + Dur(i9) + Dur(i10)
> 0 + 1 + 1.5 + 0 + 1.5 = 4
Therefore, for the simple circuit, i.e., i3, i5, i6, i10, i9,
i8, i7, i4, as shown below in Picture 4, there does not
exist any duration assignment over T such that
Dur(i3) + Dur(i5) + Dur(i6)
= Dur(i4) + Dur(i7) + Dur(i8) + Dur(i9) + Dur(i10)
In other words, there is no solution to the following
linear equation:
Dur(i3) + Dur(i5) + Dur(i6) − Dur(i4)
− Dur(i7) − Dur(i8) − Dur(i9) − Dur(i10) = 0
Picture 6 (Scenario Analysis Screen)

6. Conclusions

Picture 4 (A simple circuit)
Hence, the temporal reference shown in Picture 3 is
inconsistent, and therefore we can directly confirm that
some statements in the scenario are untrue. Suppose the
video can be checked that it did actually last for two
hours, we can confirm that there must be some falsity in
either Robert's or Jack's statements. If it can be proved
that Robert did leave home at 2 pm, then Jack must
have lied in making his statements. Otherwise, to
convince the jury that his statements are true, Jack must
prove that Robert left home at some time before 2
o’clock in the afternoon.
What follows are two more sample screenshots from
the visual consistency checker:

In this paper, we present a visualized consistency
checker for temporal references with respect to given
scenarios. It allows expression of both absolute and
relative temporal knowledge, and provides visual
representation of temporal references in terms of
directed and partially weighted graphs. Based on the
temporal reference of a given scenario, the system can
check if the scenario is temporally consistent or
inconsistent.

References
[1] J. Allen, “Maintaining knowledge about temporal
intervals”, Communications of the ACM 26 (11), 1983,
pp.832-843.
[2] J. Allen, “Towards a General Theory of Action and Time”,
Artificial Intelligence 23, 1984, pp.123-154.

[3] J. Allen and P. Hayes, “Moments and Points in an
Interval-based Temporal-based Logic”, Computational
Intelligence 5, 1989, pp.225-238.
[4] van J. Benthem, The Logic of Time, Kluwer
Academic, Dordrech, 1983.
[5] A. Galton, “Critical Examination of Allen's Theory
of Action and Time”, Artificial Intelligence 42, 1990,
pp.159-188.
[6] C. Jensen, J. Clifford, S. Gadia, A. Segev and R.
Snodgrass, “A Glossary of Temporal Database Concepts”,
SIGMOD RECORD 21(3), 1992, pp.35-43.
[7] B. Knight and J. Ma, “A General Temporal Model
Supporting Duration Reasoning”, Artificial Intelligence
Communication 5(2), 1992, pp.75-84.

Picture 5 (Relation Screen)

[8] J. Ma and B. Knight, “A General Temporal Theory”, The
Computer Journal 37(2), 1994, pp.114-123.

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

[9] J. Ma and B. Knight, “A Reified Temporal Logic”, The
Computer Journal 39(9), 1996, pp.800-807.

[11] L. Vila, “A Survey on Temporal Reasoning in Artificial
Intelligence”, AI Communication 7(1), 1994, pp.4-28.

[10] J. Ma and B. Knight, “Representing The Dividing
Instant”, the Computer Journal 46(2), 2003, pp.213222.

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

