A Framework for Visualising Large Graphs
Wanchun Li, Seok-Hee Hong, Peter Eades
School of Information Technologies
University of Sydney
NSW, 2006, Australia
{lpaul, shhong, peter}@it.usyd.edu.au
Abstract
Visualising large graphs faces the challenges of both
data complexity and visual complexity. This paper presents
a framework for visualising large graphs that reduces data
complexity using the clustered graph model and provides
users with navigational approaches for browsing clustered
graphs. A key design task of such a system is to deﬁne a
strategy for generating logical abstractions of a clustered
graph during navigation. An appropriate abstraction strategy should represent a clustered graph well and avoid visual
overload. The semantic ﬁsheye view of a clustered graph is
proposed for such a purpose. Two case studies were investigated, and the experiment results show that during navigation the ﬁrst-order ﬁsheye view of a clustered graph conserves visual complexity at a constant level.

1. Introduction
Much information is of relational nature. Relational information can be modelled by graphs. Visualisation can
help one comprehend relational information represented by
graphs quickly and effectively.
As the amount of information has increased rapidly,
graph visualisation is faced with the challenge of complexity. The problem of complexity rises from two aspects,
namely, data complexity and visual complexity.
Data complexity arises from the size of graphs modelling
information. Large graphs with thousands, or even millions,
of nodes and edges often occur in reality. It has been a central challenge for graph visualisation researchers to automatically generate readable layouts of such large graphs.
Intuitively, visual complexity measures the amount of
complexity of a screen presented to the user. The challenge of visual complexity is due to limitations on human
processing capacity. Humans process information using the
memory system. The capacity of the memory system is very
limited for processing information. A user can only manage

a small amount of information at a time. Therefore, a good
visualisation of a graph should avoid high visual complexity in order to ease user’s cognitive load. It is a particularly
important issue in a dynamic environment of graph visualisation, in which users can browse a graph, analyse and/or
edit information.
Several non-classical graph models have been introduced
to reduce data complexity. One of which is the clustered
graph model [5]. The basic idea of the clustered graph
model is to group nodes and edges of a classical graph into
“super nodes” and “super edges”. Super nodes and super
edges are logical abstractions of normal nodes and normal
edges. Super nodes are organized as a hierarchical structure,
and different levels in a hierarchy represent different levels
of details of the associated classical graph. Thus, an effective method for visualising a large graph is ﬁrst to partition
the graphs to create a clustered graph, and then visualise the
hierarchical structures underlying the clustered graph.
Many research efforts have been dedicated to visualising
large hierarchies [4]. Existing approaches can be categorized as static methods and navigational methods. Static
methods ﬁrst draw a whole picture of a hierarchy, then employ visualisation techniques to read the details of a speciﬁc
part of the picture. Navigational methods make use of visualisation techniques to let users browse a whole structure
by reading a part of the whole data step by step.
Visualisation techniques are broadly classiﬁed as Zooming and Panning and Focus+Context [4]. A Zooming and
Panning technique lets users read details of a speciﬁc part
by zooming it as the focus in a separate window, and change
the focus by moving the window [3] [16] [17]. In general,
Zooming and Panning techniques are simple to understand
and implement, but they do not integrate a user’s focus and
global context very well. Focus+Context techniques simultaneously access speciﬁc details and global context. They
can be further grouped as geometric approaches and semantic approaches. A geometric Focus+Context technique geometrically magniﬁes and reduced magniﬁes the focus area
and peripheral contexts respectively [1] [7] [9] [12] [13].

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

A potential problem of such a technique is that geometric
distortions can increase visual complexity in some cases.
Semantic Focus+Context approaches present a logical abstraction of a large structure using some semantic ﬁltering
rule. A key task of a semantic approach is to deﬁne a semantic ﬁltering strategy to form an appropriate abstraction
of the whole structure, so that the abstraction can represent
the structure well. A well-known approach is the semantic
ﬁsheye view [6] (See 2.2 for details).
Most visualisation techniques mentioned above solve the
problem of complexity from the aspect of data complexity.
By reducing data complexity, visual complexity is reduced
as well. Recently, Pulo proposed a navigation technique for
large hierarchies by solving the problem of complexity from
the aspect of visual complexity [11]. This technique conserves constant visual complexity during navigation of large
hierarchies. A visualisation system that conserves constant
visual complexity avoids visual overload caused by increasing visual complexity, so that users can comprehend visual
information with reasonable cognitive load.
An important visualisation rule is Tufte’s Data-Ink principle [15]. The basic idea of the Data-Ink principle is to
present the greatest possible amount of data by the least possible amount of visual representation. Conserving constant
visual complexity is a variant in dynamic visualisation environments of the Data-Ink principle, presenting the greatest
possible amount of data with constant amount of visual representation in response to user interaction.
In this paper, we propose a framework for visualising
large graphs. In this framework, a large graph is ﬁrst partitioned to create a clustered graph, and then a navigational
approach is employed to navigate the clustered graph. A
key design task of such a visualisation system is to deﬁne
a strategy for generating logical abstractions of a clustered
graph during navigation. One criterion of an appropriate
strategy is to avoid visual overload during navigation. We
propose the semantic ﬁsheye view of a clustered graph as
such an abstraction strategy. Two case studies were investigated and the experiment results demonstrate that the ﬁrstorder ﬁsheye view of a clustered graph conserves constant
visual complexity.

2. Preliminaries

leaf-clusters and super-clusters are referred to as clusters.
The root of T is also referred to as the root-cluster. Suppose
cs is a super-cluster and cchild is a child of cs in T , then
cchild is called a child-cluster of cs , and cs is the parentcluster of cchild .
An abridgement is a logical abstraction of a clustered
graph, in which super-clusters have two states, opened and
closed, and every descendent of a closed super-cluster is
closed. Figure 1 shows a clustered graph and one of its
abridgements, in which child-clusters of cluster 2 and 4 are
closed.

(a) A clustered graph

Figure 1. A clustered graph and one of its
abridgements

2.2. Semantic Fisheye View
Semantic ﬁsheye view is a semantic focus+context visualisation technique proposed by Furnas [6]. Semantic ﬁsheye view uses Degree of Interest (DOI) to measure how a
point in the structure is related to the focus. Given a focus
point y, a point x in structure S, a generalized DOI function
is proposed in [6] as Equation 1
DOIf isheye (x|y) = AP I(x) − D(x, y)

(1)

where
AP I(x) is a priori importance of point x,
D(x, y) is the distance between x and y.
Specially, the DOI function of a tree structure can be deﬁned
as Equation 2
DOIf isheye (x|y) = −dtree (x, root) − dtree (x, y)

2.1. Graphs and Clustered Graphs
A graph consists of a ﬁnite set of nodes and a ﬁnite set
of edges. A tree is a connected graph without cycles. A
rooted tree is a tree in which a special node is singled out.
A clustered graph C = (G, T ) consists of a graph G, and a
rooted tree T (called the cluster tree). The leaves of T are
exactly the nodes of G. The leaves of T are leaf-clusters
of C and non-leaf nodes of T are super-clusters of C; both

(b) An abridgement of 1(a)

(2)

where
dtree (x, root) is the distance from point x to the root,
dtree (x, y) is the distance from point x to the focus y.
Figure 2 shows a sample of calculating DOIs of a tree structure.
A semantic ﬁsheye view is generated by ﬁltering the
nodes whose DOI is lower than a speciﬁed threshold value.
According to Equation 2, the focus and its direct ancestors

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

stage, information is reorganized and a good deal of information gets lost during the process of reorganization. Figure 4 is the schematic view of human memory system.

Figure 2. DOIs of a tree with the solid node as
the focus.
Figure 4. A schematic view of memory system

The sensory memory is related to the speciﬁc sense organs for receiving information such as eyes or ears, and
long-term memory is the knowledge store of the human system. Processing tasks are mainly handled by short-term
memory. Short-term memory have two important characteristics.
(a) Original view of a (b) A semantic ﬁsheye
tree
view in the ﬁrst-order

• Capacity is limited. It usually contains only 7+/-2
items [10]

Figure 3. A semantic ﬁsheye view of a tree
with the solid node as the focus

• Memory decays quickly. Information is lost within
200ms unless refreshed [8]

are of the most interest in a tree structure because they have
the largest DOI. A semantic ﬁsheye view of a tree is in the
zero-order if it consists of the nodes of the most interesting subset. A semantic ﬁsheye view is in the ﬁrst-order if it
includes the next most interesting subset, which are the siblings of the focus and of the focus’s direct ancestors. Figure 8 shows samples of semantic ﬁsheye view in ﬁrst-order.

3. Visual Complexity of Graph Visualisation
Visual complexity of a visualization of a graph can be
understood as the combination of characters of visible elements and features of the underlying layout. The visible
elements refer to nodes, edges, labels and colors, and their
characters refer to diversity and variety. The features of layout include asymmetry, dimensionality, etc.
Humans process information using the memory system.
The memory system includes three stages, namely, sensory memory, short-term memory, and long-term memory.
When humans process information, information is passed
through each individual memory stage from sensory memory to short-term memory to long-term memory. In each

Thus, a user can manage only a limited amount of information at a time, and a visualization of a graph should
avoid high visual complexity in order to ease user’s cognitive load.

4. Reference Models for a Framework for Visualising Large Graphs
This section describes our framework for visualising
large graphs. We ﬁrst brieﬂy discuss a general reference
model for information visualisation proposed by Card et
al. [4]. Then we propose a reference model for graph visualisation that is built on the general model. Finally, we
present the reference model for our framework by extending the reference model for graph visualisation.

4.1. A Reference Model for General Information
Visualisation
Card et al. [4] propose a general reference model for
information visualisation that is composed of four components, namely, raw data, data table, visual structure, and
view. This model is named as the general visualisation
model in this paper.

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

The general visualisation model views visualisation as
“adjustable mapping from data to visual form to human perceiver” [4]. Figure 5 shows this model. In this picture, arrows that ﬂow from left to right indicate the transformations
from one component to another, while arrows from right to
left indicate adjustments to the visualisation system by human interactions.
Figure 6. The graph visualisation model

Figure 5. The general visualisation model

In this model, raw data is stored in an idiosyncratic format. Data transformations ﬁnd some relations inside raw
data and transform the data into data tables that are relational structures. Visual mappings assign spatial and graphical properties to relational structures. Views are created
by applying some visualisation speciﬁcation to visual structures. Users can adjust the visualisation process by interaction with a visualisation system.

4.2. A Reference Model for Graph Visualisation
Graph visualisation aims to visualise relational structures, which is the core tasks of visual mappings and view
transformation of the general visualisation model in Figure 5. This section proposes a reference model for graph
visualisation that is built on the general visualisation model.
The proposed model consists of three components,
namely, graph, visual structure, and view. In this model,
the component of graph is used to model relational data,
which is represented as data table in the general visualisation model in Figure 5. The components of visual structures
and views have the same meanings as those of the general
visualisation model. This model is named as the graph visualisation model in this paper.
Figure 6 shows the graph visualisation model. In this
picture, there are two kinds of arrowed lines. The solid arrowed lines represent data ﬂow, and the attached labels indicate techniques required. The dashed lines represent communication ﬂow, and the attached labels indicate the tasks
transformed by the associated communication ﬂows.
Graph drawing algorithms compute spatial and graphical properties of a graph to generate visual structures, and
such algorithms are studied in [2]. Visualisation techniques
have two functionalities: to add extra visual features and/or

functionalities to visual structures, and to generate a view
based on visual structures. Views present the data stored
in graphs, and users process the information conveyed by
views. Users can interact with views by interaction techniques employed in a graph visualisation systems. Requests
of users are handled by a visualisation system. If a response
to a user’s request does not change a view of the data, the
task might be taken by the techniques of visualisation. Otherwise, graph drawing algorithms might be involved to handle the request.

4.3. A Reference Model for Visualising Large
Graphs
The reference model for our framework for visualising
large graphs is an extension of the graph visualisation model
in Figure 7. It concentrates on generating views of graphs
in the graph visualisation model in navigational approaches
for visualising large graphs. This model consists of four
components, namely, graph, clustered graph, abridgement,
and view. This model is named as the large graph visualisation model in this paper.

Figure 7. The large graph visualisation model

Figure 7 shows the large graph visualisation model. In
this picture, the four components are connected by arrowed
lines, and the labels indicate the operation to transform one
component to another.
The basic idea of the large graph visualisation model is
to partition a large graph to create a clustered graph. The
clustered graph is represented by one of its abridgements as

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

its logical abstraction. Views of the abridgement are created in the way discussed according to the graph visualisation model in Figure 6. Users comprehend the information
conveyed by a view, and interact with the view in order to
obtain more information of the underlying clustered graph.
Requests of users are sent to the component of clustered
graph, which responds the request by updating the abridgement.
In a visualisation system of the large graph visualisation
model, the key task is to ﬁnd an abstraction strategy that
can generate appropriate abridgements of a clustered graph
during navigation. An appropriate abridgement should have
the properties as follows:

(a) A ﬁrst-order ﬁsheye view of a graph

1. containing enough information to represent the clustered graph,
2. preserving the context of the previous view in response
to users’ request, and
3. limiting visual complexity in the views created.

5. The Semantic Fisheye View of a Clustered
Graph
This section discusses the semantic ﬁsheye view of a
clustered graph. Hereafter, “ﬁsheye view” refers to semantic ﬁsheye view.
A cluster c has two structural properties in a clustered
graph C = (G, T ). One is the structural property in the
cluster tree T , and the other is that in the underlying graph
G. A ﬁsheye view of a clustered graph is a combination
of the ﬁsheye views of T and G. A ﬁrst-order ﬁsheye view
of a clustered graph C = (G, T ) is an abridgement, whose
clusters belong to the ﬁrst-order ﬁsheye view of either T or
G. A cluster that does not belong to a ﬁsheye view of a
clustered graph is called a unrelated cluster to the ﬁsheye
view.

5.1. Fisheye Views of Graphs
If all nodes of a graph are assumed to have the same API,
then the DOI function of the graph according to Equation 1
is
(3)
DOIf isheye (x|y) = −D(x, y)
where D(x, y) is the graph distance between a node x and
a focus y.
Hence, the DOI value of a node of a graph is the negative
of the graph distance to a focus. A ﬁrst-order ﬁsheye view
of a graph contains all the nodes whose graph distances to a
focus are not larger than 1. Figure 8(a) shows a sample of a
ﬁrst-order ﬁsheye view of a graph with the solid node as the
focus: the left picture shows a graph, and the right picture
shows the ﬁsheye view in ﬁrst-order.

(b) A ﬁrst-order ﬁsheye view of a clustered graph

Figure 8. An example of the ﬁrst-order ﬁsheye
view of a clustered graph

5.2. Fisheye Views of a Clustered Graph
Figure 8(b) is a sample of a ﬁrst-order ﬁsheye view of a
clustered graph with the solid cluster as the focus. The left
picture shows a clustered graph, and the right picture shows
the ﬁsheye view.
In this clustered graph, all clusters under cluster c1 are
unrelated clusters, and they are closed in the ﬁsheye view.
The cluster c1 is not an unrelated cluster because it belongs
to the ﬁrst-order ﬁsheye view of the cluster tree. Clusters
under cluster c2 are the focus and its siblings. All siblings of a focus belong to the ﬁrst-order ﬁsheye view of
the cluster tree. The clusters under cluster c3 belong to the
ﬁrst-order ﬁsheye view of the underlying graph. One childcluster of cluster c4 belongs to the ﬁrst-order ﬁsheye view of
the underlying graph, but the other two are unrelated clusters. The two unrelated clusters are clustered under a newly
created pseudo-cluster, which is specially created for containing unrelated cluster but does not have a name and is
represented here by a shaded oval.

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

6. The First-Order Fisheye View as an Abstraction Strategy
The ﬁsheye view of a clustered graph can be used as an
abstraction strategy in our framework. This section investigates the issues of using the ﬁrst-order ﬁsheye view as an
abstraction strategy.

(a) The initial view

6.1. Overview
In a visualisation system that employs the ﬁrst-order ﬁsheye view as the abstraction strategy according to the large
graph visualisation model in Figure 7, navigation begins
with an initial view of a clustered graph C = (G, T ). Users
can open a super-cluster in a view, and the view is updated
in response to user interaction. The view with which the
user interacts is called a presented view, and the updated
view is a responded view. The corresponding abridgements
of the initial view, a presented view, and a responded view
are called the initial abridgement, a presented abridgement
and a responded abridgement respectively.

(b) A responded view V1

The initial abridgement consists of clusters of the ﬁrstorder ﬁsheye view of C with the root-cluster as the focus.
The initial view is the ﬁrst presented view. In a presented
view, users can click a super-cluster, cf , to see more details of the super-cluster. A responded view is a view of a
responded abridgement that contains all clusters of the ﬁrstorder ﬁsheye view of the corresponding presented abridgement with cf as the focus, plus the child-clusters of the focus, which are opened in response to requests from users.

6.2. Sample
(c) A temporal view T1

Figure 9 shows a sample of the navigation process. Figure 9(a) is the initial view IV , and cluster 3 is picked as
the focus. Figure 9(b) shows a responded view V1 , whose
corresponding presented view is IV . In V1 , child-clusters
of cluster 3 are opened to present to users. Figure 9(c)
shows that cluster 4 is picked as a new focus in V1 . In
this picture, those clusters whose sizes are compressed are
the unrelated clusters to the ﬁsheye view of this clustered
graph with cluster 4 as the focus. Figure 9(d) shows that
all unrelated-clusters under the same clusters are clustered
under a newly created pseudo-cluster, which is shaded without a label. Figure 9(e) shows another responded view V2 ,
whose corresponding presented view is V1 . In V2 , the childclusters of the focus, cluster 4, are displayed as the details
in response to user interaction.

(d) A temporal view T2

(e) A responded view V2

Figure 9. Applying the ﬁrst-order ﬁsheye view
as an abstraction strategy

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

6.3. Discussion

6.3.3 The Multiple Foci Fisheye View of a Clustered
Graph

6.3.1 Adjustment of a Fisheye View of a Clustered
Graph

Multiple foci ﬁsheye view can be generated by combining
several individual ﬁsheye views that have a single focus.
Multiple foci allows user to see details of several superclusters at the same time.

A ﬁsheye view can be enlarged or compressed by increasing
or decreasing the number of clusters contained in it.
• A higher order ﬁsheye view of a clustered graph can
increase the number of clusters in a ﬁsheye view of a
clustered graph. This paper investigates two case studies the ﬁrst-order ﬁsheye view as the abstraction strategy of the large graph visualisation model (see Section 7). Higher order ﬁsheye views are also applicable for such a purpose. However, a higher order ﬁsheye view tends to cause higher visual complexity for a
large clustered graphs.
• The ﬁrst-order ﬁsheye view might contain more clusters than a visualisation system wants. In such cases, it
is necessary to decrease the number of clusters in the
ﬁsheye view.
A ﬁsheye view of a clustered graph is a combination of
the ﬁsheye views of both the cluster tree and the underlying graph. A reduction of the number of clusters of
a ﬁsheye view can be obtained by decreasing the sizes
of both ﬁsheye views.
– Furnas proposes a method to decrease the size
of a ﬁsheye view of a tree by further ﬁltering
nodes that are geometrically far from the focus
in a drawing of ﬁsheye view [6].
– A ﬁsheye view of a graph can further ﬁlter some
nodes using a different DOI function. In Equation 3, all nodes in a graph are assumed to have
the same API. However, other API functions are
possible. One way is to assign a higher API to a
node with higher degree, and the size of a generated ﬁsheye view can be reduced using a higher
threshold value.
6.3.2 Conserving Constant Visual Complexity
The ﬁrst-order ﬁsheye view of a clustered graph can conserve constant visual complexity (See the case studies in 7).
However, the amount of visual complexity cannot be ﬁnely
controlled but is dependent on the size of the ﬁsheye view.
In other words, the ﬁrst-order ﬁsheye view of a clustered
graph can conserve constant visual complexity, but it cannot
determine the amount of visual complexity. The adjustment
methods discussed above can be used to ﬁnely control the
amount of visual complexity with Pulo’s ﬁltering rules [11]
as an extra restriction.

7. Case Studies
This section investigates the proposed concepts with case
studies in two different application domains: navigating
software architectures and navigating citation graphs.

7.1. Experiment Description
Experiments were carried out to compare the visual complexity of the ﬁrst-order ﬁsheye views of a clustered graph
to that of an incremental drawing without ﬁltering clusters during navigation. A view generated in an incremental
drawing is called an incremental view. The visual complexity is calculated as the number of visualized clusters on a
screen.
The experiment results were collected from 10 tests. In
each test, the experiment ﬁrst tested the visual complexity
of the incremental views. It begun with the initial view of
a clustered graph, and successively chose a random cluster
as the focus cluster to explore until all super-clusters were
opened. Then the experiment interacted with the clustered
graphs with the same number of interactions, but responded
with the ﬁrst-order ﬁsheye views.

7.2. Case study 1: navigating the architecture of the
C488 compiler
The C488 compiler is an example software package
shipped with Swagkit, which is a toolkit to extract, abstract
and present software architectures [14]. The architecture
is modelled by a clustered graph, in which super-clusters
represent packages and subpackages; leaf-clusters represent
single ﬁles; and edges represent the relationship of link or
reference. This clustered graph has 234 clusters and 424
edges.
Figure 10(a) presents results for visual complexity. In
this picture, ﬁsheye view and incremental view are denoted
by F V and IV respectively. We can see from this ﬁgure that the number of visualized clusters in the ﬁsheye
views are always less than 50, and in the incremental views
sharply increases until all 234 clusters are opened.

7.3. Case study 2: navigating a citation graph
The dataset consists of the papers from eight years
(1995-2002) of the IEEE InfoVis Conference and the ci-

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

tations within these papers. This citation graph is ﬁrst clustered by the paper’s topics. In each of these topics, the
papers are further partitioned by their year of publication.
Thus, the cluster tree of the InfoVis citation clustered graph
has three levels, super-clusters representing topics and year
of publication, and leaf-clusters representing the papers.
The edges of this clustered graph represent the citations
within the papers. The InfoVis citation clustered graph has
227 clusters and 132 edges.

(a) Results for visual complexity of case study 1

(b) Results for visual complexity of case study 2

Figure 10. Results for visual complexity

Figure 10(b) presents the results. We can see that the
number of the visualized clusters in the ﬁsheye views is in a
range of about 20 to 30, and in the incremental views keeps
increasing until all clusters are opened.

7.4. Results
The results of both case studies demonstrate that the ﬁrstorder ﬁsheye view of a clustered graph conserves a constant
level of visual complexity. Thus, it avoids visual overload
by increasing cognitive load during navigation.

8. Conclusion
A framework for visualising large graphs is proposed in
this paper. This framework reduces data complexity using
the clustered graph model, and the semantic ﬁsheye view
of a clustered graph is proposed as an abstraction strategy
of a clustered graph during navigation. Two case studies

were investigated, and the experiment results demonstrate
that the ﬁrst-order semantic ﬁsheye view conserves constant
visual complexity during navigation.

References
[1] M. Apperley, I. Tzavaras, and R. Spence. A bifocal display technique for data presentation. In Proceedings of Eurographics’82, Conference of the European Association for
Computer Graphics, pages 27–43, 1982.
[2] G. D. Battista, P. Eades, R. Tamassia, and I. Tollis. Graph
Drawing: Algorithms for the Visualization of Graphs. Prentice Hall, 1998.
[3] B. Bederson, L. Stead, and J. Hollan. Pad++: Advances in
multiscale interfaces. In ACM Conference on Human Factors in Computing Systems (CHI’94), pages 315–316, 1994.
[4] S. K. Card, J. D. MacKinlay, and B. Shneiderman. Readings
in Information Visualization—Using Vision to Think. Morgan Kaufmann Publishers, 1999.
[5] W. Feng. Algorithms for Drawing Clustered Graphs. PhD
thesis, University of Newcastle, 1997.
[6] G. W. Furnas. Generalized ﬁsheye views. In ACM Conference on Human Factors in Computing Systems (CHI’86),
pages 16–23, 1986.
[7] J. Lamping and R. Rao. Laying out and visualizing large
trees using a hyperbolic space. In 7th annual ACM symposium on User interface software and technology, pages
13–14. ACM Press, 1994.
[8] G. Loftus and E. Loftus. Human Memory: the Processing of
Information. Lawrence Erlbaum Associates, Inc, 1976.
[9] J. D. Mackinlay, G. G. Robertson, and C. K. Card. The
perspective wall: Detail and context smoothly integrated. In
ACM Conference on Human Factors in Computing Systems
(CHI’91), pages 173–179, 1991.
[10] I. Miller. The magical number seven, plus or minus two:
Some limits on our capacity for processing information. The
Psychologocial Review, 63, 1956.
[11] K. Pulo. Structural Focus + Context Navigation of Relational Data. PhD thesis, University of Sydney, submitted.
[12] G. Robertson, M. G., and S. Card. Cone trees: animated
3d visualizations of hierarchical information. In ACM Conference on Human Factors in Computing Systems (CHI’91),
pages 189–202, 1991.
[13] M. Sarkar and M. H. Brown. Graphical ﬁsheye views of
graphs. In ACM Conference on Human Factors in Computing Systems (CHI’92), pages 83–91. ACM Press, 1992.
[14] SWAG. http://swag.uwaterloo.ca/swagkit/.
[15] E. R. Tufte. The Visual Display of Quantitative Information.
Graphics Press, 1992.
[16] X. Wang and I. Miyamoto. The dragmag image magniﬁer. In
ACM Conference on Human Factors in Computing Systems
(CHI’95), pages 407–408, 1995.
[17] J. Wijk and A. Nuij. Smooth and efﬁcient zooming and panning. In INFOVIS’03, pages 15–22, 2003.

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

