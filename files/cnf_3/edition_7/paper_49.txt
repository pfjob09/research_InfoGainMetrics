A New Force-Directed Graph Drawing Method Based on Edge-Edge Repulsion∗
Chun-Cheng Lin, Hsu-Chun Yen†
Department of Electrical Engineering, National Taiwan University, Taipei, Taiwan 106, ROC
(sanlin@cobra.ee.ntu.edu.tw, yen@cc.ee.ntu.edu.tw)

Abstract
The conventional force-directed methods for drawing
undirected graphs are based on either vertex-vertex repulsion or vertex-edge repulsion. In this paper, we propose
a new force-directed method based on edge-edge repulsion to draw graphs. In our framework, edges are modelled as charged springs, and a ﬁnal drawing can be generated by adjusting positions of vertices according to spring
forces and the repulsive forces, derived from potential ﬁelds,
among edges. Different from the previous methods, our new
framework has the advantage of overcoming the problem
of zero angular resolution, guaranteeing the absence of any
overlapping of edges incident to the common vertex. Given
graph layouts probably generated by classical algorithms
as the inputs to our algorithm, experimental results reveal
that our approach produces promising drawings (especially
for trees and hypercubes) not only preserving the original
properties of a high degree of symmetry and uniform edge
length, but also preventing zero angular resolution. By allowing vertex-vertex overlapping, our algorithm also results in more symmetrical drawings.
Keywords: Force-directed method, potential ﬁeld, angular
resolution.

1

Introduction

As graphs are known to be one of the most important
abstract models in various scientiﬁc and engineering areas,
graph drawing (or information visualization in a broader
sense) has naturally emerged as a fast growing research
topic in computer science. Among various graph drawing
techniques reported in the literature, the so-called forcedirected methods (see, e.g., [1, 3, 4, 5, 8]) have received
much attention and have become very popular for drawing
general, undirected graphs. In such a framework, a graph is
viewed as a system of particles with forces acting between
the particles, and then a good conﬁguration or drawing of
∗ This

work was supported in part by NSC Grant 93-2213-E-002-003.
author

† Corresponding

the particles could be generated with locally minimal energy, i.e., the sum of the forces on each particle is zero.
Generally speaking, the notions of repulsions in the setting of conventional force-directed methods fall into two
categories, namely, vertex-vertex repulsion and vertex-edge
repulsion. First, Eades [5] presented a vertex-vertex repulsion model in which vertices are replaced with charged steel
rings and edges with springs to form a mechanical system.
The equilibrium conﬁguration, where the sum of repulsive
forces due to rings and attractive forces due to springs is
zero, normally results in a good drawing. Frunchterman
and Reingold [8] subsequently presented an effective modiﬁcation of the model.
In subsequent studies, vertex-edge repulsion models
have been proposed to prevent a vertex from being placed
too close to an edge, overcoming a potential shortcoming as
a result of using the vertex-vertex repulsion model. Davidson and Harel [4] used the paradigm of simulated annealing,
suited for combinatorial optimization problems, to draw
graphs. Their method tries to ﬁnd an optimal conﬁguration
according to a cost function inclusive of a measure for the
distance between each pair of vertex and edge. This measure penalizes the vertex and edge that are too close to each
other. In addition, Bertault [1] presented a force-directed
method based on vertex-edge repulsion to ensure that two
edges cross in the ﬁnal drawing if and only if they cross in
the initial layout as well.
Aesthetic criteria specify graphic structures and properties of drawing, such as minimizing number of edge crossings or bends, minimizing area, and so on, but the problem of simultaneously optimizing those criteria is, in many
cases, NP-hard. Among important aesthetic criteria, angular resolution refers to the smallest angle formed by
two neighboring edges incident to the common vertex in
straight line drawing, and constructing straight-line drawings of huge graphs with large angular resolution is very
important in visualization applications and, in addition, the
design of optical communications networks [7]. Formann
et al. [7] were the ﬁrst to study the angular resolution of
straight-line drawings, and showed that deciding whether a
graph of maximum degree d has an embedding with resolu-

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

tion 2π/d (obvious upper bound) is NP-hard.
The main aesthetic criteria concerned in this paper are
symmetry, uniform edge length, and maximization of angular resolution. Theoretical and experimental results (see,
e.g., [6] and [5]) have suggested that force-directed methods usually enjoy the merit of producing graph layouts with
a high degree of symmetry and uniform edge length. However, their graph layouts may have the problem of zero angular resolution1 , i.e., there exist at least two of the edges
incident to the common vertex overlapping, resulting in a
bad drawing with edge-edge and vertex-edge crossings simultaneously. In this paper, a new force-directed method
using the concept of edge-edge repulsion based upon the
theory of potential ﬁelds is presented to draw graphs without zero angular resolution. The concept of potential ﬁelds
has already found applications in a variety of areas in computer science and engineering, such as path planning [2]
and drawing of graph with nonuniform nodes [3], among
others. In our setting, the repulsive forces applied to an
edge are caused by its neighboring edge being present in
the potential ﬁeld.2 Although [2] has derived analytically
formulas of repulsive forces between two charged edges respectively, they are unnecessarily complicated to implement
practically. Therefore, as we shall see later in our derivation, the formulas of our edge-edge repulsion are very simple and can be implemented easily. Given a nice graph layout probably generated by classical force-directed methods
as the input of our algorithm, the experimental results reveal that our approach can produce a drawing not only preserving a high degree of symmetry and uniform edge length
but also preventing zero angular resolution. By allowing
vertex-vertex overlapping, our method often results in more
symmetrical drawings. Finally, because our model is suitable for drawing trees for which local minimal problems
are not as critical as for general graphs, our method can be
applied to producing dynamical balloon view drawings of
rooted trees usually used in the ﬁeld of information visualization.
The rest of this paper is organized as follows. Similar
to other force-directed methods, our method involves two
parts, i.e., the spring model and the optimal algorithm introduced in Section 2 and Section 3 respectively. Finally, a
conclusion is given in Section 5.

2

Model of Edge-Edge Repulsion

Our force-directed method with edge-edge repulsion is
based upon the idea of replacing edges by charged springs,
1 Although the simulated annealing method additionally considering a
term of angular resolution can be applied, it’s not efﬁcient.
2 Note that if the repulsive forces are considered by all pairs of edges
incident to a common vertex, then evenly angular resolution cannot be
guaranteed.

C

f2

f2AC
C

repulsive force
component
spring force

f2AC

f2 = - f1

B

B
A

f1

(a)

A

(b)

f1AB
f1
f1AB

Figure 1. A graph with three vertices A, B,
and C and two edges modelled by charged
springs. (a) The force model where f1 and
f2 are repulsive forces acting on AB and AC,
respectively. (b) The positions acted by repulsive forces f1 and f2 should be set at the end
points B and C of incident edges of vertex A.

as opposed to charging nodes as was done in [5]. The closer
two adjacent charged edges are, the stronger the repulsive
force between them becomes. Intuitively, larger repulsive
forces should make the included angle between two neighboring edges wider. In our design, in addition to stretching the included angle, the repulsive forces also contribute
to increasing the lengths of the two edges. Thus the positions acted by repulsive forces are set at the end points of
the incident edges as Figure 1 explains. On the other hand,
spring forces pull vertices closer when spring lengths are
longer than their natural spring lengths. Finally, a drawing
without zero angular resolution is generated when the corresponding model reaches an equilibrium between those repulsive forces and spring forces. With a given embedding,
two edges are said to be neighboring edges if they share
a common endpoint, and one is the successor of the other
along a clockwise or counter-clockwise rotation. (See AB
and AC in Figure 1.)
In what follows, the formulas for capturing spring forces
and repulsive forces are described. The formula of a spring
force is based upon the classical spring embedder model [5],
which uses the following logarithmic function as the force
formula:
(1)
fa (d) = C1 log(d/C2)
where d is the spring length, and C1 and C2 are constants
to control the magnitude of the spring force and the natural
spring length, respectively.
The generalized formulas of the repulsive force due to
two charged edges can be derived from the theory of potential ﬁelds. The reader is referred to [2] for more about
potential ﬁelds as well as some of the detailed derivations
of exact formulas. However, those formulas derived in [2]
appear to be a bit complicated and consequently require
special care when implementing such a method. From a
practical viewpoint, such a complication may not be needed
for the purpose of drawing graphs. Therefore, by observing

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

0.64
0.62
0.60
0.58
0.56
0

2

4

6

8

10

12

3



| AB | : | AC |
1:1
1: 10
1:100
1:10000
10:1
100:1
10000:1

the include angle

the magnitude of force

the magnitude of force

0.66

2

1

0

0

0

the sum of the two edge lengths


the include angle

(a)

0

(b)


the include angle

(c)

Figure 2. Curves displaying the relationships between the magnitude of force and (a) the sum of edge
lengths (the tendency between the magnitude of force and the length of each edge is similar.); (b) the
included angle of two uniformly charged edges. (c) The experimental results designed for measuring
the orientation of force. Consider a variety of ratios of |AC| to |AB| to plot α versus θ.

some characteristics of edge-edge repulsion and experimental results of [2], we are able to derive a simpliﬁed version
of repulsive forces. Experiments based on the model reveal
encouraging and promising results, as reported in the next
section.
The key in our edge-edge repulsion model is to express
the repulsive forces between two neighboring edges solely
in terms of the lengths of the two edges and the included
angle between the two edges. To better explain what this
means, consider Figure 1-(b) as an example. It is easy to
observe that the magnitudes of the repulsive force due to
the two edges AB and AC are
1. positively correlated with the lengths of AB and AC;
2. negatively correlated with the angle between AB and
AC.
Figures 2-(a) and (b) are curves, based upon the implementation of formulas derived in [2], displaying how the magnitude of the repulsive force between AB and AC (see Figure
1-(b)) is related to the length (Figure 2-(a)) and the included
angle (Figure 2-(b)) of two uniformly charged edges. As
Figure 2-(a) indicates, the relationship between the magnitude of force and the total length of edges is asymptotically
nondecreasing and concave. Intuitionally, the magnitude
should approach to zero as edge lengths approach to zero,
and ﬂatten out as edge lengths approach to inﬁnity. It can
be captured by an arctangent function on (0, ∞), and thus
the component |f |e of magnitude of the repulsive force due
to the two edge lengths can be simpliﬁed as follows:3
|f |e = C3 tan−1 (

|AB|
|AC|
) + tan−1 (
)
C4
C4

(2)

where C3 and C4 are constants to control the height of the
approaching horizontal line and the scale of the horizontal
axis, respectively.
3 |AB|

and |AC| are the lengths of AB and AC, respectively.

Figure 2-(b) shows the relationship between the angle included by AB and AC and the magnitude of force. It turns
out that the curve is asymptotically positive, nonincreasing
and convex. The magnitude approaches to inﬁnity as the
included angle approaches to zero. On the other hand, the
magnitude slowly ﬂattens out as the included angle grows.
Such a behavior can be captured by a cotangent4 function
on (0, π/2], and hence the component |f |θ of magnitude of
the repulsive force due to the included angle can be set as
follows:
θ
(3)
|f |θ = C5 cot( )
2
where C5 is a constant to control the scale of the vertical
axis, and θ is the angle included by AB and AC. Note
that Figure 2-(b) shows that the magnitude value at π is not
zero, which, in fact, should be regarded as the contribution
to edge lengths. In addition, for avoiding the appearance of
values near inﬁnity, |f |θ is set to some ﬁxed value when θ
is below certain small cutoff value.
Therefore, the total magnitude |f | can be computed as
the sum of (2) and (3) in the following:
|f | = |f |e + |f |θ .

(4)

In what follows, to compute the orientation of repulsive
force, consider an angle included by two edges AB and AC
as shown in Figure 3. There exist two angles included by
the two edges, and the angle with degree smaller than π
is denoted as θ. In the process of computing orientation,
however, we need to determine which one is θ, and which
edge is its right or left included edge. Assume that uAB and
−−→
−→
uAC are unit vectors of AB and AC, respectively, and uM
is the unit vector of the sum of them. Based upon uM and
one of uAB and uAC , Proposition 2.1 by using the formula
of cross product below allows us to judge which is the right
4 Intuitively, |f | should be zero when θ approaches π. Figure 2-(b)
θ
doesn’t display the behavior because the total force involves nonzero |f |e .

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

uM uAB

uAC

3

B

C
f2 = - f1
uAC

Algorithm 1 EERepulsion( a nice drawing of graph G = (V, E) )

/2

/2

A

uAB

Figure 3. Illustration of orientation of the repulsive force due to two edges AB and AC
with an included angle θ.

or left included edge of the smaller included angle θ, and
then assign the right (resp. left) edge denoted as AB (resp.
AC), and its corresponding unit vector as uAB (resp. uAC )
accordingly.
Proposition 2.1 Assume that uAC = (a, b) and uM =
(c, d), AC is the left edge of the included angle θ if and
only if (c ∗ b − a ∗ d) > 0.
Because the angle included by uAB and uM is equal to
θ/2, θ/2 can be uniquely computed by the inner product
formula of cosine function as follows:
θ
= cos−1
2

uM · uAB
|uM ||uAB |

= cos−1 uM · uAB

(5)

where |uM | and |uAB | are lengths of the unit vectors uM
and uAB respectively, and both equal one.
f1 and f2 are the repulsive forces acting at vertices B and
−−→
C respectively. α is the acute angle included by f1 and AB.
In view of the curve shown in Figure 2-(c), it is interesting
to observe that θ and α appear to be correlated with each
other according to the following simple linear equation:
π
θ
=
(6)
2
2
where α equals π/2 when θ is zero, and α equals zero when
θ is π. Since, observing (6), α is the complementary angle
of θ/2, the orientation uf1 of f1 is perpendicular to uM , i.e.,
γ = π/2 in Figure 3.
Therefore uf1 can be computed by rotating uM clockwise with degree of π/2 as follows:5
α+

uf1 = f1 /|f | = R(−π/2) · uM =

0
−1

1
0

· uM

(7)

Hence, f1 is a vector with magnitude |f | in (4) and orientation uf1 in (7) computed as follows, and f2 equals −f1 .
f1

= |f |uf1

(8)

Note that the repulsive force in (8) has the advantage that
f1 is determined only by three parameters AB, AC, and θ,
facilitating a simple implementation of our drawing algorithm based upon edge-edge repulsion.
5 R(−π/2)

Graph Drawing Algorithm

f1

is the rotation matrix of −π/2.

Require: tmpF orce[|V |] stores temporary forces of all vertices;
newP os and oldP os record the new and old positions of all vertices V respectively;
1: Input: a reasonably nice drawing of G
Output: a nice drawing without zero angular resolution
2: assign initial locations of vertices of G
3: determine the neighboring order of adjacency edges of each vertex by
using outer product
4: while converged = 1 do
5:
converged ← 1
6:
oldP osn ← newP osn
7:
initialize tmpF orce[|V |] as zeros matrix
8:
for each v in V do
9:
if ∃ at least two edges incident to v then
10:
for all pair (ei ,ej ) where ei = (v, vi ), ej = (v, vj ) are
neighboring edges incident to v, and ei is the right edge of
their included angle with smaller degree do
11:
calculate the repulsive force f1 at ei due to ej according to
(8)
12:
tmpF orce[vi ] ← tmpF orce[vi ] + f1
13:
tmpF orce[vj ] ← tmpF orce[vj ] − f1
14:
end for
15:
end if
16:
end for
17:
for each e = (vi , vj ) in E do
18:
calculate the spring force fa of e according to (1)
19:
tmpF orce[vi ] ← tmpF orce[vi ] + fa
20:
tmpF orce[vj ] ← tmpF orce[vj ] − fa
21:
end for
22:
draw graph and simultaneously save new positions to newP osn
according to C6 × tmpF orce[|V |] where C6 is a constant to
control the magnitude of movement in each iteration
23:
if newP osn − oldP osn > then
24:
converged ← 0
25:
end if
26: end while

Our drawing algorithm is sketched in Algorithm 1. The
algorithm mainly includes three parts: for each vertex, ﬁrst,
lines 8-16 compute the repulsive forces due to each pair
of neighboring edges incident to the vertex; second, lines
17-21 compute the spring force of each edge; third, lines
22 draws the graph according to certain scale of the forces
acting at each vertex. In addition, the ﬂag converged is
used to control the convergence of the algorithm, and the
algorithm can reach convergence if appropriate parameters,
C1 − C6, are given. Assuming that dm is the maximum
degree of vertices, the algorithm in each iteration takes time
complexity O(dm |V |) to compute repulsive forces, O(|E|)
to compute spring forces, and O(|V |) to draw graph; hence,
the time complexity of the algorithm is O(dm |V | + |E|).
Note that line 3 preprocesses to determine the neighboring order of adjacency edges of each node, and hence costs
O(|V | × dm log dm ). The preprocess only runs once since
the model of edge-edge repulsion doesn’t alter the neighboring order in each iteration as long as each vertex moves
slowly under small C6.

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

Conventional force-directed methods cannot guarantee
nice drawings for all kinds of graphs because they cannot reach global minimal conﬁguration, i.e., the repulsive
forces among some vertices(rings) might be too weak or
too strong. Fortunately, some local minimal problems can
be resolved by adjusting coefﬁcients of the models. However, the model of edge-edge repulsion doesn’t avoid the
occurrence of any kind of local minimal because we only
locally consider repulsive force of each pair of neighboring
edges, and hence the input of our algorithm is restricted to
a reasonably nice drawing (see line 1).

4

Implementation and Experimental Results

Based on the formulas detailed in the previous sections,
we develop a prototype system for drawing undirected
graphs. The implementation is in C++ using OpenGL library, and runs on a Pentium IV 3.2GHz PC with memory
of size 512MB. Some of experimental results for a variety
of graphs using our method and the classical method [5]
are presented in Figure 4, and their corresponding statistics
are shown in Table 1. About executing time, Table 1 only
gives the term of ’average time per iteration’ because both
the number of iterations and the total running time6 depend
on the settings of different parameters and hence cannot be
determined.
For each case in Figure 4, using the initial drawing or
the drawing generated by the classical method as the input
of our algorithm, our method usually preserves the original
properties of a high degree of symmetry and uniform edge
length. As shown in (a), our method has the capacity of
guaranteeing the drawing of a tree with evenly angular resolution, but the classical method may not. As shown in (b)
and (c), given stronger springs, our method may reach the
situation of the drawing with the largest angular resolution,
but the classical method may not. As shown in (f), given
stronger springs, the drawing using our method results in
the central star spinning, and hence appears more compact
and has more uniform edge lengths.
(g)-(k) draw the n-hypercubes [9] with n = 2 to 6. Because the model of edge-edge repulsion allows at least two
vertices coinciding, our approach may produce drawings
with more symmetries. Especially in (g), (j), and (k), although those drawings are improper7 , our method has center symmetry with clear displays, while the classical method
only has axial symmetry with somewhat confused displays.
Observing StdDev/AvgLen, i.e. the normalized standard deviation of edge lengths, in Table 1, our approach
without costing more running time seems to have equal or
more uniform edge length than the classical method. As
6 Our method sometimes uses the output layout of classical method as
input, and, in the case, the total executing time makes no sense.
7 A drawing is improper if there exist at least two vertices overlapping.

for angular resolution, the classical method may have the
problem of zero or few angular resolution (e.g. see (c) and
(i)), and our approach normally has larger angular resolution than the classical.
Note that our method may not generate a nice drawing
from initial drawing (e.g. see (e) and (i)). Hence two-phase
(i.e. ﬁrst using classical method and then using our method)
or hybrid strategies can be applied to improve our method.

5

Conclusion

Different from the conventions of force-directed methods, a new force-directed method based on edge-edge repulsion for generating a straight-line drawing not only preserving the original properties of a high degree of symmetry
and uniform edge length but also without zero angular resolution has been proposed and implemented.
A line of future work is to overcome the problem associated with local minimal (which also poses difﬁculties
for the conventional force-directed methods) by multilevel
techniques or using optimal heuristics, such as simulated
annealing, genetic algorithm, etc. It is also of importance
and interest to provide more experimental results on graphs
of huge size and theoretical results on the power of the
model of edge-edge repulsion.

References
[1] F. Bertault. A force-directed algorithm that preserves edge
crossing properties. In Graph Drawing ’99, pages 351–358.
LNCS, Vol. 1731, Springer-Verlag, 1999.
[2] J.-H. Chuang and N. Ahuja. An analytically tractable potential ﬁeld model of free space and its application in obstacle
avoidance. IEEE Transactions on System, Man, and Cybernetics, 28(5):729–736, 1998.
[3] J.-H. Chuang, C.-C. Lin, and H.-C. Yen. Drawing graphs with
nonuniform nodes using potential ﬁelds. In Graph Drawing 2003, pages 460–465. LNCS, Vol. 2912, Springer-Verlag,
2004.
[4] R. Davidson and D. Harel. Drawing graphs nicely using simulated annealing. ACM Transactions on Graphics, 15:301–331,
1996.
[5] P. Eades. A heuristic for graph drawing. Congress Numerantium, 42:149–160, 1984.
[6] P. Eades and X. Lin. Spring algorithms and symmetry. Theoretical Computer Science, 240(2):379–405, 2000.
[7] M. Formann, J. Haralambides, M. Kaufmann, F. T. Leighton,
A. Simvonis, E. Welzl, and G. Woeginger. Drawing graphs in
the plane with high resolution. SIAM Journal on Computing,
22(5):1035–1052, 1993.
[8] T. Fruchterman and E. Reingold. Graph drawing by forcedirected placement.
Software-Practice and Experience,
21:1129–1164, 1991.
[9] Mathworld.
Introduction
to
hypercubes.
http://mathworld.wolfram.com/Hypercube.html.

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

inital drawing classical method

classical method our method

our method

(a) Tree structure.

inital drawing

classical method

(b)
weak
spring

strong
spring
b

initial classical
drawing method

our
method

(d) Pentagon.

initial
drawing

classical
method

our method

(e) Mesh structure with 49 nodes.

initial
drawing

classical
method

(f) Petersen graph.

g

e

b
c

inital drawing

(h) Hypercube structure (n = 4).

inital drawing

classical method

our method

(j) Hypercube structure (n = 5).

h
f

a

our method

b

a

(g) Cube structure
(hypercube with n = 3).
h

classical method

b
a

a

initial
classical
drawing method our method

our method

weak spring strong spring

inital drawing

our method

(c)

d

classical method

g

a

f

b

e
c

d

our method

(i) Hypercube structure with a redundancy (n = 4).

inital drawing

classical method

our method

(k) Hypercube structure with a redundancy (n = 6).

Figure 4. Experimental results.

Graph
name

|V |

Figure 4-(a)
Figure 4-(b)
Figure 4-(c)
Figure 4-(d)
Figure 4-(e)
Figure 4-(f)
Figure 4-(g)
Figure 4-(h)
Figure 4-(i)
Figure 4-(j)
Figure 4-(k)

22
11
18
10
49
10
8
16
17
32
64

Table 1. Statistics on the experimental results
StdDev
Average time per
Average edge
Standard deviation
AvgLen
iteration (sec.)
length (AvgLen) of length (StdDev)
both
classic
our
classic
our
classic our
< 10−3
1.19
1.16
0.15
0.06
0.12
0.05
< 10−3
1.01
1.01
0.02
0.01
0.02
0.01
< 10−3
1.05
1.02
0.06
0.05
0.06
0.05
< 10−3
1.35
1.30
0.11
0.13
0.08
0.10
< 10−3
1.26
1.03
0.08
0.01
0.06
0.01
< 10−3
1.29
1.03
0.38
0.04
0.30
0.04
< 10−3
1.03
1.32
0
0
0
0
< 10−3
1.43
1.35
0.05
0.01
0.03
0.01
< 10−3
1.01
1.12
0.21
0.25
0.21
0.22
< 10−3
1.70
1.38
0.09
0.01
0.05
0.01
< 10−3
2.31
1.40
0.23
0.02
0.10
0.01

Proceedings of the Ninth International Conference on Information Visualisation (IV’05)
1550-6037/05 $20.00 © 2005 IEEE

Angular resolution
(degree)
classic
our
25.81
119.96
56.87
58.86
1.21
11.82
23.48
48.95
85.17
86.64
35.54
22.29
34.68
60.00
32.31
44.16
0.32
12.60
30.23
35.35
20.08
29.31

