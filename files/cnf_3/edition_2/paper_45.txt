2010 14th International
Information
Conference
Visualisation
Information Visualisation

Visualise Web Usage Mining:
Spanning Sequences' impact on Periodicity Discovery
Ahmed Aburodes Assaid Alkilany
Computer Science Department
Sebha University
PO Box 823
Sebha Libya
assaid@sebhau.edu.ly
Abstract

period and showed that data cube provides an efficient
structure and convenient way for interactive mining of
multiple-level periodicity [10].

In this paper we present a more effective method to
discover the periodicity in web log sequence data which
handle missing sequences which may occur during the
aggregation process, such as sequences that swing
between two periods. On other hands, a sequence may
start near the end time of a period where the rest of those
sequences appear in next period however, these kinds of
issues certainly it will leave its effect of periodicity
discovery. Moreover, we incorporated OLAP data cube
techniques in the aggregation process in order to handle
large generated sequences and visualised the discovered
periodic patterns, in order to study its impact on
periodicity discovery.
Keyword: web mining , visualisation, sequential pattern,
OLAP

1 Introduction
Temporal aspects have an enormous influence in many
nowadays applications; thus, many studies expanded the
structure of databases to handle temporal characteristics
of events (see, e.g., [1],[2],[3]). Furthermore, many realworld applications, including planning, scheduling,
process control, multimedia, active databases, banking,
law, etc., need to deal with periodic events and the
interest towards the treatment of periodic events is
rapidly increasing. Thus, dealing with periodicity and
user-defined calendars in the data and/or in the queries is
a very important task, which has been faced by many
approaches in the area of temporal databases (consider,
e.g.,[4],[5],[6],[7],[8],[9],[10],[16],[11].

Figure 1 tSPADE: Algorithm output

Periodicity search concerns finding cyclicity occurrences
of a time-series database which can be called as periodic
patterns. The problem is related to two concepts: pattern
and interval. Ozden, B. et al. studied the mining of cyclic
association rules [12]. Jiawei Han et al. integrated data
cubes and Apriori data mining techniques for mining
segment-wise periodicity in regard to a fixed length
1550-6037/10 $26.00 © 2010 IEEE
DOI 10.1109/IV.2010.50

Figure 2: visualization Temporal sequence (TS1)
295
301

1.1 Problem Statement
Suppose that we have sequential patterns donated as SP1,
SP2, and SP3. These patterns are gathered by applying
tSPADE [13] on temporal web server log Data as shown
in figure 1. Each sequential pattern has a table of
temporal sequence data in order to support such pattern,
for example these tables are TS1, TS2 and TS3
respectively.
Figure 2 shows the visualization of TS1. To aggregate
any sequence - as shown in figure 2 – we assume that
both timestamps of the sequence to be aggregated should
appear inside a segment boundary. However, according
to this approach, some sequences will be missing
because these sequences span over two segments. On
other hand, a sequence pattern may span more than two
periods which is out of the scope of this research. As a
result of that such sequences will not be aggregated, and
therefore, the result will not be useful. In this paper we
will introduce a framework to approach this problem in
order to reduce the amount of non aggregated sequences.

Figure 4: Engraving from Mechanics
Magazine London, 1824 [15]

3 Pattern Analysis
Most of previous researches, which were concerning
finding periodicity, discovered periodicity during the
process of mining sequential patterns. However, a
periodic pattern may contain unhealthy sequence data,
such as noisy data and missing data, therefore the results
of a periodicity search will not be useful [14]. Whereas,
our approach starts with discovering sequential patterns
SPi at first, then aggregating temporal sequences data
TSi according to user need. Afterward, analysing
aggregated sequences as illustrated in figure 3.

Figure 5: Redrawing of figure 4 according to the lever law

3.1 Aggregation Methodology
“Give me a place to stand and I will move the Earth” 1
(lever law by Greek mathematician Archimedes, 287 to
212 B.C). Figure 4 shows how small forces can move
great weights by means of a lever [15]. However, the use
of the lever law is widespread in several domains such as
mechanical engineering, building cranes, children seesaw
etc.
We have represented figure 4 according to the lever law
in order to illustrate our contribution for aggregating
missing sequences. The lever in figure 5 is denoted as a
sequence, and a fulcrum splits the area into two
segments. It is obvious that the large section of the lever
appears in segment B and the rest appears in segment A.
As shown in figure 2, some of sequences span between
two segments. Therefore, according to our approach, a
sequence appearing inside a segment boundary can be
aggregated whilst, on other hand, when a sequence spans
over two segments, such a sequence will not be
aggregated unless we have treated it. Previous literatures
make spanning sequences SQ impossible to be
aggregated because they did not deal with this kind of
problem and they also use SQ end time for aggregation.
From figure 2, we can recognize that there are two
categories of Sequences to be aggregated (Normal
Sequence and Spanning Sequence) and spanning
sequence can be divided into three types (prefix Span

Figure 3: Pattern analysis block diagram

As we mentioned earlier, for handling and analysis of
these patterns, we have combined the aggregation and
analysis processes using a Data CUBE by slicing the
CUBE using certain Queries. Furthermore, these patterns
could be presented in different ways according to the
analysis requirements. For example, periodic patterns
can be visualized by methods such as Value-based or
Trend-Based [10] which perform the analysis to spot
when certain patterns may hold.

1

A remark of Archimedes quoted by Pappus of
Alexandria in his "Collection"(Synagoge, Book VIII,
c. AD 340 [ed. Hultsch, Berlin 1878, p. 1060]). [15]
Drexel, introduction of the Lever Law. 2005.
302
296

Sequence, suffix Span Sequence and balanced Span
Sequence) .

Figure 6.5: Aggregation model

Afterward, by comparing both sequence parts as shown
in figure 6.5, we can find out which of them is longer, we
are assumed to aggregate sequence S to the number of
sequences in the segment where the longer part of
sequence S appears. Suppose, the number of aggregated
Sequences is NG and as shown in figure 6.5, the long
part of sequence S appears in segmenta .this means that
the number aggregated sequences in Segmenta will
increase by one

Figure 6.1: Normal sequence

Figure 6.2: Prefix Span Sequence

NGSegment = NGSegment + 1
a
a

4 A Framework for Discovering Periodicity
Our approach is concentrating on finding fixed periods.
These periods which we are studying are a set of natural
time segmentations, whereas, segments are defined by
the user. However, the amount of sequences which are
generated by tSPADE on top of visitor sessions of web
log server data could be extremely huge. We will use
OLAP cubes, in order to handle the amount of generated
sequences and to discover how often these sequences of
visited web sites, according to an analyst’s needs, are
hold.

Figure 6.3: Suffix span Sequence

Figure 6.4: Balanced span Sequence

3.1.1 Sequence Categories:
1- Normal sequence:
Normal sequence which appears inside a
segment boundary, this sequence does not
need any special treatment.
2- Spanning sequence (missing sequences):
2.1- Prefix Span Sequence: where the large
part of the sequence appears in
segment-a, and the small part appears
in segment-b.
2.2- Suffix span Sequence: where the large part
of sequence appears in segment-b and
the small part appears in segment-a.
2.3- Balanced Span Sequence: where a
sequence has the same spread in both
directions.

Han et al. stated that the Cube provides an efficient
structure to access and index the minimally generalized
data[10]. In order to aggregate and analyse temporal
sequence data, we construct two cubes: sequence cube
and working cube denoted as (sCUBE and wCUBE),
respectively. These cubes are constructed in a similar
manner to the [10] approach. The main differences
between the Han et al. approach and our approach are: in
Han et al. they used a reference Cube on top of raw data
to discover sequential patterns, then they used working
cube to discover periodic behaviour at the same time. In
our approach we construct sCUBE on top of temporal
sequence data. Then, by slicing sCUBE we construct
wCUBE which we will use for aggregating sequences by
treating spanning sequences that span between two
segments and then to discover periodicity with missing
sequences.

3.1.2 Sequence Aggregation Assumption
Whenever a sequence appears inside a segment
boundary, as shown in figure 6.1, it will be aggregated
directly without any treatment. But if a sequence spreads
between two segments, as shown in figures (6.2, 6.3,
6.4), at first we are assumed to measure the length of
both left and right part of sequence S respectively, as
illustrated by figure 6.5.

4.1 Construction of Data Cubes
As we explained earlier in section 1.1, suppose that we
have sequential patterns denoted as SP1, SP2, and SP3.
These patterns are gathered by applying tSPADE on
temporal web server log Data as shown in figure 1,
where each sequential pattern has a table of temporal
sequence data for support, such as TS1, TS2 and TS3. The
data structure of each tuple of a sequence contains a
timestamp (ts and te) except for the first column which

S L = (t s , Segment a (t e ) )

Then, we measure Right part length of Sequence S

S R = (Segment b (t e ), t s )

303
297

consists of visitors ID vIDs. As can be seen in Table 1,
TS1 shows temporal sequences which support the
sequential pattern SP1 (A B D F).

4.1.1 Construction sCUBE
For example, sCUBE constructed on top of TS1 table can
be seen in figure 7. However, sCUBE is constructed with
time-related attributes of element sequence timestamps
and with the remaining attributes. sCUBE has three
dimensions Time Periods, Sequence and vIDs, where
Time Periods can be defined by the user. The structure of
sCUBE is that the first column is for vID, the next
column is for sequence elements timestamps, the
penultimate column is for sequence timestamp SQ(ts, te).
The last column is for Tag which describes the
aggregation status of a sequence, whether aggregated as
normal or with Spanning segments between two cycles.
4.1.2 Construction of wCUBE
By slicing the sCUBE according to the analyst’s needs,
figure 8 shows a slice from sCUBE where TimePeriod =
1 and vID =ALL which donated as SL. Working Cube
donated as wCUBE can constructed as seen in figure 9.1.
We assume that, the wCUBE has three dimensions
(Cycle, Interval, Granular) “e.g. wCUBE (month, days,
hours) “. However, in this example we denote Cycle as
Time period, Interval as Week Days and Granular as
Hours, where Time period is divided into a set of four
periods, week days is divided into a set of seven days and
Hours is set of 4 segments each segment is six hours.
The dotted arrows, which appear on top of wCUBE show
how a spanning sequence could be aggregated.
We add extra cells to speed up the summation process in
wCUBE. As shown in figure 9.2, these cells which we
proposed will be added to all wCUBE dimensions. Figure
9.3 shows wCUBE combined with extra cells.

4.2 Aggregation Algorithm
The aggregation will be according to the aggregation
methodology described in section 3.1. At the start of the
aggregation process, we assume that the length of every
sequence to be moved to sCUBE from TSi should not
exceed the length of a cell in wCUBE.

∀Length( SQ(t s , t e )) < Length( wCUBE (CELL )) ,
where SQ( ts, te) is a sequence timestamp and CELL is a
cell in wCUBE

304
298

sCUBE which is constructed on top of temporal
sequence table TSi. After that, the algorithm will build
wCUBE which is used to aggregate a certain slice from
sCUBE, denoted as SL, as required by the user. Then, the
algorithm will call the aggregate algorithm as illustrated
in line 4, to aggregate the sequences. This aggregation
process was illustrated earlier in this paper, by slicing
wCUBE which could fulfil the user demands in order to
discover a periodic behaviour for aggregated sequential
patterns. Moreover, the aggregated sequence could be
used for visualizing a set of periodic patterns or for
detecting the similarity among periodic time patterns.

As shown in figure 10.1, the Aggregate Algorithm starts
with reading SQ( ts, te) which read a sequence timestamp
from SL then locates which wCUBE Cell suitable for SQ(
ts, te) for aggregation. If ts and te of the SQ fit inside the
CELL boundary without Spanning, then the function
increases the current CELL by one and tags SQ( ts, te)
tuple in SL with “Normal”. However, if SQ ( ts, te) has
stretched between two CELLs then, the aggregate
algorithm will call the Spanning function to treat this
problem.

Figure 11: Temporal Pattern Analysis Framework (tSPAN)

4.3 Spanning Algorithm
The Spanning Algorithm illustrated in figure 10.2 will
follow the assumption which was illustrated in section
3.1.2. In lines (2 and 3), the algorithm starts with
measuring a length of SQ(ts, te) from SQ(ts) until the
boundary of the current Cell and then from the boundary
of current cell until the SQ(te). Afterwards, it compares
both parts of SQ(ts, te); if the large part appears in current
cell then the algorithm will increase the current wCUBE
cell by one and tag SL by ‘ Prefix ’, as shown in lines (6
and 7). And if the large part appears in Next cell, then,
the algorithm will increase the current wCUBE cell by
one and tag SL by ‘ Suffix’ as shown in lines (12 and 13).

Figure 12: The aggregated wCUBE
PERIODICITY
{
1. Construct sCUBE[TP, SPi, vID]USD (TSj)SPi.
2. SLUSD Slice(sCUBE[TP, SP, vID]).
3. Construct wCUBE [cy, int, Grn]USD
3. AGGREGATE (SLUSD, wCUBE )
4. Mining Periodic Time (Slicing(wCUBE[cy, int, Grn]))
}
Figure 10.3: PERIODICITY algorithm

4.4 Periodicity Algorithm

The tasks for mining Periodic time of a specific
Sequential Pattern can be described in the following
specialised syntax
.

As shown in figure 11 which illustrates the Temporal
Pattern Analysis Framework (tSPAN) and figure 10.3,
The Periodicity algorithm starts with constructing
305
299

5.1 Periodic Patterns Visualization

Mining Periodic Patterns ( <specific-pattern> )
With-wCUBE(<cyclicity><interval><granularity> (ALL) )
Having Thresholds <threshold-specification>

The periodic patterns can be visualized by using valuebased presentation or trend-based presentation. These
methods may help the analyst to spot where the
periodicity has occurred. The results obtained from
applying the query of example 1 on wCUBE are shown
in table 1.

In the with-wCUBE clause, <cyclicity> <interval>and
<granularity> indicate the cyclicity, interval and
granularity of the expected periodic times, respectively,
all of which are specified by calendar units. Only the
periodicities within a limited period needs to be
considered. The threshold specification includes
minimum support.
Example 1 : Mining Periodicities of a Sequential
Pattern
Mining Periodic Patterns ( SP1)
With-wCUBE (Week=1, Day=All, time= All)
Having thresholds support = 0.75
The mining task in this example is looking for all the
periodicities of a Sequential Pattern in wCUBE with
specific periodic time. The periodic time is all days of of
first week and the thresholds of support is 0.75.

5.1.1 Value-based Patterns Analysis
Figure 13.1, shows the visualization of Table 1 by using
the value-based presentation method. However, the
analyst may set any minimum support threshold for the
periodic patterns without any extra computation on data.
For example if the minimum support for the cell is 12
and the minimum support for periodic patterns is 0.75,
then the patterns which have satisfied the minimum
support are {1, 2, 3, 4, 6, 7}. Therefore, the discovered
patters are satisfying the minimum support.
Furthermore, from figure 13.1, we could find at which
time the segment has the lowest accessed time and
which is the highest accessed time segment in a week.

Example 2 : Mining Periodicities of a Sequential
Pattern
Mining Periodic Patterns ( SP1)
With-wCUBE (Weeks=All, Days=All, time= Morning)
Having thresholds support = 0.75

The mining task in this example is looking for all the
periodicities of a Sequential Pattern in wCUBE with
specific periodic time. In example 2 the periodic time is
all days and every morning where morning in between
06.00 until 11.59 am and the threshold of support is
0.75. The shaded Row in figure 12 shows the result of
the slicing query.

5 tSPAN Framework Validation
In this section we will evaluate the effect of the
aggregation of non-Spanning and Spanning sequences
on the trend of periodic patterns by applying Slicing
queries on wCUBE.

306
300

5.1.2 Trend-based Patterns Analysis
Both figures (13.2 and 13.3) show the visualization of
Table 1 by using the Trend-based presentation method.
We could discover several periodic patterns such as
when surfing a sequential pattern starts to rise or what is
the busiest day of surfing a sequential pattern. As can be
seen in figure 13.2, the exploration of SPi starts to rise
every Second day of the week. All patterns in figure
13.2 satisfy the minimum support of periodic patterns.
Moreover, figure 13.3 shows the busiest day from
exploring SPi. The result is in the middle of the week {1,
3, 4, 5}; that means the periodic patterns has satisfied
minimum support.

pattern is 3 rows of Cube slice. This means that all
shaded cells in Table 2 are not satisfying the minimum
support. As can be seen in Table 3, the number of
shaded rows is 2 and as result of that the number of
rows does not satisfy the minimum support of periodic
patterns.
By visualizing the data of Table 2, we can find that all
un-shaded cells are not satisfying minimum cell support
as shown in Figure 13.4. Moreover, the circled columns
in figure 13.4 show which days of weeks have exceeded
the minimum support of cells. From figure 13.4 we can
spot just two circled areas that do satisfy the minimum
threshold of periodic patterns.

5.2 Spanning Process Impact on Mining Periodicity
The amount of sequences represented per segment will
be changed by the aggregation methods which may
affect the discovered patterns. This will be explained in
the next sections.

5.2.2 Slicing wCUBE with Spanning SQs
On other hand, if the Spanning operation is embedded in
the aggregation process, then the aggregation operation
will take the Spanning sequences into account. As
result, the data on Table 2 and Table 4 will be combined
as can be seen in Table 5.
Additionally, if the process of aggregation has taken
both non-Spanning and Spanning sequences into
account, then the trend will increase as can be seen in
figures (13.5 and 13.6), and the number of patterns will
change. This gives a support to periodic patterns. As
shown in figure 13.5 the number of sequences in all
days are above the support line, which are satisfying the

5.2.1 Slicing wCUBE without Spanning SQs
Table 2 shows the result of slicing query on wCUBE,
where Spanning operations are not embedded in the
aggregation process.
Suppose that the minimum support of sequences per cell
is 8 sequences and the minimum support of periodic
307
301

minimum threshold for periodic pattern. This means
visitors have been visiting the website every day by
pursuit the sequential pattern SPi .

5.4 Aggregation Process Impact on Mining
Periodicity
Table 7 shows the number of aggregated sequences per
segments and aggregation type, as a result of applying
our aggregation approach on a synthetic dataset. Both
figure 13.7 and figure 13.8 show the number of
aggregated sequences per each aggregation type, where
types are Normal, Prefix and suffix aggregation. As we
mentioned earlier, the slice of sCUBE will be tagged by
a certain type related to the aggregation process. It is
obvious as shown in both figure 13.7 and figure 13.8,
how the missing of the results of one aggregation may
affect the discovery of periodic patterns.

5.3 Aggregation Methods Impact on Mining
Periodicity
Table 6 shows the results of different aggregation
methods. These methods are SQ start time Approach (ts),
SQ end time approach (te), and tSPAN approach (ts, te).
As we mentioned earlier, most of previous researches on
discovering sequential patterns and pattern analysis have
used one time stamp approach whereas our approach
(tSPAN) is using both SQ start time and SQ end time.
Figure 13.6 shows how the trends differ upon
aggregation methods which may affect the mining
periodicity. The sample of data stated in Table 6 was
aggregated by applying tSPAN on a synthetic data set.

308
302

Proceedings ACM SIGACTSIGMOD-SIGART Symp.
Principles of Database Systems. 1991.
[5] Baudinet, M., J. Chomicki, and P. Wolper. Temporal
Databases: Beyond Finite Extensions. in Proceedings of
the Int’l Workshop Infrastructure for Temporal Databases.
1993.
[6] Bertino, E., et al., An Access Control Model Supporting
Periodicity Constraints and Temporal Reasoning. ACM
Trans. Database System, 1998. 23(3): p. 231-285.
[7] Dyreson, C., W.E. Lin, and R.T. Snodgrass, Efficiently
Supporting Temporal Granularities. IEEE Transactions
Knowledge and Data Eng., 2000. 12(4): p. 568-587.
[8] Kabanza, F., J. Stevenne, and P. Wolper. Handling Infinite
Temporal Data. in Proceedings of ACM SIGACTSIGMOD-SIGART Symp. Principles of Database
Systems. 1990.
[9] Han, J., G. Dong, and Y. Yin. Efficient Mining of Partial
Periodic Patterns. in in Time Series Database. Proceedings
1999 Int. Conf. on Data Engineering (ICDE’99). 1999.
Sydney, Australia.
[10] Han, J., W. Gong, and Y. Yin. Mining segment-wise
periodic patterns in time-erlated database. in Proceeding
of the int'
l conf. on knowledge discovery and Data Mining
(KDD'
98). 1998. NY, USA.
[11] Terenziani, P., Symbolic User-Defined Periodicity in
Temporal Relational Databases. IEEE Transactions of
Knowledge and Data Engineering, 2003. 15(2).
[12] Ozden, B., S. Ramaswamy, and A. Silberschatz. Cyclic
association rules. in Proceedings Of 1998 international
Conference Data Engineering (ICDE’98). 1998.
[13] Petrounias, I. and A. Assaid Alkilany. Temporal web log
mining using OLAP Techniques. in Proceedings of the
international conference on Computational methods in
sciences and engineering. 2003. Kastoria Greece: World
Scientific Publishing Co., Inc. River Edge, NJ, USA.
[14] Zhou, B., S.C. Hui, and A. Fong. An Efficient Approach
for Mining Periodic Sequential Access Patterns. in
Proceedings of the 8th Pacific Rim International
Conference on Artificial Intelligence. 2004. Auckland,
New Zealand: Springer.
[15] Drexel, introduction of the Lever Law. 2005
[16] Ahmed Aburodes Assaid Elkilany, Ilias Petrounias,
"biTemporal Session Reconstruction for Visited Sessions
Retrieval," iv, pp.341-346, 2008 12th International
Conference Information Visualisation,2008.

6 Conclusion
We have presented a new effective approach for
aggregation of sequence data and at the same time for
treating ‘missing’ sequences which may span two time
segments. We incorporated OLAP data cube techniques
in the aggregation process in order to handle large
generated sequences. Han et al. stated that the Cube
provides an efficient structure to access and index the
minimally generalized data[10]. For mining periodicity,
we construct two cubes: sequence cube and working
cube denoted as (sCUBE and wCUBE), respectively.
These cubes are constructed in a similar manner to the
[10] approach. The main differences between the Han et
al. approach and our approach are: in Han et al. they used
reference Cube on top of raw data to discover sequential
patterns, then they used working cube to discover
periodic behaviour at the same time. In our approach we
construct sCUBE on top of temporal sequence data. Then
by slicing sCUBE, we construct wCUBE which we will
use for aggregating sequences by treating spanned
sequences which span between two segments. Afterward,
by slicing the data cube according to analysis needs, we
can discover periodic patterns as well as visualize the
slices of the data cube. Moreover, to validate the concept
of our aggregation approach we have studied the impact
of aggregation process and aggregation method on
mining periodicity. That revealed how the trend of
pattern was changed which may affect the pattern
behaviour.
However, this kind of information can be used to
restructure a particular website or insert dynamically
relevant links based on visitors’ access patterns, in order
to enhance the efficiency of that website.

References
[1] Snodgrass, R.T. and I. Ahn, Temporal Databases. IEEE
Computer, 1986. 19(9): p. 35-42.
[2] McKenzie, L. and R. Snodgrass, Evaluation of Relational
Algebras Incorporating the Time Dimension in Temporal
Databases. ACM Computing Surveys, 1991. 23(4): p. 501543.
[3] Tansel, A.U., et al., Temporal Databases: Theory, Design
and Implementation. Benjamin/Cummings series on
database systems and applications. 1993, Redwood City,
Calif. Wokingham: Benjamin/Cummings Pub. Co.
[4] Baudinet, M., M. Niezette, and P. Wolper. On the
Representation of Infinite Temporal Data and Queries. in
309
303

