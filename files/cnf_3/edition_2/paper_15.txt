2010 14th International
Information
Conference
Visualisation
Information Visualisation

Double Tree: an advanced KWIC visualization for expert users

Chris Culy, Verena Lyding
Institute for Specialised Communication and Multilingualism
European Academy Bolzano-Bozen
Bolzano-Bozen, Italy
christopher.culy@eurac.edu; verena.lyding@eurac.edu
In developing Double Tree for expert users, we face
numerous challenging design issues, some of which have
been addressed in other ways in Word Trees, and some of
which are particular to Double Tree. In each case, we will
discuss the background for the issue and our motivations
for the design choices that we made. Finally, we will point
out future possible enhancements for Double Tree, given
that it is still under development.

Abstract—In this paper we present Double Tree, a new
visualization of Key Word In Context (KWIC) displays
targeted to support linguistic analysis. Inspired by
Wattenberg’s and Viégas’ [1] Word Tree visualization,
Double Tree extends the idea of representing KWIC results
as trees. We address several issues with Word Trees with
respect to the specific demands of linguists and discuss the
design decisions and implementation details that we chose
for Double Tree. In particular we present our approach for
displaying a two-sided tree. We describe details of the
layout, including how frequency and linguistic information
is incorporated, and what user interaction is supported. We
conclude with some consideration on possible next steps for
Double Tree.
Keywords-KWIC, concordance,
linguistic analysis, tree

I.

corpora,

II.

KWIC, WORD TREES, AND LINGUISTS’ NEEDS

People have been using concordances with their KWIC
format for centuries. The computer age hasn’t changed
much about the KWIC visualization (and it is a
visualization of the textual data). Corpus query tools (e.g.
WordSmith tools [2] or the IMS Corpus Workbench
(CWB) [3]), which provide KWIC views of potentially
complex, linguistically-oriented query results, still use the
same format (see Fig. 1), with perhaps a slight bit of color
to highlight the result, and perhaps a hyperlink to a more
extensive view of the context, or even to the original
source.

language,

INTRODUCTION

As is well known, casual and expert users have
different goals and tasks, and thus have different needs for
their tools. This also concerns needs specifically related to
visualization components, increasingly found in different
types of tools. Linguists are served somewhat poorly in
this respect: specialized tools for language analysis still
make little use of visualizations, and visualization tools for
language related information (LInfoVis) tend to be
intended for non-linguist users rather than for linguists.
Nonetheless, existing visualization tools can be the basis,
or an inspiration for the creation of visualization
components more suited to the particular needs of
linguists.
In this paper, we present Double Tree,1 a new tool for
linguists to use for exploring Key Word In Context
(KWIC) information. The inspiration for Double Tree was
the Word Trees of [1], which is meant for casual, nonlinguist users. Provided as a public site where people can
upload their data, Word Trees also has an additional
significant goal, namely shared commentary on common
data. However we have not incorporated the community
aspect of Word Trees into Double Tree, the goal of shared
commentary is not (yet) shared by linguist users.

Figure 1. Concordance of WordSmith tools for "word"

There have been a couple innovative approaches to
visualizing concordances and KWIC, such as at TextArc
1

A demo is available at
http://www.eurac.edu/Org/LanguageLaw/Projects/linfovis/DoubleTree.h
tm.

1550-6037/10 $26.00 © 2010 IEEE
DOI 10.1109/IV.2010.24

98

Another important issue for Word Trees is that, when it
is determined that a subtree takes up less than 3 pixels of
vertical space, it automatically replaces the entire subtree
with its deepest branch only. As well, branches which
contain less than 1% of the total results are omitted. The
user is left with no indication of what has been omitted and
no way to retrieve the omitted data.
While too much data for a given display area is in fact
a visualization problem that calls for a sensible solution,
linguists need to be able to discover and access all the
examples, not just ones the program chooses. Ideally, it
would be up to the linguist user to choose which data is
suppressed.

[4], and more recently Word Trees [1]2, which was our
inspiration. Word Trees’ innovation is to collapse identical
sequences of context words into a single line, with
branches when the contexts diverge (see Fig. 2). It presents
either the left context or the right context, and is thus a
representation of a prefix (respectively, suffix) tree to the
search unit (keyword).
Word Trees addresses a significant problem with the
standard KWIC view, namely that in a KWIC it is not easy
to see variation and repetition in contexts (e.g. occurring
words or part of speeches) and to get an understanding of
frequencies of the occurring patterns. Although Word
Trees is meant for casual users, and not for linguistic
analysis, it has been used on occasion by linguists, at least
for
research
(e.g.
http://markdingemanse.nl/theideophone/visual-corpus-linguistics/). There are several
things which make Word Trees less than optimal for
linguistic analysis, a task for which it was not designed.
One issue is that only one side of context is shown at a
time. KWIC (typically) show both sides, and in general a
linguist will be interested in both sides of context.
A second aspect of Word Trees that makes it suboptimal as analysis tool is the fact that it marks explicitly
only one aspect of frequency information: the frequencies
of words in context. The number of distinct continuations
of the search string (the branching factor) is not given
explicitly, and in combination with a design which
suppresses sub-trees (as described further down), a
distorted representation of the data is produced.
A third issue is that Word Trees do not provide access
to any linguistic information other than whole words.
Corpus query programs usually provide access to lemmas
(“dictionary forms”) of words, as well as part of speech
information (noun, verb, etc.). While it is possible to create
data sets for use with Word Trees that have this
information (e.g. by attaching labels to words by
underscore), Word Trees itself is designed to build on flat
string-based data and has no capabilities to deal with
multiple layers of structured information.

III.

DOUBLE TREE

Although Word Trees address the significant problem
in KWIC views of seeing patterns among a large number
of examples, it does have the above mentioned drawbacks
for linguists. With Double Tree we present an extended
approach to representing a KWIC as a browsable tree, that
responds to the identified issues and thus is particularly
targeted to expert users.
A. Two sided tree
As mentioned above, the one-sidedness of Word Trees
makes them an incomplete replacement of a standard
KWIC view by leaving out half of the context. But even in
standard KWIC views, there is the issue of seeing patterns
across two sided contexts. KWIC views can only be sorted
on one side, and the similar contexts on the opposite side
are most likely to be jumbled.
Addressing this issue of two-sidedness was the starting
point for our Double Tree visualization (Fig. 3). A Double
Tree is visually a two sided tree, showing both the
preceding and following contexts. (Mathematically, a
Double Tree is just a tree where the two children of the
root are the prefix and suffix trees.) A Double Tree starts
by default showing one word of context on each side, and
allows for successive expansion of single paths. Note that
this contrasts with Word Trees, where the tree is always
fully expanded from the beginning and branches of the tree
continue at least until they define a unique phrase used
exactly once and reach the first period thereafter.
Interaction works like this: clicking on a word on the
right hand side shows the next level of successor
continuations of that context, and clicking on a word on
the left hand side shows that immediate predecessor
contexts. On each side only one path can be shown fully at
a time. In case the tree is already expanded to some
degree, as soon as a new word is clicked, any
continuations of words that are siblings to the clicked
focus word are hidden, as are any higher-level
continuations on the same side. (This is a limited
application of the fisheye view concept in [5].)

Figure 2. Alberto Gonzales’ testimony in 2007, taken from [1]

2

Word Trees is available to use at
http://manyeyes.alphaworks.ibm.com/manyeyes/

99

Figure 3. Double Tree for search “Bozen”, with focus word "hat"

Compare Fig. 3 and Fig. 4, where in Fig. 3 "hat" is
selected as the focus word (in Double Tree displayed in
red, and in Fig. 3 highlighted by an oval) in the right
context. All descendants of "hat" are shown. In Fig. 4 "ist"
has been chosen as the new focus word. This leads to the
descendants of "hat" being hidden and the descendants of
"ist" being shown.
One significant challenge in designing the Double Tree
visualization is the fact that in general, each context on one
side corresponds only to certain contexts on the other side.
So when we see the initial view, it is not the case that
every word on the left forms a phrase with the key word
and every word on the right. Obviously, this is not an issue
for Word Trees, which only show one side of context at a
time. Interestingly, another double sided tree
representation of search query terms by Juice Analytics3
does not seem to address this challenge, and simply
presents all preceding contexts together with all following
contexts. While this mixing of contexts may not be an
issue in analyzing query terms, it would be for linguists
analyzing words in context.

We thus need to indicate what the correspondences are
between the left and right sides. It is not feasible in general
to indicate the correspondences for all contexts at the
same time, or rather, doing so would put us right back at
the equivalent of the KWIC view. Instead, we mark only
the correspondences for the focus on its opposing side, by
showing them slightly larger than non-correspondences
and in blue (as opposed to the default black).
For example, “nach Bozen ist” and “Universität Bozen
ist” are not phrases in our example in Fig. 4, while „in
Bozen ist“ and „aus Bozen ist“ are valid phrases. In Fig. 4
the continuations are shown for the currently selected
focus word “ist” (shown in red in Double Tree, and in Fig.
4 highlighted by an oval) in the right context of Bozen.
Thus the display in Fig. 4 does not tell us whether “in
Bozen hat” is a valid phrase. To find all continuations of
“in Bozen” we would have to select “in” (in the left
context) as the focus word. Note that selecting a new focus
word does not change the current state of expansion on the
opposite site of the tree but just marks the currently shown
corresponding contexts. Thus, we can get a view, where
the left context is expanded by several levels, but the
correspondences with the focus word in the right context
only occur on the first level (see Fig. 4, where “der
Gemeinde” is expanded, but is not a continuation of the
focus “ist”).

3

Keyword Tree is shown here:
http://www.juiceanalytics.com/writing/visualizations-with-googleanalytics-api/

100

Figure 4. Double Tree for search "Bozen", with focus word "ist"

This design decision is based on the assumption that a
node that was selected by the user is relevant to the user no
matter whether it is a continuation of a successively
selected focus word. Another rationale would suggest
hiding all branches that are not continuations of the current
focus word. Studies with users are needed to understand
which design is in fact superior.

Word Trees shows the branching factor simply by
showing all the continuations (that it deems relevant) of
the focus word, without coding the total number of
branches visually.
In Double Tree, we indicate the branching factor for
each visible word by using shades of yellow, where darker
shades indicate more branches. This provides the
information without having to expand each node, and it
takes up no space and thus does not require us to prune
any information, as Word Trees does.
Word Trees and Double Tree make different choices
about how to display frequency information, choices that
are linked to other decisions about which contextual
information to show with respect to the focus word (cf.
section 3.5.). Obviously, we believe that the choices in
Double Tree better suit the linguist’s tasks of exploratory
search and comparison.
One additional frequency-related feature in Double
Tree is the ability to zoom the display out to get a bird’s
eye view of the distribution of the contexts (Fig. 5). This
feature is not found in Word Trees, nor is it available in
corpus query tools.

B. Frequency information
There are two kinds of frequency information that are
relevant to the user. One type is the frequency of the words
(in context), and the other type is the number of
(predecessor or successor) continuations of a word – the
branching factor. Word Trees explicitly only show
frequency of word occurrences, by scaling the size of the
words. For this type of frequency Double Tree uses a
tooltip: in Fig. 4 we see that “in” occurs 80 times
immediately preceding “Bozen”. One motivation for not
using scaling in Double Tree is that we are trying to allow
for easier comparison by showing more alternatives.
Scaling the text would take more space and allow fewer
items to be shown.

101

“Bozen” filtered by the number of occurrences of the
second word position preceding the keyword (“Bozen”)
and the first position following it. In this way, the user has
control over both the filtering (e.g. being able to exclude
high frequency words as well as low frequency ones) as
well as the visual presentation of the results.
E. Other comparisons with Word Trees
In addition to the double tree aspect, a significant
difference between Word Trees and Double Tree is the
nature and role of navigation. Initially Word Trees show
the fully expanded tree (pruned as explained above) for the
search phrase. Double Tree starts off with one level of
context to the left and right, and do not show the full
KWIC tree at any time, but provide structured and
consistent displays for words selected by the user.
Clicking on a word in Word Trees causes the search
phrase to extend from the root to that focus word,
effectively specifying a new, more restricted search. In
Double Tree clicking on a word (Double Tree currently
allows only a single search term) expands the context of
that focus word by one level, thus showing more
information. When navigating, it shows all the siblings of
the focus word, and all words (and their siblings) on the
path to the focus word, effectively allowing exploration
within the given search results. Technically, we posit a
different Degree of Interest (DOI) function for Double
Tree than that of Word Trees, which fits well with the
goals of making Double Tree useful for exploratory search
by linguists.
Another navigational difference is that shift-clicking
on a word in Word Trees initiates a new search of for
word. This technique is less appealing in Double Tree,
given the use of the corpus query engine with its complex
searches.
A third navigational difference between Word Trees
and Double Tree is that Word Trees has a history
mechanism which allows the user to move easily back and
forth while exploring. This history mechanism could be a
nice addition to Double Tree.
There are a couple other differences between Word
Trees and Double Tree where Word Trees perhaps have a
(temporary) advantage. The most noticeable is that Word
Trees allow the contexts to be sorted in three ways: order
of occurrence in the text (the default), alphabetical order,
and by descending frequency. Double Tree does not
provide this choice, but display the contexts only in
alphabetical order.
Another potential advantage of Word Trees is that they
collapse non-branching contexts into a single node. This
eliminates tedious navigation just to see a single extended
result.

Figure 5. Birds Eye view of Double Tree

C.

Linguistic information
While the Double Tree visualization is general, the
intention is to use it with a corpus query engine which can
provide multiple levels of linguistic information about the
results. Indeed, the demo project showing the Double Tree
visualization uses the corpus query processor (CQP) of
CWB [3] and allows the context to be displayed as the
parts of speech of the corresponding words rather than the
words themselves. This feature, uncommon even in corpus
query interfaces, allows for a more grammatically oriented
view of the results, instead of only a word-level view.
It is worth pointing out that corpus query engines allow
complex searches, combining properties of different
levels, as opposed to the simple string searches in Word
Trees, or even the regular expression based searches of
Word Trees’ companion visualization, Phrase Nets [6].
While there is nothing to prevent a Word Trees-style
visualization to be connected to a corpus query engine
(indeed, we could suppress half of a Double Tree to do
that), that is not the design of the actual Word Tree
application.
D. Pruning
A sophisticated query processor like CQP supports the
formulation of complex commands that allow the basic
results to be filtered in different ways to create the final
result set. We can also think of filtering in terms of
pruning the visualization, that is pruning the visualization
of the results without changing the results themselves. As
mentioned above, Word Trees automatically and without
any indication prunes less frequent data, while we aim to
allow the linguist user control over which data is shown. A
Double Tree by default shows all the contexts of the focus
word, (or the root initially). However, the user can filter
the left and/or right contexts by the frequency of a position
with respect to the key word. The user then has a choice
for the visualization: either only the results selected by the
filters are shown, or all the results are shown, with the
selected results indicated by boxes surrounding the words.
For example, Fig. 6 shows the Double Tree for search

102

particular linguistic tools that create the information to be
visualized. In terms of the Reference Model for
visualization ([7], cf. Culy and Lyding’s [8] adaptation for
LInfoVis) our visualization components define and
implement visual mappings and visual views for specific
types of linguistically structured language data.
ACKNOWLEDGMENTS
We would like to thank Elena Chiocchetti and L. Lee
McIntyre for their valuable feedback on interface aspects
and functionality of Double Tree. Three anonymous
referees also provided useful comments.
REFERENCES
[1]
Figure 6. Filtered Double Tree

IV.

CONCLUSIONS

[2]

Double Tree is an attempt to extend the core insight of
Word Trees – collapsing identical contexts into a single
line – to a tool that is more suited to linguist analysis. To
this end, we have made different design decisions based on
the linguist’s task of exploratory search using linguistic
information.
There are various other improvements that could be
made, in addition to the ones just discussed. One would be
to add the ability to search for a word within a Double
Tree. Another potential addition would be to allow for
multiple contexts to be expanded simultaneously, not just
the focus context. Additional information to provide would
include the number of occurrences of a word within
continuations of the current focus word in addition to the
total frequency of the word (e.g. 3/15 would mean 3
occurrences of the word within the continuations of the
focus word out of 15 total results for the word).
In terms of filtering, one option would be to filter
based on the branching factor of a node. It could also be
interesting to draw on analytical tools, such as for word
co-occurrence statistics, to allow for filtering by these
properties. It is worth pointing out that this improvement
lies in the domain of integration, rather than of the Double
Tree visualization proper, in contrast with the branching
factor filtering.
As well, a key thing still to be done is to evaluate how
well these design decisions actually fit with linguists’ uses.
The design decisions are based on our general knowledge
of linguists’ tasks, on visualization and usability
principles, and on some guerilla testing. Nonetheless, more
extensive user testing would show whether these design
decisions are in fact effective, as well as probably suggest
other improvements.
A final point to make is that Double Tree is one of a
series of visualization components that we have created4
tailored to linguistic visualization. As with Double Tree,
the goal is to make these visualizations independent of the
4

[3]
[4]
[5]
[6]

[7]
[8]

Cf. www.eurac.edu/linfovis
103

M. Wattenberg and F. B. Viégas, “The word tree, an
interactive visual concordance,” IEEE Trans. on
Visualization and Computer Graphics, 14(6), pp. 1221–
1228, 2008.
M. Scott, WordSmith Tools. Liverpool: Lexical Analysis
Software, 2004.
O. Christ, “A modular and flexible architecture for an
integrated corpus query system,” Proc. of COMPLEX 94,
Budapest, pp. 23-32, 1994.
W. B. Paley, “TextArc: revealing word associations,
distributions and frequency,” interactive poster presented
at the IEEE INFOVIS’02, 2002.
G. W. Furnas, “The FISHEYE view: a new look at
structured
files,“
Bell
Laboratories
Technical
Memorandum, No 81-11221-9, 1981.
F. van Ham, M. Wattenberg, and F. B. Viégas, “Mapping
text with phrase nets,“ IEEE Transactions on
Visualization and Computer Graphics (Proc. InfoVis'09),
15(6), pp. 1169–1176, 2009.
S. K. Card, J. Mackinlay, and B. Shneiderman, Readings
in Information Visualization: Using Vision to Think. San
Diego, CA: Academic Press, 1999.
C. Culy and V. Lyding, “Visualization as part of the
linguistic processing pipeline,” presented at the Linguistic
Processing Pipelines Workshop, Herbsttagung der
Gesellschaft
für
Sprachtechnologie
und
Computerlinguistik, Potsdam, October 2009.

