PLANARITY TESTING FOR GRAPHS REPRESENTED BY A ROTATION SCHEME
A. Donafee, C. Maple
Faculty of Creative Arts and Technology
University of Luton
Park Square
Luton
LU1 3DU
Abstract
Many algorithms exist to determine if a given
graph can be embedded in a plane [4]. The
majority of these methods, however, are only valid
for simple graphs and do not take into account the
order of edges emanating from each vertex. There
are many areas, such as communication design,
genetics, group theory, network optimisation and
VLSI, where this ordering of edges is crucial to the
representation of a system. Rotation schemes can
be used to store the ordering of edges around a
vertex. Let G be an arbitrary, possibly non-simple,
graph. We provide an algorithm that determines,
from the rotation scheme of G, if G can be
embedded in the plane. If the rotation scheme of G
can be realised by a planar drawing, the regions of
G are returned.
1.Introduction
A graph G=<V,E> is defined by a finite collection of
vertices, V, and edges, E. A graph can be represented
by a rotation scheme.
Definition 1.1: A rotation scheme, 3=(3v; v¬èV),
for a graph is a collection of lists such that for each
vertex v of G we have an ordered list, 3v, of edges
incident on v. The order of edges in 3v represents their
circular (clockwise) order around v.
The graph drawing, *, of G is a function such that
each vertex, v ¬è V, is mapped to a distinct point *v) in
the plane and each edge, (v, u) ¬èE, is mapped to a
simple open Jordan curve, *v, u), with endpoints *(v)
and *(u). The graph G is said to be planar if its graph
drawing can be embedded in the plane such that distinct
edges meet only at their common endpoints. A rotation
scheme is said to be achievable if it gives rise to a
planar drawing.
A planar graph can be partitioned into connected
topological spaces called regions (sometimes called
faces).

Definition 1.2: A region of a planar graph is an
area of the plane that is bounded by edges and contains
neither edges nor vertices.
Planar graphs are extremely useful both
theoretically and in real life applications. The theory of
planar graphs has been examined extensively; one field
in which it has proved particularly useful is simplifying
complex topological systems [4]. Moreover, only
planar graphs are acceptable to represent certain
systems. This is apparent in areas such as
communication networks [7], [17], circuit design [15],
very large-scale integration layout (VLSI) [2], [12], and
genetics [16], to name but a few.
There are many existing algorithms that determine
if a given graph can be embedded in the plane.
Hopcroft and Tarjan [9] developed the first planarity
testing algorithm that had linear (in terms of vertices)
time and space bounds. The authors employed a depth
first search method to decompose a graph into
subgraphs that were individually embedded into a
surface. If all the subgraphs of this graph could be
embedded in this surface then the graph was said to be
planar. An alternative to this 'path addition' approach,
is the 'vertex addition' method developed by Lempel et
al. [11], which was later improved upon by Booth and
Lueker [1].
Recently, dynamic planarity testing algorithms
have come under consideration due to the demands of
important real life applications such as network
optimisation, distributed computing and VLSI [5];
where it is not unusual to require that graphs of existing
systems be modified in some way. A technique has
been developed by Di Battista and Tamassia [5] that
determines if edges, or vertices and edges, can be
inserted into a planar graph G whilst maintaining
planarity. For both static and dynamic planarity tests,
once planarity has been determined, certain algorithms
then proceed by computing a possible embedding for
this graph [3], [13]. Indeed, both of these papers
represent embeddings by rotation schemes. The regions
of a planar graph can be determined using the
algorithms of Fan and Chang [6] and Jiang and Bunke
[10]. Both of these algorithms take the coordinates of
the vertices of a planar, simple, graph as input. A
problem with this approach is that it is unusual for a

Proceedings of the Seventh International Conference on Information Visualization (IV‚Äô03)
1093-9547/03 $17.00 ¬© 2003 IEEE

graph to be represented by coordinates and thus these
values would therefore have to be calculated before this
technique could be used.
A major feature of these planarity algorithms is
that they are valid only for simple graphs, that is,
graphs that have only one edge between any two
vertices. The main reason for this is that the graphical
data is represented, and manipulated, by a tree, a
connected graph without a closed circuit; non-simple
graphs cannot therefore be depicted by a tree structure
as they contain closed circuits. It is true that a nonsimple graph could be modified into a simple graph by
removing multiple edges between two vertices. Existing
planarity testing algorithms can then be used to test the
planarity of this graph. If the ‚Äútransformed‚Äù graph is
found to be planar, the multiple edges can then be reinserted. This could be an arduous procedure, especially
for graphs with a large number of multiple edges. It
would be useful, therefore, to have an algorithm that
can determine the planarity of a non-simple graph
without needing to alter the structure of that graph.
In some situations, the order that the edges
emanate from a vertex is essential to the representation
of the structure. One such instance occurs with labelled
graphs where 'values' are obtained by reading the labels
around a vertex. For example, pictures of group
presentations are finite connected planar graphs whose
edges are labelled by generators of the group
presentation. One feature of these pictures is that the
value obtained when travelling around the boundary of
a vertex equals the value of a relator of the presentation.
Clearly altering the order of the edges incident on this
vertex, although preserving planarity, would produce an
extraneous value for a relator. Again, due to the fact
that existing planarity techniques use trees to represent
graphs, this does not provide a way to store, and
maintain, the order of edges incident on vertices of a
graph.
The planarity test represented here determines if
the rotation scheme of a, possibly non-simple, graph G,
is achievable without altering the ordering of edges
incident upon each vertex. IfGis found to be planar,
the regions of Gare produced. Determining the regions
of the graph therefore occurs concurrently with
establishing planarity. Unlike [6] and [10], coordinate
values of the vertices do not need to be calculated first.
The main advantage of the algorithm proposed herein is
that it is valid for any graph regardless of loops,
multiple edges or connectivity and it is independent of a
co-ordinate system.
The organisation of this paper is such that useful
definitions are given in Section 2, Section 3 describes
and validates the planarity testing algorithm, the results
of tests that the implemented algorithm was performed
on are given in Section 4 and conclusions are presented
in Section 5.

2. Basic Notation
Let G=<V, E, 3> be an arbitrary graph where V

and E are finite collections of vertices and edges
respectively, and 3 is the associated rotation scheme for
G. We define Vi, j) to be the edge endpoint incident on
vertex i connected at position j, the edge number
obtained from the local rotation of v. Note that the term
edge endpoint is used for conciseness as we mean the
precise point where the edge meets the boundary of the
vertex. We say Vi, j), is a connection point of G. The
degree of a vertex v is the number of edges incident
upon v. A corner of a vertex v ¬èV is the section of the
boundary of v bounded by two neighbouring clockwise
connection points emanating from v. A path, 6 = (61,
6, ..., 6n), in G is a collection of distinct connection
points where (6i, 6i+1) denotes either a corner or an
edge of G, for all 1 d i < n.
The path, 6,is said to be of length n if it contains n
connection points. A cycle in G is a path where (6n, 61)
characterises an edge or a corner of G. A simple cycle
is a path that begins and ends at the same vertex. For
this algorithm a path, 6 of Gis constructed using the
follow convention: if (6i-1, 6i) defines a corner of a
vertex then (6i, 6i+1) must characterise an edge of the
graph. Similarly if (6i-1, 6i) defines an edge then (6i,
6i+1) must define a corner of a vertex.
Adjacency lists can be used to represent graphs
with a rotation scheme [14].
Definition 2.1: Given an arbitrary graph with a
set of vertices V, an adjacency list representation, A,
consists of a collection of |V| lists. Each list, A(v),
contains the list of edges incident on vertex v, for all
v¬èV.
These adjacency lists can be produced without
difficulty and enable data to be easily accessed and
manipulated. This algorithm is more efficient if we
modify these adjacency lists such that the connection
point, Vv,j), is now stored in the j-th component of
A(v), rather than simply storing the relevant vertex, v, as
is usual practice.

3. The Planarity Testing Algorithm
The concept of the algorithm is to embed distinct
paths of G into a topological space, H. In this section an
overview of the algorithm is given prior to proving its
validity.

3.1 Overview
We start by examining the representation of G.
All vertices of degree 1, that is those with a single edge
emanating from the vertex, can be removed. Clearly,
vertices with this property do not affect the planarity of
G. We then find any cycle, C, in G. If there does not
exist a cycle C, then G is a tree, and as such planar. We
assume that C exists. At this point, C represents two
regions of topological space, H. (Note that these regions
are not necessarily the regions of the embedded graph
G.) The regions defined by C are embedded into H, and

Proceedings of the Seventh International Conference on Information Visualization (IV‚Äô03)
1093-9547/03 $17.00 ¬© 2003 IEEE

H now contains a subgraph of G described by the
connection points of C, G' say.
A path, 6, of G is constructed that can be
embedded into G'. It is required that the connection
points of 6 are not contained in G'. In order for 6 to be
embedded in G', the first and last connection points of 6
must be associated with a disc contained in G'. The
region of G' that 61 can be embedded into is determined.
It is assumed that (61, 62) defines an edge rather than a
corner, although the argument is essentially the same, if
(61, 62) defines a corner. If 62 is associated with a
vertex that is not contained in G', it is not yet embedded
and the corner, (62, 63) and the arc (63, 64) are
calculated. This process is repeated until a connection
point, 6N say, is associated with a vertex in G'. If 61 and
6N can be embedded in the same region of G' then 6is
embedded and the new regions of G' are determined. If
61 and 6N, lie in different regions of G', however, then 6
cannot be embedded without violating the planarity of
G' and G is therefore non-planar.
Whilst G' is planar, a path consisting of
connection points of G that are not in G' is computed.
The first and last connection points of this path must be
associated with discs that have been embedded
previously in G'. It is determined whether this path can
be embedded in G'. The procedure terminates when
either G is found to be non-planar or every connection
point of G has been embedded in G'. If all connections
of G can be embedded in H, that is G' = G, then it is
concluded that the graph G defines a planar graph and
the regions of G are produced. The planarity testing
algorithm is represented schematically in Figure 1.

Figure 1: The planarity testing algorithm
This algorithm can be analysed in three parts:
xDetermining the regions that embedding a cycle of
G into H create.
xComputing and embedding paths of G into the
graph, G'.
xRecomputing the regions of G' once a new path of
G has been embedded into it.

3.2 Determining Regions from a Cycle
The representation of G is examined and all discs
of degree one are (iteratively) removed due to the
following proposition.
Proposition 3.2.1 A vertex with only one edge
incident upon it does not affect the planarity of G.
Proof: The proof of this proposition is obvious and
is left to the reader.
A simple cycle, C, in G is determined and the
regions defined by C are then embedded into H. The
space H now contains the graph, G' say. The regions of
G' are determined as follows.
Lemma 3.2.1 Let C be a simple cycle that has
been embedded in space H to create a graph G'. The
graph G' has two regions. The connection points of C
and C-1 define these regions, where C-1 denotes the
connections points of C in the reverse order.
¬ôi+1

C

¬ôi

Figure 2: Embedding a cycle C into space H
Proof: Let C be a simple cycle that has been
embedded in H to create a graph G', as shown in Figure
2. If the vertices of C are contracted to a simple point,
Figure 3 shows how the path that C takes can be cut
along to obtain two distinct parts: C and H-C (as
indicated by the shaded parts). The connection points of
C therefore define one region of G'. The space H-C is
characterised by C-1: if (6i, 6i+1) is a corner of a vertex
in the region characterised by C, then (6i+1, 6i) defines
the section of the boundary of that vertex not in that
region. Embedding cycle C in H therefore creates two
regions of G' as required.  

Proceedings of the Seventh International Conference on Information Visualization (IV‚Äô03)
1093-9547/03 $17.00 ¬© 2003 IEEE

C
H-

Figure 3: The 2 regions created by embedding C

3.3 Computing and Embedding Paths of G
Once C has been embedded into H, the planarity of
G is determined by embedding distinct paths of G into
G'. There must be a vertex, v say, which belongs to both
G and G‚Äô with a connection point, 61 say, incident upon
it that is in G and not G'. If there is no such connection
point then G = G' and therefore G is a planar graph. The
region of G' in which 61 can be embedded into is
determined from the following result.
Lemma 3.3.1 Let R = (Vv,s),..., Vw,x), Vw,z),
..., Vv,t)), where t = s+1 mod deg(v), characterise a
region of G'. Also let 6j = Vw,y) be a connection point
of G that is not in G'. The connection point, 6j, can be
embedded into R if and only if one of the following
cases holds:
Case 1 If x < z then 6j can only be embedded if x <
y < z.
Case 2 If x > z then 6j can only be embedded if
either:
1. x > y and y < z or
2. x < y and y > z.
Proof: The proof of this lemma follows from the fact
that every vertex has a clockwise numeric ordering of
edges and that a connection point can only be embedded
in an existing region if this ordering is not altered. The
edges around vertex w must therefore be given in the
clockwise order {x,y,z}, or a permutation of this
ordering depending on the values of x and z. Figure 4
can be used to illustrate this idea. Here the dashed lines
depict the only region that v, can be embedded into
whilst maintaining the order given by the rotation
scheme of v.  

process is repeated until a connection point, 61say, is
encountered with a vertex in G'. The following result is
established.
Theorem 3.3.1 Let 6 = (61 ,..,6N) be a path in G. If
61 and 6N can be embedded into different regions of G'
then G is non-planar. Alternatively, if 61 and 6N lie in
the same region of G' then can be embedded into G'.
Proof: Let 61, 6N be connection points that have
been embedded, according to the conditions given in
Lemma 3.1, into regions R, R' of G' respectively where
R z R'. As regions are bounded by both edges and
corners, obviously trying to embed 6 in G' involves
crossing the edge(s) that bound R and R', which violates
planarity of G', thus violating planarity of G'. As G' is a
subgraph of G, this embedding would also violate
planarity of G. If 61 and 6N lie in the same region then
can be embedded into this region of G' whilst
maintaining planarity.  

3.4 Recomputing Regions of G'
Once a new path of a graph G, 6 say, has been
embedded in G' this both creates new regions and
changes existing ones. Let 6 (Vx,b),..., Vy,g))be the
path that has been embedded in region Ri of G'. Let Ri =
(Vx,a), Vx,c), [1, Vy,f), Vy,h), [2) where [j (for j =
{1,2}), denotes a (possibly empty) ordered set of
connection points of Ri. The regions that the new
embedding creates are defined by examining Ri, 6 and
6-1, the connection points of in the reverse order. Note
that once 6 has been embedded, Ri is no longer a region
of G', according to the definitions of regions used in
this work. The number of new regions created by the
embedding is determined by the number of cycles in 6.
A possible drawing of this embedding is given in Figure
5.

c

x

a »ü2

h

y

f

c

x

a »ü2

Ri

¬ô

»ü1

»ü1

h

y

f

x

Figure 5: The region Ri and embedding 6 in Ri

v

Lemma 3.4.1 Let 6 be a path with m cycles that
is to be embedded into G'. Embedding 6 into G' creates
m+2 new regions of G'.

z
Figure 4: Embedding 6j in G'
Having calculated the region in which to embed 61,
the corresponding arc (6, 62) can be calculated. If 62
has a vertex associated with it that is not in G', then the
corner (6, 6) and the arc (6, 6) is computed. This

Figure 6: Contracting vertices of Ri and 6 and cutting

Proceedings of the Seventh International Conference on Information Visualization (IV‚Äô03)
1093-9547/03 $17.00 ¬© 2003 IEEE

along Ri and 6
Proof: Let 6 be a path that has been embedded into
region Ri of G'. Assume that 6 has no cycles. The
vertices of Ri and 6 can be contracted to a single point.
As 6 is simple, this reduces it to one single line. The
path taken by 6 and Ri can be cut along to split Ri into
two parts, as shown by the shaded regions of Figure
6.As 6 is simple, m = 0 and therefore m = 2 new
regions have been created by embedding 6 into Ri.

Figure 7: Contracting vertices of Ri and 6 and cutting
along Ri and 6
Alternatively, let 6 be a non-simple path with m
cycles. By applying the same argument as above, one
can contract the vertices of 6 and Ri to a single point
and cut along their connection points. This divides Ri
into m+2 separate regions. This is shown in Figure 7,
where m = 2. The shaded regions in Figure 7 are the
regions created by embedding 6. Embedding a path into
a region of G' therefore creates m = 2 new regions, as
required.  
In order to define the connection points of the new
regions created by embedding a path, the following
results are required. Firstly it is assumed that 6 is a
simple path and that this path has been embedded in Ri,
where 6 and Ri are defined above.
Proposition 3.4.1 If 6is a simple path the regions
defined by embedding this path in region Ri are as
follows:
Ri,1 = (Vx,a), 6, Vy,h), [2)
Ri,2 = (Vx,c), [, Vy,f), 6)
Proof: Embedding 6into Ri creates a new corner
of vertex x, (Vx,a), Vx,b)). Similarly, the last
connection point of 6 creates a new corner of vertex y,
(Vy,g), Vy,h)). The set [2 proceeds V(y,h) and this set
is itself preceded by V(x,a). This gives the set of
connection points: (Vx,a), 6, Vy,h), [2). Due to the
way in which Ri and 6were constructed, it is easily
seen that this set is a simple cycle of G'. From Lemma
3.2.1, it is known that the connection points of a simple
cycle define one region of a graph. This cycle therefore
defines a region of G'.
By applying a similar argument as the one above,
embedding 6creates two more corners, (Vx,c), Vx,a))
and (Vy,f), Vy,g)). The set [1 occurs after V(x,c) and
before V(y,f) and the following path is formed: (Vx,c),
[, Vy,f), 6). Again, it can be easily proved that this
path is a simple cycle and therefore defines a region of
G'.

Hence the regions of G' created by embedding 6 in
Ri are: Ri,1 = (Vx,a), 6, Vy,h), [2) and Ri,2 = (Vx,c), [,
Vy,f), 6), as required.  
If 6is a non-simple path, the multiple regions that
are created by embedding 6 are determined using the
following result.
Proposition 3.4.2 Let 6 61, 62,..., 6n) be a nonsimple path embedded in G'. Every vertex in 6is
associated with at least two connection points, V(v,i)
and V(v,j) say. Without loss of generality it is assumed
that i < j. If jz i+1 deg(v) for any vertex in 6-1, then
there exists a region Rk, defined by the subcycle (6x?,
‚Ä¶, 6y) of G' where i < x < y < j.
If m is the number of cycles in 6then this
condition holds for m vertices. The distinct connection
points of 6and 6-1 not in these m cycles, together with
the connection points of Ri, characterises two additional
regions of G'.
Proof: Let 6be a path with m cycles. From Lemma
3.4.1 it is known that embedding 6must create m+2
new regions of G'. Assume that m = 1 and vertex v
occurs 4 times in 6, where V(v,x) and V(v,y) are nonadjacent occurrences of v in 6 and V(v,y) occurs before
V(v,x).
Let J be a subsection of 6-1 such that J = (V(v,x), ...,
V(v,y)). Traversing J and the corner (V(v,y), V(v,x))
defines a simple cycle. This cycle must be simple as
V(v,y) and V(v,x) are the only connection points in
6that are not consecutive (modulo the length of 6).
This simple cycle, defined by J, therefore defines a
region of G'.
It is known from Proposition 3.4.1 that the
connection points of J also occur in region Ri,1. Due to
the fact that a connection point can only occur in two
regions then the connection points of J cannot occur in
any other region.
Recall that the connection points preceding V(v,x)
and following V(v,y) in 6-1 must also be incident on
vertex v. Removing J from 6-1 gives 6-1 = (6n, ..., V(v,j),
V(v,i),..., 6). This is now a simple path where every
vertex occurs twice and is adjacent. The results of
Proposition 3.4.1 can then be applied to obtain the
remaining two new regions.
Generally, if there are m > 0 such cycles in 6the
regions they define are computed accordingly. Let Mk
(for 1 d k d m) denote the set of connection points of the
k-th cycle of 6. The regions created by these cycles is
given by M-1k, as explained above. The remaining two
regions defined by this new embedding are therefore
given by the following:
Ri,m+1 = (Vx,a), 6, Vy,h), [2)
Ri,m+2 = (Vx,c), [, Vy,f), 6).
Note that if 6does not contain any cycles, m = 0
and the region Ri,2 is given by (Vx,c), [, Vy,f), 6),
which is in agreement with the results of Proposition
3.4.1.  

Proceedings of the Seventh International Conference on Information Visualization (IV‚Äô03)
1093-9547/03 $17.00 ¬© 2003 IEEE

4. Implementation and Experiments
As this algorithm is intended to be part of a package
that visualises pictures of group presentations it seems
obvious to implement it in a relevant language. The
planarity testing algorithm was implemented on the
Groups, Algorithms and Programming platform (GAP) [8],
which has an extensive library of functions pertaining to
groups and group presentations. The algorithm takes the
adjacency lists of a, possibly non-simple graph G, as input.
When all bi-connected components of G prove to be planar
the algorithm returns the regions of G. If a path of G cannot
be embedded into a topological space without violating
planarity then the algorithm stops and produces a message
to this effect.
The program was tested on equal numbers of planar
and non-planar graphs with the number of vertices in these
tests ranging from 2 to 100, edges from 2 to 290 and a
maximum of 3 bi-connected components.

5. Conclusions
In this paper we have presented an algorithm that
determines if a rotation scheme of an arbitrary graph
correctly depicts a planar embedding. In order to achieve
this, both planar and non-planar graphs are represented by
rotation schemes. Preceding this work, rotation schemes
have only been used to characterise the structure of planar
graphs. One of the main advantages of this planarity testing
technique is that the regions of the graph are computed
simultaneously to planarity being determined. Previous
algorithms (see [6], [10]) that extract regions from a given
graph require that the planarity of the graph is determined
beforehand.
An important feature of this algorithm is that it works
for non-simple graphs. Previous research in this area
concentrates on algorithms for simple graphs. Determining
planarity of non-simple graphs involves removing the
multiple edges, testing for planarity and re-inserting the
multiple edges. This algorithm removes the necessity to
transform the structure of a non-simple graph.
This algorithm has particular applications in such areas
as genetics, communication design, VLSI and network
optimisation; disciplines where the order of the edges
incident around a vertex could be important in the
representation of a system.

Algorithms for Drawing Graphs: An Annotated
Bibliography, Computational Geometry: Theory and
Applications, 4, 235-282.
[5] Di Battista, G., Tamassia, R., (1996), On-Line
Planarity Testing, Siam Journal of Computation, 25, 5,
956-997.
[6] Fan, K., Chang, C., (1991) Surface Extraction from
Line Drawings of a Polyhedron,Pattern Recognition
Letters, 12, 627-633.
[7] Jakoby, A., Reischuk, R., Schindelhauer, C., (1998),
The Complexity of Broadcasting in Planar and
Decomposable Graphs, Discrete Applied Mathematics, 83,
1-3, 179-206.
[8] The GAP Group, GAP --- Groups, Algorithms, and
Programming, Version 4.2; Aachen, St Andrews, 2000.
(http://www-gap.dcs.st-and.ac.uk/~gap)
[9] Hopcroft, J., Tarjan, R., (1974) Efficient Planarity
Testing, Journal of the Association for Computing
Machinery, 21, 4, 549-568.
[10] Jiang, X.Y., Bunke, H., (1993) An Optimal
Algorithm for Extracting the Regions of a Plane Graph,
Pattern Recognition Letters, 14, 553-558.
[11] Lempel, A., Even, S., Cederbaum, I., (1967), An
Algorithm for planarity Testing of Graphs, in
P.Rosenstiehl (Ed.) Theory of Graphs New York: Gordon
and Breach, 215-232.
[12] Liu, Y., Morgana, A., Simeone, B., (1998), A Linear
Approximation for 2-Bend Embeddings of Planar Graphs
in the 2d Grid, Discrete Applied Mathematics, 81, 1-3, 6991.
[13] Mehlhorn, K., Mutzel, P., (1996), On the Embedding
Phase of the Hopcroft and Tarjan Planarity Testing
Algorithm, Algorithmica, 16, 233-242.
[14] Mehlhorn, K., N√§her, S., (1995), A Platform for
Combinatorial and Geometric Computing, Cambridge:
Cambridge University Press.
[15] Mcdiarmid, C., Reed, B., Schrikver, A., Shepard, B.,
(1994) Induced Circuits in Planar Graphs, Journal of
Combinatorial Theory, Series B, 60, 2, 169-176.
[16] Voicu, L., Myler, H., Toma, C., (1998) Cloning
Operator and its Applications, SPIE Proceeding Series,
3390, 57-68.
[17] Wada, K., Nagata, Y., Chen, W., (1999) An Optimal
Fault-Tolerant Routing for Triconnected Planar Graphs,
Lecture Notes in Computer Science, 1665, 191-201.

6. References
[1] Booth, K.S., Lueker, G.S., (1976) Testing the Consecutive
Ones Property, Interval Graphs, and Graph Planarity using PQtree Algorithms, Journal Computation Systems, 13, 335-379.
[2] Bridgeman, S.S., Di Battista, G., Didimo, W., Lotta, G.,
Tamassia, R., Vismara, L., (1999) Turn Regularity and Planar
Orthogonal Drawings, Lecture Notes in Computer Science, 1731,
8-26.
[3] Chiba, N., Nishizeki, I., Abe, S., Ozawa, T., (1985) A Linear
Algorithm for Embedding Planar Graphs Using P-Q Trees,
Journal of Computer Systems and Science, 30, 1, 54-76.
[4] Di Battistia, G., Eades, P., Tamassia, R., Tollis, I.G., (1994)

Proceedings of the Seventh International Conference on Information Visualization (IV‚Äô03)
1093-9547/03 $17.00 ¬© 2003 IEEE

