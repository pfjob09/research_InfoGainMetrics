A Heuristic for k-Broadcasting in Arbitrary Networks
Hovhannes A.Harutyunyan∗ and Bin Shao
Department of Computer Science
Concordia University
Montreal, Quebec, H3G 1M8, Canada
haruty@cs.concordia.ca

Abstract
In this paper, we present a heuristic algorithm for kbroadcasting in an arbitrary network. This heuristic generates optimal k-broadcast time in grid graph when k ≥ 2.
In two-dimensional torus graph, it also generates optimal
k-broadcast time when k ≥ 3, while giving a bound of
m
+ n2 + 1 when k = 2, where m and n are the
2
number of rows and columns in the graph. In practice,
the new heuristic outperforms best known 1-broadcast algorithm for three different network design models. The new
algorithm runs fast. The time complexity of the algorithm is
O(R · m), where R represents the rounds of broadcasting,
and m stands for the total number of edges in the graph.

1. Introduction
Broadcasting is the message dissemination process, in
which a message is sent from one node, the originator, to all
nodes of the network. The process is performed by a series
of calls over the communication lines of the network. Each
call requires one unit of time. A node can participate in only
one call per unit of time. Typically, it is assumed that each
call can involve only one informed node and one of its uninformed neighbors. In k-broadcasting, each call involves
a caller who sends the message to up to k of its neighbors
in one time unit. Normally, a network can be modeled as a
graph G = (V, E), where V is the set of vertices (or nodes)
and E is the set of edges (or communication lines). Two
nodes u ∈ V and v ∈ V are adjacent if there is an edge
e ∈ E, such that e = (u, v). We also say node u or v is
a neighbor of another node. The degree of a node is the
number of neighbors of this node. The degree of a graph G
is the maximum degree among all nodes in this graph. We
use ∆ to denote the degree of a graph. The diameter of a
∗ This author was supported by the Natural Sciences and Engineering
Research Council of Canada

graph G, denoted by D is the maximal distance between any
pair of nodes in the graph G. For our message dissemination
purpose, it is natural to assume that the network is represented by a connected graph. A round is the set of parallel
calls in a same time unit. We use the number of rounds to
measure the broadcast time. The k-broadcast time bk (G, u),
or simply bk (u), is the minimum k-broadcast time of graph
G originated by node u. The k-broadcast time of graph G
is deﬁned as follows: bk (G) = max{ bk (G, u) | u ∈ V }.
Given a graph G with degree ∆, bk (G) = D when k ≥ ∆.
When k = ∆ − 1, D ≤ bk (G) ≤ D + 1, because after
the ﬁrst round, each informed node has at most ∆ − 1 = k
uninformed neighbors. Generally speaking, when k < ∆,
D ≤ bk (G) ≤ D · ∆
k . The k-broadcast time in a path
graph Pn is always n − 1 for all k. In the cycle graph Cn ,
the k-broadcast time is n2 when k = 1 [4]. When k ≥ 2,
the k-broadcast time in Cn is n2 , which is the diameter
of the graph. The worst case of the k-broadcast in the grid
graph is that the originator is on a corner of the graph. The
1-broadcast time of a grid graph Gm,n is m + n − 2 [6].
When k ≥ 2, in each step, an informed node has at most
2 uninformed neighbors. Therefore, the k-broadcast time is
the diameter of the graph, which is still m + n − 2. The optimal 1-broadcast time of the two-dimensional torus graph,
n
denoted by T orus(m, n), is m
2 + 2 when m or n is
m
n
even; and it is 2 + 2 − 1 when both m and n are
odd [4]. When k ≥ 2, we can achieve the optimal kbroadcast time in T orus(m, n) by the following scheme:
ﬁrst, an informed node sends the message to its uninformed
column neighbors (if it has such neighbors). After all nodes
on the column that the originator is located at are informed,
each informed node sends the message to uninformed row
neighbors (if it has such neighbors). This scheme clearly
n
will give bk (G) = m
2 + 2 = D.
The problem of ﬁnding the optimal broadcasting schedule in an arbitrary graph is NP-hard [12]. Therefore, one
reasonable solution is to ﬁnd a heuristic which can offer
good broadcasting schedules. Most of the previous work
in this area has been for k = 1 ([2], [5], [10], [11], [13]).

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

Among them, the algorithm in [2] is the best existing heuristic for 1-broadcasting in practice.
In this paper, a new heuristic for k-broadcasting is presented. The theoretical and experimental results concerning
the heuristic are introduced in Section 3 and Section 4, respectively. The time complexity of one round of the new
heuristic is O(m), while the complexity of one round of the
algorithm from [2] is O(n2 · m), where n is the number of
nodes and m is the number of edges in a graph.

2. The new heuristic
In this section, we will give a brief description of the new
algorithm for k-broadcasting in arbitrary networks.

2.1. Deﬁnitions and implementation algorithms
Deﬁnition 1. The dark region, which is denoted by DR(t), is
a subgraph of G that is composed by all uninformed vertices
at round t. Those nodes in DR(t) that have informed neighbors compose dark border, which is denoted by db(t). The
bright border bb(t) is composed of those informed nodes
that have uninformed neighbors.

k
Dark Region: DR(t)
3

e

f

2

i

n

b

A node in bb(t)

j

o

c
3
1
a

2

d
p

3

h

A node in db(t)
m
l
g

Figure 1. Deﬁnitions in the new heuristic.

Figure 1 illustrates how these concepts are deﬁned. The
shadowed area is dark region DR(t). The nodes in DR(t)
with black backgrounds belong to db(t), and the nodes not
in DR(t) with shadowed backgrounds belong to bb(t).
Deﬁnition 2. D(v, t) is the shortest distance from node v
to bb(t) at round t. Given an uninformed node u and its

uninformed neighbor v, if D(u, t) = D(v, t) + 1, we say u
is a child of v. Node v and all its descendants make up the
descendant graph of v, which is denoted by DG(V, E, v), or
rather DG(v). We use a way to estimate the broadcast time
of DG(v) in round t, and denote it by EB(v, t). We also use
EB as the abbreviation for estimated time.
If at round t, a node v has no children, then EB(v, t) =
0. Otherwise, given v has p children, and c1 , c2 ,...cp are
the children of v ordered so that EB(cj , t) EB(cj+1 , t),
for 1 ≤ j ≤ p − 1, then, in k-broadcasting, EB(v, t) =
max{ EB(c(i−1)·k+1 , t) + i }, for 1 ≤ i ≤ kp .
Here, we introduce an algorithm to calculate EB(v, t) in
O(p) time when the estimated broadcasting times of all the
p children of node v are given. First, ﬁnd max{EB(cj , t)},
for 1 ≤ j ≤ p, and denote it by M AX. Then, create kp
buckets, and number them from 0 to kp − 1. Consider
any child c, if M AX − i ≥ EB(c, t) > M AX − i − 1,
put c into the ith bucket, and during the process, record
the number of elements in each bucket. After that, we
denote the number of elements in the ﬁrst ith buckets as
SU M (i). In the ith bucket, if SU M (i) can be divided
with no reminder by k, then assign M IN (i) the kth smallest element in the bucket. Otherwise, assign M IN (i) the
(SU M (i) mod k)th smallest element in the bucket. Then,
+M IN (i)}, for 0 ≤ i < kp .
EB(v, t) = max{ SUM(i)
k
The proof of the last statement will be omitted.
Caculating M IN (i) dominates the time complexity. In
the worst case, we search the kth smallest element in each
bucket. Assuming there are pi elements in bucket i, then the
total time complexity to calculate M IN (i) for all buckets
p
k
O(k · pi ) = O(k · p) = O(p). Therefore, the time
is i=1
complexity of this algorithm is O(p).
Deﬁnition 3. mnw(t) stands for the maximum-numberweight matching between set db(t) and bb(t) at round t.
mnw(t) has the following properties:
(1) Only nodes in db(t) have weight.
(2) The number of node groups, where one node is in
db(t) and others are in bb(t) in each group, is maximized.
(3) In case of (2), the sum of weights in db(t) is maximal.
In mnw(t), the weight is assigned on nodes rather than
edges. In round t, mnw(t) could be calculated by the following process:
(1) In bb(t), select the node v with minimum number of
uninformed neighbours.
(2) Among the uninformed neighbours of v, get at most k
nodes u1 , u2 , ..., uk with the ﬁrst k maximum weight. Then,
u1 , u2 , ..., uk are the mates of v.
(3) Mark u1 , u2 , ..., uk as informed, then go to step 1.
By using this process, the node groups in mnw(t) must
be at a maximum. However, the process would not always
make the weights in db(t) reach their maximum. In fact,
this process is a heuristic for calculating mnw(t).

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

An algorithm named lists − matching is designed to
calculate mnw(t) with a time complexity O(m). In this algorithm, we create at most ∆ buckets. The nodes in bb(t)
with i uninformed neighbors are put in the ith bucket. The
nodes in a bucket are divided into two groups. One group
contains the matched nodes, and another one contains the
unmatched nodes. The algorithm calculates matching starting at the ﬁrst bucket and through the last one. Every node
in bb(t) must be visited to do matching in each round. When
a node is matched, all its neighbours have to deduct their
number of uninformed neighbours by one, and such neighbors are moved to suitable bucket. This can be done in
n
i=1 O(di · k) time, where d1 , d2 , ..., dn are the degrees
n
of the nodes of the graph. Since i=1 di = 2m, then the
complexity of lists − matching will be O(m · k) = O(m),
since k is a constant.

informed neighbours of a node in bb(t + 1) is 0, then this
node will be removed from bb(t + 1). In the worst case, this
take O(n) time. Thus, the time complexity of one round is
O(m) in total. Let R denote the rounds of broadcasting; the
total time complexity of the new heuristic for broadcasting
is O(R · m).
The matching dominates the space complexity, which is
O(∆ · n) (∆ is the degree of graph G).
Because a child could have more than one parent, the
weight of this child could be counted several times when we
compute the weight of those parents. Thus, the effect of this
child during the process of broadcasting is overestimated.
This motivates us to reﬁne our algorithm by dividing the
weight of this child by the number of its parents.

2.2. The heuristic and its complexity

It is easy to see that our algorithm gives optimal kbroadcast time in the path and cycle graphs. For the grid
and two-dimensional torus graph, we only consider the situation that k ≥ 2. The proof of the next three theorems are
omitted.

Based on the above deﬁnitions, the heuristic is deﬁned
as follows:
Algorithm:
(1) Initialize bb(t) so that bb(0) has one node: the originator.
(2) Put EB(v, t) as the weight to any node v in DR(t).
(3) Find the mnw(t) between bb(t) and db(t), and during the process, mark all matched nodes as informed.
(4) Compute bb(t + 1).
(5) If bb(t + 1) is empty, the process is complete, and t
would be the broadcast time. Otherwise, go to (2).
Steps 2 and 3 dominate the time complexity. Step 2 (the
implementation of assigning weights) has two phases. In
the ﬁrst phase, the heuristic performs a Breadth First Search
(BFS) of DR(t) from the bb(t) and label each node by
D(v, t). At the same time, a set is created to save nodes
that have no children. This set is denoted by rb(t), which
means remote border. Let m denote the number of edges
of graph G, then this step can be done in O(m) time. In
the second phase, a recursive process is used to compute
weight for each node in DR(t). This process starts from
rb(t) towards db(t). In the worst case, we have to calculate
EB(v, t) for every node of graph G (except that of the originator). The degree of the ith node of graph G is denoted
by di . By using the new heuristic to calculate EB(v, t),
the time needed for a node with degree d is O(d). Then,
n
the time needed to calculate all the nodes is i=1 O(di ).
n
Since i=1 di = 2m, the complexity of this step is O(m).
Thus, the total complexity of assigning weights (step 2) is
O(m). By using the lists − matching algorithm, the time
complexity of step 3 is O(m). During the process of matching in round t, whenever a node is marked as informed, it
is added into bb(t). At the beginning of round t + 1, each
node in bb(t + 1) will be visited once. If the number of un-

3. Theoretical results

Theorem 1. The new algorithms generates optimal kbroadcast time in the grid graph for k ≥ 2.
Theorem 2. In the two-dimensional torus, T orus(m, n),
the new algorithm gives the optimal k-broadcast time when
k ≥ 3.
Theorem 3. By using the new algorithm, the 2-broadcast
n
time in T orus(m, n) is m
2 + 2 + 1, which is one round
more than the optimal broadcast time.

4. Experimental results
In this section, the testing results of 1-broadcasting in
several commonly used topologies and three graph models are provided. In this section, we simply use broadcasting to present 1-broadcasting. In this section and the tables, Sd , BFd , Hd , SEd and CCCd abbreviate the Star
graph, Butterf ly graph, Hyper Cube graph, Shuf f le
Exchange graph and Cube−Connected Cycle graph with
dimension d in the order stated.
As in [2], we tested our heuristic on deBruijn,
Shuf f leExchange, Butterf ly and CCCd graph. Because the time complexity is only O(R · m), it’s easy for
us to test the heuristic on large graphs. So, while we were
able to run our algorithm for up to d = 20, in [2], the author
have values for d ≤ 14.
All our results for d ≤ 14 are the same as in [2], except for 4 cases: in 2 cases our algorithm gives better result
(mentioned by ∗ ) and in 2 cases their result is better (mentioned by − ). In fact, we generated a new upper bounds on

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

broadcast time for BFd , CCCd when 15 ≤ d ≤ 16, and for
U B2,d and SEd when 15 ≤ d ≤ 20.
In addition, we tested our algorithm on Hypercube and
Star graph, generating again new upper bounds. Also, in
our tables, we present the average broadcast time to show
that the average is very close to the minimum value. In
the tables, Low and U p stands for lower bound and upper
bound respectively. Ave and M in means the average and
minimum testing results. Opt is the optimum broadcasting
time of a graph.
Ns is an event simulator targeted at networking research.
It began as a variant of the REAL network simulator in
1989. The ns-2 simulator could create topologies by using
several models. To compare the new heuristic with the algorithm from [2], three different network design models from
ns-2 are considered: GT-ITM P ureRandom [14], GT-ITM
T ransit − Stub (TS) [14] and T iers [3].
In total we considered about 200 different graphs using
the above three models for 155 ≤ n ≤ 4400, where n is
the number of vertices in the graph. In only one case, our
algorithm gave a broadcast time that is one round more than
the broadcast time obtained by using the algorithm from [2].
In all other cases, we obtained either the same broadcast
time as in [2] or better. In the P ure Random model we
got a 12% improvement. In the T ransit − Stub model
our algorithm gives better broadcast time in more than 40%
of the cases. Our algorithm worked better under the Tiers
model, as it gave a smaller broadcast time in about 60%
of the cases. We are still in the process of continuing our
experiments.
The following ﬁgures represent testing results of our algorithm and the algorithm from [2] in the above three models. In these ﬁgures, the solid line stands for the testing
results of our algorithm, and the dashed line represents the
testing results of the algorithm from [2].
T

d
3
4
5
6
7
8
9
10
11
12
13
14
15
16

CCCd
Low Up
6
7
9
9
11
12
13
14
16
17
18
19
21
22
23
24
26
27
28
29
31
32
33
34
36
37
38
39

Min
6
9
11
13
16
18
21
23
26
28
31
33
36
39

Ave
6
9
11
13
16
18
21
23.27
26
28.75
31
33.6
36
39

d
3
4
5
6
7
8
9
10
11
12
13
14
15
16

BFd
Low Up
5
5
7
7
8
9
10
11
11
13
13
15
15
17
16
19
18
21
19
23
21
25
23
27
24
29
26
31

Min
5
7
9
10
12
14
16
18−
19
21∗
23
25−
27
29

Ave
5
7.006
9
10.997
12.316
14.008
16.01
18
19.86
21.18
23.15
25
27
29

d
3
4
5
6
7
8
9

Sd
Low Up
3
11
5
14
7
19
9
23
13
29
16
33
19
39

Min
3
5
8
11
14
16
20

Ave
3
5.951
8.022
11
14
16.9
20

30

25

20

15

150

900

1650

2400

3150

3900

4410 N

Table 1. Testing Results in CCCd , BFd and Sd

Figure 2. Tiers Model

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

T

d
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20

Hd
Opt Min Ave
3
3
3
4
4
4
5
5 5.068
6
6 6.444
7
7 7.951
8
9
9
9 10
10
10 11
11
11 12
12
12 13
13
13 14
14
14 15
15
15 16
16
16 17
17
17 18
18
18 19
19
19 20
20
20 21
21

U B(2, d)
Low Up Min Ave
4
6
4
4
6
8
5
5
7
9
6∗ 6.334
8 11 8 8.016
10 12 9 9.566
11 14 11 11.022
12 15 12 12.366
14 17 14 14.01
15 18 15 15.53
16 20 17 17
18 21 18 18.57
19 23 20 20
20 24 21 21.82
22 26 23 23
23 27 25 25
24 29 26 26
26 30 28 28
27 32 29 29

33

32

31

30

29

28

27

2209

2609

3009

3409

3809

E

(a)

T
31

30

29

28

27

26

Table 2. Testing Results in Hd and U B(2, d)

25

24

2234

2634

3034

(b)

d
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20

SEd
Opt Min
5
5
7
7
9
9
11
11
13
13
15
15
17
17
19
19
21
21
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40

Ave
5
7
9
11
13
15.502
17.469
19.46
21.77
24
26
28
30
32
34
36
38.8
40

Table 3. Testing Results in SEd

3434

3627

E

Figure 3. Tiers Model (N = 2205)

Figure 2 and Figure 3 present some of the testing results
in the Tiers model. The horizontal scale in Figure 2 represents the number of nodes in the tested graphs. The vertical
scale in Figure 2 refers to the broadcast time. It is possible
that a bigger graph has a smaller broadcast time, because
the number of edges and the topological structure of a graph
also play important roles in determining the broadcast time.
In Figure 3, we give the testing results in graphs that have
2205 and 1105 nodes respectively. The horizontal scale in
Figure 3 stands for the number of edges in the tested graphs,
while the vertical scale in them refers to the broadcast time.
In both Figure 3 (a) and (b), the tested graphs have 2205
nodes. The number of edges of graphs in Figure 3 (a) is increased by adding connections between a LAN and a MAN.
The graphs in Figure 3 (b) are generated by adding several
extra edges between a WAN and a MAN to graphs in Figure 3 (a). The WAN, MAN and LAN stand for the Wide
Area Network, Metropolitan Area Network and Local Area
Network respectively [3]. Therefore, in Figure 3 (a) and (b),
the broadcasting time of graphs with approximately identi-

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

cal number of edges could be dramatically different.

Symposium on Foundations of Computer Science, 2001,
pp. 510-519.

T

[2] R. Beier and J. F. Sibeyn. A Powerful Heuristic for Telephone Gossiping. The 7th International Colloquium on
Structural Information & Communication Complexity
(SIROCCO 2000), L’Aquila, Italy, 2000, pp. 17-36.

11

10

[3] M. B. Doar. A Better Model for Generating Test Networks. IEEE GLOBECOM’96, London, UK, 1996.

9

[4] P. Fraigniaud and E. Lazard. Methods and problems of
communication in usual networks. Discrete Appl. Math.
53, 1994, pp. 79-133.

8

7
200

300

400

500

600

700

750

N

Figure 4. Pure Random Model
We present some of the testing results in the GT-ITM
Pure Random model in Figure 4. The vertical scale in Figure 4 stands for the broadcast time of tested graphs. The
horizontal scale in Figure 4 is the number of nodes. By using the Pure Random model, we generated about ten different graphs for each value of the number of nodes. Then we
picked up one of the results randomly to put in the ﬁgure.
T

18

[5] P. Fraigniaud and S. Vial. Approximation Algorithms
for Broadcasting and Gossiping. Journal of Parallel
and Distributed Computing. 43(1), 1997, pp. 47-55.
[6] S.M Hedetniemi, S.T. Hedetniemi and A.L. Liestman.
A survey of gossiping and broadcasting in communication networks. Networks 18, 1996, pp. 319-349.
[7] H. A.Harutyunyan and B. Shao. A Heuristic for Broadcasting. IASTED International Conference on Communications and Computer Networks (CCN 2002), Cambridge, USA, 2002, pp. 360-365.
[8] J. Hromkovic, R. Klasing, B. Monien and R. Peine.
Dissemination of Information in Interconnection Networks. Combinatorial Network Theory. D.-Z. Du, D.F.
Hsu(eds.), Kluwer Academic Publishers, 1996, pp.
125-212.
[9] R. Klasing, B. Monien, R. Peine and E. A. St¨ohr. Broadcasting in butterﬂy and deBruijn networks. Discrete
Appl. Math. 53, 1994, pp. 183-197.

17

16

[10] G. Kortsarz and D. Peleg, Approximation Algorithms
for Minimum Time Broadcast. SIAM J. Discrete Math.
8, 1995, pp. 401-427.

15

14

2084

2134

2184

2234 2255

E

Figure 5. GT-ITM TS Model (N = 1056)
We give some of the testing results in the GT-ITM TS
model in Figure 5. The vertical scales in these ﬁgures stand
for the broadcast time of tested graphs. The horizontal
scales refer to the number of edges in tested graphs.

References
[1] W. Aiello, F. Chung and L. Lu. Random evolution in
massive graphs. Proceedings of the 42nd Annual IEEE

[11] R. Ravi. Rapid Rumor Ramiﬁcation: Approximating
the minimum broadcast time. 35th Symposium on Foundation of Computer Science, 1994, pp. 202-213.
[12] P.J. Slater, E.J. Cockayne and S.T. Heditniemi. Information dissemination in trees. SIAM J.Comput. vol. 10,
no. 4, 1981, pp. 692-701.
[13] P. Scheuermann and G. Wu. Heuristic Algorithms
for Broadcasting in Point-to-Point Computer Network.
IEEE Transactions on Computers. C-33(9), 1984.
[14] E. W. Zegura, K. Calvert, and S. Bhattacharjee. How
to Model an Internetwork. IEEE INFOCOM, San Francisco, CA, 1996.

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

