A Fast Focus + Context Viewing Technique for the Navigation of
Classical Hierarchical Layout
Quang Vinh Nguyen and Mao Lin Huang
Faculty of Information Technology
University of Technology, Sydney
NSW 2007, Australia
quvnguye@it.uts.edu.au, maolin@it.uts.edu.au
Abstract

perceptual impedance matching [Brautigam 1997]. These
categories are roughly summarized as below.

This paper presents a fast focus+context viewing
technique for the navigation of classical hierarchical
layouts. In these layout techniques, only one dimension is
considerably important to the visualization. Based on this
property, we only consider one dimension of distortion of
views for browsing the hierarchical structures. We firstly
introduce briefly some information visualization
techniques. We then discuss the features, advantages and
limitations of layout and navigation of current classical
hierarchical layouts. We finally introduce our new
focus+context technique that is simple and fast for the
navigation and exploration of the classical hierarchical
layouts.

x

Focus+context - includes all information
visualization techniques that supports both detail
view and global view. These techniques enlarge a
small portion of the entire hierarchy (where the
user focuses on) while the overall structure of a
larger context is still maintained. In other words,
it can be defined as “detailed views of particular
parts of an information set are blended in some
way with a view of the overall structure of the
set” [Lamping, 1995]. Typical focus+context
techniques include Fisheye Views [Furnas 1986],
Polyfocal Display [Kadmon and Shlomi 1978],
Bifocal Lens [Spence and Apperley 1982],
Perspective Wall [Mackinglay et al. 1991],
Hyperbolic Tree Browser [Lamping and Rao,
1995], Cone Tree [Robertson et al. 1991], etc.

x

Zooming and filtering - works by reducing the
amount of context in the display. The reduction is
done by filtering the information in the form of
selecting a subset of the data along a range of
numerical values in one or more dimensions.
Typical Zooming and Filtering techniques are
Starfield Display [Jog and Shneiderman 1995],
TreeMaps [Johnson and Shneiderman 1991],
Focus Interactive Table [Spenke et al. 1996],
Pad++ [Bederson and Hollan 1994], etc.

x

User interface widgets - allows the user to select
a focus, filter out extraneous information, zoom
in on certain ranges of information and create
complex query criteria for finding particular
information. User interface widgets techniques

1. Introduction
With the rapid growth of information, the sizes of
data sets have increased every year, and the visualization
of large hierarchies has become more and more important
in terms of displaying and manipulating information. In
addition, it is much more economical and convenient to
visualize and manipulate the information from ordinary
personal computers rather than from expensive and
powerful graphic workstations which are usually available
in research labs. This raises a question: how to sufficiently
visualize and manipulate large relational information from
a normal personal computer with limited screen space?
Thanks to the efforts of research scientists, many
information visualization techniques have been proposed
and implemented that can be used to solve the “small
screen” problem. These techniques can be roughly
organized into four main categories: focus+context,
zooming and filtering, user interface widgets, and

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

Figure 1. An example of displaying a large tree layout used RT algorithm.
include Alphaslider, Range Slider, Query
Spreadsheet, Movable Filters, Magic Lens, Zoom
Bar, Protofoil, Filter/Flow Boolean Query, TwoDimensional Widgets, etc [Brautigam 1997].
x

Perceptual impedance matching – includes
techniques that try to keep the flow of
information constant and flowing. Typical
techniques in this category are Dynamic Queries,
Scatter/Gather, Animation, etc [Brautigam 1997].

These techniques are independent or dependant on the
layout algorithms. Typical graph/tree drawing techniques
are classical hierarchical view [Reingold 1981], h-tree
layout [Shiloach 1996], radial view [Eades 1992],
hyperbolic browser [Lamping and Rao, 1995], tree-maps
[Johnson and Shneiderman 1991], cone-tree [Robertson et
al. 1991], etc.

1.1. Classical hierarchical layout:
The classical hierarchical layout is based on the
algorithm developed by Reingold and Tilford [1] which is
also called RT algorithm. In this algorithm, children nodes
are positioned below their common ancestor (see Figure
1). In short, the algorithm calculates the relative positions
of sub-trees independently and then joins them in a larger
tree by placing these sub-trees as close as possible. The
detail of this algorithm is described at the next section.

Currently, several newly layout techniques have been
proposed and developed including radial view, hyperbolic
browser, tree-maps, cone-tree, etc. These techniques are
often better in term of space-efficiency, navigation, and
large-scale visualization. However, the new techniques
cannot match RT algorithm in term of simplicity,
predictability and aesthetically nice trees visualization. As
a result, RT algorithm is widely used in many applications
where data sets are reasonably small.
The hierarchical layout, however, still has a limitation
that the layouts tend to be too wide to be displayed at a
screen size. As a result, the classical hierarchical layout is
not applicable to large data sets. There are a few variations
to this layout technique which are described by Kennedy
1996 [2], Bruggenmann-Klein and Wood 1998 [4], and
Herman et al. 1998 [3]. In addition, there are no good
available navigation techniques for viewing large classical
hierarchical layouts. Typical viewing techniques available
for navigating classical hierarchical layouts are zooming
[Herman et al 1998] and fisheye-view [Furnas 1986].
When a focused area is zoomed, the overall context is lost.
This might lead to the broken of mental map during the
navigation in the zooming techniques. On other hand, the
fisheye-view is a focus+context technique where the
context is kept during the navigation. However, this
technique causes the distortion of views. This distortion
reduces the geometric area reserved for displaying the
overall context on the plane that might prevent the user
from understanding the overall structure of the hierarchy.

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

(a)

(b)

(c)

Figure 2. The Reingold and Tilford Algorithm
Furthermore, most classical focus+context methods
use 2D distortion technique for viewing hierarchies. This
technique costs considerable large amount of the
computation time for view transformations during the
navigation, especially for viewing large hierarchies. This
problem sometimes slows down the navigation activities.
This paper proposes a fast and simple focus+context
technique for the classical hierarchical tree visualization.
Our technique attempts to retain the shape of the layout
during the navigation. This addresses the problem of
preserving mental map.
In our approach, the hierarchical layout is presented
in vertically top-down manner where nodes in the equallevel are placed at the same horizontal line. The
navigation operates horizontally and focus regions are
dragged into the middle. This reduces the computation
time for changing views as we only consider onedimensional distortion of views for the browsing of
hierarchies. We also provide a mechanism to solve the
problem of labeling, especially the problem of displaying
very long node’s labels.

2. Technical detail
Our viewing technique can be applied to any layouts
where only one-dimensional distortion is considerably
important. In the scope of this paper, we only apply our
viewing technique to rooted trees where their layouts are
based on Reingold and Tilford.algorithm. We decided to
choose this layout algorithm to test our viewing technique
because it is simple, fast, well known and produces nice
layout in overall. Our system includes two major sections:
layout and interaction. The layout section is responsible
for constructing the tree layout while the interaction
section is used for the viewing and navigation of these
hierarchies.

2.1. Layout
There are two separate steps in this section. Firstly,
the system constructs a tree layout based on RT algorithm.

We then apply a transformation to every node in order to
achieve the final drawing.
The RT algorithm takes a modular approach to
calculate the position of nodes. The relative positions of
the nodes in a sub-tree are calculated independently from
the rest of the tree. Conceptually, the algorithm
recursively traverses through the tree and place the nodes
from leaves upward to the root of the tree. The process
uses bottom-up direction in our system. Each sub-tree is
considered as a local unit. From left to right direction, the
siblings of a node in a sub-tree are placed to a proper
minimal distance from one another. Then, all nodes of
each sub-tree are shifted to the right in order to avoid
intersection between sub-trees (see Figure 2).
The shifting of all nodes in the sub-tree is literally
expensive. To overcome this problem, Reingold and
Tilford use the concept of a preliminary x coordinate and
a modifier field for each node. The tree placement is
recursively calculated in two separate traversals, namely
post-order and pre-order traversals. In the first tree
traversal, the intermediate x coordinate and the modifier
value are set. The modifier value is used to indicate the
amount to be added to the intermediate x coordinate of all
nodes of the corresponding sub-tree. Then, the pre-order
traversal is applied for calculating the final x coordinate
values of each node by accumulating the modifier values
in the process. This traversal also calculates the y
coordinate values based on the level of each node in the
hierarchy. The detail of this algorithm is described in
‘Tidier drawing of trees’ by Reingold and Tilford [1].
Figure 1 shows an example of the display when we apply
RT algorithm to visualize a hierarchical layout.
The final displacement of the hierarchy is calculated
based on values from the above RT algorithm. For each
node of the hierarchy, we apply a transformation function
in order to get the final coordinate value. In our system,
the point (0, 0) is located at the top-left of the display
window. For each node N, suppose that (xrt, yrt) is the
coordinate of node N after using RT algorithm. The final
coordinate (x, y) is calculated:

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

2 * C * A tan(M * ( xrt  C ))
C
Pi
y = yrt

x=

(1)

Where C is a constant and it equals to half width of the
display window. In other words, C is the offset value of
two coordinate systems (transformation and display). In
our transformation function, the value x = 0 is defined at
the centre of the window in horizontal direction. M is also
a constant and it defines the magnification of the
distortion. The magnification value is proportional to the
value of M. This value can be adjusted during the
navigation in order to archive the suitable view. Figure 3a
and 3b are two examples of the final display, where M =
0.02 and M = 0.04.

Where C and M are constants that are defined at equation
1, and xold is the previous x coordinate value of node N.
We keep y coordinate value unchanged during the
navigation. Figure 4a is an example of the original display
of a large data set. Figure 4b shows the display when
focused node, with labeled “Champagne”, is dragged to
the middle.

Figure 4a. An example of the original display

Figure 3a. An example of the layout where M = 0.02

Figure 3b. An example of the layout where M = 0.04

2.2. Navigation and Interaction

2.3. Display property

In our system, the navigation operates horizontally by
dragging information to the focus area, i.e. the middle
area. Suppose that the mouse drags in horizontal direction
a distance of k. For each node N of the tree, the x
coordinate value is recalculated by the formula:

x=

2 * C * A tan( xold  M * K ))
C
Pi

Figure 4b. An example of the display when focus
node labeled “Champagne” in Figure 3a is moved to
the middle.

(2)

In our system, we only display the detail of nodes that
are not very close to their siblings. Similarly to the
classical hierarchical layout technique, we also have
problem with labeling when the label of nodes are very
long. To overcome this problem, we draw nodes’
information just below their normal positions if their
labels are too long and they clash with other nodes (see

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

Figure 3). This technique improves the clarity of layout in
overall.

2.4. Complexity
Our viewing algorithm includes two separate steps:
the first step uses Reingold and Tilford algorithm and a
transformation. The run time complexity of Reingold and
Tilford algorithm is O(N) where N is the number of nodes
(Reingold and Tilford, 1981). The transformation
presented in equation 1 is linearly applied to every node of
the hierarchy which also costs O(N). As a result, our
layout complexity is O(N) or linear. Similarly, the
navigation function (the 2nd step) also applies to every
node as a linear transformation. This means that each
navigation costs O(N). Therefore, our viewing algorithm
is very fast.

3. Conclusion and future work
We have presented a fast focus+context technique for
the viewing and navigation of classical hierarchical
layouts where only one dimensional distortion of view is
considerably important. Our technique helps user to
browse and retrieve the hierarchical information without
losing the context. We choose Reingold and Tilford
algorithm in our implementation based on its simple, fast,
predictable and nice-layout properties. We believe that
this technique is a good method for navigating
hierarchical information with classical hierarchical
layouts.

4. Reference
[1] E.M. Reingold, and J.S. Tilford, “Tidier Drawing of Trees”,
IEEE Transactions on Software Engineering, 1981, 7 (2), pp.
223-228.
[2] A.J. Kennedy, “Functional Pearls”, Journal of Functional
Programming, Cambridge University Press, 1996, 6 (3), pp. 527534.
[3] I. Herman, M. Delest, and G. Melancon, “Tree Visualization
and Navigation Clues for Information Visualization”, Computer
Graphics Forum, 1998, 17 (2), pp. 153-165.
[4] A. Bruggemann-Klein, and D. Wood, “Drawing Trees Nicely
with TEX”, Electronic Publishing, 1988, 2 (2), pp. 101-115.

[5] M. Brautigam, “Information Visualization Techniques”,
[WWW
document]
http://www.mixedup.com/markb/iv/proposal/techniques.html
(accessed
8
November 2002).
[6] J. Lamping, and R. Rao, “The Hyperbolic Browser: A
Focus+Context Technique for Visualizing Large Hierarchies”,
Journal of Visual Languages and Computing, 1995, 7: pp. 3355.
[7] G.W. Furnas, “Generalized Fisheye Views”, ACM SIGCHI
'86 Conference on Human Factors in Computing Systems,
Boston, Massachussetts, ACM Press, 1986, pp. 15-22.
[8] M. Sarkar, and M.H. Brown, “Graphical Fisheye Views of
Graphs”, ACM CHI '92 Conference on Human Factors in
Computing Systems, New York, 1992, pp. 83-92.
[9] B. Johnson, and B. Shneiderman, “Tree-Maps: a SpaceFilling Approach to the Visualization of Hierarchical
Information Structures”, The 1991 IEEE Visualization,
Piscataway, NJ, 1991, pp. 284-291.
[10] P. Eades, “Drawing Free Trees”, Bulleting of the Institute of
Combinatorics and its Applications, 1992, pp. 10-36.
[11] G. Melancon, and I. Herman, “Circular Drawings of Rooted
Trees”, Reports of the Centre for Mathematics and Computer
Sciences, INS-9817, ISSN 1386-3681, 1998.
[12] Y. Shiloach, “Arrangements of Planar Graphs on the Planar
Lattices”, Ph.D Thesis, Weizmann Institute of Science, Rehovot,
Israel, 1976.
[13] G.G. Robertson, J.D. Mackinlay, and S.K. Card, “Cone
Trees: Animated 3D Visualizations of Hierarchical Information”,
CHI'91 on Human Factors in Computing Systems, New Orleans,
Louisiana, USA, ACM Press, 1991, pp. 189-194.
[14] I. Herman, G. Melançon, and M.S. Marshall, “Graph
Visualization in Information Visualization: a Survey”, IEEE
Transactions on Visualization and Computer Graphics, 2000, 6:
pp. 24-44.
[15] S.K. Card, J.D. Mackinlay, and B. Shneiderman, Readings
in Information Visualization - Using Vision to Think, Morgan
Kaufmann Publishers, San Francisco, California, 1999.
[16] R. Spence, Information Visualization, ACM Press, AddisonWesley, Harlow, England, 2001.
[17] G. di Battista, P. Eades, R. Tamassia, and I.G. Tollis, Graph
Drawing: Algorithms for the Visualization of Graphs, Prentice
Hall, New Jersey, 1999.

Proceedings of the Seventh International Conference on Information Visualization (IV’03)
1093-9547/03 $17.00 © 2003 IEEE

