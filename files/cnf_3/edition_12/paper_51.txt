Intelligent Digitisation of Arabic Characters
Dr FIAZ HUSSAIN

Dr BORUT ZALIK & SIMON KOLMANIC

School of Information Technolony.
Dubai Polytechnic,
PO Box 1457, Dubai,
United Arab Emirates (UAE)

Faculty of Electrical Engineering & Computer Science.
University of Maribor, Smetanova 17,
P.O. Box 224, SI-62000 Maribor,
Slovenia.

email fhussain@dubaipolytechnic.com

email zalik@uni-mb.si

~

Abstract

bitmapping or contouring. The former converts the
given outline to a corresponding pixel
representation, which is then in a form to be readily
displayed on a finite resolution device. The
problem, however, is that working at this low-level
can result in distortion especially so when the
digitised form is transformed (for example, rotated
or scaled), or displayed on a low-resolution display.
Contouring, on the other hand, uses mathematical
descriptions to model a given font outline, which
are more robust to the distortions experienced by
bitmaps. There is still, however, the task of
translating the mathematical model to a
corresponding bitmap format for display purposes.

There are currently a number of initiatives aiming
at introducing the digital age to the Arab world.
This includes efforts to expose new technology for
both home and commercial usage. Of the leading
companies in this area is Sakhr Software, who have
just launched their programme (SakhrMedia) to
support the learning process in the local
educational institutions. The objective, here, is to
meet the greater requirement of computerising both
the techniques and knowledge which has thus far
been oriented alongside traditional platforms.
To this regards efforts have been made to
computerise Arabic typography and language
(often referred to as Arabisation). This is vitally
important not just to meet everyday (current)
needs, but also to harmonise for the Arab audience
the interaction with worldwide accepted
application packages, as well as the Internet.

The problem of representing continuous outlines to
a fixed, grid, form is magnified significantly as the
resolution of the displaying device decreases.
Figure 1 demonstrates the case for the digitisation
for the Arabic character “Haa”. The expected and
desired outcome from the rasterisation process is
shown in Figure la. Due to rounding errors and
their accumulation, or for the fact a low resolution
monitor is being used to display the computerised
“Haa”, it experiences an unpleasant glitch at points
circled. At the size shown, this appears to have
little bearing on the legibility of the character and
thus any word associated with it. However, the
situation will change for smaller font sizes working
with on a finite number of pixels. The digitisation
process unaided may lose a series of characteristics
associated with recognising the form of a character.
This could include aspects of font being
symmetrical, or possessing parallel lines, or
outlines having a constant thickness.

The purpose of this paper is to revisit the digitising
process (sometimes called rasterisation) of the
most valued aspects of a language, its character
set. Through using a geometric modelling
approach, a computer system has been developed
to extract and store features of Arabic fonts. Such a
process lends itself to fast reconstruction and
rendering of characters, and for text recognition
techniques. The discussion, here, provides an
insight to the workings of the system, with view to
assisting the digitisation process for the Arabic
case.

Keywords:
Arabisation,
constraint-based
design, geometric modelling, font, hints, serifs.

What Figure 1 is illustrating, in fact, is the
requirement for the rasteriser to have more
information (in addition to modelling the outlines)
to better reproduce the digitised version on
environments with limited pixel positions. So, apart

1.0 Introduction
Outlines of characters have traditionally been
computerised through either of two approaches:

0-7695-0743-3100
$10.000 2000 IEEE

337

geometry, which can be switched off after the
construction process has been completed.

from the coordinate values, the geometric elements
used in the construction would also require
identification and appropriate attributes stored. This
added information is referred to as instructions,
hints or symbols in the area of typography and is
employed for both TrueType and PostScript
formats.

The spatial relationships between the entities of
auxiliary geometry are described with the
geometrical constraints. We divide geometrical
constraints into two groups: dimensional
constraints and structural constraints. Dimensional
constraints determine positions, coordinates,
distances and angles. These can be changed any
time we want to modify any relationships. Their
constituent parts are variables, which can be
considered as the parameters of constructed letter.
Table 1 shows a set of dimensional constraints.

An introduction to the area of font technology and
production is well documented by Karow
Hussain and Pitteway present algorithms used for
rasterising outlines of fonts, whilst Hersch
discusses the difficulties imposed by finite
resolution devices for displaying curves and
characters. The area of automatic and manual
hinting is also covered by Hersch with Betrisey
and then with Herz
The authors of this paper
have made four relevant contributions, which
together provide a basis for the discussion
presented herein 8. lo.

’, ’.

In contrast to dimensional constraints, the
structural constraints cannot be changed in the
construction process. Example, here, be the
application of the “Parallel” constraint for two
edges (line segments). If these are required to be
parallel, then they should remain so throughout 9s10.

‘.

’,

97

The primary purpose of this paper is to show how
the developed system can be used to model Arabic
characters. Through a series of illustrations, the
Arabic character “Haa” is constructed using
geometric constraints, which in turn provide
additional information to intelligently digitise the
letter. Some benefits of the modelled image are
then shown, together with discussion on how this
exploratory work would be carried forward. The
discussion throughout is levelled at providing a
practical understanding of the modelling system
and its related issues.

We commence the construction of the character
Haa with two BCzier curves, b1 and b2. There are a
number of possibilities available to the designer for
controlling the shape of these curves: For example,
we can control the distance between both curves by
defining the distance between their respective
carrier lines. We can also control the size of both
curves by defining the distance between their
control points. The shape of curves can also be
controlled with the defining of angles between the
carrier lines. The parameterization of final letter
depends directly from individual alternative we
select.

2.0 Construction of the Arabic “Haa”
Taking the Arabic character “Haa” as an example,
we note that it outline consists of 4 curve segments
and four line segments. This is shown in Figure 2,
where the “b” labels refer the BCzier cubic splines
used to model the curve segments and the “1” tags
refer to the line (or edge) sections. The control
points for the splines are positioned along their
respected carrier lines, whilst a carrier line and one
of the edge points govern a line segment. To enable
better control over these geometrical entities, they
are divided into two groups: visual and auxiliary
part. The members of the visible geometry are
BCzier curves, line segments and arcs. Auxiliary
geometry consists of lines, points and circles. The
visual geometry is controlled by the auxiliary

The more alternatives for shape controlling that are
used, the more parameters that the construction
phase will yield. This is not desirable since, in
essence, less parameters are required to control the
shape so that a more flexible description results.
For example, to control the shape of the crossbar
(the hat shape at the top of the Haa), a line segment
11 is added to curve bl. This line segment, in fact,
makes use of the geometric constraint distance(pi,
pj, d) to control its length. Perpendicular to the top
edge point of l1 is an auxiliary line that is used to
define the two endpoints for spline b3 and the top
edge point for 12. This provides a relationship
between the two edges and through using a second
geometric constraint distance(pi, pj, d), both the
338

height and width of the crossbar can easily be
controlled via l1 (and 12).

common edge point; resulting in a corresponding
change in the shape of b2. If the distance were not
exactly defined, the position of control point of
BCzier curve would stay unchanged. In a similar
fashion, the shape of BCzier curve bl can be
controlled through the line segment 13. By shifting
the common edge point between 14 and 13, it will
move the other edge point connecting bl since the
line segment has a constrain on its length. As a
result, the shape of curve bl will also change.
Figure 4b shows the results of these changes, where
the slope for l4 is adjusted by 8’.

The construction of the crossbar is completed by
defining the two control points for b3 and
connecting the line segment l2 and BCzier curves b2
with b4. The line segments l3 and l4 are then added
to finish the outline for the letter “Haa”. These two
edges are used to control the shape of BCzier curves
bl and b2 by constraining the length of line segment
13 with another constraint distance(pi,pj, d ) and the
slope and distance of line segment l4 with the
constraints AngleValue(li, a) and distance(pi,pj, d ) .
The way these constraints can be utilised is
described in the next section.

4.0 Conclusions
This paper has given an insight to the workings of a
font design system that makes use of both structural
and dimensional constraints. It has shown its
application for the Arabic case, paying particular
attention to the construction of the character “Haa”.
This work is on going and the systems employment
to other characters belonging to the Arabic set still
requires consideration. One of the goals of this
project is to provide a basis for developing an
intelligent optical character recognition system for
both characters and numerals for the Arabic case.

3.0 Working with the Constrained “Haa”
The construction of the letter “Haa” making use of
geometrical constraints, as discussed in the
previous section, is shown in Figure 3. In its
creation, the character is constrained four times
with distance(pi,pj, d ) and once with AngleValue(li,
a). This, in essence, mean that the shape of the
Arabic letter “Haa” can be controlled through a set
of five parameters.
In order to see the effect of these parameters, we
toggle on the instance generation mode. In this
state, the system allows the user to select and edit
any dimensional constraint that has been used
during construction. As a first example, let us
assume that we wish to change the length and
thickness of the crossbar. By changing the distance
between the two edge points of line segment lI (that
is, its length), the thickness of the crossbar will also
change. Likewise, the width of the crossbar can be
edited through changing the distance between the
edge points of line segments l1 and 12. Figure 4a
gives practical illustration of this where the
thickness and width have been increased by a factor
of 30 % and 17% respectively.
For the second example, let us assume we want the
crossbar to remain unchanged, but prefer to focus
on editing the “tail” of the character. More
precisely, we wish to show the effect of
constraining in relation to the line segments 14 and
13: By changing the slope of the 14, the shape of
BCzier curve b2 will also change. This is because 14
and bZ share a common edge point and as the
distance between the edge points of line segment 14
is defined, it has an overall effect of moving the

5.0 References
KAROW, P., Font Technology (Methods
and Tools), Springer-Verlag, Berlin, 1994.

P.,
Digital
Typefaces:
KAROW,
Description and Formats, Springer-Verlag,
1994.
HUSSAIN, F. and PITTEWAY M. L. V.,
Rasterising the Outlines of Fonts,
Proceedings: Raster Imaging and Digital
Typography 1994, Electronic Publishing Special Issue, vol6, no 3, pp 171-181.
HERSCH, R. D., Font Rasterization, Visual
and Technical Aspects of Type,
Ed: R D Hersch, Cambridge University
Press, 1993, pp 78-109.
HERSCH, R. D. & BETRISEY, C., ModelBased Matching and Hinting of Fonts,

339

Processing and Multimedia, London, pp
6/1 to 6/14, Mar 1999.

Proceedings
SIGGRAPH'9 1,
ACM
Computer Graphics, vol 24, pp 71-80.
[6]

HERZ, J. & HERSCH, R. D., Towards a
Universal Auto-hinting
System for
Typographic
Shapes,
Electronic
Publishing, vol7, no 4,1994, pp 251-260.

[7]

HUSSAIN, F. & ZALIK, B., Towards a
Feature-Based Interactive System for
Intelligent Font Design, Proceedings:
International Visualisation '99 Conference,
London, IEEE Computer Press, pp 378383, July 1999

[8]

HUSSAIN, F and ZALIK B, Type Design
with Flexible Constrained Font
Characteristics, Proceedings: IEE
Colloquium on Document Image

340

[9]

ZALIK, B., and HUSSAIN, F., Constraintbased Interactive System for Font Outlines
Design Proceedings: International
Conference on Imaging Science, Systems,
and Technology, CISST98, Las Vegas,
Nevada, USA, pp 274-28 1, ISBN: 1892512-03-3, JuI 1998.

[ 101

ZALIK B., HUSSAIN F. and GUID N.,
Employing Constraints to Fonts,
Proceedings: Third Conference on
Computer Graphics and Visualisation,
Plzen, Czech Republic, pp 347-356, Feb
1995.

Figure 1: Shows the effect of digitising the Arabic character “Haa”:
a) desired outcome, and
b) loss of aesthetic appeal due to distortion (circled)

Constraint denotation
Point(pi, x,y)
AngleValue(li, a)
Distance(pi/li, p,/li, d)
Angle(li, li, a)

Description
Point pi gets absolute coordinates (x, y).
Line li gets absolute value of its slope.
Distance between points pi and pi (lines li and li) is d.
Angle between lines li and li is a.

Table 1: Dimensional constraints available by construction

Figure 2 : Visible geometry of outline for the Arabic letter “Haa”

34 1

-edge Bczier €61: P1 = P5. P2 = P6. P3 P7.
-edge line ELI: P1 = P3. P2 = PlZ. Line = L9
-edge line EU: Pl = PE. P2 = P12. Line = L1

. . ...-

..

-edge Bezier E63: P1 = P5. P2 = P17. P3 = Pl
-edge line EL3: P1 = P9, P2 = P13, Line = L1
iop0l0gy
-conlure with edges: €82 EL0 EBO EL1 EL2

Figure 3: The application “Basic Font Feature Designing”

Figure 4: Instances of letter “Haa”:
a) changing the length and thickness of the tilde and
b) changing the slope of line segment 14.

342

