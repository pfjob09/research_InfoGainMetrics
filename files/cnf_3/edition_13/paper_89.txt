A Prototype System for Cooperative Architecture Design
Yuhua Luo*, Ricardo Galli*, Antonio Carlos Almeida**, Miguel Dias***
*University of Balearic Islands, Palma de Mallorca, Spain
** Instituto de Telecomunicaçoes, Instituto Superior Tecnico, Lisbon, Portugal
***ADETTI, ISCTE, Lisbon, Portugal
Email: dmilyu0@clust.uib.es

Abstract
The paper presents a prototype system for
cooperative architecture design. The system includes a
multi-site cooperative 3D editor and a cooperative and
communication support platform. By using the prototype
system, the users are able to load a design scene, modify
its properties and save the result cooperatively. The online basic cooperative, interactive editing functionality on
the designed objects via the communication network has
been achieved.
Keywords: Cooperative Design, CSCW, interactive
3D graphics, architecture design.

1. Introduction
The architecture design and the construction industry
as a whole is highly data extensive. Many different
technical specialties have to work tightly together for a
single project. A lot of redundancy, reproduction and error
can occur because of the lack of integrated information
technology support. However, due to the high volume of
data to be transferred, the limitation in the network
capacity, the lack of standards for data exchange, real time
multi-site cooperative architecture design has not yet
come to reality. The ultimate objective of the work
presented here is to integrate the CAD technology with
the virtual reality and high performance network
technology to provide a solution to such problems.
In the current architectural production process, there
are many iterations necessary to complete the design. This
iteration process is mainly between the main architectural
design, the design of structural engineering and other
specialties. The main design has to be decomposed for
different engineers and specialists to design their projects.
These projects have to be integrated later to form the
global project. This iteration process repeats many times
during different project phases. During all iterations, a
large amount of errors can occur. These errors are usually
unrecognized until the construction phases, which is
extremely costly. It causes a great amount of financial and
other difficulties in today’s architectural production. The

most important reason of the occurrence of all these errors
is the lack of efficient cooperative work during the above
iterations.
The system we present here is called the M3D1
prototype system. This is the first attempt to provide an
on-line higher level cooperative working tool for an
architecture design team. Its capability of supporting the
cooperative work not only includes the cooperative
visualization, but also, and more important, the on-line
modification of CAD objects. This means that the team
members can stay at their own location but participate in a
virtual design conference remotely. They can visualize the
design work and modify the design on line when
necessary.
The M3D prototype system includes two major parts:
an editor and a cooperative support platform. The editor
provides basic editing operations of the design work in
3D. The cooperative support platform governs an on-line
cooperative working session. The system has a layered
structure. It uses low bandwidth and low cost
communication network. It provides Internet and ISDN
connections. The prototype system has been implemented
on both PC and SGI platforms. Open Inventor tool kit and
C++ have been used for implementation of the system.
Section 2 introduces the architecture of the system.
Section 3 explains the cooperative editor. Section 4 gives
a close look at the conference and cooperative support
platform. Conclusions and future work are described in
Section 5.

2. General architecture
The M3D prototype system is composed of a set of
different applications that is replicated in each workstation
on each site. Currently, the application is only the editor
[6]. A set of such workstations are connected together
through the network to form the system. See Figure 2.1
for the general configuration of the system.
1
M3D stands for Multi-site Cooperative 3D Design System for
Architecture. See http://www.m3d.org/ for more information

The system uses a fully distributed, layered
architecture [1][2]. There are two major layers in the
prototype system on top of the communication network:
Offices with Point
to Point
connection

Large companies
with Database
servers
ISDN

LAN

LAN

INTERNET

Small offices
connected to
Internet

Mobile users

Figure 2.1 The general configuration of the M3D
the Application layer and the Cooperative support layer
(see Figure 2.2). The cooperative support layer is
application and network independent. By the distributed
architecture, all the hosts in the system that run a
collaborative session have the same set of resources and
replicas of the applications.

3DEditor

3DEditor

3DEditor

SMI

SMI

SMI

SMI Protocol

SM

SMI Protocol

SMProtocol

SM

SMProtocol

GC Protocol

GC

GC Protocol

GC

Application

SM

Cooperative
Support

GC

Communication Network

module (SM) and a group communication (GC) module of
which itself is also a layered structure.
The application layer holds a set of 3D cooperative
design tools, currently the 3D editor. The architectural
design usually contains massive amount of data. To reach
the speed of cooperative interactive modification, we have
to choose a workable strategy. Our major strategy is to
send as less data as possible via the network. By this
strategy, we decide only to send the modification data and
recreate the events locally. The replicated structure is the
base to realize this strategy.
In order to send the modifications of the scene to the
peer application replicas during a running working
session, an application layer protocol, the SMI protocol,
has been designed and implemented at this level. This
protocol is an essential element to support the full multiuser interactions in a shared 3D virtual world. There is a
submodule in charge of the communication with the lower
layer called SMI module (Session Manager Interface
module). It encapsulates the SMI protocol information
into a lower layer protocol.
A Joint Editing Supporting Platform (JESP) [1] has
been adopted for this layer. It includes a session control
module (SM) and a group communication module (GC).
The group communication module itself is also a layered
structure. The SM module is responsible for the tasks
required by a cooperative working session such as service
multiplexing, data consistency control, member
admission. The GC module provides the point to point or
point to multi-point communication.
At the lower layers in the architecture, there is the
network protocol and the physical network. Currently the
standard TCP-UDP/IP suite protocol is used. There is no
restriction on the physical network. It can be an Ethernet
or a PPP/ISDN network.
The advantage of using a layered structure is that the
layers are independent. Changes at one layer do not affect
the other layers. This can give the system a more generalpurpose characteristic. It can be easily tailored for other
similar applications and adopt the rapid technology
development of the communication network.

Network

Figure 2.2 The layered structure of the M3D
prototype system
The current application, the 3D editor, is located at
the Application Layer. An application layer protocol, the
Session Manager Interface protocol (SMI protocol), has
also been implemented at this level [5][7]. The
Cooperative Support Layer includes a session manager

3. The Editor
The 3D Editor is the central tool for on-line
cooperative design working sessions. The editor has to
meet the highest requirement of on-line cooperative
design from distance. There are important technical
requirements for this tool:
•
•

Editing capability
Interactive response

•

Concurrency control

The implemented functions in the M3D prototype
system are described below.

Editing capability
The major function of the 3D Editor is the capability
of editing an architectural design. It has two modes: online cooperative editing mode and the off-line editing
mode.
The on-line editing mode is for the chief architect or
project leaders to chair a cooperative working session,
especially for integration of design work from different
specialists. During such a working session, the
participants should be able to discuss specific design
problems and make modifications on line using the online mode. On the other hand, an off-line mode can be
used to prepare an on-line discussion of the global design.
The major functions of the 3D editor are divided into
several groups. They are operations and management for a
scene, for objects, for scene environments, and viewing
management, etc.
The first group of functions is for operating and
managing a scene. A scene here is in VRML terms, which
refers to a larger scale and independent design work
usually corresponding to a global design in the building
construction.
The functions include opening, saving a scene,
displaying the scene structure and making a query on the
objects of the scene etc.
There are different options for saving a file. It may be
a whole scene or a part of it. The display options include
showing the tree structure of a scene, the object class etc.
This is very useful for dealing with inputs from different
kinds of CAD software. They normally have different
ways to decompose a scene. The basic visualization
options of a scene are also included in this group.
The second function group provides a set of
operations on the objects within a scene. Object here is a
small unit in the design. It is usually an element in the
building such as a column, a wall, etc. It can also be any
group of geometric elements that has been defined as an
object.
By using this group of functions, one can insert,
delete, and modify an object. The modification of an
object includes modifying its geometry, its properties such
as color, roughness, texture etc.
There is an important operation on the objects, the
selection. Since the 3D editor is a cooperative, multi-user,
multi-site editing tool, we have to distinguish if an object
is selected locally or remotely. The selection also serves
as a locking operation. Once an object is selected, it is

locked by a participant in the working session. It can not
be selected by others until the object is released.
Another group of functions concerns the
manipulation of environment properties of the scene.
These properties are not part of the scene nor the objects,
for example, the lighting, rendering parameter etc. One
can locate a particular type of lights to see the lighting
effect in the designed building. Rendering parameters can
also be defined to give different quality of the rendered
3D scene. They will help to perceive the design work
better in the virtual 3D environment.
The group of functions that provides viewing
assistance to the user has the options to add text and
change the window environment etc. Virtual camera
manipulation is within this group. When a window is
created, there is a virtual camera associated with it. There
will be more functions available in the future
development.

Interactive response
Since interactive cooperative design of a 3D virtual
world usually involves a great amount of data to be
manipulated and visualized, to minimize the network
traffic becomes vital. This affects the feasibility of the
whole system. If one participant modifies an object and it
takes a long time for other participants to visualize it, or
even worse, the change never appears on another
participant’s screen, the cooperative design will become
completely impossible. Therefore, the interactive response
time is a crucial requirement that the editor must meet.
Our solution to meet this crucial requirement is
twofold. On one hand, we implement a totally replicated
in-memory database on each site. On the other hand,
messages with small size are sent via the network to
represent the user modification.
The reason to have the replicated database is due to
the high read-to-update ratio when rendering the 3D
objects. It is also because of the high memory read
throughput required for rendering a complex design. We
call this replicated in-memory database, the persistent
database.
Sending the small size messages is the major strategy
to meet the crucial requirement, the interactive response
time. The SMI protocol mentioned above is especially
designed for this purpose. This protocol specifies the
structure of the messages to code the user events and to
capture the changed data. This means to create relatively
small size messages for each event and recreate the remote
events locally. Small messages will take relatively shorter
time to reach the remote sites. To recreate the event
locally does not depend on the network traffic, so that the
remote users can have a quicker response.

Concurrency control
Concurrency control is another critical requirement
to the editor because it supports the cooperative editing.
This problem arises when more than two members in the
working session modifying the same object at the same
time. This is a typical problem of concurrency control.
By the definition of the SMI prototype, local copies
of the database on other remote workstations are updated
only if they receive the update message. To maintain the
consistency of the local copies of the database we must
avoid possible conflicts that can appear when two or more
users intend to modify the same region of the scene. The
major solution we choose is to apply the locking policies
and transaction-oriented operations. These policies are
based on techniques of distributed data processing
[3][4][8].
The most frequent user operations are camera
movements and object modification. For camera
movement, there is no need to assure any mutual
exclusion or packet ordering. However, for object editing
it is extremely important to assure mutual exclusion. To
avoid latencies that can disturb the user interaction, the
following approach is taken:
We allow a user to modify an object only after the
object is selected by this user. The selection of an object
involves the “locking” of the VRML subtree under the
selected node in the scene graph.
In addition, an object can be selected only if no other
members in the working session have previously selected
any part of the subtree that the object belongs to. To
achieve this condition, if a user makes a selection attempt,
the editor on his machine must communicate with the
other peer editors about this operation through the SMI
protocol.
In case of conflicts, our policy is that just one of the
members can acquire the right. If two or more applications
try to lock intersecting subtrees, the timestamp scheme
can be used to resolve the conflict. The sender of the
packet with a global minor timestamp is selected as the
“temporally owner” of the scene subtree. Although this
can be a very time expensive task, we can avoid further
delays when users edit the scene. We may reduce the
computation time by exploiting the total and causal packet
ordering QoS.
The 3D editor in the M3D prototype system can been
seen in figure Figure 4.1.

4. The Conference and Cooperative Support
The M3D prototype system is an on-line cooperative
working tool for an architecture design team. To achieve
the interactive speed during a cooperative working session

that covers a wide geographical area, a strong support for
conferencing and cooperative working control is
necessary. A cooperative and communication support
module has been developed in M3D prototype for this
purpose.

Figure 4.1 : The 3D editor in the M3D prototype
system
The main objective of the module is to enable the
users to share one or more applications as transparently as
possible [2]. It intends to emulate a full joint meeting
environment with full connectivity and interaction in spite
of geographic restriction.
The module has been designed to be transparent to
the users. The users are kept away from the networking
and session control details. It has also been designed to
keep the distributed applications independent of the
underlying networking process.
The structure of the cooperative and communication
support module can be seen in Figure 4.2. It also shows
the interaction between the entities in the module.
There are three replicates of the same module
indicated in the figure. Each of them represents a remote
location. The minimum number of sites to hold a
conference for a working session is two. On each site
there are two groups of entities. The first group is the
Joint Editing Service Platform New Generation (JESP
NG) which is in charge of session control and
communication. It has two layered entities: the Session
Manager (SM) and the Group Communication (GC)
entity. The second group is the meta-conferencing control
platform which deals with the external control over
running collaborative sessions. It has two entities: the GUI
(Graphic User Interface) and the GD (Group Daemon).
The following explains them in more detail.

GUI

GUI

Meta-Conferencing

M3D Applications

Group
Daemon
APP

UI
APP

APP

SMI

SMI

SAP

SAP

UI

APP

SM

SM

GC

GC

JESP NG

M3D Applications

…

Group
Daemon

JESP NG
Meta-Conferencing

JESP
NG

Session Manager
SM
SAP

GUI

Group Communication
GC

Group
Daemon

OPERATING SYSTEM
APP

APP

Role: Initiator
SM

NETWORK
GC

JESP NG

Figure 4.2. The structure of the cooperative and
communication support module

The JESP NG service platform
The services provided by the JESP NG are available
to the applications through a common service interface.
The set of communication services hides the network
configuration from the applications. The session control
mechanisms provides the applications the necessary
functions in the cooperative environment. The platform
ensures the possibility of the co-existence of a set of
applications on top of a common service interface. It
provides a dynamic application environment to the users.
The platform was designed to support synchronous
and asynchronous interactions among the users, although
special emphasis is given to the synchronous interaction
here. The platform supports the simultaneous operation of
a group of users spread over multiple remote locations. It
intends to avoid significant latencies. This becomes a
critical point when the number of users and the distance
among them increases. In addition, it supplies faulttolerance mechanisms for error and failure recovering.
The communication and session control mechanisms
are organized in a layered structure, as depicted in Figure
4.3. The SM entity is responsible for session control tasks
and the GC entity is responsible for point-to-multipoint
communication functions. These two entities are the
building blocks of the support platform. The application
environment layer
includes several distributed
applications. They act as clients requesting services from
the platform through Service Access Points (SAPs).

Figure 4.3 The local structure
On each site there is one instance of the structure
shown in Figure 4.3. Session control is achieved by a
distributed protocol executed among the SM entities.
These entities have the same set of capabilities. Some
specific attributes may be given to just one of the session
managers in order to perform special tasks. For example,
the permission functions may be given to the SM of
initiator site of the conference.
Each distributed application makes use of a specific
protocol to exchange messages. Most of the messages
contain user events produced through one or more input
devices at the user interface. These local events are
encapsulated in messages and sent to the other sites
through a service request made to the SM entity. The
application layer contains two I/O logical entities located
at the application layer environment. One of them is the
User Interface (UI). It is the interface to all the devices
that collect the local user events of a particular
application. Examples of such devices are mouse devices,
keyboards, audio and video codecs etc. Normally, the
capture of these events is associated with the Operating
System procedures or, at a different level, controlled by
some Window System. The platform is not aware of the
UI entities.
The second I/O logical entity associated with the
JESP platform at the application layer is the Session
Manager Interface (SMI) as mentioned before. It
structures the communication between the application
layer and the SM layer. In particular, the SMI is
responsible for service requests to the SM layer for a
particular application. These requests are either to transfer
messages among the application replicas or to invoke
some session control tasks.

Meta-Conferencing Control
The meta-conferencing control in the prototype
system is external to the co-operative platform. We have
designed a distributed meta-conferencing system because
the whole system is based on a multi-site distributed
architecture. The objective is to provide external control
over running collaborative sessions such as starting and
stopping them. Other meta-conferencing operations
include JESP NG platform initialization, error reporting
and recovery, joining and withdrawal of users, cancelling
of shared applications and obtaining general session
information.
The meta-conferencing system used to control the
conferencing platform and applications has two entities
running on each site. They are the GD and GUI. The main
role of the Group Daemon is to manage all the processes
related to the conference (platform processes and
applications). This entity is able to invoke, cancel and
communicate with those processes. On the other hand, the
main role of the GUI is to serve as the conferencing
interface with the users. It is the visible part of the metaconferencing system.
To establish a conference, one of the sites has to be
the initiator. The initiator starts the session configuration
which is dynamic during the session. New users may be
admitted into the running sessions. During the first
iteration, at least two members should exist (on different
machines).
Starting a session requires an interaction between a
given user and his process interface (GUI) which interacts
directly with the respective (GD). After specifying the
initial configuration (with a minimum of two members)
the GD entity starts connections in a star configuration
with the other GDs running on the other hosts. This star
configuration will persist during the session and will serve
to control the conference.
The processes SM and GC will be started afterwards.
Each one of the GDs that accepted the invitations will
automatically start their local structure of the cooperative
work platform (composed by processes GC and SM).
Each non-initiator GD will notify the initiator GD of the
success of the launching processes SM and GC. The last
set of processes SM/GC is launched on the initiator
machine. After this point, the collaborative platform may
start its own protocols independently of the conference
management components GUI and GD.
Nevertheless, the initiator GD is responsible to
broadcast the names of the applications to the other GD
components. After this, each GD will start a new process
for each required application, on each machine. See
Figure 4.4 for the local interaction processes.

Each application copy then knows its role within the
session. It may be an initiator or a non-initiator application
replica. This role will determine who will start the
application protocol after the establishment of the
application environment. This protocol is executed by
means of SMI messages as described is section 3.
In summary, the Meta-Conference supports all the
functionality to:
•
•

Initialize the JESP NG CSCW platform
Report and recover from error conditions

•

Report status messages

•

Launch distributed applications such as the 3D
Editor
There are more functionalities that will be available
after further development, such as: interfacing with the
audio/video conference facility, file transfer, etc.
GUI
Error Messages
Report Messages

Request Messages

Group_Daemo
APP

APP

SM

GC

Figure 4.4: Local interactions

5. Conclusions and future work
The paper presents a prototype system for
cooperative architecture design. The system is currently
functioning on two development sites in Spain and
Portugal. By using the prototype system, the users are able
to load a design scene, modify its properties and save the
result. Basic cooperative, interactive editing on the
designed objects is already achieved via the
communication networks.
Further development is undergoing towards a more
complete system. Some important features such as the
inconsistency and interference detection, storing and
retrieving database information etc. will be further
investigated to suit the day-to-day use of the architectural
production process.

We sincerely hope that the further development
based on this prototype system will contribute to a
significant change of the traditional architecture design
process. We expect that by using such a system and a new
business process it supports, the occurrence of errors can
be minimized. The construction cost and time can
therefore be reduced.

Acknowledgment
This work is supported by the Esprit project No.
26287 M3D funding and the Spanish CICYT project
funding TIC-98-1530-CE and Tel. 96-0544. The authors
would like to thank Sergio Alves, David Sanchez, Marco
Moita, Renato Marques and many other people that
participated in the implementation of the prototype
system.

References
[1] A. Almeida and C. A. Belo. “Support for Multimedia
Cooperative Sessions over Distributed Environments.”
Proc. Mediacomm’95, Society for Computer Simulation,
Southampton, April 1995.
[2] A. Almeida et al., Definition, Test and Management of
Network Model, Esprit project Deliverable DL 1.4, April,
1999.
[3] Hagit Attiya, Jennifer L. Welch. “Sequential consistency
versus linearizability.” Transactions on Computer Systems
Vol. 12, No. 2 (May 1994), Pages 91-122.
[4] R. Galli, P. Palmer, M. Mascaro, M. Dias, Y. Luo. “A
Cooperative 3D Design System.” Proceedings of CEIG97,
Barcelona, Spain, June, 1997.
[5] Y. Luo, R. Galli, M. Mascaro, P. Palmer, F. J. Riera, C.
Ferrer, S. F. Alves, Real Time Multi-User Interaction with
3D Graphics via Communication Network, Proceedings of
IEEE 1998 Conference on Information Visualization, pp.
60-68, July 1998, London.
[6] Y. Luo et al. M3D Technical Specifications, ed. R. Galli,
Esprit Project Deliverable DL 1.2, April, 1999.
[7] Y. Luo, R.Galli, M. Mascaro, P. Palmer, Cooperative
Design for 3D Virtual Scenes, Proceedings of the Third
IEEE International Foundation on Cooperative Information
Systems Conference on Cooperative Information Systems
(CoopIS'98), pp. 373-381, August 1998, New York,
U.S.A.
[8] Nancy Lynch. Distributed Algorithms. Morgan Kaufman
Publishers, Inc. ISBN 1-55860-348-8. 1997.

