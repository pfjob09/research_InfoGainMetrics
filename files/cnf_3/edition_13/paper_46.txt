Towards Fast Volume Visualisation on the WWW
Meleagros Krokos1, Feng Dong1,2, Gordon J. Clapworthy1, J. Y. Shi2
1
Department of Computer & Information Sciences, De Montfort University,
Milton Keynes MK7 6HP, United Kingdom.
2

State Key Lab of CAD and CG, Zhejiang University,
Hangzhou, P. R. of China.
{melk, fdong, gc}@dmu.ac.uk

Abstract
The steady growth of the Internet has dramatically
changed the way information is shared, and modern
users expect near real-time delivery, high quality images
together with in-depth navigation and exploration of 3D
models. Multiresolution is a promising approach for fast
distributed volume visualisation employing Levels-ofDetail. We review multiresolution algorithms and
visualisation systems on the WWW. Our discussion is
based on experience gained in the development of the
IAEVA-II project funded by the European Commission.
A new method for rapid data classification/rendering of
multiresolution volumes, based on shear-warp
factorisation, is described. We can change classification
functions and data resolution during rendering without
significant reduction in interactivity. A method for
constructing multiresolution transfer functions for
determining opacity is also investigated. Finally, future
trends in developing WWW visualisation systems are
discussed.
Keywords: volume visualisation, levels of detail (LoDs),
multiresolution, computer graphics, Internet, component
models.

1. Introduction
Nowadays, visualisation of volume datasets plays an
important role in many diverse disciplines, Kaufman [1],
and this is particularly true in medical visualisation.
Technologies for capturing volume datasets are
becoming increasingly advanced and more widespread,
resulting in an increase in both the number and the sizes
of these datasets. The growth in the use of the Internet
has dramatically changed the way in which data is stored
and accessed; the Internet now provides excellent

facilities for building reference libraries and for rapid
dissemination of information.
Volume datasets are typically stored in large
distributed databases that are maintained by one or more
servers. Users browse through the datasets by accessing
the databases through client systems, which can range
from high-end graphics workstations to low-end PCs.
When an appropriate dataset is identified, the subsequent
visualisation typically requires high-quality rendering.
Volume-visualisation algorithms can produce
stunning images of volume data, but execution times are
generally slow because of the high computational
complexity.
If the user has access only to the
computational power and storage capacity of the typical
PC, the use of standard volume-visualisation techniques
is impractical. Further, given the Internet’s bandwidth
limitations, the time required to download a typical
dataset over standard communication lines is too long to
be acceptable for general usage.
It is for these reasons that, to our knowledge, all the
currently-available systems for visualising volume data
are surface based.
The modern user has come to expect near real-time
delivery, a high quality of the images rendered and to be
able to perform in-depth navigation and exploration of
the model. The availability of flexible and efficient 3D
interaction significantly enhances the user’s ability to
identify and investigate regions of interest.
There is a clear conflict between, on one hand, the
size of volume datasets, the transmission speeds on the
Internet and the computational resources of the average
user, and, on the other hand, the demands of an
increasingly-sophisticated user population.
Progressive transmission of the data and progressive
refinement of the image can overcome a number of the
difficulties outlined above.

Progressive refinement of the image as the data
comes in from the remote server is one way of enhancing
interactivity, while still eventually rendering a highquality image, Schroeder [2].
For progressive transmission, volume datasets are
represented through continuous families of levels-ofdetail (LoDs) datasets. On transmission at the coarsest
resolution, a fundamental visualisation is presented to the
user; as finer LODs are transmitted, the visualisation is
gradually updated. Which resolutions are employed for
viewing depend upon an acceptable balance between
image quality and rendering speed.
Our paper reviews multiresolution algorithms and
Internet visualisation systems employing multiresolution.
The factors associated with design and implementation
are identified. Our discussion is based on experience
gained in the development of IAEVA-II, a project
funded by the European Commission.
We also describe a new method for rapid data
classification/rendering of multiresolution volumes,
based on shear-warp factorisation; this enables the
modification of classification functions and/or data
resolution during rendering without significant reduction
in interactivity. A method for constructing
multiresolution transfer functions for determining opacity
is also investigated.
The paper is organised as follows. Section 2 surveys
approaches for constructing WWW-based volume
visualisation systems, while Section 3 reviews the use of
multiresolution in volume visualisation algorithms.
System architectures and component models are
described in Section 4. The IAEVA-II system and a
multiresolution volume rendering and classification
method are presented in Section 5, with concluding
remarks and future trends appearing in Section 6.

2. Systems
This section reviews recently-proposed WWWbased volume-visualisation systems.
Trapp & Pagendarm [3] present a prototype flowvisualisation system in which users send data to a
visualisation server, where visualisations are constructed
and returned as VRML models. Plain ASCII text is used
for communication between clients and server; this
requires a very high network throughput and processing
overhead. The geometric data produced by the server
requires complete transmission to clients for viewing to
commence, thus severely restricting interactivity.
Another interesting approach is VizWiz, Michaels &
Bailey [4], in which users can load 2D or 3D datasets
and visualise them interactively, using a number of
standard scientific-visualisation techniques such as iso-

surfaces, cutting planes and elevation plots. Iso-surfaces
are constructed using the Marching Cubes algorithm,
Lorensen & Cline [5]. VizWiz is implemented in Java
for platform independence. To compensate for
performance limitations, simplified rendering, caching
and a tool to control resolution are used. Nevertheless,
this is not a truly multiresolution system, e.g. users
cannot select the desired granularity.
Gueziec et al [6] outline a framework in three parts
for progressive transmission of geometry: a process to
generate multiple levels-of-detail (LoDs), a transmission
process, and a suitable data structure for receiving and
exploiting LoDs. This approach can employ any known
vertex-clustering algorithm for polygon reduction. The
LoDs are accessed on the fly by manipulating vertex
indices. Smooth transitions (or geomorphs) are
supported, and this approach complements existing
compression schemes - volume datasets can be converted
into the author’s format following transmission in
compressed form using any known algorithm.
A distributed volume visualisation system is
described by Engel et al [7]; it is based on the concept of
progressive iso-surfaces introduced by Grosso & Ertl [8].
The visualisation server generates multiresolution
surface representations and transmits these progressively
to clients. Coarse levels of resolution require low
network throughput, thus enabling interactive
visualisation rates. Refinement up to the highest level of
resolution is possible, but it requires a longer network
transmission. The system allows the unrestricted
selection of granularity for viewing. Clients have to build
VRML or Java3D scene graphs to allow switching
between different levels of resolution. Although the
authors discuss the possibility of applying the same
methods to transmission of volume models, no
implementation has yet been reported.
All the approaches described above are based on
surface models. In contrast, Lippert et al [9] describe a
method for volume compression/rendering, based on the
wavelet splats of Lippert & Gross [10], which is
designed for distributed applications. To achieve fast
transmission over the network, a progressive
compression scheme allows storage of RGB and intensity
data on the server in terms of a bitstream. The clients
carry out rendering immediately in the compression
domain, i.e. full decompression is not necessary.
The limited memory requirements enable execution
even on very low cost computers. Although fast
rendering is offered, the images are of low quality (no
depth information), so this method is more suited to use
as a fast volume browser than as a high-accuracy
visualisation tool.

As seen above, the majority of WWW-based volume
visualisation systems are surface-based, offering various
forms of multiresolution to improve Internet transmission
times. To our knowledge, no full-scale volume-based
systems exist apart from that developed by Lippert et al
[9], which is seriously restricted by its low image quality.
In IAEVA II, we have developed methods for highquality multiresolution rendering and data classification
(see Section 5). We believe that the development of
similar methods for distributed visualisation offers the
best prospect for delivering real-time volume
visualisation on the Internet.

3. Multiresolution
Multiresolution has attracted considerable attention
over the last few years, and numerous articles have
appeared addressing the problem of multiresolution
volume rendering and/or modelling.
A general framework for the approximation of
rendering integrals using multiresolution spaces was
presented in Westermann [13]. After projecting into a
pre-selected wavelet basis, many wavelet coefficients can
be safely neglected without compromising accuracy,
which dramatically reduces the amount of computer
memory necessary for rendering.
Using a pyramidal volumetric representation, a
progressive-refinement rendering algorithm called
splatting was introduced by Laur & Hanrahan [11].
Depending upon the desired image quality, the splatting
algorithm scans different pyramid levels in a back-tofront order.
Orthonormal wavelets are also useful for volume
decomposition into a pyramidal representation. An
approximate rendering equation solution is obtained
either through spline functions, Gross et al [12], or by
unifying Fourier-domain volume rendering and texture
mapping, Lippert & Gross [10].
A promising class of volume-rendering algorithms
factorises the viewing transformation into a 3D shear
parallel to the data slices to form an intermediate
distorted image; a 2D warp is subsequently applied, so as
to form an undistorted final image.
Shear-warp factorisation and min-max octrees are used
in Lacroute & Levoy [14] to encode spatial coherence in
unclassified volumes. Near-interactive rendering rates
are obtained with no significant quality loss, e.g. a 2563
dataset is rendered in 1 sec on an SGI Indigo. However,
min-max octree construction is computationally
expensive, so a pre-processing step is necessary. Further,
changing the resolution of datasets requires full
rebuilding of the associated min-max octrees, which

makes this algorithm too slow for use in multiresolution
volumetric rendering.
Recently, Yuting et al [15] introduced a volumerendering method exerting shear-warp of the viewing
transformation on multiresolution volume datasets.
However, none of the above methods address the
problem of interactively changing resolution during the
rendering process. In Section 5, we describe our method
for achieving this, and also how to modify classification
functions interactively. Our method also allows
progressive transmission of volume datasets. On
transmission at the coarsest resolution, a hierarchical
structure is initially constructed; as finer LODs are
transmitted, this structure is updated and displayed.
Apart from new nodes, no previously constructed nodes
need computing when a new LOD arrives.

4. Architectures
This section reviews the different architectures
employed in the construction of WWW visualisation
systems. These systems are based on the client-server
model: users and service providers.
Different system architectures are obtained
depending upon where the visualisation computation is
performed, e.g. if visualisation is placed with the service
providers, a server-based architecture is obtained. The
advantage of such an architecture is that software
distribution to clients, and maintenance and support for
the many possible operating systems on remote clients,
are no longer necessary.
However, as standard WWW browsers are static
with no support for visual data manipulation, the
visualisation interactivity then depends heavily upon the
communications bandwidth. If this is low, and a number
of clients simultaneously request updates, the server may
become overloaded.
Java applets can be employed to overcome such
limitations. They are automatically downloaded and
allow processes to execute locally; applets and
associated datasets must be downloaded whenever they
are used. A large number of executables may need to be
downloaded, and as demand for larger applets and
datasets grows, significant downloading delays can be
anticipated.
This problem is often addressed by loading
visualisation components locally on clients. Typically
these components run embedded within particular
WWW browsers. The browser is aware of them and
launches them automatically once data transfer
terminates, so that data manipulation and rendering are
performed locally. Using components also allows

visualisation software and complex interfaces to be
developed separately.
Developers are beginning to create components,
rather than complete applications, in order to release
themselves from their previous slow, expensive form of
application development by building up a core of
portable, reusable code. This will enable them, for
example, quickly to attack new market opportunities.
Microsoft’s Component Object Model (COM)
allows developers to create autonomous software
components that can be used without intimate knowledge
of their contents [16]. Components perform specific
tasks through well-defined interfaces. COM is a
language- and platform-independent standard that allows
communications among different objects using a
common, agreed protocol.
ActiveX controls are a specific implementation in
COM programming. They can be inserted into a Web
page, an ActiveX-enabled application, or programming
environments such as Visual C++ or Visual Basic.
There are two important aspects to developing
ActiveX visualisation controls. Firstly, a well-specified
interface has to be defined, the so-called properties of the
ActiveX, e.g. an iso-surface number, transfer functions
values, viewing attributes, etc. Components may then be
combined using the COM aggregation mechanism. When
using Visual Basic, for example, developers can
assemble completely new ActiveX controls with
customised interfaces by combining built-in controls with
existing ActiveX controls through a few lines of code;
this is a comparatively simple task and can be performed
even by non-expert programmers.
The next step in the evolution of COM will be
COM+, which will greatly simplify the coding required.
COM objects will work more like C++ objects. Further,
Distributed COM (DCOM) will allow components
running on different machines to communicate as if they
were located on the same machine.
JavaBeans is an alternative component model,
developed by Sun [17]. JavaBeans enables developers to
write reusable components once and run them on any
platform using any architecture, thus benefitting from
the platform-independent power of Java. This is in
contrast to ActiveX which is essentially relevant only to
an MS Windows/Intel x86 platform.
Beans are Java classes that can be manipulated in a
visual builder tool and subsequently composed into an
application. JavaBeans components can be used to build
a range of solutions from full Java desktop applications
to WWW-based applets. JavaBeans works with any
network model including DCOM and CORBA. Further,
the JavaBeans Bridge for ActiveX includes features to

allow information to be exchanged between JavaBeans
and ActiveX components.
The main advantage of implementing WWW
visualisation systems using components is that they can
significantly increase user interaction by supporting point
and click navigation through complex volume datasets.
IAEVA II currently employs ActiveX components, but
our development is under constant review for
incorporating the latest technologies.

5. IAEVA
The medical community is keen to support the creation
of distributed multimedia databases on the WWW for
disseminating important research and/or clinical
information, and for education.
Anatomical information usually comes in the form of
2D radiological images, but 3D models developed from
these can be extremely helpful in providing insights into
the medical conditions displayed.
This is the background to the pilot project, IAEVA,
which developed an integrated methodology for
constructing organised WWW databases of 3D models
of pathological human organs and providing relevant
retrieval and manipulation mechanisms, Krokos et al
[18]. The results of IAEVA are now being exploited by
the development of IAEVA-II in which algorithms for
accelerating the transmission and manipulation of 3D
models over the Internet are included, and advanced
educational tools are provided, Crudele et al [19].
IAEVA-II is designed as a WWW-based medical
education system for standard PC configurations and
Internet connections. Here, fast rendering and
transmission are of the highest priority. Given the
previously-described limitations of the Internet, it is not
feasible, at present, to include full-scale volumetric
rendering in a general service of the type of IAEVA-II.
Thus, current provision is limited to 3D surface
models consisting of polygons produced from the
Marching Cubes algorithm [5]. Depending upon the
shape complexity of the anatomical structure under
consideration, hundreds of thousands (or perhaps
millions) of polygons are produced. Optimisation of
rendering and transmission times for these large 3D
models is achieved through multiresolution algorithms.
For a particular 3D model, a continuous range of
Levels of Detail (LoDs) is captured. For rendering,
different LoDs are displayed, depending upon the user’s
viewpoint and the particular interaction. For
transmission, a coarse LoD is transmitted initially
followed by a sequence of finer LoDs, so the quality of
the model is upgraded incrementally. Interaction also

takes place at the lower resolutions, which considerably
improves the response of the system to user input.
Continued improvements in CPU power, PC graphics
cards and communications technology are beginning to
make it feasible to employ multiresolution methods for
the incremental transmission of large datasets and for
real-time volume visualisation on standard PCs.
We now briefly describe an algorithm developed
within the IAEVA-II system, further details of which can
be found in Dong et al [20]. The algorithm renders
different volume resolutions through fast shear-warp
factorisation. The main advantage of this approach is the
ability to modify classification functions or data
resolution during rendering without significant reduction
in interactivity. This is achieved through newlydeveloped data structures, called multiresolution minmax octrees (MMMOs).
Definition: MMMO nodes contain minimum and
maximum parameter values for sub-cubes of the
volumetric dataset contained in different LoDs. At the
root (depth 0), the min and max values correspond to
2×2×2 resolution, and are employed for determining
opacity for the whole volumetric dataset. At depth 1,
they correspond to 4×4×4 resolution. This process is
repeated recursively until the finest resolution is reached.
Properties: MMMOs have the property that nodes at
depth m are determined completely from the m+1
resolution of the associated multiresolution volumetric
dataset; e.g. the root (depth 0) depends upon resolution
2×2×2, depth 1 nodes depend on resolution 4×4×4 etc.
This offers the following advantages:
• MMMOs can represent multiresolution datasets
uniquely, i.e. after modification of the resolution of
the dataset, no MMMO change is needed
• on transmission of the coarsest resolution, an MMMO
is initially constructed; as finer LoDs are transmitted,
new nodes are inserted in the MMMO but none of the
old nodes has to be updated when a new LOD arrives.
This scenario allows rapid browsing and display of
complex volume models residing on distributed WWW
databases; it is independent of the underlying hardware
and speed of the network connections. Multiresolution
transfer functions for deciding opacity of the MMMO
nodes are also provided – details can be found in Dong
et al [20].

6. Fast Volume Visualisation on the WWW
Most WWW volume-visualisation systems employ
surface-based models because surfaces can be rendered
and transmitted rapidly over the Internet.
However, if the models involved are complex,
hundreds of thousands of polygons are necessary. To

cope with this situation, most researchers concentrate on
simplification and multiresolution algorithms to optimise
rendering and Internet-transmission times.
However, surfaces do not convey the full
information contained in volume datasets as they are
obtained from the datasets by applying thresholding.
Thus, there is a demand to develop WWW volume
visualisation systems based on full-scale volume models.
Until now, using classical volume rendering
algorithms in a stand-alone environment has required
long execution times and specialised hardware. As
mentioned above, technological developments have now
made it feasible to consider delivering volume rendering
across the Internet at speeds acceptable to the user.
Traditional approaches to volume rendering have
required the complete volume dataset to be present
before rendering commences. Given the bandwidth
limitations of the Internet and the typically large sizes of
volume datasets, it is not practical to transfer complete
volume models due to very long transmission times. This
situation is likely to remain in the near future, even with
the planned satellite-based Internet connections.
Consequently it is imperative to develop new ways
of modelling volume datasets. One way forward is
through multiresolution representations for progressive
transmission and interactive rendering. To our
knowledge no systems currently exist that employ
multiresolution volume models. Lippert et al [9]
introduced such a system, but their approach lacks depth
information and is thus restricted to X-ray-like images.
The architecture models of visualisation systems is
another aspect in need of improvement. The traditional
way of using a Web browser as a simple viewer is not
suitable for rapid interaction. To this extent, the ultimate
Web-base visualisation capabilities will be delivered
through Web components.
Component-model technologies such as ActiveX
from Microsoft and JavaBeans from SUN provide an
important aspect of cyberspace in that they allow the
creation of objects that behave similarly in different
environments and on different computer platforms. This
reflects the nature of the Web : a multitude of different
machines connected together to exchange information.
Using visualisation components can speed up user
interaction, especially if the client machine is of high
specification. The local visualisation component can
handle any special format used for multiresolution
modelling. These visualisation components can be highly
advanced, allowing sophisticated graphical visualisation.
Another aspect of using visualisation components is
that the visualisation can be developed independently
from the front-end interface, as long as it adheres to a
prescribed communication protocol.

Future developers will distribute not only core
visualisation components but also high-level components
using other low-level components. Programming a
specific application will just involve joining them
together and adding any extra functionality that may be
necessary.
This scenario will allow WWW visualisation to
become more active and dynamic. Visualisation systems
will be highly customisable and flexible; they will
develop according to customer demand by adding extra
local components for extra functionality or by modifying
existing components.
IAEVA-II is a WWW-based medical education
system for standard PC configurations and Internet
connections. Given the bandwidth limitations of the
Internet current provision is limited to 3D surface
models.
Nevertheless, we have developed an approach using
MMMOs based on shear-warp factorisation for
achieving fast progressive volume transmission and
rendering. This method allows easy modification of
classification functions and/or data resolution during
rendering without significant loss of interactivity.
We believe that developing similar methods and
incorporating them into WWW-based visualisation
systems such as IAEVA-II for addressing a wide
audience will allow real-time volume visualisation to
become a common experience to the average Internet
user.

Acknowledgements
This research is supported by the European
Commission under the project IAEVA II (An Internet
Service for fast viewing and manipulation of 3D models
of human pathologies, HC4009), and the Chinese
National Natural Science Fund (No.69703004).

[6]

[7]

[8]

[9]

[10]

[11]

[12]

[13]

[14]

[15]

[16]
[17]
[18]

[19]

References
[1]

[2]

[3]

[4]

[5]

A. Kaufman, W.E. Lorensen, H. Pfister, C. Silva and L.
Sobierajski-Avila, “Advances in Volume Visualisation”,
SIGGRAPH ’98 Course Notes, 1998
W. Schroeder, “A Topology Modifying Progressive
Decimation Algorithm”, Visualisation ’97, IEEE Press,
pp 205-212, 1997
J. Trapp and H. Pagendarm, “A Prototype for a WWWbased Visualisation Service”, Eurographics Workshop on
Visualisation in Scientific Computing, 1997
C. Michaels and M. Bailey, “VizWiz: A Java Applet for
Interactive 3D Scientific Visualisation on the Web”,
Visualisation ’97, IEEE Press, pp. 261-267, 1997
W.E. Lorensen and H.E. Cline, “Marching Cubes : a
High-Resolution 3D Surface-Construction Algorithm”,
Computer Graphics, Vol. 21, No 4, pp 38-44, 1987

[20]

A. Gueziec, G. Taubin, B. Horn and F. Lazarus, “A
Framework for Streaming Geometry in VRML”, IEEE
Computer Graphics & Applications, pp 68-78, MarchApril, 1999
K. Engel, R. Grosso and T. Ertl, “Progressive Isosurfaces on the Web”, Visualisation ’98, Late Breaking
Hot Topics, IEEE Press, 1998
R. Grosso and T. Ertl, “Progressive Iso-Surface
Extraction from Hierarchical 3D Meshes”, Computer
Graphics Forum, Vol. 17(3), pp 125-135, 1998
L. Lippert, M. Gross and C. Kurmann, “Compression
Domain
Volume
Rendering
for
Distributed
Environments”, Computer Graphics Forum, Vol. 16(3),
pp. 95-107, 1997
L. Lippert and M. Gross, “Fast Wavelet based Volume
Rendering by Accumulation of Transparent Texture
Maps”, Computer Graphics Forum, Vol. 14(3), pp. 431443, 1995
D. Laur and P. Hanrahan, “Hierarchical Splatting: A
Progressive Refinement Algorithm for Volume
Rendering”, Proc. SIGGRAPH ’91, pp. 285-288, 1991
M. Gross, L. Lippert, A. Dreger, and R. Koch, “A New
Method to Approximate the Volume Rendering Equation
Using Wavelet Bases and Piecewise Polynomials”,
Computers & Graphics, Vol. 19(1), pp. 47-62, 199
R. Westermann, “A Multiresolution Framework for
Volume Rendering”, 1994 Symposium on Volume
Visualization, Washington, D.C., October 1994, pp 51-58
P. Lacroute, and M. Levoy, ‘‘Fast Volume Rendering
using a Shear-Warp Factorization of the Viewing
Transformation’’, Computer Graphics, Vol. 28(3), July
1994, pp 451-458
Y. Yuting, L. Feng and S. Soon, “Multiresolution
Volume Rendering Based on Shear-Warp Factorisation”,
International Workshop on Volume Graphics, Swansea,
United Kingdom, pp. 49-64, 1999
http://msdn.microsoft.com/workshop/components/
http://java.sun.com/beans/
M. Krokos, G. J. Clapworthy, M. Crudele, G. Salcito and
N. Vasilonikolidakis, “Organisation, Transmission,
Manipulation of Pathogical Human Organs on the
WWW”, Medical Informatics Europe ’97, Technology
and Informatics, Vol. 43, IOS Press, pp. 99-103, 1997
M. Crudele, G. J. Clapworthy, F. Dong, M. Krokos, N.
Vasilonikolidakis and G. Salcito, “Accessing a WWW
Reference Library of 3D Models of Pathological Organs
to Support Medical Education”, Proc Medical
Informatics Europe ’99, 1999 (accepted for presentation)
F. Dong, M. Krokos, G. J. Clapworthy and J. Y. Shi,
“Fast Multiresolution Volume Rendering and Data
Classification using Multiresolution Min-Max Octrees”,
(submitted for publication)

