Virtual Lunar Landscapes for Testing Vision-Guided Lunar Landers
Dr Stephen M. Parkes & Mr Iain Martin,
Applied Computing, University of Dundee,
DUNDEE, DD1 4HN, SCOTLAND, UK
Tel: +44 1382 345194, Fax: +44 1382 345509,
email: sparkes@computing.dundee.ac.uk, imartin@computing.dundee.ac.uk

Abstract
Virtual reality techniques are being used to support
the development of unmanned space-probes intended to
land on other planets in the solar system. These
planetary landers will operate autonomously during
landing and will use vision for navigation and guidance
down to a safe landing spot. Suitable vision techniques
have been developed but must be extensively tested on
realistic test surfaces. A system (LunarSim) for
producing realistic simulations of heavily cratered
planetary surfaces has been developed to support
exhaustive testing of vision guidance software.
This paper begins by describing the reasons for
developing a realistic simulation of the lunar surface.
The techniques that have been used to produce models
of impact craters are then described. A description of
the LunarSim software is provided and an example is
presented of an image sequence produced using
LunarSim. Finally a summary of related current and
future work is given.

1. Introduction
The European Space Agency (ESA) has studied
several possible missions to the moon using intelligent
unmanned landers [1,8].
Previous manned and
unmanned missions have landed in broad, relatively safe
areas to minimise the risk of damage during landing.
Manned missions with the capability of landing close to
a required target landing spot, avoiding boulders and
other hazards, have been limited by the need to minimise

the risk to astronauts on-board the lander. Unmanned
missions have not had sufficient computing capability to
permit accurate surface relative navigation and obstacle
avoidance. Advances in spacecraft on-board processing
technology [2,3] have made autonomous or semiautonomous vision-based lander guidance feasible. This
means that unmanned missions to specific sites of
scientific interest in potentially hazardous areas can be
considered.
Landing on the moon, close to a predetermined
target landing spot, in an area of rough terrain, is a
difficult task. Accurate navigation relative to the lunar
surface is necessary, together with the detection of
possible hazards like boulders, small craters or steep
slopes.
The ESA (European Space Agency) 3D
Planetary Modelling study [4] demonstrated the
feasibility of using vision for the guidance of planetary
landers. Extensive testing of these intelligent vision
guidance algorithms is essential if they are to be able to
cope with the full range of possible surface conditions
that could be experienced during a landing.
The problem is that only relatively poor information
about the detailed surface morphology of other planets is
available. The moon, for example, has been extensively
mapped to a resolution of some 200m by NASA’s
Clementine mission [5]. This is inadequate for a vision
based lander which must detect and avoid boulders and
craters as small as 0.5m across. Some form of simulation
or mock-up of the planet’s surface is necessary to
support the development of the vision based guidance
algorithms. This must be based on known information
about the surface morphology and must be convincingly
realistic.

During the ESA 3D Planetary Modelling Study the
vision guidance algorithms developed were tested using
a robotic frame to move a camera above a 2m x 1m
physical mock-up of the lunar surface. This physical
simulation was appropriate for demonstrating the
feasibility of vision based guidance and navigation but
proved inflexible when more exhaustive testing was
required to show that the vision system was robust and
able to cope with many different but similar surface
conditions. Several problems soon became apparent with
the use of physical modelling on its own:•
•

•

•

•

Illumination: It is difficult to simulate low sun
elevation angles with a physical model illuminated
by a lamp.
Calibration: To test the vision algorithms used it is
necessary to have a digital elevation model
representing the physical model. This requires
careful measurement of the surface. The robotic
frame also requires calibration.
Inflexibility: To ensure that the computer vision
algorithms are robust they must be tested on many
different lunar surface models. Physical models
cannot be altered very easily and each new model
has to be hand made.
Scale and Resolution: A physical model can only
cover a limited area. Scaling the model is restricted
by manufacturing constraints and by the camera
used. For example a 2m x 2m physical model with a
0.5m feature scaled to say 2mm would represent an
area of just 500m x 500m.
Cost: Producing a physical model and calibrating it
and the robotic frame are time consuming activities.
The robotic frame is expensive.

The LunarSim project at the University of Dundee
has developed and is continuing to develop computer
models of the lunar surface which can overcome the
difficulties with physical models. These models are for
use in support of computer vision for autonomous, semiautonomous and operator-guided planetary landing
systems.
The required output from a computer simulation of
the lunar surface is an image of the surface taken from a
camera on a lander at a particular position and
orientation relative to the surface. Virtual reality
techniques can be used to produce the image from the
simulated surface and to model Sun and Earth
illumination.
Compared to physical modelling the LunarSim
software is readily able to simulate low illumination

angles, does not require calibration, is extremely flexible
(lunar surfaces can be generated or modified at the touch
of a button), and is of low cost.

2. Realistic crater models
Virtual reality and computer graphics techniques for
producing images from a surface model are well
developed. The main difficulty is in producing a
convincing lunar surface model, ideally the simulated
images should be indistinguishable from the real thing.
The crater models combine idealised mathematical
impact crater models with fractal techniques to produce
a realistic appearance to the craters. The crater bowl, rim
and ejecta-blanket are simulated.

2.1 Simple crater model
The simple crater model consists of two main
functions, a crater bowl and an ejecta blanket, which
meet at the crater rim, as shown in figure 1.
Rim Height (Hr)
Terrain Level

Hr

Crater Height (H)
H

D (Crater Diameter)

Figure 1: Basic Crater Model
The depth of the crater, H, is given by
H = 0 . 196 ⋅ D 1 . 01
and the height of the crater rim above the surrounding
terrain by
H r = 0 . 036 ⋅ D 1 . 014
where D is the rim peak-to-peak crater diameter [6].
The height at any point in the simple crater model is
described as separate functions for the bowl and the
ejecta blanket. Each is defined as a function of radius
from the centre of the crater. Larger craters (commonly
called complex craters) are less bowl shaped with flatter
bases and may have central peaks or peak rings.
BowlHeight = 4.H .(radius / D ) + H r − H

D
EjectaHeig ht = 0.14 
2

0.74

D 

.

 2.radius 

3

The crater bowl is placed onto a plane which
describes the average inclination of the terrain on which
the crater is to be added. The ejecta blanket is added to
the existing terrain and a fractal terrain (with varying
fractal parameters as a function of radius) is overlaid
over the whole theoretical model to give added realism
to the crater.

2.2 Adding the crater model to the terrain
The area of terrain onto which the crater bowl is to
be added is first smoothed into a plane. This plane is
calculated by averaging height values around the rim of
the crater. When a meteorite impacts a surface the
energy released is so large that the original surface is
obliterated.
The ejecta blanket results from debris thrown out
after the impact and extends for a distance of D/2 from
the crater rim. The ejecta blanket is superimposed onto
the top of the original terrain. A linear fix is added to the
crater bowl to points greater than a given radius (varied
fractally around 0.7 radius) which seamlessly matches
the height of the rim and plane to the height of the rim
and the underlying terrain. This has the duel effect of
allowing the crater rim to take characteristics from the
terrain and also to give substance to the crater walls. A
similar linear fix is added to the ejecta to match the
maximum height of the ejecta to the crater rim and the
minimum height to the terrain at the edge of the ejecta
along a radius from the centre.

2.3 Fractal regions of the crater.
To add realism to the “ideal” crater, a fractal
surface, created using random mid-point displacement,
is superimposed onto the smooth crater. Different fractal
regions are defined as a function of radius from the
crater centre. These regions have different values for
Fractal Number and Height Factor, which control the
roughness of the fractal surface. This allows the
“roughness” of the different areas of the crater (i.e. floor,
wall, ejecta blanket) to be varied. In real images the
ejecta blanket appears highly fractal around the rim of
the crater smoothing off the further it is from the crater
rim. To simulate this the ejecta blanket region is set to
be highly fractal, but the amplitude of this region of the
fractal surface is decreased linearly to zero from the rim
to the edge of the ejecta region.

2.4 Summary of crater model
The complete models for the crater bowl and ejecta
blanket are illustrated in figures 2 and 3 respectively.

Basic Crater
M odel

Floor

W all

Floor

W all

Fractal Zones
+ Correction to merge plane into underlying Terrain.
Fractal Zones
added to Basic
Crater M odel

Figure 2: Crater Bowl Model
Basic Ejecta
M odel
Underlying
Terrain
Fractal
Ejecta
+ Correction for rim height and residual at max ejecta.
Final Ejecta
Surface

Figure 3: Summary of Ejecta Blanket Model

2.5 Ageing craters
The above simple crater model produces craters
with sharp rim edges. This is appropriate for recently
formed craters but subsequent geological activity or
further impact cratering can cause the rim to collapse,
resulting in a more rounded crater rim. To allow for
craters with rims of varying roundness the theoretical
underlying model was altered by the addition of two
parameterised polynomials. One parameter alpha
controls the “roundness” of the crater rim. A quadratic is

defined which matches the height and gradient of the
basic bowl model (at a point alpha radius in from the
rim), to the height and gradient of at the crater rim
(gradient on the rim is zero). A cubic is defined which
matches the basic ejecta model (at a point alpha radius
away from the rim) by height and gradient, to the crater
rim by height and gradient. By varying alpha, craters of
different apparent age can be created with older craters
appearing more rounded than younger ones.

2.6 Crater size density-distribution
For meteorite impact craters to appear realistic on a
surface the crater size density distribution must be
correct as well as the individual crater models i.e. there
must be many more small craters than there are large
ones. The crater size density distribution varies across
the lunar surface and has been measured in many areas
[6]. The general form of the crater size density
distribution is given by
N cum = cD − b
where N cum is the cumulative number distribution per
unit area, D is the crater diameter, and b and c are
constants. When b = 2 the constant c becomes
dimensionless. Measurement of crater size density on
the moon has provided a typical value for b of 1.8.

using the POV-Ray ray-tracing software[7] to simulate
an image taken by a camera fixed to a spacecraft. The
spacecraft is defined in terms of position (x,y,z) and
attitude (pitch, yaw, roll). The camera controls the
picture to be taken; its attributes being field of view,
image quality and output file size/type. The output
images can be types tga, bmp, ppm or png.
Crater files can be produced interactively on top of
a background image. This feature allows LunarSim to
generate a realistic lander test environment, based on a
proposed landing site. A lunar image is first loaded into
LunarSim and then used as a background to help define
the size and position of any large or distinctive craters.
LunarSim can then randomly generate additional smaller
craters according to a size-density distribution related to
the landing area. This crater file could then be added to
different terrain models, resulting in a set of realistic
test models, which represent a particular region of the
moon.

4. Example images
Figure 4 is an example of a real image taken by the
Clementine mission [5]. Figure 5 is an example of an
image of a similar area produced by LunarSim. Figure 6
is a close up of the centre portion of the simulated
terrain used in Figure 5.

3. LunarSim software
Using the LunarSim software, a lunar surface model
is built by simulating impact cratering on an initial
terrain model. A predefined surface (e.g. an existing
digital elevation model) or a fractal surface may be used
as the initial terrain model. Craters are placed on the
terrain either manually via a graphical user interface, or
randomly according to a user defined crater size-density
distribution based on actual lunar crater size-density
studies [6].
The positions and sizes of a set of craters can be
stored separately from the elevation model in a text file
known as a crater file. This means the same set of craters
can be added to different terrain surfaces and also allows
crater files to be edited using a text editor if required.
Craters are defined in LunarSim in real scale (metres)
and a small text file related to each output image is
created which contains the image scale and other
information.
The sun is modelled as an area light source, its size
and distance from the surface are set to appropriate
values for the moon. The output image is ray-traced

Figure 4: Real Lunar Image

images of the lunar surface. The other computer will run
the vision guidance software (representing the spacecraft
“flight” system). The LunarSim PC produces an image
of the simulated surface as seen from the initial position
of the lander (unknown to the vision guidance software).
This image is passed to the vision guidance PC to
process, which uses it to determine the spacecraft’s
position. The LunarSim PC will then simulate the
motion of the spacecraft and take the next picture from
the spacecraft’s new position. This system provides a
versatile test environment for developing intelligent
vision guidance software.
Figure 5: Simulated Lunar Image

Vision Guidance PC

LunarSim PC

Images

Processes:
Images
to determine
position

Position

Simulates:
- Surface
- Light Source
- Spacecraft
- Camera

Figure 7: LunarSim with Vision Guidance Computer
Figure 6: Close-Up Simulated Image

5. Current and Future work
Effort, to date, has concentrated on producing
realistic impact crater models and in providing a simple
but versatile user interface for the creation of cratered
landscapes. The visualisation of the terrain model
produced is done with the POV-Ray ray tracing program
[7], which means that the image frame rate is very low.
Current work is focussed on improving the speed of
image generation through the use of Direct3D and on
improving the terrain model by adding boulders to the
simulation. The realistic simulation of large impact
craters (over 10km diameter) which have a different
form to the smaller "simple” craters is also being
studied.
The complete test system will consist of two
independent computers as shown in figure 7. One
computer will run the LunarSim software (representing
the “camera” onboard the spacecraft) and will produce

As well as testing vision-based lander guidance
algorithms the LunarSim software can be used for
testing vision-based rover navigation and path planning
algorithms. Other applications may include different
planetary surfaces, asteroids and comets.

6. Conclusion
Virtual reality has been used to simulate the surface
of the moon and has many advantages over alternative
methods of simulating the unknown surfaces of various
planetary bodies. Realism is vital for the range of space
applications, which include the evaluation and
development of vision-based guidance and navigation
control systems for planetary landers. The LunarSim
system provides a convenient and versatile means of
generating realistic simulations of the surface of the
moon.

7. Acknowledgements
The Authors would like to acknowledge the support
of ESA for the LunarSim study, ESA Contract No.
12821/98/NL/MV, on which this paper is based. The
assistance of Patrick Plancke, the ESA study technical
manager, has been appreciated.

8. References
[1] EuroMoon Core Team, “EuroMoon Mission Feasibility
Study Report, ESA (Draft Report). Edited by G. Scoon
Mission Implementation Manager, ESTEC.
[2] S.M. Parkes, DSP (Demanding Space-based Processing!):
the Path Behind and the Road Ahead, DSP’98, 6th
International Workshop on Digital Signal Processing
Techniques for Space Applications, ESTEC, Noordwijk,
The Netherlands, 23-25 September 1998, ESA publication
no. WPP-144, paper 4.1.
[3] S.M. Parkes, “On-Board Processing: Cheaper, Faster,
Better,”, 32nd ESLAB Symposium, ESTEC NoordWijk,
The Netherlands, 15-18 September 1998, ESA publication
SP-423.
[4] Paar G, Parkes SM, Classen HJ, “3D Planetary Modelling
Study Final Report” ESTEC contract 9195/90/NL/SF,
Joanneum Research 1996.
[5] Regeon, P., Lynn, P., Johnson, M., and Chapman, J. "The
Clementine Lunar Orbiter", 20 th International Symposium
on Space Technology and Science, Gifu, Japan, 19-25 May
1996. (Images available at
http://www.nrl.navy.mil/clementine/)
[6] Melosh, H.J. “Impact Cratering – A Geologic Process”,
Oxford University Press, 1989, ISBN 0-19-510463-3.
[7] http://www.povray.org
[8] EuroMoon 2000: A plan for a European Lunar South Pole
Expedition, December 1996. ESA Publications Division,
c/o ESTEC, Noordwijk, 2200 AG The Netherlands, ESA
Publication BR-122, ISBN 92-9092-428-4.

