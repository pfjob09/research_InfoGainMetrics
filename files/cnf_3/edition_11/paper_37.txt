A Software Repository for Education and Research
in Information Visualization
Yuezheng Zhou
Indiana University, Computer Science
Bloomington, IN 47405 USA
E-mail: yuzhouC3c.s.iiicliunci.tdii

Katy Bonier
Indiana University, SLIS
Bloomington, IN 47405 USA
E-mail: kiln)@iiidianu.edu

htt~://\.\:ww.cs.berkclev.edu/-russell/~ro~.html.
In
addition, a large number of Artificial Intelligence books
come with software code. For more information see
httD://voda.cis.tem~le.edii:~~~~/~~AI~!WW/b~~~ks/.
In physics research, many software repositories exist
through which researchers all over the world can share
code. One example is the CERN Program Library at
httD://wwwinfo.ccrn.cli/asd/. It is large collection of
general purpose programs maintained and offered in both
source and object code. Researchers and students are
encouraged to use this code repository rather than their
own code. Aside from saving users time and effort, the
repository code is more likely to be correct after having
been tested by many other people.
The aim of this paper is to generate discussion about a
non-commercial IV software repository that can be used to
help collectively understand the issues underlying 1V and
to pool existing and future IV resources.
The paper starts with a review of existing IV online
resources and code repositories that are known to us.
Subsequently, we introduce the software repository that
we designed to teach the Information Visualization course
at Indiana University, Bloomington (IUB). Results of class
projects accomplished by students who used the software
repository are discussed. The paper concludes with a
discussion and an outlook.

Abstract
This paper argues f o r the creation of a software
repository f o r research and education in information
visualization (IV). It starts with an introduction and
overview of IV online resources and software
repositories. Next, we introduce the code repository we
created and demonstrate how it was used in the IV course
one of the authors teaches. Sample implementations by
pudents are resented as well. We conclude with A
discussion of ways to grow and maintain the software
repository and invite contributions.

1. Introduction
Information Visualization (IV) combines aspects of
scientific visualization, human-computer interaction, data
mining, imaging, and graphics, among others. The field is
about 10 years old and fast-growing. Recently, a number
of excellent textbooks have been published by Card et al.
(1999>, Chen (1999), Ware (1999), Spence (2000), and
Dodge & Kitchin (2000). However, 2-dimensional printouts
on paper often cannot convey the true visual appearance
and interactive performance of certain visualizations.
Therefore, several books come with accompanying web
sites containing screen-sized snapshots of user interfaces
as well a6 animations and movies. However, we believe
that education and research on IV could be considerably
enhanced if a general IV software repository was created.
The repository would not only facilitate sharing,
evaluation, and comparison of algorithms and software
but also reduce the time and effort spent for repeatedly reimplementing algorithms.
Data or software code repositories are frequently used
in other research communities. For example, the CMU
Artificial Intelligence Repository provides access to a
large number of Artificial Intelligence (AI) software
packages at htte://www.cs.cmu.edu/afs/cs/Droiect/aire~ositorv/aI/areas/O.htnil. NIore AI
Programming
Resources
are
accessible
at

0-7695-1195-3/01
$10.00 0 2001 IEEE

2. Information visualization resources and
software repositories
During our online search for public domain source code
that could be used to teach IV, we encountered many
excellent information visualization resources. Among them
are :
OLIVE: On-line Library of Information Visualization
environments htt~://www.otal.umcl.edu/Olive/) is a
great IV resource created as a class project for Ben
Shneiderman's fall 1997 CMSC 8281838s graduate
course on Information Visualization at the University

257

IV by designing IVs. The repository is intended to
complement the theoretical study of specific IV algorithms
and the critique and evaluation of existing applications. It
is supposed to facilitate the design and customization of
IVs for different user groups, visualization tasks, and data
sets. We wanted students to concentrate on interface and
interactivity aspects of visualizations as opposed to the
implementation of the algorithm itself. In addition, the
code repository enables the comparison of different
algorithms as well as the management of larger class
projects.

of Maryland, College Park, Department of Computer
Science.
Martin Dodge’s An Atlas of Cyberspaces
(htto://www.cvberPeopraphv.or~/atlas/atlas.html)
provides a continually growing, up-to date overview
of many graphic representations of the geographies
of the new electronic territories of the Internet, the
World-Wide Web and other emerging Cyberspaces.
Ivan Herman, M.Scott Marshall, and Guy Melanqon’s
IV links (http://www.cwi.nl/InfoVisu/links.html).
Gary Ng’s collection of IV links that can be found at
httv://www.cs.man.ac.uk/-np~~nfoVi7J.
In addition, several research groups provide access to
their software:
The Human-Computer Interaction Lab (HCIL)
provides access to a number of IV resources
httv://wWW.Cs.iImd.edu/hcil/research/visualization.sht

ml such as Jazz] (htto://www.cs.umd.edu/hciI/iaz7~), a
toolkit that creates robust, full-featured graphical
applications in Java with striking features such as
zooming and multiple representation, or Fisheye
Menus (httv://www.cs.umd.edu/hcil/fishevemenu/).
See also their Licensed Products webpage at
htto://www.cs.umd.edu/hcil/vubs/vroducts.sht~il.
The Visualization Toolkit software by Kitware Inc. can
be
freely
downloaded
from
http://www.kitware.codvtk. html .
Visualization Software available at NCSA is linked
from httv://www.ncsa.uiuc.edu/SCD/Vis/.
CAIDA Visualization tools are accessible at
httu:l/www.caida.orp/tools/.

After checking out available online resources, we
selected different data mining and visualization packages.
For each package, we created an informational web page
that includes:
A general description of the algorithm.
A short characterization of the value of the algorithm
for information visualization.
Descriptions and links to (commercial) example
applications of the algorithm.
0
A description of the code including acknowledgments.
A detailed explanation on how to unpack, compile,
and run the package as well as hints for easy
modifications.
References.
Gwen that several packages were acquired for
educational purposes, students had to sign an agreement
sheet confirming that they would use the software for the
IV course exclusively.
The main software repository web page is accessible at

http://ella.slis.indiana.edu/-katv/L697/~ode/.

Geomview, an interactive 3D viewing program for
Unix, is available at tittD://www.oeomvieM.oro/.

4. Using the software repository in class
Besides course web pages that link to one or two
specific software packages, we could not find a site that
links to a larger number of available IV software.
We are aware that the coverage of today’s Web search
engines is limited and that we may have missed valuable
sites. We would appreciate any information on other
software packages (especially written in Java) that are
available for non-commercial purposes.

Students taking the IV course at IUB attend lecture and
lab sections. During lecture, students learn about visual
perception, theoretical principles of IV design, plus a
variety of existing data mining and visualization
techniques, algorithms, and systems. They develop skills
in critiquing and evaluating visualization techniques as
applied to particular tasks and for specific user groups.
During lab, students run, discuss, and evaluate different
information visualizations using the software repository
and gain a hands-on experience with those IV concepts
that are inherently dynamic.
In addition, students constructively apply knowledge
acquired in lecture and use the software repository to
design novel IVs in three class projects. In the first
programming project, students had to utilize Treemups
(Ahlberg et al., 1992) and Hyperbolic Trees (Munzner &
Burchard, 1995) to visualize a data set of their choice for a

3. Creating a software repository
In Fall 2000, we started to develop a software
repository that could be used by students to learn about

*

Jazz has been released to the interested development
community as OS1 Certified Open Source Software to ensure
that the widest possible community has access to and builds on
the Jazz platform.

258

Figure I . The Persontilizerl S t o r k Trucker interface by Larry Mongin & Steve Rice
self-selected user group. Within three weeks, students
designed a Personalized Stock Trucker (Larry Mongin &
Steve Rice), visualized the Class inheritcince hierachy of
J m w progrums o r A P I s (Ying Feng), designed
visualizations of File Directories (David Heald; Alan Lin)
and visualized the Orgrinizotioncil Hierarchy of IU
Einp1oye.s (Jason Baumgartner and Tim Waugh).Figure I
shows the Persorinlized Stock Trrrcker interface
implemented by Larry Mongin & Steve Rice
(httg://eI 1~1.slis.iridiana.edu/-sdricz/l697/1697gro~ect2.liirnl).
It was inspired by the SmartMoney website at
http://wL\:w.sniarrinor,ev.corn/ni;irketrna~)/ and uses the
Treemap algorithm to visualize a dynamic list of stocks in a
user portfolio. Users can create or modify a portfolio
(which contains, for example, personal stocks) via an input
panel, Fig. 1 (right). The NASD'AQ and DOW index values
for the selected stocks are retrieved either when the
program is loaded or on demand. The stocks are visualized
in a Treemap, Fig. 1 (left) in which each stock is
represented by a rectangular area, labeled with the name
and current index value of the stock. The size of the area
corresponds to the amount of stocks the user holds and
their value. A red-green color scheme is used to quickly
convey the negative-positive performance of stocks over a
selected time span. Existing portfolios as well as
downloaded index values are stored upon the closing of

259

the application. In sum, the Personalized Srock Tracker
enables users to keep track of personal stock investments.
Ying Feng mplemented a visualization of the Class
Inheritmce Hiermrchy of The H g w r b o l i c Tree Java
package (htt~://ella.slin.illdiarru.2du/-\..7/
proil/doc.htrnl) shown in Fig. 2.

'B EI

Figure 2. Visualizing the Class Inheritance Hierarchy of
The Hyperbolic Tree by Ying Feng
It uses the hyperbolic tree algorithm to visualize its own
code structure but can be used to visualize other software

information technology and seeks to provide
students with knowledge of the variables likely
to influence the perceived usability, and hence
the acceptability, of any information technology
In so doing itwill enable students to progress
further towards specialistwork in the important
field of human-computer interaction

To view a grade distribution, please seled the semester node, i.e. 1-2000,from
the hyperbolic tree.

L542,l-2000

BORNER

Course Grade Distributionfor L542

....

_.-I...,..-

"

"

A+ A A- B+ B B- C+ C C- D+ D D- F P S I

.....

...........

....

"

lIII"..,xI.xI-IxI-"...",""

R N R N C NY WWXOther

0 4 9 1100 0 0 1 0 0 0 0 0 0 0 0 0

0

1 1 0

0

Figure 3. SLIS Student Academic Career Viewer by Jason Baumgartner & Tim Waugh
dimensional Scaling, Spring Embedding Algorithm
(Battista et al., 1994), Treemap Algorithm, Hyperbolic
Trees, Pathfinder Network Scaling (Schvaneveldt, 1990),
and the ArcView software.
The students took very different approaches toward
visualizing the data sets. Almost all applied Latent
Semantic Analysis to extract the semantic relationships
between different courses or different students. Some
applied clustering techniques to further group
semantically similar courses.
A number of students concentrated on the analysis of
the data and the visualization of semantic relationships
between courses or students using Multi-dimensional
Scaling, Spring Embedding, or Pathfinder Network Scaling.
Jason Baumgartner & Tim Waugh implemented a SLIS
Student Academic Career Viewer as shown in Fig. 3. The
bars in the top right corner reflect the number of students
who took a certain course. Clicking on a bar results i n the
display of a course description on the top-left and the
visualization of different courses via a Hyberbolic tree
browser in the left lower corner. Tree nodes corresponding
to certain course sections can be selected and lead to the
retrieval and display of the course grade distribution. The

packages as well. Different node shapes and colors are
utilized to represent different kinds of Java classes.
Different edge colors denote different class (inheritance).
relationships see Fig. 2.
Project 3 concentrated on data mining. Students had
four weeks to visualize a data set of files reporting what
courses students took during their graduate study at IU to
get a Master of Library Science (MLS), Master of
Information Science (MIS), or Computer Science (CSCI)
graduate degree in 1997 and 1998. The three files have the
same format - each line contains a number assigned to a
particular student, the student's class standing during the
semester the class was taken, the semester code and year
the course was taken, the section number for the particular
course, the department where the course was offered, the
four character course code, the course title, an indication
of whether a student withdrew from the course or not, the
number of credit hours awarded to the course, the degree
the student received (MLS, MIS, CSCI), and the date the
student received the degree.
Students were familiar with the SVDPACK by M. Berry
(1996) for computing the singular value decomposition for
biatent Semantic Analysis as
ell as with Multi-

260

tkualization is supposed to guide students in he
In the short run, the software repository could lead to a
selection of specific course sections. An online demo of
WWW-based "textbook" with chapters covering specific
the
interface
is
linked
from
IV topics, each an up-to-date survey of a sub-area of IV
htt~://ella.slis.indiana.edu/-tawai1~h~697/~roiect3/~roiect written by experts in this area and accompanied by source
3.html.
code. Each chapter could serve as:
In their final project, students worked in collaboration
with IU faculty on data mining and information
Visual reminder - showing snapshots of
visualization tasks related to the faculty member's
implemented interfaces that remind and attract
research. They worked in teams on five projects: A
attention to an algorithm.
Newsgroup Votes Visualization, a TransPac Network
Primer - giving an introduction and explanation of
Traffic Visualization, an Hyperbolic Tree Visualization of
the basics of the algorithm.
Roget's Thesaurus, a Spring Embedder Visualization of
Textbook - providing suggestions and hints on how
Term Relationships for Concept Discovery, and a
to use, modify, and extend an algorithm and perhaps
Visualization of Bookmark Files. The results of four of
examples of lab exercises.
these projects have been or will be summarized and
Encyclopedia - listing links to articles and related web
submitted to conferences and wlorkshops.
pages.
Meeting place - inviting user to join virtual reading
Colored, full-size versions of figures 1 , 2 and 3 are
accessible at htt~://ella.slis.indiana.edu/-katv/IV~OO1 h.
groups, chat rooms, FAQs.
In the long run - and analogous to repositories of other
research communities - the IV software repository could
exist as distributed content managed by editorial control.
The editorial board would aim to establish and promote a
common vocabulary and style and it would be in charge of
attracting contributions and volunteer help in the spirit of
the GNU project ~ttD://www.enu.ore/). Ideally, the IV
resource could be funded by selling access to institutions,
by linking it to a comprehensive textbook, or by accepting
advertisements from IV related companies.

5. Discussion & outlook
Obviously, the construction of any software repository
is an on-going process. Source code, descriptions,
references, etc. need to be continuously revised and
expanded to adapt to changes and new developments.
Standards need to be established to enable diverse
software packages (e.g., implementations of data mining &
layout algorithms) to interact and share data seamlessly,
to compare existing algorithms, and to incorporate new
algorithms easily.

Assuming that competition and privacy issues can be
resolved, we believe that the proposed IV software
repository would not only improve IV education but also
boost creativity in IV research by easing access to existing
work, consultation with others working on related topics,
implementation of new (commercial) applications (which in
turn challenge the development and improvement of the
algorithms), exploration of new ideas, and, last but not
k i s t , the
issemination of results to science
(Shneiderman, 2000).

We are in the process of implementing an XMLbased
interchange format2 for all Java software packages
currently covered in the IV repository. The new factory
and interface classes will allow all software packages to
implement and to use a standard XML format and ensure
that packages can be easily interchanged, compared, and
combined. In addition, simple configurations of the XML
input format should suffice to use the packages in a wide
variety of applications.
Our hope is that, in the
foreseeable future, more sourcc: code will be released as
Open Source Software. The XNIL interchange format will
provide an easy way to incorporate this code. Last but
not least, users will be able to use the XML standard to
save interaction data such as manipulation changes in the
data, the state of the visualization, etc. that could be
advantageous to compare visua.lizations of different data
sets among others.

6. Acknowledgements
We are grateful to the students taking the very first IV
class at IUB in Spring 2001. They have been and still are a
great motivation for the on-going design and expansion of
the software repository. I would like to thank Jason
Baumgartner and Maggie Swan for detailed comments on
an earlier version of this paper. Ben Shneiderman
generously contributed the GRIDL source code
(Shneiderman et al., 2000).

We are utilizing the Sun JAXP PZI, which will be included in
the JavaTM 2 Platform Standard Edition (J2SETM) 1.4 and is
currently included in the JavaTM :!Platform Enterprise Edition
(J2EETM) 1.3.

26 1

7.References
Dodge, M. & Kitchin, R. (2000) MaDDinE CvbersDace.
Routledge.
Munzner, T. and Burchard, P. (1995) Visualizing the Structure
of the World Wide Web in 3D Hyperbolic Space.
Proceedings of VRML '95 (San Diego, California, December
14-15, 1995), special issue of Computer Graphics, pp 3338, ACM SIGGRAPH, New York.
Shneiderman, B., Feldman, D. and Rose, A. & Grau, X. F.
(2000) Visualizing digital library search results with
categorical and hierarchical axes. Proceedings of the fifth
ACM Conference on Digital Libraries, San Antonio, TX,
pp. 57-66.
Shneiderman, B. (2000) Creating creativity: User interfaces for
supporting innovation. ACM Transactions on ComDuterHuman Interaction, Vol 7, Issue I , pp. 114-138.
Spence, R. (2000) Information Visualization. Addison-Wesley.
Schvaneveldt, R. (Editor) ( 1 990) Pathfinder Associative
Networks: Studies in Knowledge Organization. Norwood,
NJ: Ablex.
Ware, C. (1999) Information Visualization: PerceDtion for
Desien, Morgan Kaufmann Publishers,

Ahlberg, C., Williamson, C. and Shneiderman B. (1992)
Dynamic queries for information exploration: An
implementation and evaluation. In Proceedings of ACM
SIGCHIP2, pages 619-626.
Battista, G. , Eades, P., Tamassia, R., and Tollis, I.G. (1994)
Algorithms for drawing graphs: An annotated bibliography.
ComDutational Geometry: Theorv and ADDlications, 4 (5),
pp. 235-282.
Berry, M. et al. SVDPACKC (Version 1.0) User's Guide,
University of Tennessee Tech. Report CS-93-194, 1993
(Revised
October
1996).
See
also
11t t D ://www.
netli b.org/svdoac!dindex.html.
Bederson, B. B., Hollan, J.D., Perlin, K., Meyer, J., Bacon, D.,
and Fumas, G. (1996). Pad++: A zoomable graphical
sketchpad for exploring alternate interface physics. Journal
of Visual Languages and Computing, March 1996, vo1.7,
(no. 1):3-3 1.
Card, S. K., MacKinlay, J. D., Shneiderman B. (Editors) ( 1 999)
Readings in Information Visualization: Using Vision to
Morgan Kaufmann Publishers.
Chen, C. (1999b) Information Visualisation and Virtual
Environments. Springer Verlag.

m,

262

