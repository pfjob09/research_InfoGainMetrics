Design and Implementation of a Web-based Distributed Collaborative Design
Environment
G Y Tian
D Taylor
School of Engirleering, University of Huddersfield, Huddersfield, HDI 3DH, UK
g.y.tian@hud.ac.uk
d.taylor@Izud.ac.uk
spaces aim to provide support for cooperation by
placing users within a shared virtual space that affords
particular forms of cooperation. Visualization and
Virtual Environments are critical for next generation 3D
model-based commercial design and development
processes. There are other mediums that have been used
for local as well as remote collaboration, such as faceto-face meeting, telephone, teleconferencing and video
conferencing. However, CVE promises to be more
flexible and interactive. It is superior to traditional
computer supported cooperative work (CSCW)
environments, which are based on conventional user
interface devices such as the keyboard and mouse [l].
The most common use of CVE is currently in
collaborative design, education and training. CVE is
used for training in battlefield simulation applications,
such as SIMNET [2] and NPSNET [3]. It is also used
for various forms of multi-user training, such as aircrew
training, fire-fighting and medical and surgical training.
AVIARY[4], Bricket [5] and MASSIVE [6] are some of
the recent non-immersive desktop workstation based
CVE's. Non-immersive virtual environment refers to a
VR system where the user is not immersed in the
system, but has the images projected on a computer
monitor to provide the notion of depth. A common
example of a non-immersive virtual environment is a
plug-in VRML browser, such as CosmoPlayer in a web
browser. CAVEComm[7], CAVERN@] and NICE[9]
are some of the recent immersive CVEs.
A key component to effective collaborative virtual
environments is the communication infrastructure.
CAVERNSoft [IO] from UIC EVL is a software library
that allows VR developers to share information between
their applications. This is a hybrid system that combines
a distributed shared memory model with distributed
database technology and real-time networking
technology. This allows objects manipulated by one
user to be immediately perceived by all other users at
remote locations. The VisualEyes software uses this
library to communicate keys or messages among
components. Collaborative VisualEyes [I I] clients
share 3D scene graph information by directly linking
individual data nodes over a communication channel
implemented with CAVERNSoft.
In comparison to the related work in desktop
collaboration including Habanero [ 121, NetMeeting
[13], Placeware[l4], and Mash toolkit [15], these are
products for connecting participants with roughly
equivalent hardware capabilities into a conference
session using a 2D CUI. Microsoft NetMeeting, the
most widely used, is limited to toll-quality audio. The
MASH toolkit is actually a set of modular programs,

Abstract

This paper review:; work on distributed
collaborative virtual design environments and the
emerging technology of .Metacomputing. The paper
discusses the design of distributed collaborative design
environments using Mei'acomputing, f o r example
Globus, to provide intensive data computing via an
asynchronous collection of loosely synchronous
components. The essential component, Globus, focuses
on defining CI toolkit of lowlevel services for securiv,
communication, resource location, resource allocation,
process management, and data access. Based on this
approach, the requirenien,!s for concept, functionality
and performance of the design environments are
provided. The key functions in the distributed
collaborative design environments such as analysis,
visualisation, securiy and database management,
particularly the 3 0 desigri storage and visualisation,
are also discussed. At the end of the paper further work
on
implementing the Globus-based distributed
collaborative design environments is highlighted.
Key
Words: Virtual environment. Distributed
collaborative design, Melacomputing, Computational
grid, Globus, Distributed component, Middleware

1. Introduction
1.1 Collaborative virtual environments and
their limitations
In large distributed corporations, distributed design
offers potential for large cost savings from reduced time
to market and improved efficiency. It also has the
potential to improve the design process by enabling
wider expertise to be incorporated into design reviews.
The dramatic growth in the World Wide Web has also
seen a rapid increase iri the range of distributed
cooperative applications. Many of these move beyond
the existing client-server model of interaction that
underpins the World Wide Web, to support much richer
patterns of user interaction and activity. While often
exploiting their own distributed infrastructure, these
environments seek to build upon the accessibility and
coverage of the World Wide Web to promote and
support a number of geographically remote users
working together.
Collaborative
Virtual Environments
(CVEs)
represent one of the most significant examples of this
development. These environments use VR technology
to visualise a space inhabited by multiple users, usually
geographically remote in the real world. These virtual

0-7695-1195-3/01
$10.00 0 2001 IEISE

703

users leave the world, either voluntarily or duc to a
softwarehetwork failure, the changes made to the world
are lost. Few mechanisms exist for saving the active
world definitions to a persistent store in a consistent and
coherent manner [IS].
Limited g e o n i e t v and object reuse: One of most
important factors in the construction of existing virtual
worlds is efficiency of delivery to the user. Current
virtual environments focus on the development of
scalable worlds, carefully considering how large
descriptions can be managed by segmenting these
models into smaller cells. Unfortunately, these methods
discourage reuse of objects across worlds because they
make no distinction between the objects geometry,
interaction and position. This means it is difficult to
reason about a world at the object level in order to be
able to build, visualise and store it more effectively. It is
difficult to separate issues of position from geometry,
making it almost impossible to access the object
independently so that it may be used again in the current
model or reused in a completely different model or
design. Particularly, this is a case for collaborative
design.

including audio and video feeds and a whiteboard, all
controlled by a session manager.
Following the shift towards exploiting 3D graphics
and other multimedia presence these recent initiatives
have also seen a shift in the nature of CVEs. Previously
it had been possible to consider them as futuristic
research endeavours requiring specialised equipment
and expertise and with limited applicability to real
world problems. However, the development of VRML,
the maturing of 3D graphics technology and the
development of the Internet has seen a significant
maturing in the nature of CVEs and Nearly all of the
commercial environments are accessible through
existing web browsers. CVEs are now within the grasp
of most users and further developments in machine
capabilities and Internet availability will see these
environments become increasingly commonplace.
Most collaborative virtual environments concentrate
on allowing users to interact with each other within a
shared 3D environment. CVEs have emerged from a
number of different backgrounds and traditions, and
support a range of applications. None of the existing
CVEs are geared towards telecollaboratively designing
manufacturing systems with comprehensive computing
requirements, such as designing and developing
prototypes and synthesizing operations, although some
of them have been used for architectural layout design
[ 161. In fact, a number of key features in the nature of
existing CVE systems inhibit the development of an
open approach to design or editing [ 171.
Limited considerurion of heterogeneity: The increased
popularity of virtual environments has led to a diverse
set of platforms emerging to support them. As in the
case of the World Wide Web it is already clear that
heterogeneity of platlorms and media will persist.
However, standards such as VRML (VRML97) focus
on the structure and presentation of v,irtual
environments rather than any higher-level properties.
Considerable variability exists in the nature of these
environments and the form of interaction they support.
This requires us to supplement the information provided
by exist VRML standards and offer translations into
local formats. The disadvantages of current CVEs can
be summarised as:
Poor access niodels arid liniited notions of ownership:
Current views of virtual worlds have been inclined to
ignore the issues of access and ownership inherent
within the shared world. Most systems have tended to
consider access at a very coarse granularity by
controlling access to the overall world model, rather
than considering fine grain access or control within the
environment. This means everyone has equal rights to
alter all parts of a shared virtual world or simply cannot
alter the world at all. In many current systems i t is
impossible to define objects within the world as
belonging to different users, and to grant different
access properties to these objects.
Lack of persistent storage: Few existing virtual world
environments provide support for persislence.
Currently, the changes made by users appear to have
disappeared the next time they connect, as the
environment reverts to the original stored state. If all the

Poor support f o r adniinistration and computation: An

often overlooked feature of CVEs is administration.
Existing CVEs have tended to provide limited support
for the administration and maintenance of these worlds
with limited tracking of access and use.

1.2 Grid and Globus
The integration of the various technological
approachcs being used to address the problem of
integrated use of dispersed resources is frequently call a
computational grid; a name arising by analogy with the
grid that supplies ubiquitous access to electrical power
[19]. Basic Grid services are those that locate, allocate,
collect, coordinate, utilize, and provide for human
interaction with the various resources that actually
perform useful functions. Grids are built from
collections of primarily independent services. The
essential aspect of Grid services is that they are
uniformly available throughout the distributed
environment of the Grid. Services may be grouped into
integrated sets of services, sometimes called
middleware. Current Grid tools include middleware
systems like Globus 1201 and Legion 1211, storage
systems like SRB (221, and workbench systems like
Habanero [I21 and WebFlow [23].
Computer networks have evolved from local area
network to wide area networks. This new hardware
enables the distribution of information over a global
“World Wide Web”. The World Wide Web has
established itself as a functioning computing
environment, accessible by the ever-increasing number
of online users.
T o a large extent, the development of usable
computational grids is hindered not by available
hardware capabilities but by limitations in the software
abstractions and services that are currently in use.
Existing network tools are focused on supporting
communication. not computation, while current

704

distributed computing systems are not performance
driven and typically are limited to clienthewer models
of computation. Clearly, the success of computational
grids will depend on the existence of grid-specific
middleware, that addresses. the needs of computations
including dynamic resource allocation, resource coallocation, heterogeneous ,and dynamic computational
and communication substrates, and process-oriented
security. In pursuit of this goal, the Globus [20] project
has developed a research program comprising three
broad activities:
Developing the basic technology and high-level tools
required for computational grids;
Constructing a large-scale, prototype computational
grid (i.e. testbed) using the basic technologies and
tools;
Executing realistic applications on the prototype grid,
in order to evaluate technologies and of the grid
concept.
As described in [21], a central element of the
globus system is the Globus Metacomputing Toolkit,
which defines the basil: services and capabilities
required constructing a computational grid. The open
source Globus Toolkit includes tools and libraries for
solving problems in the areas of Security; Information
Infrastructure;
Resource
Management;
Data
Management; Communication; Fault Detection and
Portability. The key to these grid projects is
middleware. By connecting operating systems to
applications, middlewan: can connect scientists
worldwide with vast amounts of data. It owns a number
of resources and storage capacities, which are
geographically distributed. We need the right software
to ensure all users have safe and secure access and to
provide the glue for the hardware, software, networks.
Among the development
of Globus-based
middleware, one remarkable asset is the development of
a platform independenl. three-tier system, called
WebFlow [23, 251. The visual authoring tools
implemented in the front-end integrated with the
middle-tier network of sirvers based on CORBA and
following distributed (object paradigm, facilitate
seamless integration of
commodity
software
components.
All
the: systems
use
Globus
metacomputing toolkit as i:he back-end.
This paper reports a new design for web-based
distributed collaborative design environments, which
uses the Globus metacomputing toolkit as the backend
and three-tier architecture. Our approach automatically
gives the user, access to the .full range of commercial
capabilities (e.g. databases and computer servers),
pervasive access from all platforms and natural
incremental enhancement as the industry software
juggernaut continues to deliver software systems of
rapidly increasing power. The paper is organized as
follows.
After reviewing collaborative virtual
environments and the Globus metacomputing toolkit i n
Section 1, we provide a new framework for web-based
distributed collaborative design systems and virtual
environment in Section 2. In Section 3, we discuss the

on-going implementation
summarized in Section 4.

work and the. paper is
, * .

2 A. framework for web-based. distributed
collaborative design environments
Based on the above review, a new framework for
Web-based collaborative design systems is illustrated
in Figure 1. The collaborative design environment
can be made up of several designers all over the
world working together simultaneously or a designer
working with a design repository through a
comprehensive
content-based
retrieval
and
visualisation system. The framework adopts a threetier software structure and employs component
techniques,
including
distributed
software
components and design components for product
design.
'

Designer GUI interface or
CVE:
Designer components
inputloutput
Assembling and editing
2D/3D visualisation
Querying display and surfing

,
~

1

Tier 1
WebBrowser

Globus based metacomputing:
Components encapsulation
Source and security
management
Distributed computing e.g. 3D
mapping and IPR management
Pattern matching, classification
and content-based retrieval

Distributed databases:
E-catalogue or digital
library
C A D repository
Image databases

Tier 2
Distributed

Tier 3
Distributed
Databases

Figure 1 A three-tier framework for a web-based
distributed collaborative design environment
Tier 1 is the web-browser which the user or designer
can access by any Internet browser on any platform. At
this tier, an active graphical user interface or a
collaborative virtual environment is developed for
design component input and output. Any 2D or 3D
design or product can be captured or scanned into the
environment by using cameras or 3D scanners. Then,
designers can assemble, or edit and modify the
component, or simply pass the component to other
designers or a specific distributed database in tier 3

'

705

through tier 2. The design components can be visualised
or manipulated in a VRML-based virtual environment.

distributed network to form an application. Examples of
a component include: a single button in a graphical user
interface, a small CAD part, an assembled unit from
CAD parts or an interface to a database manager [28].
Component can be deployed on different servers in a
network and communicate with each other for required
services. A component runs with a context called a
container in the middleware. COM is Microsoft’s
framework for developing and supporting program
component objects. The COM provides a set of
interfaces allowing clients and servers to communicate
on the same computer (running a Windows 95 or NT
system). It is aimed at providing similar capabilities to
those defined in Common Object Request Broker
Architecture (CORBA), the framework for the
interoperation of distributed objects in a network.
The third tier is the basis of the environment, which
is distributed databases e.g. e-catalogue, CAD
repository [31] and image databases. The database is
categorised by functions or visual properties. This is
important for real-time component searching from
large-scale distributed databaes [30]. Any new
components can be added to the database in appropriate
co-ordinates through the reusable wrapper [32]. The
database can also be visualised in the CVE environment
and users can navigate the system [29, 301.

Users can share the environments, and the source
manager in tier 2 manages any contribution to a design.
All the design components can be searched from
distributed
databases,
which
provide
design
components. When designers set out to create a new
product, they seldom start with a blank sheet of paper
and proceed top-down from first principles. For much of
engineering design, archetypes exist in the form of
existing products and standard components. The aim is
to adapt these designs to meet new requirements, to
increase reliability, and to reduce cost. The complexity
of designing a product as a whole can be reduced by
taking fragments from existing designs and combining
them, usually with some modifications. Each fragment
concerns a particular part of a designed artefact or
aspect of the design process. All the fragments can be
searched and navigated in the distributed databases by
using content-based image retrieval and graphical
mapping, which were reported by the authors in a
previous paper [29]. A related work about component
retrieval can also be found in the Engineering Design
Centre, Cambridge University [27]. To create a platform
independent system, this tier can be built by developing
Java applets and Java-based user interfaces by using
VRML, Java3D and Java Servlet Technology.
In the middle tier, a component-based structure is
applied. Simply, the middleware is a component
container and co-ordinator, which can be realised by
using main commercial component platforms (CORBA,
DCOM or JavaBeans) to cope, with the open and
distributed systems specific requirements [32].
To design and develop globus-based distributed
collaborative design environments, many of the services
will be provided. The services include the
communication, processing, storage and visualization of
ever increasing amounts of data and information.
Specifically, the middle tier includes:
A metacomputing software infrastructure.
Information about how to obtain access to a resource,
a resource management system to start processes on
each computer, interfacing with the local schedulers if
required,
A security service to handle authentication and
authorization at each site, e.g. role-based access
control
A process monitoring system to track the status of
application of retrieval computing, similarity
matching, design computing and visualisation or to
terminate if necessary
The entire tier is implemented by components. In
programming and engineering disciplines, a component
is an identifiable part of a large program or construction.
Usually, a component provides a particular function or
group of related functions. In program design, a system
is divided into components that in turn are made up of
modules. In object-oriented programming and
distributed object technology, a component is a reusable
program building block that can be combined with other
components in the same or other computers in a

3. On-going implementation of a component
based CVE
As described above, to implement the distributed
collaborative design environment, there is a lot of work
to do. One of the milestones is to overcome the
limitation of current CVEs. To provide CVEs with the
capability of persistence and ownership, we have used
extracted geometric features from a shared virtual
environment. This feature will automatically generate a
XML file to register the virtual environment and
modification of the environment with the ownership.
The developed algorithms can facilitate model updating
if an object is directly modified in the environment.
These features are also used for the component retrieval
and database classification. As a CAD component is
illustrated in Figure 2, our approach can record the part
position and status (orientation) in the shared virtual
environment. The users can log out of the environment
at any time and log in again to the same environment if
they want to do so.

Figure 2 A part in a different viewpoint
could be identified by the environment manager

706

[ 151 The MASH Project, University of Califomia, Berkeley,
httn://mash.cs.berkelev.edu/inasli/index.
html
[ 161 D Thompson, A Banerjee, P Banerjee, T DeFanti, and S
Retterer, “Tele-immersive product evaluation: a review and an
implementation framework”, Robotics and Computer
Integrated Manufacturing 16(2000) 181-190.
[ 171 P Phillips and T Rodden, “Multi-authoring virtual worlds
via the World Wide Web”, Interacting with computers 13
(2001) 401-426.
[18] Greenhalgh C., 1999. In: Van Rijsbergen C J (Ed). LargeScale Collaborative Virtual Environments. Distinguished
Dissertation Series. Springer, Berlin (ISBN 1-85233-148-8).
[ 191 J W Banus, R C Waters, and D B Anderson, “Locales:
Supporting large multiuser virtual environments”, IEEE
compuier graphics and applications, 16(6). IEEE Computer
Society, Silverspring, MD, 1997, pp. 50-57.
[20] Globus: htto://www.dobus.org.
[21] Legion: httn://www.cs.viroinia.edu/leeion/.
[22] C Bam, R Moore, and W M Rajasekar, “The SDSC
storage resource broker”, Proceedings of the CASCON’98
Conference, Toronto, Canada, 30 November to 3 December
1998; http: //www.npaci.edu/DICESRB/.
[23] E Akarsu E, G C Fox, W Furmanski, and T Haupt,
“WebFlow - high-level programming environment and visual
authoring toolkit for high performance distributed
computing”, Proceedings of the IEEE Supercomputing ’98,
November 1998.
[24] I Foster and C Kesselman C, “The Globus project: a
status report”, Future generation computer systems 15(1999)
607-62 1.
[25] T Haupt, E Akarsu E, and G Fox, “WebFlow: a
framework for web based metacomputing”, Future generation
computer systems, 16 (2000) 445-45 1.
[26] B Tierney, W Johnston, J Lee, and M Thompson, “A data
intensive distributed computing architecture for “Grid”
application”, Furui-e generation computer sysrem 16 (2000)
473-48 1.
[27] C T Charlton and K M Wallace, “A web broker for
component retrieval in mechanical engineering”, Design
studies, Vol 21 No 2, March 20000, 168-186.
[28] X D Liu, “CFACA: component framework for featurebased design and process planning”, Computer-Aided Design,
32 (2000) 397-408.
[29] G Y Tian, D Taylor, and G F Yin, “Online graphical
retrieval for computer-aided graphical design using virtual
reality”, submitted to International Journal of Integrated

4. Summary and Further work
This is an on-going project. In this paper, a new
architecture for Web-based collaborative design
environments and systems has been described. To
overcome the problem of current collaborative design
environments, metacomputing is exploited for intensive
data computing such as storing virtual environment
data, object retrieval, ownership identification and
object wrapping. The framework was based on the
emerging technologies of metacomputing and
distributed components. The advantages of the approach
are highlighted. Part of implementation of the
environment and system an: also reported, particularly,
the new features for VRML-based design environments
such as persistence and ownership is evaluated. It is
clear that the World Wide: Web provides significant
benefits to developers. It alliows open and direct access
and enables rapid deployment to a diverse set of users.
Future work will build the Web-based collaborative
design systems and run evaluations for various
engineering designs.

5. References
[l] H Takemura, and F. Ifishino, ‘Cooperative works
environment using virtual wcrkspace”, Proceedings of the
Conference on Computer Supported Cooperative Work, 1992;
226-32.
[2] J Calvin J, A Dickens, B Giiines, P Metzger, D Miller, and
D Owen, “The SIMNET virtual world architecture”,
VRAIS’93, Proceedings of rht. IEEE Virtual Reality Annual
International Symposium, 1993. 450-5.
[3] M R Macedonia, D P Pratt, M J Zyda, P T Barham, and S
Zeswitz, “NPSNet: A network architecture for large scale
virtual environment”, PRESENCE 1994; 3(4): 265-87.
[4] D Sonwdon, A West, “Aviary: design issues for future
large-scale virtual environments”, PRESENCE 1994; 3(4):
288-308.
[5] G Sigh, “Bricket: Sharing object behaviors on the net”,
Proceedings of IEEE VRAIS, 1995.
[6] C Greenhalgh and S Benfors, “Massive: a collaborative
virtual environment for teleconferencing”, ACM Tran.
Human-Comput Interaction. 1995; 2 (3): 239-61.
171 T Disz, M E Papka, M Pellegrino, and R Stevens, “Sharing
visualization
experiences
among
remote
virtual
environments”, Proceedings of the International Workshop on

Computer-Aided Engineering.

[30] G Y Tian G Y and D Taylor, “Colour image retrieval
using Virtual Reality”, Proceedings of fV2UUU (IEEE). pp
221-226.
[31] W C Regli and V A Cicirello, “ Managing digital libraries
for computer-aided design”, Computer-Aided Design 32
(2000) 119-132.
1321 J M Troya and Vallecillo, “Controllers: reusable
wrappers to adapt software components”, Informaiion and
Sofrware Technology 43 (2001) 189-202.

High Performance Computer Graphics and Visualisation,

1995.
[8] J Leigh, A Johnson, and T DeFanti, “CAVERN: A
distributed architecture for supporting scalable persistence and
interoperability in collaborative virtual environments”, Virtual
Reality: Res. Dev. Appl. 1997; :!,2: 217-37.
[91 A Johnson, M Roussos, J Leigh, C Barnes, C Vasilakis,
and T Moher, “The NICE project: learning together in a
virtual world”, Proceedings of IEEE VRAIS’98, Atlanta,
March 1998.
[IO] http: //www.evl.uic.edu/cairern/cavernpapers/vrs/
[1 I] R C Smith, R R Pawlicki, J Leigh, and D Brown,
“Collaborative VisualEyes”, Proceedings qf the Fourih
International Immersive Projection Technology Workshop,

2000.
1 121 Habanero, htlu://havefun.n~:sa.ciiuc.edu/habanerd
[ 131 Microsoft NetMeeting, ~://www.mnicroscift.com
[14] Placeware, htti,://www.i,lacewarc.com

707

