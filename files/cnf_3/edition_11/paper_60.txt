Web-Based Distribution of GIS Metropolitan Maps
Xuefeng Li
Dept. of Mathematics and Computer Science
Loyola University, New Orleans, LA 701 18
Li @L,oyno.edu

Shengru Tu' and Xiangfeng He'
Computer Science Department, University
of New Orleans, New Orleans, LA 70148
shengru @cs.uno.edu

Jay J. Ratcliff
US Army Corps of Engineers, 7400 Leake Ave., New Orleans, LA 701 18
jay.j .ratcliff @mvn02.usace.army.mil

Abstract

Recently, GISs have further grown into the Internet to carry
out public dissemination of maps with rich information.
Many CIS and CAD software vendors, provide various
web publishing tools that convert map files into HTML files
containing CIF or JPEG images. Some vendors further provide plug-in components to display vector maps in popular
web browsers. Others embed Javascript code or Java applets in web pages. Among them, ESRI's ArcIMS[2] features integration of local and Internet data on the client side.
However, they are faced with a common dilemma between
the large sizes of CIS datasets and the limited bandwidth
available for ordinary Internet users. As a result, only small
or simple maps are available for general public viewings.
In this paper, we propose a content organization model
for the distribution of large maps with rich CIS contents.
The goal of this model is to optimize the user-perceived response time, the visualization quality, and the facilities to
support viewers' efficient navigation. We have constructed
a prototype in Java that implements this model. Eventually
this model is to be built into a set of software components
so that they can provide supplementary functions for other
online CIS systems.

Much research on spatial data retrieval has been accumulated in the past two decadtps. However; the research of
Internet distribution of GIS contents is still in its infancy.
This paper describes a systematic approach to optimize Internet distribution of GIS vector maps. The goal is to reduce
user-perceived response time and improve viewers' navigation eficiency.
At the center of this approach is a hierarchical content
management model. Each muli'iple-layer vector map is divided into partitions, or blocks, of a predetermined size to
build a hierarchy. This size is chosen so that most compressed blocks can be downloaded reasonably fast with
a popular connection speed. A front end cache, and a
novel application - level locality-based pre-fetch ing method
are devised.
Experiments with a Java prototype have shown smooth
panning and fast zooming when large map datasets are accessed.

1. Introduction

2. Vector Model and Open Standards

In geographic information systems (GISs), visualization
takes the central role. The U.S. Geological Survey Agency
defines a CIS as a computer system capable of assembling,
storing, manipulating, and displaying geographically referenced information[ 131. A map in a CIS works for a viewer
by relating information from different sources, which is
stored in separate layers in its dataset. The process of overlaying data involves in the efficient visualization of all layers, in the form of either vector graphics or raster images.

2.1. Vector maps
Geographic features are represented in a CIS using two
models, the vector model and the raster model. A map is
composed of geometric elements called features in a vector model. Each feature has coordinates, its shape, and
some other information. On the other hand, features are
represented as a matrix of cells in continuous space in a
raster model. The vector model is particularly suitable for
discrete features and data summarized by area; the raster
model is better for representation of continuous numeric

'Partially supported by Louisiana Board of Regent grant LEQSF( 1998OI)-RD-B-I8 and contracts from Engimi Inc., New Orleans since 1999.

0-7695-1195-3/01 $10.00 0 2001 IEEE

419

values[7]. Obviously, the vector model takes the main role
in metropolitan CIS maps, while the raster model is used to
represent aerial images as background rendering.
The distribution of vector graphics over the Internet is
much more complex than the distribution of raster images.
Every image format can be easily converted into a few standard formats (such as JPEG) that are well supported by popular web browsers. No browser supports directly the drawing of any vector graphics. Some vendors keep their vector
formats proprietary but provide free plug-in components for
viewing in Web browsers. A problem with this approach is
that these components process graphics as complete files.
These plug-in components d o not support assembling multiple graphics pieces into a single map.
A promising endeavor to overcome the proprietary
boundary is the use of XML. While leading vendors such
as ESRI has ArcXML[l2], an ESRI flavored derivative
of XML, organizations such as the Open CIS Consortium (OGC) recommends the Geography Markup Language
(GML)[8], an XML encoding for the transport and storage of geographic information. GML encodes many basic
geometry types using the GML Geometry schema (geometly.xsd)[S]. The geometry schema corresponds quite closely
to the geometry encoding widely used in various graphics
formats[ 11.
In accord with the OGC Simple Features model, GML
provides geometry elements corresponding to the following geometry classes: Point,Linestring,LinearRing, Polygon,Mu1 tiPoint,Mu1tiLineString,
MultiPolygon,MultiGeometry. In addition there
are <coordinates> and <coord> elements for encoding coordinates, and a <Box> element for defining extents.
For example, a <coord> element is shown in Table (1).

<e1ement name= " coord "
type="gml:CoordType"/ >
<complexType name= " CoordType">
<sequence>
<element name= "X" type= decimal " / >
<e1ement name= Y type=" decima1
minOccurs= " 0 " / >
<element name="Z" type="decimal"
minOccurs= " 0" / >
</sequence>
</complexTypez
"

"

"

"

Table 1. A sample GML element

2.2. Partition of vector maps

I

Proprietary
vector
contents

1

Blocks O f
XML
conten.ts

k
/&--

Hierarchv of
blocks of
XML

+

contents

Figure 1. Decomposing a vector map

contains all vector elements over R I . We will decompose

a large CIS dataset into many small blocks of appropriate
sizes as illustrated in Fig. (1).
For example, a compressed CIS dataset of a city is about
20Mb in size. Trisecting each dimension results in 9 subregions, each having vector contents of about 2Mb. After trisecting RI recursively 4 times, the division process would
have produced regions with vector contents of about 3Kb.
That is small enough for most Internet users to download
and view with just dial-up connections.
The region of interest RI is first divided (uniformly, for
simplicity) into many small regions by trisecting each dimension recursively. Assume that after n divisions, vector
contents of these regions are small enough for transmission
across the Internet. Denote the resulted subregions by { T ~ ,
for 0 5 i, j < 3". Using the regional query feature of a CIS
database such as the Oracle Spatial, we find all vector elements in each T , , ~ .
Using these subregions, a basic hierarchy ( B H ) is created as follows.
1. Vector contents in each r i , j are encoded using GML.
Denote the XML contents by x i ? j .

A given vector map has an associated region of interest

( R I )with certain coordinates. The associated CIS dataset

420

~ }

Level 2

Figure 3. Hierarchy generation (It)

Figure 2. Hierarchy generation (I)

2. A leaf node b z j of B H consists of b:: and bTj.", where
b"T
= ri,j and b [ r = xi,j .For 0 5 i ,j < 3".
Z J

from the dataset in the range. At other levels, a block contains the contents that only represent an overview of a certain region since some vectors have not been selected from
child nodes in constructing the parent node.

3. A parent node b& (consisting of bf?; and bf,;) is created recursively by combining 9 child nodes according
to their indexes, for 0 5 IC i:
n and 0 5 i , j < 3 k :

b".T =
Z J

U {b:ci:3j+q}, ;:5(:
2

p,q=o

=

U {b3i+p,3j+q}.
2

k+l,x

p,q=O

Here, the U operation selects some vector contents from
each of the child nodes before combining them into the parent node, so that the size of vector contents in a parent does
not exceed a certain limit.
By design, such a hierarchy is a complete tree. A node
in B H is referred to as a block that contains geometric and
graphics information about a certain region. At the leaf
node level, a block contains every detailed vector content

From the viewpoint of sizes of XML contents, B H is an
unbalanced tree. Some blocks may contain just a few vector
elements while others are clustered with vector elements. A
sample division of an R I is shown in Figs. ( 2 ) and ( 3 ) . In
this example, the purpose of the CIS is to study populationrelated issues (such as voting records and voting station distribution in the region), where large body of water (a lake)
is to be ignored. For simplicity, we fill these blocks with a
symbol indicating that they contain only water. Nodes with
nontrivial features are shown in Fig. (3).
Nodes in B H have a natural order. They can be ordered

42 1

GQN
5
4

3
2
1
0

Granularity
2 streets per mile
4 streets per mile
8 streets per mile
16 streets per mile
32 parcels and streets per mile
streets, buildings and parcels

The different GQN numbers indicate different granularities,
thus different sizes of vector contents. Depending on a user
connection speed, blocks from the appropriate copy B H ,
is used to meet the user’s requests.
A user starts navigating from the root block, where an
overview of the whole region of interest is displayed. The
user can navigate through the hierarchy to a desired target. The number of overviews downloaded before reaching
the target area is the depth of the hierarchy. That makes a
viewer’s navigation very efficient.

Table 2. A sample granularity quantification

2.4. Client-side caching and pre-fetching

according to the following rule:

bf;,jl

< bf:,j2if

{

kl

c

= k2 A i l < i2
kl = k:! A i l = i 2 A j ,

or
or

Icl

The front end conducts three functions: presentating
contents, interacting with users, and caching and prefetching data.
For a multiple-layer map, a user can select any combination of layers. All selected layers (and only these) are downloaded in each block. Therefore, a viewer can select the desired layer locally. Accumulatively, the front end cache can
substantially reduce downloading delays.
The caching feature is needed because very often a user
may want to review downloaded items. The unit of downloading is a block. When a block arrives in the front end’s
memory space, a block object is instantiated to wrap the
block. We use a data structure to preserve the reference to
each block object. Having such a data structure in the front
end is necessary, because no browser’s file-based caching
mechanism supports the reuse of downloaded elements by
assembling.
A unique feature of our front end is an application-level
locality-based pre-fetching mechanism. With the identifier information of each block, the front end can calculate the current block’s neighboring block set. The front
end attempts to download the neighboring blocks when no
viewer’s request is pending. As soon as a viewer issues a
new request, the pre-fetching process is suspended. Details
of management of cache and pre-fetching are described in
section 3 .
With the managed cache, a request is forwarded to server
only if the item cannot be found or assembled locally. Since
locality is a very reasonable assumption for CIS viewers,
pre-fetched items should have a high likelihood to meet
viewer’s requests.

< j:!

where bf:,j, 4 bt:)j, means node bf:,jl is before node bf;,j,,
i and j compose the geographic coordinates of each node’s
corresponding region, k is the level in B H .

2.3. Hierarchies and navigation efficiency
Three consequent problems of partitioning must be
solved. They are (l), to control the size of the overview
blocks systematically; (2), to cope with dynamically changing user connection speeds, and (3), to support viewers to
navigate the hundreds or thousands of blocks and find targets efficiently.
We defined a granularity measurement called grunulurio
quanti$cation, which is application dependent. For example, in a street map, the granularity would be defined as the
number of displaying streets per unit length. Different granularity levels correspond to different number of streets to be
displayed per unit length. In our prototype system, granularity quantification is indicated by the granularity quantification number (GQN) as shown in Table (2). To automate
the generation of the overview hierarchy, we also assign a
rank number to each street. Interstate and state highways
carry the highest rank number, 5. A city’s major streets,
local major streets, neighborhood main streets, and neighborhood lanes have ranks 4 , 3 , 2 and 1 respectively. Finally,
buildings and houses have the lowest rank number, 0.
When combining child nodes to form a parent block, we
will remove some streets from the child nodes so that the
number of streets in the parent node does not exceed a certain limit. Normally, streets with the lowest rank (least important) will be removed from the child nodes.
To cope with the dynamically changing connection
speed problem, multiple copies of the B H are created as
follows.

B H , = {b:;?

1 b;;;

3. Implementation and Experiments
This section reports on our Java implementation of a
CIS dataset dissemination system based on the hierarchical
model. The UML deployment diagram shown in Fig. (4)
illustrates the architecture of the map service system. Four
logical servers are deployed on the server side. They are the

hasGQN = m }

422

vect0.r maps

t

imaqe maps

~

Internet

c 1ient compu tir

map preprocess0
I vector

I

web browser
front edd component

-

request control

builder

-

cache resister
databa e server
pre-fetchinq control
da tabass

&a

,, 1

I

re ue t rocessi
/ reques
seryi;
process i-

Legends
XML and defined a DTD by ourselves to govern the XML
descriptions of graphics. Since we treated our homemade
XML as a transient means, it did not cost much for us to
convert our early XML vector descriptions to those in GML.
The advantage of adopting a standard is that the browsers
or CIS specialized browsers will support GML in the near
future, which will reduce the complexity of our front end.
We have encountered a problem with available vector
maps in this project. Many of them were produced by scanning old paper maps. The follow-up digitizing process unfortunately generates highly fragmented vector representations. For example, a street is represented by many segments of lines rather than a “line-string”. Streets that cross
each other in sharp angles are converted into some confusing shapes. The problem with these “semi-digital” maps is
that their sizes are unreasonably large. Sending vector representations of such maps become troublesome. Our solution to this problem is to use the vector drawing program to
prepare images and overviews. Then a hierarchy of each of
these maps is prepared in a database. At web service time,
only stored images are delivered to clients.

Component

I

Object

Figure 4. Server-side deployment

map preprocessor, the database server, the request processing server, and the web server. Two components, the vector
graphics application and the image application, run in the
map preprocessor. As a convention, the web server hosts the
servlet component and the HTTP server component. The
other two servers run one component in each of them. The
front end component is an applet shown in Fig. (5) which
includes four objects: request control, cache register, prefetching control and GUI components. The web browser is
not part of our prototype.

3.2. Front end component and pre-fetching
We have implemented the front end as an applet. Its
functions have been described in Section 2.4. Map contents are compressed with a zip utility, which helps in reducing downloading delays. Partitioning large GIS dataset
files into blocks also helps in reducing user-perceived re-

3.1. Vector maps and a compromise in reality
In the early phase of our project, we used vector maps
in the DXF format. Later we started experimenting using

I

1

Figure 5. Client-side deployment

Server

+Internet
I

I

423

5. Conclusion

sponse times. Pre-fetching further reduces user-perceived
del ay s.
To manage cache contents, we use a hash table to register and keep a reference to each downloaded block. Coordinates are used to find objects for reuses. No disk-write
action is directly requested since this is not allowed for applets. However, the virtual memory mechanism in the client
computer automatically enables indirect accesses to local
disks for the applet. This “in memory” cache can use up to
the virtual memory size of the viewer’s computer, which is
typically large in modern personal computers. The applet
monitors the size of the hash table to avoid overflow. When
cached contents exceed a certain threshold, objects that are
far from the current block are deleted. When the hash table starts to use virtual memory, operations on the client
computer may become slower. However, reusing a cached
image is still faster than downloading it again.
To render GML descriptions, we use the j ava .awt
API which provides class Graphics2D, among others,
for rendering 2-dimensional shapes, text and images on the
Javat” platform. Primitive elements defined in GML such
as Linestring and Polygon, all have their corresponding rendering methods defined in class Graphics2D,such
as drawPolyLine and drawpolygon.

This paper describes a systematic approach to the optimization of Internet distribution of complex GIS maps. At
the center of this approach is a hierarchical content management model. Based on this model, a novel application-level
locality-based pre-fetching method is devised. Experiments
with a Java prototype have shown smooth panning and fast
zooming even when large map datasets are accessed.

References
[ 11 Bentley.com.
Integraph Standard File Formats.
www. bentley.com/tools/miscdocs/keyword.htm.

[2] ESRI. ArcIMS online. www.esri.com/software/arcims/.
[3] ESRI. Using mapobjects internet starter applications.
maps.esri.com/isa.
[4] J. D. Foley, A. van Dam, S. K. Feiner, J. F. Hughes,
and R. L. Phillips. Introduction to Coniputer Graphics. Addison-Wesley Publishing Company, Reading, Massachusetts, 1994.
[5] A. Guttman. R-trees: A dynamic index structure for spatial
searching. Proc. of the ACM SIGMOD Annual Meeting on
Management of Data, Boston, MA, 1984, pp 47-57.
[6] G. G. Lai, D. Fussell, and D. F. Wong. HV/VH Trees: A
New Spatial Data Structure for Fast Region Queries. Proceedings of the 30th Intemational conference on design automation, Dallas, TX, Jun 14-18, 1993, pp 43-47.
[7] A. Mitchell. The ESRI Guide to CIS Analysis. ESRI Press,
Redlands, California, 1999.
[SI Open CIS Consortium. Geography Markup Language
(GML) 2.0 (Feb. 20 2001). www.opengis.net/gml/Ol-

4. Related work
Much research[6, 101 on complex spatial data retrieval
and manipulation has been accumulated in the past two
decades. Models such as R-tree[S] have been implemented
in popular spatial database software such as Oracle Spatial. On the other hand, research on both general Internet
distribution[9] and CIS Internet distribution[ 141 are still in
its infancy. Wei, et al.[ 141 have investigated the problem
of transmitting large vector contents across the Internet and
proposed a binary tree model to support viewer’s navigation. However, a parent node in their model consists of
contents of all of its child nodes’ contents. As a result,
the higher a parent node’s level is, the longer it takes to be
downloaded.
Our work has been influenced by four technologies.
They are the Low-Bandwidth X (LBX)[ 1 11; the static sizing
approach in streaming media; the Programmer’s Hierarchical Interactive Graphics System (PHIGS)[4], and the interactive maps services provided by Zip2[ 151 and ESRI[3]. A
missing capability of these two sites is the ability to handle
the dynamically changing connection speed problem.

029/GML2.html.

[9] V. M. Padmanabhan and L. Qiu. The content and access dynamics of a busy Web site: findings and implications. Proceedings of the conference on Applications, Technologies,
Architectures, and Protocols for Computer Communication,
Pages 1 1 1 - 123,2000.
[ 101 H. Samet. The design and analysis of spatial data structures.
Addison-Wesley Pub., Reading, MA, 1990.
[ I l l P. D. Smith. The LBX Mini-HOWTO.
Idp.iol.it/
HOWTO/mini/LBX.html.
[ 121 K. D. Taig. Creating CIS-EnabledWeb Sites Using ArcIMS.
http://www.esri.com/news/arcuser/lOOO
/arcims.html.
[ 131 USGS.
Geographic Information Systems.
http://
www.usgs.gov/research/gis/title.html.

[14] Z.-K. Wei,Y.-H. Oh, J.-D. Lee, J.-H. Kim, D.-S. Park, Y.-G.
Lee, and H.-Y. Bae. Efficient Spatial Data Transmission in
Web-Based CIS. Proceedings of WIDM 99, Kansas City,
MO USA.
[I51 Zip2.
Major U.S. Metropolitan Area Street Maps.
www.zip2.com.

424

