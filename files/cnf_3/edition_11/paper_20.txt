Visualising Data Using the ActionMapper: A Proposed Interactive Event
Logger for User Interface Evaluation
Y ing Leung

Marcus Nyberg
Mikael Goldstein

Department of Information &
Communication Technology, Hong Kong
Institute of Vocational Education
Tsing Yi Island, New
Territories, Hong Kong
Tel: + 61 3 9214 8765
Email: YLeung@vtc.edu.hk

Ericsson Research,
Usability & Interaction Lab
Torshamnsgatan i?3,I6480 Kista, Sweden
Tel. +46 8 /404 65 15, 757 36 79)
Email: finarcus.nyberg,
mikael.goldste in)@era.ericsson.se

tool can be limited by its ability to hnction effectively
as part of an iterative design process. Extracting the
results of a usability study using task interaction analysis
can be very time consuming. The traditional analysis is
usually depicted as a text narrative, verbally describing
the user's actions and mistakes. This narrative requires
an extensive qualitative analysis from the evaluator. In
addition, the narrative format can be very difficult for
other members of the design team to interpret. The ability to effectively incorporate the results of usability testing into the design process is therefore a highly desirable
and often lacking characteristic of evaluation tools. In
this paper we will propose and discuss a novel graphical
technique that we believe can enhance the usability
evaluations and provide a user interface designer with
many benefits.
The ActionMapper model proposed in this paper is
based on the KeystrokeMapper [3], which initially was
designed as a paper-based mockup only and not yet
evaluated. We describe the KeystrokeMapper briefly as
well as a similar tool, the Flexible Interface Technique
(FIT), designed by Held [4]. An extended and improved
version of the KeystrokeMapper concept [I 1J and how it
has been used in two usability evaluations [I, 1 I] is also
discussed. Based on these experiences we suggest a possible development of the KeystrokeMapper concept into
a computer-based tool. which we have named the
ActionMapper.
The ActionMapper is designed to provide more
focused logging of user actions. The logging can be
undertaken in real-time, but also complemented by
detailed post-time logging taken from video recordings.

Abstract
The proposed Actionhtapper tool extends previous
work on the generic KeystrokeMapper tool to provide an
efficient method of logging and visualising a novice
user S interaction with a Ltynamic interface. For any
specified task the ActionMapper could generate a
graphic representation of hoth the designer 's conceptual
model (represented by an Optimum path) and an indication of the user's mentfrrl model (represented by the
actual path navigated by the user). In this study, the
results from two usability experiments have been analysed using the KeystrokeMapper concept. From this a
refined version of the tool, re@rred to as ActionMapper,
is outlined. It is argued thcrt the future implementation of
the ActionMapper concept as a computer-based tool,
which includes the automrrtic analysis and visualisation
of numerous usability metrics, will substantially enhance
the evaluation process. By adding event recording
functionality in a prototypc for a small handheld device,
effective usability evaluations could also be conducted
in a mobile context.

1. Introduction
Efficiently logging and describing user actions is a
problem many usability evaluators experience. As
pointed out by Goldstein et al. [3], traditional usability
evaluation tools seldom hzive the facility to provide the
evaluator with either efficient event recordings or the
appropriate visualisation of the user's interaction with an
interface. In addition, the usehlness of an evaluation

147
0-7695-1195-3/01
$10.000 2001 1E:EE

classified as single keystroke actions. A simple example
of the KeystrokeMapper usage, either in real time or
when watching video recordings in post-time, is displayed in Figure 1. The left plot shows the empty plot
for a 'specified' task before the user actions have been
logged. Only the Optimum path is plotted initially and
some predicted deviating keystroke actions have been
classified. As the novice user navigates through the
interface, the evaluator plots the keystroke actions and
the final result is shown in the right plot of Figure 1b.
Many users take different paths towards the goal and
the same keystroke action can have a different meaning
depending on the context in which it is performed.
Therefore, a special annotation was proposed, its purpose being to explain the relevance of each keystroke
action and to show if it was leading the user towards the
goal at the particular moment. This annotation can be
modified according to the evaluator's preferences and
the type of interfaces used, but the five most common
types of actions were defined as: ( 0 0 0 ) Optimum path
action not used. (om.) Optimum path action used. (aaa)
Alternative actions leading towards the goal. (+++)
Deviating actions not leading towards the goal. (P) or
(F) Task passed or task failed.
The narrative text analysis and explanations are substituted for a graphical plot representation. An examination of the plot provides an unambiguous representation
of the user's deviation from the design model directly
indicating the problematic aspects of the interface.
However.
the
qualitative
approach
of
the
KeystrokeMapper can benefit from being complemented
by some quantitative usability metrics. The keystroke
deviation metric. as suggested by Mohageg [8]. was one
that Goldstein et al. [3] proposed.
The KeystrokeMapper technique has some disadvantages that will be addressed in this paper. One is the lack

The ActionMapper should be able to generate the same
type of graphical representation of user and designer
conceptual models as used in the KeystrokeMapper tool.
However, additional analysis can also be performed with
the help of interactive visualisation techniques and the
automatic derivation of various usability metrics. We
believe that the proposed ActionMapper will prove to be
a straightforward event recording and visualisation tool
that can be used not only in usability evaluations but
also in other disciplines requiring task analysis procedures. The graphical nature of ActionMapper also
makes it less dependent on linguistic interpretation.

2. Background
2.1. The KeystrokeMapper
The paperbased KeystrokeMapper [3] was the first step
towards creating a tool that could be used to both log
and visualise the novice user's interaction with an interface. It proposed a coarse way of analysing a novice
user's behaviour when performing a 'specified' task in a
usability evaluation. The KeystrokeMapper tried to capture the differences between the novice user's mental
model [IO] and the designer's conceptual model by
simultaneously visualising the Optimum path [8]
(designer's intended solution) and the novice user's
navigational path. In this way, the focus is not just on
the deviating keystroke actions. which is the most common approach among existing tools. e.g. Noldus
Observer [9]. but also on the explicit registration of successhl sequences of keystroke actions.
In the KeystrokeMapper. the user actions are analysed at a reasonably low keystroke resolution level. A
double-tap, several consecutive scrolling taps and the
entering of a string of text in an information field are all
K e y x t m k e W e y x b o k e N o 1 2 3 . 4 5 6 7 8 9 1011
'Press one anow key
0
Enter the leiter P
0
Press the green telephone
0
Listen 10 8. mite message
0
. *
,Press the red te ephone
p * .

1 2 3 4 C 6 7 8 S 10 1 1
Press one arrow key
0
Enter the letter P
0
Press the green telephone' "

Ksylboke\Key.bokeNo

.

Press menu
Scroll through submenu
Press select in submenu
Press b a d
Prbss em
Press names
Press select on search
Enter letters pe-t
Press OK
Press detail

^

*

"

*

*

P
Scroll
i e s through
menu submenu

+ \

Press back
1

~~

.

Figure 1. Using the KeystrokeMapper technique for t h e task: Making a telephone call on a Nokia 61 10
mobile phone. (left). Optimum path to accomplish the task. (right). The user's navigation path when
accomplishing the task. The curved circles visualize repetitive keystrokes.

148

of visualisation for repetitive behaviour (see Figure 1).
A user might perform the same sequence of deviating
keystroke actions many times before finding the right
way. Another disadvantage is the question of scalability,
both considering the number of keystroke actions in one
plot and the total number of plots needed. When the
subjects and tasks increase it is desirable to find a way to
aggregate the results obtained across users for each task
separately.

evaluator might not be able to keep up with their high
interaction pace.

2.2.1. Comparing Real-Time with Post-Time Analysis
Comparing the FIT system to the KeystrokeMapper, we
see that both techniques are built upon a ‘Simon says’
procedure. However, while the FIT system only i s
designed for logging of actions in real-time with video
recordings as an option, the KeystrokeMapper is
designed for complementary post-time logging using
video recordings. The real-time logging without video
recordings employed in the FIT system gives the
evaluator one chance only. There is no room for adding
actions or modifying the plot afterwards. This in combination with the absence of an Optimum path representation implies that this system is best used for logging of
user behaviour at a low-resolution level.
If we consider usability evaluations of handheld
devices, the main focus is on the reasons behind the
actions and trying to capture the user’s mental model.
The use of video recordings allows the evaluator to
investigate these properties in detail and to change
parameters in the analysis at a later stage if needed.
Another important issue is the fast interaction pace regarding handheld devices and the only solution is to log
the actions on a lower level of resolution in real-time.
Depending on the level of analysis needed, a more
detailed post-time logging can be performed using video
recordings. Our experience is that this is a requirement
in order to filly evaluate a computer interface.

2.2. The FIT System Real Time Analysis
Important work to consider has been made in the FIT
system [4].It has similarities to the KeystrokeMapper
technique, although it has its origin in a different work
area. The FIT system was developed for ethnological
studies of work environments and has a more quantitative approach. It has been used where the evaluator is
mainly interested in the efficiency of the actions. It
offers real-time logging of a user’s actions when performing a ‘non-specified’ (or a specified if desired) task.
The technique is design1:d for online and onsite event
recording using a PDA (Personal Digital Assistant). The
evaluators can easily create their own event recorder
interface by simply drawing or printing it on a piece of
paper. The paper template i s then placed over the touchsensitive screen of a PDA running a FIT-program that
stores all the input as the evaluator mimics the user
actions. The data stored in the PDA can then be transferred to a personal computer (PC) and analysed at a
later stage in the FIT-manager program that offers some
data analysis and representations (e.g. movement analysis and task action sequences).
One of the major advantages of this technique is its
great flexibility in regards to 1) the types of task action
sequences that can be recclrded and 2) the situations in
which the small mobile handheld registration device can
be used. The amount of training required for the evaluator is minimal and new conceptual interfaces or situations can be created rapidly with little effort. Although
not particularly designed to study handheld devices, the
FIT system can also be of great use when evaluating
small devices with static interaction buttons (hard keys)
such as mobile phones.
However, using the FIT system for evaluating applications designed for handhcld devices such as PDAs can
be more problematic. These devices often include softkeys and dynamic displays that change depending on the
user’s input. In such cases a static paper template of the
interface is of less use. Furthermore, the use of a paper
template may make it difficult for the evaluator to unobtrusively view what the user is doing in real time. In
addition, many users are working quickly and the

3. T h e KeystrokeMapper V2.0
To evaluate the KeystrokeMapper tool properly, it was
decided that it should be tested in two usability evaluations. During the preparations of the first one, some
simulated plotting was made that revealed a few drawbacks with the original annotation. When the deviating
keystroke actions increased in number, the many arrows
between the novice user’s navigational path and the
Optimum path made the plot difficult to create as well as
to interpret. A related weakness was the inability to
visualise repeated keystroke actions [3].
The only solution to the latter problem was to add a
temporal aspect and move to the right along a discrete
timeline when plotting. Optimum path actions occurring
later in time were thus visualised later in time and in
parallel to the original Optimum path. This modified
annotation also solved the cluttering problem since the
action arrows (substituted for simple lines) became easier to follow and did not cross or overlap each other. An
example describing an identical sequence to the one of
Figure 1 (right), this time using KeystrokeMapper V2.0,
is displayed in Figure 2.

149

To further enhance the visualisation of the interaction
sequence, keystroke actions not belonging to the Optimum path (Alternative actions and Deviating actions)
were grouped separately. By introducing a temporal
aspect, the plot explicitly visualises the efficiency as
well as the effectiveness. Considering the number of
keystrokes, an exact efficiency value can be extracted,
and an approximate value can be calculated for the task
completion time.

only had to be viewed once on video afterwards before
having the user’s exact interaction path described on
paper. In addition, the plots contained all the details
required for trend and results analysis. By quickly
browsing the interaction path for one task across the
users, the common deviating paths from the Optimum
path were easily identified. Some of these common
interaction pattems were summarised in typical interaction paths and used to describe the interaction in a
subsequent report.
The major conclusion from this experiment was that
the KeystrokeMapper is relatively easy to use and
understand. However, the paper-based version is not
time-efficient and a computer-based tool would be preferred when the number of tasks and users grow.

K ~ o k d K o y . t m k . N o 1 2 3 4 5 6 7 8 9 10111213141516

Optimum

p*

Press the green telephone
f is ten to & rmte messape
Press the red telephone

Press OK
Akemltlvo Enter leuen pe-t
PressseIectonsearch
Press names

~

.
.

0%

.

.

.

. .

t

3.1.2. The WAP study. The second experiment was a

~

I

study of two WAP (Wireless Application Protocol)
interfaces [ 11. As with the previous evaluation, it was a
controlled experiment performed in a usability lab and
the users’ actions were recorded on digital video. This
study employed 10 participants that performed 5 tasks
on 2 interfaces according to a repeated measurement
design. The total number of plots was relatively small
(100) compared to the PowerCom experiment. As in the
PowerCom experiment, plotting in real-time proved to
be a difficult task when the user deviated from Optimum
path. However, the analysis phase was again experienced as being very structured and the advantage of only
having to view the video recordings once was appreciated.
The analysis as well as the visualisation was also improved in this experiment by adding a time-stamp feature to indicate at what time in the interaction sequence
critical situations took place. These situations could be a
deviation from Optimum path or when the user finds the
Optimum path again. In this way, the evaluator could get
an estimate on how long time that was spent on each
segment of the interaction path. In order to hrther
improve the visualisation, screenshots were added below
the plot for easier interpretation. A person who has not
taken active part in the evaluation and does not fully
understand the interface might have difficulties following the interaction otherwise.

.

Figure 2. The KeystrokeMapper V2.0 showing the
same task as Figure 1 (left). The different types of
actions are grouped together and when Optimum path
actions appear later in time, they are depicted a s grey
filled circles to indicate a time latency [I I].

3.1. Using the KeystrokeMapper V2.0
3.1.1. The PowerCom study. This study involved a

usability evaluation of a PDA prototype application
called PowerCom [I 1,121. This application was
designed to support common PDA tasks as well as call
handling. The evaluation was performed as a controlled
experiment in a usability lab and included detailed digital video recording of the user actions. 18 subjects participated in the study and they all performed 7 tasks on 3
separate interfaces according to a repeated measurement
design.
The intention was to plot the actions on a high level
in real-time when using the KeystrokeMapper, and complement the plot afterwards. However, due to the
experimental setup in the PowerCom study, it was not
possible to log the user actions in real-time. Therefore,
the plotting process was performed in a post-time style.
This proved to be time-consuming and labour-intensive
work, since the total number of plots were not less than
378 (18x7~3). It was also the first time the
KeystrokeMapper was used in an experiment, and perhaps the resolution was too high considering the large
number of subjects and tasks. However, in spite of the
time consuming nature of the transcription, each task

4. The ActionMapper
By incorporating the experiences gained by the use of
the paperbased KeystrokeMapper V2.0 in the two
evaluations and applying the advantages of both this
method and the FIT-system [4],we propose how an efficient computer-based tool could be designed. The name
for this proposed tool is the more generic ActionMapper.
This tool is intended for the whole interactive process of

150

logging, analysing and visualising the user actions in
order to fdly evaluate an interface.

4.1. Real-time logging
The first task for an evaluator is efficient logging of the
user actions in real-time and we begin with the traditional situation for a usability experiment. That is a lab
environment with every user action registered on digital
video. Our experience is that it is extremely difficult to
completely log deviating actions in real-time. Therefore,
we suggest logging the user actions in a simplified
KeystrokeMapper V2.0 style by classifying each action
as either Optimum path action or not. Only the Optimum
path actions are specified and exactly classified by the
evaluator in real-time, the alternative and deviating
actions are not specified until the post-time analysis. The
optimal procedure in real-time would be to simply click
on actions in a GUI (Graphical User Interface) and have
the user's interaction path plotted automatically.
Another useful feature would be the ability to add timestamps at critical points in the interaction. An example
of how this real-time annotation might look like is
shown in Figure 3.

Optimum Enter the letter P
Press the green telephone
Listen to & write message
Press the red telephone
Other acbon

x x x x x x x x x x x x

Figure 3. An example of the recommended action
resolution when using the ActionMapper in real-time
logging. The same task a s in Figure 1 and 2 is shown
There are of course situations when video recording
is not an option. E.g. when analysing contextual and
mobile use of handheld devices. In these cases, the
ActionMapper annotation complemented by the ideas
from the FIT system could be useful when capturing
user behaviour. However. when logging rapid changes
in a user's interaction with a dynamic interface, this
might not be enough. One solution when dealing with a
prototype and the possibility to build data logging into
the software exist, is to automatically register each user
action. Depending on how easy it is to add this software
feature, the logging resolution level can be increased. In
most cases, different interface areas and elements can be
defined in advance and it is relatively easy to build functions that log the user's actions when interacting with a
PDA prototype. If automatic data logging is employed it
is possible to register the states of the device instead of
the user actions. This will provide a plot with less

detailed information, while still providing the evaluator
with good indications on where to perform a more
detailed analysis.
Even in controlled experimental situations performed
in a usability lab, adding event recording functionality in
the prototype can be a good alternative. If using this
approach there is in fact no need for the evaluator to
follow the user's actions in detail since the logging is
done automatically. He/she can concentrate on other
parts of the interaction, such as observing the user's
reactions and facial expressions. Another advantage with
built-in data logging is that predefined tasks does not
need to be specified in detail, since everything is logged.
This allows a free usage according to the novice user's
own preferences.

4.2. Post-time visualisation and analysis
4.2.1. Describing a single user's interaction. A
visualisation technique that allows an efficient qualitative analysis as well as the derivation of usability metrics (e.g. effectiveness and efficiency) can be of great
help to the evaluator. When designing the
KeystrokeMapper V2.0, a discrete temporal aspect was
added to the annotation. One possible extension is to
include a continuous temporal aspect as well. This
would results in an exact visualisation of the completion
time efficiency, taking into account the total task time as
well as each individual action in a style similar to the
NEM technique [ 151. However, writing out the type of
keystroke action as well as the time duration of a keystroke might result in a cluttered graph. One solution has
already been mentioned: to group the keystroke actions
in three categories; another is to use colour coding. An
example of how a visualisation that includes a continuous temporal aspect might look like is shown in Figure
4. The same interaction sequence used in Figure I ,
Figure 2 and Figure 3 is displayed.

Figure 4. One possible ActionMapper visualisation with
a continuous temporal aspect [I
I].
Different types of
actions are grouped together a s in Figure 2.

151

including scrollbars, this limitation is less relevant.
However, we can also look at the scalability issue from
the evaluator’s cognitive point of view, the more actions
that are displayed in the plot, the harder it will be to
maintain an overview perspective. Still, it is important to
be able to perform a more detailed analysis. Therefore, a
solution where the evaluator can modify the action resolution level and define certain actions as members of a
larger subtask would be preferable.
Information visualisation techniques like the Bifocal
Display, as suggested by Leung and Apperley [7] can be
applied to the interaction path. A discrete version of
their continuous focus+context visualisation gives the
evaluator the opportunity to zoom in and out on particular groups of actions. This would produce a visualisation
similar to the Folding Editor presented by King and
Leung [SI,although unfolding details in two dimensions.
An example of how this can be applied to the
ActionMapper tool is displayed in Figure 5 (same task
as in Figure 1 through Figure 4). In this way, the
evaluator can fold in parts of the interaction path that do
not require further analysis. The critical sections can be
folded out and thoroughly analysed.

This plot describes many relevant parts of a user’s
interaction. Usability metrics such as time, number of
actions and effectiveness are explicitly visualised and by
e.g. clicking on an action, much additional information
can be presented to the evaluator. Deviation metrics can
be produced for the total interaction path as well as for
selected subsequences. The percentage of users still following the Optimum path after a number of keystrokes
is another example.
However, it is the qualitative measures that are significant for this tool. The relation between the user’s
interaction path and the Optimum path is particularly
investigated. The fact that each action has a meaning
that is specific for the particular context is also considered. This visualisation of the interaction path can provide the evaluator with an indication of the variations in
the user’s mental models and the deviations from the
designer’s conceptual model.
As mentioned before, these plots use an action logging approach and the state transitions are implicitly
visualised. The same annotation can also be used to
explicitly visualise the state transitions of the device and
implicitly describe the user’s actions. The bars would
then represent the time duration of a particular state.
Which one of these approaches that should be used
depends on the task and the situation. However, we feel
that when conducting usability evaluations of handheld
devices, the action recording style is the most suitable.
since it describes the user’s problems in more detail. The
state transition approach can, of course, be used as a
complement with a lower level of resolution, not at least
when visualising the final results without presenting too
many details.

4.2.3. Aggregating

4.2.2. Visualising different levels of resolution. The
maximum number of keystroke actions that can be visualised on a standard A4-paper is limited. If we consider
plotting on a rather large computer display and software
1 4 7 J O 11+12+3
l

ActionIAcUon No.
L1 call Wter Berg

P

Ltsten to his message
Call Nils Nilsson
Llslen Io k o message
Crealle a conference call

’
‘*‘O”

15 16

results

across several

E3 Call Peter Berg
Listen Io his message

a

*‘

Rn,-c.l

0

Rets mS kW N

.

ROffCtl(

...

~

Listen 10 his message

End all calls

U

create a conference call

End all calls
Put call on hold

II

Endonecall

Swap behvsen lm, calls
U Otheraction

Put call on hold
E l Endonecall

+-+

users.

Aggregating several plots into one is another important
scalability issue from the evaluator‘s point of view during the analysis. As the numbers of tasks increases, the
analysis becomes more difficult. Having the possibility
to analyse sequences of actions and produce the most
common user paths would be very valuable. When
looking at the plots created using the ActionMapper,
parallel coordinates seem like a good choice to enhance
the visualisation. Parallel coordinates are generally
regarded as the standard technique to visualise multidimensional data sets [13], but also to find relations
between the different variables. Fua et al. [2] have presented several solutions on how to visualise a large num-

Swap betreen two calls

~

El

Other actmn

Figure 5. An example (left) of how the resolution in a low-resolutionActionMapper plot can be changed
using a technique similar to (right) the Folding Editor presented by King and Leung [5].

152

steps in the usability evaluation process. The graphical
visualisation is built around the designer’s conceptual
model (Optimum path), which is represented as a
straight downwards sloping line towards the goal. The
user can either follow the ‘main road‘ or take a different
route to reach the destination. This is a very straightforward visualisation that uses well-known metaphors
and we believe it is easy to understand independently of
background.
Starting from the real-time plot and complementing it
with post-time details, analysis and presentation could
be performed using the very same plot outline. Depending on the level of analysis required, the resolution of
the plots and the automatic derivation of various usability metrics could be modified according to the evaluator’s needs. The suggested ActionMapper tool is a generic tool, since a new outline with different keystroke
actions and measures can easily be created and applied
to other types of interfaces and interaction styles.
By applying information visualisation techniques to
the visualisation itself, the analysis process becomes
more flexible and interactive. The opportunity for the
evaluator to modify parameters and immediately see the
results in the graphical representation can be very helpful when discovering patterns and understanding the
user interaction. The possible benefits of interactive
information visualisations are discussed in more depth
by Spence [ 141. Finally, the graphical representation
could be used to effectively present the results in a
report with an action resolution level that is appropriate
to the given situation.
The next step in the development of ActionMapper is
to implement specific parts as a computer program in
order to create a more automatic and flexible evaluation
process. The first task should be the design of a prototype event-recording tool and the evaluation of it in an
experiment. Although paper-based versions of the

ber of polylines, e.g. dimensional zooming, dynamic
masking and hierarchical clustering.
In Figure 6 (right), all novice user paths for a
specified task (the same as plotted in the previous
figures) have been aggregated into one single plot. Since
the values (i.e. actions:i on the Y-axis in the
KeystrokeMapper V2.0 plots are discrete, some interaction paths will overlap when certain interaction
pattems are identical across many users. In order to
avoid this, but still visualise the number of users that
followed each subsequenci:, a larger number of users
following a particular interaction path were represented
by thicker lines. This ixocess is similar to the
‘highlighting’ of parallel co’ordinatesby Fua et al. [2].
However, many overlapping interaction sequences
will still clutter the plot and it is difficult for the human
eye to extract the patterns. By using another technique,
which Fua et al. [2] refer to as ‘dynamic masking’, the
less traversed interaction paths can be filtered out from
the visualisation according I O the evaluator’s preferences
(Figure 6 (right)). By doing this, the most frequently
used interaction paths become clearly visible. The use of
. colour coding can hrther improve the visibility and
allow a richer presentation of the results. One possible
extension to the common interaction path analysis is the
aggregation of results from different tasks. Perhaps this
will reveal further critical areas that are common for the
particular interface, but could not be seen for an
individual task only.

5. Discussion
We have proposed how a visualisation of the user interaction path could be implemented as a computer-based
tool and provide the usability evaluator with many benefits. Particularly designed fm the task of analysing user’s
interaction with a handheld device it can be used in all

Figure 6. Aggregating several user paths into one plot and visualising them using a technique similar to
‘highlighting’(left) and ‘dynamic masking’ (right).

153

Nordi'CHI 2000 Conference in Stockholm. Full paper

ActionMapper technique has been employed in two
usability experiments and the fact that we are quite sure
of how we want it designed, a comparison to other methods should be done as well. The future must also include
implementing data logging hnctionality in a prototype
interface for handheld devices and the investigation of
the efficiency of evaluations in a mobile context. In
these cases, logging states instead of user actions might
be easier and more efficient.
If we look further ahead, connecting video clips to
this visualisation method would be a natural continuation. This does not mean an advanced integration into
the software, but simply relating certain time-stamps in
the plot to the actual video-clip. This would complete
the ActionMapper visualisation by allowing both the
evaluators and the audience to have a look at the live
representation o f the user's interaction path.
Broadening the concept should also be investigated.
The current discussion is rather focused on effectiveness
and efficiency. The usability metrics time and number of
actions are measured and compared to the Optimum
path. However, there are situations when these metrics
are less important. One example is the novice user that
browses through the interface without a clearly defined
goal. Another is the user who finds an application interesting and employs it for a long time. Therefore, alternative approaches must be considered and altemative
usability metrics must be though about in future versions
of the ActionMapper.

available at CD-ROM only.
[4] Held, J . (1999). Fitting the mental model - A new
technique for computerized event recording. In: D. Harris:
Engineering Psychology and Cognitive Ergonomics. ISBN 1840-14545-5 London: Ashgate 1999, p. 293-300.
[5] King, R.J. and Leung, Y.K. (1994). Designing a user
interface for folding editors to support collaborative work.
Peoples & Computers IX, p. 369-381. Cambridge: Cambridge
University Press.
[6] Leung, Y.K., Spence, R. and Apperley, M.D. (1995).
Applying bifocal displays to topological maps. International
Journal of Human-Computer Interaction, 7, p. 79-98.
[7] Leung, Y.K., and Apperley, M.D. (1999), A Review and
Taxonomy of Distortion-Oriented Presentation Techniques. In
S. Card, J. Mackinlay and B. Shneiderman (Eds). Readings in
Information Visualisation: Using Vision to Think, Morgan
Kauhann.
[8] Mohageg, M. (1992). The influence of hypertext linking
structures on the efficiency of information retrieval. Human
Factors, 34, 3 , p. 351-367
[9] Noldus Information Technology (2001). The Observer:
Professional system for collection, analysis and management
of
observational
data.
at:
Available
http://www.noldus.com/products/index.html
(200 1-01-25).

6. Acknowledgements

[IO] Norman, D.A. (1983). Some observations on mental
models. In D. Gentner and A.L. Stevens (Eds.). Mental
Models. Hillsdale, NJ:Erlbaum

We would like to thank Mr. Thomas Ericsson at
Ericsson Research for using the KeystrokeMapper V2.0
tool in a usability evaluation and for giving many valuable comments on the method.

[l 11 Nyberg, M. (2000). Benchmarking Information and Call
Handling on PoiverCom. Master Thesis, Department of
Computer science, Umea University, Sweden.
[I21 Nyberg, M., Bjork, S., Goldstein, M. and Redstrom, J.
(2001). Handheld Applications Design: Merging Information
Appliances Without Affecting Usability. Full paper to be

7. References
[ I ] Ericsson, T. (2001). WAP (Wondering Around Planless)?
Usability Evaluation of hvo WAP browsers. Master Thesis

presented at Interact '2001.

draft, Department of Computer Science, University of
Uppsala, Sweden.

[I31 Siirtola, H . (2000). Direct Manipulation of parallel
Coordinates. In Proceedings of CHI'2000. Inleracrive Posters.
p. 119-120, ACM Press.

[2] Fua, Y-H., Ward, M.O. and Rundensteiner, E.A. (1999).
Hierarchical Parallel Coordinates for Exploration of Large
Datasets, in Proceedings of IEEE Conference on Visualisation
'99, IEEE Comp. Soc., San Fransisco, CA, 1999.

[ 141 Spence, R. (200 I). Information Visualization. AddisonWesley: ACM Press

[15] Urukohara, H., Tanaka, K., Furuta, K. and Honda, M.
(2000) NEM: "Novice Expert ratio Method' A Usability
Evaluation Method to Generate a New Performance Measure.
In Proceedings of CH1'2000, Interactrve Posters, p. 185-1 86.

[3] Goldstein, M., Werdenhoff, J . and Backstrom, T. (2000).
What Does the User do: A Tool for Visualizing the Novice
User's Interaction Relative to Optimum path. Presented at

154

