2011 15th International Conference on Information Visualisation

Distributed Group Collaboration in Interactive Applications
Serge Gebhardt1, Christine Meixner1, Remo Aslak Burkhard2
ETH Zurich, Chair for Information Architecture, Zurich, Switzerland
2
vasp datatecture GmbH, Zurich, Switzerland
gebhardt@arch.ethz.ch, meixner@arch.ethz.ch, Remo.Burkhard@vasp.ch
1

Abstract
This paper describes approaches for near-realtime
collaboration over distance in interactive applications. It
presents approaches to tackling most of the encountered
challenges by using our interactive risk management tool
as an illustrative example. In particular it focuses on
browser-based bi-directional client-server network
communication, concurrent object manipulations, and
data synchronization.
Keywords: Collaborative computing, web-based
interaction, synchronous/concurrent interaction, risk
management,
multi-touch
collaboration,
evaluation/methodology.
Figure 1. ETH Value Lab with five multi-touch displays
(Source: Chair for Information Architecture,
ETH Zurich).

1. Introduction
This paper describes approaches for near-realtime
collaboration over distance in interactive applications.
The innovation focus lays on technical challenges, but
we will use our risk management tool as an illustrative
example to expose the difficulties. For this we first
introduce the environment.
The ETH Value Lab (Figure 1) is an attractive space
with daylight and high ceilings. It is equipped with three
large wall-mounted multi-touch screens, two large
table-mounted multi-touch screens, three video
projectors and a video conferencing system. The concept
is described in [7].
We found out that the ETH Value Lab is an ideal
environment for collaborative workshops [6]. We then
developed a novel software-based approach for a wide
range of management tasks such as risk, strategy or
project management, which leverage the capabilities of
the ETH Value Lab in the context of collaborative
workshops.
In order to bring collaboration a step further, we
envisioned approaches to overcome social and technical
challenges, and developed a tool that enables
collaboration over distance.
Implementing
this
near-realtime
distributed
collaboration posed some challenges, such as
browser-based bi-directional client-server network
1550-6037/11 $26.00 © 2011 IEEE
DOI 10.1109/IV.2011.96

communication, concurrent object manipulations at
different locations, and data synchronization.
In this article we describe approaches to tackling
most of these challenges, using our risk management tool
as an illustrative example.

2. Risk Management Tool
To illustrate our technical research contribution we
first introduce the application context, which is risk
management.
The responsibility of enterprise risk management
lies in the hands of the board management. They are
responsible for identifying, evaluating, and assessing the
risks, as well as deriving actions to reduce these risks.
We identified three main challenges in current
quantitative risk management approaches:
Getting the big picture: Risk management systems
become increasingly detailed and complex. Monthly risk
reports easily exceed 100 pages and decision-makers
quickly lose the overview. How can a software tool
provide such an overview?

355

Risk assessment with multiple stakeholders: More
and more stakeholders become involved in the risk
assessment process, such as the board of management,
the executive board, the auditing firm and team leaders.
They all have diverging backgrounds, risk perceptions
and professional experiences. How can the quality and
involvement in a risk assessment meeting be increased,
while assisting decision-making? Research has shown
that visualization techniques are very useful for group
coordination and group decision-making [5,9,10,11,12].

which broadcasts the modification to all registered
clients. Changes are thus synchronously sent to all
remote parties at the same time and the tool is ready for
distributed collaboration.

3.1. Client Application Architecture
Our tool is written in Microsoft Silverlight 4 using
C#, making it instantly runnable as embedded object in
any widespread browser that supports the Silverlight
plug-in, or as native application on Windows, Mac OS X
and Linux. The tool itself consists of a custom-developed
component-based toolkit, on top of which we built the
actual risk module.
The toolkit comprises generic and reusable
components, such as support for touch inputs and
gestures, drag&drop handling, generation of PDF and
Excel reports, shared graphical elements and helper
utilities.
The risk module is built on top of the toolkit,
thereby inheriting all its functionality, and implements
the logic specific to risk management.
This decoupling allows for reusability and
extensibility, while clearly separating each part’s
concerns. Based on this architecture it is possible to
develop additional modules for distributed collaboration
in other specific areas.

Creating risk evaluation reports: To comply with
legal regulations companies must provide a risk
evaluation, e.g. as part of their annual report. However,
there are no established best practices on how to create
such risk evaluation reports.
We devised an ideal approach to overcome these
three challenges [2] and developed the interactive risk
management tool (Figure 2).
We introduced the application context of our
research contribution, which is a distributed collaborative
system. In the next section we will describe the software
aspects in more details.

3. Approach to Interaction over distance
The risk management tool is built with ease of use in
mind: users simply connect to the website and instantly
run it in the browser. Alternatively, they can choose to
install the software as a native application in the
operating system. The installation process is as easy as a
right-click and choosing “Install”.
Two modes of operation are available: an online
mode and an offline one.
When used in offline mode the application behaves
autonomously and is completely separate from the
server. This mode obviously offers no support for
distributed collaboration.
When used in online mode the application registers
with the server by sending the user-provided username
and password. Upon successful authentication it loads
the initial data from the server. Every subsequent data
modification is sent from the editing client to the server,

3.2. Server Architecture
The server part of our tool consists of a web service
written in C# using the Windows Communication
Foundation (WCF). Behind the service-oriented interface
runs the server logic that is responsible for user
authentication and data synchronization across all the
connected clients. All data is persisted to a backend SQL
database.
After an initial deployment on our own dedicated
server we moved to the hosted cloud infrastructure on
Microsoft Windows Azure.
The distributed nature of the cloud infrastructure is a
good fit with our tool’s context of distributed
collaboration. Furthermore the cloud’s absence of
maintenance overhead and its seamless scalability
contribute to the overall stability of the tool.

4. Challenges with Distributed Collaboration
Collaboration over distance inherently poses new
challenges not found in standalone applications. This
section focuses on two of them: (1) browser-based
client-server network communication; and (2) concurrent
object manipulations.

4.1. Browser-Based Client-Server Network
Communication
For security reasons applications running in a
web-browser are generally not allowed to open generic
network sockets.

Figure 2. Risk management tool
(Source: Chair for Information Architecture,
ETH Zurich).
356

Browser applications are therefore bound to
exclusively use the standard HTTP protocol. This has
three added benefits: (1) easily passes through corporate
firewalls, which usually block generic socket
connections; (2) solves authentication, which is already
defined for HTTP; and (3) solves privacy issues because
HTTP can be encrypted with the industry-standard SSL
encryption protocol (HTTPS protocol).
But by specification the HTTP protocol requires the
web-client to open a connection to the server and request
a given document. The client can also pass arguments to
the query. The server replies with the requested
document. In our context of distributed collaboration this
implies that only the client application can open a
connection to the server, never the other way around.
How can data modifications then be pushed from the
server to the registered clients?
Furthermore the HTTP protocol was not designed
for messages going indefinitely back and forth between
clients and server, but rather for a single
request-response dialog. In our context of distributed
collaboration this poses a challenge to keep connections
open and active between the server and all its registered
clients.
To solve these issues we implemented the HTTP
Duplex Channel technique. It has partly been integrated
into Microsoft Silverlight 4. It enables the browser
application to overload the HTTP connection to the
server with the illusion of a bi-directional channel,
likewise to a generic socket.
The client connects to the server without requesting
a document, but leaving the connection open as long as
possible. When the server has data modifications to push
to all its registered clients, it first queues the messages
locally and sends them to the clients as soon as they
become available. The client re-opens the channel to the
server upon disconnection. This provides the illusion of a
bi-directional channel supporting near-realtime message
pushing between a HTTP server and multiple clients.
This technique is quite error-prone when
implemented incorrectly. It then results in seemingly
random behavior and debugging network channels is
always cumbersome.

In case a client requests the token for an object that
is already associated with a token, the server declines the
requests with a “has token” message. The client must
then display an error message to the user and retry the
token request at a later time.
The client, in which the workshop manager is
logged in, benefits from higher privileges than all the
other clients. He has the power to revoke other clients’
tokens and can reclaim them for himself at any time.
This serves two purposes: (1) he can revoke writing
privileges from misbehaving clients; and (2) he can
return locked objects to all other clients. The latter
reason need not be with bad intentions; it could result
from network problems, or a client forgetting to confirm
a dialog box.
This token-based approach does not take fairness
into account. Hence resource starvation is possible if a
client always requests all tokens on all objects. The tools
are used in the context of distributed collaboration, as
opposed to distributed sabotage; hence we do not
consider this a drawback. The workshop manager always
has the power to exclude a misbehaving client and thus
restore fair resource allocation.

5. Further enhancements
The presented material is work-in-progress and we
are currently expanding it further, especially regarding
support for mobile devices, synchronization of the user
interface, and three-way data synchronization.

5.1. Mobile Devices
We plan to port our planning tools to a wider range
of mobile devices, beyond the laptop. Some problems
remain to be solved, especially concerning the execution
environment: our frameworks and applications are
developed in Microsoft Silverlight, which is not (yet)
available for most mobile devices. Furthermore we must
develop an interaction logic specific to small screens.

5.2. User Interface Synchronization
We discovered that workshop participants connected
from a remote location easily lose track of data
modifications done by other participants. The best
approach to tackle this challenge is to give each
participant a distinct color and highlight his
modifications with the color. Ideally the user interface is
synchronized across all participants.
Depending of the infrastructure, some participants
may choose to open different views of the application
simultaneously on different screens. How can then the
user interface be synchronized? Furthermore we may
need to introduce a token-based locking mechanism as
detailed above.

4.2. Concurrent Object Manipulations
In the context of collaboration over distance
attention must be given to concurrent operations. Two
users at different locations may not manipulate the same
object at the same time.
Our approach introduces a token per object. When a
client wants to modify an object, it requests the token for
that object. If no token is assigned to it, the server
provides a token to the client and registers the
association. When the client has finished modifying the
object and transmitted the changes back to the server, it
requests the release of the token. The server then
unregisters the token from the object, hence deleting the
association between client and object. The object is now
free for other clients to request its token.

357

5.3. Three-Way Data Synchronization

[8]

Currently collaboration is only possible either fully
online or fully offline; a mixed mode is not supported.
We plan to overcome this limitation and implement
three-way data synchronization.
Then a user could participate in the workshop or
download the workshop data to his laptop. While on the
go, s/he could work on the data, e.g. re-assess risks or
update progress. Once back online, the changes would be
matched and differentially updated on the server.
Furthermore multiple users could work offline on the
same data in parallel and all changes would be
synchronized. How to handle conflicting changes is still
an unsolved issue.

[9]

[10]

[11]

[12]

[13]

Conclusions
We presented approaches for near-realtime
collaboration over distance in interactive applications.
We described approaches to tackling most of the
encountered challenges by using our interactive risk
management tool as an illustrative example.
These approaches are stable and being used in
productive software. We are currently working on the
discussed enhancements to further improve collaboration
over distance.

Acknowledgements
We would like to thank KTI/CTI1 for supporting this
research project.

References
[1]
[2]

[3]

[4]
[5]

[6]

[7]

1

Åhlberg, M.: “Varieties of Concept Mapping”. In Proc.
1st Intl. Conference on Concept Mapping 2004.
Burkhard, R. and Merz, T.: “A Visually Supported
Interactive Risk Assessment Approach for Group
Meetings”. In Proc. I-KNOW 2009.
Cart, SK., Mackinlay, JD., Shneiderman, B.: “Readings
in Information Visualization: Using Vision to think”.
Morgan Kaufmann Publishers Inc., 1999.
Chen, C.: “Mapping Scientific Frontiers: The Quest for
Knowledge Visualization”. Springer London, 2003.
Eppler, M. and Burkhard, R.: “Visual Representations in
Knowledge Management”. In Journal of Knowledge
Management, 11, 4 (2007), 112-122.
Halatsch, J. and Kunze, A.: “Value Lab: Collaboration in
Space”. In Proc. 11th International Conference
Information Visualization 2007 (IV'07), IEEE,
Switzerland, Zurich, 376 - 381.
Halatsch, J., Kunze, A., Burkhard, R. and Schmitt, G.:
“ETH Value Lab - A Framework for Managing LargeScale Urban Projects”. In 7th China Urban Housing
Conference, Faculty of Architecture and Urban Planning,
Chongqing University, Chongqing (2008).

KTI/CTI: http://www.kti.admin.ch/index.html?lang=en
358

Horn, RE.: “Visual Language: Global Communication
for the 21st Century”. MacroVU Press, 1998.
Jacobi, M., Halatsch J., Kunze A., Schmitt G.,
Turkienicz, B.: “A grammar-based system for the
participatory design of urban structures”. SIGraDi, 2009.
Kaplan, RS. and Norton, DP.: “Having Trouble with
Your Strategy? Then Map It”. In Harvard Business
Review, 2000.
Kaplan, RS. and Norton, DP.: “Strategy Maps:
Converting Intangible Assets into Tangible Outcomes”.
In Harvard Business School Press, 2004.
Tergan, SO., Keller, T.: “Visualizing Knowledge and
Information. An Introduction”. In Knowledge and
Information Visualization: Searching for Synergies.
LNCS 3426, Tergan SO. and Keller T., Springer-Verlag
Heidelberg, 2005.
Vande Moere, A., Mieusset, KH. and Gross, M.:
“Visualizing Abstract Information using Motion
Properties of Data-Driven Particles”. In Conference on
Visualization and Data Analysis 2004.

