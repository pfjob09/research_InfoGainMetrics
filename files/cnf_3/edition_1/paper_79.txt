2011 15th International Conference on Information Visualisation

Generating a simple polygonalizations
V. Muravitskiy, V. Tereshchenko
National Taras Shevchenko University of Kiev
vmyrik@gmail.com, vtereshch@gmail.com
Abstract

gon using the notion of characteristic form. The characteristic form is varied from a convex hull to the uniquely defined form of a minimum area. It experimentally confirms
that the algorithm, using an appropriate parameterizations,
can precisely construct the characteristic forms for different sets of points. Another algorithm was proposed in [14].
The algorithm starts with constructing a convex hull, and
then uses the procedure of ”divide-and-conquer, successively inserting additional edges and smoothing zigzags.
A complexity of the algorithm is limited by complexity of
constructing the initial convex hull - O(nlogn).
Moreover, we can distinguish two approaches to the
generation of simple polygons for a given set of points.
The first suggests that we need to find a single polygon
without consideration its properties [1]. The second approach provides algorithms that generate ”random” polygons for this set. This problem is more complicated, but
for its solution were proposed efficient algorithms [1, 15].
Attempts to solve the problem of finding a polygon of minimal area also have been undertaken, and have achieved
certain results for its solution [16].
The novelty and idea: In the paper we propose a polynomial approximation algorithm for the minimum area polygon.
Paper’s aim: Explore algorithms for generation of simple polygons given set of vertices, and develop an algorithm for determining the minimum possible area polygon.

We consider the methods of construction simple polygons for a set S of n points and applying them for searching the minimal area polygon. In this paper we propose the
approximate algorithm, which generates the simple polygonalizations of a fixed point set and finds the minimum area
polygon, in O(n3 ) time and using O(n2 ) memory.
Keywords—simple polygon, approximate algorithm, minimal area polygon, polygonalizations.

1 Introduction
Problem statement. The problem of generating random
geometrical figures, except existing theoretical interest, is
motivated by the need to generate test data to verify the
correctness and time complexity of algorithms of computational geometry [1]. There is a wide range of possible
applications for the algorithms, associated with the construction of simple polygons of minimum area, in GIS systems, [2, 3]. Another direction of application in this area is
geo-sensor networks [4, 5].
One of the problems is the impossibility of calculating
the number of simple polygons in a given points set, in
polynomial time. An important problem is finding a simple
polygon that have certain properties. In particular, search
of the minimum area polygon among all possible polygons
which can be generated on a given set of points. The problem of finding a simple polygon of minimal area has got
certain weight in pattern recognition problems. Therefore
the search for the optimal algorithm that can generate a
simple polygon of minimal area is till now actual.
Analysis of recent research. For today, there are several
approaches to the solution of the problem, that based on
using Delaunay triangulation or Voronoi diagram. In [6, 7]
the authors introduce ”α-shape” -notion for the generalization of a convex hull that allows to develop methods of constructing the simple polygons with using Voronoi diagram.
In [8-10], ”A-shape” used to ”onion-peeling”- method, by
removing the boundary edges of triangulation [11]. The
papers [12,13] propose algorithms using Delaunay Triangulation. The approach allows us to develop a simple, flexible and efficient algorithm for constructing a simple poly1550-6037/11 $26.00 © 2011 IEEE
DOI 10.1109/IV.2011.88

2 Problem and algorithms
Problem. Let S – given set of n points on the plane. 1.
It is necessary to specify the order of connection by edges
of points from set S so to generate simple polygons. 2. Find
among the generated polygons the minimum area polygon.
In solving the given problem, we can distinguish algorithms that build a simple polygon (unique requests), algorithms that generate all possible set of simple polygons
(mass requests) and algorithms for finding the minimum
area polygon.

2.1 Constructing a simple polygon for a given set
of points (unique requests)
In this case, we can suggest the following algorithms.
502

n! permutations corresponding to simple polygons. Permute & Reject can generate all possible polygons.
So if we need to generate a simple polygon for a given
set of points, we can do this by using the above algorithms.

Algorithm 1. Choose P0 ∈ S as anchor point. It is the
start of bypass. Sort all other points { S\P0 } with polar
angle relative P0 . As a result, we get one of the possible polygons for a given set S. Sorting can be done in
O(nlogn) time.
Algorithm 2. Constructing convex hull for S. If all
points of S belong to a contour, then problem solved. If
not, look for a point P1 , which is at minimum distance from
the contour – even this minimum distance to the side pieces
(Pk−1 , Pk ). If several such points, we take any of them.
Insert point P1 in the contour that is instead of (Pk−1 , Pk )
will be (Pk−1 , P1 , Pk ). For all the points that remain, we
repeat the above procedure until the last point will be inserted in the contour.
Algorithm 3. Building convex hull for S. If all points
of S belong to a contour, then problem solved. Otherwise,
denote all the internal point S1 of a convex hull. Building
for a new set S1 convex hull V1 (contours V and V1 do not
intersect). Sticking together two contours. Choose a pair
of consecutive vertices u, v and u1 , v1 on contours V respectively, so that in the quadrangle with vertices u, v, v1 ,
u1 not lay any more points from contours. V and V1 . Severing contours V and V1 (removing edges (u, v) and (u1 ,
v1 )) and connecting them (adding edges (u, u1 ) and (v,
v1 )).
If V1 does not contains the points, the problem is solved.
Otherwise, we conduct the same operations with internal
points: we find the convex hull and a pair of consecutive
points on the contours; we couple and uncouple contours
until we get a convex hull which includes 0, 1 or 2 points. If
count of points equal 0, then problem solved. Otherwise,
we add points to the contour so that the figure remained
polygon (can be conducted joining, as in previous case).

2.2

2.3 Generating the minimum area polygon
The problem of finding the minimum polygon area
known as MAP - Minimum Area Polygon. It is NPcomplete, which was proved in [16]. That is, for a minimum polygon area, we must review all the possible polygons for a given set S of npoints.
Consider now the same problem with the position of
the minimum polygon approximation. Since MAP - NPcomplete problem, it is unlikely we can find an exact polynomial algorithm for finding the minimum area polygon,
so it’s interesting to find a good approximation method.
The main reason lies in the complexity of approximation
of complex geometric relationship between the boundary
simple polygon and its area. So can be trying some heuristics to try and get a minimum polygon area. One of effective approaches to solve a problem based on the idea
of greedy algorithm ”Greedy - build” [16]. We start with
the smallest not degenerate triangle in the set S. While the
vertex is not included in the polygon, we choose the smallest not degenerate triangle that formed the current polygon
edge and vertex outside polygons that completely “sees”
edge. We adding to the triangle polygon and back to previous step.
We propose the following algorithm for finding the minimum area simple polygon.

3 The proposed (greedy) approximation algorithm) for minimum area polygon
It is invite the following approximation algorithm:
1.Jarvis method for building the convex hull of the set
S (Figure 1) (this method is best approximations, because
if the basic number of points not lying on the convex hull,
we’ll get it in time O(hn), where h – points that lie on the
convex hull).
2. While the vertex is not included in the polygon:
choose among the points that are inside this polygon point
P , which will form one of the edges (u, v) the maximum
triangle area, and one that does not contain other points,
and also does not intersects the edges of this polygon (the
edge ”seen” from the point).
3. Let (u, v)- edge, P - points that formed a triangle of
maximum area that satisfied the specified conditions. Severing edge (u, v) and form two new (u, P ) and (P, v). Is
returned to p.2
For the proposed greedy algorithm we obtain the following estimates of complexity. Building convex hull
O(hn), in the worst case O(n2 ), but this case is both the
best, because once we get the solution of the original problem. We need to insert n points to the polygon. To insert

Generating the simple polygons for a given
set of points (mass requests)

In this case we can use the following algorithm [15].
Steady Growth . At initialization, Steady Growth randomly selects 3 points s1 , s2 , s3 ∈ S such, that no other
points no lie outside CH({s1 , s2 , s3 }). Let S1 = S\ {s1 ,
s2 , s3 }. During the i-iterations (1 ≤ i ≤ n − 3) we
perform the following operations:
1. We choose randomly s1 ∈ Si , but to no points
Si+1 = Si \ {si } that lie outside CH(Pi−1 ∪ {si }).
2. Finding an edge (vk , vk−1 ) in Pi that completely visible of si and replace it by edges (vk , si ) and (si , vk+1 )(si
, vk+1 ).
Permute & Reject. This algorithm works as follows:
generates one possible permutations of the set S and involves checking whether is this permutation a simple polygon. If yes - we got the result, otherwise generate another permutation. This algorithm is inefficient when all
(or most) points lie on the convex hull, because only 2n of

503

Figure 1: Convex hull and point selection and inserting point into the contour

each of them we take over all edges of this polygon, and for
each edge we take all remaining points. For each point in
question we check whether the triangle contains no other
points, and whether it crosses no the edges of this polygon. This gives us a total complexity of O(N 4 ), where N –
number of points that lie inside the convex hull, N = n−h.
Using memory - O(n).
Optimization of the proposed algorithm. It is possible conduct preliminary processing of the set S, which will
improve time characteristics of the complexity of this algorithm, but slightly increased while costs memory. In [18]
algorithm, which provides preparation for a set S O(n2 ),
using the O(n2 ), memory that will check whether a triangle contains a set of other points in constant time. The total
complexity of this greedy algorithm will be O(n3 ). The algorithm builds a matrix stripe [pi , pj ], elements of which the number of points that are in the vertical segment below
pi , p j .

the approximation of the polygon with constant accuracy it
is NP-complete problem. To prove we’ll use the principle
of reduction problems [19].
As a prototype we will use Minimum Area Triangulation( MAT ) problem, for which we have a proof of NPcompletness.
Minimum Area Triangulation problem ( MAT ). On
a given set P of 3n points on a plane find a set of disjoint
triangles Ti , i = 1..n, such that the total area i AR(Ti )
is smallest possible.
Theorem. Minimum Area Triangulation ( MAT ) problem is reducible to the problem of construction simple polygons in a linear time.
Proof. The set S of n points in the plane is an input data
for the approximation problem. The same set is an input
data for MAT. So input data of approximation problem can
be transformed into input data of MAT in the time of O(1).
We have a proof of NP-completeness of MAT [16].
Output data of approximation problem can be transformed into output data of MAT in linear time. We can
use some of triangulation algorithms for it. Hence we have
that MAT problem is reducible to the approximation problem. So the approximation problem has the same estimation of complexity as MAT and the polynomial algorithm
for solving this problem does not exists.

Algorithm.
1) Fill all elements stripe [*,*] zeros.
2) Sort out all points on the x-coordinate of left to right.
This gives the sequence p1 ... pn
3) For each point, sort all the points that lie left of the
clockwise around. This will give consistency
4) For pi := p2 to pn :
For j:= 2 to -1:
1) if pij left lying on pij−1
Stripe[pij , pi ] = stripe[pij−1 , pi ]+stripe[pij , pij−1 ] + 1
2) if pij right lying on pij−1
Stripe[pij , pi ] = stripe[pij−1 , pi ]-stripe[pij , pij−1 ]
During the study the approximation algorithms , it was
found that impossible to find a method that would approximates polygon minimum area for a given set of points with
constant accuracy. Therefore there is a question on existence of such method in general. It is possible prove that

4 Implementation
To test the efficiency of the proposed method we made
implementation on Java. To obtain reliable data on the algorithm was necessary to compare results with other algorithms. For comparison was elected algorithm of exhaustive search which is based on the above Permute & Reject: all possible permutations are generated and checked
for simplicity. Although the problem is NP-complete for
sets of small capacity it gives the result. Moreover, this
result is best possible (Figure 2).

504

Figure 2: The result of the program.
Figure 2 shows that for the given test set with 10 points,
minimum polygon area, which constructed by algorithm
of exhaustive search and which generated by greedy algorithm, have coincided.

[3] A. Galton and M. Duckham, ”What is the region occupied by a set of points?” in GIScience. Lecture
Notes in Computer Science, 4197:81-98, Springer,
2006.

5

[4] A. Galton, ”Dynamic collectives and their collective
dynamics,” in COSIT. Lecture Notes in Computer
Science, 3693:300-315,Springer, 2005.

Conclusions

The paper had investigated the problem of generation of
simple polygons for a given set S of n points. It was revealed that this problem can have different interpretations,
namely one-time generating of a simple polygon or generating some set of simple polygons - random generation.
There are efficient algorithms for solving the first problem.
They give the result in a polynomial time. There are algorithms for the second case too, but their efficiency is lower.
Examples of such algorithms were presented.
Concerning the problem of finding the minimum area
polygon, there were some difficulties. Initially it was found
that the problem of counting the number of simple polygons for a given set of points is NP-complete, so algorithm
of simple exhaustive search is ineffective even if the set
S has a small capacity. So researches were switched to
approximation methods. It was found that the proposed
greedy algorithm with a time complexity O(n4 ) and memory usage O(n) can be improved, and we will get the time
complexity O(n3 ) and memory usage O(n2 ). But in practice the methods gave results that differed from the optimum. Further investigation showed that constant-factor
approximation is impossible and it was proved.

[5] M. F. Worboys and M. Duckham. Monitoring qualitative spatiotemporal change for geosensor networks.International Journal of Geographic Information Science, 20 (10):1087-1108, 2006.
[6] H. Edelsbrunner, D. G. Kirkpatrick, and R. Seidel.
On the shape of a set of points in the plane. IEEE
Transactions on Information Theory, IT-29(4):551558, 1983.
[7] M. Melkemi and M. Djebali.Computing the shape of
a planar points set. jur. Pattern Recognition, 33:14231436, 2000.
[8] M. J. Fadili, M. Melkemi, and A. ElMoataz. Nonconvex onion-peeling using a shape hull algorithm.
jur.Pattern Recognition Letters, 25:1577-1585, 2004.
[9] A. R. Chaudhuri, B. B. Chaudhuri, and S. K. Parui. A
novel approach to computation of the shape of a dot
pattern and extraction of its perceptual border. Computer Vision and Image Understanding, 68 (3):257275, 1997.

References
[1] C. Zhu, G. Sundaramb, J. Snoeyink and Joseph S.
B. Mitchell. Generating random polygons with given
vertices. Jur.Computational Geometry: Theory and
Applications,6 (5): 277-290, Elsevier, 1996.

[10] N. Amenta,S. Choi and R. K. Kolluri. The power
crust, unions of balls, and the medial axis transform.
jur.Computational Geometry: Theory and Applications, 19(3):127-153, 2001.

[2] H. J. Miller and J. Han. Geographic Data Mining and
Knowledge Discovery. CRC Press, 2001.

505

[15] Thomas Auer and Martin Held.Heuristics for the generation of random polygons. In CCCG’96 Proceedings of the 8th Canadian Conference on Compu.
Geom. , pages 38-43, 1996.

[11] B. Chazelle. On the convex layers of a planar set.
IEEE Transactions on Information Theory, 31:509517, 1985.
[12] H. Alani, C. B. Jones, and D. Tudhope.Voronoibased region approximation for geographical information retrieval with gazetteers. International Journal of Geographical Information Science, 15(4):287306, 2001.

[16] S.P. Fekete, W.R. Pulleyblank. Area Optimization of
Simple Polygons. In SoCG’93 Proceedings of the 9th
Annual ACM Symposium on Computational Geometry, pp. 173-182, 1993.
[17] Goodman J.E., O’Rourke J.Handbook of Discrete
and Computational Geometry, 2ed, CDC,Press, New
York, 2004

[13] A. Arampatzis, M. van Kreveld, I. Reinbacher, C.
B. Jones, S. Vaid, P. Clough, H. Joho, and M.
Sanderson.Web-based delineation of imprecise regions. Computers, Environment, and Urban Systems,
30 (4):436-459, 2006.

[18] D. Eppstein, M. Overmars, G. Rote, and G. Woeginger. Finding minimum area k-gons. Jur.Disc. Comp.
Geom., 7(1):45-58, 1992.

[14] G. Garai and B. B. Chaudhuri.A split and merge procedure for polygonal border detection of dot pattern.
Image and Vision Computing, 17:75-82, 1999.

[19] F. Preparata and M.I. Shamos. Computational Geometry: An introduction. Springer-Verlag, Berlin, 1985.

506

