2011 15th International Conference on Information Visualisation

PieVis: Interactive Graph Visualization Using a Rings-Based Tree Drawing
Algorithm for Children and Crust Display for Parents
Adrian Rusu1 , Andrew Crowell2 , Bryan Petzinger1 , Andrew Fabian1
1
Department of Computer Science, Rowan University, U.S.A.
2
Federal Aviation Administration, U.S.A.
rusu@rowan.edu, andrew.crowell@faa.gov, {petzin02,fabian78}@students.rowan.edu
two domains, using a tree drawing algorithm and graph
drawing techniques to create an interactive focus+context
graph visualization system. Several different means of interaction are provided, in order to allow the user to gain
several different levels of detail about interesting areas of
the graph. We ﬁrst transform the graph into a tree, and
then use a rings-based tree drawing algorithm that represents connections via enclosing smaller rings inside larger
rings. Because of this unique way of showing connections
between nodes, it allows for the removal of directed edges
within the visualization. As a result, edge crossings and
angular resolution issues are eliminated. We display parent nodes along the edge of the main ring, similar to the
crust of a pie.
The interaction between tree drawing algorithms and
graph visualization techniques has been explored in previous work as follows. A graph visualization created by
adding a set of curved edges to a Treemap drawing had
been presented in [3]. A ﬁsheye view and several other
interactive techniques have been applied in [8], in order
to remove clutter from a small section of a large graph
drawing. Previous work which is the closest to our contribution has been presented in [5]. The author introduces
a force-directed graph visualization that provides interactive means to display a section of a graph as a tree which
can then be incrementally explored. A smooth animation
between transitions is used to help the user remain oriented within the visualization. Several concepts used by
these previous systems are applied in our visualization,
including incremental exploration, using a tree drawing algorithm for node placement, and applying user interaction
to gain more information about an area of the graph.

Abstract
The quality of a graph drawing algorithm is often measured by its edge crossings, angular resolution, aspect
ratio, and node labeling. Algorithms for drawing trees
in general are segregated from algorithms for drawing
graphs. In this paper we present a graph visualization system that uses a novel interconnection between a tree drawing algorithm and graph drawing techniques. First, the
graph is transformed into a tree and nodes that have multiple parent connections within the graph are duplicated
within the tree. While some of the connection information is lost during this transformation, the multiple connections can be regained by interactively displaying the details
based on the degree of interest. We use an edgeless ringsbased visualization which allows edge crossings and angular resolution issues to be eliminated and has a desirable
aspect ratio of 1. Finally, a circular labeling method is
used that provides user-friendly labels that do not overlap
and clearly show node afﬁliation.

1 Introduction
Graph drawing algorithms aim at creating aesthetically
pleasing graphs. Among the most important graph visualization aesthetics are minimizing edge crossings, increasing the angular resolution, and providing a desirable aspect
ratio close to 1 [1]. Adding text to a graph visualization
may encounter challenges, so various algorithms have been
developed attempting to ﬁnd the most efﬁcient way to label
a graph (see for example [2]). Labels typically should be
displayed in a way that allows as much important information as possible to ﬁt inside the label without having labels
overlap each other. It is also important to ensure the user
can easily distinguish which label is afﬁliated with which
node. In this paper we present a novel graph drawing algorithm that addresses these four issues using an interactive
visualization and a tree drawing algorithm.
Often, tree drawing and graph drawing, though similar areas of research, are treated as two separate domains.
Generally, trees, being simpler structures, allow for simpler
drawing algorithms. Our visualization interconnects these
1550-6037/11 $26.00 © 2011 IEEE
DOI 10.1109/IV.2011.68

2 Drawing Algorithm
The ﬁrst step of our graph drawing algorithm is to transform the input graph into a corresponding tree, without losing connections (relationships). In order to achieve this
outcome, we duplicate all vertices of the graph, as needed.
The result is a tree which has all edges from the input
465

node is drawn as a circle inside of it. In this same manner, several levels of the tree are drawn recursively. The
number of levels drawn can be speciﬁed by the user.
Once the graph has been transformed into a tree, and
displayed using the FastRings algorithm, methods of recreating the graph must be applied to allow the user to retrieve
the details he or she requires.

graph, but in which the number of nodes exceeds the number of vertices in the input graph (see Figure 1).
From an implementation standpoint, the data is stored
as a graph using Object Oriented Design principles that allow references to be made to the same node (the Object)
multiple times, without creating multiple physical copies
of the same node. The tree drawing algorithm can then be
applied to the graph structure, without inefﬁciently creating many copies of a single node.
Once the graph has been converted into a tree, we
use the top-down FastRings tree drawing algorithm [6]
that was extended from original bottom-up RINGS algorithm [7]. Our visualization is intended for interaction with
and display of large graph structures, such as the World
Wide Web, and FastRings is most practical because it allows for quick access to top levels of large trees. Although
many of the techniques we introduce in this paper can be
applied to RINGS, a bottom-up algorithm requires the entire tree to be analyzed before it can be displayed. The FastRings algorithm allows the removal of edges, since connections are represented by child nodes being drawn inside
the parent node, and since FastRings draws the tree in a
circular format, this naturally provides the desirable aspect
ratio of 1. The navigation of our graph visualization system
also follows a similar strategy as the one described in [6].

2.1 Node and Subtree Highlighting
In order to re-establish the missing links within the
graph being displayed by the PieVis system, a means of
displaying the multiple connections that were lost, without
introducing edges, is required. Highlighting the common
nodes when the user hovers over one provides a way to
recreate multiple connections to a single node in an area of
interest. When the user hovers the mouse over any node
in the visualization, that node will be highlighted by ﬁlling
it in with a transparent color. Likewise, every copy of that
node within the current view will be highlighted (see Figure 3). This highlighting recreates the lost connections of
the node of interest without drawing any edges, and therefore introducing no edge crossings.
Although highlighting can help the user recreate the
multiple connections to the node, it does not always allow
the user to see where these multiple connections actually
exist. When a user highlights a node that is several levels
deep within the current visualization, although his primary
interest would be the highlighted node, the immediate subtree of that node is also of interest. Consider the example
that B is a child of A and A is a child of both C and D (see
Figure 2). When the graph is transformed into a tree, A
would be duplicated to be a child of both C and D. Now, if
the user hovers over the B node that is inside the AC node,
the user is likely interested in A, B, and C, although the
primary interest is on B. The B node will be highlighted
inside of AC and AD , but the user will not be able to know
that both AC and AD are actually the same A node.

Figure 1: (A) A directed graph. (B) A tree corresponding to the graph in (A). (C) Connections are re-established
when more detail is shown of sections of the drawing based
on Degree of Interest interactions.
Another feature of the FastRings algorithm is that the
tree is visualized from the point of view (POV) of a particular node, called the focal node. Instead of displaying the
entire tree structure at once, a node of interest is chosen as
the focal node and then several levels down from that node
are drawn. This results in a visualization of a subtree of
interest rather than a visualization of the entire tree, which
would be impractical for large trees.
When a subtree is in focus, the root node of that subtree
is drawn as the largest circle and each child of that root

Figure 2: (A) The original graph as described. (B) The
graph transformed into a tree: using only node highlighting, the connections of C and D to B will not be correctly
portrayed as through a common node A.
The immediate subtree is deﬁned as the entire subtree,
beginning at level 1, of the currently highlighted node. If
the highlighted node is at level 1 in the current view, then

466

by backtracking the directed edges coming into the node he
is interested in. When the graph is converted into a tree this
information is lost unless the entire tree is displayed. Since
the FastRings algorithm does not draw the entire tree, parent information of the focal node is lost.
In order to address this issue, the FastRings algorithm is
applied to the children and the resulting image is extended
to display the parents of the focal node. The parents of
the node are displayed in a crust around the outer edge of
the largest circular node similar to the crust of a pie (see
Figure 4). This provides a visualization of one level up in
the graph from the current focal node. Combined with the
traditional FastRings, the visualization now displays one
level up and several levels down from a focal node helping
to recreate the graph without introducing edges.
The user may interact with parent nodes in the same
manner as child nodes, and node and subtree highlighting
are also applied to parent nodes. Hovering over a parent
will highlight the respective node in all other parts of the
visualization, and hovering over a child will cause connected parent nodes to be highlighted accordingly.

the immediate subtree is only the node itself. Otherwise, it
is the level 1 node that the highlighted node is inside, and
recursively each node below level 1 that the highlighted
node is inside. In the example in the previous paragraph,
the immediate subtree of the B node inside the AC node
would be C − A − B. In order to show the connections of
these interesting nodes each level is highlighted a darker
color as the level gets closer to the hovered node (Figure 3). Each copy of the highlighted subtree nodes are also
highlighted with the same color. Highlighted subtrees are
drawn with a thick line of a distinguishable color, as opposed to highlighted nodes which are ﬁlled with a translucent color.

Figure 3: Subtree highlighting: when the user hovers over
a deep node, the subtrees containing that node are highlighted.
Subtree highlighting along with node highlighting allows the user to see multiple connections and the level at
which each connection is made, without introducing edges.
In turn, much of the data that was lost is now regained. Although this does not recreate every connection to the node
of interest, it attempts to recreate all of the connections that
are interesting to the user.

3 Parent Display

Figure 4: Parents of the focal node are displayed around the
outer edge of the node, in a format similar to a pie crust.

Because the FastRings algorithm creates a drawing intended for incremental exploration, there is some data that
may be interesting to the user that is lost in the visualization. If the user navigates to a node of interest, with the
traditional FastRings algorithm only the subtree of the focal node is visible. This means only the children of that
node, as well as its children’s children and so forth, are
displayed. However, the user may also be interested in the
parents of the focal node. In a traditional graph visualization, the user would be able to retrieve parent information

4 Degree of Interest
As discussed, the PieVis system uses a feature called incremental exploration that allows the visualization to display a subset of the graph drawn from the focal point of a
single node as chosen by the user. Much of the graph data
is abstracted into tree data to avoid unwanted issues such as
edge crossing and overcrowding. However, the graph data
can be reconstructed using the interactive node and subtree

467

length of the string that can ﬁt within the 270◦ limit. If this
limit is reached before the end of the label text, an ellipsis
is appended.

highlighting features that are provided. These features are
an important part of the PieVis system and combined create
a feature called the Degree of Interest (DOI).
DOI is a method of suppression in which each node
in the graph is applied a value of interest, and any node
not over a threshold value is not displayed. In our visualization, several thresholds are used to decide the level of
detail that is displayed. The ﬁrst threshold is used to decide whether or not a child node should be displayed. This
value can be set by the user, and decides how many levels down from the current focal node are displayed. The
second threshold value tells whether a parent should be
displayed or not and is currently hard-coded to one level
above the focal node. Finally, there is a threshold that decides whether to display the details of the connections of a
particular node. This threshold is concerned with the node
highlighting and marking.
Conventionally, DOI is a numerical value assigned to
each node in a graph, and there are several graph visualizations that use this DOI function to decide the level of
detail of a node to display [9]. Although our visualization
does not use a conventional DOI function, the results are
similar.

6 User Study
A user study was organized to demonstrate PieVis,
gauge its effectiveness and locate areas for improvement.
Eight subjects participated in our study, with experience
ranging from those with non-technical backgrounds to
graduate level computer science students familiar with visualization techniques. The participants were categorized
as either technical or non-technical, where technical subjects have backgrounds in science or mathematics-related
ﬁelds where they are familiar with concepts such as directed graphs. Of the total eight participants, ﬁve were determined to be technical and three non-technical. This determination was made based on an evaluation questionaire
given at the end of the study through which the participants
provided information about their respective backgrounds.

6.1 Procedure
Each subject participated in the same study on a one-onone basis with the proctor, who was one of the authors of
the paper. Participants were ﬁrst given a short introduction
to PieVis, and its basic features were explained. Each participant was then given a short tutorial to familiarize themselves with the system.
After the introduction and preliminary training period,
a series of 24 tasks were presented which tested the participant on data from the web, a ﬁle system, and a series of
directional graphs. In each case, participants used PieVis
alongside a traditional tool such as a web browser, ﬁle system explorer or static graph generated by the GraphViz
graph visualization software. After completing each task
the participant was asked to rate the degree to which PieVis
was used compared to the other tool. These ratings were
recorded on a scale ranging from one to ﬁve, where a score
of one would indicate they did not use PieVis at all and
a ﬁve would indicate they were able to complete the task
using only PieVis.
Both objective and subjective questions were used in the
study. Objective questions were those that had a deﬁnitive
correct answer such as browsing to a given node, counting or locating speciﬁc information. Subjective tasks were
open to interpretation, for example identifying the most
popular account in a social network or comparing homogeneous directories in a ﬁle system. When answering subjective questions, participants were asked to provide an explanation for their reasoning in addition to their answer. These
subjective tasks were incorporated as a means to promote
critical thinking and problem solving using PieVis instead
of just following directions.
Participants were not given a strict time limit for the
tasks, but were advised to move on if they could not com-

5 Labeling
Since the nodes are represented as circles, a circular labeling method was implemented (see Figure 4). These circular labels provide a way to ﬁt as much text as possible
inside the space provided by each node. Since only the ﬁrst
level of nodes and the parent nodes are labeled, and the label is contained completely inside the node, label overlap is
impossible. The circular labels are easy to read and it can
easily be determined which label is afﬁliated with which
node.
Although the circular labels provide more room for
text than straight labels would, with no overlap, and they
provide an aesthetically pleasing means of labeling, it is
preferable to limit the child node labels to using 270◦ of
the circle. This is to limit the amount of the label that is
displayed upside-down to a minimum and to help distinguish the start of a label from the end. Often, the label for
a node is longer than that which can ﬁt within the 270◦
limitation. In order to display entire labels, an interaction
was implemented in which when the user hovers over a
node the label of the hovered node is extended straight and
the entire label is displayed. In this same way, labels for
deeper level nodes can also be provided. The label shown
when hovered is still connected to the node and follows the
mouse cursor around so as to place the label directly where
the user’s attention is focused.
The labeling algorithm uses character width and height
and node radius to determine label placement. Arclength
is used to determine the rotation of each character and the

468

6.3 Subjective Ratings

plete it in ﬁve minutes. After completing all tasks the
participant was given a brief evaluation sheet containing
eleven questions and an open ended area for comments.

6.2

The subjective questions revealed some interesting aspects to the visualization. For example in situations where
participants would use PieVis to compare nodes they would
tend to focus on the context as means for comparison,
whereas using the more traditional method they would focus more on relationships. For example when asked to ﬁnd
two similar directories, one participant chose a directory
containing pictures and another containing video, reasoning that they were similar because they both contain visual
media. However when the same participant later was asked
to perform a comparison and used the provided static nodelink diagram, they based their comparison on the number
and direction of edges. Similar results occurred for other
participants, which leads the question of why this happened; one possibility could be the lack of edges in PieVis,
although more extensive research is necessary.

Results

We present PieVis as a supplementary visualization system to enhance existing methods for browsing data (e.g.
web, ﬁle system, directed graph), and the goal of this study
is to evaluate PieVis in that role. The results are presented
in Table 5. Our evaluation is based on three factors: the answers to each task, how the tasks were rated and feedback
from the evaluation questionnaire.
There was only one task which was answered incorrectly by all participants. The task involved a graph representing the Computer Science program at Rowan University, and required participants to count the number of
children of a particular node. All participants counted each
node visible in PieVis, however there were several nodes
that were not visible due to a hard limit being set to prevent crowding. This limit caused several nodes to not be
included in the visualization, which all participants failed
to realize. This issue can be attributed to two main factors,
ﬁrst the participants inexperience with the PieVis visualization system and second the lack of visual indicator that
the limit has been reached.

7 Future Work
Additional feedback collected after the study revealed
general user opinions concerning the overall usefulness of
PieVis and how it performs in terms of speed, ease of use,
and user orientation. From this feedback and the results
discussed in the previous section we identiﬁed the following areas for future work:
• the history node should be more distinguishable
from other regular nodes

For the remaining tasks there was no obvious pattern
or consistency between participants in regard to tasks being answered incorrectly. However, trends can be seen in
how questions were rated. Tasks that require skills such as
browsing or searching were rated among the highest tasks
with an average rating of approximately 4.5 and 4.7, respectively. These results are very promising, as PieVis is
targeted as an incremental exploration tool, these are the
main areas of interest.

• add the ability to look beyond one level of parents
• label the focal node
• smoother or alternative animation for semantic zoom
• provide a visual cue when limit of nodes being
drawn is reached

Tasks that required contextual information were rated
the lowest with an average rating of approximately 2.8.
This is an expected result as PieVis does not attempt to visualize content, this area is well handled by existing methods which PieVis is meant to supplement. Another area
of weakness was for tasks requiring counting. There were
only two of these tasks, however one was the task which all
participants answered incorrectly and the other was either
answered incorrectly or given a poor rating (meaning that
PieVis was not used to answer it).

8 Conclusion
PieVis is a novel, interactive graph visualization that has
many useful applications. It is an incremental exploration
system that uses a tree drawing algorithm and user interaction to display details of interesting areas of the graph.
The tree drawing algorithm used allows for the removal of
edges and, therefore, the elimination of edge crossing and
angular resolution issues. Its circular format provides a desirable aspect ratio of 1, and the circular labeling method
presented allows aesthetically pleasing labels to be displayed based on Degree of Interest without overlap.
PieVis has potential for various applications, including
World Wide Web visualization, social network visualization, database analysis, and network structure displays.
The PieVis system is not without its drawbacks, however. Although the PieVis system’s incremental exploration feature allows large graphs, such as the WWW, to be

Overall, PieVis performed very well in the areas that we
target, and its areas of weakness are outside the scope of
the system. Some minor issues were discovered that are labeled as items for future work. Overall the study was very
successful with an average task rating of 4.15/5, which indicates that PieVis is a valuable supplementary visualization system.

469

Figure 5: Tabulated results from the user study. Tasks have been grouped into ﬁve types; browsing, content, search, counting
and subjective. Ratings marked ’x’ indicate tasks that were incomplete or incorrect. In the User Average column, results
less than 3 are marked in red as that implies PieVis was used less than the standard tool.

[4] Y. Hyun.
Walrus - a graph visualization tool.
http://www.caida.org/tools/visualization/walrus/index.xml,
2002.

displayed quickly and efﬁciently, it is limited in how many
levels from the focal node it can display. The level of children does not have a hard limit, but most graphs become
too crowded at more than three levels. Some users may
desire to see much more of the graph structure than PieVis
allows for. For some large graphs, it may even be desirable
to display the entire graph structure before focusing on a
small area of interest.
In the future, research will be devoted to connecting
PieVis with another graph visualization, such as Walrus [4], that provides a good view of the overall graph
structure. Providing a multi-windowed visualization using
overview and details on demand, in addition to the current
focus and context feature, should eliminate many of the
drawbacks of the PieVis system and create a powerful tool
for graph visualization and analysis.

[5] A. Pavlo. Interactive, tree-based graph visualization.
Master’s thesis, Rochester Institute of Technology,
May 2006.
[6] Adrian Rusu, Confesor Santiago, and Radu Jianu.
Real-time interactive visualization of information hierarchies. In Proceedings of 11th International Conference Information Visualisation, pages 117–123, 2007.
[7] S. T. Teoh and K. L. Ma. RINGS: A technique for visualizing large hierarchies. In Proceedings 10th International Symposium on Graph Drawing, volume 2528,
pages 268–275, 2002.

References
[8] C. Tominski, J. Abello, F. van Ham, and H. Schumann.
Fisheye tree views and lenses for graph visualization.
Proceedings of 10th International Conference Information Visualisation, pages 17–24, 2006.

[1] G. DiBattista, P. Eades, R. Tamassia, and I. G. Tollis.
Graph Drawing: Algorithms for the Visualization of
Graphs. Prentice Hall, 1999.
[2] U. Dogrusoz, K. G. Kakoulis, B. Madden, and I. G.
Tollis. On labeling in graph visualization. Information
Sciences: An International Journal, 177:2459–2472,
June 2007.

[9] F. van Ham and A. Perer. ”Search, show context, expand on demand”: Supporting large graph exploration
with degree-of-interest. IEEE Transactions on Visualization and Computer Graphics, 15:953–960, December 2009.

[3] J. Fekete, D. Wang, N. Dang, A. Aris, and C. Plaisant.
Overlaying graph links on treemaps. Proc. of the 2003
IEEE Symposium on InfoVis, pages 82–83, 2003.

470

