2011 15th International Conference on Information Visualisation

Exploratory to presentation visualization, and everything in-between: providing
flexibility in aesthetics, interactions and visual layering
Alexander Baumann1, Andrew S. Dufilie1, Sebastin Kolman1, Srinivas Kota1, Georges Grinstein1,
William Mass2
UMass Lowell, Institute for Visualization and Perception Research1,
Economic and Social Development of Regions2
{baumann.alex@gmail.com, adufilie@cs.uml.edu, saby83@gmail.com,
Srinivas_Kota@student.uml.edu, grinstein@cs.uml.edu, william_mass@uml.edu}
Abstract

different user levels, other than by virtue of different
types of visualizations or applications being more or less
simpler to understand and use (as determined by how
they were designed).
Runtime modifications to user interfaces is of
interest to the intelligent user interface (IUI) sub-field of
HCI [1] as it relates to changing the interface to handle
the personal preferences of users, the simplification of
tasks and guiding users through new features. Such
designs require the ability to dynamically define and
modify user interfaces as the user interacts with the
system.
Other automatic transformations of user
interfaces at runtime such as that of the Fluid architecture
[2] allow dynamic modification of “the default user
interface by substituting or augmenting components with
appropriate alternatives which best match the user's
needs and preferences.”
Manual modifications to user interfaces (as opposed
to automatic intelligent modification) allow users or
designers (in the case of Weave administrators) to design
very specifically targeted user interfaces as they work.
Modifiable markup (XML, etc) representations of user
interfaces like that of Luyten and Coninx [3] encode the
hierarchy and properties of user interface components to
define layout. This type of representation is extensible,
allows rapid prototyping and can even often be crossplatform if the component definitions are generalized.
This is similar to the design used in Weave: session
states (as part of the session history) define all
application properties, including user interface hierarchy.

It is often necessary to perform exploratory analysis
on datasets in order to determine the patterns to show as
presentation visualizations for a target audience. In
many cases, exploratory packages do not offer enough
flexibility to alter application look and feel in order to
produce the required presentations of the data. Runtime
modifications of aesthetic, interactive and visualization
layering properties allow new interfaces to be defined
that can best suit a target audience. Modifications to
these properties allow advanced exploratory systems to
be reduced down to limited presentation visualizations,
and everything in between. This paper explores the
design and applications of such runtime application
flexibility
within
the
web-based
visualization
environment Weave.

1. Introduction
Data visualization often takes many forms
depending on the task and who is viewing or interacting
with the output. For some datasets, the patterns inherent
in the data, or interpretations of the data, are already
known. However, exploratory visualization is often
necessary to interpret data that is too complicated to
understand in strictly tabular form. In both cases, the
ultimate goal is often presentation visualization –
whether presenting results directly from an exploratory
system or after recreating the same discoveries in
systems that provide more support for presentation
including control of fonts, colors, and annotations for
example. Users interacting with such systems range in
expertise from novice to expert and each will use the
software in different ways to satisfy their own needs.
Most systems offer modifications for visualization
properties, colors, fonts, and other aesthetic settings, but
limited choices for more complex aesthetic, interactivity
and visualization properties that would allow further
customization of the system to better suit the target
audience.
Systems with more presentation or
confirmatory visualization focus often provide extra
aesthetic settings in order to allow the presenter to make
sure the final visualization looks the way they want it to.
Systems do not often provide choices for ways in which
the user interacts with the visualizations in order to target
1550-6037/11 $26.00 © 2011 IEEE
DOI 10.1109/IV.2011.82

2. Background and Motivation
Weave (WEb-based Analysis and Visualization
Environment) is a data visualization framework designed
and engineered at UMass Lowell as part of a joint effort
between the Computer Science department, the
Economic and Social Development of Regions program,
and the Open Indicators Consortium (OIC) [4] whose
members consist of government agencies and non-profit
organizations looking for tools to provide interactive data
visualizations to their constituencies and the general
public.
Weave is designed to provide visualization tools to
many different levels of experienced users. The highest200

level user will be referred to in this paper as an
administrator, emphasizing the ability to control any
aspect of Weave. Many administrators use the software
to do exploratory visualization and then present their
findings to their target audience. The features available
to users are specified by an administrator who can turn
on and off various functionality to for example simplify
the user interface or limit user interactions. The resulting
presentation will be referred to as an instance of Weave.
It became clear early on when working with the OIC
that each member’s needs were going to be different.
The differences were in the data they had to present, how
they wanted the resulting visualizations to look, and how
they wanted users to interact with these visualizations.
Their target audiences ranged from advanced analysts
with similar needs, to end users who may have simply
wanted to see a visualization with minimal interaction.,
including for example hovering over a point to retrieve
more data. In order to satisfy this, aesthetic and
interactive properties of the software were parameterized
so they could be changed at runtime, rather than relying
on writing code within the framework or predefining
initialization files. We selected a layered approach to
visualizations in order to provide runtime modifications
of visualizations to create new visualization types.

visualization with a nested map window showing the
same map at the entire world view. Although the
framework does not provide such a map tool, it can be
created at runtime by modifying session state, offering a
new visualization type without writing any code to do so.

Figure 1 Map of state boundaries with nested
second map showing the world view.
The state created by the parameterization of all the
objects used in the system can be modified manually to
control settings that do not yet have a user interface.
When a class is instantiated it shows up in the session
state in the same hierarchy it has internally in the code.
Thus various nested components can be copied and
pasted into other components, such as adding the
definition of a scatterplot to the layers present in a map
visualization, allowing point-based data to be added to a
map. This state also allows code prototyping and new
visualization type creation by copying and pasting
various sub-components into other tools. Variables in
the session state can be linked to one another, meaning
on any change every other variable that are linked are
updated. This allows, for instance the font used in a
label for each record on a tool to be sized by a data
value, or the creation of a selection in a map to set the
subset of the data that is used in a line chart.

3. Framework flexibility
Weave is a data visualization framework for the
web. Each application has parameterized aesthetic,
interaction and visualization properties that can be
modified through a simple interface and thus yield
customized applications at runtime. The parameterization
of properties allows the resulting presentation
visualizations to be edited at any time by another user
with administrator privileges, meaning a final simplified
visualization could later be edited to show different
patterns or data, or become the basis for further analysis.
The same application can be used for both exploratory
analysis (to determine the patterns to show to the users),
and to provide the resulting interactive presentation
visualizations to their end users. The parameterizations
of all user-editable values within the system are stored in
a state that is for the basis for session histories within
Weave, referred to as a session state within this paper.
User defined layout (position, size) of visualizations
was accomplished by creating a windowing environment
within the web browser that allows users to work with
tools as they would windows on their operating system.
These windows can also be modified to disable resizing,
moving, closing, minimization and maximization. By
removing all the controls and borders on a window,
visualizations can be drawn in a static layout, allowing
the creation of dashboards and other presentations that
are meant to have fixed positioning. Windows within the
system can also be nested within one another so that for
example a legend window could be added to a bar chart
window, or a histogram could be placed on the axis of a
scatterplot showing the distribution of points on that
given axis.
Figure 1 shows a choropleth map

3.1. Flexibility in aesthetic properties
Aesthetic properties of a visualization are often most
important for a final presentation, but can come into play
when doing exploratory analysis. In certain cases,
changing the background color of a visualization can
help provide better contrast between the background and
foreground, and can be easier to deal with under certain
lighting conditions, such as when using a projector.
Similarly, changing fonts and other size properties can
aid in seeing what the user is working on when the
objects being dealt with are too small. Color deficiencies
also highlight the need for flexible color choices. Custom
color mappings can be created for various tools, allowing
users to present the data visually exactly as they see fit,
or to match some scheme they are trying to convey.
Figure 2 shows modifications to aesthetic properties such
as choice of colormap, background color of tools and
removal of window borders to have a static dashboardlike layout.

201

Presentation visualization often focus more on these
settings to match a desired look (branding) for a group,
create visualizations appropriate for specific audiences
(older individuals, ADA compliance, etc), and to
annotate results to aid understanding. In the case of
administrators familiar with the data or trying to show
known trends, presentation visualization may be the only
goal. Data mappings can be chosen and the various
aesthetic qualities of the visualization can be tweaked for
the given audience. In many cases, trends in the data are
not known, or the results are not what was expected,
meaning that exploratory analysis is necessary.

user base, minimally interactive, highly simplified tools
may even be desired by users who are very familiar with
the data and even visualization techniques. One such
example is an expert user presenting findings to a group
of people who are less familiar with the data, using
simpler canned presentation visualizations to highlight
findings rather than overwhelming the crowd with too
complex an interface.
When creating different pages, an administrator will
either start from a blank slate view or more often from a
previous state with similar properties. Exploratory
analysis allows finding patterns to present in
visualizations that can be shown to users at various skill
levels. This is handled by creating different user views,
with the original administrator view always accessible.
These views can be named and saved and each are
defined by the settings provided by the administrator.
This includes aesthetic settings, interaction settings and
all the data mappings and visualizations that are present
in the instance – with the goal being to present some
information to a user or allow them to explore some data
using the interfaces chosen by the administrator.
Administrators need to access all the properties of
data mapping within each tool, choosing a parameter to
map to (such as X or Y in a scatterplot) and choosing
what data to map to this parameter (from what can be a
complex hierarchy of a large amount of possible data
choices). Once desired mappings are found, these can be
saved for later reuse, for the purposes of comparison or
to save time. Presets for properties such as X and Y in a
scatterplot can also be used to provide a simpler method
of navigating data patterns to other end users, allowing
them to simply choose from one of several options rather
than from the entire available data. Similarly, presets
can be created that cover more than one property, such as
both X and Y of a scatterplot at the same time (i.e.
“Height vs. Weight”). This approach of allowing an
administrator to save presets is an example of how
functionality can be provided that can both aid
administrators in their work (save time by storing
commonly used presets), and offer simpler user
interfaces to other users (presets that the user can change
to see canned views of the data). Creating such an
interface is thus simple due to the session state approach
where each preset is simply the subset of parameters for
a given tool required to represent the given mapping.
Linking of parameters across the session state allows
other complex forms of application modification, such as
using the interactions within a visualization tool to filter
the data within another. Examples of this include using
the selection created in a given tool as the subset of
records shown in another, or using mouse probed records
as a subset in another tool. During an in person meeting
with members of the OIC, the line chart visualization
tool was modified in real time to show only the records
selected in other visualization tools, and then show any
other record that is probed in another tool on top of this
selection, allowing comparison between selected records
and mouse probed records. Figure 3 shows runtime
modification to Weave in order to support this requested

Figure 2 Weave showing fixed layout and
customization of aesthetic properties
Weave uses the same system for analysis and
presentation visualization, with transitions between the
two (and any combination thereof) possible via
modifications to the session state. Multiple parameters
can be changed at once, stored, and then reapplied later.
For instance, a state that shows a tool or the application
in presentation mode can be stored, along with a state
that shows the same objects in exploratory mode.
Applying the state parameters that define a given
user view (exploratory, presentation or any combination
thereof) provides seamless transitions between different
views, as opposed to having to recreate all the
parameters each time. Administrators can find new
patterns and trends to highlight without having to
recreate presentation views after each data mapping
change that is made. This is similar to a system that
allows switching between different views or modes,
except that the states that can be applied are entirely
administrator defined and can include any number of
aesthetic, interaction, and visualization parameters to
customize what each instance or user view will look like
and do.

3.2. Flexibility in user interactions
Interactivity is extremely important when presenting
to end users.. However, for many users, especially
novice ones, too much interactivity or a having a
complex interface is discouraging. Therefore, providing
interactivity in a layered approach allows customization
from detailed and fully interactive to simple and
minimally interactive. Depending on the domain and

202

functionality. The flexibility of the system allowed us to
prototype this during the meeting to test alternative
functionality and then add this as a feature within the
framework code after a consensus was reached.

Figure 5 Composite of a binned scatterplot with
map layer added (CT/NY area)
The user interface used by administrators to code
new tools is simple enough for non-programmers to use,
and is more desirable for general usage (including by
programmers) that does not require additional
functionality not already available within the given tool
layers and glyphs. Modification can also be done by
manually editing the session state or by accessing the
provided API to more dynamically modify the session
state at runtime. In both cases, no modification to the
framework code is needed.
The visualization tools within the Weave framework
have been written with support for multiple layers
present on each visualization, with each record
represented as a glyph that can itself be a visualization,
and with selection, mouse probing and other features
abstracted out so that these features are automatically
enabled. This means one could, for example, create a
scatterplot that uses a geographic shape for each record
being shown (i.e. a scatterplot of state data that draws the
state shape for each record) or a scatterplot of pie charts
or even other scatterplots. These new visualizations can
be prototyped at runtime, and if particularly useful,
coded within the framework as new tool types.

Figure 3 Line chart modified at runtime to show
selection with probed record overlaid

3.3. Flexibility in visual layering
Besides taking advantage of existing tools,
administrators may have the need to create composite
visualizations that better handle their needs. Such new
tools can be coded into the framework, but they can also
be made at runtime. Some examples include changing
what kind of glyph is drawn for each point on a
visualization tool, or placing a bar chart at a specific
location on a map. Figure 4 and figure 5 show two types
of composite tools created by manually copying and
pasting layers between visualization tools.

4. Applications
The Weave framework offers great flexibility in the
creation of applications with each application having
interfaces to support the modification of aesthetic,
interaction and visualization properties.
Other
applications can be created using the framework and new
features can be added to existing applications at runtime
by modifying the session state. The following includes
some example use of this flexibility to highlight the
benefits gained.
Although different views can be made that are suited
for different target audiences, a single view might not
satisfy a user over time as they become more
experienced with the system and the data. A user
interface can be created that allows users to “unlock”
features by requesting to step up in complexity (from
novice, to intermediate, etc).
In order to allow reusability of session states, we
define the concept of “templates” in which portions of
session states can be applied to other states. These
templates can be loaded and have various properties

Figure 4 Composite of a binned scatterplot and
regular scatterplot on top of a map (CT/NY area)

203

filtered out to only apply what is desired from the state.
For example, only the aesthetic properties could be
loaded and the data mappings could be filtered out,
modifying the appearance of a visualization tool while
retaining its data mappings. Alternately, the data
mappings could be loaded without modifying the
aesthetic or interaction settings.

Conclusions
Runtime modification of user interfaces allows users
to customize how they interact within the system. In the
case of Weave, administrators have the need to
customize user interfaces for a target audience that varies
in skill level. For data analysis software packages this
allows interfaces to be defined that can present the same
data to different audiences for the purposes of solely
presentation (most naïve users) through highly
interactive exploratory analysis (most advanced users).
Runtime modification of aesthetic, interaction and visual
layering allow administrators to create customized user
interfaces without modifying application code. By
parameterizing user interface choices and controls, and
making those available both through an API and user
interfaces at runtime, features of an advanced
exploratory visualization system can be reduced or
simplified to target less technical users and provide
interactive presentation visualizations.

4. Future work
As the development of Weave continues and the
needs of our users change, more flexibility will be added
to the system. Currently, certain modifications to the
application at runtime are too difficult for most
administrators to handle, such as using the selection in a
given tool to define the subset of another, or creating a
new visualization with the same data mappings as a
different type of visualization (e.g. a line chart with the
same data as a scatterplot). User interfaces will be
developed that support these modifications.
The
framework provides so much flexibility already that most
of the future work involves user interface design.
We also will provide an administrator with the
ability to define taxonomies of interactions, allowing a
user to add interactions to their current tools rather than
losing any work they did at the lower user level.
Additionally, these user levels could be unlocked by
tracking what the user is doing within the system and
determining whether to expand their available features.
Creating new visualization types at runtime is
currently only possible by manually modifying session
state and is too difficult for any but the simplest cases to
be done by a technically proficient administrator. Layers
should be movable between visualizations through user
interaction and which glyph to use in each visualization
an option within the tools.
The newly created
visualizations should be savable as tools that can be
reused within the system, rather than just one-off tools.
Although Weave currently offers an API to modify
the session state, this API must be further enriched to
provide functionality that administrators will want to
modify at runtime. This API can be used to program
new features at runtime that make use of existing
framework functionality and that cannot be made by
simply modifying session state.
Offering runtime
scripting and macros is another example of how the API
could perform various functions on the session state,
such as cascading all windows, duplicating an existing
tool, or applying a series of aesthetic settings to an
existing state.
In order to aid in framework development, one idea
suggested was to create dummy class structures in the
code that are based upon a current session state. Since
each state is used to instantiate a class, it could also be
used to create the code necessary to represent the
layering structure and parameters modified in a given
visualization defined at runtime. This would speed up
the development of new visualizations while
encouraging the use of runtime experimentation.

Acknowledgements
We would like to acknowledge the Open Indicators
Consortium membership for their continued support and
feedback and the members of the IVPR lab at UMass
Lowell who have implemented various parts of Weave.

References
[1]

[2]

[3]

[4]

204

Patrick A.M. Ehlert. Intelligent User Interfaces:
Introduction and Survey. Delft University of Technology
DKS03-01. 2003.
url:
http://www.kbs.twi.tudelft.nl/Publications/Report/2003Ehlert-DKS03-01.html
Fluid proposal – A customizable user interface
url:
http://wiki.fluidproject.org/display/fluid/A+Customizable
+User+Interface
Kris Luyten and Karin Coninx. An XML-Based Runtime
User Interface Description Language for Mobile
Computing Devices. In Proceedings of the 8th
International Workshop on Interactive Systems: Design,
Specification, and Verification-Revised Papers. DSV-IS
'01. Springer-Verlag, London, UK, 1-15. 2001.
Open Indicators Consortium
url: http://www.openindicators.org

