2011 15th International Conference on Information Visualisation

Layered TimeRadarTrees
Michael Burch, Markus H¬®oferlin, Daniel Weiskopf
Visualization Research Center, University of Stuttgart, Germany
{michael.burch, markus.hoeferlin, daniel.weiskopf}@visus.uni-stuttgart.de
sociated with high cognitive load for typical analysis tasks
and, thus, viewed skeptically by psychologists [1]. Furthermore, the issue of how well the mental map of the graph is
maintained arises [16].
Small multiples of different time slices shown side-byside alleviate some of the cognitive issues of animation.
In particular, this approach allows the user to explore several time slices simultaneously. However, small multiples
need quite substantial screen space and therefore, only a
few time slices can be shown.
To avoid issues of node-link diagrams, we adopt spatial
circular layering to visually represent time, reminiscent of
TimeRadarTrees [9]. To make the technique more scalable we extend the approach by multi-layered thumbnails
and by the concept of center and thumbnail color wheels.
Furthermore, we visualize a more general graph class than
compound graphs: we allow relations between all nodes‚Äî
leaf as well as inner nodes.
To interpret the graph relations in the diagram, we use
differently oriented circle sectors of radial diagrams combined with color coding for each sector. In this way, we
avoid explicit links as in node-link diagrams, but rather display links implicitly. The dynamic graph edges are layered
as adjacency arcs around the corresponding sectors of a
circular thumbnail (ThumbWheel) in the same temporal order as in the graph sequence. ThumbWheels are miniature
representations for each vertex in the graph sequence and
are located around a larger version of the sectors (CenterWheel) that provides the context of the vertex. The hierarchical organization of the graph vertices is represented by
a radial extension of indented tree plots [10].
We decided to map time to spatial positions in the diagram in order to avoid typical issues of animation. In
particular, this mapping reduces cognitive efforts when exploring trends, countertrends, temporal shifts, periodic behaviors, and anomalies. A viewer‚Äôs mental map is automatically preserved by using a static diagram for dynamic
data. Compared to node-link diagrams (static or animated),
our approach exhibits the advantage of reduced visual clutter because explicitly drawn links are avoided, and it leads
to lower computational costs because complex layout algorithms for effective node-link diagrams are not required.

Abstract
We introduce a novel technique for visualizing dense
time-varying directed and weighted multi-graphs with an
additional hierarchical organization of the graph nodes.
Combining Indented Tree Plots and TimeRadarTrees, we
show the temporal evolution of relations in a static view.
The graph edges are layered around thumbnail wheels consisting of color-coded sectors that are representatives of
the graph nodes. These sectors generate implicit representations of graph edges. Start and target vertices are
perceived by inspecting the color coding of sectors in the
context of other sectors and their orientations. The technique puts emphasis on newer relations and hence, these
are mapped to a larger display space in the radial diagram.
The beneÔ¨Åt of our technique is reduction of visual clutter
from which node-link diagrams typically suffer. The visualization focuses on an easy exploration of trends, countertrends, periodicity, temporal shifts, and anomalies in
time-varying relational data. We demonstrate the usefulness of the approach by applying it to dense dynamic graph
data acquired from a soccer match of the 2D Soccer Simulation League.
Keywords‚Äî Dynamic Graph Visualization, Indented Tree
Plots, TimeRadarTrees.

1 Introduction
Visualizing dynamic relational data in information hierarchies with additional quantitative information applied to
each relation is a challenging topic. Typically, this kind of
graph data is represented by node-link diagrams with time
displayed either by animation or by small multiples [2] of
the graph at different time slices.
Animated diagrams normally use interpolation of node
positions between time slices; new nodes are smoothly
faded in and obsolete nodes are faded out to achieve a temporally coherent animation. The advantages of animation
are its conceptual simplicity and its congruence of mapping because time from graph dynamics is mapped to visualization time: the user virtually sees the evolution of
the graph. Another advantage is that the whole screen can
be used to display the graph. However, animation is as1550-6037/11 $26.00 ¬© 2011 IEEE
DOI 10.1109/IV.2011.93

18


    

(a)

(b)

Figure 1: Node-link diagrams: (a) inclusion relations (black lines without arrow heads) and directed adjacency relations
(colored lines with black arrow heads) in a node-link diagram; (b) a sequence of graphs as an animated node-link diagram.

Cognitive issues with animation of graphs can be reduced by putting different time slices of the node-link diagrams side-by-side. This approach, however, still relies
on node-link visualization with all its advantages and disadvantages. Recent work by Archambault et al. [3] compares the effectiveness of animation and side-by-side visualization with small multiples. Another alternative to small
multiples is to draw a sequence of node-link diagrams in a
single view as presented by Greilich et al. [15].
The layout problems of dynamic node-link diagrams
can be avoided by resorting a completely different mapping
of data to visual space. If one is not primarily interested in
detecting varying paths in a graph sequence, matrix-based
approaches have been shown to be more appropriate since
they scale much better for the time dimension. Ghoniem et
al. [14] investigated if matrix or node-link techniques for
static graphs perform better for certain tasks.
The idea of matrix-based visualization can be extended
to deformed spatial layouts. The TimeRadarTrees technique [9] displays dynamic compound digraphs in static diagrams by mapping time to space where graph relations are
stacked into circle sectors. We build on this technique because we also generate a contextual view in the center (the
CenterWheel) surrounded by miniature thumbnail representations (ThumbWheels). We enhance TimeRadarTrees
by introducing an additional color coding of sectors in the
CenterWheel and ThumbWheels. Moreover, we do not restrict the visualization to compound graphs, but we support
relations between all possible nodes in the hierarchy.
To display the hierarchical information in the data sets,
we adopt the indented tree plot technique [10]. We adapt
this technique by deforming it from a linear layout to a circular layout that Ô¨Åts the CenterWheel. This kind of hierarchy visualization is useful because it does not occlude any
other graphical elements in contrast to TimeRadarTrees
and, hence, reduces visual clutter.

Finally, our visualization technique additionally supports
hierarchical information attached to graph vertices.
There are many applications for dynamic graph data
with hierarchically structured elements such as relations in
a hierarchically organized software system, the traveling
behavior of tourists in a hierarchically structured world, or
the relations among members in a social network.
In this paper, we illustrate the usefulness of the visualization technique by showing trends, countertrends,
periodic behaviors, temporal shifts, and anomalies in soccer data of the World Championship 2010 of the 2D Soccer
Simulation League. We choose this kind of data because it
belongs to the class of dense graphs and understanding the
semantics of the data is possible for non-domain experts,
addressing a broad audience.

2 Related Work
There is a large body of previous work on visual analysis of large graphs, as summarized and categorized in the
recent survey article by von Landesberger et al. [20]. The
authors classify existing approaches according to the graph
type to be visualized, the interactive features to explore a
graph, and the algorithmic issues that have to be addressed.
For effective visual node-link representations of static
and dynamic graphs alike, aesthetic graph drawing criteria
should be observed [6, 7, 17]. As outlined in the previous section, a natural way of representing dynamic graph
data is to show the time dimension by a time-to-time mapping as in animated sequences of node-link diagrams. This
approach led to the development of many sophisticated
graph layout algorithms that, amongst other criteria, target aesthetic graph drawing criteria and the preservation
of a viewer‚Äôs mental map [16]. A typical example of ofÔ¨Çine dynamic graph drawing is due to Diehl and G¬®org [11],
who consider all graphs from the complete temporal sequence when they generate the layout of each graph in the
sequence. A representative online dynamic graph drawing
technique is the one by Frishman and Tal [13], who aim to
maintain the global structure of the graph while allowing
modiÔ¨Åcations between consecutive graphs. Our technique
is independent from online or ofÔ¨Çine graph visualization
aspects and allows us to quickly add graphs on-the-Ô¨Çy.

3

The Visualization Technique

Representing dynamic relational data in information
hierarchies in a static diagram leads to the question of
how different data dimensions can be visualized simultaneously. Effective encoding of graph vertices and edges,

19

(a)

(b)

Figure 2: CenterWheel and ThumbWheels: (a) The large circle in the center‚Äîthe CenterWheel‚Äîis divided into nine differently colored sectors. Nine miniature thumbnail copies‚Äîthe ThumbWheels‚Äîgenerate a contextual view. (b) A contextual
view for a larger node set may exploit several layers to display all ThumbWheels.

(a)

(b)

(c)

(d)

Figure 3: An example hierarchy consisting of 33 nodes displayed as (a) rooted node-link diagram; (b) radial node-link
diagram; (c) indented tree plot; (d) radial indented tree plot.
as well as their directions and weights is required. Furthermore, multi-edges may occur that all might have different
weights. Vertices are hierarchically organized, which leads
to another type of structured relations. The representation
of the time dimension among the graph edges is another
challenge when using static diagrams.
In the following sections, we describe how all these different dimensions in the data can be visually encoded in a
single static diagram with the goal to reduce visual clutter
and to allow the user to easily detect trends, countertrends,
periodic behaviors, temporal shifts, and anomalies in dynamic relational data between different hierarchy levels.

3.1

nine nodes where Ô¨Åve of them are leaf nodes of a hierarchy
(E, F , G, H, and I), and the four remaining nodes are inner nodes of the hierarchy (A,B,C, and D). Node A is the
root node. Furthermore, there are nine adjacency relations,
where the relation from node B to C appears twice (multigraph). Node B has a self-edge, i.e., source and target node
are identical.
Figure 1 (b) depicts the dynamic case. A sequence
of node-link diagrams is displayed where the weight of
each adjacency relation is indicated by color coding. The
hierarchical organization of the nodes is constant. The
weights of some edges are constant in all of the timesteps.
The weights of another edge are growing at a constant
rate, which can be classiÔ¨Åed as a trend. There are also
some nodes without any incoming edges throughout the
sequence and nodes without outgoing edges at any time.
Finding out these phenomena is difÔ¨Åcult and needs some
exploration time in Figure 1 (b).

Implicit Link Representation

Figure 1 (a) shows a static graph that consists of inclusion edges (black lines without arrow heads). Separately, directed adjacency edges are indicated by colored
lines with arrow heads, starting at a source node and pointing to a target node. The graph in Figure 1 (a) consists of

To avoid explicit links as in node-link diagrams, we

20

(a)

(b)

(c)

Figure 4: (a) The hierarchical organization of the nodes of Figure 1 is shown as a radial indented tree plot with additional
color coding that depends on the depth of each hierarchical element. (b) Directed relations of the static multi-graph of Figure 1 are visually encoded as color-coded sectors and put on top of each representative ThumbWheel at the corresponding
circle sectors. (c) Dynamic graph from Figure 1 is visually encoded as color-coded sectors.
are placed on three different layers around the CenterWheel. 33 ThumbWheels would be far too many to place
them all equally distant from the CenterWheel. This would
lead to overlap and occlusion. As a solution, we place
these ThumbWheels on different radial layers; a guiding
line connects each circle sector of the CenterWheel to the
corresponding ThumbWheel.

instead use indirect encoding of correspondence between
vertices by common orientation in a glyph. The glyph is
designed as a circular area that is divided into as many sectors as vertices have to be represented.
Figure 2 (a) shows the glyph for the example of nine
nodes. To improve the visual separation of the sectors, we
apply a special color coding that makes neighboring sectors as distinct as possible. Humans are able to clearly and
easily separate a certain number of distinct colors. The
main idea here is to make visual objects as distinct as possible on several feature channels and to make use of the
good perceptual grouping property of color [21].
In addition to the glyph above, the implicit link representation contains further smaller copies of the glyph
located around the center glyph, adopting the concept of
small multiples [2, 8]. The number of thumbnails is identical to the number of vertices to be represented. As a beneÔ¨Åt, each single circle sector of the small thumbnail glyphs
can be mentally connected to one of the sectors in the larger
circle by using color coding and orientation information.
In the following, we use this ease of mental mapping to
encode relations of a graph and a sequence of graphs implicitly: a directed link between any two vertices is implicitly represented by the combination of a sector in the CenterWheel and the sector in that ThumbWheel that is connected to the aforementioned sector in the CenterWheel.
The ThumbWheels do not necessarily have to be positioned at equal distances from the CenterWheel. As a beneÔ¨Åt of the unique orientation of each circle sector, the corresponding ThumbWheel just needs to be positioned somewhere on the line starting at the CenterWheel and pointing
radially in the direction of the corresponding sector.
Figure 2 (b) shows an example where the ThumbWheels

3.2

Hierarchy Representation

To avoid visual clutter in the display we do not use a
radial node-link diagram on top of the contextual view as,
for example, in TimeRadarTrees [9]. To represent adjacency relations between any hierarchy level, we introduce
the radial indented tree plot, adopting the linear indented
tree plot technique [10]. These plots are well suited for
our purpose because they are essentially one-dimensional
zigzag curves that can be deformed to Ô¨Åt tightly around
the CenterWheel. Other hierarchy representations such as
treemaps [18], layered icicles [4, 19, 22], or traditional
rooted trees [5, 12] are two-dimensional diagrams and,
thus, would not be suitable for our goal of displaying all
hierarchical elements on one common representative onedimensional line.
Figures 3 (a)‚Äì(d) show how a tree diagram looks like in
a rooted and radial node-link as well as indented metaphor.
For the indented plot, we use a blue-to-red color gradient
whose value depends on the depth of a hierarchical element. Indentation is used to express on which depth in the
tree a node is located. Radial indentation means that nodes
on a deeper level in the hierarchy are further away from
the circle center. The root node of a radial indented plot
is placed to the rightmost position of a circle and the following nodes are processed in a clockwise strategy and in

21

instance, one complete stack of adjacency arcs for the
ThumbWheel of node A is colored blue. Using the contextual view, it is easy to identify that the sector corresponds
to node B. We can conclude that there is a dynamic edge
from node A to node B with the same weight throughout the sequence. Another interesting insight comes from
the ThumbWheel sector from node C to node I: the edge
weight is increasing over time. Node D is the only node
without any outgoing edge in the sequence. Furthermore,
the hierarchical information displayed as a radial indented
tree plot can be used to understand between which levels of
a hierarchy these relations occur. All these insights would
be difÔ¨Åcult to Ô¨Ånd out with animated node-link diagrams
and even with a sequence of node-link diagrams placed
next to each other as shown in Figure 1 (b).

depth-Ô¨Årst order. This ordering of nodes also implies the
same ordering of sectors in the CenterWheel. In this way,
sectors and indented tree elements that point in the same
direction also refer to the same node.
The contextual view from Figure 2 (a) is extended by
this hierarchical information. The radial indented tree plot
is displayed in the space between the CenterWheel and the
ThumbWheels. Each hierarchical element is oriented in
the same direction as its corresponding circle sector, see
Figure 4 (a). The hierarchical organization of the graph
nodes is additionally expressed by elongated grayish sectors, where the gray level depends on the depth of the
corresponding hierarchy element.

3.3

Static Graph Representation

Each adjacency edge in a multi-graph consists of a start
and a target node, and additionally of a list of weights attached to it. Suppose that a multi-edge originates at node
A and points to node B and has weights w1 , . . . , wn . Then
this edge is represented as a color-coded adjacency arc attached to the ThumbWheel that represents node A; the adjacency arc is located in the sector of the ThumbWheel that
points in the direction of node B. To support multi-edges,
this sector is subdivided into as many subsectors as edges
in this multi-edge. Finally, the weights w1 , . . . , wn are represented by color coding applied to the adjacency arcs.
As an illustrative example, we use the graph shown in
the node-link diagram in Figure 1 (a). The adjacency edge
starting at node B and ending at node C is a multi-edge
consisting of two differently weighted edges. All edges of
this graph are converted to circle sectors and placed on top
of the respective ThumbWheels, see Figure 4 (b).

3.4

3.5

Interactive Features

The visualization tool supports several interactive features: expanding and collapsing of hierarchy levels, changing the color coding of the CenterWheel and the ThumbWheels, applying different color codings for the adjacency
relations, details-on-demand, zooming of ThumbWheels,
changing the radial distance of ThumbWheels, selecting
time intervals and the like.

4

Dynamic Relations in Team Sports

We use dynamic data of team sports as an example to
demonstrate the usefulness of our visualization. In this
section, we show the visualization of a soccer match of the
2D Soccer Simulation League World Championship 2010.
Such data contains many features of interest: hierarchically
ordered nodes, directed and weighted edges between node
pairs on different hierarchy levels, as well as dynamic behavior of the relational data over time. Furthermore, these
graphs belong to the class of dense graphs and our data set
provides a textual description of nodes.
In detail, we consider the following data aspects of the
soccer match:

Dynamic Graph Representation

The main beneÔ¨Åt of our visualization technique is the direct support for displaying dynamic directed multi-graphs
in information hierarchies. Figure 1 (b) shows a sequence
of Ô¨Åve graphs in an animated node-link diagram with colorcoded adjacency edges and additional hierarchical information. To map the dynamic graph data, we use the same
principle as for the static case. Time starts in the circle center and grows radially outward. This means that displaying
a sequence of graphs can be implemented by layering all
edges starting at node A and ending at node B on top of
the circle sector for node B of the thumbnail representing
node A. The time-dependent relations lead to temporally
varying weights that are again shown by color mapping.
As a beneÔ¨Åt, the growing display space in the sectors puts
newer relations more in focus than older ones.
Figure 4 (c) is a visual mapping of the dynamic graph
data from Figure 1 (b). Our diagram has the beneÔ¨Åt that
trends in the time series can easily be detected. For

‚Ä¢ Hierarchical organization: the root node represents
the match; both teams are on the second level. The
team parts‚Äîgoalie, defense, midÔ¨Åeld, and offense‚Äî
build the third level of the hierarchy. The players and
the ball are the leaf nodes (Figure 5 (a)).
‚Ä¢ We measure the Euclidian distance between the
players and the ball on the soccer ground and use
these relationships as adjacency edges. For the nonleaf nodes, the arithmetic means of all its elements is
computed Ô¨Årst and then the Euclidian distance from
this average position to the position of any other hierarchical element is used. This leads to a dense graph.

22




 



  

    

 

   
















 



































(a)

(b)

Figure 5: Hierarchy and dynamic relations in a soccer match. (a) The hierarchical organization of a soccer match (top
image), along with the approximate spatial mapping of players (numbered nodes) to the soccer ground (bottom image).
(b) Visualization of the 2D Soccer Simulation League World Championship 2010 Ô¨Ånal: Helios2010 vs. WrightEagle.
Adjacency arcs show the Euclidian distances between players, team segments, and the ball during the soccer match.
‚Ä¢ The dynamics of the data is obtained by measuring
the positions in 100 millisecond intervals.

Normally, the goalies remain in the penalty area and
are hence farther away from other players and the ball.
Another typical phenomenon can also be detected: offense players have mostly minimal distances to their defending counterparts. The midÔ¨Åeld players of the Helios
2010 team are color-coded mainly in blue, which indicates that they are closer to other players and further apart
from the two goalies, whose corresponding ThumbWheel
sectors are colored in green. The midÔ¨Åeld players of the
WrightEagle team show a different behavior. The player
with number eight has a larger distance to the defending
players of the Helios 2010 team. The other two players
of the WrightEagle‚Äôs midÔ¨Åeld do not share this behavior.
These two players, number six and seven, have a larger
distance to their own defense. Hence, the midÔ¨Åeld of the
WrightEagles focuses more on offense than the midÔ¨Åeld of
their opponent.

Figure 5 (b) represents an overview of all 6000 time
steps of the dynamic graph data. The hierarchy consists
of 34 elements and is represented as a radial indented plot
with a blue-to-red color coding. We use a vegetation color
mapping as illustrated in the upper left of Figure 5 (b).
Zero-valued distances are encoded in light gray, which is
typically the case for self-relations. Due to the large number of ThumbWheels, a second layer is created. Circular
text labels are attached to each ThumbWheel.
A Ô¨Årst observation from the diagram may be the dominating blue color. This expresses that distances between
hierarchical elements are mainly not large. Four ThumbWheels are primarily in green to yellow color, which indicates that the corresponding players are farther away from
the others. A closer inspection of this phenomenon reveals that these ThumbWheels belong to the goalies of both
teams and the hierarchy container of their corresponding
team parts.

The ThumbWheels show periodic behavior in the distances. This originates from different actions during a soccer match: offense and defense. The ThumbWheel of the

23

(a)

(b)

Figure 6: The enlarged ThumbWheel view for two graph nodes: (a) the ball object; (b) one of the goalkeepers.
ball exhibits that the midÔ¨Åeld and the offense of the Helios
2010 team are most frequently close to the ball. Thus, we
infer that these players are more often in possession of the
ball.
Figure 6 (a) displays a scaled ThumbWheel of the ball,
showing an interval of 100 seconds. The yellow and red
color encodings unveil that the ball is often more distant
from the goalies than from other players. The upper right
circle quarter with a blue color coding indicates that the
ball is close to the goalies and the defending players of Helios 2010, which is also the case for the midÔ¨Åeld players
of WrightEagle. We may conjecture that the WrightEagle
team is in ball possession and attacks the opposite team.
The enlarged ThumbWheel of the goalie of the Helios
2010 team in the same time interval is illustrated in Figure 6 (b). Compared to the ThumbWheel of the ball, the
color changes are smoother. The ball frequently changes
its position abruptly since it can be kicked with high speed.
Two sectors change from yellow to red, which indicates
that the distance from the Helios 2010 goalie to the opposite goalie (and its corresponding goalie team part) is
increasing.
This is just an example of the many insights that can be
observed utilizing our visualization.

5

ThumbWheel sectors. The information hierarchy is displayed as a radial indented tree plot that allows us to visualize relations between any hierarchical element.
The cognitive effort is kept low for exploration of the
dynamics, since we represent the dynamic data in a static
diagram. Additionally, we preserve the mental map by displaying the graph nodes at a Ô¨Åxed position. In contrast
to node-link diagrams of dense graphs, visual clutter is
marginal since we do not have any crossing edges. We
also do not need time-consuming layout algorithms. This
leads to the advantage that graphs can be added on-the-Ô¨Çy
without changing the graph layout.
We have demonstrated the usefulness of our technique
by a data set of the 2D Soccer Simulation League. This
data set consists of 34 nodes including a hierarchical organization, and a time-series of 6000 measurement points.
The weights of edges are given by Euclidian distances for
each pair of players, team parts, and the ball. Trends, countertrends, periodic behaviors, temporal shifts, and anomalies are easily detected in the diagram.
In future work, we will evaluate the strengths of implicit
link representation in our technique compared to explicit
link representation given in node-link diagrams. Although
several interaction techniques are already available, additional interactive features will further enrich our novel
visualization system.

Conclusions and Future Work

In this paper, we have presented a novel technique for
displaying time-varying directed multi-graphs in information hierarchies. The approach uses an implicit link representation to visually encode graphs. Relations are shown
by adjacency arcs stacked on top of the corresponding

Acknowledgements
This work was funded by German Research Foundation
(DFG) as part of the Priority Program ‚ÄúScalable Visual
Analytics‚Äù (SPP 1335).

24

[12] P. Eades. Drawing Free Trees. Bulletin of the Institute
for Combinatorics and its Applications, pages 10-36,
1992.

References
[1] B. Tversky, J. Bauer Morrison, and M. Betrancourt.
Animation: Can It Facilitate? International Journal
of Human-Computer Studies, pages 247-262, 2002.
[2] E. Tufte. Envisioning Information. Graphics Press
1990.

[13] Y. Frishman and A. Tal. Online Dynamic Graph
Drawing. IEEE Transactions on Visualization and
Computer Graphics, 14(4), pages 727-740, 2008.

[3] D. Archambault, H. C. Purchase and B. Pinaud. Animation, Small Multiples, and the Effect of Mental
Map Preservation in Dynamic Graphs. IEEE Transactions on Visualization and Computer Graphics,
17(4), pages 539-552, 2011.

[14] M. Ghoniem, J.-D. Fekete and P. Castagliola. A Comparison of the Readability of Graphs Using NodeLink and Matrix-Based Representations. In Proceedings of the IEEE Symposium on Information Visualization, pages 17-24, 2004.

[4] K. Andrews and H. Heidegger. Information Slices:
Visualising and Exploring Large Hierarchies Using Cascading, Semi-Circular Discs. In Proceedings
of the IEEE Information Visualization Symposium,
pages 9-12, 1998.

[15] M. Greilich, M. Burch and S. Diehl. Visualizing
the Evolution of Compound Digraphs with TimeArcTrees. Computer Graphics Forum, 28(3), pages 975982, 2009.
[16] K. Misue, P. Eades, W. Lai and K. Sugiyama. Layout Adjustment and the Mental Map. Journal of Visual Languages and Computing, 6(2), pages 183-210,
1995.

[5] G. Di Battista, P. Eades, R. Tamassia and I. G. Tollis.
Graph Drawing: Algorithms for the Visualization of
Graphs. Prentice Hall 1999.
[6] F. Beck, M. Burch and S. Diehl. Towards an Aesthetic Dimensions Framework for Dynamic Graph Visualizations. In Proceedings of the 13th International
Conference on Information Visualisation, pages 592597, 2009.

[17] H. C. Purchase. Metrics for Graph Drawing Aesthetics. Journal of Visual Languages and Computing,
13(5), pages 501-516, 2002.
[18] B. Shneiderman. Tree Visualization with Tree-Maps:
2-d Space-Filling Approach. ACM Transactions on
Graphics, 11(1), pages 92-99, 1992.

[7] C. Bennett, J. Ryall, L. Spalteholz and A. Gooch. The
Aesthetics of Graph Visualization. In Proceedings of
Computational Aesthetics, pages 57-64, 2007.

[19] J. T. Stasko and E. Zhang. Focus+Context Display
and Navigation Techniques for Enhancing Radial,
Space-Filling Hierarchy Visualizations. In Proceedings of the IEEE Symposium on Information Visualization, pages 57-65, 2000.

[8] J. Bertin. Semiology of Graphics: Diagrams, Networks, Maps. Madison, WI: University of Wisconsin
Press 1983.
[9] M. Burch and S. Diehl. TimeRadarTrees: Visualizing
Dynamic Compound Digraphs. Computer Graphics
Forum, 27(3), pages 823-830, 2008.

[20] T. von Landesberger, A. Kuijper, T. Schreck, J.
Kohlhammer, J. J. van Wijk, J.-D. Fekete and D. W.
Fellner. Visual Analysis of Large Graphs. In Eurographics State-of-the-Art Reports 2010.

[10] M. Burch, M. Raschke and D. Weiskopf. Indented
Pixel Tree Plots. In Proceedings of the International
Symposium on Visual Computing, pages 338-349,
2010.

[21] C. Ware. Visual Thinking for Design. Morgan Kaufman 2008.
[22] J. Yang, M. O. Ward, E. A. Rundensteiner and A.
Patro. InterRing: A Visual Interface for Navigating
and Manipulating Hierarchies. Information Visualization, 2(1), pages 16-30, 2003.

[11] S. Diehl and C. G¬®org. Graphs, They Are Changing. In
Proceedings of Graph Drawing, pages 23-30, 2002.

25

