2011 15th International Conference on Information Visualisation

Concentric Sliders to Display Partial Satisfaction of Query Criteria
Benoît Otjacques, Maël Cornil, Mickaël Stefas, Fernand Feltz
Public Research Centre – Gabriel Lippmann, Luxembourg
{otjacque, cornil, stefas, feltz}@lippmann.lu
research self-assessment report [1] already pointed out
the need to design database tools supporting approximate
data or imprecise queries.
The purpose of the research described in this paper
is to help users having only partial or imprecise
information to define a query and to help them to adjust
the selection threshold values to find the right answer to
their ill-defined problem. More precisely, we have
studied how to provide the user with an easy way to see
more than the subset of items that strictly satisfies the
query criteria on a binary basis. For instance, the investor
want to identify which funds that do not appear in the
initial result set have a risk level slightly above the
acceptable threshold. Indeed, there might be some
interesting “second choice” candidates.

Abstract
This paper describes a new approach called
concentric planar slider to visually build queries and to
pilot a data view. The purpose of this approach is to go
beyond the binary satisfaction of the query criteria
(satisfied vs. not satisfied). This UI control helps the user
to know to what extent the dataset elements satisfy them.
Two interactive sliders are combined in a planar setting.
This plane is split into concentric zones that are
associated to decreasing degrees of satisfaction of the
query criteria. Various (potentially asymmetric) rules
can be defined to express the non-satisfaction of a given
criterion. These theoretical concepts have been
implemented in a prototype whose main features are also
described.

2. State-of-the-Art

Keywords --- Visual Query, Query Specification,
Planar Slider, Sensitivity Information, Information
Visualization.

Mapping a question expressed in natural language
into a formal expression using a demanding syntax like
SQL or XQuery is not a trivial task (cf. e.g. [1] , [4] , [5]
). Various strategies like Query-By-Example or natural
language processing have therefore been proposed to
avoid the user having to learn a formal query language.
The work presented in this paper belongs to
complementary research fields aiming to map the query
terms and/or the query results to visual representations.
Dynamic queries (first reported in [13] ) have
become a standard way to combine interactively a visual
specification of the query and the display of the result. In
their usual implementations, each attribute of the
elements of a data set {Ei} is associated to a control (e.g.
slider, check box, radio button) that is used to define the
query criterion concerning this attribute. In the
illustrative “apartment” example, the range of acceptable
values for the rent and the floor area can be set via two
sliders. The data view displaying the elements of {Ei} is
updated in real time when the selection control(s) are
modified.
The simplest way to implement dynamic queries
consists of highlighting the elements completely
satisfying the Query (called {QEi} in the subsequent
sections) in the data view. The two most common
strategies are (1) to permanently display every element
of {Ei} and to visually mark (e.g. using a specific color)

1. Introduction
Selecting some elements of a set according to certain
criteria is a common task in many contexts. For instance,
investors select funds and stocks according to the risk
level and the expected return. People aiming to move
may use the rent, the floor area and the walking distance
to some facilities to choose their new apartment.
Sometimes, defining the precise selection criteria is
challenging and the threshold values are adjusted many
times during the querying process. In fact these threshold
values often result in real life from an approximation or a
negotiation process. The investors may adjust the
acceptable risk level depending on the number of funds
that were identified in the initial step of the study.
Similarly, people can face some difficulties to choose an
initial threshold for the maximum distance to the railway
station when they are looking for an apartment.
These examples highlight a limitation of the usual
way to build a query and to display the result set: the
selection of items is based on binary satisfaction of
conditions (“selected / not selected” approach).
However, some years ago the 2005 Lowell Database
1550-6037/11 $26.00 © 2011 IEEE
DOI 10.1109/IV.2011.9

59

the elements of {QEi} or (2) to display only the elements
of {QEi}. Note that the second solution is less affected
by occlusion problems than the first one since fewer
elements are displayed in the data view. Both solutions
reduce the degree of satisfying the query to a binary
value: either satisfying or not satisfying all its criteria.
In many circumstances the user does not need any
explicit information regarding the elements that do not
satisfy every criterion (subsequently called Elements of
{NQEi}). Nevertheless he/she may sometimes have some
interest in those elements. For example, the investor may
wonder which funds have a slightly disappointing return
but a risk level compatible with the acceptable threshold.
Years ago Spence and Tweedie [10] identified this
need and introduced the concept of sensitivity
information that they defined as “the reduction in the
number of violated limits achieved by movement of a
limit”. The basic idea consists in adding to the data view
some information about how many criteria the elements
of {NQEi} satisfy. Spence and Tweedie’s Attribute
Explorer displays in dynamically linked histograms the
number of criteria every element satisfies. A multi-level
monochromatic scale (e.g. grey levels) is used to code
the degree of satisfaction of the query criteria. This
application visualizes the influence of modifying a
criterion about a specific attribute. Unfortunately, it is
not so easy to identify in histograms which criteria a
given element Ei satisfies.
Keim and Kriegel [6] have also investigated this
issue and have proposed the concept of relevance factor
to represent the degree of satisfaction of the query
criteria. Their application called VisDB codes the
relevance factor with both the position and the color of
pixels representing the elements {Ei}. VisDB is basically
a specific type of chart and this approach is not easy to
generalize to usual graphics layouts.
Other researchers focusing on the visual
specification of queries have indirectly tackled the issue
of giving to the user some information about the
elements not included in the result set (i.e. {NQEi}).
Jones [5] has proposed the VQuery tool based on
Venn diagrams. Some ellipses (or circles) are associated
to the query criteria. They can be moved in a plan and
enabled (disabled) to form Venn-like diagrams defining a
Boolean expression. The ellipses of the diagram include
the number of elements (i.e. documents in his case study)
satisfying the related criterion.
In InfoCrystal [11] all possible Boolean queries
involving many criteria are represented by icons
carefully positioned on a plan to show which criteria are
satisfied. Infocrystal can also display the number of
elements of the dataset {Ei} satisfying every combination
of criteria. Its scalability in terms of number of query
criteria is a major advantage of InfoCrystal.
KMVQL [4] is a visual query language that uses a
Karnaugh map as the visual representation of Boolean
queries. The elements Ei are represented by flower-like
icons whose number and color of the petals inform the
user regarding which criteria the related element
satisfies.

Another example is Hotmap [3] designed in the
context of information retrieval from the web. A set of n
distinct squares associated to each query criterion (i.e.
word/term in this context) are placed near each element
of the query results set. Each square is colored according
to the frequency of the related term in the result element.
Hotmap shows the relationship between the criteria and
the results but it does not help building the query itself.
Also, HotMap does not display the whole dataset {Ei}
but only a subset.
In the Filter-Flow approach [14] the criteria on the
attributes are visualized by boxes placed sequentially
(AND operation) or in parallel (OR operation). The
width of a virtual flow passing through the boxes
indicates the number of elements satisfying the criteria.
Unfortunately, this representation is highly dependent of
the order of the criteria (i.e. order of the boxes).
All these approaches have proposed valuable
contributions regarding how to visually express a query.
Although their focus was not on the visual display of the
query result they acknowledge the need to provide the
user with some information about the degree of
satisfaction of the criteria.

3. Concentric Slider
Problem Statement
Our proposal does not allow the user to ask
imprecise questions but rather focuses on the “results”
facet. From a practical view point we aim to help the
user to distinguish the elements Ei that are very far from
satisfying the query criteria and those that have just
failed to fulfill them.
To formally describe our problem we hypothesize
first that the query Q is visually specified within a space
having 2 dimensions.
Q is defined by a set of m criteria defining an
interval of acceptable values for a subset of the n
attributes of the elements Ei. We have limited this initial
investigation to queries composed of two criteria (m = 2).
In further research, we will investigate how to generalize
this concept to a higher number of criteria (m > 2).
x
x
x
x

p  R2, p is the point associated to the element Ei in
the display space where the query Q is specified
x = (x0, x1, … xn), vector of all attribute values of Ei
x* = (x*0, x*1, … x*m), vector of attribute values of
Ei that are involved in a query criterion, m<n
Query Q:= { p  R2 _ a  x*  b }
a, b, x*  Rm

We draw attention to the fact that this definition
does not include all types of query. However, the
definition specifies a class of query that is sufficiently
generic to be studied.
Our goal in this context is to design a solution that
(1) offers an intuitive way to define Q, (2) shows for
each element the degree of satisfaction of the criteria and
(3) is independent of the chart used in the display space.

60

The concept of the concentric planar slider is
illustrated in Figure 2. The zone Q corresponds to the
complete satisfaction of the query (criteria regarding
attributes A1 and A2 are fulfilled). The basic idea is to
draw several concentric zones Cj around the zone Q
showing increasing levels of incomplete satisfaction of
the query criteria. The elements corresponding to zone
C1 are almost satisfying the criteria but the elements of
zone C4 are far from being acceptable. In order to offer a
generic solution, the zones Cj are defined by two distinct
distances for each query criterion (i.e. each slider). The
distance dlow and dupp are computed respectively from the
lower and the upper limit of the interval defined by the
criterion. In this two-dimensional concentric slider four
distances are therefore required to define the concentric
zones. This feature allows the user to specify four
distinct ways of relaxing the criteria of the query.

Planar Slider Layout
The concept of dynamic queries has proven to be
very powerful to build and interactively modify a query
(cf. [2] ). Therefore we have adopted this general
paradigm. Each query criterion is represented by a slider
defining the interval of acceptable values. We propose to
place orthogonally the two sliders in order to define a
plane (cf. Figure 1). This layout has an advantage on the
use of two independent sliders because it visually links
the two query criteria together, which offers some visual
cues to easily perceive some aggregated information on
both of them. In the example, the attribute A1 is
associated with the horizontal slider and the attribute A2
to the vertical slider.

Figure 1 Planar Slider
This new control is called “planar slider”. The
cursors of the sliders define two distinct zones that
together overlap the display space completely. The zone
Q corresponds to the elements of {QEi} that satisfy the
two query criteria. The zone NQ corresponds to the
elements of the complement subset {NQEi}. Each
element Ei of the data set will therefore belong to only
one zone. We remind that the elements Ei are not
displayed in the planar slider but in the data view that
can be any type of chart (e.g. bar chart, treemap).

Figure 2 Concentric Planar Slider
The q concentric zones Cj can be formally defined
by the expression:
Cj := {p R2 _ ( a–j dlow  x* < a–(j–1) dlow ) OR
j = 1 .. q
( b+( j–1) dupp < x*  b+j dupp}

Concentric Planar Slider
Let’s take the example of someone looking for a
new apartment. He/she can state that the rent should
ideally be between 900 EUR and 1600 EUR and the
floor area between 80 m2 and 120 m2 (these two criteria
define the query Q). However, he/she is more sensitive to
a higher rent than to a smaller floor area. Each bracket of
100 EUR above 1600 EUR would add a new serious
constraint to his/her daily life. Simultaneously, his/her
past experience tells him/her that each rent bracket of
150 EUR lower than 900 EUR corresponds to a
significant decrease in terms of conveniences. Moreover
he/she also requires that the floor area be no lower than
60 m2. This is a typical use case that our proposal intends
to tackle. The challenge is to help the user to assess
whether an apartment not selected by the query Q can
nevertheless be considered as a second choice option.

with a, b, x*, dlow, dupp  R2

(m=2)

Two strategies are available to compute the
incremental distances dlow and dupp.
First, the distance from a given threshold can be
expressed in absolute value (i.e. constant numerical
value). For instance, the distance from the lower limit of
the rent (dlow,1) is set to 150 EUR. In this example, each
150 EUR rent bracket below the ideal lower rent belongs
to a specific zone Cj. According to our example, the
distance from the upper limit of the rent (dupp,1) would be
set to 100 EUR due to the asymmetry of user
sensitiveness to the rent.
Second, the distance from a given threshold can be
computed as a relative variation of this threshold value
(expressed in terms of percentage of increase/decrease).

61

For instance, the distance from the upper limit of floor
area (e.g. dupp,2) can be set to 10%. If the upper threshold
is set to 120 m2, this means that the first concentric zone
C1 corresponds to 120 – 132 m2, the second one C2 to
132 – 144 m2, etc. Each of the four distances required to
define the zone Cj can adopt either the “absolute value”
or the “relative value” strategy to compute the increment
between two adjacent zones.

data set as well as the relative weight of a given attribute
(e.g. market capitalization of the company). The
concentric planar slider enables the exploration of the
satisfaction of the two criteria: risk level and expected
return of the company stock.
As a second example (cf. Figure 4), the concentric
planar slider can be used together with a scatterplot. In
this illustrative case, shape (v1) is used to identify the
elements of {QEi} (cf. zone Q) that are represented by a
star in the data view. A color range (v2 = color) is used to
show the partial satisfaction of the criteria by the
elements of {NQEi} (cf. zones Cj).

Data View
The data view is the place where the elements Ei are
visualized. We draw the reader’s attention to the fact that
the chart used in the data view can highlight other facets
of the data than those underpinning the query Q. For
instance, the data view can display a map to show the
location of the apartments while the query involves the
rent and the floor area. In another case, the data view can
show the stocks quotes in a treemap and the query can
involve the risk level and the expected return.
Our basic idea is to draw a visual relationship
between the zone of the query control that an element
belongs to (e.g. zone Q, C1, C2 …) and the display of this
element in the data view.

Figure 4: Concentric Planar Slider and Chart
Each combination of visual mapping for v1 and v2
has a different quality in terms of cognitive perception
and semantic mapping. We do not discuss this aspect in
this paper because of the exponential number of
combinations and because this decision also typically
depends on the use case. Moreover, we did not carry out
any experiments to evaluate the relative performance of
some competing settings. However, previous research
regarding conjunction visual search may provide some
decision criteria in this matter (cf. [12] p. 154-156, [8] p.
557-559). From a cognitive point of view, the visual
mapping of the zones Cj to a continuous visual variable
also faces the challenge of perceiving different values of
this variable, (cf. JND Just Noticeable Differences
concept thoroughly studied in psychophysics, e.g. [7] ).
The values associated to each zone Cj should therefore
be carefully chosen. It is obvious that slight differences
of hue will probably not be perceived by the user.
Our approach differs from Spence and Tweedie’s
concept of sensitivity information. Indeed, we do not
display how many criteria a given element satisfies but
we rather rely on a concept of distance. An element that
satisfies the first criteria (A1) but that is very far from
satisfying the second criteria (A2) will be located in a
concentric area far from the center. Another element that
just fails to satisfy both criteria A1 and A2 will be located
in the concentric area near the centre. Moreover, our
concept supports asymmetric zones around Q. In other
terms, the sensitivity to the lower or upper limit of the
query intervals can be different from each other. This
feature allows the user to explore the dataset while taking
into account query idiosyncrasies coming from the very
nature of real life. Finally, the visual simplicity of the
concentric planar slider makes it intuitive to realize what
the settings currently in use are.

Figure 3: Concentric Planar Slider and Treemap
The zone Q is conceptually different from the zones
Cj because the former refers to the satisfaction of the
query criteria and the latter to their non-satisfaction.
Consequently, we think that their related elements Ei
should also be clearly distinguished in the data view.
We suggest to highlight the elements of {QEi} (cf.
zone Q) with a visual property v1. Many visual properties
can be used for this purpose, such as color, shape or
icons. A visual property v2 will be used to show how
well the remaining elements belonging to {NQEi} satisfy
the query (cf. zones Cj). A continuous visual variable
(e.g. color range) should probably be preferred for v2 as
this variable is linked to the degree of query satisfaction.
If the user prefers to use the same visual property for
both mapping (i.e. v1 = v2) it is recommended to select
clearly distinct values.
Figure 3 shows how a concentric planar slider can
be used to query data visualized by a treemap in the data
view. In this example, the zone Q is mapped to the green
color and the zones Cj to a monochromatic orange color
scale. A double coding (i.e. background pattern) is used
to facilitate the perception of zone Q. Each nested
rectangle of the treemap is colored according to its
degree of satisfaction of the query criteria. The treemap
conveys some information regarding the structure of the

62

Specifying the query Q requires choosing the two
related attributes and the threshold values. The attributes
are assigned via a contextual menu and the threshold
values are set by moving the cursors of the sliders.
Moreover, the user can change the query Q simply
be clicking into a given zone of the concentric planar
slider. For instance, in Figure 7 the query Q1 was first
associated to the central yellow zone. Next the user has
activated the top right zone to define a new query Q2.
The concentric zones Cj are automatically updated to
refer to the new query Q2. Color coding may be changed
if appropriate. Regarding the zones Cj the user only need
to select a basic color (e.g. green, blue) and the
application automatically computes the needed shades.

4. Prototype
The concept of concentric planar slider has been
integrated into a software tool that we have
incrementally designed and developed in past projects
(cf. Figure 14: main user interface with a treemap used in
the data view). This paper only discusses the concentric
planar slider component but the application obviously
offers additional features.

Figure 7: Changing query Q

Figure 5: Main User Interface of the Prototype

The user can specify the strategies used to compute
the concentric zones Cj. Two strategies (cf. section
introducing the concentric planar slider concept) are
available to define the four incremental distances (cf.
Figure 2). Each border of the Q zone (top, right, bottom,
left) can be given a distinct strategy whose settings may
be interactively modified (cf bottom part of Figure 6).
The chosen strategies can be reminded within the
concentric planar slider by optional labeled arrows (cf.
Figure 7).
The zones Q and Cj of the planar slider can display
aggregated information about the elements that they
include. In the example (cf. Figure 6), the number of
elements belonging to the zone Q is displayed. However,
other aggregation functions could be potentially useful,
like the sum or the mean of a given attribute for the
elements of the zone.
A pie chart is displayed on the right of the
concentric planar slider (cf. Figure 6). This component
shows the distribution of the elements Ei among the
zones Q and Cj. Indeed, most of the time the elements
are heterogeneously distributed according to the
attributes used in the query. Consequently a small zone
in the concentric planar slider can include much more
elements of the data set than a larger zone. The pie chart,
which is synchronized in real time with the settings of
the concentric planar slider, can help the user to gain
insight into the data from this point of view. For
instance, he/she may want to know which proportion of
the apartments have just failed to satisfy the criteria
about the rent and floor area and are therefore located in
the closest zone C1 surrounding Q.
The application allows the user to focus on the
elements that belong to a specific zone Q or Cj. The user
can activate or deactivate individually each zone simply

Several interactive data views are available like tree
view, pie chart, temporal chart, bar chart, table or
treemap. The concentric planar slider is used to
interactively query the dataset and to show in real time
which zone (cf. Q, Cj) the elements displayed in the data
view belong to. We remind that the data view can
highlight some aspects of the data (e.g. hierarchical
structure, temporal evolution, relative value of some
attributes) that are not involved in the query.

Figure 6: Concentric Planar Slider component
The main features of our implementation of the
concentric planar slider concept are described below.
The component can be integrated into the main window
of the application (cf. Figure 5) or displayed in a separate
one (cf. Figure 6). The features available in both settings
are the same. They are directly accessed in the latter and
via a contextual menu in the former.

63

by clicking on it in the concentric planar slider or on its
corresponding slice in the pie chart. The corresponding
elements are visually marked in the data view (e.g.
background color) while the elements belonging to
inactive zones are visually deactivated (e.g. colored in
grey). For instance, in Figure 8 the user has selected the
elements satisfying the query (yellow) and those having
just failed to satisfy it (green corresponding to C1 zone)

only for queries based on two criteria. Further work will
explore how to generalize the approach to a higher
number of criteria because the orthogonal layout of the
sliders is not appropriate in this case. Third, this new
component will be included in the next release of our
visualization tool. We plan to collect feedback in order to
assess its usefulness and ease-of-use in real settings.

References
[1]

[2]

[3]

[4]

Figure 8: Focus on selected zones
The user can also add some absolute limits to the
acceptable values of the attributes. For instance, the floor
area of the apartment should not be lower than 60 m2.
He/she simply has to activate an optional specific cursor
called “absolute limit” (cf. red line in Figure 9). The
elements Ei beyond this limit will always be excluded
and displayed as such in the data view (e.g. displayed in
a specific color or pattern).

[5]

[6]

[7]
[8]
[9]
[10]

[11]

Figure 9: Absolute limits
[12]

Conclusions
[13]

The main contribution of this paper is the concept of
concentric planar slider from a conceptual and practical
point of view. We have proposed an evolution of the
former concepts of sensitivity information and degree of
satisfaction of query criteria and we have proposed a
concrete way to implement our approach in a prototype.
Nevertheless, some questions remain open. First, the
concentric planar slider is only discussed for a specific
class of queries. Second, we propose an implementation

[14]

64

S. Abiteboul, R. Agrawal, P. Bernstein et al. The Lowell
Database Research Self-Assessment. Communications of
the ACM, 48, 5 (May 2005), 111-118.
C. Ahlberg, C. Williamson, and B. Shneiderman.
Dynamic Queries for Information Exploration: an
Implementation and Evaluation. Proceedings of ACM
Conference on Human Factors in Computing Systems
(Monterey, CA, USA, 3-7 May, 1992), ACM Press, 61926.
O. Hoeber and X.D. Yang. The Visual Exploration of
Web Search Results Using HotMap. Proceedings of 10th
International Conference on Information Visualization
(London, UK, 5-7 July, 2006). IEEE Computer Society.
157-165.
J. Huo. KMVQL: a Visual Query Interface Based on
Kanraugh Map. Proceedings of the working Conference
on Advanced Visual Interfaces (Napoli, Italy, 28-30 May,
2008). ACM Press, 243-250.
S. Jones. 1998. Graphical Query Specification and
Dynamic Result Previews for a Digital Library.
Proceedings of the 11th Annual ACM Symposium on User
interface Software and Technology (San Francisco, CA,
USA, November 01 - 04, 1998). ACM Press, 143-151.
D. Keim and H.-P. Kriegel. VisDB: Database
Exploration Using Multidimensional Visualization. IEEE
Computer Graphics and Applications, 14, 5, 40-49
(1994)
G. Mather. Foundations of Sensation and Perception, 2nd
Ed., Psychology Press, Hove, UK. 2009.
S.E. Palmer. Vision Science, Photons to Phenomenology.
MIT Press, Cambridge, MA, USA. 1999.
R. Spence. Information Visualization. ACM Press
Books. 2001.
R. Spence and L. Tweedie. The Attribute Explorer:
information synthesis via exploration. Interacting with
Computers, 11, 2 (December 1998), 137-146.
A. Spoerri, A. InfoCrystal: a visual tool for information
retrieval & management. Proceedings of 2nd
International Conference on Information Knowledge and
Management (Washington, DC, USA, 1-5 November,
1993), ACM Press, 11-20.
C. Ware. Information Visualization, Perception for
Design, 2nd Edition. Morgan Kaufmann Publishers, San
Francisco, CA, USA. 2004.
C. Williamson, C. and B. Shneiderman. The Dynamic
Homefinder: evaluating dynamic queries in a real estate
information exploration system. Proceedings of the 15th
ACM Conference on Research and development in
information retrieval (Copenhagen, Denmark, 21-24
June, 1992), ACM Press, 338-346.
D. Young and B. Shneiderman. A graphical query / flow
model for Boolean queries: An implementation and
experimentation. Journal of the American Society for
Information Science, 44, 6, 327-339. (1993).

