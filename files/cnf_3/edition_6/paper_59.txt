WSMOViz: An Ontology Visualization Approach for WSMO
Mick Kerrigan
Digital Enterprise Research Institute (DERI),
Leopold-Franzens Universit¨at Innsbruck, Austria
mick.kerrigan@deri.org
Abstract
The Web Service Modeling Ontology (WSMO) is a conceptual model for creating semantic descriptions that can
be used to resolve interoperability issues between web services. These descriptions can be used to dynamically discover, compose, mediate, select and invoke web services.
Tool support for WSMO is in its infancy and there is a need
for tools that support the creation of WSMO descriptions
and provide value added features to the users of such tools
by exposing the complexities that exist within these descriptions. This paper introduces WSMOViz, an integrated
ontology engineering and ontology visualization tool for
WSMO, supporting the user through the ontology engineering process.
Keywords—WSMO, Ontology Visualization, Ontology Engineering

1

Introduction

The Web Service Modeling Ontology (WSMO)[3] is a
relatively new technology. As with any new technology it
is important that potential new users can obtain easy access to it, to ensure the technology is adopted. While tools
for creating ontologies have been available for many years,
the most widely used being Prot´eg´e[6], tool support for
WSMO is in its infancy. Until recently the only mechanism for creating WSMO descriptions was by hand using
a text editor. There are inherent problems in this mechanism as the user must keep in mind both the syntax of
what they are writing and the complexities of the semantics at the same time. As semantic descriptions become
more and more complex it becomes nearly impossible for
a user to grasp these complexities by looking at the raw
descriptions. Also even minor errors in the syntax of the
descriptions result in invalid documents.
The goal of this research is to look at meaningful and
straightforward mechanisms for creating and managing the
core elements in WSMO, namely ontologies, web services,
goals and mediators. The focus is directed towards more
advanced mechanisms for building these semantic descriptions than the standard approach of having the user fill out

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

large numbers of forms. The aim is also to expose many
of the additional complexities that exist within a WSMO
description that usually remain hidden from the user.
Many attempts at visualizing ontologies using graphs
have been made. Most have resulted in either oversimplified tools that do not provide any additional information to the user or over-complicated tools that show too
much information and thus are unusable. The approach
proposed in this thesis tries to find a balance between ease
of use and exposing complexities within the semantic descriptions. This is achieved by introducing a number of
different semantic-levels over the description that allow the
user to focus in on a given element in the description and
gain more insight on the relationships it has with other elements.
Existing visualization tools for ontologies tend to bolt
on top of an existing ontology engineering solution and
thus only provide part of the needed functionality. Users
of these tools need to switch back and forth between an
ontology engineering tool and the visualization solution.
This paper introduces WSMOViz, which is aimed at not
being another ontology visualization tool but an ontology
engineering tool based upon visualization techniques. This
essentially means embedding editing functionality for all
the features of WSMO within the visualization of the semantic description.
The paper is structured in the following way: Section 2 introduces the Web Service Modeling Ontology
(WSMO), its formalism the Web Service Modeling Language (WSML) and its execution environment the Web
Service Execution Environment (WSMX). The Web Service Modeling Toolkit (WSMT), that provides the framework for WSMOViz, is described in section 3. Section 4
provides a list of requirements that an ontology engineering tool for WSMO should meet, while section 5 describes
WSMOViz in detail. Some related work in the areas of ontology engineering and ontology visualization is presented
in section 6. Finally section 7 provides an analysis of WSMOViz with respect to the requirements outlined in section
4 and some future directions for the research.

2

WSMO, WSML & WSMX

The Web Service Modeling Ontology (WSMO)[3] is
a conceptual model for creating semantic descriptions for
web services that can be used to resolve interoperability issues between web services. WSMO is based on the Web
Service Modeling Framework (WSMF)[4] and as such, is
based on the four main elements of the WSMF: ontologies,
web services, goals and mediators. The aim of WSMO
is to solve the integration problem by describing web services semantically and by removing ambiguity about the
capabilities of a web service and the problems it solves.
The Web Service Modeling Language (WSML)[9] is
a formalization of the WSMO ontology, providing a language within which the properties of Semantic Web Services can be described. There are five language variants, based on Description Logic and Logic Programming.
Each language variant provides different levels of logical expressiveness[9]. These variants are: WSML-Core,
WSML-DL, WSML-Flight, WSML-Rule and WSMLFull. WSML-Core, which corresponds to the intersection
of Description Logic and Horn Logic, provides the basis
for all the variants, while WSML-Full unites the functionality of all variants. WSML Core is extended in the direction of more expressive Description Logic by WSMLDL and towards Logic Programming by WSML-Flight and
WSML-Rule.
The Web Service Execution Environment (WSMX)[7]
is a reference implementation of WSMO and an execution
environment within which semantic descriptions of the
user’s goal and the provider’s web service can be used to
discover, compose, mediate, select and invoke web services
that match the end users requirements. The completed
WSMX system will allow service providers to describe
their web services in WSML and publish these descriptions to the WSMX system. When end users send goals,
described in WSML, to WSMX, these goals are matched
against the capabilities of the web services registered with
the WSMX system. These services can then be invoked to
realize the users’ goals.

3

The Web Services Modeling Toolkit

The Web Services Modeling Toolkit (WSMT) is a collection of tools for Semantic Web Services implemented
in the Eclipse1 framework. The WSMT is made up of a
number of Eclipse editors, used for editing documents, and
Eclipse views, used to provide added-value views over the
document content. A number of Eclipse perspectives are
used in the WSMT to group, position and arrange these
editors and views. There are three perspectives in the
1 http://www.eclipse.org
2 http://wsmo4j.sourceforge.net
3 http://dev1.deri.at/wsml2reasoner/

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

WSMT; The WSML Perspective for engineering WSMO
ontologies, web services, goals and mediators in WSML,
The WSMX Data Mediation Perspective for creating
mappings[10] between WSMO ontologies that can be used
for runtime instance transformation in WSMX and The
WSMX Perspective for managing the WSMX environment. This section will focus primarily on The WSML
Perspective as this is the perspective used for engineering descriptions in WSMO and provides the location of
WSMOViz, along with the tools that support WSMOViz.
Each of the Eclipse plug-ins that make up this perspective
are described below:
• WSMO4J Plug-in: The WSMO4J plug-in provides
access to the functionality of WSMO4J2 , which is a
parser, serializer and object model for WSMO documents. This plug-in provides a standard integration
point for all tools that need to perform some operation on WSMO descriptions.
• WSML Plug-in: This plug-in layers on top of the
WSMO4J plug-in and provides Eclipse GUI related
functionality for WSML. This functionality includes
graphical wizards for creating new WSML projects
and files, a builder for validating all of the WSML
files in the workspace (using the validator supplied
in WSMO4J) and label decorations for graphically
marking (certain) files as having errors. Errors and
warnings generated by the builder are also displayed
in the default Eclipse ’Problems’ view.
• Reasoner Plug-in: The WSML reasoner plug-in exposes the functionality of the WSML 2 Reasoner3
to other plug-ins in the WSMT. The reasoner can
translate the ontology elements in a WSML description into predicates and rules and provides a facade
allowing integration with many different underlying
reasoners.
• Reasoner View Plug-in: This plug-in creates an
Eclipse view based upon the functionality of the
WSML reasoner plug-in. This provides a view on
the current open ontology and allows the user to execute queries over this ontology. The results of the
query are displayed to the user in a list. These results
can then be browsed and the view of the ontology is
updated to move the user to the selected entity in the
result list.
• WSML Text Editor Plug-in: The WSML Text Editor Plug-in provides a text editor for editing the

human readable syntax of WSML. This text editor
presents advanced features so that users who prefer
to work with the raw syntax of a WSML document
can get added value from the tool set. These features
include syntax highlighting, syntax completion, error notification and entity folding (the ability to collapse a given section of the semantic description to
make the document more readable).
• WSMOViz Editor Plug-in: WSMOViz is the subject of this paper and is described in detail in section
5.

4

Ontology Engineering Tool Requirements

In order for ontology engineering tools to be useful to
end users it is important that they fulfill a number of requirements. These requirements are good metrics for analyzing the usefulness of a given tool. The requirements
described in this section where derived from a thorough
analysis of the state of the art in tools for ontology engineering.
• Format Abstraction: All ontology languages have
some underlying format, that is usually based on
plain text or XML. Much of the effort that ontology
engineers spend while creating a semantic description centers around correctly building up the format
of the document. This effort is mostly wasted as it
is not seen in the end product of the work. It is important that tools give this wasted time back to the
user, so that it can be spent creating better semantic
descriptions.
• Design Flexibility: Each ontology engineer will
build semantic descriptions in a different way. Some
may focus on creating a skeleton for the description
first and fill in the detail later, while others will completely describe each element before moving onto
the next. Neither of these approaches is wrong and
it is important for an ontology engineering tool to be
flexible in the ways in which the designers can create
their descriptions.
• Correctness: Humans inherently make mistakes
when performing tasks. It is important that any semantic description created in a ontology engineering tool is validated and checked for correctness.
The ontology engineer should be made aware of any
omissions or faults in the semantic descriptions they
have created while still providing the design flexibility mentioned above.
4 http://jpowergraph.sourceforge.net

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

• Completeness: Each ontology language provides a
different set of features and the users of these different languages have chosen a given language over the
others based on the features it provides. It is important that any ontology engineering tool for a given
language supports the complete feature set of that
language. In the context of WSMO it is important
that tools for creating WSMO descriptions treat ontologies, web services, goals and mediators equally
and expose all the features that these elements provide.
• Showing Complexity: As semantic descriptions become more complex it becomes harder and harder
for the ontology engineer to keep track of the relationships that exists between different elements in
the description. A tool for ontology engineering
should be able to provide users with information on
these complex relationships at a glance.

5 WSMOViz
As already described the aim of WSMOViz was to build
an integrated ontology engineering and ontology visualization tool such that the user can get the benefits of the visualization approach as they edit the ontology. WSMOViz
uses a graph based approach based upon JPowerGraph4 ,
which was developed within the context of this research.
With any graph based solution the question of scalability becomes an issue. As semantic descriptions become
larger and more complex many graph visualization solutions fall down. Existing tools attempt to resolve these issues in a number of ways, normally by graph manipulation
techniques (for example zoom and rotate), providing filtering functionality for removing nodes from the graph, using
”intelligent” layout strategies or reducing the types of complexities that the visualization can display. WSMOViz incorporates some of these techniques with some new mechanisms and produces a visualization tool with full editing
support that tries to meet the ontology engineering requirement of Showing Complexity while addressing the graph
scalability problem. The techniques used are as follows:
• Basic Manipulation: There are a number of primitive manipulation techniques that users are familiar
with from web browsers, word processing and image manipulation applications that can be employed
in an ontology visualization tool. The techniques
employed in WSMOViz include zoom functionality
for increasing or decreasing the amount of the graph
currently visible, rotation functionality for changing
the orientation of the graph and drag-and-drop for
moving and rearranging the nodes in the graph.

Figure 1: Ontology and concept semantic levels
• Layout: JPowerGraph uses a ”Spring” layout algorithm to display a graph containing nodes and
edges. Spring layout is a commonly used algorithm
for laying out 2D graphs based on the concept of
spring forces. Nodes in the graph are automatically
arranged based on the internal structure of the graph.
If two nodes are connected then they are attracted to
one another, otherwise they are pushed apart. The
result of this layout technique is that semantically
similar things (denoted as semantically similar due
to the edges between them) are displayed in groups
close to each other.
• Filtering: When developing JPowerGraph to support the features of WSMOViz an interactive dynamic legend was built. The legend appears in the
bottom left hand corner of the graph and is automatically updated with a list of the node types in
the graph. The legend is interactive in that there
is a check box beside each of the node types and
unchecking a given node type results in nodes of this
type being removed from the graph.
• Semantic Levels: As already mentioned, one common approach to resolving the graph complexity issue is to remove certain types of complexities from
the graph. For example OWLViz5 does not show the
properties of classes in an OWL ontology. This solution inevitably results in a suboptimal visualization
5 http://www.co-ode.org/downloads/owlviz/

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

solution that does not meet the ontology engineering requirement of Showing Complexities, as it does
not show all types of complexities. WSMOViz approaches the problem in a different manner; complexities are grouped together into Semantic Levels with each of these levels being associated with
a given entity type in WSMO. Thus at any semantic level all the complexities needed by the user are
visible. If the user wishes to see more detail about
a given entity they can double click on it; this will
change the focus of the visualization onto this entity and the complexities relevant to this entity can
be seen. An example of the division of complexities that occurs in the semantic levels can be seen
in figure 1 showing the difference between the ontology and concept semantic levels. At the ontology level concepts, instances, relations, relation instances and axioms are displayed. At this level the
user can gain information about the structure of the
ontology, with respect to the subConceptOf, subRelationOf and memberOf relationships in a WSMO
ontology. By double clicking on a given concept
the user can switch to the concept semantic level.
At this level the selected concept is displayed along
with all of its super concepts, direct sub concepts and
instances. Also at this level all the attributes of the
concept can be seen along with their ranges, thus allowing the user to see more information about the

Figure 2: WSMO Studio Navigator
concept and to see more clearly the relationship that
this concept has with other entities in the ontology.
• Semantic Highlighting: In cases where the concept
hierarchy becomes very complicated it can become
necessary for the user to constantly switch to the
concept semantic level and back up to the ontology
semantic level to understand the concepts in the hierarchy. This is sub-optimal; to resolve this issue
the concept of Semantic Highlighting has been introduced. Semantic Highlighting allows the user to
see a part of the underlying semantic levels without
dropping down into that semantic level. For example
by selecting a concept in the concept hierarchy (with
a single click as opposed to a double click) all the
super concepts, direct subconcepts and instances of
that concept are highlighted (along with the concept
itself). All unrelated concepts in the hierarchy are
faded and the user can now see the relationship the
concept has with other concepts in the ontology.

6

and provides a number of tabs that can be accessed by the
user for building ontologies and creating instance data.
The main limitation of the Prot´eg´e OWL Plugin is that
OWL ontology documents are displayed in a tree structure, when in fact these documents represent graphs. This
results in a limitation of the information that can be shown
to the user, especially with respect to the complexities that
exist between the entities in the ontology. At a glance the
user can also become confused regarding the super-classes
of a given class, because if the whole tree is not expanded
multiple inheritance relationships are not visible. This limitation has been noted many times and has resulted in the
creation of many ontology visualization extensions to the
Prot´eg´e OWL Plugin, for example OWLViz, TGVizTab[1]
and Jambalaya[11]. However these extensions are built on
top of the Prot´eg´e OWL Plugin and the user must switch
back and forward between the ontology engineering and
ontology visualization tools. Thus the resulting solution is
not a fully integrated environment for ontology engineering.

Related Work

This section looks at related efforts in ontology engineering and ontology visualization with respect to the Web
Services Modeling Ontology (WSMO) and other ontology
languages.

6.1

Prot´eg´e OWL Plugin

Prot´eg´e[6] is a free open source ontology engineering
environment that can be extended to support different ontology formats. Through a collection of these extensions
Prot´eg´e currently supports Frames, XML Schema, RDF(S)
and OWL. The Prot´eg´e OWL Plugin[8] was developed at
Stanford Medical Informatics6 as a tool for editing the Web
Ontology Language (OWL)[2]. The plugin attempts to abstract the user away from the underlying OWL RDF syntax
6 http://smi.stanford.edu/
7 http://www.ontotext.com

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

6.2 WSMO Studio
WSMO Studio is a collection of tools for editing
WSMO descriptions developed for the Eclipse Framework
by OntoText Labs7 , Sirma. WSMO Studio displays the
entities contained within a WSML document as a tree hierarchy and allows the user to edit these entities via a collection of forms. The approach taken in WSMO Studio is very
similar to that taken in Prot´eg´e, however instead of providing a collection of tabs that can be used to edit different
objects in the ontology, a different editor is available for
each object type. WSMO Studio also offers a syntax highlighting text editor for the WSML human readable syntax.
This text editor allows more advanced users who prefer to
edit the WSML syntax to get some advantage from the tool

set. Keywords in the WSML Syntax, for example ’concept’, ’instance’, ’subConceptOf’ etc.. are highlighted in a
color of the users choice.
WSMO Studio has the same limitation as the OWL
Prot´eg´e Plugin in that the user can become confused with
respect to the subConceptOf relationship between the concepts displayed in the tree structure as can be seen in figure
2.

7

Conclusions & Future Work

Returning to the requirements for ontology engineering
tools outlined in section 4, the performance of WSMOViz
with respect to these requirements can be seen. By its very
nature as a graph based ontology engineering tool WSMOViz meets the requirement of format abstraction. The
user does not need to build up the syntactic structure of
the WSML description and can use the reclaiming time for
engineering better semantic descriptions. WSMOViz imposes no restrictions on the way in which users create their
WSML semantic descriptions. At a given point in time
the semantic description may be invalid (i.e. the user may
not have filled in all the necessary information for a valid
WSML document), the user is constantly informed in cases
where the semantic description is invalid by the validation
component in the WSML plug-in described in section 3.
This allows the user to build the semantic description in
a flexible manner without the risk of creating invalid descriptions, thus fulfilling the requirements of Design Flexibility and Correctness. WSMOViz is capable of visualizing
WSMO ontologies, web services, goals and mediators and
the tool treats them as equals, fulfilling the requirement of
Completeness. Finally WSMOViz has attempted to strike
a balance between having a usable uncluttered graph and
meeting the requirement of Showing Complexities. This
balance is achieved by separating the complexities into semantic levels and allowing the user to browse the semantic description in a ”web browser” fashion, revealing more
complexities and hiding others as the user browses the description.
WSMOViz currently behaves well for well structured
ontologies that have a good hierarchy, however it does have
issues visualizing ontologies that contain large numbers of
instances or that have a very flat concept hierarchy. A number of solutions have been proposed to resolve these issues.
The first is to implement the ”node clustering” technique
proposed in [5]. In this technique where large numbers
of instances exist these instances are clustered together so
that the structure of the ontology can be displayed. Secondly it is proposed that this technique can be extended to
deal with ontologies that have large numbers of top level
concepts that have no super or subconcepts. By clustering
these concepts together the more complex structures in the
ontology can be seen more clearly.

Proceedings of the Information Visualization (IV’06)
0-7695-2602-0/06 $20.00 © 2006

IEEE

References
[1] H. Alani. TGVizTab: An Ontology Visualisation Extension for Prot´eg´e. In Proceedings of the Workshop
on Visualization Information in Knowledge Engineering (K-CAP), 2003.
[2] World Wide Web Consortium. OWL Web Ontology
Language Reference. Technical report, Feb 2004.
[3] C. Feier, A. Polleres, R. Dumitru, J. Domingue,
M. Stollberg, and D. Fensel. Towards intelligent
web services: The web service modeling ontology
(WSMO). International Conference on Intelligent
Computing (ICIC), 2005.
[4] D. Fensel and C. Bussler. The Web Service Modeling Framework (WSMF). Electronic Commerce Research and Applications, 1(2):113–137, 2002.
[5] C. Fluit, M. Sabou, and F. van Harmelen. Supporting user tasks through visualisation of light-weight
ontologies.
[6] J. Gennari, M. A. Musen, R. W. Fergerson, W. E.
Grosso, M. Crubzy, H. Eriksson, N. F. Noy, and S. W.
Tu. The Evolution of Prot´eg´e: An Environment for
Knowledge-Based Systems Development. Technical
report, 2002.
[7] A. Haller, E. Cimpian, A. Mocan, E. Oren, and
C. Bussler. WSMX - A Semantic Service-Oriented
Architecture. International Conference on Web Services (ICWS 2005), July 2005.
[8] H. Knublauch, R. Fergerson, N. Noy, and M. Musen.
The Prot´eg´e OWL Plugin: An Open Development
Environment for Semantic Web Applications. In
Proceedings of the Third International Semantic Web
Conference (ISWC), Nov 2004.
[9] H. Lausen, J. de Bruijn, A. Polleres, and D. Fensel.
WSML - a Language Framework for Semantic Web
Services. W3C Workshop on Rule Languages for Interoperability, April 2005.
[10] A. Mocan and E. Cimpian. Mapping creation using a
view based approach. 1st International Workshop on
Mediation in Semantic Web Services (Mediate 2005),
December 2005.
[11] M.-A. D. Storey, M. A. Musen, J. Silva, C. Best,
N. Ernst, R. Fergerson, and N. F. Noy. Jambalaya:
Interactive Visualization to Enhance Ontology Authoring and Knowledge Acquisition in Prot´eg´e. In
Proceedings of the Workshop on Interactive Tools for
Knowledge Capture (K-CAP), 2001.

