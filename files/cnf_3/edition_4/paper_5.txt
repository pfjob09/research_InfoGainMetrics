12th International Conference Information Visualisation

Visualization of Clustered Directed Acyclic Graphs without Node Overlapping
Pushpa Kumar, Kang Zhang, Yuke Wang
University of Texas at Dallas
{pkumar, kzhang, yuke@utdallas.edu}
dynamic graph drawing. ODNLS preserves the same
orthogonal order as the original input layout, and thus
preserving the mental map. The attractive and repulsive
forces in this model are calculated using the spring’s
dynamic natural length instead of fixed natural length.
This method produces favorable results over the previous
force scan (FS) family of algorithms which are
simplified spring models. With a running time of O(n2),
ODNLS works well for small graphs. The combined
method of constructing a globally nice layout using the
Kamada-Kawai [2] method and local beautification using
the modified (or generalized) spring method [6] has been
proposed for non uniform nodes. Almost all of the
algorithms using the spring model consider nodes as
physical bodies of equal size. Space partitioning
algorithms are implemented by the Barnes-Hut algorithm
[3] that uses divide-and-conquer method to find clusters
of particles and visualizes them as octtrees or quadtrees.
LGL [4] or GEM [5] algorithms are tree drawing
algorithms that prevent node-node overlapping using a
spanning tree. However the difficulty is to select the
spanning tree and to take into account the missing edges.
This paper presents an E-Spring algorithm for node
overlap removal in finite clustered directed acyclic
graphs a.k.a. DAGs which are directed graphs with no
directed cycles. The main contribution of the paper is to
propose a novel method for visualizing finite DAGs in
such a way that the nodes do not overlap. It is our
observation in clustered DAGs that weaker repulsive
forces exist between source and sink vertices within a
cluster resulting in node overlap, while stronger
repulsive forces between source and sink nodes in a
different cluster tend to pull them apart as shown in
Figure 1. Our intention is to strengthen this weak
repulsive force between the nodes, that pulls the source
and sink nodes apart.

Abstract
Conventional force directed graph drawing methods aim
to produce aesthetically pleasing visualization of graphs.
The edges of the graph have more or less equal length,
and there are as few crossing edges as possible. This
paper proposes a new E-Spring algorithm for visualizing
clustered directed acyclic graphs (DAGs) without node
overlapping, extended from the popular spring embedder
model. In our framework, nodes are modeled as nonuniform charged particles with weights, and a final
drawing is derived by adjusting the positions of the
nodes according to a combination of spring forces and
repulsive forces derived from electrostatic forces
between the nodes. Experimental results and
visualization/analysis of this method are reported.
Keywords--- visualization, directed acyclic graphs,
force directed, electrostatic forces

1. Introduction
Graph drawing and visualization is an area of
extensive research for many practitioners. Applications
of graph drawing include genealogy, cartography,
sociology, software engineering, VLSI design, and
visualization of hypertext links. Cluttered drawings of
graphs generally produce undesirable visualizations.
Various algorithms have been proposed to eliminate this
problem [1][7][8][9] and the node label placement (NLP)
problem has been proved to be NP-Hard [9].
Force directed graph drawing algorithms [6] are
increasingly popular in information visualization, and are
well known for achieving good results for undirected
graphs with respect to the following aesthetic criteria:
uniform edge length, uniform vertex distribution, nonoverlapping nodes and overall symmetry. In this
framework, nodes act as physical bodies and edges are
represented by springs which provide forces between the
bodies, and a good layout configuration is obtained when
locally minimal energy is achieved. DNLS (dynamic
natural length spring) and ODNLS (orthogonal dynamic
natural length spring) are two relevant algorithms
proposed by Li et al. [8] that are based on the spring
embedder model which will serve as a basis for our
proposed algorithm. While DNLS is designed for
visualization of static graph drawings, ODNLS is for

1550-6037/08 $25.00 © 2008 IEEE
DOI 10.1109/IV.2008.85

CLUSTERS WITH
OVERLAPPED
NODES

Figure 1: Node overlap in clusters

38

Many existing graph layout algorithms assume that
nodes are points. In practice, however, nodes may be
labeled and these labels may overlap. In our model,
nodes may have different sizes.
If nodes are not
considered as points in the plane, only computing the
minimum distance between the centers of two adjacent
labeled nodes is not sufficient for removal of overlap,
hence node-node repulsion forces are computed to
achieve the removal of node overlap. In this paper we
assume that these nodes are positively charged. When
scanning the tree, we mark the parent nodes and draw a
sub-tree for each of these nodes. The forces on a given
node come from two sources, one from spring forces and
the other caused by electric fields acting upon nonuniform charges. Experimental analysis and visualization
of this method reveal promising results.
The rest of this paper is organized as follows.
Section 2 outlines the method. Section 3 presents details
of the E-Spring algorithm. Section 4 provides
experimental results and analysis. Section 5 describes
related work. Finally, a conclusion is given in Section 6.

of hierarchy levels in the tree, and a force scaling factor.
For this purpose, node space is defined as the space
surrounding a node. We apply the new force function
based on the weights and the additional displacement
contributes to node overlap removal. The forces are
applied to each node and the positions are updated
accordingly. A final layout is obtained with a locally
minimum energy on the nodes when the total force on
each node in |V| is zero.

3. E-Spring Algorithm
Consider a finite clustered directed acyclic graph
GD(V, E) where V is the set of nodes and E is the set of
edges between the nodes. A DAG is a directed graph
with no directed cycles that is, for any vertex v, there is
no nonempty directed path that starts and ends on v. A
source is a vertex with no incoming edges, while a sink
is a vertex with no outgoing edges. A finite DAG has at
least one source and at least one sink. Every directed
acyclic graph has a topological sort, an ordering of the
vertices such that each vertex comes before all vertices it
has edges to. In general, this ordering is not unique.
DAGs can be considered to be a generalization of trees
in which certain subtrees can be shared by different parts
of the tree [20]. We define a minimum distance
threshold ‘δ’ which is an acceptable margin between
parent and child nodes such that there is no overlap as
shown in Figure 3.

2. Electrostatic Forces
Our method is based upon the idea that nodes are
modeled as unequally charged particles, with springs
representing edges of the graph [6]. The attractive forces
on the springs and the repulsive forces between the
positive charges act together to generate a drawing free
of node overlaps, when this system reaches a state of
equilibrium. The spring force is derived from the
following force formula [6] according to Hooke’s law:
Fs(d) = C1log(d/C2)
(1)
where d is the spring length and C1 and C2 are constants.
The new electrostatic force generated between any two
charged particles is derived from Coulomb’s law as
follows:
Fc = kcq1q2/r2
(2)
where q1 is the charge on one body, q2 is the charge on
the other body, r is the distance between them, and kc is
the Coulomb’s force constant. The combination of Fs
and Fc is the resultant force between the two nodes.
Figure 1 depicts these forces.
|Fr| = |Fc | + |Fs|
(3)
Fs

δ
Figure 3: Minimum threshold distance
Definition 1: Consider a directed acyclic graph GD(V,
E) with a set of nodes V = {1,2,…,|V|}, and the set of
edges E ⊆ V x V. Each source node is a parent node
and belongs to the set PN ⊂ V, a node having no
children is a leaf node belonging to the set L N ∈ {C N}
where C N ⊂ V is the set of all children nodes. A parent
node together with all its direct child leaf nodes forms a
cluster.

Fc

CLUSTER 3

q1

q2

|Fc | + |Fs|
B

q2

H
E

q1

C
A

G

D

Figure 2: Electrostatic and spring forces

J

A
F

The E-Spring algorithm is derived from Coulomb’s
law. Nodes are modeled as unequal, positively charged
entities. The magnitude of charges is obtained by
calculating the weight associated with each source node.
The weight of each source node is determined by the
number of sink vertices in its immediate vicinity, number

I

CLUSTER 1

CLUSTER 2

Figure 4: Example clustered DAG structure

39

The weight of the node is the factor that is derived by
modeling nodes as charges. The force function also
preserves the initial ordering of nodes.

Force Function
Consider the clustered DAG with node ‘A’ being the
Since the E-Spring algorithm extends the original spring
force algorithm by combining the electrostatic and spring
forces, it defines a new force function Fnew as below:
Fnew = (EL - L + W) * k/L
(4)
where EL is the edge length connecting the parent node pi
(i = 1…n) to the child leaf node lj (j = 1…m), L is the
initial distance between the central points of the parent
and child leaf nodes, W is the weight of the parent node
pi (i = 1…n) and k is the spring constant. The weight of
the parent node Wi is derived from Definition 2, for a
greater label string length the force factor is
proportionally larger than for a shorter string length in
removing node overlaps.
Definition 2: For PN ⊂ V, the weight Wi of a parent
node pi (i = 1…k) is the product of the number of child
leaf nodes lj (j = 1…m), the depth of the parent node DT
and the force factor fi, derived as follows:

E-Spring Algorithm
input: a clustered DAG GD(V,E) with overlapping nodes
output : node overlapping eliminated in DAG GD
begin
mark parent nodes pk
compute force factor f
for each subtree i = 0 to k do
compute weight Wi
calculate new forces Fnewi
move nodes based on minimum distance threshold δ
and compute final layout
until stopping condition
end

m

Wi(Pi) = DT * fi *

∑l

j

(5)

Complexity
Spring algorithms are calculated for each edge and
this takes |E| time. The distance between nodes within
each cluster should be at least ‘δ’ apart.
This
computation takes n x n time so complexity is of the
order of O(n2).

j =1

The force function derived above utilizes the node
weight and the additional factor corresponds to the
displacement between parent and child nodes that aids in
removal of overlap.

(a) DT = 3
(b) DT = 4
Figure 5: Force directed graphs for Si = 2 without node overlap

4. Implementation and Experimental Results

respectively. Source nodes are shown marked in blue for
both cases.
Case 2 Si = 10: Figures 6a), 6b) show screenshots of
force-directed layouts for DT = 3 and DT = 4 respectively
without node overlap.
All nodes are assigned the same size and shape
within each of the above cases. With greater label string
length, nodes have much larger width than height. The
displacement generated by the combination of
electrostatic and spring forces in the vicinity of parent
nodes is measured by the average edge length.
The uniformity of edge lengths is determined by the
edge ratio which is the ratio of the longest and the
shortest edge lengths. Aspect ratio of a layout is
computed by dividing the displayed width by its
height and determines the spread of the graph.
Typically we want values of edge ratio and aspect ratio
to be close to 1. Table 1 highlights relevant statistics for
the obtained results.

The E-Spring algorithm developed in Section 3 was
implemented in Java and the new force function was
utilized to generate drawings. In our implementation,
DAG GD = (V,E) has the following parameters:
• Number of nodes |V| < 100
•

Depth 1 ≤ DT ≤ 4

•

Minimum threshold distance δ = 1

•

Spring constant k = 1/4

•

Number of child nodes in node space 1 ≤ lj ≤ 20

The following two cases of label string length Si, ( i = 1,
… ,|V|) , i.e. the number of characters Case 1: Si ≤ 5,
Case 2: 5 < Si ≤ 10, are tested. Various obtained results
are discussed in this section.
Case 1 Si = 2: Figures 5a), 5b) depict screenshots of
layouts without any node overlap for DT = 3 and DT = 4

40

(a) DT = 3

(b) DT = 4
Figure 6: Force directed graphs for Si = 10
Table 1: Statistics for experimental results

Graph
name

|V|

String
Length

Parent
node

Depth

# Leaf
Nodes

Force
Factor

Weight

Avg Edge
Length

Edge
Ratio

Aspect
Ratio

Fig. 6-(a)
Fig. 6-(b)
Fig. 6-(c)
Fig. 6-(d)
Fig. 6-(d)

24
29
29
67
67

2
2
2
2
2

a1
j1
c2
a1
c2

1
2
3
4
4

20
18
16
20
20

1
1
1
1
1

20
36
48
80
80

53.5
94
106
97
100.5

1.18
1.02
1.05
1.28
1.45

1.09
1
1.128
0.96
0.96

Fig. 6-(d)

67

2

d22

4

20

1

80

120.5

1.738

0.96

Fig. 7-(a)
Fig. 7-(b)
Fig. 7-(c)
Fig. 7-(d)
Fig. 7-(d)

24
29
29
67
67

10
10
10
10
10

isabella12
moessi1234
crazyh1234
isabella12
crazyh1234

1
2
3
4
4

20
18
16
20
20

2
2
2
2
2

40
72
96
160
160

157.5
159
161.5
270
271.5

1.1
1.107
1.109
1.109
1.109

1.11
1.07
1.09
0.94
0.94

Fig. 7-(d)

67

10

sahera1234

4

20

2

160

285.5

1.146

0.94

E-Spring method are depicted in Figures 7b) and 7d)
respectively. The animated force directed graph
generated by Prefuse is depicted by Figure 7e) for Si = 10
which shows overlap of nodes. Aesthetic improvements
obtained by our method include less cluttering and good
node overlap removal especially for greater string length.
Our method only considers a subset of initial nodes as
parent nodes for node overlap removal. Figure 8
represents summary of data collected for number of
parent nodes. The figure has two Y-axes; percentages are
quantified as bar chart rectangles, the number of parent
nodes are depicted by the line chart. We observe that the
percentage of parent nodes marked for node overlap
varies between 4.4% and 8.3% as compared to the total
number of nodes.
24

29

67

100

250

9

20

8

18
16

7

14

Percentage

6

12
5
10
4
8
3

6

2

4

1

2

0

0
24

29

67

100

250

Total nodes

Figure 8: Statistics of parent versus total nodes

41

Parent Nodes

From this table, we observe that the edge ratio
values are in the range of 1.02 to 1.738 while aspect
ratios are in the range of 0.94 to 1.128 for our
experiment. This reflects uniform edge length and
reasonably good spread of the layouts with smaller
number of nodes. For both cases, the deeper the DAG
tree, the higher the edge ratios. Aspect ratios do not
seem to follow any relevant patterns.
We also observe that the force factor f used to
calculate the weights varies with the label string length
SL, depth of parent node DT and the number of hierarchy
levels containing parent nodes with high degree of
overlap in their nodes spaces. For lower string length, f
= 1 irrespective of the number of hierarchy levels. For
parents that have overlap in a single hierarchy level as
well as multiple hierarchy levels and for higher string
length, force factor decreases as the depth increases, f α
1/DT. The average edge length EL slightly increases with
each hierarchy level increase EL α DT. The result
indicates that this method preserves the properties of
high degree of symmetry and uniform edge length.
We compare our method with layouts generated by
‘OFDAV’ [12] and ‘Prefuse’ [17] interactive
visualization toolkit for N=150. Figures 7a) and 7c)
depict initial layouts for label string lengths of Si = 2 and
Si = 10 respectively for OFDAV. This method does not
consider greater string lengths or parent-child tree
hierarchy. The corresponding visualization graphs using

a) Si = 2

b) Si = 2

c) Si = 10

d) Si = 10

e) Si = 10
Figure 7: Comparison for aesthetic improvements with OFDAV and Prefuse

computed [1]. This is performed recursively until overlap
is removed. The family of spring algorithms includes
force scan, force transfer [7], DNLS and ODNLS [8]
which modify attractive and/or repulsive spring forces
between nodes to achieve node overlap removal. A
unified approach has been developed for solving the
general labeling problem which does not favor the

5. Related Work
Much of the related work is on overlap or edge
crossing removal in general graphs, and graph clustering.
Voronoi diagrams are generated using initial node
positions, then each node is moved to the centroid of its
Voronoi cell and the number of overlapping nodes is

42

[2] T. Kamada and S. Kawai. An algorithm for drawing
general undirected graphs. Information Processing Letters.
7-15. April 1989.
[3] Josh Barnes and Piet Hut. A hierarchical O(N log N)
force-calculation algorithm. Nature. 446-449. 1986.
[4] AT Adai, SV Date, S Wieland, and EM Marcotte. LGL:
creating a map of protein function with an algorithm for
visualizing very large biological networks. Journal of
Molecular Biology. 179-190. June 2004.
[5] Arne Frick, Andreas Ludwig, and Heiko Mehldau. A
Fast Adaptive Layout Algorithm for Undirected
Graphs. Proceedings of the DIMACS International
Workshop on Graph Drawing. 388-403. 1994.
[6] Peter Eades. A heuristic for graph drawing. Congressus
Numerantium. 149-160. 1984.
[7] Xiaodi Huang, Wei Lai, A. S. M. Sajeev, and Junbin Gao.
A new algorithm for removing node overlapping in graph
visualization. Information Sciences An International
Journal. Elsevier Science Inc, 2821-2844. July 2007.
[8] Wanchun Li, Peter Eades, and Nikola Nikolov. Using
spring algorithms to remove node overlapping.
Proceedings of the Asia-Pacific Symposium on
Information Visualisation (APVIS2005). Australian
Computer Society
Inc, 131-140. 2005.
[9] Konstantinos G. Kakoulis and Ioannis G. Tollis. A unified
approach to labeling graphical features. Proc. 14th Annual
ACM Symp. Computational Geometry (SoCG'98). ACM,
347-356. June 1998.
[10] Chun-Cheng Lin and Hsu-Chun Yen. A New ForceDirected Graph Drawing Method Based on Edge-Edge
Repulsion. IV 2005. IEEE Computer Society, 329-334.
July 2005.
[11] Kim Marriott, Peter Stuckey, Vincent Tam, and Weiqing
He. Removing Node Overlapping in Graph Layout Using
Constrained Optimization. Journal Constraints. Kluwer
Academic Publishers, 143-171. April 2003.
[12] Mao Lin Huang, Peter Eades, and Junhu Wang. On-line
Animated Visualization of Huge Graphs using a Modified
Spring Algorithm. Journal of Visual Languages &
Computing. 623-645. 1998.
[13] Andreas Noack. Energy-Based Clustering of Graphs with
Nonuniform Degrees. Graph Drawing. 309-320. 2005.
[14] Xiaodi Huang and Wei Lai. Clustering Graphs for
Visualization via Node Similarities. Journal of Visual
Languages and Computing. 225-253. June 2006.
[15] Missae Yamamoto, Gilberto Camara, and Luiz Antonio
Nogueira Lorena. Fast Point-Feature Label Placement
Algorithm for Real Time Screen Maps. GeoInformatica,
77-90. 2002.
[16] Michael Kaufmann and Dorothea Wagner. Drawing
graphs, methods and models. Springer-Verlag. 2001.
[17] Jeffrey Heer, Stuart K. Card, and James A. Landay.
Prefuse: A Toolkit for Interactive Information
Visualization. Proceedings of the SIGCHI conference on
Human factors in computing systems. 421-430. April
2005.
[18] Peter Eades and Mao Lin Huang. Navigating Clustered
Graphs using Force-Directed Methods. Journal of Graph
Algorithms and Applications. 157-181. 2000.
[19] Hugo A. D. do Nascimento and Peter Eades. User Hints
for map labeling. Journal of Visual Languages and
Computing. Australian Computer Society Inc, 39-74.
2003.
[20] Wikipedia article on Directed Acyclic Graphs url:
http://en.wikipedia.org/wiki/Directed_acyclic_graph

labeling of one type of graphical entity (node, edge or
area) over another. It refines the set of label positions by
deleting a number of heavily overlapping labels and
assigning a label to each graphical feature so that there
are no overlaps [9]. For large clustered undirected
graphs, three types of spring forces-internal spring,
external spring and virtual spring that operate between
the vertices of a graph are defined for the navigation and
visualization of these graphs. In addition to spring
forces, there are gravitational repulsion forces between
all nodes [18]. A general framework called “User Hints”
treats the map labeling processes as an optimization task
and supports human interaction along with automated
methods [19]. A Fast Algorithm for Label-Placement
(FALP) for PFLP for labeling real time screen maps has
been proposed in which the largest subset of labels with
no conflicts and with good quality at acceptable runtime
is found and uses conflict graph structures for this
purpose [15]. A modified spring algorithm for online
animated visualization of huge graphs utilizes spring
forces and Newtonian gravitational forces [12].
A new approach to clustering a graph is derived by
constructing the node similarity matrix of a graph based
on a metric of node similarity, and then applying the kmeans algorithm to the matrix to obtain a hierarchical
abstract of the graph which produces a hierarchically
clustered graph [14]. An energy-based algorithm that
has two parts is the node-repulsion LinLog model and
the edge-repulsion LinLog model [13]. Adjacent graph
nodes attract while based on the model either nodes
repulse, or edges repulse. This model achieves graph
drawings with clearly separated clusters. In this paper,
we aim to achieve node repulsion for nodes of different
sizes using electrostatic forces.

6. Conclusions
A new E-spring algorithm has been proposed and
implemented for removing node overlaps in clustered
directed acyclic graphs (DAGs). We consider finite
DAGs which are directed graphs with no directed cycles
and have at least one source and sink vertices. DAGs are
a generalization of trees and a classification mechanism
that identifies nodes as parents or children within clusters
has been defined. To this end, sub-trees serve as
important structures to derive weights of parent nodes.
The force function calculated from the weights modeled
on electrostatic charges eliminates node overlap. Our
experimental visualization results are promising. Future
work includes analyzing the usefulness of this algorithm
for more graph topologies, graphs lacking a clearly
defined tree structure as well as application towards
UML class diagrams.

References
[1] David P. Dobkin, Alejo Hausner, Emden R. Gansner and
Stephen C. North. Uncluttering Force-Directed Graph
Layouts.
In Proceedings of the Fifteenth Annual
Symposium on Computational Geometry. ACM, 425-426.
1999.

43

