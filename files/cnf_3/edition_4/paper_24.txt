12th International Conference Information Visualisation

Knoocks: New Visualization Approach for Ontologies
Simone Kriglstein and Renate Motschnig-Pitrik
University of Vienna, Department of Knowledge and Business Engineering,
Rathausstrasse 19/9, A-1010 Vienna, Austria
simone.kriglstein@univie.ac.at, renate.motschnig@univie.ac.at

[2] as well as Cluster Maps [3] or Jambalaya [4]
acknowledge the user’s needs and are targeted on
instances or on leaf nodes. These visualizations allow
users to see the amount of instances at first glance, but
instance names can hardly, if ever, be recognized. Either
visualizations present the names of the instances and
therefore neglect the structure, or visualizations
concentrate on the structure but then the names of the
instances are neither visible at first glance nor intuitive
respectively.
However, in several domains the relations between
objects and the structure of the ontology as well as the
instances are important. For example in business
modeling, the kinds of business actors and processes are
important as well as the interaction between concrete
instances. In the context of education [5], ontologies
presenting curricular structures and instances are needed
to represent individual courses. This is because for
lecturers as well as students both the structure of the
curricula and the individual courses are of interest. The
respective ontologies help students to organize their
studies depending on the courses they need. For lecturers
such ontologies are helpful for getting a good overview
about the relevant relationships between the courses. For
example, they can easily see which courses are a
prerequisite of their courses. Based on this additional
information, lecturers can organize and align the content
of their courses optimally in consideration of students’
needs. Additionally, the structure of the classes within an
ontology provides a better understanding of the
curriculum structure. Without a general view of the
ontology it is difficult to find instances of a specific
class.
Based on these observations, Knoocks (Knowledge
Blocks) is developed which is a new visualization
approach to visualize OWL Lite ontologies. Knoocks
represents both the names of the instances and the
structure of the ontology. Therefore, it combines the
advantages of both views to see on the one hand the
instances and on the other hand the position of the
instance in the general view. Another main purpose of
this visualization approach is to give users a better visual
clarity. Furthermore it should help users to easily find
instances according to their interests. Knoocks is inspired

Abstract

Ontologies are becoming popular in various
communities. They give users the possibilities to
understand, exchange, analyze or share knowledge of a
specific domain. However ontologies can be very large
and complex and therefore visualizations should help the
user to understand and manipulate ontologies easily.
Most visualizations concentrate on the structure of
ontologies. For users, instances are often more
interesting, because they represent the real world
objects. This paper presents Knoocks (Knowledge
Blocks) as a visualization approach which focuses on
instances related to their structure. An evaluation which
compared Knoocks with Jambalaya and CropCircles
showed its benefits in visualizing instances.
Keywords--- Information visualization, Knoocks,
OWL Lite, ontologies requirements, user interface
design

1. Introduction
According to Fensel [1], an ontology is an explicit
conceptualization of a specific domain and provides a
vocabulary of terms and relations to model the domain.
Classes present the relevant concepts and describe the
abstract model of the domain. For every class, instances
present objects of this class.
Ontologies are becoming popular in various
communities because they provide a common
understanding of the domain which can be
communicated between people and applications [1].
Furthermore they allow for sharing, exchanging and
analyzing of domain knowledge. However, ontologies
can become very large and complex and without
visualization it can be very difficult to work with them.
Therefore, the main purpose of ontology visualization is
to help users to understand and manipulate ontologies.
Most of the visualizations, particularly tree
visualizations, concentrate on presenting the structure of
ontologies. However in many cases instances are more
interesting for the user because they present the
application objects. Space filling methods like Treemap

1550-6037/08 $25.00 © 2008 IEEE
DOI 10.1109/IV.2008.16

163

by the space filling approaches, in particular of
Treemaps, because it shows instances within their
classes. Another inspiration is the intended list. The
advantage of this visualization is that such lists are
familiar to the user since they are used in numerous file
browsers (for example Microsoft Windows Explorer).
Furthermore, they provide a clear view of classes and
their hierarchy. Additionally, they allow quick browsing
and the labels do not overlap. Space Trees [6] are another
source of inspiration, because users can see the depth and
average width of the subtrees at first glance. For this
purpose Space Trees use triangle icons which symbolize
the collapsed subtrees and the sizes of triangle icons are
proportional depending on the size of the subtrees.
In Section 2 several visualization techniques related
to Knoocks will be discussed in more detail to show their
advantages and drawbacks. In Section 3 the new
visualization approach Knoocks is discussed which
shows how ontologies can be visualized to display the
name of the instance and the structure of the ontology.
Furthermore, the requirements of visualization
techniques to visualize the structure and instances
according to users’ needs are described. Additionally,
Section 4 presents an evaluation which compares
Knoocks, Jambalaya and CropCircles. Finally, future
work and research will be discussed.

•

CropCircles: [10] and [11] present CropCircles
which view all information of the ontology at once
as a set of circles. It is implemented in Java and is
available for the ontology editor SWOOP. It is
inspired by Treemaps, but has changes in the
representation and layout [11]. CropCircles presents
the topology of the ontology. The circles represent
the nodes in a tree and every child circle is nested
inside its parent circle. Wang and Parsia [11] found
out that CropCircles performed well against
Treemap and SpaceTree in topological tasks.
Furthermore, they performed better than Treemap
in tasks directed towards finding the deepest node.
However CropCircles only visualize the topology
of classes. No information about instances is
provided.

•

Grokker: Grokker visualizes information such as
results of search engines or database queries as a
series of nested Venn Diagrams, as mentioned by
[12]. Circles present the clusters and the subclusters and the user can navigate within a
hierarchy by clicking on the circles. If the circle has
additional levels, the circle is filled otherwise the
circle is transparent to show that it is at the lowest
level of the hierarchy. The study of Rivadeneira and
Bederson in [12] shows that using Grokker was
sometimes hard and sometimes confusing.
Occasionally the labels were cut-off and the user
could not read them, or the meaning of the labeling
was not clear. Klerx et. al. [13] found out that it was
easy to filter out uninteresting information.
However, if the users completely zoomed in, the
overview was lost.

•

Cluster Maps: As mentioned by Fluit et al. in [3],
Cluster Maps were developed by Aduna to
visualize lightweight ontologies. Cluster Maps
describe a domain through its classes and its
hierarchical relationships. A class is displayed as
rounded rectangle with its name and its
cardinalities. The relationships between classes are
represented as directed edges. According to Fluit et
al. [3] , the main focus of Cluster Map visualization
lies on the instances and their classification
according to the concept of the ontology. An
instance is displayed as yellow sphere and instances
with the same class membership are grouped in
balloon-shaped clusters which are connected to
their class. In the case that an instance belongs to
several classes, this instance is displayed in a
separate cluster and is connected to its classes.
Heiner Stuckenschmidt et al. [14] evaluated the
DOPE browser which uses Cluster Maps to
visualize a collection of documents concerning user
queries and found out that the browser allows users
to quickly focus on their interests. However, the
visualization gets very complex when a user selects
more terms to search and so it is difficult for

2. Related Work
This section presents a short overview of different
visualization techniques. They were selected on the basis
of being similar to Knoocks in representing both
structure and instances.
•

Treemap: According to Shneiderman [2], Treemap
is a space-filling approach, which shows every node
as a rectangle. Every rectangle is subdivided
horizontally into smaller rectangles in regard to its
children. While this process is recursively repeated,
the direction of the subdivision alternates between
horizontal and vertical. The advantage of this
approach is that on the one hand users see the
overall view and on the other hand it allows one to
rapidly jump to instances and to leaf nodes.
Furthermore, Treemaps use the whole space such
that no space is lost. However, Treemaps are
restricted because of the limited screen space. If
this limit is reached, navigational techniques like
semantic zooming have to be used. This could have
a negative effect on the overview, because no space
remains for internal nodes. A Treemap layout can
contain many rectangles with a high aspect ratio.
Turo et al. discussed in [7] that users have
difficulties to compare between nodes of differing
heights and widths. They cannot accurately gauge
fine area differences between rectangles with
differing dimensions. Several subdivision methods
were developed in regard to aspect ratio, but with
the restriction of layout stability (see e.g. [8] and
[9]).

164

him/her to interpret the overlapping results.
Furthermore, the evaluation shows that the
information conveyed by the labels is more
predominant than the information expressed by the
union of spheres.
•

are frequently of interest and therefore it is necessary
that instances are visible and that the user can quickly
find them. The names of instances should be easy to
read. Furthermore, it is important that users see at
first glance the classification of instances.

3.2. Layout

Jambalaya: It is a visualization plug-in for Protégé
and provides different views to visualize ontologies
as nested graphs. A nested graph has nodes, which
are classes or instances and classes can contain
other classes or instances, according to Storey et al.
[4]. Relations between nodes are displayed as arcs
[15]. Classes and instances have different colors for
a clear differentiation. In the evaluation of [16]
Jambalaya got positive reactions. However users
complained that the labels of classes and instances
were sometimes overlapping. Furthermore, they
disliked the appearance of arcs and the fact that too
many arcs may constrain the view of the
visualization.

The basic structure of Knoocks is rectangles
(blocks), which are arranged hierarchically from the left
side to the right side. Every block stands for a class and
the right block is a subclass of the left block. The names
of classes are displayed in a dark blue box (see Figure 1).
Furthermore, every block has a list of its instances which
are displayed below its class name box in a lighter blue
box. The advantage of this visualization is that users see
the instance of every class directly and can orientate
themselves on the basis of the position of the blocks. The
user can quickly scan the list of instances. Additionally,
overlap does not occur.
Figure 1 shows an example of Knoocks. In this
example a part of the compulsory module from the
curriculum of Computer Science, as described in [17], is
visualized. In this visualization the compulsory module
consists of the modules “Information Technology”,
“Competence Expansion” and “General Basics”. These
modules consist again of modules, for example “Basics
of Modeling” is a submodule of “General Basics”. Every
module can include courses, so for example the module
“Scientific Basics of Computer Science” encompasses
the courses “PA.WGI.FG.VU Formal Basics of
Computer Science” and “PA.WGI.WA.PS Basics of
Scientific Writing”.
The sizes of the blocks depend on their subclasses
and on their instances. Similar to the Space Tree, the
users can see how many subclasses and instances every
class has based on its size. For example in Figure 1, the
size of the block “Information Technology” depends on
its eight subclasses and their sizes. The size of a subclass
depends on their instances.
Furthermore the layout is designed in regard to the
following usability und user interface design aspects
[18], [19], [20], [21]:

3. Knoocks
Knoocks is a new visualization approach to
represent lightweight ontologies and it is implemented in
Java. The main focus of this approach is to present
particular instances in regard to the classifications and
structure of the ontology. Therefore, it combines the
detail view to see instances and the general view to
present the structure of the ontology. Knoocks does not
separate the visualization and the names of classes or
instances as done in other visualizations methods (e.g.
CropCircles).

3.1. Ontology Visualization Requirements
This subsection
describes three ontology
visualization requirements based on a literature study and
included in Knoocks.
• Topology overview: Topologies are particular
necessary to structure an ontology if it has multiple
subtrees and multiple levels. They support effective
management of large ontologies. Furthermore,
topologies are very important for orientation purposes
and help to understand the structure. Subtrees can be
better compared with each other and it is possible to
see the size and depth of every subtree. Furthermore,
it supports a quick scan of all information with less
cognitive effort. Additionally, users can find the
information of interest faster.

• Color: The colors generally should be chosen in a
way that the contrast is high enough. Additionally,
the choice of colors should be balanced and
harmonious. The main color of Knoocks is blue,
because it is neutral and can be combined with many
different colors. Furthermore the contrast between
background and text color is adapted so that the text
is sufficiently highlighted without being too
obtrusive.

• Visibility of classes: For a general view, it is
necessary that the user can quickly see every class.
Additionally, it is important that the names of classes
are easy to read so that the user can distinguish
between different classes.

• Design: Functional aspects as well as aesthetic
aspects play a significant role in visualizations to
make working with them enjoyable. A well-known
example is the user interface design of Apple
Macintosh, which is one of its essential successes.
Furthermore the design of visualization should be as

• Visibility of instances: Instances are objects such as
people, animals, plants, genes or courses. The objects

165

Figure 1: Knoocks example of the curriculum of Computer Science
simple as possible and only the minimum
requirements (see also the point “Simple and
natural”) should be designed at the beginning. For the
case that the users miss functionalities, the
visualization can be extended complying with their
needs. Therefore, Knoocks is designed to be very
simple and minimalistic such that the visualization is
not cluttered with unimportant features or
information.

“match users’ tasks as natural as possible, such that
the mapping between computer concepts and user
concepts becomes as simple as possible” [18].
• Users’ wording: Users should recognize and
understand the wording. The vocabulary of the
visualization should be unmistakable for the user.
Therefore, Knoocks does not visualize the classes
OWL:Thing and OWL:Nothing. These classes are
not necessary for the users, because in general they
are no ontology experts.

• Consistency: It “is one of the most basic usability
principles” [18]. The same information or the same
action should always have the same effect and the
same behaviour. The visualization should be uniform,
which includes among other things design, position
of elements, wording, color and size.

4. Evaluation
The evaluation in the early development phase of
Knoocks served as an initial test instrument to show
already the advantages and drawbacks in comparison
with other visualizations techniques.

• Less cognitive effort: The short term memory is
limited, and so users can normally keep only few
peaces of information at the same time. Based on this
fact, the visualization should be designed so that
cognitive effort is low. Therefore, Knoocks provides
the user with the possibility of seeing the structure at
first glance and avoids the need for clicking through
the different structure levels.

•

• Simple and natural: The visualization should be as
simple and natural as possible. It should only show
the necessary information. Every additional feature or
information which is not really necessary can be
misinterpreted. Additionally, the visualization should

Setup of the evaluation: For the evaluation, the
same part of the compulsory module from the
curriculum of Computer Science is used for all
visualizations (for Knoocks see Figure 1, for
CropCircles see Figure 2 and for Jambalay see Figure
3). Furthermore, all tests were done on a Toshiba
Satellite M40-192 laptop with 1.73 GHz CPU 1.00
GB of RAM running Windows XP and with a screen
resolution of 1280x800 pixels.

• Choice of visualization tools: Knoocks, Jambalaya
and CropCircles were compared. Previous

166

Figure 2: CropCircles example depicting the
same curriculum example as in Figure 1.

Figure 3: Jambalaya example depicting the
same curriculum example as in Figure 1.

evaluations ([15], [16]) show that the users’ reaction
was predominantly positive to Jambalaya. A further
reason to choose Jambalaya is its provision of a
nested Treemap view (see Figure 3). This view
allows one to study how the test persons like the
layout of Treemaps in combination with a nested
graph. CropCircles (see Figure 2) shows the topology
of the ontology class hierarchy. Although instances
are not visualized, it is interesting to compare
CropCircles with Knoocks in regard to the topology
visualization.

liked the way how the courses were represented. It was
for them very advantageous that the courses were
visualized in a list, so they had the possibility to scan the
visualization very fast. Therefore, they found courses or
modules quickly. However, for four participants the
hierarchy structure representation was ambiguous.
Further it was not sufficiently clear that the structure
went from the left to the right side. A test person noted
that it would be additionally helpful if the courses and
modules were ordered alphabetically. Test persons noted
it would be a great feature to search courses and modules
via STRG+F. Furthermore, they liked the colors and
design of the visualization which they found “great”,
“stylish” and “delightful”.
The participants also liked Jambalaya. However, the
performance to find specific courses was lower, because
the label names were not well readable if the entire
ontology was displayed. Therefore test person had to
search the courses and modules via tool tip. Additionally,
five participants had not found courses until they clicked
the course more than twice because the label of the
courses and modules overlapped. Four participants noted
that the difference between modules and courses was not
clear. Furthermore, the representation of courses was not
understandable. They said that the course rectangles
needed unnecessary space. However, four participants
found the visibility of the hierarchy structure clearer and
more understandable than in Knoocks.
For five test persons CropCircles was hard to
understand in the beginning. Additionally, two test
persons found the visualization confusing. After they
were familiar with the visualization, they found it a good
alternative to see very fast the submodules. However, the
performance to find a specific module was lower as with
Jambalaya or Knoocks, because the modules could only
be found by clicking on every circle. Additionally,
participants found it unfavorable that the visualization
and labels were not in one view. Only one test person
recognized that the labels of the module were also visible
via tool tip. Furthermore they noted that they would
prefer a table view instead of circles.
Generally, four participants preferred Knoocks,
because of the colors, design and clarity in regard to the
courses and label representation. Two test persons

• Choice of participants: Six test persons (four
females and two males) participated in the evaluation.
The average age of the participants was 21.8 years.
The experiment sample was composed of two target
groups (students of Computer Science and students
who want to enroll), each with three test persons. The
reason for this choice of target groups was to study
how users handle the visualized information
depending on their experience and background
information.
• Choice of tasks: Every test person performed several
tasks depending on the tool. The main focuses of the
tasks were to find a specific instance, to find the class
with the most children, to find the deepest node and
to find the largest subtree. Zooming was not
permitted, because only the layout of the general
view of the ontology should be evaluated.
Additionally, the order of tasks and tools was
changed to ensure that a specific order does not
influence the result of the evaluation. Furthermore
after every tool, I asked the test persons questions
about their general impressions of the tools and how
well the visualization could support them in regard to
the tasks. After the test, I asked every participant
which visualization she/he preferred regarding the
design and user friendliness.

4.1 Results of the evaluation
Generally, Knoocks got predominantly positive
reactions particularly regarding the general overview and
the easy location of a specific course. The participants

167

preferred Jambalaya, because the hierarchy structure was
clearer and easier to understand.

[5]

Conclusions and Future Work
The paper presented Knoocks, a new approach to
visualizing ontologies with the main focus on instances
in relation to their structure. For several applications this
dual focus is essential.
This visualization approach presents instances in a
way that the user can scan and find them quickly.
Additionally the structure of the ontology is visualized
and so the users can better orientate themselves within
the ontology. Another advantage is that the structure
supports a better visual clarity. Furthermore, usability
und user interface design aspects play a significant role
in regard to the design of the visualization. The
evaluation of Knoocks showed the advantages and
drawbacks. Despite the small number of test persons, it
delivered feedback and inspiration for improvements.
According to the evaluation, Knoocks got positive
reactions with respect to the instance representation and
layout. The participants found the specific instances
quickly and rapidly got a good overview of the ontology.
Knoocks has to be revised in regard to the
representation of the hierarchy structure of the ontology,
because the evaluation showed that it was visually not
evident that the hierarchy direction goes from left to
right. Furthermore, the current version considers only
“subclass of” relationships. Therefore one of the next
steps is to visualize additional types of relationships
between instances. Furthermore, the effectiveness of
Knoocks in regard to large data sets and many
hierarchical levels has to be investigated. According to
the example of the curriculum of Computer Science, it
should be possible to additionally see the dependency
relationships between courses. Further work is directed
towards finding a solution to visualize more than one
hierarchy block. Additionally, an extensive evaluation of
Knoocks is planned.

[6]

[7]

[8]
[9]
[10]
[11]
[12]

[13]

[14]

[15]

Acknowledgements
[16]

I gratefully acknowledge the critical feedback and
support of Günter Wallner from the University of
Applied Arts Vienna.

References
[1]
[2]
[3]
[4]

[17]

D. Fensel. Ontologies: A Silver Bullet for Knowledge
Management and Electronic Commerce, Berlin, Springer.
2001.
B. Shneiderman. Tree visualization with tree-maps: 2-d
space-filling approach. In ACM Transactions on
Graphics. Vol. 11, 92-99. 1992.
V. Geroimenko and C. Chen. Visualizing the Semantic
Web:
XML-Based
Internet
and
Information
Visualization, Berlin, Springer. 2003.
M. A. D. Storey, K. Wong, F. D. Fracchia and H. A.
Mueller. On Integrating Visualization Techniques for
Effective Software Exploration. In Proceedings of the

[18]
[19]
[20]
[21]

168

IEEE Symposium on Information Visualization (InfoVis
'97). IEEE Computer Society Press. 1997.
R. Motschnig-Pitrik and M. Derntl. Learning Process
Models as Mediators between Didactical Practice and
Web Support. In 24th International Conference on
Conceptual Modeling. Springer Verlag, pp. 112-127.
2005.
C. Plaisant, J. Grosjean and B. B. Bederson. SpaceTree:
Supporting Exploration in Large Node Link Tree, Design
Evolution and Empirical Evaluation In Proceedings of
IEEE Symposium on Information Visualization (InfoVis
2002). IEEE Computer Society Press, 57-64. 2002.
D. Turo and B. Johnson. Improving the Visualization of
Hierarchies with Treemaps: Design Issues and
Experimentation. In IEEE Conference on Visualization.
1992.
M. Bruls, K. Huizing and J. J. vanWijk. Squarified
Treemaps. In Joint Eurographics and IEEE TCVG Symp.
on Visualization (TCVG 2000). IEEE Press, 33-42. 1999.
M. Wattenberg. Visualizing the stock market. In CHI '99
extended abstracts on Human factors in computing
systems. ACM. 1999.
B. Parsia, T. Wang and J. Golbeck. Visualizing Web
ontologies with CropCircles. In Proceedings of the 4th
International Semantic Web Conference. 2005.
Wang T. D. and Parsia B. CropCircles: Topology
Sensitive Visualization of OWL Class Hierarchies. In
Proceedings of ISWC. 2006.
W. Rivadeneira and B. B. Bederson. A Study of Search
Result Clustering Interfaces: Comparing. Textual and
Zoomable User Interfaces. University of Maryland HCIL.
2003.
J. Klerkx, E. Duval and M. Meire. Using Information
Visualization
for
Accessing
Learning
Object
Repositories. In Proceedings of the Information
Visualisation, Eighth International Conference on
(IV'04). IEEE Computer Society. 2004.
H. Stuckenschmidt, A. d. Waard, R. Bhogal, C. Fluit, A.
Kampman, J. v. Buel, E. v. Mulligen, J. Broekstra, I.
Crowlesmith, F. v. Harmelen and T. Scerri. A TopicBased Browser for Large online Resources. In
Proceedings of the International Conference on
Knowledge Acquisition, Modelling and Management
(EKAW’04). 2004.
M. A. Storey, R. Lintern, N. Ernst and D. Perrin.
Visualization and Protégé. In 7th International Protégé
Conference. 2004.
A. Katifori, E. Torou, C. Halatsis, G. Lepouras and C.
Vassilakis. A Comparative Study of Four Ontology
Visualization Techniques in Protege: Experiment Setup
and Preliminary Results. In Proceedings of the
Conference on Information Visualization. IEEE
Computer Society Press. 2006.
S. Kabicher, M. Derntl and R. Motschnig-Pitrik. Towards
an Active Curriculum for Computer Science. In World
Conference on Educational Multimedia, Hypermedia &
Telecommunications 2008.
J. Nielsen. Usability Engineering, San Francisco, Morgan
Kaufmann. 1994.
M. Dahm. Grundlagen der Mensch-ComputerInteraktion, Munich, Pearson Studium. 2006.
W. O. Galitz. Essential Guide to User Interface Design:
An Introduction to GUI Design Principles and
Techniques. 2 ed., New York, Wiley. 2002.
B. Shneiderman. Designing the User Interface. 3 ed.,
Addison-Wesley. 1997.

