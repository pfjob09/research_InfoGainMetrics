Interactive 3D Graphics Applications Embedded in Web Pages
Francisco Luengo1, Mariela Contreras1, Aurely Leal1, Andres Iglesias2
1
Department of Computer Science, University of Zulia, Venezuela
2
Department of Applied Mathematics and Computational Sciences, University of Cantabria, Spain
fluengo@cantv.net, mariela.mclilu@gmail.com, aureleal@cantv.net, iglesias@unican.es

Abstract
As Internet and the World Wide Web (WWW) are
becoming more and more popular, there is an
increasing demand for new web services and
developments. In particular, there is a need of new
technologies (often referred to as Web3D) to create
and manipulate interactive three-dimensional (3D)
environments on the Web. A major problem in this
subject is the lack of specialized 3D graphics libraries
for Internet, with similar functionalities to those of
OpenGL for standalone applications. Although
several APIs (Java3D, GJ4JAVA, JOGL, LWJGL, jGL)
have been proposed to tackle this issue, none of them
has become an official part of core Java package so
far. Consequently, it is still hard to build reliable
Internet-oriented 3D graphics programs providing the
web users with the same realism and interactivity
usually found on standalone applications. This paper
proposes a based-on-Java framework to develop
interactive 3D graphics applications embedded in web
pages. Our approach is not based on the development
of new programming tools, the emphasis being placed
upon the careful selection of already existing
technologies (also described in this paper) that
provide the best results for our goals along with the
optimized design of the workflow. Some applications
aimed at showing the potential of our approach are
also briefly reported.
Keywords--- Web3D, Java Applet, OpenGL,
VRML, XML, X3D, JOGL.

1. Introduction
During the last few years, computer-generated
imagery has reached a level of realism hardly
conceivable two decades ago. The spectacular
developments in hardware and software as well as the
appearance of sophisticated APIs (Application
Programming Interface) such as OpenGL [1] opened

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

the door to a wealth of applications with advanced
GUIs (Graphical User Interface) supporting interactive,
highly-realistic 3D virtual environments aimed at
different purposes. In fact, these advanced 3D
applications are quite usual nowadays in the realm of
Computer Graphics and Virtual Reality.
To extend this kind of technology to Internet is
not an easy task. On one hand, Internet itself is a
heterogeneous network environment, so several
versions of the same program have to work on a
number of different platforms and operating systems.
For that reason, Java [2] is commonly used to
overcome this problem because of its hardware-neutral
features. But unlike OpenGL and other APIs, Java has
not been specifically designed for graphical purposes
and consequently it is less suited for graphical tasks.
As soon as our way to visualize the information on the
Web has evolved from the plain text usually found at
the inception of Internet to the real-time video and
complex animations embedded in current web pages,
this limitation turned into a critical problem. Further,
the ever-growing web users community along with the
diversity of contents available at Internet demand even
more intuitive approaches for information retrieval and
manipulation. We envision a new generation of web
browsers with powerful GUIs and able to handle
interactive, highly-realistic 3D contents in a similar
manner other applications actually do. Other devices
(mobile phones, PDAs) are also expected to provide
similar levels of graphical output and interaction.
A major problem in this subject is the lack of
specialized 3D graphics libraries for Internet
(particularly when using Java), with similar
functionalities to those of OpenGL for standalone
applications. Although several APIs (Java3D,
GL4JAVA, JOGL, LWJGL, jGL) have been proposed
to tackle this issue [3], none of them has become an
official part of core Java package so far. Consequently,
it is still hard to build reliable Internet-oriented 3D
graphics programs providing the web users with the
same realism and interactivity usually found on
standalone applications.

In this context, the present paper proposes a new
based-on-Java framework to develop interactive 3D
graphics applications embedded in web pages. We
point out that our approach is not based on the
development of new programming tools, the emphasis
being placed upon the careful selection of already
existing technologies (also described in this paper) that
provide the best results for our goals along with the
optimized design of the workflow. To this aim, several
tasks have been carried out: on one hand, we
accomplished a careful selection of the programming
tools and libraries; this selection is based on our
experimental results obtained during the evaluation
process we carried out in order to determine the best
tools to achieve our goals. This step will allow us to
use the best tools for each step as well as to exploit
their best features at full extent. On the other hand,
both the architecture and sequence of processes have
been redefined for performance enhancement. As it will
be shown later on, these new features lead to a
substantial performance improvement allowing us to
create virtual worlds with a high degree of interactivity
among multiple users and with the environment at a
very low cost in terms of code size and technical
software.
The structure of this paper is as follows: firstly, a
brief description of some representative Web3D
technologies is reported in Section 2. The main
characteristics that (in our opinion) any 3D graphics
application for Internet should have are listed in
Section 3. This section also describes the proposed
framework. Some simple yet illustrative applications
showing the potential of our approach are briefly
reported in Section 4. Finally, the main conclusions
and future work are presented in Section 5.

2. Web3D Technologies
There are many approaches related to Web3D
technology. In this section we focus only on those that
allow creating 3D content and transmitting it over the
Internet. For the sake of simplicity, they can be
grouped into three categories: 1) the descriptive
languages that can be used to deliver interactive 3D
objects and worlds across the Internet, 2) programs
used to display interactive 3D environments and
models on Internet, and 3) Web3D software
development utilities, such as libraries of classes,
functions, routines, or methods that aid programmers
in developing Web3D applications.

2.1. Markup Languages
The file formats based on markup languages allow
creating plain text files that can typically contain a
large variety of information. This kind of file format is
widely used to transmit data through Internet.

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

Many 3D graphical environments for the Web
have been created by using VRML (Virtual Reality
Markup Language). VRML is a 3D modelling
language that allows the creation of objects and
interactive three-dimensional worlds. Since its
appearance in 1994, it has become a standard for the
creation, transmission and representation of 3D
elements on the Web. Its main advantages are: it is an
open standard and platform independent language; it
supports virtual worlds of any size; it allows defining
the interaction with the elements of the scene and it is
relatively flexible. However, programming in VRML
for complex interaction and manipulation is awkward
or impossible, the interface is very limited and VRML
files require a plug-in (such as Cosmo Player, Octaga
Player, Flux Player, Open VRML and many others) to
view them on standard web browsers.
To overcome these limitations, a powerful
extension of VRML called X3D (Extensible 3D) was
released [4]. Because it is an open standard XML
(Extensible Markup Language), it is well suited for
Web services and data creation and transmission
among different applications. Its architecture is based
on components that can be individually extended and
modified and includes the concept of profile, that can
be used for a given platform or application. X3D has
full compatibility with VRML, it is also platform
independent and its graphical capabilities far exceed
those of VRML [5].
However, VRML and X3D are both markup
languages, not programming languages at their own.
Consequently, they lack the classical functionalities
any standard programming language is provided with.
Other related file formats such as XGL and 3DML are
more specific and therefore, less suited for general
applications.

2.2. Three-dimensional Scene Viewers
The information transmitted over the Internet is
visualized through the web browsers (Mozilla Firefox,
Internet Explorer, Safari, Netscape, Opera). Although it
would be desirable all Web contents to be visualized
by using a single program, those web browsers do not
support VRML-like files, thus requiring additional
plug-ins for parsing and rendering.
Some vendors combine Java-based playback and
authoring technologies to enable any standard web
browser with a JVM (Java Virtual Machine) to display
interactive 3D graphics without the need for special
plug-ins. This is readily done by means of a Java
Applet, which is completely transparent to the web
page users and can be displayed in conjunction with
other page content. Furthermore, it requires no
download or installation, and loads automatically
when a visitor opens a web page that contains the
applet. Some examples are Cortona Jet [6] and
Shout3D [7]. The first one has been developed using

native Java and can read VRML file format although it
does not provide any API for programming. Shout3D
is a commercial product also developed using native
Java. Its file format for 3D models is not VRML
although a converter from it offering partial support is
provided. Programming is also provided via its own
API.
On the other hand, a new kind of Web server, the
so-called Web3D Multi-user Server, has recently
appeared. It is an application that manages worlds on
the Web in a manner beyond the abilities of a standard
Web server. It presents and manages multi-user Web3D
environments, and generates Web3D content. An
example of this is Blaxxun3D [8], a commercial
product developed on native Java, capable of reading
VRML and X3D (partial support only) and that
provides an API for programming. The reader is
referred to [9] for additional examples and further
explanation on this issue.
In general, the 3D scene viewers make an efficient
use of graphical hardware for better performance, but
the interaction with the virtual environment is very
limited. At their turn, the based-on-Java-applet viewers
enhance user interface interaction, and can be combined
with Web content in the same page.

2.3. Software Development Utilities
To develop 3D graphics applications on Internet
some 3D graphical capabilities in each different
platform are needed. Some vendors provide their own
libraries to construct authoring software, such as the
Cortona SDK Library from Parallel Graphics, which
enables developers to integrate the engine of Cortona
VRML client into applications written in C, C++,
Visual Basic, Delphi, or HTML. By contrast, some
others do not support any API.
Java is the programming language usually chosen
to develop Internet applications owing to its hardwareindependent nature and its wide availability on many
hardware platforms [2]. To give Java developers the
ability to write applets and applications that provide
interactive 3D content to users, Sun Microsystems Inc.
developed Java3D [10]. Although it is part of JMF
(Java Media Framework), it has not become a part of
core Java package, and needs support of OpenGL or
DirectX, which must be pre-installed in the client side.
Since it exploits the architecture of the graphics
hardware, the performance ratio is good, but it is
therefore platform-dependent. Moreover, any program
in Java3D requires the run-time package of Java3D to
be installed prior to its use. Furthermore, its API is
specific, its programming structures (based on concepts
such as Universe and Worlds) are little intuitive and it
hides details of the rendering pipeline, making it
unsuitable for a significant number of problems where
such details are important.

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

Java3D is not the only effort to enhance the
visualization capabilities of Java. Since OpenGL is the
most widely adopted graphics standard, there are some
Java-OpenGL bindings willing to combine the
strengths of both technologies. Examples are
GJ4JAVA (currently obsolete), JOGL, LWJGL and
jGL. JOGL is an open source community project
sponsored by Sun, which provides a general-purpose
OpenGL binding that integrates with the two Java
GUIs, AWT and Swing. It is also cross-platform and
supports Mac OS X, Linux, 64-bit Linux, Solaris, Irix
and Windows. Several higher-level 3D APIs, such as
Xith3D have been built on top of JOGL. LWJGL
(Lightweight Java Game Library) is another binding
between Java and OpenGL that supports many input
control devices such as game pads and joysticks, but
cannot be embedded into a Swing interface.
Other libraries providing 3D graphics support for
Java are Jun and jGL. Jun is a framework for
developing 3D graphics applications and a 3D graphics
library with topology and geometry, which uses
OpenGL as a rendering engine [11]. jGL (formely
JavaGL) is a 3D graphics library for Java defined
according to the OpenGL specification and that does
not need to be pre-installed since all required codes are
download at run-time [12,13].

3. The Proposed Framework
In this section, the main characteristics that (in
authors’ opinion) any 3D graphics application for
Internet should have are listed. Based on them, a
careful selection of the tools and technologies that
provide the best support for those requirements is
carried out in Section 3.2. Then, the architecture of the
proposed framework is described in detail in Section
3.3.

3.1. Main Requirements
Most of the technologies described above require
several programs or applications to handle different
types of web contents. This feature is extremely
cumbersome: on one hand, it prevents the users from
an easy learning; on the other hand, it represents an
extra load in terms of resources, data storage and
memory capacity while simultaneously increasing the
computation time. Further, since those programs have
been developed by different teams and corporations,
their interplay is troublesome and prone to errors. Very
often, the users are confronted with unexpected
conflicts because of the incompatibility of versions,
source codes, data types or programming structures.
One feasible solution is the use of applications
embedded on web pages. However, many of them
require a plug-in or similar to work properly. Most of

those plug-ins are hardware-dependent, thus restricting
their applicability on heterogeneous networks.
Of course, there are many other features any 3D
graphics application for the Web should have. They are
briefly summarized in the following list:
[R1] Since Internet is a heterogeneous network, it
must be hardware-independent.
[R2] No special plug-ins, viewers or additional
packages should be necessary. Owing to
security issues and other features, we should not
expect to install anything on the client side.
[R3] It must provide OpenGL-like graphical
capabilities. It should have a good rendering
quality, enabling the creation and manipulation
of realistic 3D worlds, and supporting OpenGLlike sophisticated rendering features (such as
shading, multi-texturing, NURBS) provided by
other graphical applications and APIs.
[R4] Flexibility, ease of maintenance, stability and
robustness. This requirement includes support
for multi-platform architecture and the
communication among multiple servers and
clients in a reliable and efficient manner. A
powerful programming language should also be
available. The programming platform must be
flexible and stable enabling an easy maintenance
and debugging.
[R5] Enable the users to share a common 3D space
and interact with each other and with the
environment. The framework must offer easy and
transparent sharing of the virtual environment
where multiple users can navigate, communicate
and interact with each other and with the virtual
world.
[R6] To provide a nice, friendly GUI that allows
improving the interaction with the application.
This interaction must be engaging and multichannel, supporting audio, video, chat and web
services if required.

3.2. Java Platform and Tools
Some of the requirements listed in the previous
section, such as [R1] and [R4] are automatically
provided by Java, and this is actually the language
chosen for our approach. Java is a multi-platform
object oriented programming language provided by
Sun Microsystems Inc. that exhibits a bulk of
remarkable features that become more reliable than
those of C or C++. At the time of the first release in
1995, the virtual machine suffered from performance
problems, but advances in computer speed, compilers,
and virtual machines have greatly increased the
execution speed of Java programs so that it can come
close to and sometimes even surpass that of natively
compiled language. Furthermore, Java is also equipped
with large and full-featured support libraries that make
development much easier and faster. Some of those

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

libraries provide support for database connection;
network connection; reading and writing XML format
files, GUI design, etc. All these features are part of the
JRE (Java Runtime Environment), which is included
by default in most operating systems.
An interesting Java capability concerns the
generation of Java applets to provide interactive
features to web applications that cannot be provided by
HTML. These applets can run either on Sun’s
AppletViewer or on a web browser using a JVM (Java
Virtual Machine, a part of JRE). It is worthwhile to
mention that the web browser and AppletViewer work
in a different way, as the applet viewer ignores all
HTML codes except applet tags (it doesn't even
attempt to display any other information contained in
the HTML document). Since our aim is to let our
applets interact with other web content (requirement
[R5]), we will rather use the web browser with JVM as
the main tool. Key advantages of Java applets are that
they run on any platform and operating system, being
supported by most web browsers, can support real-time
web applications and can move the work from the
server to the client, making a web application more
scalable with the number of users/clients. In addition,
they cache in most web browsers, making it easier and
faster to come back to formerly visited web pages.
Furthermore, no additional software is required at the
client side other than Java, so [R2] is also fulfilled.
Java applets also provide nice security issues: they are
generally executed by web browsers in a sandbox, a
mechanism used to safely execute applets embedded in
untrusted web pages, preventing them from accessing
local data and client’s hardware resources. As Java
applets also share the same functionalities of a typical
Java program, they are ideal tools for 3D graphics
applications embedded on web pages.
In our framework, a 3D API is needed. Although
JRE does not have any native API, they are available
from several sources. In particular, our choice is JOGL
because it is open-source, has Sun’s official
sponsorship, is OpenGL binding (thus satisfying
requirement [R3]), and is fully integrated with Java’s
GUIs, namely AWT (Abstract Window Toolkit) and
Swing, so it takes advantage of all Java GUIs
functionalities and allows the user to determine the
final appearance of their windows and widgets at will
(requirement [R6]). This choice is also motivated by
our interest to explore the potential of our approach for
resource-constrained devices via different profiles, such
as MIDP (Mobile Information Device Profile) for cell
phones or PP (Personal Profile) for PDAs and other
consumer appliances.

3.3. Framework Architecture
In standard client-server architecture, each instance
of the client software can send requests to a server. For
example, the user may wish to visualize, on the

client’s web browser, some web content containing an
applet. This request generates a reply from the server
which is subsequently sent back to the client’s web
browser in a compressed file format called JAR (Java
ARchive), used to store and deploy a set of compiled
Java classes and associated metadata that can constitute
a program. Such a JAR file may contain the
application and resources required to visualize 3D
virtual environments without further communication
between the client and the server. In addition, complex
environments may typically require other modules for
additional tasks such as environment’s geometry
manipulation, collision avoidance, etc. Such
information can be stored in a database or in
VRML/X3D files and transmitted to the web browser
in XML format. However, this approach is well suited
only for very basic environments. For instance, as long
as heavy textures are considered, this simple scheme
no longer applies, as the size of a single texture might

exceed that of the whole application itself. Moreover,
one of our requirements is to provide the users with a
highly-realistic rendering while simultaneously
enabling the interaction and collaboration of several
users evolving on the same 3D virtual environment.
Therefore, it becomes clear that there is a need for a
more powerful approach.
The proposed framework is based on a clientmultiserver architecture, displayed in Figure 1. This
approach is aimed at sharing the computational load
among multiple servers. The main servers are the
connection server, the database server and a series of
dedicated servers for the communication with the client
applets associated with the users of a virtual 3D world.
Although not included in our current implementation,
application servers providing specific functionalities
such as audio, video and text-based chat can readily be
incorporated into our framework without affecting the
underlying structure.

Figure 1. Architecture of the framework for interactive 3D graphics applications
embedded in web pages
The connection server is responsible to set up a
dedicated server for each applet requested from the
client. In addition, it converts users’ information
(status, position, states, etc.) into an XML file sent to
the dedicated server associated with the clients. Such a
file is used to update users’ information within the
virtual scene at the client side. In order to alleviate the
computational load, only the part of the virtual scene
relevant to the user associated with this client is
submitted. This feature is especially valuable for very
large scenes where events in different areas may not
influence each other.
There is also a server, called the database server, to
manage the geometric information of the virtual scene
as a whole. Such information - including the different
environments of the virtual world, their associated
objects, elements, etc. as well as other possible
geometric information such as GIS (Geographical
Information Systems) models and similar - is stored

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

into a database the database server is connected with.
The database server is also responsible to manage
client’s request by updating the virtual scene and
converting the new scene information into
VRML/X3D or XML files transmitted to the client via
the dedicated servers. The dedicated server is used for a
continuous communication with its associated client’s
applet, being responsible to manage client’s request
and to use the information provided by the connection
server (about the users) and the database server (about
the virtual scene) to update the virtual world
information. The interplay with other clients is
performed via the connection server, which stores all
users’ information into a user’s database. Based on this
information, the client applet is responsible for the
virtual rendering and updating, the interplay between
the user and the scene via a GUI and the
communication with other applets within the same
web page.

4. Some Examples
In this section, some simple yet illustrative
examples showing the potential and good performance
of our approach are briefly described.

4.1. Traffic Simulator
In this example, an applet to simulate the traffic
flow at a junction has been generated (see Figure 2).
The applet reproduces the real flow of vehicles
according to the behaviour of the traffic lights, drivers’
reaction and other traffic conditions. The simulation
can be activated and stopped by a simple click of a
key; the viewpoint can also be changed by using the
mouse or the arrow keys.

Figure 2. Traffic Simulator Applet: two
different views

wing, office owner’s name, etc.) along with a 2D or
3D view of user’s surrounding area, so that he/she can
move efficiently.
The applet’s workflow is as follows: once the
applet is launched, it sends a request to the server,
which sends the environment’s geometry back to the
client. In addition, the applet reports the initial user’s
position, which is subsequently used at the core of the
collision avoidance routines. Geometric data for
rendering along with data required for collisions and
other metadata are all stored into a database accessible
from the server via JODBC. This server is actually a
Java application to handle client’s requests, database
queries and information deployment. The applet’s size
is only 12.6 KB.

Figure 3. (L-R) 2D and 3D views of an
indoor scenario

In this
example,
the
applet
controls
simultaneously up to 20 vehicles evolving
independently and whose characteristics (type, length,
colour, position on the road, etc) are randomly
generated. The main thread performs the animation
while a secondary execution thread handles the control
and synchronization of the traffic lights. Applet’s code
size (excluding the textures) is 33.4 KB. We remark
here that this kind of developments is widely used for
simulation purposes: even although this scenario is
rather simple, it is based on real data (green/red traffic
light spans, junction geometry, etc). This development
is part of a current project accomplished in the city of
Maracaibo (Venezuela) for traffic control and
monitoring.

4.2. Mini Geo-Reference System
In this example, the applet displays an indoor
2D/3D scenario reproducing the actual Faculty
building of the first three authors (see Figures 3 and
4). The applet provides the user with the information
about his/her current position within the environment,
highlighted with a small black square in 2D (see Fig.
3-left) or a red sphere in 3D (see Fig. 4) while a text
box shows some information (floor number, building

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

Figure 4. Close-up of the 3D view and
the text box with the information about
user’s current position

This kind of applets is very affordable for mobile
devices (cellular phones, PDAs, GPS ports) in
applications such as urban planning, emergency
management, cartographic and geographic information
systems, etc. For instance, in our example the user
wants to have a meeting with other department
colleagues who are also displayed (as the small blue
squares in Figure 3(left) and blue spheres in Figure 4)
in our environment, making it easier to locate them at
a glance and to identify an appropriate place for the
meeting (perhaps the nearest room to all parties). Other
examples, such as the case of tourists searching for
points of interest (e.g., hotels, restaurants, etc.) that
best satisfy their preferences [14], the monitoring of
children’s activities by their parents via cellular phone
(an already available feature in current mobile phones)
or path planning tasks for a virtual visit of a museum
[15], can readily be performed by following our
approach.

5. Conclusions and Future Work
In this paper a new based-on-Java framework to
develop interactive 3D graphics applications embedded
in web pages is proposed. The paper briefly surveys
some current technologies for Web3D. Then, the main
requirements for a system to provide reliable support
to Web3D tasks are reported. Based on these
requirements, we propose a new framework based on
the use of Java technology for hardware-independent
and high-performance features along with some
(carefully chosen) development tools and strategies,
such as the use of JOGL as the 3D API required for
graphical purposes, the systematic use of applets as the
basic coding element of our workbench for web pages,
a multiserver architecture aimed at allowing a high
degree of interactivity among users and with the virtual
environment, the use of XML as the standard language
for information carrying and communication and
VRML/X3D (the last option preferred) for the
description and manipulation of the virtual scene. Two
simple yet illustrative examples aimed at showing the
potential of our approach are also briefly described.
Regarding our future work, we expect to apply our
framework to more complex and intricate multi-user
environments, with a higher degree of interactivity and
more complex tasks to achieve. We are also interested
in extending our approach to mobile devices. This
extension is particularly challenging as these devices
are heavily affected by size constrains of small
displays, limited CPU power and storage capabilities,
reduced battery life and limited bandwidth of the
available wireless networks. We are currently working

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

on these issues. The obtained results will be reported
elsewhere.

6. Acknowledgements
This paper was written during the stay of the first
author at the University of Cantabria, Spain. The
authors are thankful to this institution for making this
stay possible. The authors also wish to thank the
Spanish Ministry of Education and Science (project
TIN2006-13615) for the financial support of this work.

7. References
[1] “OpenGL” http://www.opengl.org
[2] “The Source for Java™ Technology,”
Sun
Microsystems, Inc., 2000. http://java.sun.com.
[3] “Web3D Consortium” http://www.web3d.org/
[4] “X3D” http://www.web3d.org/x3d/
[5] Chittaro L. and Ranon R., “Using the X3D Language
for Adaptive Manipulation of 3D Web Content”. Lecture
Notes in Computer Science vol. 3137, Springer-Verlag,
Berlin 287-290, 2004.
[6] “Cortona
Jet,”
Parallel
Graphics,
Inc.
http://www.parallelgraphics.com/products/jet
[7] “Shout3D
v1.03,”
Shout
Interactive,
Inc..
http://www.shout3d.com
[8] “blaxxun3D v1.18,” Blaxxun Interactive, Inc.
http://www.blaxxun.com/products/blaxxun3d
[9] Bouras, C., Panagopoulos, A., and Tsiatsos, T.,
“Advances in X3D Multi-user Virtual Environments”. In
Proceedings Seventh IEEE International Symposium o n
Multimedia-ISM’2005, IEEE CS Press, Los Alamitos, CA,
136-142, 2005.
[10] “Java3D” http://www.j3d.org
[11] “Jun for Java” Latest version available at:
ftp://ftp.sra.co.jp/pub/lang/java/jun4java/
[12] Chen, B.Y. and Nishita, T., "jGL and its Applications
as a Web3D Platform". In Proceedings Web3D 2001, 8591, 2001.
[13] Chen, B.Y. and Nishita, T. "The Development of 3D
Graphics and VRML Libraries for Web3D Platform b y
Using Java", Journal of IEICE, Vol.J85-D-II(6), 10471054, 2002.
[14] Burigat, S. and Chittaro, L., “Visualizing the Results
of Interactive Queries for Geographic Data on Mobile
Devices”. Proceedings of ACM GIS’2005, 13th
International Symposium on Advances in Geographic
Information Systems, ACM Press, New York, 277-284,
2005.
[15] Chittaro L., Ranon R., and Ieronutti L. “Guiding
Visitors of Web3D Worlds through Automatically
Generated Tours”. Proceedings of Web3D 2003: 8th
International Conference on 3D Web Technology, ACM
Press, New York, 27-38, 2003.

