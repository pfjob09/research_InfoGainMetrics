Capturing Outlines of Planar Images by Cubic Spline using Stochastic
Evolution
M. Sarfraz, M.T. Parvez and S.M.A.J. Rizvi
Department of Information and Computer Science
King Fahd University of Petroleum and Minerals
KFUPM # 1510, Dhahran 31261, Saudi Arabia
Email: {sarfraz; tparvez; alirizvi@kfupm.edu.sa}
Abstract
This paper is concerned with a new technique of
curve fitting. The technique has various phases
including extracting outlines of images, detecting
corner points from the detected outline, addition of
extra knot points if needed. The last phase makes a
significant contribution by making the technique
automated. It uses the idea of Stochastic Evolution to
optimize the shape parameters in the description of
the generalized cubic spline. It ultimately produces
optimal results for the approximate vectorization of
the digital contour obtained from the planar images.
Keywords: Planar image, curve fitting, cubic spline,
soft computing, knot insertion.

1. Introduction
Capturing and vectorizing outlines of images is
one of the problems of computer graphics, vision, and
imaging. This is usually done by computing a curve
close to the data point set [3-5, 23-24]. The
representation of planar object in terms of curve has
many advantages, for example, scaling, shearing,
translation, rotation and clipping operations can be
performed. Although a good amount of work has been
done in the area [10-16], it is still desired to proceed
further. Most of the research has tackled this kind of
problem by curve subdivision or curve segmentation.
Curve segmentation is advantageous in a way that it
gives a rough geometry of the shape. Approaches used
to achieve this task are polygonal approximations
[8,13,16],
circular
arc
approximations
[10,15,17,18,22] and approximations using cubic or
higher order splines [2,14, 24].
Curve reconstruction problem is also solved by
approximating the point clouds using implicit B-spline
curve [12]. The authors, in [12], have used trust
region algorithm in optimization theory as
minimization heuristics. Techniques described for

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

fitting implicitly defined algebraic spline curves and
surfaces to scattered data by simultaneously
approximating points and associated normal vectors
are proposed in [19,20,21].
In this paper, the data point set represents planar
object whose outline is required to be captured. We
present an iterative process to achieve our objective.
The algorithm comprises of various phases to achieve
the target. First of all, it finds the contour of the gray
scaled bitmap image. Secondly it detects corners.
These first two phases are taken as preprocessing
steps. In most of the cases corner points are not
enough to approximate the digital object and hence
some more points are also needed. These points are
known as intermediate points; they are used to break a
segment for better approximation. In the last phase,
we use generalized cubic spline curves for curve
fitting in a similar manner as in [24]. The steps are
discussed in details in later sections.
The organization of the paper is as follows,
Section 2 discusses about preprocessing step which
includes finding the boundary of planar object and
corner detection algorithm for finding the significant
points. Section 3 is about the interpolant form of cubic
spline curves. The details about the Stochastic
Evolution are explained in Section 4. In Section 5, we
discuss the proposed algorithm. The proposed scheme
has been demonstrated in Section 6. The paper
concludes in Section 7.

2. Preprocessing
This step consists of first finding the boundary of
the planar object and then using the output to find the
corner points or the significant points.

2.1 Finding boundary of planar object
The aim of boundary detection is to produce an
object’s shape in graphical or non-scalar
representation. Chain codes [6, 7] are the most widely

used
representations.
Other
well
known
representations are syntactic techniques, boundary
approximations and scale-space techniques. The
binary image of an object can be created in some paint
program like MSPaint or Adode Photoshop.
Alternately, hand drawn images can be scanned and
converted into binary image. The bitmap image of
Arabic word ‘ilm’ and its contour are shown in
Figures 1(a) and 1(b) respectively.

2.2 Detecting corner points
Corners in digital images give important clues for
shape representation and analysis. Generally objects
information can be represented in terms of its corners,
thus corner points play a very vital role in object
recognition, shape representation and image
interpretation [1,8]. These are the points that partition
the boundary into various segments. For our purpose,
we use a corner point detection algorithm based on the
method described in [1]. This corner detection
technique assigns a measure of ‘corner strength’ to
each of the points on the boundary of the image. The
algorithm consists of two passes. In the first pass, it
tries to inscribe a variable triangle for each of the
curve point (find the candidate corners). In the second
pass, the corner detector selects the appropriate points
from the set of candidate corners as corner points, so
as to avoid consecutive points to be selected as
corners. The demonstration of the algorithm is made
on Figure 1(b) to achieve the corner points shown in
Figure 1(c).

3. Curve fitting with cubic spline
The motive of finding the corner points was to
divide the contour into pieces. Each piece contains the
data points in between two subsequent corners
inclusive. We treat each piece separately and can fit
some appropriate spline method [9, 23, 24] to it. After
breaking the contour of the image into different
pieces, we fit the spline curve to each piece. For this
purpose we have used piecewise parametric cubic
spline interpolant. The spline formulation globally is
GC1 continuous. It introduces two parameters in the
description of cubic spline defined in Equation (1) as
follows:
P (t ) = (1 − θ ) 3 Fi + 3θ (1 − θ ) 2 Vi + 3θ 2 (1 − θ )Wi + θ 3 Fi +1
(1)
where
Vi = Fi + hi v i Di , Wi = Fi +1 − hi wi Di +1
(2)

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

Obviously, the parameters vi's and wi's, when equal to
1/3, provide the special case of cubic spline.
Otherwise, these parameters can be used to loose or
tight the curve. This paper proposes an evolutionary
technique, namely Stochastic Evolution (StocE), to
optimize these parameters so that the curve fitted is
optimal.
Since, the objective of the paper is to come up with
an optimal technique which can provide a decent
curve fit to the digital data. Therefore, the interest
would be to compute these tangent vectors in such a
way that they minimize the sum square error. We will
use least square approach for this purpose [4,5]. That
is, we need to find the values of tangent vectors that
minimize the sum squared distances between
boundary and parametric curve. Mathematically, the
sum squared distance is given by,
w

S = ∑ [Qi (t ) − pi ] ,
2

(3)

i =u

where pu and pw are the two end points of the
segment.

4. Stochastic Evolution (StocE)
StocE was initially developed by Saab and Rao
[25] and is a powerful general iterative heuristic for
solving combinatorial optimization problems. The
way stochastic evolution works can be described
briefly as follows:
Step 1: The process starts with an initial solution, a
control parameter p and the run length R.
Step 2: Obtain a new solution from the current one
(Perturb).
Step 3: Update the control parameter if need
(Update).
Step 4: If the new solution is better, then update the
best solution and make the run length higher.
Otherwise, go back to Step 2.
The Perturb method works as follows:
-

A new solution of the problem is found from the
current one (generate new curve parameter values
from the current ones)
The gain is computed (difference between
previous error and error for new solution).
A random integer between 0 and –p (the control
parameter) is generated.

-

If the gain is greater than the random number,
then the new solution is accepted (take the new
parameters of the curve)
Otherwise the old solution is retained.

Note that, in the Perturb method, if the gain is +ve,
then the new solution is always accepted. The purpose
behind the generation of random number is to accept
some bad solution occasionally, to avoid the situation
of being trapped in local minima.
In the Update method, if the costs of the new
solution and the best solution obtained so far become
same (or very close), then the control parameter is
increased (to ensure higher probability to accept ‘bad
moves’). Otherwise, the control parameter is
reinitialized to its original value.

5. Proposed approach
The proposed approach to the curve problem is
described here in detail.

5.1 Problem mapping
This section describes about the StocE formulation
of the current problem in detail. In curve fitting
problems, the solution space consists of the number of
data points on the image boundary.
5.1.1 Initialization. The first step in StocE is
selecting an initial solution for the problem under
consideration. This solution can be generated
randomly or the output of any constructive heuristic.
In our case, from the boundary points of the image, an
initial solution is found using corner detection
algorithm.
As discussed in Section 2, the binary image of
objects can be created in some paint programs or,
alternately, hand drawn images can be scanned and
converted into binary image. Once we have the
bitmap image, the boundary of the image can be
extracted using various methods [26,27]. In our
implementation, we rely on the boundary extraction
facilities provided in the MATLAB Image Processing
Toolbox. Once the boundary points of the image are
found, the next step is to detect corner points as
explained in Section 2.2. This corner detection
technique assigns a measure of ‘corner strength’ to
each of the points on the boundary of the image.
Once the corner points are detected, the boundary
of the image is divided into segments at those corner
points. If there are n corner points, then the boundary
is divided into n segments. Each of these segments is
then approximated by interpolating spline described in

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

Section 3.2. The initial solution of spline parameters
are randomly selected from range [-1, 1].
5.1.2 Curve fitting. Once an initial approximation for
the segment is obtained, better approximations are
obtained through soft computing techniques. We
experiment with our system by approximating each
segment of the boundary using the generalized cubic
spline of Section 3.2. This spline method is a variation
of the well-known Hermite cubic spline. This
modified Hermite cubic spline provides greater
control on the shape of the curve and also efficient to
compute. The tangents, in the description of the
spline, are computed using least square method. Each
boundary segment is approximated by the spline. The
shape parameters. v and w in the cubic spline provide
greater flexibility over the shape of the curve. These
parameters are adjusted using StocE to get the optimal
fit.
Once an initial fit for a particular segment is
obtained, the parameters of the fitted curve (v's and
w's) are adjusted to get better fit. Here also, we try to
minimize the sum squared error. Using Stochastic
Evolution (StocE), we try to obtain the optimal values
of the curve parameters. We choose this technique
because it is powerful, yet simple to implement and as
shown in Section 6, performs well for our purpose.
5.1.3 Segmentation using Intermediate Points. For
some segments, the best fit obtained through iterative
improvement may not be satisfactory. In that case, we
subdivide the segment into smaller segments at points
where the distance between the boundary and
parametric curve exceeds some predefined threshold.
Such points are termed as intermediate points. A new
parametric curve is fitted for each new segment.

5.2 The Algorithm
We can summarize all the phases from digitization
to optimization discussed in the previous sections. The
algorithm of the proposed scheme is contained on
various steps as follows:
Begin
Step 1: Input the digitized image.
Step 2: Find the image contour.
Step 3: Find the corner points
Step 4: For each segment Si
a) Find the intermediate points / tangent
vectors using the method of least square.
b) Find the initial values of shape parameters
for the intermediate points / tangent vectors.

c) Fit an initial curve with interpolating
splines.
End for
Step 5: For each segment Si
Initialize the control parameter p, runlength R for StocE.
Do
Find new values shape parameters
randomly.
Evaluate the error E for the new fit and
compute gain G
If G > RANDINT(-p, 0) Then
Take the new solution as the current
solution
Else
Keep old solution as current solution
Endif
If the solution does not improve Then
Increase the value of the control
parameter p
Else
Reinitialize the control parameter p
Endif
If the current solution improves best
solution so far Then
Keep the current solution as the best
solution
Increase the run length R of the
algorihtm
Endif
Until error E is below a threshold OR run
length exceeds
If the error does not fall below the
threshold Then
Subdivide the segment into smaller
segments
Endif
End for
Step 6: Return the final Fitted Curve
End

6. Demonstration
The algorithm in Section 5 has been implemented
practically and the proposed curve scheme has been
implemented with and without intermediate point
incorporation. Use of StocE has provided pleasing and
efficient results. Experiments are done using
MATLAB 7.1 in a Dell Inspiron machine with dual
core processor (1.66GHz) and 1 GB RAM. We
evaluate the performance of our system by fitting
parametric curves to different binary images.

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

(a)

(b)

(c)

(d)

Figure 1. Pre-processing steps: (a) original
image, (b) outline of the image, (c) corner
points achieved, (d) fitted outline of the
image.
Figure 1 shows the implementation results of the
algorithm: Figures 1(a), 1(b), 1(c) and 1(d) are the
original image of an Arabic language word "ilm", its
outline, outline together with corner points detected,
and fitted outline together with corner points and
intermediate points respectively.
Figures 2(a), 2(b), 2(c) and 2(d) demonstrate,
respectively, 1st, 5th, 10th and last (62th) iteration, on
average per segment, of the algorithm using StocE.
This is done without inserting any intermediate point
in any of the curve segment.
One can notice that after some iterations, although
an approximation curve has been achieved, still it is
required to have some further improvements. Figures
1(d) demonstrates the improvement in the output. This
is done by inserting some appropriate intermediate
points in the desired curve segments. It is very
obviously noticeable that after some iterations, a
pleasing approximate curve has been achieved.
However, an extra cost of having more intermediate
points has been paid together with the cost of more
iterations. This cost, the authors believe, is bearable as
the computation time consumed is not very significant
as compared to the time paid to achieve
approximation in Figure 2. Moreover, accuracy
achieved is much higher and visually acceptable.
Tables 1 to 4 summarize the experimental results
for different bitmap images. These results highlight
various information including contour details of
images (Table 1), comparison of objective function

Table 3. Comparison of no of intermediate
points and total times taken (in seconds).

(a)

(b)
Ellipses.bmp
Fork.bmp
Ilm.bmp

With
Intermediate
Points

Image

Total Time
Taken For
Cubic
Interpolation
Without
Intermediate
Points

# of
Initial
Corner
Points

# of Intermediate Points
in Cubic Interpolation

values (Table 2), intermediate points (Table 3),
number of iterations (Table 4).

7
2
6

12.2428
8.72232
20.1547

28.5504
12.2587
37.0251

4
10
18

Table 4. Comparison of no of iterations taken
by StocE with and w/out intermediate points.
(c)

(d)

# of Iterations taken by StocE

Figure 2. Demonstration of spline fitting at
different iterations (average per segment)
using StocE without intermediate point: (a) 1st
(b) 5th (c) 10th (d) 62nd (final) iteration.
Table 1. Names and contour details of
images.
Image

Name

# of
Contours

# of
Contour
Points
[1106+61+8
3]

Plane.bmp

3

Fork.bmp

1

[693]

Ilm.bmp

1

[1641]

Table 2. Comparison of objective functions.
Image

Plane.bmp
Fork.bmp
Ilm.bmp

Objective Function Value For
Cubic Interpolation
Without
Intermediate
Points
872.4879
607.8554
2472.3781

With
Intermediate
Points
797.6351
466.9425
929.7588

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

Image

Ellipses.bmp
Fork.bmp
Ilm.bmp

Cubic
Interpolation
Without
Intermediate
Points

Cubic
Interpolation
With
Intermediate
Points

476
918
1710

1253
1012
2563

7. Conclusion and future work
An outline capture technique, for planar images,
has been proposed and demonstrated. It has various
phases including extracting outlines of images,
detecting corner points, and addition of extra knot
points if needed. The last phase uses the idea of knot
insertion in a fuzzy randomized manner. The proposed
algorithm is an iterative one and is computationally
efficient as compared to least square approach.

8. Acknowledgments
This work has been supported by the King Fahd
University of Petroleum and Minerals for the Project #
ICS/REVERSE ENG./312.

9. References
[1] Chetrikov, D. and Zsabo, S., A Simple and Efficient
Algorithm for Detection of High Curvature Points in
Planar Curves, In Proceedings of the 23rd Workshop of

[2]

[3]
[4]

[5]
[6]
[7]

[8]
[9]

[10]

[11]

[12]
[13]

[14]
[15]

the Australian Pattern Recognition Group, 1999, pp.
1751-2184.
Wang, W., Pottmann, H., and Liu, Y., Fitting B-Spline
Curves to Point Clouds by Squared Distance
Minimization, HKU CS Tech Report TR-2004-11,
2004.
Goshtasby A..A., Grouping and Parameterizing
Irregularly Spaced Points for Curve Fitting, ACM
Transactions on Graphics, 2000, pp. 185-203.
Sarfraz, M. and Khan, M.A., An Automatic Algorithm
for Approximating Boundary of Bitmap Characters,
Future Generation Computer Systems, 2004, pp. 13271336.
Sarfraz, M., Some Algorithms for Curve Design and
Automatic Outline Capturing of Images, International
Journal of Image and Graphics, 2004, pp. 301-324.
Hou, Z. J. and Wei, G.W., A New Approach to Edge
Detection, Pattern Recognition, 2002, pp. 1559-1570.
Reche, P., Urdiales, C., Bandera, A., Trazegnies, C.
and Sandoval, F. , Corner Detection by Means of
Contour Local Vectors, Electronic Letters, 2002,
38(14).
Marji, M. and Siv, P., A New Algorithm for Dominant
Points Detection and Polygonization of Digital Curves,
Pattern Recognition, 2003, pp. 2239-2251.
Sarfraz, M. and Raheem, M.A., Curve Designing Using
a Rational Cubic Spline with Point and Interval Shape
Control, IEEE Conference on Digital Object Identifier,
Information Visualization, 2000, pp. 63-68.
Wu-Chih Hu, Multiprimitive Segmentation Based on
Meaningful Breakpoints for Fitting Digital Planar
Curves with Line Segments and Conic Arcs, Image
and Vision Computing, 2005, pp. 783-789.
Kano, H., Nakata, H. and Martin, C. F., Optimal Curve
Fitting and Smoothing using Normalized Uniform BSplines: A Tool for Studying Complex Systems,
Applied Mathematics and Computation, 2005, pp. 96128.
Yang, Z., Deng, J., and Chen, F., Fitting Unorganized
Point Clouds with Active Implicit B-Spline Curves,
Visual Computer, 2005, pp. 831-839.
Lavoue, G., Dupont, F. and Baskurt, A., A New
Subdivision Based Approach for Piecewise Smooth
Approximation of 3D Polygonal Curves, Pattern
Recognition, 2005, pp. 1139-1151.
Yang, H., Wang, W., and Sun, J., Control Point
Adjustment for B-Spline Curve Approximation,
Computer Aided Design, 2004, pp. 639-652.
Yang, X., Curve Fitting and Fairing using Conic
Spines, Computer Aided Design, 2004, pp. 461-472.

Computer Graphics, Imaging and Visualisation (CGIV 2007)
0-7695-2928-3/07 $25.00 © 2007

[16] Sarfraz, M., Asim, M. R. and Masood, A., Piecewise
Polygonal Approximation of Digital Curves, Eigth
International Conference on Information Visualization,
2004.
[17] Horng, J. H., An Adaptive Smooting Approach for
Fitting Digital Planar Curves with Line Segments and
Circular Arcs, Pattern Recognition Letters, 2003, pp.
565-577.
[18] Sarkar, B., Singh, L. K., Sarkar, D., Approximation of
Digital Curves with Line Segments and Circular Arcs
using Genetic Algorithms, Pattern Recognition Letters,
2003, pp. 2585-2595.
[19] Carr, J. C., Beatson, R. K, Cherrie, J. B., Mitchell, T.
J., Fright, W.R., McCallum, B. C., and Evans, T. R.,
Reconstruction and Representation of 3D Objects with
Radial Basis Functions, In Proceedings of SIGGRAPH
01, 6776, 2001.
[20] Juttler, B., and Felis, A., A Least Square Fitting of
Algebraic Spline Surfaces, Advance Computer
Mathematics, 2002, pp. 135-152.
[21] Morse, B. S., Yoo, T. S., Chen, D. T., Rheingans, P.,
and Subramanian, K. R., Interpolating Implicit
Surfaces from Scattered Surface Data using Compactly
Supported Radial Basis Functions, In SMI 01
Proceedings of the International Conference on Shape
Modeling and Applications, 8998, IEEE Computer
Society, Washington DC, 2001.
[22] Yang, X. N. and Wang G. Z., Planar Point Set Fairing
and Fitting by Arc Splines, Computer Aided Design,
2001, pp. 35-43.
[23] Sarfraz M. (2002), Fitting Curve to Planar Digital Data,
Proceedings of the Sixth International Conference on
Information Visualization, IEEE Computer Society
Press.
[24] Sarfraz, M. and Rasheed, A. (2007), A Randomized
Knot Insertion Algorithm for Outline Capture of Planar
Images using Cubic Spline, The Proceedings of The
22th ACM Symposium on Applied Computing (ACM
SAC-07), Seoul, Korea, pp. 71 – 75, ACM Press.
[25] Saab, Y.G. and Rao, V.B. (1991), Stochastic
evolution: a fast effective heuristic for some generic
layout problems, Proceedings of the 27th ACM/IEEE
conference on Design automation, Orlando, Florida,
United States, Pages: 26 – 31, ACM Press.
[26] Hou Z. J., Wei G. W., A new approach to edge
detection, Pattern Recognition 35 (2002) 1559-1570.
[27] N. Richard, T. Gilbert, Extraction of Dominant Points
by estimation of the contour fluctuations, Pattern
Recognition (35), 2002, 1447-1462.

