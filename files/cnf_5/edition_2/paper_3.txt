2009 Sixth International Conference on Computer Graphics, Imaging and Visualization

Improving Non-Uniform Rational B-splines' Knot Removal
with Particle Swarm Optimization
Abdul Rahman Ibrahim

Siti Mariyam Shamsuddin, Aida Ali

Department of Graphics and Multimedia,
Faculty of Computer Science and
Information System,
Universiti Teknologi Malaysia
{ibrahman@putra.upm.edu.my}

Department of Graphics and Multimedia,
Faculty of Computer Science and
Information System,
Universiti Teknologi Malaysia
{mariyam@utm.my}{aida@utm.my}

algorithm is fast and numerically stable [1]. However,
such speed comes at a cost of heavy data production. It is
caused by redundant or overlapping data points at any
given curve. In order to reduce the data from an object
created with NURBS, a method known as knot removal
is used to remove redundant data points along a similar
curve [1]. This method relies on comparing the knot with
an error tolerance value. The value varies from different
sections of an object to the next. The value is determined
from its bound deviation and weight divided by the
maximum distance between two neighbouring knots.
Seeing as how the value varies from different parts of a
same object, this paper explores the possibility of
optimizing the error tolerance value automatically by
implementing PSO.
This paper is organised as follows: Section 2 will
cover the basis of NURBS and its knot removal
formulation. Section 3 will discuss the inclusion of PSO
within the knot removal method. Section 4 contains
results and discussions from the proposed method
followed by conclusions.

Abstract
Data reduction and shape accuracy are two things
that come in mind when it comes to computer graphics
research. One such algorithm used is Non-Uniform
Rational B-splines (NURBS). The method used to reduce
data in NURBS is via knot removal, which relies on an
error tolerance value. This paper proposes integrating
Particle Swarm Optimization (PSO) to determine the
error tolerance value. The approach has made
determining the error tolerance value an automatic
process. There is a small amount of success in
implementing this method thus far. It is not a perfect
solution as of yet, but it has potential to unite artificial
intelligence algorithms and computer graphics in efforts
to promote more avenues of research in this field.
Keywords--- NURBS, PSO, computer graphics, knot
removal.

1. Introduction

2. NURBS and knot removal formulation

The quest for efficiency is always about economics,
which is how to get maximum quality with minimal
resources. In computer graphics, it is the same. The goal
of achieving the highest accuracy with the least amount
of data would be more cost effective on computer
resources. One of the most robust algorithms in
achieving this is NURBS. This paper would like to draw
attention towards the process of achieving such a means.
In computer graphics, specifically in the field of
surface reconstruction, NURBS has been used as the de
facto standard in which objects are created due to its
flexibility in representing both freeform and analytical
shapes [1,2,8]. Designing with NURBS is intuitive; the
978-0-7695-3789-4/09 $25.00 © 2009 IEEE
DOI 10.1109/CGIV.2009.95

The following are the basic formulations of NURBS
and its accompanying knot removal method. Both are set
to skinning an object, which is passing a surface through
a given set of cross sectional curves. [1,4,7]

2.1. NURBS formulation
Given a set of K rational cross-sectional curves
Cwk(u), k=0,1,...k. NURBS curves and surfaces are
represented as below:
A NURBS curve of degree p:

24

n

Cwk(u)
(1)

Σ

=

Ni,p(u)

Ni,p(u) and Nj,q(v) are the B-spline basis functions.
While Ri,j(u,v), the rational B-spline basis functions are
defined over the knot vector as thus:

Pwi

U = {a,...,a,up+1,...,un,b,...,b}
V = {a,...,a,vq+1,...,vm,b,...,b}

i=0

where Pwi = (wixi, wiyi, wizi, wi) are the weighted
control points. Ni,p(u), i=0,1,....n are the B-spline
functions. It can be written in rational form:

2.2. Knot removal formulation

n

Ck(u)
(2)

with ends (p+1) and (q+1) and multiple knots of U
and V respectively.

Σ

=

Ri,p(u)

For any rational cross-sectional curve, Cw(u) , which
has the largest number of control points from the knot
vector U, coincidental knots are removed without
deterring from the original shape.
Removal of knots meant that the control points will
have to be recomputed to preserve the shape. Removed
knots are determined by an error tolerance value which is
given by this function [1]:

Pi

i=0

where Pi = (xi, yi, zi) are 3D control points. Ri,p(u),
i=0,1,...,n are rational B-spline functions. This is also
defined as:
Ri,p(u) = Ni,p(u)wi

, i = 0,1,.....,n.

TOL
(7)

(3)

n

=

l=0

where TOL is the error tolerance value, d is the
desired bound on deviation, wmin represents minimum
weight on the curve and |P|max being the maximum
distance between two knots. If the distance between two
concurrent knots are equal or less than the error tolerance
value, that knot is removed and the control points and
remaining knots are shifted down to fill the gap of the
removed knot.
Knots are removed u = ur multiple times. Thus for
the tth time the knots are removed:

where wl is the weight linked to each control point
Pl . Rational and irrational B-spline basis functions
Ri,p(u) and Ni,p(u) are defined over the knot vector:
U = {a,...,a,up+1,...,un,b,...,b}
A NURBS surface of degree p
n

m

=

Σ

q is:

Σ

Pti = Pit-1 – (1-αi) Pti-1
(8)
αi

Ni,p(u)Nj,q(v)Pwi,j

i=0 j=0

Ptj = Pjt-1 – αj Ptj+1
(1- αj )

where Pwi,j = (wi,jxi,j, wi,jyi,j, wi,jzi,j, wi,j) this is the
control net of the weighted control points. Ni,p(u) and
Nj,q(v), i = 0,1,...,n; j = 0,1,...,m are the B-spline basis
functions. The rational form of (4) is as follows:
n

S(u,v)
(5)

m

=
i=0

wmin

1 + |P|max

Σ Nl,p(u)wl

Sw(u,v)
(4)

d

Σ

Σ

0.5(2r-p-s+t+1) ≤ j ≤ r-s+t-1

with
αi =

u-ui
ui+p+t -ui

αj =

u-uj-t+1
uj+p+t -uj-t+1

Ri,j(u,v)Pi,j

j=0

where Pi,j = (xi,j,yi,j,zi,j) are control points. Ri,j(u,v) are
the rational B-spline basis functions, with the definitions:
Ri,j(u,v) =
(6)

r-p-t+1 ≤ i ≤ 0.5(2r-p-s-t)

(9)

Each time a knot is removed, s and r are
decremented and the superscripts on the control points
are incremented. This is simulated in (8).

Ni,p(u) Nj,q(v) wi,j

3. PSO implementation in knot removal

Σnk=0 Σml=0 Nk,p(u) Nl,q(v) wk,l

The error tolerance value is not concrete for each
curve. Different values produce different results be it in
the number of data present to the accuracy of the shape.

i = 0,1,...,n ; j = 0,1,...,m

25

This paper implements PSO with the error tolerance
function as the fitness function in determining the error
tolerance value by optimizing it within a set search
space.

TOL
(7)

=

d

wmin

1 + |P|max

3.1. PSO formulation and algorithm
PSO is an optimization algorithm propagated by
Eberhart and Kennedy by mimicking the pattern of birds
flocking [3].
The basis of PSO formulation and algorithm are as
follows:

d: The current particle random number in the population
of the search area.
wmin: Set to 1. Though it represents a rational B-spline
equation at this point, it still corresponds to NURBS'
own formula, which includes 1 as well. It is also a
minimal number in which all weights are homogenised.
Taking (10) and (11):

v[x] = v[x] + C1
C2

v[x] = v[x] + C1
C2

rand()
rand()

(pbest[x] – present[x]) +
(gbest[x] – present[x]) (10)

present[x] = present[x] + v[x]

(11)

rand()
rand()

(pbest[x] – present[x]) +
(gbest[x] – present[x]) (10)

present[x] = present[x] + v[x]

where v is the velocity of a particle, x being an
individual particle. C1 and C2 are learning factors,
usually C1 = C2 =2. The best result achieved by an
individual particle is denoted as pbest. While gbest is the
best result achieved among the entire particle within the
population. What this does is that a certain number of
particles move around in a designated search space,
arriving at solutions after each iterations. After a set
number of self-defined iterations, the particles tend to
converge on one point, arriving at the most optimal
solution.
Pseudocode for PSO is as follows:
For each particle
Initialize particle
End
Do
For each particle
Calculate fitness value
If the fitness value is better than the best fitness
value (pbest) in history
set current value as the new pbest
End
Choose the particle with the best fitness value of
all the particles as the gbest
For each particle
Calculate particle velocity according equation
(10)
Update particle position according equation
(11)
End
While maximum iterations or minimum error criteria
is not attained.

(11)

rand(): d (7).
pbest[]: current best TOL value for a single particle.
gbest[]: current best TOL value among all particles.
present[]: best TOL value among gbest[].
C1 = C2 = 2.
TOL ≥ 0.
Besides having a TOL value of greater than 0, it is
also important to note that the shape of the object will
distort if the value is too high. This is due to too many
knots being removed and the control points are relegated
to a position which made the Preservation of the original
object impossible. Therefore, the velocity cap is set at 2
and the search space is limited from 0 to 2 to avoid an
inappropriate value.
The rest of the knot removal method is executed
normally. Only then, the process involving the error
tolerance value is modified with PSO.

4. Results and discussion
Various items have been tested from simple objects
like a cup and goblet to highly complex objects such as a
ship's hull. Some results exhibit good data reduction but
failed to preserve shape accuracy. Others preserve the
shape of the original object, yet did not do better at data
reduction.

Method

3.2. Implementation
In determining the error tolerance value for knot
removal, the fitness function chosen to implement PSO
with is (7). Owing to the properties of the error tolerance,
its value cannot be ≤ 0 or knots will not be removed at
all. Therefore, in implementing PSO within the error
tolerance function, equations (7),(10) and (11) are used:
Taking (7):

Hyungjun

-

Preserved

Hybrid
Parameterization

20%

Preserved

Proposed method

22%

No

Method
Hyungjun

26

Table 1: FRD Oil Tanker
Data
Shape
Reduction
Preservation

Table 2: Fireboat
Data
Shape
Reduction
Preservation
81%

Preserved

Hybrid
Parameterization

88%

Preserved

with funds, RMC of SPSUTM for giving us the required
support and to our friends and families as well.

Proposed method

94%

No

References

Method
Hyungjun

76%

Preserved

Hybrid
Parameterization

92%

Preserved

Proposed method

92%

Preserved

Method

[1]

Table 3: Laughing Buddha
Data
Shape
Reduction
Preservation

[2]
[3]

[4]
[5]

Table 4: Stanford Dragon
Data
Shape
Reduction
Preservation

Hyungjun

70%

Preserved

Hybrid
Parameterization

82%

Preserved

Proposed method

83%

[6]
[7]
[8]

Preserved

A ship's hull is an object that is the most complex to
reconstruct and optimize in NURBS. While the data
reduction rate is increased, the accuracy suffered as it
failed to maintain the shape due to a bigger error
tolerance value. However, in other tests, the results were
not desirable, but accuracy was Preserved.
Common error tolerance values used with the
current models tested are between 0.002 – 0.15.
However, the results garnered are between 0.05 – 3.8. A
result of more than 2 is gathered because the value is
modified by velocity within PSO. Therefore, a high
value that removes more knots than intended is still
possible.

Conclusions
What this paper has demonstrated is that optimization
methods such as PSO can be used to determine the error
tolerance value, which was previously determined in a
subjective manner. Although the results were not so
desirable when being tested on complex objects such as a
ship's hull, it was successful when tested on simpler
objects. The error tolerance value itself was crucial in the
successes and failures of the experiments. Optimization
methods such as PSO rely heavily on its parameterisation
to achieve satisfactory results on its own. Therefore,
either a variant of PSO can be used to perfect this
research or new parameters be introduced.

Acknowledgment
The authors would like to thank Universiti Teknologi
Malaysia for providing us with the infrastructure for
doing our research, MOSTI and FRGS for providing us
27

Piegl L. and Wayne T. (1997) The NURBS Book, 2nd ed.
Springer-Verlag, Berlin Heidelberg New York
Shamsuddin S. M., et al. NURBS skinning surface for
ship hull design based on new parameterization method.
In Int J Manuf Technnol (2006) 28: 936-941
Kennedy, J. and Eberhart, R. C. Particle swarm
optimization. In IEEE int'l conf. on neural networks Vol.
IV, pp. 1942-1948. IEEE service center, Piscataway, NJ,
1995.
Rogers D. F. (2001) An introduction to NURBS.
Kauffman, San Francisco.
Hyungjun P. (2001) An approximate lofting approach for
B-spline surface interpolation to serial contours. In Int J
Manuf Technol 23:889-895.
Matthias E., Hadenfeld J. (1994) Knot removal for Bspline curves. In Comput Aided Graph Des 8:185-208
Piegl L., Wayne T. (2002) Surface skinning revisited. In
IEEE Comput Graph Appl 18:273-283
Ang S. W. et al. (2006) Optimized NURBS ship hull
fitting using simulated annealing. In Proceedings of the
International Conference on Computer Graphics,
Imaging and Visualisation (CGIV'06)

