2009 Sixth International Conference on Computer Graphics, Imaging and Visualization

Nonlinear Image Interpolation Using Adaptive Conic Blending Spline
Huanxi Zhao, Chuan Sun2 , Keshou Wu∗1
Department of Computer Science, Xiamen University of Technology, Xiamen 361024, China
2
School of Information Science and Engineering, Central South University, Changsha 410083, China
hxzhao@mail.csu.edu.cn, sundeepblue@gmail.com, kswu@xmut.edu.cn
1

as an ill-posed inverse problem. Instead of simply fitting
the interpolation function, many methods also consider the
geometry information of the image. Li et al. [8] proposes
an edge-directed interpolation algorithm by first estimating
local covariance coefficients from a low-resolution image
and then performing interpolation based on the geometric
duality (New Edge Directed Interpolation, NEDI for short).
Recently, Asuni [1] proposes an improved New EdgeDirected Interpolation (iNEDI for short) , which can produce
the resampled image with very high quality but needs huge
computational complexity.
In this paper we propose a new method for image interpolation. We construct a conic blending procedure to yield
the G1 continuous blended spline. Based on the spline, we
formulate the kernel function for interpolating the natural
images. Experimental results show that the interpolation
results using our proposed method is superior to the traditional interpolation methods such as bilinear and bicubic
interpolation, even the recently proposed iNEDI method [1].
The paper is organized as follows. The conic blending
spline is described in Section 2. The adaptive blendingbased interpolation function is presented in Section 3, and
the Section 4 is dedicated to the implementation and analysis
of the proposed interpolation method. In Section 5 we
demonstrate the experimental results with three test cases to
verify the effectiveness of our method, and the last section
is for conclusion.

Abstract—A new adaptive rational image interpolation algorithm is proposed. For a natural image, according to the
difference information of the local pixel gray value in the
vertical and horizonal direction, a conic blending spline with
large weight parameters is employed to reconstruct sharp edges
and image details within the interpolated image, and one with
small weight is used to reduced the blocking artifacts. The
proposed algorithm exhibits significant improvement in image
quality when compared with the conventional polynomial spline
type algorithms, especially at high resolution, such as four times
or more.
Keywords-Conic blending, spline, adaptive, image interpolation

I. I NTRODUCTION
Image interpolation is proved to be an useful tool in such
diverse fields as medical imaging, consumer electronics and
military applications. The standard procedure for interpolation is to fit the data with a continuous function and resample
the function at finer intervals as desired. The difference
among various approaches lies in the interpolation model
that is chosen [6], [7]. Various algorithms for image interpolation have been proposed in the literature. Among them,
the simplest is the nearest neighbor function where the value
at the interpolation point is the same as the value at the grid
point closest to it. In the linear interpolation, the unknown
point is interpolated linearly between the grid points. Bicubic
and cubic spline interpolators (fast or High-Resolution Bspline [10], [12]) are the standard techniques preferred in
commercial image processing tools due to their improved
performance and moderate complexity. It is well known that
lower order interpolation methods are the simplest and the
fastest, but they produce block or mosaic effects at high
resolution. Higher order interpolation methods, particularly
smoothing splines perform better though they tend to blur
the image. In addition, the fast or High-Resolution B-spline
interpolation has an inherent limit in the contrast of the
interpolated image.
In order to solve the above mentioned problems, we need
to recover the high frequency component of original digital
image, which has been filtered out by the lowpass filter.
A number of algorithms have been proposed to improve
the subjective quality of the interpolation results. Iterative
methods such as PDE-based schemes [2], [9] and projection
onto convex sets (POCS [11]) formulate the interpolation
978-0-7695-3789-4/09 $25.00 © 2009 IEEE
DOI 10.1109/CGIV.2009.93

II. C ONIC BLENDING SPLINE
Consider the rational quadratic B´ezier representation of
the conic section:
B(t) =

(1 − t)2 Pi−1 + 2wt(1 − t)Pi + t2 Pi+1
,
(1 − t)2 + 2wt(1 − t) + t2

(1)

where w is the middle control weight and Pi−1 , Pi , Pi+1
are three successive control points of the B´ezier curve. For
t ∈ [0, 1], the curve is a segment of ellipse if 0 < w < 1, a
segment of parabola if w = 1, and a segment of hyperbola
if w > 1, respectively. If we replace Pi in Eq. (1) with Pi∗
i+1
defined as Pi∗ = w1i [(1+wi )Pi − Pi−1 +P
], we can build a
2
conic section that passes through three non-collinear points
Pi−1 , Pi , Pi+1 . Then we have the interpolatory rational
B´ezier form of the conic section
361

1
0.8

0.06

0.6

0.04

0.4

0.02

0.2

0

0

−0.02

−0.2
−0.04
−0.4
−5

Figure 1. Blending five points using three conic sections. Each conic
section is constructed using three consecutive points.

0
(a)

5

0.06

0.06

0.04

0.04

0.02

0.02

0

0

−0.02

−0.02

−0.04

Bi (t) =

Figure 2.

(t2 −t)Pi−1 +(1−t2 )(1+wi )Pi +(t2 +t)Pi+1
.
1+(1−t2 )wi +t2

Remark: In this paper, for the consideration of convenience, we use the equally spaced parametrization instead
of Chordal parametrization to represent the conic sections.
If we define the linear conic blending function as
Si (t) = (1 − t)Ri (t) + tLi+1 (t)

0
(c)

5

−5

0
(d)

5

Interpolation error f (x) − fI (x) for the Gaussian function

x2

the cubic spline interpolation has a relatively better interpolation performance. But the blending result of the proposed method is superior to the former two. The following
conclusion is therefore straightforward: in the sharpness or
cusp area of the control polygon the conic blending spline
exhibits superior interpolation ability than the classical linear
or cubic spline.
We can rewrite the interpolation function in Eq. II in the
i+2
form Si (x) = k=i−1 p(xk )σ(x−xk ), where p(xk ) are the
samples and σ(x) is the interpolation kernel. We have

(2t2 −6t+4)Pi−1 +(4t−2t2 )(1+wi )Pi +(2t2 −2t)Pi+1
(2−t)2 +2wi t(2−t)+t2

Ri (t) =

5

f (x) = e− 2 . (a) Sample point of the Gaussian function. (b) standard
linear interpolation. (c) Cubic spline interpolation. (d) adaptive conic
blending spline interpolation when wi = wi+1 = 0.6.

In this case, the point Pi is also the shoulder point,
which splits the rational B´ezier curve Bi (t) into two adjacent
curve segments when t = 12 . Without loss of generality,
we name the first segment and the second segment Li and
Ri , respectively, in the order of Pi−1 , Pi , and Pi+1 . We
will use these symbols in the entire paper. Let tL = 2t for
tL ∈ [0, 12 ] and tR = 2t + 12 for tR ∈ [ 12 , 1], we should have
the expressions of Li (t) and Ri (t) with t ∈ [0, 1]
Li (t) =

0
(b)

−0.04

−5

(2t2 −3t+1)Pi−1 +(2t−2t2 )(1+wi )Pi +(2t2 −t)Pi+1
.
(1−t)2 +2wi t(1−t)+t2

−5

⎧
⎪
Bi+2 (x + 2)
⎪
⎪
⎪
⎪
⎪
B
⎨ i+1 (x + 1)
σ(x) = Bi (x − 1)
⎪
⎪
⎪
Bi−1 (x − 2)
⎪
⎪
⎪
⎩0

(2)

we can achieve a C 1 continuous blended curve
{Si (t)}i∈[0,n] , where t ∈ [0, 1]. The proof is similar
to the one of the linear circular blending method presented
in [13]. Note that every single conic section Bi has a
tension parameter wi that can affect the shape of the
final blended curve, as illustrated in Fig.1. In Eq.2, Si (t)
i+2
can be expressed as Si (t) =
k=i−1 Bk (t)Pk ,, where
i+2
B
=
1
and
the
expression
of Bk are listed in the
k
k=i−1
Appendix.

−2 x −1,
−1 < x 0,
0 < x 1,
1 < x 2,
|x| > 2.

(3)

The kernel function σ(x) is composed of piecewise ( 54 )
and ( 32 ) type rational fractions defined on the interval
[−2, 2]. The two free parameters wi and wi+1 in the kernel
enable us to construct a family of blending-based interpolation functions. The comparison between several commonlyused interpolation kernel functions is illustrated in Fig.3. The
nearest neighbor algorithm has the one interpixel distance in
the image domain. It does well in the pass zone but poor
in stop zone response. The linear interpolating algorithm
extending over two interpixel distances has better overall
response. The conic blending spline extends over four interpixel distances. It has better response in both the pass zone
and the stop zone. In particular, if we let wi = wi+1 = 1,
we have Bi−1 = − 12 t3 + t2 − 12 t, Bi = 32 t3 − 52 t2 + 1,
Bi+1 = − 32 t3 + 2t2 + 12 t, and Bi+2 = 12 t3 − 12 t2 , which
is identical with the Catmull-Rom cubic interpolation kernel
function [5].

III. A DAPTIVE BLENDING - BASED INTERPOLATION
KERNEL FUNCTION

Interpolation kernel function should be approximate to
the ideal sinc interpolation to reconstruct signals [4]. We
select several samples of equal sampling from the Gaussian
x2
function f (x) = e− 2 . Different interpolation methods are
adopted to interpolate these samples, as shown in Fig.2. As
we can see, the interpolation error of linear interpolation
around the coordinate origin fluctuates distinctly, whereas
362

1

For Dj+1 , the rule is the same. After the two weights are
specified, we can obtain the grayvalue of the unknown pixel
Xi,j+0.5 by using the conic blending spline interpolation.
3) Compute all the unknown pixels in the image Y.
Perform the interpolation horizontally and vertically, we
shall achieve the resampled image Y. For example, if we
want to obtain the greyvalue of the unknown pixel Pu in
Fig.4, we can follow the rule in the step 2 after the four
pixels Xi−1,j+0.5 , Xi,j+0.5 , Xi+1,j+0.5 and Xi+2,j+0.5 are
decided.
Although the proposed interpolation method requires to
compute additional information about the original image, the
increased computational complexity is relatively acceptable
since the quality of the reconstructed image is superior
than the traditional interpolation methods like bilinear and
bicubic interpolation, as illustrated in the next section. We
compare the difference of grayvalue of nearby pixels with
a precomputed threshold, then adaptively decide the two
weights of the interpolation function. By means of this
strategy, the smoothness within the image and sharpness
between the flat region and cliff region can both be kept.

(a)
(b)
(c)
(d)
(e)
(f)
(g)

0.5

0

−0.5
−2

−1.5

−1

−0.5

0

0.5

1

1.5

2

Figure 3. Comparison between different interpolation kernel functions. (a)
ideal sinc, (b) linear, (c) Nearest-neighbor, (d) Cubic spline, (e) Piecewise
cubic Hermite, (f) Blending-based, (g) Cubic B-spline.

IV. I MPLEMENTATION AND ANALYSIS
Suppose the low-resolution image is X and the highresolution image to be generated is Y. The resampling
process of the proposed method consists of the following
steps.
1) Estimate the global average threshold Tavg for the
edge pixels in the image X. Since edge pixels often consist
of a small fraction of a whole image, we can compute
the average gray value of the edge pixels with a relatively
low computational complexity. We do not necessarily use a
certain edge detection operator like Sobel, Prewitt, Roberts,
etc. The value of Tavg primarily acts as a benchmark for the
pixels in the image Y to guide the selection of two weights
in the kernel function.
2) Determine two weights for the low-resolution image.
Suppose we want to determine the intensity of the unknown
pixel Xi,j+0.5 , as shown in Fig.4. We need to interpolate the four successive pixels Xi,j−1 , Xi,j , Xi,j+1 and
Xi,j+2 . To preserve more edge information in the image
X, we introduce the following strategy for the selection
of the two weights wi and wi+1 . First, we set the two
weights to be unequal. The larger one, denoted by wlarge ,
is responsible for the reconstruction of sharp edges and
image details within the image X, whereas the smaller one,
denoted by wsmall , is responsible for reducing the blocking
artifacts. Second, we compute the difference of the local
pixel grey value in the vertical and horizonal direction. Let
dk = absolute(Xi,k − Xi,k−1 ) for k = j, j + 1, j + 2. Then
we have Dk = absolute(dk − dk−1 ) for k = j + 1, j + 2. As
for the the four successive pixels Xi,j−1 , Xi,j , Xi,j+1 and
Xi,j+2 , the value of Dk represents the difference of these
pixels, which provide a simple way to detect the edge and
sharpness information with merely addition and substraction
operations. Third, we compare Dj+1 and Dj+2 with the
threshold Tavg , respectively. For example, if Dj+1 > Tavg ,
then wlarge is specified to wi ; else wsmall is specified to wi .

V. E XPERIMENTAL RESULTS
We have used three photographic images: A-letter, Lena,
and flower as the benchmark images to evaluate the effectiveness of the proposed method. We compare our method
with the bilinear interpolation, the bicubic interpolation, and
the Improved New Edge-Directed Interpolation (iNEDI for
short) [1]. We implement the bilinear and bicubic interpolation using the embedded functions in MATLAB [3].
The comparison results of running time between the four

i−1

i
(i,j)

(i,j−1)

(i,j+1)

(i,j+2)

Pu
i+1

i+2

j−1

Figure 4.

363

j

j+1

j+2

Compute unknown pixel using four nearby pixels.

methods are listed in Table I. The initial configuration of
parameters of our method is also provided.

(a)

(b)

(a)

(b)

(c)

(d)

(c)

Figure 5. Test images and their selected regions for interpolation. (a)
A-letter; (b) Lena; (c) flower.

In the experiment of A-letter, the low-resolution grayscale
image with the size of 46× 40 in Fig.5(a) has been upsampled by a factor of eight along each dimension. It
can observed that the edges in our interpolation result in
Fig.6(a-d) are desirably preserved, and the annoying artifacts
are dramatically suppressed. From visual inspection, our
method produces better images than bilinear and bicubic
interpolation, while the iNEDI method is visually better
still. However, the running time and computational burden
of iNEDI is drastically enormous. In addition, it seems
that iNEDI method changes the contrast of the image. The
bilinear interpolation suffers from blurring of edges, and the
bicubic method introduces sharper edges but more artifacts.
We use a color image of Lena in Fig.5(b) with the size of
60× 60. To resample it by a factor of four, we interpolate
the R, G and B channels separately and then we combine
them together to produce the final interpolation result. We
can observe that the edge of Lena’s hat in Fig.6(e-h) is
preserved more in our proposed method than both bilinear
and bicubic. As for the iNEDI method, the edges seem to
be over-sampled, and the image is stylized, more like an
oil painting. In Fig.7(a-d), we upsample a color image of a
flower stem with the size of 100× 100 by a factor of four.

(e)

(f)

(g)

(h)

Figure 6.
Interpolation results of the selected regions of Fig.5(a)(b)
using (a, e) bilinear interpolation, (b, f) bicubic interpolation, (c, g) iNEDI
method, and (d, h) the proposed method.

VI. C ONCLUSION
In this paper, we present a novel nonlinear image interpolation method using conic blending splines. We first
formulate the G1 continuous conic blending spline. Then
we propose the adaptive blending-based interpolation kernel
function for the image interpolation. The two weights in
the kernel function are adaptively determined by adapting
the difference of grayvalue of neighborhood pixels and
a precomputed threshold. The larger weight is introduced
to reconstruct sharp edges and image details within the
interpolated image, whereas the smaller one is used to
reduce the blocking artifacts. With this strategy, the proposed
method can be used in the fields that high interpolation result
is required.

We have tested lots of natural image, and we have
observed that if the larger weight wlarge is set to be larger
than 1.0, and the small weight wsmall is set to be within
the interval [0, 0.1], then the sharpness of edges can be
preserved, and the artifacts can be suppressed. In short,
the proposed method achieves a better tradeoff between
visual quality and computational complexity. It preserves
the geometric regularity around the image edges and achieve
interpolated image with higher visual quality.
364

Table I
T HE COMPARISON OF COMPUTATIONAL COMPLEXITY BETWEEN DIFFERENT INTERPOLATION METHODS .
Image
A-letter
Lena
Flower

Bilinear
0.53
0.61
0.72

Bicubic
0.75
0.89
1.01

iNEDI
102.05
110.54
186.74

runing time
4.76
2.52
6.49

Proposed
Tavg
wlarge
100
1.1
50
1.61
70
1.61

wsmall
0.004
0.0032
0.032

with

(a)

ui
di
ei
fi
gi
hi
ui+1
di+1
ei+1
fi+1
gi+1
hi+1

(b)

=
=
=
=
=
=
=
=
=
=
=
=

(wi − 1)t2 − wi − 1
wi+1 − 2 + wi wi+1
−2wi wi+1 + 4 − 2wi+1
−2 − wi wi+1 − 2wi − wi+1
2wi wi+1 + 2wi+1
2 + 2wi
(wi+1 − 1)t2 + (2 − 2wi+1 )t − 2
wi − 2 + wi wi+1
−2wi wi+1 + 4 − 2wi
−2 − wi wi+1 − 2wi+1 − wi
2wi wi+1 + 2wi + 4wi+1
2
R EFERENCES

[1] N. Asuni. inedi - tecnica adattativa per i’interpolazione di
immagini. Master’s thesis, University of cagliari, 2007.
[2] B. Ayazifar and J. S. Lim. Pel-adaptive model-based interpolation of spatially subsampled images. IEEE Int. Conf.
Acoustics, Speech, Signal Processing, 3:181–184, 1992.
(c)

(d)

[3] S. J. Chapman. Matlab programming for engineers (second
edition). Thomson Lerning, 2002.

Figure 7. Interpolation results of the selected regions of Fig.5(c) using
(a) bilinear interpolation, (b) bicubic interpolation, (c) iNEDI method, and
(d) the proposed method.

[4] J. Comes and L. Velho. Image processing for computer
graphics. New York, pages 187–213, 1997.
[5] C. E. and R. R. A class of local interpolating splines.
Computer Aided Geometric Design, pages 317–326, 1974.

A PPENDIX

[6] H. Hou and H. Andrews. Cubic splines for image interpolation and digital filtering. IEEE Trans. Accoust. Speech Signal
Process, 26(6), 1978.
[7] R. Keys. Cubic convolution interpolation for digital image
processing. IEEE Trans. Accoust. Speech Signal Process, 29,
1981.

Appendix

[8] X. Li and M. Orchard. New edge directed interpolation. Proc.
IEEE Int. Conf. Image Processing, 2:311–314, 2000.

Bi−1

=

Bi

=

Bi+1

=

Bi+2

=

[9] B. S. Morse and D. Schwartzwald. Isophote-based interpolation. Proc. IEEE Int. Conf. Image Processing, 3:227–231,
1998.

t3 − 2t2 + t
ui
(1 − t)(di t4 + ei t3 + fi t2 + gi t + hi )
ui ui+1
t(di+1 t4 + ei+1 t3 + fi+1 t2 + gi+1 t + hi+1 )
ui ui+1
−t3 + t2
ui+1

[10] J. Parker, R. Kenyon, and D. Troxel. Comparison of interpolating methods for image resampling. IEEE Trans. Med.
Imaging, 2, 1983.
[11] K. Ratakonda and N. Ahuja. Pocs based adaptive image
magnification. Proc. of Intl. Conf. on Image Processing,
3:203–207, 1998.
365

[12] M. Unser, A. Aldroubi, and M. Eden. Fast b-spline transforms
for continuous image representation and interpolation. IEEE
Trans. Image Process, 13(6), 1978.
[13] Wenz and H.-J. Interpolation of curve data by blended
generalized circles. Computer Aided Geometric Design,
13:673–680, 1996.

366

